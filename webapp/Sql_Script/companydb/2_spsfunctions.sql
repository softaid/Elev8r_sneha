DELIMITER $$
CREATE PROCEDURE `get_feedmill_production_issue_batchwise_unitcost`(
 IN p_transactiondate DATE,
 IN p_item_id INT,
 In p_to_warehouse_id INT,
 IN p_quantity DECIMAL(15,3),
 IN p_companyid INT)
BEGIN
DECLARE p_unitcost DECIMAL(30,6);
DECLARE i INT;
DECLARE material_quantity DECIMAL(15,3);
DECLARE material_itembatch VARCHAR(300);

SET @@sql_mode = '';

 SET @row_number = 0;
SET @reccount = 0;
SET i = 0;
  DROP TEMPORARY TABLE IF EXISTS tempitembatch;
  CREATE TEMPORARY TABLE tempitembatch
SELECT trsaction_id,itembatch,unitcost,
       (fnc_feedmill_itembatchbalance(IFNULL(itembatch,''),p_item_id,p_to_warehouse_id,p_companyid)) as quantity,
       transactiondate,
        (@row_number := @row_number + 1) as recordrank2 FROM (
	SELECT
		DISTINCT MOM.id as trsaction_id,
		GROUP_CONCAT(MOM.itembatch) as itembatch,
        (SUM(itemvalue)/SUM(quantity))as unitcost,
        transactiondate
        
	FROM materialmovement MOM
    
  where  MOM.transactiondate<=p_transactiondate AND
		 MOM.itemid = p_item_id AND 
         MOM.towarehouseid =p_to_warehouse_id AND
         FIND_IN_SET(MOM.transactiontypeid, '681,682,684,685') AND
         MOM.companyid = p_companyid 
   GROUP BY MOM.itembatch 
   ) as tem_batch order by transactiondate asc,trsaction_id asc;
   
   SELECT COUNT(*) INTO @reccount FROM  tempitembatch;
   DROP TEMPORARY TABLE IF EXISTS tempoissuedetail;
CREATE TEMPORARY TABLE tempoissuedetail
(
itembatch varchar(200),
issue_qty DECIMAL(15,3),
unit_cost DECIMAL(15,6),
batch_totalcost DECIMAL(15,6));
   
      WHILE i<@reccount DO
			
			SET @issuequantity = 0;
			SET @p_unitcost = null;
            SET @material_quantity = null;
			SELECT itembatch,quantity,unitcost
			 INTO   material_itembatch, material_quantity,p_unitcost
			FROM  tempitembatch where recordrank2 = i+1;
            
                IF(material_quantity > 0) THEN
					IF (material_quantity >= p_quantity) THEN
						SET @issuequantity = p_quantity;
						SET p_quantity = 0;
					ELSE 
						SET @issuequantity = material_quantity;
                        SET p_quantity = p_quantity - material_quantity;
					END IF;
				END IF;
				   if (@issuequantity >0) then
                  INSERT INTO tempoissuedetail VALUES
                 ( material_itembatch,@issuequantity,p_unitcost,(@issuequantity*p_unitcost));
				
				 
              END IF;
            
        	SET  i = i + 1; 
	    END WHILE;
	SELECT GROUP_CONCAT(itembatch) as itembatch,SUM(issue_qty) as issue_qty ,
           GROUP_CONCAT(unit_cost),SUM(batch_totalcost) as batch_totalcost,p_item_id as itemid,
           p_to_warehouse_id as warehouseid ,I.itemname as itemname
           FROM tempoissuedetail 
            LEFT JOIN item I ON p_item_id = I.id
          group by p_item_id;
      
         
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `get_modulewise_cumulativefeed`(
	IN p_batchid INT(11),
    IN p_shedid INT(11),
    IN p_transactiondate DATE,
    IN p_moduleid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	IF(p_moduleid = 723) THEN
		SELECT IFNULL(fnc_calculate_cummactconcbf(p_batchid, p_shedid, p_transactiondate, p_companyid),0) as cumfeed;
    END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `layer_dash_board`(
IN p_company_id INT(11))
BEGIN
 SELECT SUM(quantity) as liveqty
 FROM layerbatch LB 
 Inner JOIN layerbatchbalance LBB ON LBB.layerbatchid =  LB.id AND LBB.itemid = LB.itemid  AND quantity>0
 WHERE LB.companyid = p_company_id AND LB.statusid = 982 ;
 
 SELECT LB.id,SUM(LED.quantity) as collected_eggs
 FROM layerbatch LB 
 Inner JOIN layereggscollection LEC ON LEC.layerbatchid =  LB.id  AND LEC.statusid = 1091
  Inner JOIN layereggsdistributiondetail LED ON LED.eggscollectionid =  LEC.id  AND LED.statusid = 1110
 WHERE LB.companyid = p_company_id AND LB.statusid = 982 ;
 
  SELECT SUM(todaymortality) as totalmortality
 FROM layerbatch LB 
 Inner JOIN layerdailytransaction LDT ON LDT.layerbatchid =  LB.id AND LDT.statusid=1170
 Inner JOIN layerdailymortality LDM ON LDM.layerdailytransactionid =  LDT.id AND LDM.itemid = LB.itemid
 WHERE LB.companyid = p_company_id AND LB.statusid = 982 ;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `pc_party_select`(
	IN p_id INT
)
BEGIN
    
	SELECT
			P.id,
            P.partyname,
            P.partyroleids,
			(SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(P.id, P.partyroleids)) as partyroles,
            P.phoneno,
            P.contactperson,
            P.cstno,
            P.gstin,
            P.panno,
            P.postalcode,
            P.emailid,
            P.shippingcontactperson,
            P.shippingcontactno,
            P.creditlimit,
            P.creditperiod,
            P.servicetaxno,
            P.supplierledgerid,
            COA1.glcode as supplierglcode,
            COA1.coaname as supplierledgername,
            P.customerledgerid,
            COA2.glcode as customerglcode,
            COA2.coaname as customerledgername,
            P.companyid,
            P.partygroupid,
            PG.partygroupname,
			P.partycode,
            P.moduleid,
             P.bankname,
			P.accounttype,
			P.bankbranch,
			P.ifsccode,
			P.accountno
            
			
	FROM party P
    LEFT JOIN partygroup PG ON PG.id = P.partygroupid
    LEFT JOIN chartofaccount COA1 ON COA1.id = P.supplierledgerid
    LEFT JOIN chartofaccount COA2 ON COA2.id = P.customerledgerid
  	WHERE P.id = p_id;
    
    
    SELECT
			id,
            addresstypeid,
            address,
            cityid,
            stateid,
            countryid,
            locationcontactno,
            pincode,
            gstno,
            gsttypeid
	
    FROM partyaddress
    WHERE partyid = p_id;
    
    SELECT
			id,
            mobileno,
            faxno
	
    FROM partycontact
    WHERE partyid = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_accesstoken_save`(
	IN p_userid INT,
    IN p_accesstoken TEXT(500),
    -- IN p_loggedin TINYINT(4),
    IN p_companyid INT,
    OUT out_id INT
)
BEGIN
	
    
	UPDATE user1 SET accesstoken = p_accesstoken
    WHERE id = p_userid AND companyid = p_companyid;
    
    SELECT id INTO out_id FROM user1 WHERE id = p_userid;
    
    /*UPDATE user1 SET loggedin = 1
    WHERE id = p_userid AND companyid = p_companyid;*/

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_accountledgers_search`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		 COA.id,
         coaname as ledgername,
         glcode,
         CC.category
         
	FROM
		chartofaccount COA
        LEFT JOIN coacategory CC ON CC.id = COA.categoryid
        
	WHERE
		 COA.companyid = p_companyid
         AND COA.coatypeid = 1003; -- ledger
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_accountsitemopeningbalance_delete`(
	IN p_id INT,
	IN p_companyid INT
)
BEGIN

	DELETE FROM accounts_itemopeningbalance 
    
    WHERE id = p_id AND companyid = p_companyid;
    
    SET @jeid = null;
    SELECT id INTO @jeid FROM journalentry WHERE transactionid = p_id AND journalentrysubject = 'Item opening balance JE' AND narration = 'Item opening balance JE';

	DELETE FROM journalentry WHERE id = @jeid;
	DELETE FROM journalentrydetail WHERE journalentryid = @jeid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_accountsitemopeningbalance_save`(
   IN p_id INT(11),
   IN p_postingdate DATE,
   IN p_itemid INT,
   IN p_warehouseid INT,
   IN p_warehousebinid INT,
   IN p_openingbalance DECIMAL(20,3),
   IN p_unitprice DECIMAL(12,6),
   IN p_total DECIMAL(30,6),
   IN p_ledgerid INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    -- create itembatch for opening balance
    SET @itembatch = null;
    SET @itemgroup = null;

    select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch
    from item I
	INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

	WHERE I.id = p_itemid;
	
	SELECT @itembatch;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO accounts_itemopeningbalance 
				(id, postingdate, itemid, warehouseid, warehousebinid, 
                openingbalance, unitprice, total, 
                ledgerid, companyid)
			VALUES 
				(p_id, p_postingdate, p_itemid, p_warehouseid, p_warehousebinid, 
                p_openingbalance, p_unitprice, p_total, 
                p_ledgerid, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE accounts_itemopeningbalance
				SET postingdate = p_postingdate,
                itemid = p_itemid,
                warehouseid = p_warehouseid,
                warehousebinid = p_warehousebinid, 
                openingbalance = p_openingbalance,
                unitprice = p_unitprice,
                total = p_total, 
                ledgerid = p_ledgerid,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
           
			SET @jeid = null;
			SELECT id INTO @jeid FROM journalentry WHERE transactionid = p_id AND journalentrysubject = 'Item opening balance JE' AND narration = 'Item opening balance JE';

			DELETE FROM journalentry WHERE id = @jeid;
			DELETE FROM journalentrydetail WHERE journalentryid = @jeid;
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- start insert JE for item opening balance
    SET @branchid = null;
    SELECT L.branchid INTO @branchid FROM location L
    LEFT JOIN warehouse W ON W.id = p_warehouseid
    WHERE W.locationid = L.id;
    
			SET @jeid = null;
			CALL spc_journalentry_save(
				NULL,
				NULL,
				1299,
				NULL,
				p_postingdate,
				NULL,
				@branchid,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                341,
				NULL,
				'Item opening balance JE',
				NULL,
				NULL,
				NULL,
				out_id,
				'Item opening balance JE',
				p_companyid,
                p_userid,
                @jeid
			);
            
            -- credit to selected ledgerid
            SET @jedetailid = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				p_ledgerid,
				0,
				NULL,
				NULL,
				NULL,
                NULL,
				NULL,
				NULL,
				NULL,
				0,
				p_total,
				NULL,
				NULL,
				NULL,
				p_itemid,
				NULL,
				'GRPO JE',
				p_companyid,
				p_userid,
				@jedetailid
			 );
			
			-- Debit to item(master) ledgerid
			
			 SET @jedetailid1 = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				(SELECT ledgerid FROM item WHERE id = p_itemid),
				0,
                NULL,
				@batchid,
				NULL,
				NULL,
                NULL,
				NULL,
				NULL,
				p_total,
				0,
				NULL,
				NULL,
				NULL,
				p_itemid,
				NULL,
				'GRPO JE',
				p_companyid,
				p_userid,
				@jedetailid1
			 );
    
    -- END JE
    
    -- get item group id from the item id and update itemgroup table
		SELECT itemgroupid INTO @itemgroup FROM item WHERE id = p_itemid;
		
		UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
		
		WHERE id = @itemgroup; 
            
    -- Do material movement entry for material transfer
        SET @out_movid = NULL;
		CALL spc_materialmovement_save(
			NULL, p_itemid, @itembatch, 685,
			out_id, p_postingdate, p_openingbalance,
			NULL, NULL,
            p_warehouseid, p_warehousebinid,
			p_total,
			p_companyid, p_userid, @out_movid
		);
        
	-- End material movement
    
   -- record log
   -- CALL spc_commonlog_save(p_companyid, 'accounts_itemopeningbalance', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_accountsitemopeningbalance_search`(
	IN p_companyid INT
)
BEGIN

	SELECT IOB.*, DATE_FORMAT(IOB.postingdate,'%d/%m/%Y') as postingdate, I.itemcode, I.itemname, W.warehousename, WB.binname, COA.coaname as ledgername, COA.glcode
    
    FROM accounts_itemopeningbalance IOB
    LEFT JOIN item I ON I.id = IOB.itemid
    LEFT JOIN chartofaccount COA ON COA.id = IOB.ledgerid
    LEFT JOIN warehouse W ON W.id = IOB.warehouseid
    LEFT JOIN warehousebin WB ON WB.id = IOB.warehousebinid
    
    WHERE IOB.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_accountsitemopeningbalance_select`(
	IN p_id INT,
	IN p_companyid INT
)
BEGIN

	SELECT IOB.*, DATE_FORMAT(IOB.postingdate,'%d/%m/%Y') as postingdate, I.itemcode, I.itemname, W.warehousename, WB.binname, COA.coaname as ledgername, COA.glcode
    
    FROM accounts_itemopeningbalance IOB
    LEFT JOIN item I ON I.id = IOB.itemid
    LEFT JOIN chartofaccount COA ON COA.id = IOB.ledgerid
    LEFT JOIN warehouse W ON W.id = IOB.warehouseid
    LEFT JOIN warehousebin WB ON WB.id = IOB.warehousebinid
    
    WHERE IOB.id = p_id AND IOB.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_account_crdr_search_list`( 
 IN p_vouchertypeid INT,
 IN p_from_date DATE,
 IN p_to_date DATE,
 IN p_company_id INT)
BEGIN

 SELECT JE.vouchertypeid,
		   REF.refname,
		   JE.id,
           DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate, 
           DATE_FORMAT(JE.bankdate,'%d/%m/%Y') as bankdate,
           JE.chequeno, 
           DATE_FORMAT(JE.chequedate,'%d/%m/%Y') as chequedate, 
           JE.byhand, 
           JE.partyid, 
           JE.partycode, 
           JE.subledgertypeid,
           REF1.refname as subledger,
		   JE.approvestatusid, 
           JE.journalentrysubject, 
           JE.addressto, 
		   JE.financialyear, 
           JE.bankid, 
           JE.narration,
           B.bankname,
           CB.branchname,
           AD.dimensionname,
           P.partyname,
           JE.moduleid,
           JE.jeno
           
    FROM journalentry JE 
    LEFT JOIN `reference` REF ON JE.vouchertypeid = REF.id
    LEFT JOIN `reference` REF1 ON JE.subledgertypeid = REF1.id
    LEFT JOIN bank B ON B.id = JE.bankid
    LEFT JOIN commonbranch CB ON CB.id = JE.branchid
    LEFT JOIN party P ON P.id = JE.partyid
    LEFT JOIN accounts_dimension AD ON AD.id = JE.dimensionid
    
    WHERE JE.companyid = p_company_id  AND JE.voucherdate between p_from_date AND p_to_date AND JE.vouchertypeid = p_vouchertypeid
    
    ORDER BY JE.id desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_account_incomingpayment_search_list`( 
 IN p_voucher_mode_id VARCHAR(200),
 IN p_from_date DATE,
 IN p_to_date DATE,
 IN p_company_id INT,
 IN p_vouchertypeid VARCHAR(200))
BEGIN

 SELECT JE.vouchertypeid,
		   REF.refname,
		   JE.id,
		   JE.vouchermodeid, 
           DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate, 
           DATE_FORMAT(JE.bankdate,'%d/%m/%Y') as bankdate,
           JE.chequeno, 
           DATE_FORMAT(JE.chequedate,'%d/%m/%Y') as chequedate, 
           JE.byhand, 
           JE.partyid, 
           JE.partycode, 
           JE.subledgertypeid, 
		   JE.approvestatusid, 
           JE.journalentrysubject, 
           JE.addressto, 
		   JE.financialyear, 
           JE.bankid, 
           JE.narration,
           B.bankname,
           CB.branchname,
           AD.dimensionname,
           P.partyname,
           JE.moduleid,
           JE.jeno,
		   REF1.refname as vouchermodename
           
    FROM journalentry JE 
    LEFT JOIN `reference` REF ON JE.vouchertypeid = REF.id
    LEFT JOIN `reference` REF1 ON JE.vouchermodeid = REF1.id
    LEFT JOIN bank B ON B.id = JE.bankid
    LEFT JOIN commonbranch CB ON CB.id = JE.branchid
    LEFT JOIN party P ON P.id = JE.partyid
    LEFT JOIN accounts_dimension AD ON AD.id = JE.dimensionid
    
    WHERE JE.companyid = p_company_id AND  find_in_set(JE.vouchermodeid,p_voucher_mode_id) AND JE.voucherdate between p_from_date AND p_to_date AND find_in_set(JE.vouchertypeid,p_vouchertypeid) 
    
    ORDER BY JE.id desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_account_journalentry_search_list`( 
 IN p_voucher_type_id VARCHAR(200),
 IN p_from_date DATE,
 IN p_to_date DATE,
 IN p_company_id INT)
BEGIN
 SELECT JE.vouchertypeid,
		   REF.refname,
		   JE.id,
		   JE.vouchermodeid, 
           DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate, 
           DATE_FORMAT(JE.bankdate,'%d/%m/%Y') as bankdate,
           JE.chequeno, 
           DATE_FORMAT(JE.chequedate,'%d/%m/%Y') as chequedate, 
           JE.byhand, 
           JE.partyid, 
           JE.partycode, 
           JE.subledgertypeid, 
		   JE.approvestatusid, 
           JE.journalentrysubject, 
           JE.addressto, 
		   JE.financialyear, 
           JE.bankid, 
           JE.narration,
           B.bankname,
           CB.branchname,
           AD.dimensionname,
           P.partyname,
           JE.moduleid,
           JE.jeno
           
    FROM journalentry JE 
    LEFT JOIN `reference` REF ON JE.vouchertypeid = REF.id
    LEFT JOIN bank B ON B.id = JE.bankid
    LEFT JOIN commonbranch CB ON CB.id = JE.branchid
    LEFT JOIN party P ON P.id = JE.partyid
    LEFT JOIN accounts_dimension AD ON AD.id = JE.dimensionid
    
    WHERE JE.companyid = p_company_id AND  find_in_set(JE.vouchertypeid,p_voucher_type_id) AND JE.voucherdate between p_from_date AND p_to_date
    
    ORDER BY JE.id desc;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_account_tds_delete`(
IN p_id INT(11)
)
BEGIN

	DELETE
		FROM account_tds
	WHERE   id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_account_tds_save`(
 IN p_id INT(11),
 IN p_section VARCHAR(100),
 IN p_description VARCHAR(200),
 in p_rate DECIMAL(9,3),
 IN p_ledgerid INT(11),
 IN p_companyid INT(11),
 IN p_userid INT(11),
 OUT out_id INT )
BEGIN
SET @action = null;
	IF EXISTS(
            SELECT id from account_tds where LOWER(section) = LOWER(p_section)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE
		BEGIN
				IF(NULLIF(p_id, '0') IS NULL) THEN
					INSERT INTO account_tds(section, description, rate, ledgerid, companyid)
					VALUES (p_section, p_description, p_rate, p_ledgerid, p_companyid);
					
					SET @action = 'INSERT';
				
				ELSE
					UPDATE account_tds
					SET section = p_section,
						description = p_description,
						rate = p_rate,
						ledgerid = p_ledgerid,
						companyid = p_companyid,
						id = LAST_INSERT_ID(id)
						
					WHERE id = p_id
					AND companyid = p_companyid;
					
					SET @action = 'UPDATE';
					
				END IF;
				
				SELECT LAST_INSERT_ID() INTO OUT_ID;
				
				-- record log
			   CALL spc_commonlog_save(p_companyid, 'account_tds', out_id, @action, p_userid);

			END;
		END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_account_tds_search`(
 IN p_companyid INT(11)
)
BEGIN
	 SELECT 
		ATDS.id,
		ATDS.section,
		ATDS.description,
		ATDS.ledgerid,
        ATDS.rate,
		ATDS.companyid,
		COA.glcode,
	    COA.coaname 
	 FROM account_tds ATDS
     LEFT JOIN chartofaccount COA ON COA.id = ATDS.ledgerid
		WHERE ATDS.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_account_tds_select`(
 IN p_id INT(11),
 IN p_companyid INT(11)
)
BEGIN
	 SELECT 
		id,
		section,
		description,
		ledgerid,
        rate,
		companyid
	 FROM account_tds 
		WHERE id  = p_id AND
			  companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_acknowledgementslipdetail_delete`(
IN p_id INT(11)

)
BEGIN
DELETE
FROM feedmill_acknowledgementslipdetail
WHERE   id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_acknowledgementslipdetail_save`(
IN p_id INT(11),
    IN p_ackid INT(11),
    IN p_purchaseorderid DECIMAL(9,3),
    IN p_itemid DECIMAL(9,3),
    IN p_quantity INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_acknowledgementslipdetail(id,ackid,purchaseorderid,itemid,quantity,companyid)
        VALUES (p_id, p_ackid,p_purchaseorderid,p_itemid,p_quantity,p_companyid);
        
        SET @action = 'INSERT';
        
        ELSE
        UPDATE feedmill_acknowledgementslipdetail
        SET  id = p_id,
			 ackid = p_ackid,
            purchaseorderid = p_purchaseorderid,
            itemid = p_itemid,
            quantity = p_quantity,
            companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_acknowledgementslipdetail', out_id, @action, p_userid);




END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_acknowledgementslipdetail_search`( 
IN p_ackid INT(11)
)
BEGIN
SET @@sql_mode = ' ';

SELECT  ASD.id,
        ASD.purchaseorderid,
        ASD.itemid,
        ASD.ackid,
        I.itemname,
        I.itemcode,
        ASD.quantity,
        FAS.materialweight,
        DATE_FORMAT( FAS.slipdate,'%d/%m/%Y') as slipdate,
        FAS.vehicleno,
        FAS.vehicleweight,
        FAS.receivedby,
        PO.purchaseorderno,
        QCD.resultid
           
    FROM feedmill_acknowledgementslipdetail ASD
    LEFT JOIN feedmill_acknowledgementslip FAS ON ASD.ackid = FAS.id
    LEFT JOIN purchaseorder PO ON ASD.purchaseorderid = PO.id
    LEFT JOIN feedmill_qualitycheck QC ON QC.ackid = ASD.ackid
    LEFT JOIN feedmill_qualitycheckdetail QCD ON QCD.qualitycheckid = QC.id
	LEFT JOIN item I ON ASD.itemid = I.id
    WHERE  
		 ASD.ackid = p_ackid
         group by ASD.id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_acknowledgementslipdetail_select`(
IN p_id INT(11),
IN p_companyid INT(11)
)
BEGIN
SELECT id,
		   ackid,
           purchaseorderid,
           itemid,
           quantity,
           companyid
		
				
	FROM feedmill_acknowledgementslipdetail

	WHERE companyid = p_companyid
	AND	id = p_id;            

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_acknowledgementsliplist_search`(
	IN p_from_date date,
	IN p_to_date date
)
BEGIN
SELECT ACK.id,
           DATE_FORMAT(ACK.slipdate,'%d/%m/%Y') as slipdate,
           ACK.vehicleno,
           ACK.vehicleweight,
           ACK.receivedby,
           ACK.materialweight,
           ACK.ackno
           -- QC.ackid
           
	FROM feedmill_acknowledgementslip ACK
   -- LEFT JOIN feedmill_qualitycheck QC ON QC.ackid = ACK.id
    
    WHERE
	(ACK.slipdate BETWEEN p_from_date AND p_to_date)
    ORDER BY ACK.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_acknowledgementslipreport_search`(
IN p_fromdate date,
IN p_todate date,
IN p_companyid INT(11) )
BEGIN
SET @@sql_mode = '';


SELECT 	 ASD.id,
	    ASD.ackid,
        ASD.purchaseorderid,
        ASD.itemid,
        I.itemname,
        ASD.quantity,
        FAS.materialweight,
        DATE_FORMAT( FAS.slipdate,'%d/%m/%Y') as slipdate,
        FAS.vehicleno,
        FAS.vehicleweight,
        FAS.receivedby,
        PO.purchaseorderno
        
 FROM feedmill_acknowledgementslipdetail ASD   
   LEFT JOIN item I ON ASD.itemid = I.id
    LEFT JOIN feedmill_acknowledgementslip FAS ON ASD.ackid = FAS.id
    LEFT JOIN purchaseorder PO ON ASD.purchaseorderid = PO.id
    
 WHERE
    FAS.slipdate BETWEEN p_fromdate AND p_todate 
    AND ASD.companyid = p_companyid
      GROUP BY  PO.purchaseorderno; 
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_acknowledgementslip_delete`(
IN p_id INT(11))
BEGIN
DELETE
FROM feedmill_acknowledgementslip
WHERE   id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_acknowledgementslip_save`(
IN p_id INT(11),
IN p_slipdate DATE,
IN p_vehicleno VARCHAR(45),
IN p_vehicleweight DECIMAL(9,3),
IN p_receivedby VARCHAR(45),
IN p_materialweight DECIMAL(12,3),
IN p_ackno VARCHAR(200),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT
)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_acknowledgementslip(id, slipdate,vehicleno,vehicleweight,receivedby,materialweight,ackno, companyid)
        VALUES (p_id, p_slipdate,p_vehicleno,p_vehicleweight,p_receivedby,p_materialweight,p_ackno, p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_acknowledgementslip
        SET slipdate = p_slipdate,
			vehicleno = p_vehicleno,
            vehicleweight = p_vehicleweight,
            receivedby = p_receivedby,
            materialweight = p_materialweight,
            ackno = p_ackno,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_acknowledgementslip', out_id, @action, p_userid);






END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_acknowledgementslip_search`(
IN p_companyid INT(11) 
)
BEGIN
SET @@sql_mode = ' ';
SELECT ACK.id,
           DATE_FORMAT(ACK.slipdate,'%d/%m/%Y') as slipdate,
           ACK.vehicleno,
           ACK.vehicleweight,
           ACK.receivedby,
           ACK.materialweight,
           ACK.ackno,
		   QC.id as qcid
           
	FROM feedmill_acknowledgementslip ACK
    LEFT JOIN feedmill_qualitycheck QC ON QC.ackid = ACK.id
    
    WHERE ACK.companyid = p_companyid
    group by ACK.id
    ORDER BY ACK.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_acknowledgementslip_search_formaterialreceipt`(
IN p_companyid INT(11) 
)
BEGIN
SET @@sql_mode = ' ';
SELECT     FAS.id,
		   FAS.id as ackid,
           FQC.id as qualityckeckid,
           FQCD.itemid,
           DATE_FORMAT(FAS.slipdate,'%d/%m/%Y') as slipdate,
           FAS.vehicleno,
           FAS.vehicleweight,
           FAS.receivedby,
           FAS.materialweight,
           FAS.ackno,
           FQC.qualitystatus,
           FWS.id as wtslipid
           
	FROM feedmill_acknowledgementslip FAS
    LEFT JOIN feedmill_qualitycheck FQC ON FQC.ackid = FAS.id
    LEFT JOIN feedmill_qualitycheckdetail FQCD ON FQCD.qualitycheckid = FQC.id
    LEFT JOIN feedmill_weightslip FWS ON FWS.ackid = FAS.id
    
    WHERE FAS.companyid = p_companyid
    AND  FQC.qualitystatus = 6155
    AND FWS.id IS NULL
    AND FQCD.resultid = 1661
    group by  FAS.id
    ORDER BY id DESC;
    
    SELECT     FAS.id,
		   FAS.id as ackid,
           FASD.itemid,
           DATE_FORMAT(FAS.slipdate,'%d/%m/%Y') as slipdate,
           FAS.vehicleno,
           FAS.vehicleweight,
           FAS.receivedby,
           FAS.materialweight,
           FAS.ackno
           
	FROM feedmill_acknowledgementslip FAS
    LEFT JOIN feedmill_acknowledgementslipdetail FASD ON FASD.ackid = FAS.id
    INNER JOIN feedmill_weightslip FWS ON FWS.ackid = FAS.id
    LEFT JOIN grpo G ON G.ackid = FAS.id
    
    WHERE FAS.companyid = p_companyid
    AND G.id IS NULL
    group by  FAS.id
    ORDER BY id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_acknowledgementslip_select`(
IN p_id INT(11),
IN p_companyid INT(11))
BEGIN
SELECT 		DATE_FORMAT(slipdate,'%d/%m/%Y') as slipdate,
		    vehicleno,
            vehicleweight,
            receivedby,
            materialweight,
            companyid,
            ackno
           
	FROM  feedmill_acknowledgementslip
    
    WHERE companyid = p_companyid
    AND id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_additionalincentive_delete`(
 IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM additionalincentive WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'additionalincentive', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_additionalincentive_save`(
   IN p_id INT(11),
   IN p_coststructureid INT(11),
   IN p_fromsellingrate DECIMAl(9,3),
   IN p_tosellingrate DECIMAL(9,3),
   IN p_incentive DECIMAl(9,3),
   IN p_maxincentive DECIMAL(9,3),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO additionalincentive 
				(coststructureid, fromsellingrate, tosellingrate, incentive, maxincentive, companyid)
			VALUES 
				(p_coststructureid, p_fromsellingrate, p_tosellingrate, p_incentive, p_maxincentive, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE additionalincentive
				SET coststructureid = p_coststructureid,
					fromsellingrate = p_fromsellingrate,
                    tosellingrate = p_tosellingrate,
                    incentive = p_incentive,
                    maxincentive = p_maxincentive,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'additionalincentive', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_additionalincentive_search`(
  IN p_coststructureid INT
)
BEGIN

	SELECT 
		 id,
         coststructureid,
         fromsellingrate,
         tosellingrate, 
         incentive,
         maxincentive,
         companyid
         
	FROM
		additionalincentive 
        
	WHERE
	coststructureid = p_coststructureid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_additionalincentive_select`(
  IN p_id INT
)
BEGIN

	SELECT 
		 id,
         coststructureid,
         fromsellingrate,
         tosellingrate, 
         incentive,
         maxincentive,
         companyid
         
	FROM
		additionalincentive 
        
	WHERE
	 (
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_ageindays`(
	IN p_batchplacementdate DATE,
    IN p_livebatchdate DATE
)
BEGIN

	SELECT DATEDIFF(p_livebatchdate,p_batchplacementdate) as ageindays;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_agewise_bodyweight`(
 IN p_itemid INT,
 IN p_ageindays INT
 )
BEGIN
	SELECT ifnull(CDSD.bodyweight,0) as bodyweight
    FROM cbfstandardchart CDS
		LEFT JOIN cbfstandardchartdetail CDSD ON CDSD.cbfstandardchartid = CDS.id
	WHERE CDS.breednameid = p_itemid
			AND CDSD.age = p_ageindays;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_allbreederbatchdetail_search`(
 IN p_companyid INT
 )
BEGIN
	SET @@sql_mode = '';

	SELECT
		BB.id as Breederbatchid,
		CONCAT(BB.batchname,'-',fnc_phaseby_week( TRUNCATE((((DATEDIFF(NOW(),fnc_getplacementdate(BB.id,p_companyid)))+1)/7),0))) as BatchName,
		-- DATE_FORMAT(fnc_getplacementdate (BB.id,p_companyid),'%d/%m/%Y') as  Placementdate,
        -- IFNULL(TRUNCATE((((DATEDIFF(NOW(),fnc_getplacementdate(BB.id,p_companyid)))+1)/7),0),0) as Ageinweek,
		-- IFNULL(DATEDIFF(NOW(),fnc_getplacementdate(BB.id,p_companyid)+1),0) as Ageindays,
        CONCAT((DATE_FORMAT(fnc_getplacementdate (BB.id,p_companyid),'%d/%m/%Y')),' Age(Days):',IFNULL(DATEDIFF(NOW(),fnc_getplacementdate(BB.id,p_companyid)+1),0),' Week:',IFNULL(TRUNCATE((((DATEDIFF(NOW(),fnc_getplacementdate(BB.id,p_companyid)))+1)/7),0),0),' Live:',(IFNULL(BBB.quantity,0) + IFNULL(BBB1.quantity,0)),' M:',IFNULL(BBB.quantity,0),'F:',IFNULL(BBB1.quantity,0)) as Placementdate,
        fnc_phaseby_week( TRUNCATE((((DATEDIFF(NOW(),fnc_getplacementdate(BB.id,p_companyid)))+1)/7),0)) as `Phase`,
		-- BF.phasename as `Phase`,
        -- spc_breederphase_byweek(TRUNCATE((((DATEDIFF(NOW(),fnc_getplacementdate(BB.id,p_companyid)))+1)/7),0)) as `Phase`,
        IFNULL(BBB.quantity,0) as MaleQty,
        IFNULL(BBB1.quantity,0) as FemaleQty,
        IFNULL(fnc_gettotalmortality(BB.id,NOW()),0) as Mortality,
        IFNULL(FORMAT(fnc_getavgfeed(BB.id,NOW())/((BBB.quantity) + (BBB1.quantity)),2),0) as AvgFeedConsumption,
        IFNULL(fnc_geteggscollection(BB.id,NOW()),0) as TotalEggsCollection,
        IFNULL(fnc_gethatchingeggs(BB.id,NOW()),0) as HatchingeEggs,
        IFNULL(FORMAT(fun_live_biredcost(BB.id,p_companyid,now()),2),0) as Birdcost ,
		IFNULL(FORMAT(fnc_breeder_biologicalvalue(BB.id,NOW(),fnc_getplacementdate(BB.id,p_companyid),p_companyid),2),0) as BiologicalValue,
        'Good' as color,
        null as scale,
		-- 'Up' as trend,
		fnc_getStdMortality((TRUNCATE((((DATEDIFF(NOW(),fnc_getplacementdate(BB.id,p_companyid)))+1)/7),0)), (IFNULL(fnc_gettotalmortality(BB.id,NOW()),0)),721) as trend,
        CONCAT('Avg-Feed:',IFNULL(FORMAT(fnc_getavgfeed(BB.id,NOW())/((BBB.quantity) + (BBB1.quantity)),2),0),' Cost/bird:',IFNULL(FORMAT(fun_live_biredcost(BB.id,p_companyid,now()),2),0),' Eggs:',IFNULL(fnc_geteggscollection(BB.id,NOW()),0),' HE:',IFNULL(fnc_gethatchingeggs(BB.id,NOW()),0),'(',FORMAT(((100*IFNULL(fnc_gethatchingeggs(BB.id,NOW()),0))/IFNULL(fnc_geteggscollection(BB.id,NOW()),0)),0),'%)') as footer,
		'EUR' as unit
        
	FROM 
        breederbatch BB
			LEFT JOIN breederbatchbalance BBB ON BBB.breederbatchid = BB.id AND BBB.itemid = BB.maleitemid
			LEFT JOIN breederbatchbalance BBB1 ON BBB1.breederbatchid = BB.id AND BBB1.itemid = BB.femaleitemid
            LEFT JOIN breederbatchplacement BBP ON BB.id = BBP.breederbatchid
			LEFT JOIN breederphase BF ON BBP.phasestatusid = BF.id
	Where
		BB.statusid = 222 AND (fnc_getplacementdate (BB.id,p_companyid)) IS NOT NULL
        
        GROUP BY BB.id;
        

	SELECT 
		BB.id as Breederbatchid,
        BB.batchname as BatchName,
		DATE_FORMAT(fnc_getplacementdate (BB.id,p_companyid),'%d/%m/%Y') as  Placementdate,
        TRUNCATE((((DATEDIFF(NOW(),fnc_getplacementdate(BB.id,p_companyid)))+1)/7),0) as Ageinweek,
		DATEDIFF(NOW(),fnc_getplacementdate(BB.id,p_companyid)+1) as Ageindays,
        fnc_phaseby_week( TRUNCATE((((DATEDIFF(NOW(),fnc_getplacementdate(BB.id,p_companyid)))+1)/7),0)) as `Phase`,
		-- BF.phasename as `Phase`,
        -- spc_breederphase_byweek(TRUNCATE((((DATEDIFF(NOW(),fnc_getplacementdate(BB.id,p_companyid)))+1)/7),0)) as `Phase`,
        IFNULL(BBB.quantity,0) as MaleQty,
        IFNULL(BBB1.quantity,0) as FemaleQty,
        IFNULL(fnc_gettotalmortality(BB.id,NOW()),0) as Mortality,
        IFNULL(FORMAT(fnc_getavgfeed(BB.id,NOW())/((BBB.quantity) + (BBB1.quantity)),2),0) as AvgFeedConsumption,
        IFNULL(fnc_geteggscollection(BB.id,NOW()),0) as TotalEggsCollection,
        IFNULL(fnc_gethatchingeggs(BB.id,NOW()),0) as HatchingeEggs,
        IFNULL(FORMAT(fun_live_biredcost(BB.id,p_companyid,now()),2),0) as Birdcost ,
		IFNULL(FORMAT(fnc_breeder_biologicalvalue(BB.id,NOW(),fnc_getplacementdate(BB.id,p_companyid),p_companyid),2),0) as BiologicalValue


	FROM 
		breederbatch BB 
		LEFT JOIN breederbatchbalance BBB ON BBB.breederbatchid = BB.id AND BBB.itemid = BB.maleitemid
		LEFT JOIN breederbatchbalance BBB1 ON BBB1.breederbatchid = BB.id AND BBB1.itemid = BB.femaleitemid
        LEFT JOIN breederbatchplacement BBP ON BB.id = BBP.breederbatchid
		LEFT JOIN breederphase BF ON BBP.phasestatusid = BF.id
        
	WHERE 
		BB.companyid = p_companyid AND BB.statusid = 222
        
        GROUP BY BB.id;


	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_alllayerbatchdetail_search`(
	IN p_companyid INT
 )
BEGIN

	SELECT
		LB.id as layerbatchid,
		CONCAT(LB.batchname,'-',LF.phasename) as BatchName,
        CONCAT((DATE_FORMAT(fnc_getlayerplacementdate (LB.id,p_companyid),'%d/%m/%Y')),' Age(Days):',IFNULL(DATEDIFF(NOW(),fnc_getlayerplacementdate(LB.id,p_companyid)+1),0),' Week:',IFNULL(TRUNCATE((((DATEDIFF(NOW(),fnc_getlayerplacementdate(LB.id,p_companyid)))+1)/7),0),0),' Live:',IFNULL(LBB.quantity,0)) as Placementdate,
		LF.phasename as `Phase`,
        IFNULL(LBB.quantity,0) as Qty,
        IFNULL(fnc_getlayertotalmortality(LB.id,NOW()),0) as Mortality,
        IFNULL(FORMAT((LDC.consumptionquantity/LBB.quantity),2),0) as AvgFeedConsumption,
        IFNULL(LECD.quantity,0) as TotalEggsCollection,
        IFNULL(LEDD.quantity,0) as TableEggs,
        -- IFNULL(FORMAT(fun_layerlive_biredcost(LB.id,p_companyid,now()),2),0) as Birdcost ,
		IFNULL(FORMAT(fnc_layer_biologicalvalue(LB.id,NOW(),fnc_getlayerplacementdate(LB.id,p_companyid),p_companyid),2),0) as BiologicalValue,
        null as color,
        null as scale,
		-- 'Up' as trend,
		fnc_getStdMortality((TRUNCATE((((DATEDIFF(NOW(),fnc_getlayerplacementdate(LB.id,p_companyid)))+1)/7),0)), (IFNULL(fnc_getlayertotalmortality(LB.id,NOW()),0)),725) as trend,
        CONCAT('Avg-Feed:',IFNULL(FORMAT((LDC.consumptionquantity/LBB.quantity),2),0),' Eggs:',IFNULL(LECD.quantity,0),' TE:',IFNULL(LEDD.quantity,0)) as footer,
		'EUR' as unit
        -- ' Cost/bird:',IFNULL(FORMAT(fun_layerlive_biredcost(LB.id,p_companyid,now()),2),0),
        
	FROM 
        layerbatch LB
			LEFT JOIN layerbatchbalance LBB ON LBB.layerbatchid = LB.id
            LEFT JOIN layerbatchplacement LBP ON LB.id = LBP.layerbatchid
			LEFT JOIN layerphase LF ON LBP.phasestatusid = LF.id
            LEFT JOIN layerdailytransaction LDT ON LDT.layerbatchid = LB.id AND LDT.transactiondate = now()
            LEFT JOIN layerdailyconsumption LDC ON LDC.layerdailytransactionid = LDT.id AND LDC.consumptiontypeid = 1149
            LEFT JOIN layereggscollection LEC ON LEC.layerbatchid = LB.id AND LEC.collectiondate = now()
            LEFT JOIN layereggscollectiondetail LECD ON LECD.eggscollectionid = LEC.id
            LEFT JOIN layereggsdistributiondetail LEDD ON LEDD.eggscollectionid = LEC.id AND LEDD.itemtypeid = 1129
			
	Where
		LB.statusid = 982 AND (fnc_getlayerplacementdate (LB.id,p_companyid)) IS NOT NULL;


	SELECT 
		LB.id as layerbatchid,
        LB.batchname as BatchName,
		DATE_FORMAT(fnc_getlayerplacementdate (LB.id,p_companyid),'%d/%m/%Y') as  Placementdate,
        TRUNCATE((((DATEDIFF(NOW(),fnc_getlayerplacementdate(LB.id,p_companyid)))+1)/7),0) as Ageinweek,
		DATEDIFF(NOW(),fnc_getlayerplacementdate(LB.id,p_companyid)+1) as Ageindays,
		LF.phasename as `Phase`,
        IFNULL(LBB.quantity,0) as Qty,
        IFNULL(fnc_getlayertotalmortality(LB.id,NOW()),0) as Mortality,
        IFNULL(FORMAT((LDC.consumptionquantity/LBB.quantity),2),0) as AvgFeedConsumption,
        IFNULL(LECD.quantity,0) as TotalEggsCollection,
        IFNULL(LEDD.quantity,0) as TableEggs,
       -- IFNULL(FORMAT(fun_layerlive_biredcost(LB.id,p_companyid,now()),2),0) as Birdcost,
		IFNULL(FORMAT(fnc_layer_biologicalvalue(LB.id,NOW(),fnc_getlayerplacementdate(LB.id,p_companyid),p_companyid),2),0) as BiologicalValue

	FROM 
		layerbatch LB
			LEFT JOIN layerbatchbalance LBB ON LBB.layerbatchid = LB.id
            LEFT JOIN layerbatchplacement LBP ON LB.id = LBP.layerbatchid
			LEFT JOIN layerphase LF ON LBP.phasestatusid = LF.id
            LEFT JOIN layerdailytransaction LDT ON LDT.layerbatchid = LB.id AND LDT.transactiondate = now()
            LEFT JOIN layerdailyconsumption LDC ON LDC.layerdailytransactionid = LDT.id AND LDC.consumptiontypeid = 1149
            LEFT JOIN layereggscollection LEC ON LEC.layerbatchid = LB.id AND LEC.collectiondate = now()
            LEFT JOIN layereggscollectiondetail LECD ON LECD.eggscollectionid = LEC.id
            LEFT JOIN layereggsdistributiondetail LEDD ON LEDD.eggscollectionid = LEC.id AND LEDD.itemtypeid = 1129
			
	Where
		LB.statusid = 982 AND (fnc_getlayerplacementdate (LB.id,p_companyid)) IS NOT NULL;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_amortization_save`(
	IN p_id INT,
    IN p_amortizationdate DATE,
	IN p_breederbatchid INT,
    IN p_femalelivequantity INT,
    IN p_malelivequantity INT,
    IN p_ageinweeks INT,
    IN p_ageindays INT,
    IN p_wipvalue DECIMAL(20,3),
    IN p_requiredbirdprice DECIMAL(20,3),
    IN p_requiredbirdvalue DECIMAL(20,3),
	IN p_eggsprediction INT,
    IN p_totaleggs INT,
    IN p_amortizationvalueofbird DECIMAL(20,3),
    IN p_amortizationno VARCHAR(200), 
    IN p_birdcost DECIMAL(20,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
	IF NOT EXISTS(SELECT * FROM amortization WHERE breederbatchid = p_breederbatchid) THEN
    
		INSERT INTO amortization (
						amortizationdate,
						breederbatchid,
						femalelivequantity,
						malelivequantity,
                        ageinweeks,
                        ageindays,
                        wipvalue,
                        requiredbirdprice,
                        requiredbirdvalue,
						eggsprediction,
                        totaleggs,
                        amortizationvalueofbird,
                        amortizationno,
                        birdcost,
						companyid
					)
			VALUE 	(
						p_amortizationdate,
						p_breederbatchid,
						p_femalelivequantity,
						p_malelivequantity,
                        p_ageinweeks,
                        p_ageindays,
                        p_wipvalue,
                        p_requiredbirdprice,
                        p_requiredbirdvalue,
						p_eggsprediction,
                        p_totaleggs,
                        p_amortizationvalueofbird,
                        p_amortizationno,
                        p_birdcost,
						p_companyid
					);
    	    
            SET @action = 'INSERT';
    END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'amortization', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_amortization_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
			A.id,
            DATE_FORMAT(A.amortizationdate,'%d/%m/%Y') as amortizationdate,
			A.breederbatchid,
            BB.batchname,
			A.femalelivequantity,
			A.malelivequantity,
			A.eggsprediction,
			A.wipvalue,
			A.ageinweeks,
            A.ageindays,
			A.requiredbirdprice,
			A.requiredbirdvalue,
			A.totaleggs,
            A.amortizationvalueofbird,
            A.amortizationno,
			A.birdcost
			
	FROM amortization A
    LEFT JOIN breederbatch BB ON BB.id = A.breederbatchid


	WHERE A.companyid = p_companyid
	ORDER BY A.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_amortization_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

    SET @labourcharge = null;
    SET @overheadcost = null;
    
    SELECT labourcharge, overheadcost
    INTO @labourcharge, @overheadcost
    FROM breedersetting
    WHERE companyid = p_companyid;
    
	SELECT
			A.id,
            DATE_FORMAT(A.amortizationdate,'%d/%m/%Y') as amortizationdate,
			A.breederbatchid,
            BB.batchname,
			A.femalelivequantity,
			A.malelivequantity,
			A.eggsprediction,
			A.wipvalue,
			A.ageinweeks,
            A.ageindays,
			A.requiredbirdprice,
			A.requiredbirdvalue,
			A.totaleggs,
            A.amortizationvalueofbird,
            A.amortizationno,
			A.birdcost
			
	FROM amortization A
    LEFT JOIN breederbatch BB ON BB.id = A.breederbatchid
			

	WHERE A.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_amortization_wipdetail`(
	IN p_breederbatchid INT,
    IN p_transactiondate DATE,
    IN p_companyid INT
)
BEGIN
     SET @@sql_mode = '';
     SET @maleitemid = NULL;
     SET @femaleitemid = NULL;
     SET @labourcharge = 0;
     SET @overheadcost = 0;
      SET @birdcoststd = null;
      SET @birdcostnonprodbird = null;
      SET @birdcost = 0;
      SET @nonproductiovebirdqty = 0;
      SET @amortizationcostnonprodbird = null;
     
     SELECT birdcoststd,birdcostnonprodbird,amortizationcostnonprodbird INTO @birdcoststd,@birdcostnonprodbird,@amortizationcostnonprodbird FROM breedersetting WHERE companyid = p_companyid limit 1;
	SELECT maleitemid,femaleitemid INTO @maleitemid,@femaleitemid FROM breederbatch WHERE id = p_breederbatchid;
		-- non productive bird 
        SELECT fnc_breederbatchwise_bird_cost(p_breederbatchid,p_transactiondate,p_companyid) INTO @birdcost;
        
        IF(@amortizationcostnonprodbird = 1) THEN
         SELECT spc_getbatchwise_nonproductive_bird(p_breederbatchid,p_companyid,p_transactiondate,@defaultfemalechickid) INTO @nonproductiovebirdqty;
        END IF;
        
	
   IF EXISTS(SELECT id FROM breederbatchplacement WHERE breederbatchid = p_breederbatchid AND id IS NOT NULL) THEN
   DROP TEMPORARY TABLE IF EXISTS temwipdetail;
   CREATE TEMPORARY TABLE temwipdetail
		SELECT
			BBP.breederbatchid,
			BBPD.breedershedid,
			BBP.placementdate,
            IFNULL(@labourcharge,0) as labourcharge,
			IFNULL(@overheadcost,0) as overheadexp,
			-- fun_live_biredcost(p_breederbatchid,p_companyid,p_transactiondate) as birdcost,
			fnc_breeder_batchwise_birdliveqty(p_breederbatchid,@maleitemid,p_transactiondate,p_companyid) as maleliveqty,
			fnc_breeder_batchwise_birdliveqty(p_breederbatchid,@femaleitemid,p_transactiondate,p_companyid) as femaleliveqty
		FROM
			breederbatchplacement BBP
			LEFT JOIN breederbatchplacementdetail BBPD ON BBPD.breederbatchplacementid = BBP.id 
		WHERE 
		BBP.breederbatchid = p_breederbatchid
       group by breederbatchid;
     
     ELSE  
     SET @labourcharge = 0;
      DROP TEMPORARY TABLE IF EXISTS temwipdetail;
      CREATE TEMPORARY TABLE temwipdetail
     
			SELECT
            BBO.breederbatchid,
			BBO.batchplacementdate,
            @labourcharge as labourcharge,
            IFNULL(BBOD.overheadexp,0) as overheadexp,
			-- fun_live_biredcost(p_breederbatchid,p_companyid,p_transactiondate) as birdcost,
			fnc_breeder_batchwise_birdliveqty(p_breederbatchid,@maleitemid,p_transactiondate,p_companyid) as maleliveqty,
			fnc_breeder_batchwise_birdliveqty(p_breederbatchid,@femaleitemid,p_transactiondate,p_companyid) as femaleliveqty

			FROM breederbatchlocationwiseopeningdetail BLO
			INNER JOIN breederbatchopening BBO ON BBO.id = BLO.breederbatchopeningid 
            INNER JOIN breederbatchfinancialopeningdetail BBOD ON BBO.id = BBOD.breederbatchopeningid
		WHERE 
		BBO.breederbatchid = p_breederbatchid
        
        group by BBO.breederbatchid;

        
        END IF;
        

        
	SELECT  
            breederbatchid,
			@maleitemid as maleitemid,
            @femaleitemid as femaleitemid,
			(maleliveqty) as malelivequantity,
            (femaleliveqty) as femalelivequantity,
           ((maleliveqty*@birdcost)+ (femaleliveqty*@birdcost))/((femaleliveqty) +(maleliveqty)) as birdcost,
            @labourcharge as labourcharge,
            (overheadexp +fun_overhed_exp(breederbatchid,721,p_transactiondate,p_companyid)) as overheadcost,
            @nonproductiovebirdqty as nonproductiovebirdqty
		from temwipdetail;
		-- group by breederbatchid;

	 -- Bird purchase cost
     


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_amortize_select`(
	IN p_companyid INT
)
BEGIN

	SELECT * FROM amortization
    
    WHERE companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_applicationsettings_save`(
   IN p_id INT(11),
   IN p_partywithmultipleroles SMALLINT(4),
   IN p_showdisplayprefix SMALLINT(4),
   IN p_recordsperpage INT(11),
   IN p_pdcreminder INT(11),
   IN p_creditperiodreminder INT(11),
   IN p_financialyearstartday INT(11),
   IN p_financialyearstartmonth INT(11),
   IN p_datedisplayformat VARCHAR(50),
   IN p_stocknamefields VARCHAR(500),
   IN p_requisitionapproval SMALLINT(4),
   IN p_poapproval SMALLINT(4),
   IN p_showmrpandassessment SMALLINT(4),
   IN p_purchaseenquiryprefix VARCHAR(50),
   IN p_purchaseorderprefix VARCHAR(50),
   IN p_purchasereturnprefix VARCHAR(50),
   IN p_quotationapproval SMALLINT(4),
   IN p_billapproval SMALLINT(4),
   IN p_proformainvoiceapproval SMALLINT(4),
   IN p_saleschallanapproval SMALLINT(4),
   IN p_salesquotationprefix VARCHAR(50),
   IN p_saleschallanprefix VARCHAR(50),
   IN p_salesbillprefix VARCHAR(50),
   IN p_servicebillprefix VARCHAR(50),
   IN p_proformainvoiceprefix VARCHAR(50),
   IN p_batchoutorder VARCHAR(50),
   IN p_calculatetaxbeforediscount SMALLINT(4),
   IN p_receiptvoucherapproval SMALLINT(4),
   IN p_paymentvoucherapproval SMALLINT(4),
   IN p_contravoucherapproval SMALLINT(4),
   IN p_journalvoucherapproval SMALLINT(4),
   IN p_receiptvoucherprefix VARCHAR(50),
   IN p_smtpserver VARCHAR(50),
   IN p_portno VARCHAR(15),
   IN p_host VARCHAR(100),
   IN p_emailid VARCHAR(100),
   IN p_password VARCHAR(50),
   IN p_emailretrycount INT(11),
   IN p_requiredssl SMALLINT(4),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT(11)
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO applicationsettings 
				(id, 
                partywithmultipleroles, 
                showdisplayprefix, 
                recordsperpage, 
                pdcreminder, 
                creditperiodreminder, 
                financialyearstartday, 
                financialyearstartmonth,
                datedisplayformat,
                stocknamefields,
                requisitionapproval,
                poapproval,
                showmrpandassessment,
                purchaseenquiryprefix,
                purchaseorderprefix,
                purchasereturnprefix,
                quotationapproval,
                billapproval,
                proformainvoiceapproval,
                saleschallanapproval,
                salesquotationprefix,
                saleschallanprefix,
                salesbillprefix,
                servicebillprefix,
                proformainvoiceprefix,
                batchoutorder,
                calculatetaxbeforediscount,
                receiptvoucherapproval,
                paymentvoucherapproval,
                contravoucherapproval,
                journalvoucherapproval,
                receiptvoucherprefix,
                smtpserver,
                portno,
                `host`,
                emailid,
                `password`,
                emailretrycount,
                requiredssl,
                companyid)
			VALUES 
				(p_id, 
				p_partywithmultipleroles,
                p_showdisplayprefix,
                p_recordsperpage,
                p_pdcreminder,
                p_creditperiodreminder,
                p_financialyearstartday,
                p_financialyearstartmonth,
                p_datedisplayformat,
                p_stocknamefields,
                p_requisitionapproval,
                p_poapproval,
                p_showmrpandassessment,
                p_purchaseenquiryprefix,
                p_purchaseorderprefix,
                p_purchasereturnprefix,
                p_quotationapproval,
                p_billapproval,
                p_proformainvoiceapproval,
                p_saleschallanapproval,
                p_salesquotationprefix,
                p_saleschallanprefix,
                p_salesbillprefix,
                p_servicebillprefix,
                p_proformainvoiceprefix,
                p_batchoutorder,
                p_calculatetaxbeforediscount,
                p_receiptvoucherapproval,
                p_paymentvoucherapproval,
                p_contravoucherapproval,
                p_journalvoucherapproval,
                p_receiptvoucherprefix,
                p_smtpserver,
                p_portno,
                p_host,
                p_emailid,
                p_password,
                p_emailretrycount,
                p_requiredssl,
                p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE applicationsettings
		SET partywithmultipleroles = p_partywithmultipleroles,
			showdisplayprefix = p_showdisplayprefix,
			recordsperpage = p_recordsperpage,
			pdcreminder = p_pdcreminder,
			creditperiodreminder = p_creditperiodreminder,
			financialyearstartday = p_financialyearstartday,
			financialyearstartmonth = p_financialyearstartmonth,
			datedisplayformat = p_datedisplayformat,
			stocknamefields = p_stocknamefields,
			requisitionapproval = p_requisitionapproval,
			poapproval = p_poapproval,
			showmrpandassessment = p_showmrpandassessment,
			purchaseenquiryprefix = p_purchaseenquiryprefix,
			purchaseorderprefix = p_purchaseorderprefix,
			purchasereturnprefix = p_purchasereturnprefix,
			quotationapproval = p_quotationapproval,
			billapproval = p_billapproval,
			proformainvoiceapproval = p_proformainvoiceapproval,
			saleschallanapproval = p_saleschallanapproval,
			salesquotationprefix = p_salesquotationprefix,
			saleschallanprefix = p_saleschallanprefix,
			salesbillprefix = p_salesbillprefix,
			servicebillprefix = p_servicebillprefix,
			proformainvoiceprefix = p_proformainvoiceprefix,
			batchoutorder = p_batchoutorder,
			calculatetaxbeforediscount = p_calculatetaxbeforediscount,
			receiptvoucherapproval = p_receiptvoucherapproval,
			paymentvoucherapproval = p_paymentvoucherapproval,
			contravoucherapproval = p_contravoucherapproval,
			journalvoucherapproval = p_journalvoucherapproval,
			receiptvoucherprefix = p_receiptvoucherprefix,
			smtpserver = p_smtpserver,
			portno = p_portno,
			`host` = p_host,
			emailid = p_emailid,
			`password` = p_password,
			emailretrycount = p_emailretrycount,
			requiredssl = p_requiredssl,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
 --  CALL spc_commonlog_save(p_companyid, 'applicationsettings', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_applicationsettings_search`(
	IN p_companyid INT
)
BEGIN

	/* for the boolean columns like partywithmultipleroles, 0 is selcted
       if column value is 1 (true) for the front end radio button 
	   selection  */
	SELECT
			id,
            CASE WHEN partywithmultipleroles = 1 THEN 0 ELSE 1 END as partywithmultipleroles,
			CASE WHEN showdisplayprefix = 1 THEN 0 ELSE 1 END as showdisplayprefix,
            recordsperpage,
            pdcreminder,
            creditperiodreminder,
            financialyearstartday,
            financialyearstartmonth,
            datedisplayformat,
            stocknamefields,
            CASE WHEN requisitionapproval = 1 THEN 0 ELSE 1 END as requisitionapproval,
            CASE WHEN poapproval = 1 THEN 0 ELSE 1 END as poapproval,
            CASE WHEN showmrpandassessment = 1 THEN 0 ELSE 1 END as showmrpandassessment,
            purchaseenquiryprefix,
            purchaseorderprefix,
            purchasereturnprefix,
            CASE WHEN quotationapproval = 1 THEN 0 ELSE 1 END as quotationapproval,
            CASE WHEN billapproval = 1 THEN 0 ELSE 1 END as billapproval,
            CASE WHEN proformainvoiceapproval = 1 THEN 0 ELSE 1 END as proformainvoiceapproval,
            CASE WHEN saleschallanapproval = 1 THEN 0 ELSE 1 END as saleschallanapproval,
            salesquotationprefix,
            saleschallanprefix,
            salesbillprefix,
            servicebillprefix,
            proformainvoiceprefix,
            batchoutorder,
            CASE WHEN calculatetaxbeforediscount = 1 THEN 0 ELSE 1 END as calculatetaxbeforediscount,
            CASE WHEN receiptvoucherapproval = 1 THEN 0 ELSE 1 END as receiptvoucherapproval,
            CASE WHEN paymentvoucherapproval = 1 THEN 0 ELSE 1 END as paymentvoucherapproval,
            CASE WHEN contravoucherapproval = 1 THEN 0 ELSE 1 END as contravoucherapproval,
            CASE WHEN journalvoucherapproval = 1 THEN 0 ELSE 1 END as journalvoucherapproval,
            receiptvoucherprefix,
            smtpserver,
            portno,
            `host`,
            emailid,
            `password`,
            emailretrycount,
            CASE WHEN requiredssl = 1 THEN 0 ELSE 1 END as requiredssl,
            companyid
			
	FROM applicationsettings 

	WHERE companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_apptransaction_search`(
	IN p_moduleid INT
)
BEGIN

	SELECT `id`,
		`moduleid`,
		`transactioncode`,
		`transactionname`,
		`productid`
	FROM `apptransaction`
    WHERE
		(p_moduleid is null OR moduleid = p_moduleid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_bankbookregister_report`(
	IN p_bankledgerid VARCHAR(16383),
    IN p_fromdate DATE,
	IN p_todate DATE,
    IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';

    SET @grandtotal = 'Grand Total';
    SET @cramount = null;
    SET @dramount = null;
    SET @from_date = DATE_SUB(p_fromdate, INTERVAL 1 DAY);
    
    SELECT (select REPLACE(cast(IFNULL(SUM(JED.cramount),0) as CHAR(100)), '-', '')), 
		   IFNULL(SUM(JED.dramount),0)
           
    INTO @cramount, @dramount
    FROM journalentrydetail JED
    LEFT JOIN journalentry JE ON JED.journalentryid = JE.id
    WHERE JE.voucherdate BETWEEN p_fromdate AND p_todate;
    
    SELECT null as voucherdate,
		   null as jeid,
           null as vouchertypeid,
           null as refname,
           'Opening Balance' as narration,
           ROUND(fnc_openingcreditdebitbalforledger(JED.acledgerid, @from_date, 'debit'),2) as dramount,
           ROUND(fnc_openingcreditdebitbalforledger(JED.acledgerid, @from_date, 'credit'),2) as cramount,
           null chequeno,
		   null as chequedate,
           null as branchname,
           null as bankid,
           null as acledgerid,
           null as glcode,
           null as partyid,
           null as partyname,
           ROUND(((fnc_openingcreditdebitbalforledger(JED.acledgerid, p_fromdate, 'debit'))-(fnc_openingcreditdebitbalforledger(JED.acledgerid, p_fromdate, 'credit'))),2) as closingbalance

           
	FROM journalentry JE
    LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    WHERE JE.companyid = p_companyid
    AND FIND_IN_SET(JED.acledgerid, p_bankledgerid)
    GROUP BY JED.acledgerid
    
    UNION ALL

	SELECT DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate,
		   JE.id as jeid,
           JE.vouchertypeid,
           REF.refname,
           JED.narration,
           IFNULL(JED.dramount,0) as dramount,
           IFNULL(JED.cramount,0) as cramount,
           JE.chequeno,
		   DATE_FORMAT(JE.chequedate,'%d/%m/%Y') as chequedate,
           JE.branchid,
           JE.bankid,
           JED.acledgerid,
           COA.glcode,
           JE.partyid,
           P.partyname,
           0 as closingbalance
           
	FROM journalentry JE
    
    INNER JOIN `reference` REF ON JE.vouchertypeid = REF.id
    INNER JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    INNER JOIN chartofaccount COA ON JED.acledgerid = COA.id
    INNER JOIN party P ON P.id = JE.partyid
    
    WHERE FIND_IN_SET(JED.acledgerid, p_bankledgerid)
    AND JE.companyid = p_companyid
    AND JE.voucherdate BETWEEN p_fromdate AND p_todate
    GROUP BY JE.id;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_bankreconciliation_save`(
	IN p_jeid INT,
    IN p_bankid INT,
    IN p_chequeclearancedate DATE,
    IN p_companyid INT,
    OUT out_id INT
)
BEGIN

	UPDATE journalentry 
    SET chequeclearancedate = p_chequeclearancedate
    WHERE id = p_jeid
    AND companyid = p_companyid;
    
    SELECT p_jeid INTO out_id;
    
    SET @vouchertypeid = null;
    SET @vouchermodeid = null;
    SET @voucherdate = null;
    SET @bankdate = null;
	SET @branchid = null;
    SET @uservoucherno = null;
    SET @chequeno = null;
    SET @chequedate = null;
    SET @byhand = null; 
	SET @deletestatusid = null;
    SET @partyid = null;
    SET @partycode = null;
    SET @subledgertypeid = null;
    SET @dimensionid = null;
	SET @moduleid = null;
    SET @approvestatusid = null;
    SET @journalentrysubject = null;
    SET @addressto = null;
	SET @financialyear = null;
    SET @bankid = null;
    SET @transactionid = null;
    SET @narration = null;
    
    SELECT vouchertypeid, vouchermodeid, voucherdate, bankdate,
            branchid, uservoucherno, chequeno, chequedate, byhand, 
            deletestatusid, partyid, partycode, subledgertypeid, dimensionid,
            moduleid, approvestatusid, journalentrysubject, addressto,
			financialyear, bankid, transactionid, narration
	INTO @vouchertypeid, @vouchermodeid, @voucherdate, @bankdate,
            @branchid, @uservoucherno, @chequeno, @chequedate, @byhand, 
            @deletestatusid, @partyid, @partycode, @subledgertypeid, @dimensionid,
            @moduleid, @approvestatusid, @journalentrysubject, @addressto,
			@financialyear, @bankid, @transactionid, @narration
	FROM journalentry 
    WHERE id = p_jeid;
    
    SET @jeid = null;
    call spc_journalentry_save(
		null, null, @vouchertypeid, @vouchermodeid, @voucherdate, @bankdate,
		@branchid, @uservoucherno, @chequeno, @chequedate, @byhand, 
        @deletestatusid, @partyid, @partycode, @subledgertypeid, @dimensionid,
        @moduleid, @approvestatusid, @journalentrysubject, @addressto,
		@financialyear, @bankid, @transactionid, @narration, p_companyid, 1,
        @jeid
    );
    
    UPDATE journalentry 
    SET chequeclearancedate = p_chequeclearancedate
    WHERE id = @jeid
    AND companyid = p_companyid;
    
    SET @controlaccountledgerid = null;
    SELECT controlaccountledgerid INTO @controlaccountledgerid
    FROM common_setting
    WHERE companyid = p_companyid;
    
    SET @subledgertype_supplier = null;
    SELECT subledgertypeid INTO @subledgertype_supplier FROM journalentrydetail
    WHERE journalentryid = p_jeid LIMIT 1;
    
    SET @acledgerid = null;
    SELECT accountledgerid INTO @acledgerid
    FROM bank WHERE id = p_bankid;
    
    SET @cramount = 0;
    SET @dramount = 0;
    
    IF(@subledgertype_supplier = 1251) THEN
		SELECT cramount
        INTO @cramount
        FROM journalentrydetail
        WHERE journalentryid = p_jeid
        AND dramount = 0;
		SET @jedetailid = null;
        
		CALL spc_journalentrydetail_save(
			NULL, @jeid, @acledgerid, 0, NULL,
			NULL, NULL, NULL, NULL, NULL, NULL, 0, @cramount, NULL, NULL, NULL, 
			NULL, NULL, 'Bank Reconciliation JE', p_companyid, 1, @jedetailid
		);
		
		SET @jedetailid1 = null;
		CALL spc_journalentrydetail_save(
			NULL, @jeid, @controlaccountledgerid, 0, NULL,
			NULL, NULL, NULL, NULL, NULL, NULL, @cramount, 0, NULL, NULL, NULL, 
			NULL, NULL, 'Bank Reconciliation JE', p_companyid, 1, @jedetailid1
		);
	
    END IF;
	IF(@subledgertype_supplier = 1252) THEN
		SELECT dramount
        INTO @dramount
        FROM journalentrydetail
        WHERE journalentryid = p_jeid
        AND cramount = 0;
        
		SET @jedetailid = null;
		CALL spc_journalentrydetail_save(
			NULL, @jeid, @acledgerid, 0, NULL,
			NULL, NULL, NULL, NULL, NULL, NULL, @dramount, 0, NULL, NULL, NULL, 
			NULL, NULL, 'Bank Reconciliation JE', p_companyid, 1, @jedetailid
		);
		
		SET @jedetailid1 = null;
		CALL spc_journalentrydetail_save(
			NULL, @jeid, @controlaccountledgerid, 0, NULL,
			NULL, NULL, NULL, NULL, NULL, NULL, 0, @dramount, NULL, NULL, NULL, 
			NULL, NULL, 'Bank Reconciliation JE', p_companyid, 1, @jedetailid1
		);
    
    END IF;
    
     SELECT LAST_INSERT_ID() INTO out_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_bank_delete`(
	IN p_id INT(11)
)
BEGIN

	-- DELETE FROM bank WHERE id = p_id;
    
    UPDATE bank SET isdeleted = 1 WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_bank_save`(
   IN p_id INT(11),
   IN p_bankname VARCHAR(200),
   IN p_microcode VARCHAR(200),
   IN p_ifsccode VARCHAR(200),
   IN p_address VARCHAR(1000),
   IN p_phoneno VARCHAR(50),
   IN p_inactiveinyear VARCHAR(45),
   IN p_accounttypeid INT(11),
   IN p_accountledgerid INT(11),
   IN p_accountno VARCHAR(50),
   IN p_relationshipmanager VARCHAR(150),
   IN p_managercontactno VARCHAR(100),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO bank 
				(id, bankname, microcode, ifsccode, address, 
                phoneno, inactiveinyear, accounttypeid, 
                accountledgerid, accountno, relationshipmanager, managercontactno, isdeleted, companyid)
			VALUES 
				(p_id, p_bankname, p_microcode, p_ifsccode, p_address, 
                p_phoneno, p_inactiveinyear, p_accounttypeid, 
                p_accountledgerid, p_accountno, p_relationshipmanager, p_managercontactno, 0, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE bank
				SET bankname = p_bankname,
					microcode = p_microcode,
                    ifsccode = p_ifsccode,
                    address = p_address,
                    phoneno = p_phoneno,
                    inactiveinyear = p_inactiveinyear,
                    accounttypeid = p_accounttypeid,
                    accountledgerid = p_accountledgerid,
                    accountno = p_accountno,
                    relationshipmanager = p_relationshipmanager,
                    managercontactno = p_managercontactno,
                    isdeleted = 0,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'bank', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_bank_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT B.id,
		   B.bankname,
           B.microcode,
           B.ifsccode,
           B.address,
           B.phoneno,
           B.inactiveinyear,
           B.accounttypeid,
           REF.refname,
           B.accountledgerid,
           COA.coaname,
           COA.glcode as bankglcode,
           B.accountno,
           B.relationshipmanager,
           B.managercontactno,
           COA.iscostcenterapplicable
           
	FROM bank B
    LEFT JOIN `reference` REF ON REF.id = B.accounttypeid
    LEFT JOIN chartofaccount COA ON COA.id = B.accountledgerid
    
    WHERE B.companyid = p_companyid
    AND B.isdeleted = 0;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_bank_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT B.id,
		   B.bankname,
           B.microcode,
           B.ifsccode,
           B.address,
           B.phoneno,
           B.inactiveinyear,
           REF.refname,
           B.accountledgerid,
           B.accounttypeid,
           COA.coaname,
           COA.glcode as bankglcode,
           B.accountno,
           B.relationshipmanager,
           B.managercontactno
           
	FROM bank B
    LEFT JOIN `reference` REF ON REF.id = B.accounttypeid
    LEFT JOIN chartofaccount COA ON COA.id = B.accountledgerid
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND B.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		)
        AND B.isdeleted = 0;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_batchdetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM batchdetail WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_batchdetail_save`(
	IN p_id INT,
    IN p_breederbatchid INT(11),
    IN p_currentbatchdate DATE,
    IN p_phaseid INT(11),
    IN p_ageindays INT(11),
    IN p_batchplacementdate DATE,
    IN p_firstdaydate DATE,
    IN p_batchstatusid INT(11),
	IN p_expectedphaseid INT(11),
	IN p_birdcost DECIMAL(9,3),
	IN p_maleitemid INT(11),
	IN p_maleplacedquantity INT(11),
	IN p_malelivequantity INT(11),
	IN p_malemortality INT(11),
	IN p_maleculls INT(11),
	IN p_malesalequantity INT(11),
	IN p_femaleitemid INT(11),
	IN p_femaleplacedquantity INT(11),
	IN p_femalelivequantity INT(11),
	IN p_femalemortality INT(11),
	IN p_femaleculls INT(11),
	IN p_femalesalequanity INT(11),
	IN p_totaleggscollection INT(11),
	IN p_companyid INT(11),
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO batchdetail( 
				id,
				breederbatchid,
				currentbatchdate,
				phaseid,
				ageindays,
				batchplacementdate,
				firstdaydate,
				batchstatusid,
				expectedphaseid,
				birdcost,
				maleitemid,
				maleplacedquantity,
				malelivequantity,
				malemortality,
				maleculls,
				malesalequantity,
				femaleitemid,
				femaleplacedquantity,
				femalelivequantity,
				femalemortality,
				femaleculls,
				femalesalequanity,
				totaleggscollection,
				companyid)
			VALUES 
				(p_id,
				p_breederbatchid,
				p_currentbatchdate,
				p_phaseid,
				p_ageindays,
				p_batchplacementdate,
				p_firstdaydate,
				p_batchstatusid,
				p_expectedphaseid,
				p_birdcost,
				p_maleitemid,
				p_maleplacedquantity,
				p_malelivequantity,
				p_malemortality,
				p_maleculls,
				p_malesalequantity,
				p_femaleitemid,
				p_femaleplacedquantity,
				p_femalelivequantity,
				p_femalemortality,
				p_femaleculls,
				p_femalesalequanity,
				p_totaleggscollection,
				p_companyid);
                
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE batchdetail
				SET breederbatchid = p_breederbatchid,
				currentbatchdate = p_currentbatchdate,
				phaseid = p_phaseid,
				ageindays = p_ageindays,
				batchplacementdate = p_batchplacementdate,
				firstdaydate = p_firstdaydate,
				batchstatusid = p_batchstatusid,
				expectedphaseid = p_expectedphaseid,
				birdcost = p_birdcost,
				maleitemid = p_maleitemid,
				maleplacedquantity = p_maleplacedquantity,
				malelivequantity = p_malelivequantity,
				malemortality = p_malemortality,
				maleculls = p_maleculls,
				malesalequantity = p_malesalequantity,
				femaleitemid = p_femaleitemid,
				femaleplacedquantity = p_femaleplacedquantity,
				femalelivequantity = p_femalelivequantity,
				femalemortality = p_femalemortality,
				femaleculls = p_femaleculls,
				femalesalequanity = p_femalesalequanity,
				totaleggscollection = p_totaleggscollection,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'batchdetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_batchdetail_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		BD.id,
		BD.breederbatchid,
		BD.currentbatchdate,
		BD.phaseid,
		BD.ageindays,
		DATE_FORMAT(BD.batchplacementdate,'%d/%m/%Y') as batchplacementdate,
		DATE_FORMAT(BD.firstdaydate,'%d/%m/%Y') as firstdaydate,
		BD.batchstatusid,
		BD.expectedphaseid,
		BD.birdcost,
		BD.maleitemid,
		BD.maleplacedquantity,
		BD.malelivequantity,
		BD.malemortality,
		BD.maleculls,
		BD.malesalequantity,
		BD.femaleitemid,
		BD.femaleplacedquantity,
		BD.femalelivequantity,
		BD.femalemortality,
		BD.femaleculls,
		BD.femalesalequanity,
		BD.totaleggscollection,
		BD.companyid
	
    FROM
		batchdetail BD
	
	WHERE
		BD.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_batchdetail_select`(
    IN p_id INT
)
BEGIN
    
    SELECT
		BD.id,
		BD.breederbatchid,
		BD.currentbatchdate,
		BD.phaseid,
		BD.ageindays,
		DATE_FORMAT(BD.batchplacementdate,'%d/%m/%Y') as batchplacementdate,
		DATE_FORMAT(BD.firstdaydate,'%d/%m/%Y') as firstdaydate,
		BD.batchstatusid,
		BD.expectedphaseid,
		BD.birdcost,
		BD.maleitemid,
		BD.maleplacedquantity,
		BD.malelivequantity,
		BD.malemortality,
		BD.maleculls,
		BD.malesalequantity,
		BD.femaleitemid,
		BD.femaleplacedquantity,
		BD.femalelivequantity,
		BD.femalemortality,
		BD.femaleculls,
		BD.femalesalequanity,
		BD.totaleggscollection,
		BD.companyid
	
    FROM
		batchdetail BD
	
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND BD.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
      
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_batchdetail_weekwise`(
IN p_batchid INT,
IN p_fromweek INT,
IN p_toweek INT,
IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';
DROP TEMPORARY TABLE IF EXISTS weekwisedetail;
CREATE TEMPORARY TABLE weekwisedetail

        
        SELECT
			BB.id as breederbatchid,BDM.avgweight,BB.batchname,BDT.transactiondate,((BDM.totalmortality + BDM.totalculls)) as mortality,
            BDC.quantity as feedconsumtion,
            TRUNCATE((((DATEDIFF(BDT.transactiondate,fnc_getplacementdate(BB.id,p_companyid)))+1)/7),0) as ageinweek,
            (batch_liveqty_ongivendate(BB.id,BDT.transactiondate,BDT.id,BDM.itemid,p_companyid)) as liveqty,
            fun_live_biredcost(BB.id,p_companyid,BDT.transactiondate) as birdcost,
             fnc_geteggscollection(BB.id,BDT.transactiondate) as totaleggscollection,
			 fnc_gethatchingeggs(BB.id,BDT.transactiondate) as hatchingeggs,
             fnc_breeder_biologicalvalue(BB.id,NOW(),fnc_getplacementdate(BB.id,p_companyid),p_companyid) as biologicalvalue
             
		FROM breederbatch BB 
			LEFT JOIN breederdailytransaction BDT ON BDT.breederbatchid = BB.id
            LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id
			LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id AND BDC.consumptiontypeid = 861
        WHERE BB.id = p_batchid AND
        BB.statusid = 222 	
        order by BDT.transactiondate desc;
        
        
        /*SELECT * FROM  weekwisedetail;*/
        
DROP TEMPORARY TABLE IF EXISTS batchdetail;
CREATE TEMPORARY TABLE batchdetail
	(Age_In_WEEk INT(11),
	Avg_Weight DECIMAL(15,3),
	Live_Qty INT(11),
	Mortality INT(11),
	Bird_Cost Decimal(15,3),
	Avg_Feed Decimal(15,3),
	Biological_Value Decimal(15,3),
	Eggs_collection INT(11),
	Hatching_Eggs INT(11));

INSERT INTO batchdetail 
        
SELECT BD.ageinweek,avgweight,MIN(liveqty) as liveqty,
		IFNULL(SUM(BD.mortality),0) as mortality,
        format(MAX(birdcost),3) as birdcost,
		IFNULL(SUM((BD.feedconsumtion/liveqty)),0) as avgfeed,
        MAX(biologicalvalue),
		IFNULL(SUM(totaleggscollection),0) as totaleggscollection,
		IFNULL(SUM( hatchingeggs),0) as hatchingeggs

	FROM 
    weekwisedetail BD
   WHERE 
    BD.ageinweek BETWEEN p_fromweek AND p_toweek 
    group by BD.ageinweek;
    
 SELECT * FROM  batchdetail order by Age_In_WEEk;

    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_batchvaluation_report`(
	IN p_breederbatchid INT(11),
    IN p_companyid INT(11)
)
BEGIN
	
	SET @@sql_mode = ' ';
	
    SET @amortizationdate = null;
	SELECT amortizationdate INTO @amortizationdate
    FROM amortization
    WHERE breederbatchid = p_breederbatchid;
    
    SET @placementdate = null;
    SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
    
    SET @maleitemid = null;
    SET @femaleitemid = null;
    
    SELECT maleitemid, femaleitemid
    INTO @maleitemid, @femaleitemid
    FROM breederbatch
    WHERE id = p_breederbatchid;
    
    SET @overheadexp = 0;
    select (IFNULL(labourcharge,0) + IFNULL(overheadcost,0)) 
    INTO @overheadexp
    from breedersetting;
    
    SET @birdcost = 0;
	IF EXISTS(SELECT id FROM breederbatchplacement WHERE breederbatchid = p_breederbatchid) THEN
		SELECT ((IFNULL(PID.unitprice,0) * IFNULL(PID.quantity,0)) + (IFNULL(PID1.unitprice,0) * IFNULL(PID1.quantity,0))) INTO @birdcost FROM
		breederbatchplacement BBP
		INNER JOIN breederbatchplacementdetail BBPD ON BBPD.breederbatchplacementid = BBP.id 
		INNER JOIN purchaseinvoice PI ON PI.grpono = BBP.grpono
		INNER JOIN purchaseinvoicedetail PID ON PI.id = PID.purchaseinvoiceid AND PID.itemid = @maleitemid
		INNER JOIN purchaseinvoicedetail PID1 ON PI.id = PID1.purchaseinvoiceid AND PID1.itemid = @femaleitemid
		WHERE BBP.breederbatchid = p_breederbatchid 
		AND BBP.companyid = p_companyid
        GROUP BY BBP.id;
	ELSE
		SELECT ((IFNULL(BMF.rate,0) * IFNULL(BMF.placeqty,0)) + (IFNULL(BMF1.rate,0) * IFNULL(BMF1.placeqty,0))) INTO @birdcost
		FROM breederbatchopening BBO
		INNER JOIN breederbatchmalefemaleopeningdetail BMF ON BBO.id = BMF.breederbatchopeningid AND BMF.itemid = @maleitemid
		INNER JOIN breederbatchmalefemaleopeningdetail BMF1 ON BBO.id = BMF1.breederbatchopeningid AND BMF1.itemid = @femaleitemid
		WHERE BBO.breederbatchid = p_breederbatchid AND BBO.companyid = p_companyid;
	END IF;
    
    SET @firsttransactiondate = null;
    
    SELECT transactiondate INTO @firsttransactiondate FROM breederdailytransaction WHERE breederbatchid = p_breederbatchid LIMIT 1;
    
    DROP TEMPORARY TABLE IF EXISTS openingvaluation;
    CREATE TEMPORARY TABLE openingvaluation
    SELECT BDT.transactiondate,
			(IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,@firsttransactiondate,DATE_SUB(BDT.transactiondate, INTERVAL 1 DAY),861),0) + 
			IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,@firsttransactiondate,DATE_SUB(BDT.transactiondate, INTERVAL 1 DAY),862),0)+
			IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,@firsttransactiondate,DATE_SUB(BDT.transactiondate, INTERVAL 1 DAY),863),0)+
			IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,@firsttransactiondate,DATE_SUB(BDT.transactiondate, INTERVAL 1 DAY),864),0) + 
            ((IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @maleitemid, DATE_SUB(BDT.transactiondate, INTERVAL 1 DAY), p_companyid),0) + 
            IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @femaleitemid, DATE_SUB(BDT.transactiondate, INTERVAL 1 DAY), p_companyid),0)) * @overheadexp)+@birdcost) as openingval,
            (IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,BDT.transactiondate,BDT.transactiondate,861),0) + 
			IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,BDT.transactiondate,BDT.transactiondate,862),0)+
			IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,BDT.transactiondate,BDT.transactiondate,863),0)+
			IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,BDT.transactiondate,BDT.transactiondate,864),0)) as todaysval,
            ((IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @maleitemid, BDT.transactiondate, p_companyid),0) + 
            IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @femaleitemid, BDT.transactiondate, p_companyid),0)) * @overheadexp) as todayoverheadexp
	FROM breederdailytransaction BDT
    WHERE BDT.breederbatchid = p_breederbatchid;
           
    DROP TEMPORARY TABLE IF EXISTS amortizationtbl;
    CREATE TEMPORARY TABLE amortizationtbl
	SELECT 
    AM.breederbatchid,
    BDT.transactiondate,
    CASE
		WHEN (DATEDIFF(BDT.transactiondate, @placementdate) >= 168 && AM.amortizationvalueofbird > 0) THEN AM.amortizationvalueofbird
    END as amortizationcost
    FROM amortization AM
    INNER JOIN breederdailytransaction BDT ON BDT.breederbatchid = AM.breederbatchid
    WHERE AM.breederbatchid = 13 ORDER BY BDT.transactiondate DESC LIMIT 1;
    
    DROP TEMPORARY TABLE IF EXISTS hatchingeggstbl;
    CREATE TEMPORARY TABLE hatchingeggstbl
    SELECT collectiondate, IFNULL(quantity,0) as hatchingeggs
    FROM eggsdistributiondetail
    WHERE breederbatchid = p_breederbatchid AND itemtypeid = 881;
    
    SELECT DATE_FORMAT(BDT.transactiondate,'%d/%m/%Y') as transactiondate, FORMAT(@birdcost,2) as birdcost,
		   IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @maleitemid, BDT.transactiondate, p_companyid),0) as maleopeningbalance,
		   IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @femaleitemid, BDT.transactiondate, p_companyid),0) as femaleopeningbalance,
		   TRUNCATE(((DATEDIFF(BDT.transactiondate,@placementdate))/7),0) as ageinweek,
           TRUNCATE(((DATEDIFF(BDT.transactiondate,@placementdate))%7),0) as ageindays,
           FORMAT(IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,BDT.transactiondate,BDT.transactiondate,861),0),2) as feedcost,
		   FORMAT((fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,BDT.transactiondate,BDT.transactiondate,862) +fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,BDT.transactiondate,BDT.transactiondate,863)
		   + fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,BDT.transactiondate,BDT.transactiondate,864)),2) as medicinecost,
		   FORMAT(((IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @maleitemid, BDT.transactiondate, p_companyid),0) + 
           IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @femaleitemid, BDT.transactiondate, p_companyid),0)) * @overheadexp),2) as overheadexp,
           IFNULL(HE.hatchingeggs,0) as totalcollectedhe,
		   FORMAT(OP.openingval,2) as openingvaluation,
           FORMAT((OP.openingval+OP.todaysval+OP.todayoverheadexp),2) as todaysvaluation,
		   FORMAT(IFNULL(((OP.todaysval+OP.todayoverheadexp) / IFNULL(HE.hatchingeggs,0)),0),2) as costperegg,
		   FORMAT(IFNULL(AMT.amortizationcost,0),2) as amortizationcostperegg,
		   FORMAT(IFNULL((((OP.todaysval+OP.todayoverheadexp) / IFNULL(HE.hatchingeggs,0)) + IFNULL(AMT.amortizationcost,0)),0),2) as productioncostperegg,
           FORMAT(IFNULL(((((OP.todaysval+OP.todayoverheadexp) / IFNULL(HE.hatchingeggs,0)) + IFNULL(AMT.amortizationcost,0)) * IFNULL(HE.hatchingeggs,0)),0),2) as eggsvaluation,
		   FORMAT(((OP.todaysval+OP.openingval+OP.todayoverheadexp) - IFNULL((((OP.todaysval / IFNULL(HE.hatchingeggs,0)) + IFNULL(AMT.amortizationcost,0)) * IFNULL(HE.hatchingeggs,0)),0)),2) as currentvaluation,
           FORMAT((((OP.todaysval+OP.openingval+OP.todayoverheadexp) - IFNULL((((OP.todaysval / IFNULL(HE.hatchingeggs,0)) + IFNULL(AMT.amortizationcost,0)) * IFNULL(HE.hatchingeggs,0)),0)) / (IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @femaleitemid, BDT.transactiondate, p_companyid),0) + IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @maleitemid, BDT.transactiondate, p_companyid),0))),2) as costperbird,
		   IFNULL(BLW.totaldeliveredqty,0) as birdsold,
           FORMAT(IFNULL(BLW.totaldeliverycost,0),2) as birdsoldamount,   
		   FORMAT((((OP.todaysval+OP.openingval+OP.todayoverheadexp) - IFNULL(((((OP.todaysval+OP.todayoverheadexp) / IFNULL(HE.hatchingeggs,0)) + IFNULL(AMT.amortizationcost,0)) * IFNULL(HE.hatchingeggs,0)),0)) - IFNULL(BLW.totaldeliverycost,0)),2) as finalflockvaluation
    FROM breederdailytransaction BDT
    LEFT JOIN openingvaluation OP ON OP.transactiondate = BDT.transactiondate
    LEFT JOIN hatchingeggstbl HE ON HE.collectiondate = BDT.transactiondate
    LEFT JOIN breeder_liftingweight BLW ON BLW.batchid = BDT.breederbatchid
    LEFT JOIN amortizationtbl AMT ON AMT.transactiondate = BDT.transactiondate
    WHERE BDT.breederbatchid = p_breederbatchid
    
    ORDER BY BDT.transactiondate;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_batchwisedailyproncon_finalonereport`(
 IN p_breederbatchid INT,
 IN p_shedids varchar(300), 
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_companyid INT
)
if EXISTS (SELECT breederbatchid FROM breederdailytransaction where breederbatchid = p_breederbatchid)THEN
BEGIN

SET @@sql_mode = '';
SET @maleitemid = null;
SET @femaleitemid = null;

SELECT femaleitemid,maleitemid INTO @femaleitemid,@maleitemid
	FROM breederbatch
    WHERE id =  p_breederbatchid;
    
          
    /*   main sp  */        
            
	DROP TEMPORARY TABLE IF EXISTS tempmortality1;
	CREATE TEMPORARY TABLE tempmortality1
    SELECT *,
                -- (femalefeedconsumption/femaleopeningbalance) as feedconperbirdF,
				ROUND(((femalefeedconsumption*1000)/(IF(femaleopeningbalance<=0, inqtyfemale,femaleopeningbalance))),2) as feedconperbirdF,
                 ((totalpro/femaleopeningbalance)*100) as proeggper,
                  (Stdeggpro - totalpro ) as difference,
                   DATEDIFF(transactiondateone,placement_dateone)as age
    From(
	
	select 
	BDT.shedid as shedoneid,
    BB.id,
    BDC.itemid,
    BDT.shedid,
    
    DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y') as transactiondate,
    BDT.transactiondate as transactiondateone,
    DATE_FORMAT(BDT.placementdate, '%d/%m/%Y') as placementdate,
    date_sub(BDT.placementdate,INTERVAL 1 DAY)as placement_dateone,

  --  date_add(transactiondate - placementdate, interval 1 day ) as age, 
	BS.shedname,
   fnc_transaction_date_wise_liveqty_ope(BDT.breederbatchid, BDT.shedid, @femaleitemid ,BDT.transactiondate,p_companyid) as femaleopeningbalance,
	fnc_transaction_date_wise_liveqty(BDT.breederbatchid, BDT.shedid, @femaleitemid ,BDT.transactiondate,p_companyid) as femaleclosingbalance,
	fnc_batchshedwise_malefemale_transferedinquantity(BDT.breederbatchid, BDT.shedid, @femaleitemid, BDT.transactiondate,p_companyid) as inqtyfemale,
    -- fnc_batchshedwise_malefemale_transferedquantity(BDT.breederbatchid, BDT.shedid, @femaleitemid, BDT.transactiondate,p_companyid) as inqtyfemale,
			
	IFNULL(BDM.totalmortality,0) as femalemortality,
	IFNULL(BDM.totalculls,0) as femaleculls,
	fnc_calculate_malefemale_feedconsumption(BDT.shedid,@femaleitemid,BDC.itemid) as femalefeedconsumption,
	U.username,
    IFNULL(ECD.quantity,0) as totalpro,
	(BPO.hdinpercent/7)as Stdeggpro,
	fnc_bird_liveqty(BDT.breederbatchid, BDT.shedid, @femaleitemid,BDT.placementdate,p_todate,p_companyid)as Fliveqty

    
    FROM breederbatch BB
    LEFT JOIN breederdailytransaction BDT ON BB.id = BDT.breederbatchid
    LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id AND BDM.itemid = @femaleitemid
	LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id AND BDC.consumptiontypeid = 861  -- AND BDC.breederitemid = BDM.itemid
	LEFT JOIN breedershed BS ON BDT.shedid = BS.id
	LEFT JOIN user1 U ON U.createdby = BDT.createdby 
	LEFT JOIN eggscollection EC ON EC.breederbatchid = BDT.breederbatchid AND EC.shedid = BS.id and BDT.transactiondate = EC.collectiondate
    LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id 
	LEFT JOIN eggsdistributiondetail EDD ON  EDD.eggscollectionid = EC.id  
    LEFT JOIN item I ON I.id = EDD.itemid 
	LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
	LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = I.id
    where 
    BB.id = p_breederbatchid
	AND FIND_IN_SET(BDT.shedid, p_shedids) 
	AND BDT.transactiondate between p_fromdate AND p_todate 
	GROUP BY BDT.transactiondate
	order by BDT.breederbatchid, BDT.shedid, BDT.transactiondate, BDM.itemid ) as temp;
    
                
-- select * from tempmortality1;         
 
DROP TEMPORARY TABLE IF EXISTS tempmortality2;
CREATE TEMPORARY TABLE tempmortality2   

SELECT *,
            IF(maleopeningbalance<=0, 0,maleopeningbalance),
            ROUND(((malefeedconsumption*1000)/(IF(maleopeningbalance<=0, inqtymale,maleopeningbalance))),2) as feedconperbirdM
            
            FROM(
		SELECT  
				BDT.shedid as shedidtwo,  
				DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y') as transactiondate,
                DATE_SUB(BDT.transactiondate, INTERVAL 1 DAY) as cltransactiondate,
				fnc_transaction_date_wise_liveqty_ope(BDT.breederbatchid, BDT.shedid, @maleitemid ,BDT.transactiondate,p_companyid) as maleopeningbalance,
				fnc_transaction_date_wise_liveqty(BDT.breederbatchid, BDT.shedid, @maleitemid ,BDT.transactiondate,p_companyid) as maleclosingbalance,
                fnc_batchshedwise_malefemale_transferedinquantity(BDT.breederbatchid, BDT.shedid, @maleitemid, BDT.transactiondate,p_companyid) as inqtymale,
               -- fnc_batchshedwise_malefemale_transferedquantity(BDT.breederbatchid, BDT.shedid,  @maleitemid, BDT.transactiondate,p_companyid) as inqtymale,
				fnc_bird_liveqty(BDT.breederbatchid, BDT.shedid, @maleitemid,BDT.placementdate,p_todate ,p_companyid)as Mliveqty,
                IFNULL(BDM.totalmortality,0) as malemortality,
                IFNULL(BDM.totalculls,0) as maleculls,
				fnc_calculate_malefemale_feedconsumption(BDT.id,@maleitemid,BDC.itemid) as malefeedconsumption
	    FROM breederdailytransaction BDT
               LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id AND BDM.itemid = @maleitemid
			   LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id AND BDC.consumptiontypeid = 861 -- AND BDC.breederitemid = BDM.itemid
               
        WHERE
				BDT.breederbatchid = p_breederbatchid
                AND FIND_IN_SET(BDT.shedid, p_shedids)
				AND BDT.transactiondate between p_fromdate AND p_todate 
                GROUP BY BDT.transactiondate
                order by BDT.shedid, BDT.transactiondate, BDM.itemid)as tempone;  
-- select * from tempmortality2;
                

         -- Example Trial --
         
  DROP TEMPORARY TABLE IF EXISTS tempmortality3;
 CREATE TEMPORARY TABLE tempmortality3    
 
 SELECT *,   ((production/femalelob)*100) as productionper
			
 FROM(
 SELECT  	EC.id,
			EC.shedid as shedthreeid,
            fnc_bird_liveqty(BDT.breederbatchid, BDT.shedid, @femaleitemid,BDT.placementdate,p_todate,p_companyid)as Fliveqty,
            MIN(fnc_transaction_date_wise_liveqty(BDT.breederbatchid, BDT.shedid, @femaleitemid ,BDT.transactiondate,p_companyid)) as femalelob,
            (IFNULL(EDD1.quantity,0)+EDD2.quantity+IFNULL(EDD3.quantity,0)+EDD4.quantity+IFNULL(EDD5.quantity,0)) as production,
			DATE_FORMAT(EC.collectiondate, '%d/%m/%Y') as collectiondate,
            U.username,
            EC.breederbatchid,
            (BPO.hdinpercent/7)as Stdeggpro,
            EDD1.quantity as hatching,
            EDD2.quantity as commercial,
            EDD3.quantity as crtacked,
            EDD4.quantity as doubleyolk,
            EDD5.quantity as westageegg
           
               
	    -- FROM eggscollection EC
         FROM breederdailytransaction BDT
		LEFT JOIN user1 U ON U.createdby = BDT.createdby 
		LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = @femaleitemid
        LEFT JOIN eggscollection EC ON EC.breederbatchid = BDT.breederbatchid AND EC.shedid = BDT.shedid
        LEFT JOIN eggscollectiondetail ECD ON ECD.shedid = BDT.shedid -- AND ECD.shedid =  BS.id
        LEFT JOIN eggsdistributiondetail EDD1 ON  EDD1.eggscollectionid = EC.id  AND  EDD1.itemtypeid = 881 AND  EDD1.statusid = 842
        LEFT JOIN eggsdistributiondetail EDD2 ON  EDD2.eggscollectionid = EC.id  AND  EDD2.itemtypeid = 882 AND  EDD2.statusid = 842
        LEFT JOIN eggsdistributiondetail EDD3 ON  EDD3.eggscollectionid = EC.id  AND  EDD3.itemtypeid = 883 AND  EDD3.statusid = 842
        LEFT JOIN eggsdistributiondetail EDD4 ON  EDD4.eggscollectionid = EC.id  AND  EDD4.itemtypeid = 884 AND  EDD4.statusid = 842
        LEFT JOIN eggsdistributiondetail EDD5 ON  EDD5.eggscollectionid = EC.id  AND  EDD5.itemtypeid = 885 AND  EDD5.statusid = 842
        
		WHERE	EC.breederbatchid = p_breederbatchid
                AND FIND_IN_SET(EC.shedid, p_shedids) 
			    AND EC.collectiondate between p_fromdate AND p_todate
				group by EC.id, EC.collectiondate) as temp;
                
 -- select * from   tempmortality3;

  
		SELECT * FROM tempmortality1 TB1
        LEFT JOIN tempmortality2 TB2 ON TB2.transactiondate=TB1.transactiondate AND TB2.shedidtwo=TB1.shedoneid
        LEFT JOIN tempmortality3 TB3 ON TB3.collectiondate = TB1.transactiondate    AND TB3.shedthreeid=TB1.shedoneid
		order by TB1.age;
       
          
END;

/* Second else part of SP */

ELSE

BEGIN

SET @@sql_mode = ' ';
SET @malemortality = 0;
SET @femalemortality = 0;
SET @maleculls = 0;
SET @femaleculls = 0;
SET @cummalefemaleculls = 0;
SET @cummalefemalemortalityas = 0;
SET @maletransferedquantity = 0;
SET @femaletransferedquantity = 0;

SET @maleitemid = null;
SET @femaleitemid = null;

SELECT femaleitemid,maleitemid INTO @femaleitemid,@maleitemid
	FROM breederbatch
    WHERE id =  p_breederbatchid;
    
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
	CREATE TEMPORARY TABLE tempmortality1
    SELECT *,
                (femalefeedconsumption/Fliveqty) as feedconperbirdF,
				((totalpro/Fliveqty)*100) as proeggper,
				(stdquantity - totalpro ) as difference,
                (femaleopeningbalance - (femalemortality+femaleculls)) as femaleclosingbalance
    
    From(
	SELECT  
		BBO.breederbatchid,
		BB.batchname,
		BLO.shedid as shedoneid,
		BS.shedname,
		DATE_FORMAT(BBO.livebatchdate ,'%d/%m/%Y') as transactiondate, 
		BB.maleitemid as femaleitemid,
		fnc_batchwise_malefemaleopbalance(BBO.breederbatchid, BLO.shedid, BB.femaleitemid,p_fromdate,p_companyid) as femaleopeningbalance,
		@femaleculls as femaleculls,
		@femaletransferedquantity as femaletransferedquantity,
		DATE_FORMAT(BBO.batchplacementdate, '%d/%m/%Y') as placementdate,
        fnc_bird_liveqty(BBO.breederbatchid, BLO.shedid, BB.femaleitemid,BBO.batchplacementdate,p_todate,p_companyid)as Fliveqty,
        fnc_calculate_malefemale_mortalityopbal(BBO.breederbatchid,BLO.shedpenid,BB.femaleitemid,p_companyid)as femalemortalityob,
        ECD.quantity as totalpro,
		ECD.stdquantity,
		EDD.itemid,
		EDD.itembatchid as egggroupname,
        @femalemortality as femalemortality,
        ifnull(fnc_breeder_opening_totaleggs(BBO.breederbatchid,p_companyid),0)as tataleggs,
        ifnull(fnc_opening_breeder_hatching_eggs(BBO.breederbatchid,p_companyid),0) as hatching,
		fnc_calculate_malefemale_feedconsumptionop(BBO.id,@femaleitemid) as femalefeedconsumption
        
		FROM breederbatchlocationwiseopeningdetail BLO
		INNER JOIN breederbatchopening BBO ON BBO.id = BLO.breederbatchopeningid
        INNER JOIN breederbatchmalefemaleopeningdetail BMFOD ON BMFOD.breederbatchopeningid = BBO.id AND BMFOD.itemid = @femaleitemid
		INNER JOIN breederbatch BB ON BB.id =BBO.breederbatchid 
		INNER JOIN breedershed BS ON BS.id = BLO.shedid
        
        LEFT JOIN eggscollection EC ON EC.breederbatchid = BBO.breederbatchid  AND EC.shedid = BLO.shedid
        LEFT JOIN eggscollectiondetail ECD ON ECD.shedid = BLO.shedid AND ECD.shedid =  BS.id
        LEFT JOIN eggsdistributiondetail EDD ON  EDD.eggscollectionid = EC.id   
		LEFT JOIN item I ON I.id = EDD.itemid 
        LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
        LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = I.id

		where  
	    BBO.breederbatchid = p_breederbatchid 
        AND FIND_IN_SET(BLO.shedid, p_shedids)
		GROUP BY BBO.livebatchdate,BLO.shedid
		) as temp;   

-- select * from tempmortality1;              

DROP TEMPORARY TABLE IF EXISTS tempmortality2;
CREATE TEMPORARY TABLE tempmortality2


SELECT *,
            (malefeedconsumption/Mliveqty) as feedconperbirdM,
            (transactiondate - placementdate) as age,
            (maleopeningbalance - (malemortality+maleculls)) as maleclosingbalance
            
	FROM(
            
		select 
		BBO.breederbatchid,
		BB.batchname,
		BLO.shedid as shedidtwo,
		BS.shedname,
		DATE_FORMAT(BBO.livebatchdate ,'%d/%m/%Y') as transactiondate, 
		BB.maleitemid as femaleitemid,
		BB.femaleitemid as maleitemid,
		fnc_batchwise_malefemaleopbalance(BBO.breederbatchid, BLO.shedid, BB.maleitemid,p_fromdate,p_companyid) as maleopeningbalance,
		@malemortality as malemortality,
        @maleculls as maleculls,
        @maletransferedquantity as maletransferedquantity,
		DATE_FORMAT(BBO.batchplacementdate, '%d/%m/%Y') as placementdate,
        fnc_bird_liveqty(BBO.breederbatchid, BLO.shedid, BB.maleitemid,BBO.batchplacementdate,p_todate,p_companyid)as Mliveqty,
		fnc_calculate_malefemale_mortalityopbal(BBO.breederbatchid,BLO.shedpenid,BB.maleitemid,p_companyid)as malemortalityob,
        fnc_calculate_malefemale_feedconsumptionop(BBO.id,@maleitemid) as malefeedconsumption
        
		FROM breederbatchlocationwiseopeningdetail BLO
		INNER JOIN breederbatchopening BBO ON BBO.id = BLO.breederbatchopeningid
        INNER JOIN breederbatchmalefemaleopeningdetail BMFOD ON BMFOD.breederbatchopeningid = BBO.id AND BMFOD.itemid = @maleitemid
        -- INNER JOIN breederbatchconsumptionopeningdetail BMCOD ON BMCOD.breederbatchopeningid = BBO.id AND BMCOD.breeditemid = @maleitemid AND consumptiontypeid = 861
		INNER JOIN breederbatch BB ON BB.id =BBO.breederbatchid
		INNER JOIN breedershed BS ON BS.id = BLO.shedid

		where  
	     BBO.breederbatchid = p_breederbatchid 
        AND FIND_IN_SET(BLO.shedid, p_shedids)
        -- AND BBO.livebatchdate between '2020-06-01' AND '2020-06-15' 
		GROUP BY BBO.livebatchdate,BLO.shedid ) as temp;   
        
      -- select * from tempmortality2;
        
 -- Example Trial --
         
  DROP TEMPORARY TABLE IF EXISTS tempmortality3;
 CREATE TEMPORARY TABLE tempmortality3    
 
  SELECT *,   ((production/femaleopeningbalance)*100) as proper
 FROM(
 SELECT  	EC.id,
			EC.shedid as shedthreeid,
            fnc_bird_liveqty(BDT.breederbatchid, BDT.shedid, @femaleitemid,BDT.placementdate,p_todate,p_companyid)as Fliveqty,
            MIN(fnc_transaction_date_wise_liveqty(BDT.breederbatchid, BDT.shedid, @femaleitemid ,BDT.transactiondate,p_companyid)) as femaleopeningbalance,
            (IFNULL(EDD1.quantity,0)+EDD2.quantity+IFNULL(EDD3.quantity,0)+EDD4.quantity+IFNULL(EDD5.quantity,0)) as production,
			DATE_FORMAT(EC.collectiondate, '%d/%m/%Y') as collectiondate,
            EC.breederbatchid,
            U.username,
           -- ECD.eggscollectionid,
            EDD1.quantity as hatching,
            EDD2.quantity as commercial,
            EDD3.quantity as crtacked,
            EDD4.quantity as doubleyolk,
            EDD5.quantity as westageegg
           
               
	    -- FROM eggscollection EC
         FROM breederdailytransaction BDT
		LEFT JOIN user1 U ON U.createdby = BDT.createdby
        LEFT JOIN eggscollection EC ON EC.breederbatchid = BDT.breederbatchid AND EC.shedid = BDT.shedid
        LEFT JOIN eggscollectiondetail ECD ON ECD.shedid = BDT.shedid -- AND ECD.shedid =  BS.id
        LEFT JOIN eggsdistributiondetail EDD1 ON  EDD1.eggscollectionid = EC.id  AND  EDD1.itemtypeid = 881 AND  EDD1.statusid = 842
        LEFT JOIN eggsdistributiondetail EDD2 ON  EDD2.eggscollectionid = EC.id  AND  EDD2.itemtypeid = 882 AND  EDD2.statusid = 842
        LEFT JOIN eggsdistributiondetail EDD3 ON  EDD3.eggscollectionid = EC.id  AND  EDD3.itemtypeid = 883 AND  EDD3.statusid = 842
        LEFT JOIN eggsdistributiondetail EDD4 ON  EDD4.eggscollectionid = EC.id  AND  EDD4.itemtypeid = 884 AND  EDD4.statusid = 842
        LEFT JOIN eggsdistributiondetail EDD5 ON  EDD5.eggscollectionid = EC.id  AND  EDD5.itemtypeid = 885 AND  EDD5.statusid = 842
        
		WHERE	EC.breederbatchid = p_breederbatchid
                AND FIND_IN_SET(EC.shedid, p_shedids) 
			    AND EC.collectiondate between p_fromdate AND p_todate
				group by EC.id, EC.collectiondate) as temp;
  
  -- select * from tempmortality3;
		
		SELECT * FROM tempmortality1 TB1
        LEFT JOIN tempmortality2 TB2 ON TB2.transactiondate =TB1.transactiondate AND TB2.shedidtwo=TB1.shedoneid
        LEFT JOIN tempmortality3 TB3 ON   TB3.shedthreeid=TB1.shedoneid
        order by TB1.age;
         

END;
END IF$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_batchwise_productiondate`(
 In p_breederbatchid INT,
  IN p_shedid INT
  )
BEGIN
  
  	SELECT DATE_FORMAT(productionstartdate,'%d/%m/%Y') as productionstartdate
        from eggscollection 
        
        where
           breederbatchid =  p_breederbatchid
           AND shedid = p_shedid
	order by id ASC limit 1;
  -- DATE_FORMAT(IFNULL(fnc_productionstartdate(p_breederbatchid),noW()),'%d/%m/%Y') as productionstartdate;
  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_batch_and_modulewise_shed`(
IN p_moduleid INT,
IN p_batchid INT
)
BEGIN
SET @@sql_mode = '';
	  IF(p_moduleid = 721) THEN
		SELECT BBB.breedershedid as shedid,
				BS.warhouseid as warehouseid,
                W.warehousename,
				BS.warehousebinid,
                WB.binname,
				BS.shedname
		FROM breederbatchbalance BBB
        LEFT JOIN breedershed BS ON BS.id = BBB.breedershedid
        LEFT JOIN warehouse W ON W.id = BS.warhouseid
        LEFT JOIN warehousebin WB ON WB.id = BS.warehousebinid
		WHERE BBB.breederbatchid = p_batchid
        group by BBB.breedershedid;
	  END IF;
       IF(p_moduleid = 725) THEN
		SELECT LBB.layershedid as shedid,
				LS.warehouseid as warehouseid,
                W.warehousename,
				LS.warehousebinid,
                WB.binname,
				LS.shedname
		FROM layerbatchbalance LBB
        LEFT JOIN layershed LS ON LS.id = LBB.layershedid
        LEFT JOIN warehouse W ON W.id = LS.warhouseid
        LEFT JOIN warehousebin WB ON WB.id = LS.warehousebinid
		WHERE LBB.layerbatchid = p_batchid
         group by LBB.layershedid;
	  END IF;
      
      if(p_moduleid = 723) THEn
		select CFS.id as shedid,shed_name as shedname
			FROM cbf_batch_details CBD
			LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CFS ON CFS.farmerenquiryid =  CBD.farmer_enquiry_id
			WHERE CBD.id = p_batchid;
	  END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_billofmaterialdetail_delete`(

 IN p_id INT(11),
 IN p_companyid INT(11),
 IN p_userid INT(11)
)
BEGIN

	DELETE FROM feedmill_billofmaterialdetail WHERE id = p_id;
	CALL spc_commonlog_save(p_companyid, 'feedmill_billofmaterialdetail', p_id, 'delete', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_billofmaterialdetail_save`(
    IN p_id INT(11),
    IN p_bomid INT(11),
    IN p_itemid INT(11),
    IN p_quantity DECIMAL(9,3),
    IN p_unitid INT(11),
	IN p_unitcost DECIMAL(9,3),
    IN p_parentid INT(11),
    IN P_materialtypeid int(11),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_billofmaterialdetail
        (bomid, itemid, quantity, unitid, unitcost, parentid, materialtypeid,companyid)
        VALUES (p_bomid, p_itemid, p_quantity, p_unitid, p_unitcost, p_parentid, p_materialtypeid, p_companyid);
        
        SET @action = 'INSERT';
        
        ELSE
        UPDATE feedmill_billofmaterialdetail
        SET bomid = p_bomid,
            itemid = p_itemid,
            quantity = p_quantity,
            unitid = p_unitid,
            unitcost = p_unitcost,
            parentid = p_parentid,
            materialtypeid = p_materialtypeid,
            companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_billofmaterialdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_billofmaterialdetail_search`(
IN p_bomid INT(11))
BEGIN
SELECT BOMD.id,
	   BOMD.bomid,
       BOMD.itemid,
       BOMD.quantity,
       BOMD.unitid,
       BOMD.unitcost,
       BOMD.parentid,
       BOMD.materialtypeid,
	   I.itemname,
       I1.itemname as parentitemname,
	   R.refname as itemunitname,
       R1.refname as materialtype
   
           
    FROM feedmill_billofmaterialdetail BOMD
	LEFT JOIN item I ON BOMD.itemid = I.id
    LEFT JOIN item I1 ON BOMD.parentid = I1.id
    LEFT JOIN `reference` R ON BOMD.unitid = R.id
     LEFT JOIN `reference` R1 ON BOMD.materialtypeid = R1.id
    
    
    WHERE  
		  bomid = p_bomid;
          
          
   -- material requirment for BOM (tree table)       


/*WITH RECURSIVE feedmill_billofmaterial_path (id,itemid, parentid, itemname, parentitemname) AS
(
  SELECT  BMD.id, itemid, parentid, I.itemname, I1.itemname as parentitemname
    FROM feedmill_billofmaterialdetail BMD
    
     LEFT JOIN item I ON itemid = I.id
     LEFT JOIN item I1 ON parentid = I1.id
    WHERE bomid = p_bomid
    
  UNION ALL
  SELECT c.id, c.itemid, c.parentid, I.itemname, I1.itemname as parentitemname
    FROM feedmill_billofmaterialdetail c 
    INNER JOIN feedmill_billofmaterial_path cp ON cp.itemid = c.parentid
       LEFT JOIN item I ON c.itemid = I.id
       LEFT JOIN item I1 ON c.parentid = I1.id
)
SELECT BM.id, itemid, null as parentid, I.itemname, null as parentitemname

 FROM feedmill_billofmaterial BM
LEFT JOIN item I ON I.id = BM.itemid
WHERE BM.id = p_bomid 

UNION ALL
SELECT * FROM feedmill_billofmaterial_path 

order by itemid ;*/
/*WITH RECURSIVE feedmill_billofmaterial_path (isactive,id,itemid, parentid, itemname, parentitemname) AS
(
SELECT BM.isactive, BMD.id, BMD.itemid, BMD.parentid, I.itemname, I1.itemname as parentitemname
    FROM feedmill_billofmaterial BM
     LEFT JOIN feedmill_billofmaterialdetail BMD ON BM.id = BMD.bomid 
     LEFT JOIN item I ON BMD.itemid = I.id
     LEFT JOIN item I1 ON BMD.parentid = I1.id
    WHERE bomid = p_bomid AND BM.isactive = 1
     UNION ALL
  SELECT BM.isactive,c.id, c.itemid, c.parentid, I.itemname, I1.itemname as parentitemname
    FROM feedmill_billofmaterial BM
       LEFT JOIN feedmill_billofmaterialdetail c ON c.bomid = BM.id AND BM.isactive = 1
    INNER JOIN feedmill_billofmaterial_path cp ON cp.itemid = c.parentid
  
       LEFT JOIN item I ON c.itemid = I.id
       LEFT JOIN item I1 ON c.parentid = I1.id
)
SELECT BM.isactive,BM.id, itemid, null as parentid, I.itemname, null as parentitemname

 FROM feedmill_billofmaterial BM
LEFT JOIN item I ON I.id = BM.itemid
WHERE BM.id = p_bomid AND BM.isactive = 1

UNION ALL
SELECT * FROM feedmill_billofmaterial_path
order by itemid;*/

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_billofmaterialdetail_select`(
IN p_id INT(11),
IN p_companyid INT(11)

)
BEGIN
SELECT BOMD.id,
	   BOMD.bomid,
       BOMD.itemid,
       BOMD.quantity,
       BOMD.unitid,
       BOMD.unitcost,
       BOMD.parentid,
       BOMD.materialtypeid
				
	FROM feedmill_billofmaterialdetail

	WHERE companyid = p_companyid
	AND	id = p_id;            

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_billofmateriallist_search`(
	IN p_product_group INT,
    IN p_product_name INT,
    IN p_from_date date,
	IN p_to_date date
)
BEGIN
SELECT 	    BOM.id,
			BOM.itemid,
			BOM.quantity,
			BOM.unitid,
            BOM.unitcost,
			BOM.createdby,
			BOM.isactive,
			BOM.note,
            I.itemname,
            EMP.employeename,
			DATE_FORMAT(BOM.bomdate,'%d/%m/%Y') as bomdate,
            R.refname as itemunitname,
            BOM.itemgroupid,
            IG.groupname,
            BOM.bomcode,
            I.itemcode,
            bomno
	
           
	FROM feedmill_billofmaterial BOM
    LEFT JOIN item I ON BOM.itemid = I.id
     LEFT JOIN employee EMP ON BOM.createdby = EMP.id
     LEFT JOIN `reference` R ON BOM.unitid = R.id
     LEFT JOIN itemgroup IG ON BOM.itemgroupid = IG.id
    
    WHERE 
		BOM.itemgroupid = p_product_group AND
        BOM.itemid = p_product_name AND
        (BOM.bomdate BETWEEN p_from_date AND p_to_date)
    order by  BOM.id desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_billofmaterialreport_search`(
IN p_itemid varchar(50),
IN p_companyid INT(11) )
BEGIN
SET @@sql_mode = '';
SELECT 	     
			 I.itemcode,
			 I.itemname,
             I1.itemname as productname,
             I1.id,
             BOM.bomcode,
             DATE_FORMAT(BOM.bomdate,'%d/%m/%Y') as bomdate,
             BOMD.quantity,
             BOMD.unitcost,
             BOMD.unitid,
			 R.refname as itemunitname,
			 BOMD.itemid,
             E.id as employeeid,
             E.employeename as createdby
    
	FROM feedmill_billofmaterial BOM
    LEFT JOIN feedmill_billofmaterialdetail BOMD ON BOM.id = BOMD.bomid
    LEFT JOIN item I ON BOMD.itemid = I.id
    LEFT JOIN item I1 ON BOM.itemid = I1.id
    LEFT JOIN `reference` R ON BOMD.unitid = R.id
    LEFT JOIN employee E ON E.id = BOM.createdby
   
    
    
    WHERE BOM.companyid = p_companyid AND
	FIND_IN_SET( BOM.itemid, p_itemid)
    GROUP BY I.id,I1.id;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_billofmaterial_delete`(
IN p_id INT(11)
)
BEGIN
DELETE 
FROM		feedmill_billofmaterial
WHERE		id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_billofmaterial_save`(
IN p_id INT(11),
IN p_bomcode VARCHAR(100),
IN p_itemgroupid INT(11),
IN p_itemid INT(11),
IN p_quantity INT(11),
IN p_unitid INT(11),
IN p_unitcost DECIMAL(9,3),
IN p_bomdate DATE,
IN p_createdby INT(11),
IN p_isactive TINYINT(4),
IN p_note VARCHAR (200),
in p_bomno varchar(45),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_billofmaterial
        (bomcode, itemgroupid, itemid, quantity, unitid, unitcost, bomdate, createdby, isactive, note,bomno, companyid)
        
        VALUES (p_bomcode, p_itemgroupid, p_itemid, p_quantity, p_unitid, p_unitcost, p_bomdate, p_createdby, p_isactive, p_note,p_bomno, p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_billofmaterial
        SET bomcode = p_bomcode,
			itemgroupid = p_itemgroupid,
			itemid = p_itemid,
			quantity = p_quantity,
            unitid = P_unitid,
            unitcost = p_unitcost,
            bomdate = p_bomdate,
            createdby = p_createdby,
            isactive = p_isactive,
            note = p_note,
            bomno = p_bomno,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    -- update item materialtypeid = 1502 (fineshgood)
     UPDATE item 
     SET materialtypeid=1502
     WHERE id = p_itemid;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_billofmaterial', out_id, @action, p_userid);



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_billofmaterial_search`(
IN p_companyid INT(11) )
BEGIN
SELECT 	    BOM.id,
			BOM.itemid,
			BOM.quantity,
			BOM.unitid,
            BOM.unitcost,
			BOM.createdby,
			BOM.isactive,
			BOM.note,
            I.itemname,
            EMP.employeename,
			DATE_FORMAT(BOM.bomdate,'%d/%m/%Y') as bomdate,
            R.refname as itemunitname,
            BOM.itemgroupid,
            IG.groupname,
            BOM.bomcode,
            I.itemcode,
            bomno
	
           
	FROM feedmill_billofmaterial BOM
    LEFT JOIN item I ON BOM.itemid = I.id
     LEFT JOIN employee EMP ON BOM.createdby = EMP.id
     LEFT JOIN `reference` R ON BOM.unitid = R.id
     LEFT JOIN itemgroup IG ON BOM.itemgroupid = IG.id
    
    WHERE BOM.companyid = p_companyid
 order by  BOM.id desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_billofmaterial_select`(
    IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN
SELECT 	  BOM.id,
			BOM.itemid,
			BOM.quantity,
			BOM.unitid,
            BOM.unitcost,
			BOM.createdby,
			BOM.isactive,
			BOM.note,
            I.itemname,
            EMP.employeename,
			DATE_FORMAT(BOM.bomdate,'%d/%m/%Y') as bomdate,
            R.refname as itemunitname,
             BOM.itemgroupid,
            IG.groupname,
            BOM.bomcode,
            bomno
           
	FROM feedmill_billofmaterial BOM
    LEFT JOIN item I ON BOM.itemid = I.id
	LEFT JOIN employee EMP ON BOM.createdby = EMP.id
    LEFT JOIN `reference` R ON BOM.unitid = R.id
    LEFT JOIN itemgroup IG ON BOM.itemgroupid = IG.id
    
    WHERE BOM.companyid = p_companyid
    AND BOM.id = p_id;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_birdcost`(
 IN p_breederbatchid INT(11),
 IN p_shedid INT(11),
 IN p_companyid INT(11),
 IN p_transactiondate DATE
 )
BEGIN
		
        SET @defaultmalechickid = null;
        SET @defaultfemalechickid = null;
        SET @malepurchasecost = null;
        SET @femalepurchasecost= NUll;
        SET @maleplaceqty = NUll;
        SET @femaleplacedqty = NUll;
        SET @consumptioncost = null;
        SET @malebirdliveqty = NULL;
		SET @femalebirdliveqty = NULL;
        SET @p_placementdate = null;
        SET @mortality = null;
        SET @mortalitycost = null;
        SET @mortalityvalue = null;
        -- SET @prviusdate = DATE_SUB(p_transactiondate, INTERVAL 1 DAY);

		   SELECT maleitemid, femaleitemid
           INTO @defaultmalechickid, @defaultfemalechickid
           FROM breederbatch WHERE id = p_breederbatchid;
           
          SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @p_placementdate;
          
          if(@p_placementdate = p_transactiondate) THEN
          SELECT 
          fnc_chicks_purchasecost(p_breederbatchid,p_shedid,p_companyid,@defaultmalechickid),
           fnc_chicks_purchasecost(p_breederbatchid,p_shedid,p_companyid,@defaultfemalechickid) ,
           fnc_chicks_placementqty(p_breederbatchid,p_shedid,p_companyid,@defaultmalechickid) ,
           fnc_chicks_placementqty(p_breederbatchid,p_shedid,p_companyid,@defaultfemalechickid) INTO 
           @malepurchasecost, @femalepurchasecost,@maleplaceqty, @femaleplacedqty;
           SELECT ((@malepurchasecost*@maleplaceqty)+(@femalepurchasecost*@femaleplacedqty))/(@maleplaceqty+@femaleplacedqty) as purchasecost;
          ELSE 
           SELECT 
           fnc_chicks_purchasecost(p_breederbatchid,p_shedid,p_companyid,@defaultmalechickid),
           fnc_chicks_purchasecost(p_breederbatchid,p_shedid,p_companyid,@defaultfemalechickid) ,
           fnc_chicks_placementqty(p_breederbatchid,p_shedid,p_companyid,@defaultmalechickid) ,
           fnc_chicks_placementqty(p_breederbatchid,p_shedid,p_companyid,@defaultfemalechickid),
		   fnc_daily_consumption_cost(p_breederbatchid,p_shedid,@p_placementdate,p_transactiondate),
           fnc_bird_liveqty(p_breederbatchid,p_shedid,@defaultmalechickid,@p_placementdate,p_transactiondate,p_companyid),
           fnc_bird_liveqty(p_breederbatchid,p_shedid,@defaultfemalechickid,@p_placementdate,p_transactiondate,p_companyid),
		   fnc_dailymortality (p_breederbatchid,p_shedid,@p_placementdate,p_transactiondate),
		   func_prev_birdcost(p_breederbatchid,p_shedid,@defaultfemalechickid,@defaultmalechickid,@p_placementdate,p_transactiondate,p_companyid)INTO
         
           @malepurchasecost, @femalepurchasecost,@maleplaceqty, @femaleplacedqty,@consumptioncost,@malebirdliveqty,@femalebirdliveqty,@mortality,@mortalitycost;
        SELECT@malepurchasecost, @femalepurchasecost,@maleplaceqty, @femaleplacedqty,@consumptioncost,@malebirdliveqty,@femalebirdliveqty,@mortality,@mortalitycost;
         SELECT ((@malepurchasecost*@maleplaceqty)+(@femalepurchasecost*@femaleplacedqty)) INTO @purvalue;
         SELECT  @purvalue;
         select (@mortalitycost);
         SELECT (((@purvalue+@consumptioncost)+(@mortalitycost))/(@femalebirdliveqty+@malebirdliveqty)) as hjg;
         
        

        -- SElECT 
           
         END IF;  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_birdsalesregisterbatchwise_report`(
IN p_fromdate DATE,
IN p_todate DATE,
IN p_batchid varchar(1000),
IN p_shed varchar(1000),
IN p_customerid varchar(1000),
IN p_companyid INT(11)

)
BEGIN
SET @@sql_mode = ' ';

Drop temporary table if exists birssaletregister;
Create temporary table  birssaletregister

select 
CBD.batch_number,
CBD.farmer_enquiry_id,
CBD.id as batchis,
CB.cbfshedid,
CFE.farmer_name,	
CFE.farm_name,
-- CFSDD.id,
CFSDD.shed_name,
CFSDD.warehousebinid,
-- SDD.warehousebinid,
SI.id as salesinvoiceid,
SI.salesinvoiceno as salesinvoiceno,
DATE_FORMAT( SI.salesinvoicedate,'%d/%m/%Y') as salesinvoicedate,
-- SI.salesorderid,
CBO.stdsalesorderid,
-- SD.salesorderid,
-- CDW.birdsalesorderid,
-- CDW.farmerenquiryid,
-- DATE_FORMAT( SI.salesinvoicedate,'%d/%m/%Y') as salesinvoicedate,
P.partyname,
SID.unitprice,
SDD.rate as sddrate,
ROUND(IFNULL((SDD.weight/SDD.quantity),0),2) As AvgWeight,
SDD.quantity,
IFNULL((SDD.weight),0) As weight, 
IFNULL((SDD.rate*SDD.weight),0) As Amount

-- (IFNULL((SDD.weight),0)/SDD.quantity)as avgsize
 


From  cbf_batch_details CBD
LEFT JOIN cbf_batchbalance CB ON CB.cbfbatchid = CBD.id
LEFT JOIN cbf_farmerenquiry CFE ON CFE.id = CBD.farmer_enquiry_id
LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CFSDD ON CFSDD.id = CB.cbfshedid
LEFT JOIN salesdeliverydetail SDD ON SDD.warehousebinid = CFSDD.warehousebinid
LEFT JOIN salesdelivery SD ON SD.id = SDD.salesdeliveryid
LEFT JOIN cbf_birdsalesorder CBO ON SD.salesorderid = CBO.stdsalesorderid
LEFT JOIN salesinvoice SI ON SI.salesorderid = CBO.stdsalesorderid
LEFT JOIN cbf_delivery_weights CDW ON CDW.birdsalesorderid = CBO.id
LEFT JOIN salesinvoicedetail SID ON SI.id = SID.salesinvoiceid
LEFT JOIN party P ON SI.customerid = P.id

where  
SI.salesinvoicedate BETWEEN p_fromdate AND p_todate AND
SI.companyid = p_companyid AND
FIND_IN_SET( P.id, p_customerid)
AND P.partyroleids = 32
AND FIND_IN_SET(CBD.id,p_batchid)
group by salesinvoiceid,batch_number;


-- select * from birssaletregister;

Drop temporary table if exists birssaletregister1;
Create temporary table birssaletregister1

select *, 'item' as entity from birssaletregister;    
-- for sub total--
	 DROP TEMPORARY TABLE IF EXISTS birssaletregister2;
	CREATE TEMPORARY TABLE birssaletregister2	
    SELECT * from (
    SELECT * from birssaletregister1
    UNION ALL	
				SELECT 
                
				    'Sub Total' as batch_number,
                    '' as farmer_enquiry_id,
					'' as batchis,
					'' as cbfshedid,
					'' as farmer_name,
                    '' as farm_name,
                    '' as shed_name,
					'' as warehousebinid,
                    '' as salesinvoiceid,
                    '' as salesinvoiceno,
					'' as salesinvoicedate,
					-- '' as salesorderid,
					'' as stdsalesorderid,
                    -- '' as birdsalesorderid,
                   -- '' as unitprice,
                    '' as partyname,
                    -- SUM((IFNULL((SUM(sddrate)*SUM(weight)),0)/IFNULL((SUM(weight)),0))) as unitprice, 
                    ROUND((IFNULL(sum(Amount),0)/IFNULL(SUM(weight),0)),2) as unitprice,
                    '' as sddrate,
					ROUND((IFNULL((SUM(weight)/SUM(quantity)),0)),2) As AvgWeight,
                    SUM(quantity) as quantity,
                    SUM(weight) as weight,
					SUM(Amount) as Amount,
                   --  '' as avgrate,
                    -- '' as avgsize,
                     'subtotal' as entity
				
				FROM
					birssaletregister
                    
						GROUP BY batch_number
                        ) as tmpresult; 
	
SELECT * FROM birssaletregister2;    




END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_birdsalesregister_report`(
IN p_fromdate DATE,
IN p_todate DATE,
IN p_customerid varchar(5000),
IN p_companyid INT(11)

)
BEGIN
SET @@sql_mode = ' ';

SELECT  SI.id as salesinvoiceid,
		SI.salesinvoiceno as salesinvoiceno,
		SI.salesorderid,
        CBO.stdsalesorderid,
        SD.salesorderid,
        CDW.birdsalesorderid,
        CDW.farmerenquiryid,
		DATE_FORMAT( SI.salesinvoicedate,'%d/%m/%Y') as salesinvoicedate,
        SDD.rate as unitprice,
        P.partyname,
        SDD.quantity,
        IFNULL((SDD.weight),0) As weight, 
        SDD.rate,
        IFNULL((SDD.weight/SDD.quantity),0) As AvgWeight,
		IF(IFNULL(SDD.weight,0) = 0,IFNULL((SDD.rate*SDD.quantity),0) , IFNULL((SDD.rate*SDD.weight),0)) as Amount,
        -- ((ED.quantity/ ECD.quantity)*100) as percentage
        -- IFNULL((SDD.rate*SDD.weight),0) As Amount,
	    CFE.id,
	    CFE.farmer_name
    
        
       
 
    FROM salesinvoice SI
    LEFT JOIN salesinvoicedetail SID ON SI.id = SID.salesinvoiceid
	LEFT JOIN party P ON SI.customerid = P.id
	LEFT JOIN cbf_birdsalesorder CBO ON SI.salesorderid = CBO.stdsalesorderid
	LEFT JOIN cbf_delivery_weights CDW ON CDW.birdsalesorderid = CBO.id
    LEFT JOIN salesdelivery SD ON SD.salesorderid = SI.salesorderid
    LEFT JOIN salesdeliverydetail SDD ON SDD.salesdeliveryid = SD.id
	LEFT JOIN cbf_farmerenquiry CFE ON CFE.id = CDW.farmerenquiryid
  
   
	
    
   WHERE    SI.salesinvoicedate BETWEEN p_fromdate AND p_todate AND
			SI.companyid = p_companyid AND
			FIND_IN_SET( P.id, p_customerid)
			AND P.partyroleids = 32
            group by SI.id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_bookinvoive_fromgrowingcharges`(
	IN p_growingchargeid INT,
    IN p_cbf_batchid INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	SET @purchaseInvoice = null;
    SET @purchaseInvoicedetail = null;
    SET @vendorid = null;
    SET @supplierledgerid = null;
    SET @total = null;
    SET @netpayableamt = null;
    SET @freightamt = null;
    SET @breeditemid = null;
    SET @totalqty = null;
    SET @avgsellingrate = null;
    SET @taxid = null;
    SET @taxpercent = null;
    
    SELECT FA.partyid, P.supplierledgerid INTO @vendorid, @supplierledgerid
    FROM cbf_farmeragreement FA
    LEFT JOIN cbf_batch_details CB ON CB.farmer_enquiry_id = FA.farmerenquiryid
    LEFT JOIN party P ON P.id = FA.partyid
    WHERE CB.id = p_cbf_batchid LIMIT 1;
    
    SELECT total, netpayableamt, freightamt, breeditemid,
		   avgsellingrate
    INTO @total, @netpayableamt, @freightamt, @breeditemid,
		 @avgsellingrate
    FROM cbf_growingcharges
    WHERE id = p_growingchargeid;
    
    SELECT (totalsaleqty + totalprocessingqty) INTO @totalqty FROM cbf_growingcharges
    WHERE id = p_growingchargeid;
    
    SELECT CS.taxid, T.taxpercent INTO @taxid, @taxpercent
    FROM cbfsetting CS
    LEFT JOIN tax T ON T.id = CS.taxid
    LIMIT 1;
    
    -- Purchase invoice for CBF growing charges
	CALL spc_purchaseinvoice_save(
		NULL, now(), NULL, @vendorid, NULL,
        NULL, NULL, now(), NULL, @netpayableamt,
        NULL, @total, @freightamt, @netpayableamt,
        NULL, NULL, NULL, NULL, NULL, NULL,
        p_companyid, p_userid, @purchaseInvoice
    );
    
    CALL spc_purchaseinvoicedetail_save(
		NULL, @purchaseInvoice, @breeditemid, 
        (SELECT itemname FROM item WHERE id = @breeditemid),
        (SELECT itemunitid FROM item WHERE id = @breeditemid),
        @totalqty, NULL, @avgsellingrate, NULL, @taxid, @taxpercent, 
        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
        NULL, NULL, NULL, NULL, p_companyid, p_userid, @purchaseInvoicedetail
    );
    
    -- ******************************************* --
    
    -- JE for purchase invoice
    
    DROP TABLE IF EXISTS temppurchaseinvoice;
  --  DROP TABLE IF EXISTS tempfreight;

	 SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				(SELECT invoicedate FROM purchaseinvoice WHERE id = @purchaseInvoice),
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                NULL,
				NULL,
				'Purchase invoice JE',
				NULL,
				NULL,
				NULL,
				@purchaseInvoice,
				'Purchase invoice JE',
				p_companyid,
                p_userid,
                @jeid
           );
           
			SET @row_number = 0;
   
			CREATE TEMPORARY TABLE temppurchaseinvoice
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemid, taxid, taxpercent from (
				SELECT 
					(quantity*unitprice) as totalcost,
                    itemid,
                    taxid,
                    taxpercent
				FROM purchaseinvoicedetail 
                where purchaseinvoiceid = @purchaseInvoice
            ) 
            as tblpurchaseinvoicedetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM temppurchaseinvoice INTO n;
				
					WHILE i<n DO 
					
						SET @totalcost = null;
                        SET @itemid = null;
                        SET @taxid = null;
                        SET @taxpercent = null;
						select totalcost, itemid, taxid, taxpercent into @totalcost, @itemid, @taxid, @taxpercent from temppurchaseinvoice where num = i+1;
                    
						-- insert JE detail
                        
                        -- debit to item - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(SELECT ledgerid FROM item WHERE id = @itemid),
							0,
							p_cbf_batchid,
							NULL,
							NULL,
							@purchaseInvoice,
							(SELECT invoicedate FROM purchaseinvoice WHERE id = @purchaseInvoice),
							(SELECT subtotal FROM purchaseinvoice WHERE id = @purchaseInvoice),
							@totalcost,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Item JE',
							p_companyid,
							p_userid,
							@jedetailid1
						 );
                        
                        -- debit to tax ledgers
                        if(@taxid IS NOT null) then
							 SET @jedetailid2 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @taxid),
								0,
								p_cbf_batchid,
								NULL,
								NULL,
                                @purchaseInvoice,
								(SELECT invoicedate FROM purchaseinvoice WHERE id = @purchaseInvoice),
								(SELECT subtotal FROM purchaseinvoice WHERE id = @purchaseInvoice),
								((@totalcost * @taxpercent) / 100),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Tax JE detail.',
								p_companyid,
								p_userid,
								@jedetailid2
							 );
						end if;                        
                        
                        -- debit to discount ledger
                        
                        /*SET @jedetailid6 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(SELECT discountledgerid FROM breedersetting LIMIT 1),
                            0,
							@batchid,
							NULL,
							NULL,
                            p_purchaseinvoiceid,
							(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
							(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
							@itemdiscount,
							0,
							NULL,
							NULL,
							NULL,
							NULL,
							NULL,
							'Discount JE detail.',
							p_companyid,
							p_userid,
							@jedetailid6
						 );*/
                        
                        -- credit to vendor - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@supplierledgerid,
							0,
							p_cbf_batchid,
							NULL,
							NULL,
                            @purchaseInvoice,
							(SELECT invoicedate FROM purchaseinvoice WHERE id = @purchaseInvoice),
							(SELECT subtotal FROM purchaseinvoice WHERE id = @purchaseInvoice),
							0,
							(@totalcost + ((@totalcost * @taxpercent) / 100)),
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Credit to party JE',
							p_companyid,
							p_userid,
							@jedetailid
						 );
                        
						SET i = i + 1;
					END WHILE;
				End;
                
                /*SET @freightledgerid = null;
				select inputledgerid from freight F
				LEFT JOIN freightdetail FD ON FD.freighttypeid = F.id
				where FD.purchaseinvoiceid = p_purchaseinvoiceid;
				
				SET @row_number1 = 0;

				CREATE TEMPORARY TABLE tempfreight
				
				SELECT (@row_number1:=@row_number1 + 1) AS num1,
                    freightamount, cgstid,cgstamount,sgstid,sgstamount,igstid,igstamount,utgstid,utgstamount,freighttypeid
                    
                    FROM(
				
					SELECT id,
						   freightamount,
						   cgstid,
						   cgstamount,
						   sgstid,
						   sgstamount,
						   igstid,
						   igstamount,
						   utgstid,
						   utgstamount,
                           freighttypeid
					
					FROM freightdetail 
					WHERE purchaseinvoiceid = p_purchaseinvoiceid
					
				) as tblfreightdetail1;
				
				BEGIN
				
				DECLARE n1 INT DEFAULT 0;
				DECLARE j INT DEFAULT 0;
				SELECT COUNT(*) FROM tempfreight INTO n1;
				
					WHILE j<n1 DO 
						
                        SET @inputledgerid = null;
						SET @cgstid1 = null;
                        SET @sgstid1 = null;
                        SET @igstid1 = null;
                        SET @utgstid1 = null;
                        
                        SET @freightamount = null;
                        SET @cgstamount1 = null;
                        SET @sgstamount1 = null;
                        SET @igstamount1 = null;
                        SET @utgstamount1 = null;
                        
                        SET @freighttypeid = null;
                        
						select freightamount,cgstid, sgstid, igstid, utgstid, cgstamount, sgstamount, igstamount, utgstamount, freighttypeid
                        INTO @freightamount,@cgstid1, @sgstid1, @igstid1, @utgstid1, @cgstamount1, @sgstamount1, @igstamount1, @utgstamount1, @freighttypeid 
                        from tempfreight where num1 = j+1;
                    
						select inputledgerid INTO @inputledgerid from freight F LEFT JOIN freightdetail FD ON FD.freighttypeid = F.id
						where FD.purchaseinvoiceid = p_purchaseinvoiceid and FD.freighttypeid = @freighttypeid; 
                    
                    
						-- insert JE detail
                        
                        -- debit to freight - Ledger
                         
                         SET @jedetailid7 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@inputledgerid,
							0,
							@batchid,
							NULL,
							NULL,
                            p_purchaseinvoiceid,
							(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
							(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
							@freightamount,
							0,
							NULL,
							NULL,
							NULL,
							NULL,
							NULL,
							'Freight JE',
							p_companyid,
							p_userid,
							@jedetailid7
						 );
                        
                        -- debit to tax ledgers
                        if(@cgstid1 IS NOT null) then
							 SET @jedetailid8 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @cgstid1),
								0,
								@batchid,
								NULL,
								NULL,
                                p_purchaseinvoiceid,
								(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								@cgstamount1,
								0,
								NULL,
								NULL,
								NULL,
								NULL,
								NULL,
								'CGST freight JE detail.',
								p_companyid,
								p_userid,
								@jedetailid8
							 );
						end if;
                        
                        if(@sgstid1 IS NOT null) then
							 SET @jedetailid9 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @sgstid1),
								0,
								@batchid,
								NULL,
								NULL,
                                p_purchaseinvoiceid,
								(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								@sgstamount1,
								0,
								NULL,
								NULL,
								NULL,
								NULL,
								NULL,
								'SGST freight JE detail.',
								p_companyid,
								p_userid,
								@jedetailid9
							 );
						end if;
                        
                        if(@igstid1 IS NOT null) then
							 SET @jedetailid10 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @igstid1),
								0,
								@batchid,
								NULL,
								NULL,
                                p_purchaseinvoiceid,
								(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								@igstamount1,
								0,
								NULL,
								NULL,
								NULL,
								NULL,
								NULL,
								'IGST freight JE detail.',
								p_companyid,
								p_userid,
								@jedetailid10
							 );
						end if;
                        
                        if(@utgstid1 IS NOT null) then
							 SET @jedetailid11 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @utgstid1),
								0,
								@batchid,
								NULL,
								NULL,
                                p_purchaseinvoiceid,
								(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								@utgstamount1,
								0,
								NULL,
								NULL,
								NULL,
								@utgstid,
								NULL,
								'UTGST freight JE detail.',
								p_companyid,
								p_userid,
								@jedetailid11
							 );
						end if;
                        
						SET j = j + 1;
					END WHILE;
				
				END;*/
                

	-- update isinvoicebooked true in cbf_growingcharges
    
    UPDATE cbf_growingcharges SET isinvoicebooked = 1 WHERE id = p_growingchargeid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_branchwisefarmerenquiryshed_search`(
	IN p_branchid INT,
    IN p_shedstatusid INT,
    IN p_companyid INT
)
BEGIN

	 SELECT FE.id, 
			supervisor_id,
			DATE_FORMAT(enquiry_date,'%d/%m/%Y') as enquiry_date,
			farmer_name,
			farm_name,
			farm_type_id,
			address,
			mobile_no,
			incharge_name,
			shed_type_id,
			property_owner,
			age,
			occupation,
			branch_id,
            B.branchname,
            B.branchcode,
			line_id,
			rest_period,
			farm_area_length,
			farm_area_width,
			total_area,
			density,
			incharge_contact_no,
			water_facility_id,
			over_head_tank_capacity,
			over_head_tank_type_id,
			holding_tank_capacity,
			holding_tank_type_id,
			flooring_id,
			roofing_id,
			diesel_brooder,
			gas_brooder,
			cool_brooder,
			farm_partition,
			electric_brooder,
			wood_brooder,
			thermometer,
			spray_pump,
			road_facility_id,
			mseb_connection_id,
			feed_room_facility,
			curtain_type_id,
			cross_curtains,
			foggers,
			mortality_disposal_pit,
			generator,
			refrigerator,
			inverter,
			tus_storage_facility,
			thermos,
			out_side_curtains,
			ceiling_curtains,
			center_curtains,
			contract_type_id,
			reasons_for_disc_per,
			district,
			taluka,
			post,
			gat_sr_no,
			area,
			valuation,
			owner_name,
			chick_capacity,
			status_id,
            REF.refname as farmstatus,
			distance_from_branch,
			distance_from_feed_mill,
			FA.enddate,
            FES.id as shedid,
            FES.shed_name,
            ROUND((FES.total_sq_ft/FE.density),3) as shedcapacity
                
		FROM cbf_farmerenquiry FE
        INNER JOIN cbf_farmerenquiry_sheddimensiondetail FES ON FES.farmerenquiryid = FE.id
        LEFT JOIN cbf_farmeragreement FA ON FA.farmerenquiryid = FE.id
        LEFT JOIN `reference` REF ON REF.id = FE.status_id
        LEFT JOIN commonbranch B ON B.id = FE.branch_id 
        
        WHERE FE.branch_id = p_branchid AND FE.company_id = p_companyid
        AND FA.id is not null 
        AND FA.statusid = 2062  and FA.enddate>CURDATE()
		AND FES.statusid = p_shedstatusid
        
        ORDER BY FE.id DESC;
        
        /*SET @shedid = null;
        SELECT FES.id INTO @shedid FROM cbf_farmerenquiry FE
        LEFT JOIN cbf_farmerenquiry_sheddimensiondetail FES ON FE.id = FES.farmerenquiryid
        LEFT JOIN cbf_farmeragreement FA ON FA.farmerenquiryid = FE.id
        WHERE FE.branch_id = p_branchid AND FE.company_id = p_companyid
        AND FA.id is not null 
        AND FA.statusid = 2062
		AND FES.statusid = p_shedstatusid;
        
        call spc_warehousebin_stock(@shedid);*/
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_branchwisesalesorder_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN
	SELECT a.*, 
	DATE_FORMAT(a.salesorderdate,'%d/%m/%Y') as salesorderdate,
    b.partyname as customerName,
    c.itemid,
    c.quantity,
    c.unitprice
    FROM salesorder a
    LEFT JOIN party b ON b.id = a.customerid
    LEFT JOIN salesorderdetail c ON c.salesorderid = a.id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_branchwise_density`(
	IN p_branchid INT(11)
)
BEGIN
	SELECT IFNULL(D.densityperbird,0) as densityperbird
    FROM density D
	LEFT JOIN location L ON L.id = D.locationid
    WHERE L.branchid = p_branchid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_branch_delete`(
	IN p_id INT(11),
    out out_id INT(11)
)
BEGIN
	IF exists(select branchid FROM journalentry where branchid = p_id limit 1) THEN
     SELECT -1 INTO out_id;
     ELSE
	   DELETE FROM branch WHERE id = p_id;
     SELECT  p_id INTO out_id;
     END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_branch_save`(
   IN p_id INT(11),
   IN p_branchname VARCHAR(200),
   IN p_branchcode VARCHAR(200),
   IN p_isactive TINYINT(4),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO branch 
				(id, branchname, branchcode, isactive, companyid)
			VALUES 
				(p_id, p_branchname, p_branchcode, p_isactive, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE branch
				SET branchname = p_branchname,
					branchcode = p_branchcode,
                    isactive = p_isactive,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'branch', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_branch_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id, branchname, branchcode, isactive, companyid
           
	FROM branch
    
    WHERE companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_branch_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT id, branchname, branchcode, isactive, companyid
           
	FROM branch
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchbalance_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederbatchbalance WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchbalance_save`(
	IN p_id INT(11),
    IN p_updateddate DATE,
    IN p_breederbatchid INT(11),
    IN p_breedershedid INT(11),
    IN p_breedershedpenid INT(11),
    IN p_itemid INT(11),
    IN p_quantity INT(11),
    -- IN p_mortality INT(11),
    -- IN p_culls INT(11),
    IN p_transactionname VARCHAR(45),
    IN p_companyid INT(11),
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederbatchbalance 
				(id, updateddate, breederbatchid, breedershedid, breedershedpenid, itemid, quantity, transactionname, companyid)
			VALUES 
				(p_id, p_updateddate, p_breederbatchid, p_breedershedid, p_breedershedpenid, p_itemid, p_quantity, p_transactionname, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE breederbatchbalance
				SET  updateddate = p_updateddate,
                breederbatchid = p_breederbatchid,
                breedershedid = p_breedershedid,
                breedershedpenid = p_breedershedpenid,
                itemid = p_itemid,
                quantity = p_quantity,
                transactionname = p_transactionname,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breederbatchbalance', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchbalance_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
		   breederbatchid,
           breedershedid,
           breedershedpenid,
           quantity,
           companyid
    
    FROM breederbatchbalance
    
    WHERE companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchbalance_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT id,
		   breederbatchid,
           breedershedid,
           breedershedpenid,
           quantity,
           companyid
    
    FROM breederbatchbalance
    
    WHERE (
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchconsumptionopeningdetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM breederbatchconsumptionopeningdetail WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchconsumptionopeningdetail_save`(
	 IN p_id INT(11),
     IN p_breederbatchopeningid INT(11),
     IN p_breeditemid INT(11),
     IN p_consumptiontypeid INT(11),
     IN p_consumptionitemid INT(11),
     IN p_quantity DECIMAL(20,3),
     IN p_rate DECIMAL(9,3),
     IN p_itemvalue DECIMAL(20,3),
     IN p_companyid INT(11),
     IN p_userid INT(11),
     OUT out_id INT
)
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
        INSERT INTO breederbatchconsumptionopeningdetail(
			id,
			breederbatchopeningid,
			breeditemid,
			consumptiontypeid,
			consumptionitemid,
			quantity,
			rate,
			itemvalue,
			companyid
        )
        
        VALUES(
			p_id,
			p_breederbatchopeningid,
			p_breeditemid,
			p_consumptiontypeid,
			p_consumptionitemid,
			p_quantity,
			p_rate,
			p_itemvalue,
			p_companyid
        );
        
        SET @action = 'INSERT';
        
    ELSE
		
        UPDATE breederbatchconsumptionopeningdetail
        SET breederbatchopeningid = p_breederbatchopeningid,
			breeditemid = p_breeditemid,
			consumptiontypeid = p_consumptiontypeid,
			consumptionitemid = p_consumptionitemid,
			quantity = p_quantity,
			rate = p_rate,
			itemvalue = p_itemvalue,
            id = LAST_INSERT_ID(id)
		WHERE
			id = p_id
            AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'breederbatchconsumptionopeningdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchconsumptionopeningdetail_search`(
	IN p_breederbatchopeningid INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
			breederbatchopeningid,
			breeditemid,
			consumptiontypeid,
			consumptionitemid,
			quantity,
			rate,
			itemvalue
            
	FROM breederbatchconsumptionopeningdetail
    
    WHERE breederbatchopeningid = p_breederbatchopeningid
    AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchconsumptionopeningdetail_select`(
	IN p_id INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
			breederbatchopeningid,
			breeditemid,
			consumptiontypeid,
			consumptionitemid,
			quantity,
			rate,
			itemvalue
            
	FROM breederbatchconsumptionopeningdetail
    
    WHERE id = p_id
    AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchdetail_report`(
	IN p_breederbatchid VARCHAR(100),
    IN p_fromdate DATE,
	IN p_todate DATE,
    IN p_companyid INT
 )
if EXISTS (SELECT breederbatchid FROM breederdailytransaction where breederbatchid = p_breederbatchid)THEN

 
BEGIN
SET @@sql_mode = ' ';

     SELECT 
			BDT.id,
            BDT.id as id1,
            BDT.breederbatchid,
            BB.batchname,
            DATE_FORMAT(BDT.transactiondate ,'%d/%m/%Y') as `date`, 
			BDT.shedid,
			BS.shedname,
            BB.maleitemid as maleitemid,
            BB.femaleitemid as femaleitemid,
			fnc_transaction_date_wise_liveqty_ope(BDT.breederbatchid, BDT.shedid, BB.femaleitemid, BDT.transactiondate,p_companyid) as femaleopeningbalance,
			fnc_transaction_date_wise_liveqty_ope(BDT.breederbatchid, BDT.shedid, BB.maleitemid, BDT.transactiondate,p_companyid) as maleopeningbalance,
            fnc_transaction_date_wise_liveqty(BDT.breederbatchid, BDT.shedid, BB.maleitemid,BDT.transactiondate,p_companyid) as maleclosingbalance,
            
          
            
			fnc_transaction_date_wise_liveqty(BDT.breederbatchid, BDT.shedid, BB.femaleitemid,BDT.transactiondate,p_companyid) as femaleclosingbalance,
			fnc_batchwise_malefemaleculls_ongivendate(BDT.id, BB.femaleitemid) as  femaleculls,
			fnc_batchwise_malefemaleculls_ongivendate(BDT.id, BB.maleitemid) as maleculls,
			fnc_batchwise_malefemalemortality_ongivendate(BDT.id, BB.femaleitemid) as femalemortality,
			fnc_batchwise_malefemalemortality_ongivendate(BDT.id, BB.maleitemid) as malemortality,
			fnc_batchshedwise_malefemale_transferedquantity(BDT.breederbatchid, BDT.shedid, BB.femaleitemid, BDT.transactiondate,p_companyid) as femaletransferedquantity,
			fnc_batchshedwise_malefemale_transferedquantity(BDT.breederbatchid, BDT.shedid, BB.maleitemid, BDT.transactiondate,p_companyid) as maletransferedquantity,
			fnc_batchshedwise_malefemale_transferedinquantity(BDT.breederbatchid, BDT.shedid, BB.femaleitemid, BDT.transactiondate,p_companyid) as femaletransferedinquantity,
			fnc_batchshedwise_malefemale_transferedinquantity(BDT.breederbatchid, BDT.shedid, BB.maleitemid, BDT.transactiondate,p_companyid) as maletransferedinquantity,
            fnc_calculate_cummalefemaleculls(BDT.breederbatchid, BDT.shedid, BDT.transactiondate,p_companyid) as cummalefemaleculls,
            fnc_calculate_cummalefemalemortality(BDT.breederbatchid, BDT.shedid, BDT.transactiondate,p_companyid) as cummalefemalemortality,
            fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid) as weekno
			
	FROM breederdailytransaction BDT 
    INNER JOIN breederbatch BB ON BB.id =BDT.breederbatchid
    INNER JOIN breedershed BS ON BS.id = BDT.shedid
    WHERE
    FIND_IN_SET(BDT.breederbatchid,p_breederbatchid) AND
     BDT.transactiondate BETWEEN p_fromdate AND p_todate;
  
END;

ELSE

BEGIN

SET @@sql_mode = ' ';
SET @malemortality = 0;
SET @femalemortality = 0;
SET @maleculls = 0;
SET @femaleculls = 0;
SET @cummalefemaleculls = 0;
SET @cummalefemalemortalityas = 0;
SET @maletransferedquantity = 0;
SET  @femaletransferedquantity = 0;


		select 
		BBO.breederbatchid,
		BB.batchname,
		BLO.shedid,
		BS.shedname,
		DATE_FORMAT(BBO.livebatchdate ,'%d/%m/%Y') as `date`, 
		BB.maleitemid as maleitemid,
		BB.femaleitemid as femaleitemid,
		fnc_transaction_date_wise_liveqty_ope(BBO.breederbatchid, BLO.shedid, BB.femaleitemid,p_fromdate,p_companyid) as femaleopeningbalance,
		fnc_transaction_date_wise_liveqty_ope(BBO.breederbatchid, BLO.shedid, BB.maleitemid,p_fromdate,p_companyid) as maleopeningbalance,
		fnc_transaction_date_wise_liveqty(BBO.breederbatchid, BLO.shedid, BB.maleitemid,p_fromdate,p_companyid) as maleclosingbalance,
		fnc_transaction_date_wise_liveqty(BBO.breederbatchid, BLO.shedid, BB.femaleitemid,p_fromdate,p_companyid) as femaleclosingbalance,
        fnc_batchshedwise_malefemale_transferedquantity(BBO.breederbatchid, BLO.shedid, BB.femaleitemid, BBO.batchplacementdate) as femaletransferedquantity,
		fnc_batchshedwise_malefemale_transferedquantity(BBO.breederbatchid, BLO.shedid, BB.maleitemid, BBO.batchplacementdate) as maletransferedquantity,
        fnc_batchshedwise_malefemale_transferedinquantity(BBO.breederbatchid, BLO.shedid, BB.femaleitemid, BBO.batchplacementdate) as femaletransferedinquantity,
		fnc_batchshedwise_malefemale_transferedinquantity(BBO.breederbatchid, BLO.shedid, BB.maleitemid, BBO.batchplacementdate) as maletransferedinquantity,
		@maleculls as maleculls,
		@femaleculls as femaleculls,
		@malemortality as malemortality,
		@femalemortality as femalemortality,
        @maletransferedquantity as maletransferedquantity,
		@femaletransferedquantity as femaletransferedquantity,
		fun_batch_ageinweek(p_fromdate,BBO.breederbatchid,p_companyid) as weekno
        
		FROM breederbatchlocationwiseopeningdetail BLO
		INNER JOIN breederbatchopening BBO ON BBO.id = BLO.breederbatchopeningid
		INNER JOIN breederbatch BB ON BB.id =BBO.breederbatchid
		INNER JOIN breedershed BS ON BS.id = BLO.shedid

		where  
	    BBO.breederbatchid =p_breederbatchid 
		group by BLO.shedpenid;  

END;
END IF$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchfinancialopeningdetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM breederbatchfinancialopeningdetail WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchfinancialopeningdetail_save`(
	IN p_id INT(11),
    IN p_breederbatchopeningid INT(11),
    IN p_breedervalue DECIMAL(20,3),
    IN p_consumptionvalue DECIMAL(20,3),
    IN p_overheadexp DECIMAL(9,3),
    IN p_breedliveqty DECIMAL(20,3),
    IN p_WIPaccountbalance DECIMAL(20,3),
    IN p_WIPperbird DECIMAL(12,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
        INSERT INTO breederbatchfinancialopeningdetail(
			id,
			breederbatchopeningid,
			breedervalue,
			consumptionvalue,
			overheadexp,
			breedliveqty,
			WIPaccountbalance,
			WIPperbird,
			companyid
        )
        
        VALUES(
			p_id,
			p_breederbatchopeningid,
			p_breedervalue,
			p_consumptionvalue,
			p_overheadexp,
			p_breedliveqty,
			p_WIPaccountbalance,
			p_WIPperbird,
			p_companyid
        );
        
        SET @action = 'INSERT';
        
    ELSE
		
        UPDATE breederbatchfinancialopeningdetail
        SET 
			breederbatchopeningid = p_breederbatchopeningid,
			breedervalue = p_breedervalue,
			consumptionvalue = p_consumptionvalue,
			overheadexp = p_overheadexp,
			breedliveqty = p_breedliveqty,
			WIPaccountbalance = p_WIPaccountbalance,
			WIPperbird = p_WIPperbird,
            id = LAST_INSERT_ID(id)
		WHERE
			id = p_id
            AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'breederbatchfinancialopeningdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchfinancialopeningdetail_search`(
	IN p_breederbatchopeningid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT
			id,
			breederbatchopeningid,
			breedervalue,
			consumptionvalue,
			overheadexp,
			breedliveqty,
			WIPaccountbalance,
			WIPperbird,
			companyid
    
    FROM breederbatchfinancialopeningdetail
    
	WHERE breederbatchopeningid = p_breederbatchopeningid AND companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchfinancialopeningdetail_select`(
	IN p_companyid INT(11),
    IN p_id INT(11)
)
BEGIN

	SELECT
			id,
			breederbatchopeningid,
			breedervalue,
			consumptionvalue,
			overheadexp,
			breedliveqty,
			WIPaccountbalance,
			WIPperbird,
			companyid
    
    FROM breederbatchfinancialopeningdetail
    
	WHERE id = p_id AND companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchflockdetail_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		B.id,
        L.locationcode,
        L.locationname,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        WB.bincode,
        WB.binname,
        B.statusid,
        REF.refname as batchstatus,
        B.locationid
	
    FROM
		breederbatch B
	
    LEFT JOIN location L ON B.locationid = L.id
    LEFT JOIN warehouse W ON B.warehouseid = W.id
    LEFT JOIN warehousebin WB on B.binid = WB.id
    LEFT JOIN `reference` REF ON REF.id = B.statusid
	
	WHERE
		B.companyid = p_companyid AND
        find_in_set(B.statusid,'222,223')
        
	ORDER BY B.id DESC;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchlocationwiseopeningdetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM breederbatchlocationwiseopeningdetail WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchlocationwiseopeningdetail_save`(
	IN p_id INT(11),
    IN p_breederbatchopeningid INT(11),
    IN p_itemtype TINYINT(4),
    IN p_itemid INT(11),
    IN p_balanceqty DECIMAL(20,3),
    IN p_locationid INT(11),
    IN p_shedid INT(11),
    IN p_shedpenid INT(11),
    IN p_penqty DECIMAL(20,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
        INSERT INTO breederbatchlocationwiseopeningdetail(
			id,
			breederbatchopeningid,
			itemid,
			balanceqty,
			locationid,
			shedid,
			shedpenid,
			penqty,
			companyid
        )
        
        VALUES(
			p_id,
			p_breederbatchopeningid,
			p_itemid,
			p_balanceqty,
			p_locationid,
			p_shedid,
			p_shedpenid,
			p_penqty,
			p_companyid
        );
        
        SET @action = 'INSERT';
        
    ELSE
		
        UPDATE breederbatchlocationwiseopeningdetail
        SET breederbatchopeningid = p_breederbatchopeningid,
			itemid = p_itemid,
			balanceqty = p_balanceqty,
			locationid = p_locationid,
			shedid = p_shedid,
			shedpenid = p_shedpenid,
			penqty = p_penqty,
            id = LAST_INSERT_ID(id)
		WHERE
			id = p_id
            AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    SET @livebatchdate = null;
    SET @statusid = null;
    SET @breederbatchid = null;
    SET @batchplacementdate = null;
    SET @materialreceiptid = null;
    SET @birdrate = null;
    
    SELECT livebatchdate, statusid, breederbatchid, batchplacementdate, materialreceiptid 
    INTO @livebatchdate, @statusid, @breederbatchid, @batchplacementdate, @materialreceiptid FROM breederbatchopening WHERE id = p_breederbatchopeningid;
    if(@statusid = 1602) then
    SET @out_balanceid = NULL;
	CALL spc_breederbatchbalance_save(
		NULL, (SELECT livebatchdate FROM breederbatchopening WHERE id = p_breederbatchopeningid),
        (SELECT breederbatchid FROM breederbatchopening WHERE id = p_breederbatchopeningid),
		p_shedid, p_shedpenid,  p_itemid, p_penqty, 'Breeder batch opening', p_companyid, 
		p_userid, @out_balanceid
	);
    
    SELECT rate INTO @birdrate 
    FROM breederbatchmalefemaleopeningdetail
    WHERE itemid = p_itemid AND breederbatchopeningid = p_breederbatchopeningid;
    
        -- create itembatch for material receipt
		SET @itembatch = null;
		SET @itemgroup = null;
        SET @itemname = null;
        SET @itemunitid = null;
    
        select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith), itemname, itemunitid
        INTO @itembatch, @itemname, @itemunitid 
        from item I
		INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

		WHERE I.id = p_itemid;
        
        SELECT @itembatch;
        
        -- Material receipt detail entry
        SET @out_recdetailid = NULL;
		CALL spc_materialreceiptdetail_save(
			NULL, @materialreceiptid, p_itemid, (SELECT itemname FROM item WHERE id = p_itemid),
            p_penqty, @birdrate,
            (p_penqty * @birdrate),
            @itemunitid, @itembatch,
			(SELECT warhouseid FROM breedershed WHERE id = p_shedid),
            (SELECT warehousebinid FROM breedershed WHERE id = p_shedid),
            p_companyid,
			p_userid, NULL, @out_recdetailid
		);
              
		-- Make material movement entry for material receipt
        SET @out_movid1 = NULL;
		CALL spc_materialmovement_save(
			NULL, p_itemid, @itembatch, 685,
			@materialreceiptid, @batchplacementdate, p_penqty,
			NULL, NULL,
            (SELECT warhouseid FROM breedershed WHERE id = p_shedid),
            (SELECT warehousebinid FROM breedershed WHERE id = p_shedid),
			(p_penqty * @birdrate), p_companyid, p_userid, @out_movid1
		);
              
		 -- get item group id from the item id and update itemgroup table
        SELECT itemgroupid INTO @itemgroup FROM item WHERE id = p_itemid;
        
        UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
        
        WHERE id = @itemgroup;
    end if;
   
    -- update breedershed status to batch started = 14
    UPDATE breedershed SET statusid = 14 WHERE id = p_shedid;
    
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'breederbatchlocationwiseopeningdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchlocationwiseopeningdetail_search`(
	IN p_breederbatchopeningid INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
			breederbatchopeningid,
			itemid,
			balanceqty,
			locationid,
			shedid,
			shedpenid,
			penqty,
			companyid
            
	FROM breederbatchlocationwiseopeningdetail
    
    WHERE breederbatchopeningid = p_breederbatchopeningid AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchlocationwiseopeningdetail_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,
			breederbatchopeningid,
			itemid,
			balanceqty,
			locationid,
			shedid,
			shedpenid,
			penqty,
			companyid
            
	FROM breederbatchlocationwiseopeningdetail
    
    WHERE companyid = p_companyid AND id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchmalefemaleopeningdetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM breederbatchmalefemaleopeningdetail WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchmalefemaleopeningdetail_save`(
   IN p_id INT(11),
   IN p_breederbatchopeningid INT(11),
   IN p_itemtype TINYINT(4),
   IN p_itemid INT(11),
   IN p_placeqty INT(11),
   IN p_rate DECIMAL(9,3),
   IN p_birdvalue DECIMAL(20,3),
   IN p_liveqty INT(11),
   IN p_mortality INT(11),
   IN p_culls INT(11),
   IN p_cullssaleqty INT(11),
   IN p_regularsale INT(11),
   IN p_totalsale INT(11),
   IN p_goodeggsqty INT(11),
   IN p_flooreggsqty INT(11),
   IN p_othereggsqty INT(11),
   IN p_totaleggs INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		INSERT INTO breederbatchmalefemaleopeningdetail(
           id,
		   breederbatchopeningid,
           itemtype,
		   itemid,
		   placeqty,
           rate,
           birdvalue,
		   liveqty,
		   mortality,
		   culls,
		   cullssaleqty,
		   regularsale,
		   totalsale,
		   goodeggsqty,
		   flooreggsqty,
           othereggsqty,
		   totaleggs,
		   companyid
        )
        
        VALUES(
		   p_id,
		   p_breederbatchopeningid,
           p_itemtype,
		   p_itemid,
		   p_placeqty,
           p_rate,
           p_birdvalue,
		   p_liveqty,
		   p_mortality,
		   p_culls,
		   p_cullssaleqty,
		   p_regularsale,
		   p_totalsale,
		   p_goodeggsqty,
		   p_flooreggsqty,
           p_othereggsqty,
		   p_totaleggs,
		   p_companyid
        );
        
        SET @action = 'INSERT';
    
    ELSE
    
		UPDATE breederbatchmalefemaleopeningdetail
        SET 
		   breederbatchopeningid = p_breederbatchopeningid,
           itemtype = p_itemtype,
		   itemid = p_itemid,
		   placeqty = p_placeqty,
           rate = p_rate,
           birdvalue = p_birdvalue,
		   liveqty = p_liveqty,
		   mortality = p_mortality,
		   culls = p_culls,
		   cullssaleqty = p_cullssaleqty,
		   regularsale = p_regularsale,
		   totalsale = p_totalsale,
		   goodeggsqty = p_goodeggsqty,
		   flooreggsqty = p_flooreggsqty,
           othereggsqty = p_othereggsqty,
		   totaleggs = p_totaleggs,
		   companyid = p_companyid,
           id = LAST_INSERT_ID(id)
		WHERE
				id = p_id
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
    
    END IF;
    
      SELECT LAST_INSERT_ID() INTO out_id; 
      -- UPDATE breeder batch male female ids
SELECT statusid
    INTO @statusid FROM breederbatchopening WHERE id = p_breederbatchopeningid;
if(@statusid = 1602) then
    IF(p_itemtype = 1) THEN 
		UPDATE breederbatch
		SET maleitemid = p_itemid
		WHERE id = (SELECT breederbatchid FROM breederbatchopening WHERE id = p_breederbatchopeningid);
	ELSE
		UPDATE breederbatch
		SET femaleitemid = p_itemid
		WHERE id = (SELECT breederbatchid FROM breederbatchopening WHERE id = p_breederbatchopeningid);
	END IF;
END IF;
    
  
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'breederbatchmalefemaleopeningdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchmalefemaleopeningdetail_search`(
	IN p_breederbatchopeningid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT 
		   breederbatchopeningid,
		   itemid,
		   placeqty,
           rate,
           birdvalue,
		   liveqty,
		   mortality,
		   culls,
		   cullssaleqty,
		   regularsale,
		   totalsale,
		   goodeggsqty,
		   flooreggsqty,
           othereggsqty,
		   totaleggs
    
    FROM breederbatchmalefemaleopeningdetail
    
    WHERE breederbatchopeningid = p_breederbatchopeningid AND companyid = p_companyid;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchmalefemaleopeningdetail_select`(
	IN p_companyid INT(11),
    IN p_id INT(11)
)
BEGIN

	SELECT 
		   breederbatchopeningid,
		   itemid,
		   placeqty,
           rate,
           birdvalue,
		   liveqty,
		   mortality,
		   culls,
		   cullssaleqty,
		   regularsale,
		   totalsale,
		   goodeggsqty,
		   flooreggsqty,
           othereggsqty,
		   totaleggs
    
    FROM breederbatchmalefemaleopeningdetail
    
    WHERE companyid = p_companyid AND id = p_id;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchopeningdetail_search`(
	IN p_breederbatchopeningid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	-- financial
	SELECT
			id,
			breederbatchopeningid,
			breedervalue,
			consumptionvalue,
			overheadexp,
			breedliveqty,
			WIPaccountbalance,
			WIPperbird,
			companyid
    
    FROM breederbatchfinancialopeningdetail
    
	WHERE breederbatchopeningid = p_breederbatchopeningid AND companyid = p_companyid;
    
    
    -- locationwise
    SELECT BBL.id,
			BBL.breederbatchopeningid,
			BBL.itemid,
            I.itemname,
            I.itemcode,
			BBL.balanceqty,
			BBL.locationid,
            L.locationname,
			BBL.shedid,
            BS.shedname,
			BBL.shedpenid,
            BSL.linename,
			BBL.penqty,
			BBL.companyid
            
	FROM breederbatchlocationwiseopeningdetail BBL
    LEFT JOIN item I ON I.id = BBL.itemid
    LEFT JOIN breedershed BS ON BS.id = BBL.shedid
    LEFT JOIN breedershedline BSL ON BSL.id = BBL.shedpenid
    LEFT JOIN location L ON L.id = BBL.locationid
    
    WHERE BBL.breederbatchopeningid = p_breederbatchopeningid AND BBL.companyid = p_companyid;
    
    
    -- male female detail
    SELECT BBM.id,
		   BBM.breederbatchopeningid,
           BBM.itemtype,
		   BBM.itemid,
           I.itemname,
           I.itemcode,
		   BBM.placeqty,
           BBM.rate,
           BBM.birdvalue,
		   BBM.liveqty,
		   BBM.mortality,
		   BBM.culls,
		   BBM.cullssaleqty,
		   BBM.regularsale,
		   BBM.totalsale,
		   BBM.goodeggsqty,
		   BBM.flooreggsqty,
           BBM.othereggsqty,
		   BBM.totaleggs
    
    FROM breederbatchmalefemaleopeningdetail BBM
    LEFT JOIN item I ON I.id = BBM.itemid
    
    WHERE BBM.breederbatchopeningid = p_breederbatchopeningid AND BBM.companyid = p_companyid;
    
    
    -- consumption detail
    SELECT  BBC.id,
			BBC.breederbatchopeningid,
			BBC.breeditemid,
			I.itemname as breeditemname,
			BBC.consumptiontypeid,
			BBC.consumptionitemid,
            I1.itemname as consumptionitemname,
			BBC.quantity,
			BBC.rate,
			BBC.itemvalue
            
	FROM breederbatchconsumptionopeningdetail BBC
    LEFT JOIN item I ON I.id = BBC.breeditemid
    LEFT JOIN item I1 ON I1.id = BBC.consumptionitemid
    
    WHERE BBC.breederbatchopeningid = p_breederbatchopeningid
    AND BBC.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchopeninglist_search`(
	IN p_locationid INT,
    IN p_breederbatchid INT,
    IN p_from_date date,
	IN p_to_date date
)
BEGIN

	SELECT BBO.id,
		   BBO.breederbatchid,
           BB.locationid,
           L.locationname,
           L.locationcode,
		   BB.batchname,
		   DATE_FORMAT(BBO.livebatchdate,'%d/%m/%Y') as livebatchdate,
           BBO.phasestatusid,
           BBO.ageindays,
           BBO.ageinweeks,
		   DATE_FORMAT(BBO.batchplacementdate,'%d/%m/%Y') as batchplacementdate,
           DATE_FORMAT(BBO.firstdaydate,'%d/%m/%Y') as firstdaydate,
           BBO.batchstatusid,
           BBO.expectedphasestatusid,
           BBO.statusid,
           REF.refname as statusName,
           REF1.refname as batchstatus,
           REF2.phasename as phaseStatusName,
           BBO.receiptremark,
           BBO.jeremark
    FROM breederbatchopening BBO
    LEFT JOIN breederbatch BB ON BB.id = BBO.breederbatchid
    LEFT JOIN `reference` REF ON REF.id = BBO.statusid
    LEFT JOIN `reference` REF1 ON REF1.id = BBO.batchstatusid
    LEFT JOIN `breederphase` REF2 ON REF2.id = BBO.phasestatusid
    LEFT JOIN location L ON L.id = BB.locationid
    
    WHERE 
    BB.locationid = p_locationid AND
	BBO.breederbatchid = p_breederbatchid AND
	(BBO.batchplacementdate BETWEEN p_from_date AND p_to_date);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchopening_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM breederbatchopening WHERE id = p_id;
    DELETE FROM breederbatchfinancialopeningdetail WHERE breederbatchopeningid = p_id;
    DELETE FROM breederbatchlocationwiseopeningdetail WHERE breederbatchopeningid = p_id;
    DELETE FROM breederbatchmalefemaleopeningdetail WHERE breederbatchopeningid = p_id;
	DELETE FROM breederbatchconsumptionopeningdetail WHERE breederbatchopeningid = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchopening_save`(
   IN p_id INT(11),
   IN p_batchname VARCHAR(100),
   IN p_locationid INT(11),
   IN p_breederbatchid INT(11),
   IN p_livebatchdate DATE,
   IN p_phasestatusid INT(11),
   IN p_ageindays INT(11),
   IN p_ageinweeks DECIMAL(9,3),
   IN p_batchplacementdate DATE,
   IN p_firstdaydate DATE,
   IN p_batchstatusid INT(11),
   IN p_expectedphasestatusid INT(11),
   IN p_statusid INT(11),
   IN p_receiptremark VARCHAR(100),
   IN p_jeremark VARCHAR(100),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		-- Insert breederbatch
        SET @breederbatchid = null;
        CALL spc_breederbatch_save(
			NULL,
            p_locationid,
            NULL,
            p_batchname,
            NULL,
            222,
            0,
            p_companyid,
            p_userid,
            @breederbatchid
        );
    
		INSERT INTO breederbatchopening(
           id,
		   breederbatchid,
		   livebatchdate,
           phasestatusid,
           ageindays,
           ageinweeks,
		   batchplacementdate,
           firstdaydate,
           batchstatusid,
           expectedphasestatusid,
           statusid,
           receiptremark,
           jeremark,
           companyid
        )
        
        VALUES(
		   p_id,
		   @breederbatchid,
		   p_livebatchdate,
           p_phasestatusid,
           p_ageindays,
           p_ageinweeks,
		   p_batchplacementdate,
           p_firstdaydate,
           p_batchstatusid,
           p_expectedphasestatusid,
           p_statusid,
           p_receiptremark,
           p_jeremark,
           p_companyid
        );
        
        SET @action = 'INSERT';
    
    ELSE
    
		UPDATE breederbatchopening
        SET breederbatchid = p_breederbatchid,
		   livebatchdate = p_livebatchdate,
           phasestatusid = p_phasestatusid,
           ageindays = p_ageindays,
           ageinweeks = p_ageinweeks,
		   batchplacementdate = p_batchplacementdate,
           firstdaydate = p_firstdaydate,
           batchstatusid = p_batchstatusid,
           expectedphasestatusid = p_expectedphasestatusid,
           statusid = p_statusid,
           receiptremark = p_receiptremark,
           jeremark = p_jeremark,
           id = LAST_INSERT_ID(id)
		WHERE
				id = p_id
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
    
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF(p_statusid = 1602)THEN
    
		-- Make material receipt entry for DOC
		SET @out_recid = NULL;
		CALL spc_materialreceipt_save(
			NULL, p_batchplacementdate, 341, p_breederbatchid, 322, NULL,
			p_userid, p_userid, p_batchplacementdate, p_companyid,
			p_userid, @out_recid
		);
        
        -- update material receipt id in breederbatchopening table
        UPDATE breederbatchopening SET materialreceiptid = @out_recid WHERE id = out_id;
    
    END IF;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'breederbatchopening', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchopening_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT BBO.id,
		   BBO.breederbatchid,
           BB.locationid,
           L.locationname,
           L.locationcode,
		   BB.batchname,
		   DATE_FORMAT(BBO.livebatchdate,'%d/%m/%Y') as livebatchdate,
           BBO.phasestatusid,
           BBO.ageindays,
           BBO.ageinweeks,
		   DATE_FORMAT(BBO.batchplacementdate,'%d/%m/%Y') as batchplacementdate,
           DATE_FORMAT(BBO.firstdaydate,'%d/%m/%Y') as firstdaydate,
           BBO.batchstatusid,
           BBO.expectedphasestatusid,
           BBO.statusid,
           REF.refname,
           REF1.refname as batchstatus,
           BBO.receiptremark,
           BBO.jeremark
    FROM breederbatchopening BBO
    LEFT JOIN breederbatch BB ON BB.id = BBO.breederbatchid
    LEFT JOIN `reference` REF ON REF.id = BBO.statusid
    LEFT JOIN `reference` REF1 ON REF1.id = BBO.batchstatusid
    LEFT JOIN location L ON L.id = BB.locationid
    
    WHERE BBO.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchopening_select`(
	IN p_id INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT BBO.breederbatchid,
		   BB.locationid,
           L.locationname,
           L.locationcode,
		   DATE_FORMAT(BBO.livebatchdate,'%d/%m/%Y') as livebatchdate,
           BBO.phasestatusid,
           BBO.ageindays,
           BBO.ageinweeks,
		   DATE_FORMAT(BBO.batchplacementdate,'%d/%m/%Y') as batchplacementdate,
           DATE_FORMAT(BBO.firstdaydate,'%d/%m/%Y') as firstdaydate,
           BBO.batchstatusid,
           BBO.expectedphasestatusid,
           BBO.statusid,
           BBO.receiptremark,
           BBO.jeremark
    FROM breederbatchopening BBO
    LEFT JOIN breederbatch BB ON BB.id = BBO.breederbatchid
    LEFT JOIN location L ON L.id = BB.locationid
    
    WHERE BBO.id = p_id AND BBO.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchplacementdetail_bybreederbatchid`(
 IN p_companyid INT,
 IN p_breederbatchid INT
)
BEGIN
    
   /* SELECT
	BP.id,
    BPD.breedershedid,
    BP.breederbatchid,
    BS.shedname,
    L.locationcode,
	L.locationname
    
    FROM
		breederbatchplacement BP
        
	LEFT JOIN breederbatchplacementdetail BPD ON BPD.breederbatchplacementid = BP.id
    LEFT JOIN breedershed BS ON BPD.breedershedid =  BS.id 
	LEFT JOIN location L ON BS.locationid = L.id
    /*AND BP.breederbatchid = p_breederbatchid
    
   
    
	WHERE
    BPD.companyid = p_companyid
    AND BP.breederbatchid = p_breederbatchid
    GROUP BY BPD.breedershedid;*/
			
            
     SELECT BB.breedershedid,
			BB.breedershedid as id,
			BB.breederbatchid,
			BS.locationid,
			L.locationcode,
			L.locationname,
			BS.shedname,
			BS.warhouseid,
			BS.warehousebinid,
            DATE_FORMAT(DATE_ADD((SELECT collectiondate FROM eggscollection WHERE breederbatchid =  BB.breederbatchid AND shedid = BB.breedershedid  ORDER BY collectiondate DESC LIMIT 1), INTERVAL 1 DAY),'%d/%m/%Y') AS collectiondate

FROM breederbatchbalance BB

	LEFT JOIN breedershed BS ON BS.id = BB.breedershedid
	LEFT JOIN location L ON L.id = BS.locationid

	WHERE BB.breederbatchid = p_breederbatchid AND
          BB.companyid = p_companyid

		GROUP BY BB.breedershedid;
		
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchplacementdetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederbatchplacementdetail WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchplacementdetail_save`(
    IN p_id INT,
    IN p_breederbatchplacementid INT(11),
    IN p_breedershedid INT(11),
    IN p_breedershedpenid INT(11),
    IN p_maleitemid INT(11),
	IN p_maleplacedquantity DECIMAL(9,3),
    IN p_femaleitemid INT(11),
    IN p_femaleplacedquantity DECIMAL(9,3),
    IN p_placementscheduledetailid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	SET @out_transferid = null;
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
   
	 -- to warehousebinid
		SET @towarehouseid = null;
        SET @towarehousebinid = null;
        SELECT warhouseid,warehousebinid INTO @towarehouseid,@towarehousebinid FROM breedershed BS
        WHERE BS.id = p_breedershedid;
        
        
      
        
        -- get placement detail
        SET @breederbatchid = null;
        SET @placementdate = null;
        SET @grpono = null;
        SELECT breederbatchid,placementdate,grpono INTO @breederbatchid,@placementdate,@grpono FROM breederbatchplacement WHERE id = p_breederbatchplacementid;
        
          -- from warehouseid
        SET @fromwarehouseid = null;
        SET @fromwarehousebinid = null;
        SELECT towarehouseid,towarehousebinid INTO @fromwarehouseid,@fromwarehousebinid FROM grpo
        WHERE id = @grpono;
        
        -- get itembatch 
        SET @itembatch1 = null;
        SELECT itembatch INTO @itembatch1 from grpodetail WHERE grpoid = @grpono AND itemid = p_maleitemid ;
        
        SET @itembatch2 = null;
        SELECT itembatch INTO @itembatch2 from grpodetail WHERE grpoid = @grpono AND itemid = p_femaleitemid ;
        
		CALL spc_materialtransfer_save(
			NULL, 501, 501, 582,@placementdate, @placementdate,NULL,
			@fromwarehouseid, @fromwarehousebinid, 623, 
            @breederbatchid,
            @breederbatchid,
            NULL, p_companyid, p_userid, @out_transferid
		);
        
    IF(p_maleplacedquantity > 0)THEN
    
    -- Do material transfer from cold room default bin(default hatchery warehouse) to particular setter warehouse
		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, @out_transferid, @towarehouseid, @towarehousebinid, 
            p_maleitemid, (SELECT itemname FROM item WHERE id = p_maleitemid),
			p_maleplacedquantity, p_maleplacedquantity, 
			(SELECT refname FROM `reference` WHERE id = p_maleitemid),
			@itembatch1,
            p_userid, p_companyid, @out_transferdetailid
		);
    
		INSERT INTO breederbatchplacementdetail (
				id,
				breederbatchplacementid,
				breedertypeid,
				breedershedid,
				breedershedpenid,
                itemid,
				quantity,
                placementscheduledetailid,
				companyid)
                
			VALUES (
				p_id,
                p_breederbatchplacementid,
                761,
                p_breedershedid,
                p_breedershedpenid,
                p_maleitemid,
                p_maleplacedquantity,
                p_placementscheduledetailid,
                p_companyid);
                
	END IF;
    
    IF(p_femaleplacedquantity > 0) THEN
    
    -- Do material transfer from cold room default bin(default hatchery warehouse) to particular setter warehouse

		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, @out_transferid, @towarehouseid, @towarehousebinid, 
            p_femaleitemid, (SELECT itemname FROM item WHERE id = p_femaleitemid),
			p_femaleplacedquantity, p_femaleplacedquantity, 
			(SELECT refname FROM `reference` WHERE id = p_femaleitemid),
			@itembatch2,
            p_userid, p_companyid, @out_transferdetailid
		);
    
			INSERT INTO breederbatchplacementdetail (
				id,
				breederbatchplacementid,
				breedertypeid,
				breedershedid,
				breedershedpenid,
                itemid,
				quantity,
                placementscheduledetailid,
				companyid)
                
			VALUES (
				p_id,
                p_breederbatchplacementid,
                762,
                p_breedershedid,
                p_breedershedpenid,
                p_femaleitemid,
                p_femaleplacedquantity,
                p_placementscheduledetailid,
                p_companyid);
                
                
	END IF;
		
        SET @action = 'INSERT';

	ELSE
    
		IF(p_maleplacedquantity > 0) THEN
			UPDATE breederbatchplacementdetail
				SET breederbatchplacementid = p_breederbatchplacementid, 
					breedertypeid = 761,
					breedershedid = p_breedershedid,
					breedershedpenid = p_breedershedpenid,
                    itemid = p_maleitemid,
					quantity = p_maleplacedquantity,
                    placementscheduledetailid = p_placementscheduledetailid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				SET @action = 'UPDATE'; 
		END IF;
    
		IF(p_femaleplacedquantity > 0) THEN
			UPDATE breederbatchplacementdetail
				SET breederbatchplacementid = p_breederbatchplacementid, 
					breedertypeid = 762,
					breedershedid = p_breedershedid,
					breedershedpenid = p_breedershedpenid,
                    itemid = p_femaleitemid,
					quantity = p_femaleplacedquantity,
                    placementscheduledetailid = p_placementscheduledetailid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				SET @action = 'UPDATE'; 
		END IF;
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- change the status of breeder shed as 14 = 'batch satrted'
    UPDATE breedershed SET statusid = 14 WHERE id = p_breedershedid;    
    
    -- update breederbatchbalance table
   IF(p_maleplacedquantity > 0) THEN
  
	SET @out_balanceid = NULL;
	CALL spc_breederbatchbalance_save(
		NULL, (SELECT placementdate FROM breederbatchplacement WHERE id = p_breederbatchplacementid),
        (SELECT breederbatchid FROM breederbatchplacement WHERE id = p_breederbatchplacementid),
		p_breedershedid, p_breedershedpenid,  p_maleitemid, p_maleplacedquantity, 'placement', p_companyid, 
		p_userid, @out_balanceid
	);
  
  END IF;
  
  
  IF(p_femaleplacedquantity > 0) THEN
  
	SET @out_balanceid1 = NULL;
	CALL spc_breederbatchbalance_save(
		NULL, (SELECT placementdate FROM breederbatchplacement WHERE id = p_breederbatchplacementid),
        (SELECT breederbatchid FROM breederbatchplacement WHERE id = p_breederbatchplacementid),
		p_breedershedid, p_breedershedpenid,  p_femaleitemid, p_femaleplacedquantity, 'placement', p_companyid, 
		p_userid, @out_balanceid1
	);
  
  END IF;
  
  -- Update male and female itemid in breederbatch table
  
  UPDATE breederbatch SET maleitemid = p_maleitemid
  WHERE id = (SELECT breederbatchid FROM breederbatchplacement WHERE id = p_breederbatchplacementid);
  
  UPDATE breederbatch SET femaleitemid = p_femaleitemid
  WHERE id = (SELECT breederbatchid FROM breederbatchplacement WHERE id = p_breederbatchplacementid);

	-- record log
   CALL spc_commonlog_save(p_companyid, 'breederbatchplacementdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchplacementdetail_search`(
    IN p_breederbatchplacementid INT
)
BEGIN
    
    SELECT
			BBPD.id,
			BBPD.breederbatchplacementid,
			BBPD.breedertypeid,
			BBPD.breedershedid,
            BS.shedname,
			BBPD.breedershedpenid,
            BSL.linename,
            BBPD.itemid,
			BBPD.quantity,
			BBPD.companyid,
            BBPD.placementscheduledetailid
         
    FROM
		breederbatchplacementdetail BBPD
        LEFT JOIN breedershed BS ON BS.id = BBPD.breedershedid
        LEFT JOIN breedershedline BSL ON BSL.id = BBPD.breedershedpenid
   	
	WHERE
		BBPD.breederbatchplacementid = p_breederbatchplacementid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchplacementdetail_select`(
    IN p_breederbatchplacementid INT
)
BEGIN
    
    SELECT
			id,
			breederbatchplacementid,
			breedertypeid,
			breedershedid,
			breedershedpenid,
			quantity,
			companyid
         
    FROM
		breederbatchplacementdetail 
   	
	WHERE
		breederbatchplacementid = p_breederbatchplacementid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchplacementlist_search`(
    IN p_location INT,
    IN p_breederbatch INT,
    IN p_from_date date,
	IN p_to_date date
)
BEGIN
    
    SELECT
			BBP.id, 
			BBP.locationid,
            L.locationname,
			BBP.breederbatchid,
            BB.batchname,
			DATE_FORMAT(BBP.firstdaydate,'%d/%m/%Y') as firstdaydate,
			G.grpono,
            G.id as grponoid,
			DATE_FORMAT(BBP.placementdate,'%d/%m/%Y') as placementdate,
			-- BBP.ageinweek,
			BBP.phasestatusid,
            BP.phasename as phasestatus,
			BBP.companyid,
            (SELECT BS.shedname FROM breedershed BS WHERE BS.id = (SELECT breedershedid FROM breederbatchplacementdetail BBPD WHERE BBPD.breederbatchplacementid = BBP.id LIMIT 1)) AS shedname,
            BBP.placementscheduleid
	FROM
		breederbatchplacement BBP
        LEFT JOIN breederphase BP ON BBP.phasestatusid = BP.id
        LEFT JOIN location L ON BBP.locationid = L.id
        LEFT JOIN breederbatch BB ON BBP.breederbatchid = BB.id
        LEFT JOIN grpo G ON G.id = BBP.grpono
	WHERE
		BBP.locationid = p_location AND
		BBP.breederbatchid = p_breederbatch AND
        (BBP.placementdate BETWEEN p_from_date AND p_to_date)
	ORDER BY BBP.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchplacementshed_bybreederbatchid`(
	IN p_breederbatchid INT(11)
)
BEGIN
SELECT BB.breedershedid,
		BS.locationid as fromlocationid,
        L.locationname as fromlocationname,
		BS.shedname,
        BS.warhouseid,
		BS.warehousebinid

FROM breederbatchbalance BB

	LEFT JOIN breedershed BS ON BS.id = BB.breedershedid
	LEFT JOIN location L ON L.id = BS.locationid

	WHERE BB.breederbatchid = p_breederbatchid

		GROUP BY BB.breedershedid;

/*SELECT transferid, fromlocationid, placementdate, fromlocationname, breedershedid,shedname, phasestatusid, warhouseid, warehousebinid

FROM (
SELECT 
		   BBP.id as transferid,
           BBP.locationid as fromlocationid,
           DATE_FORMAT(BBP.placementdate,'%d/%m/%Y') as placementdate,
           L.locationname as fromlocationname,
           BBPD.breedershedid,
		   BS.shedname,
           BS.warhouseid,
           BS.warehousebinid,
           BBP.phasestatusid
           
			FROM breederbatchplacement BBP
			LEFT JOIN location L ON L.id = BBP.locationid
    LEFT JOIN breederbatchplacementdetail BBPD ON BBP.id = BBPD.breederbatchplacementid
    LEFT JOIN breedershed BS ON BS.id = BBPD.breedershedid
    
    WHERE BBP.breederbatchid = p_breederbatchid
    AND BS.statusid = 14
    
    -- GROUP BY BBPD.breedershedid
            
            
  UNION ALL
  
   SELECT
			 BBT.id as transferid,
			 BBT.tolocationid as fromlocationid,
			 DATE_FORMAT(BBP.placementdate,'%d/%m/%Y') as placementdate,
			 L.locationname as fromlocationname,
             BBTD.toshedid as breedershedid,
             BS.shedname,
             BS.warhouseid,
			 BS.warehousebinid,
             BBT.phasestatusid
            
	FROM breederbatchtransfer BBT
     LEFT JOIN location L ON L.id = BBT.tolocationid
     LEFT JOIN breederbatchtransferdetail BBTD ON BBT.id = BBTD.breederbatchtransferid
     LEFT JOIN breedershed BS ON BS.id = BBTD.toshedid
     LEFT JOIN breederbatchplacement BBP ON BBP.breederbatchid = BBT.breederbatchid
    
    WHERE BBT.breederbatchid = p_breederbatchid
    AND BS.statusid = 14
    
   --  GROUP BY BBTD.toshedid
       
      ) as temp
      
      GROUP BY breedershedid;*/
       
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchplacement_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederbatchplacementdetail WHERE breederbatchplacementid = p_id;
	DELETE FROM breederbatchplacement WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchplacement_save`(
    IN p_id INT,
    IN p_locationid INT(11),
    IN p_breederbatchid INT(11),
    IN p_placementscheduleid INT(11),
    IN p_firstdaydate DATE,
    IN p_grpono INT(11),
    IN p_placementdate DATE,
   -- IN p_ageinweek DECIMAL(9,3),
    IN p_phasestatusid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederbatchplacement (
				id, 
                locationid,
                breederbatchid,
                placementscheduleid,
                firstdaydate,
                grpono,
                placementdate,
               -- ageinweek,
                phasestatusid,
                companyid)
			
            VALUES (
				p_id,
                p_locationid,
                p_breederbatchid,
                p_placementscheduleid,
                p_firstdaydate,
                p_grpono,
                p_placementdate,
               -- p_ageinweek,
                p_phasestatusid,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE breederbatchplacement
			SET locationid = p_locationid, 
				breederbatchid = p_breederbatchid,
                placementscheduleid = p_placementscheduleid,
                firstdaydate = p_firstdaydate,
                grpono = p_grpono,
                placementdate = p_placementdate,
               -- ageinweek = p_ageinweek,
                phasestatusid = p_phasestatusid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- change the status of breederplacementschedule shed as 703 = 'processed'
    UPDATE breederplacementschedule SET statusid = 703 WHERE id = p_placementscheduleid;
    
    -- update breeder batch statusid to 222 = 'batch started'
    UPDATE breederbatch SET statusid = 222 WHERE id = p_breederbatchid;
    
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'breederbatchplacement', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchplacement_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
			BBP.id, 
			BBP.locationid,
            L.locationname,
			BBP.breederbatchid,
            BB.batchname,
			DATE_FORMAT(BBP.firstdaydate,'%d/%m/%Y') as firstdaydate,
			BBP.grpono,
			DATE_FORMAT(BBP.placementdate,'%d/%m/%Y') as placementdate,
			-- BBP.ageinweek,
			BBP.phasestatusid,
            BP.phasename as phasestatus,
			BBP.companyid,
            BBP.placementscheduleid
            
         
	FROM
		breederbatchplacement BBP
        LEFT JOIN breederphase BP ON BBP.phasestatusid = BP.id
        LEFT JOIN location L ON BBP.locationid = L.id
        LEFT JOIN breederbatch BB ON BBP.breederbatchid = BB.id
   	
	WHERE
		BBP.companyid = p_companyid
        
	ORDER BY BBP.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchplacement_select`(
	IN p_id INT
)
BEGIN

	SELECT
			BBP.id, 
			BBP.locationid,
            L.locationname,
			BBP.breederbatchid,
            BB.batchname,
			DATE_FORMAT(BBP.firstdaydate,'%d/%m/%Y') as firstdaydate,
			BBP.grpono,
			DATE_FORMAT(BBP.placementdate,'%d/%m/%Y') as placementdate,
			-- BBP.ageinweek,
			BBP.phasestatusid,
            R.refname,
			BBP.companyid,
            BBP.placementscheduleid
            
         
	FROM
		breederbatchplacement BBP
        LEFT JOIN reference R ON BBP.phasestatusid = R.id
        LEFT JOIN location L ON BBP.locationid = L.id
        LEFT JOIN breederbatch BB ON BBP.breederbatchid = BB.id
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND BBP.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchtransferdetails_bybreederbatchtransferid`(
    IN p_shedid INT(11),
    IN p_breederbatchid INT
)
BEGIN

	SET @shedqty = 0;
	SET @transferedqty = 0;
    SET @flag1 = NULL;
    
    SELECT SUM(quantity) INTO @shedqty FROM breederbatchtransferdetail WHERE toshedid = p_shedid;

	
	SELECT
		BBB.id,
		BBB.breedershedid,
		BS.shedname,
		BBB.breedershedpenid,
		BSL.linename,
		BBB.itemid,
		BBB.quantity,
		@shedqty AS totalshedqty
   
	FROM
		breederbatchbalance BBB
		LEFT JOIN breedershed BS ON BS.id = BBB.breedershedid
		LEFT JOIN breedershedline BSL ON BSL.id = BBB.breedershedpenid
	
	WHERE
		BBB.breederbatchid = p_breederbatchid
		 AND  BBB.breedershedid = p_shedid 
         AND BBB.quantity != 0;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchtransferdetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederbatchtransferdetail WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchtransferdetail_save`(
    IN p_id INT,
    IN p_breederbatchtransferid INT(11),
    IN p_toshedid INT(11),
    IN p_fromlineid INT(11),
    IN p_tolineid INT(11),
    IN p_maleitemid INT(11),
	IN p_maleplacedquantity INT,
    IN p_femaleitemid INT(11),
    IN p_femaleplacedquantity INT,
    IN p_companyid INT,
    In p_userid INT,
    IN p_transferid INT,
    IN p_breederbatchid INT,
    IN p_fromshedid INT,
    IN p_nonproductivebird TINYINT(4),
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
     -- to warehousebinid
		SET @towarehouseid = null;
        SELECT warhouseid INTO @towarehouseid FROM breedershed
        WHERE id = p_toshedid;
        
        -- from warehouseid
        SET @fromwarehouseid = null;
        SELECT warhouseid INTO @fromwarehouseid FROM breedershed
        WHERE id = (SELECT fromshedid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid);
	
    IF(p_maleplacedquantity > 0)THEN
        
		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, (SELECT transferid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
            (SELECT warhouseid FROM breedershed WHERE id = p_toshedid), 
            (SELECT warehousebinid FROM breedershed WHERE id = p_toshedid),
            p_maleitemid, (SELECT itemname FROM item WHERE id = p_maleitemid),
			p_maleplacedquantity, p_maleplacedquantity, 
			(SELECT refname FROM `reference` WHERE id = p_maleitemid),
			(SELECT breederbatchid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
            p_userid, p_companyid, @out_transferdetailid
		);
    
		INSERT INTO breederbatchtransferdetail (
				id,
				breederbatchtransferid,
                toshedid,
				fromlineid,
                tolineid,
                itemid,
				quantity,
                nonproductivebird,
				companyid)
                
			VALUES (
				p_id,
                p_breederbatchtransferid,
                p_toshedid,
                p_fromlineid,
                p_tolineid,
                p_maleitemid,
                p_maleplacedquantity,
                p_nonproductivebird,
                p_companyid);
        
        -- update breederbatchbalance table to reflect live batch quantity
		UPDATE breederbatchbalance
        SET 
			updateddate = now(),
            quantity = (quantity - p_maleplacedquantity)
		WHERE
			breederbatchid = p_breederbatchid AND
            breedershedid = p_fromshedid AND
            breedershedpenid = p_fromlineid AND
            itemid = p_maleitemid AND
            quantity != 0;
                
	END IF;
    
    IF(p_femaleplacedquantity > 0) THEN
    
    SET @out_transferid1 = NULL;
        
		SET @out_transferdetailid1 = NULL;
		CALL spc_materialtransferdetail_save(
			NULL,(SELECT transferid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
            (SELECT warhouseid FROM breedershed WHERE id = p_toshedid), 
            (SELECT warehousebinid FROM breedershed WHERE id = p_toshedid),
            p_femaleitemid, (SELECT itemname FROM item WHERE id = p_maleitemid),
			p_femaleplacedquantity, p_femaleplacedquantity, 
			(SELECT refname FROM `reference` WHERE id = p_femaleitemid),
			(SELECT breederbatchid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
            p_userid, p_companyid, @out_transferdetailid1
		);
    
			INSERT INTO breederbatchtransferdetail (
				id,
				breederbatchtransferid,
                toshedid,
				fromlineid,
                tolineid,
                itemid,
				quantity,
                nonproductivebird,
				companyid)
                
			VALUES (
				p_id,
                p_breederbatchtransferid,
                p_toshedid,
                p_fromlineid,
                p_tolineid,
                p_femaleitemid,
                p_femaleplacedquantity,
                p_nonproductivebird,
                p_companyid);
           
		-- update breederbatchbalance table to reflect live batch quantity
		UPDATE breederbatchbalance
        SET 
			updateddate = now(),
            quantity = (quantity - p_femaleplacedquantity)
		WHERE
			breederbatchid = p_breederbatchid AND
            breedershedid = p_fromshedid AND
            breedershedpenid = p_fromlineid AND
            itemid = p_femaleitemid AND
             quantity != 0;
                
	END IF;
		
        SET @action = 'INSERT';

	ELSE
    
		IF(p_maleplacedquantity > 0) THEN
			UPDATE breederbatchtransferdetail
				SET
					breederbatchtransferid = p_breederbatchtransferid,
                    toshedid = p_toshedid,
					fromlineid = p_fromlineid,
					tolineid = p_tolineid,
					itemid = p_maleitemid,
					quantity = p_maleplacedquantity,
                    nonproductivebird = p_nonproductivebird,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				SET @action = 'UPDATE'; 
                
		-- update breederbatchbalance table to reflect live batch quantity
		UPDATE breederbatchbalance
        SET 
			updateddate = now(),
            quantity = (quantity - p_maleplacedquantity)
		WHERE
			breederbatchid = p_breederbatchid AND
            breedershedid = p_fromshedid AND
            breedershedpenid = p_fromlineid AND
            itemid = p_maleitemid AND
			quantity != 0;
            
		END IF;
    
		IF(p_femaleplacedquantity > 0) THEN
			UPDATE breederbatchtransferdetail
				SET breederbatchtransferid = p_breederbatchtransferid,
					toshedid = p_toshedid,
					fromlineid = p_fromlineid,
					tolineid = p_tolineid,
					itemid = p_femaleitemid,
					quantity = p_femaleplacedquantity,
                    nonproductivebird = p_nonproductivebird,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				SET @action = 'UPDATE'; 
                
		-- update breederbatchbalance table to reflect live batch quantity
		UPDATE breederbatchbalance
        SET 
			updateddate = now(),
            quantity = (quantity - p_femaleplacedquantity)
		WHERE
			breederbatchid = p_breederbatchid AND
            breedershedid = p_fromshedid AND
            breedershedpenid = p_fromlineid AND
            itemid = p_femaleitemid AND
			quantity != 0;
            
		END IF;
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
 
	-- update toshed status as 14 = 'Batch Started'
    UPDATE breedershed SET statusid = 14 WHERE id = p_toshedid;
  
  -- update breederbatchbalance table
  
	IF (p_maleplacedquantity > 0) THEN
	  SET @out_balanceid = NULL;
	  CALL spc_breederbatchbalance_save(
		NULL, (SELECT transferdate FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
         p_breederbatchid, p_toshedid, p_tolineid, p_maleitemid,
		 p_maleplacedquantity,'transfer', p_companyid, 
		 p_userid, @out_balanceid
	  );
      
	END IF;
    
    IF (p_femaleplacedquantity > 0) THEN
	  SET @out_balanceid = NULL;
	  CALL spc_breederbatchbalance_save(
		NULL, (SELECT transferdate FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
        p_breederbatchid, p_toshedid, p_tolineid, p_femaleitemid,
		 p_femaleplacedquantity,'transfer', p_companyid, 
		p_userid, @out_balanceid
	  );
      
	END IF; 

-- Set status as 11 = 'available' to from shed 
   
   SET @placeqty = 0;
   SET @transferqty = 0;
   select SUM(quantity) INTO @placeqty
    FROM breederbatchbalance
    WHERE 
    breedershedid = (SELECT fromshedid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid);
    
    
    IF(@placeqty = 0) THEN
		UPDATE breedershed SET statusid = 11 WHERE id = (SELECT fromshedid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid);
    END IF;

	-- record log
   CALL spc_commonlog_save(p_companyid, 'breederbatchtransferdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchtransferdetail_search`(
    IN p_breederbatchtransferid INT
)
BEGIN
    
    SELECT
			BBTD.id,
			BBTD.breederbatchtransferid,
			BBT.fromshedid,
            BBTD.toshedid,
            BS2.shedname as toshedname,
			BBTD.fromlineid,
            BBTD.tolineid,
            BSL1.linename,
            BSL2.linename as tolinename,
            BBTD.itemid,
			BBTD.quantity,
			BBTD.companyid
         
    FROM
		breederbatchtransferdetail BBTD
        LEFT JOIN breederbatchtransfer BBT ON BBT.id = BBTD.breederbatchtransferid
        LEFT JOIN breedershedline BSL1 ON BSL1.id = BBTD.fromlineid
        LEFT JOIN breedershedline BSL2 ON BSL2.id = BBTD.tolineid
     --   LEFT JOIN breedershed BS1 ON BS1.id = BBTD.fromshedid
        LEFT JOIN breedershed BS2 ON BS2.id = BBTD.toshedid
   	
	WHERE
		BBTD.breederbatchtransferid = p_breederbatchtransferid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchtransferdetail_select`(
    IN p_id INT
)
BEGIN
    
    SELECT
			BBTD.id,
			BBTD.breederbatchtransferid,
			BBTD.fromshedid,
            BS1.shedname,
			BBTD.fromlineid,
            BBTD.tolineid,
            BSL1.linename,
            BSL2.linename,
            BBTD.itemid,
			BBTD.quantity,
			BBTD.companyid
         
    FROM
		breederbatchtransferdetail BBTD
        LEFT JOIN breedershed BS1 ON BS1.id = BBTD.fromshedid
        LEFT JOIN breedershedline BSL1 ON BSL1.id = BBTD.fromlineid
        LEFT JOIN breedershedline BSL2 ON BSL2.id = BBTD.tolineid
   	
	WHERE
		BBTD.id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchtransferlist_search`(
	IN p_fromlocationid INT,
    IN p_breederbatchid INT,
    IN p_fromshedid INT,
    IN p_tolocationid INT,
    IN p_toshedid INT,
    IN p_from_date date,
	IN p_to_date date
)
BEGIN
    
    SELECT DISTINCT         
            BBT.id, 
			BBT.fromlocationid,
            L1.locationname as fromlocationname,
			BBT.tolocationid,
            L2.locationname as tolocationname,
			DATE_FORMAT(BBT.transferdate,'%d/%m/%Y') as transferdate,
			BBT.breederbatchid,
            BB.batchname,
			BBT.phasestatusid,
            BP.phasename as phasestatus,
			BBT.isshedtransfer,
			BBT.companyid,
            BBT.fromshedid,
			BBTD.toshedid,
            BS1.shedname as fromshedname,
            BS2.shedname as toshedname,
            BBT.isshedtransfer         
	FROM
		breederbatchtransfer BBT
        LEFT JOIN breederbatchtransferdetail BBTD ON BBTD.breederbatchtransferid = BBT.id
        LEFT JOIN breederphase BP ON BBT.phasestatusid = BP.id
        LEFT JOIN breederbatch BB ON BB.id = BBT.breederbatchid
        LEFT JOIN breedershed BS1 ON BS1.id = BBT.fromshedid        
        LEFT JOIN breedershed BS2 ON BS2.id = BBTD.toshedid
        LEFT JOIN location L1 ON L1.id = BBT.fromlocationid
        LEFT JOIN location L2 ON L2.id = BBT.fromlocationid
   	
	WHERE
		BBT.fromlocationid = p_fromlocationid AND
        BBT.breederbatchid = p_breederbatchid AND
        BBT.fromshedid = p_fromshedid AND        
        BBT.tolocationid = p_tolocationid AND
        BBTD.toshedid = p_toshedid AND    
        (BBT.transferdate BETWEEN p_from_date AND p_to_date)
        
	ORDER BY BBT.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchtransfer_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederbatchtransferdetail WHERE breederbatchtransferid = p_id;
	DELETE FROM breederbatchtransfer WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchtransfer_save`(
    IN p_id INT,
    IN p_fromlocationid INT(11),
    IN p_tolocationid INT(11),
    IN p_fromshedid INT(11),
	IN p_transferdate DATE,
    IN p_breederbatchid INT(11),
    IN p_phasestatusid INT(11),
    IN p_isshedtransfer TINYINT,
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT,
    OUT out_transferid INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		INSERT INTO breederbatchtransfer (
				id, 
                fromlocationid,
                tolocationid,
                fromshedid,
                transferdate,
                breederbatchid,
                phasestatusid,
                isshedtransfer,
                companyid)
			
            VALUES (
				p_id, 
                p_fromlocationid,
                p_tolocationid,
                p_fromshedid,
                p_transferdate,
                p_breederbatchid,
                p_phasestatusid,
                p_isshedtransfer,
                p_companyid);
                
		SET @action = 'INSERT';
	ELSE
    
		UPDATE breederbatchtransfer
			SET 
                fromlocationid = p_fromlocationid,
                tolocationid = p_tolocationid,
                fromshedid = p_fromshedid,
                transferdate = p_transferdate,
                breederbatchid = p_breederbatchid,
                phasestatusid = p_phasestatusid,
                isshedtransfer = p_isshedtransfer,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id;
    CALL spc_materialtransfer_save(
			NULL, 501, 501, 582, p_transferdate,p_transferdate,NULL,
			(SELECT warhouseid FROM breedershed WHERE id = p_fromshedid),
           (SELECT warehousebinid FROM breedershed WHERE id = p_fromshedid), 623, 
            p_breederbatchid, p_breederbatchid, 
            NULL, p_companyid, p_userid, out_transferid
		);
   update breederbatchtransfer 
        SET transferid = out_transferid WHERE id = out_id;
    
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'breederbatchtransfer', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchtransfer_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT         
            BBT.id, 
			BBT.fromlocationid,
            L1.locationname as fromlocationname,
			BBT.tolocationid,
            L2.locationname as tolocationname,
			DATE_FORMAT(BBT.transferdate,'%d/%m/%Y') as transferdate,
			BBT.breederbatchid,
            BB.batchname,
			BBT.phasestatusid,
			BBT.isshedtransfer,
			BBT.companyid,
            BBT.fromshedid,
            BS1.shedname as fromshedname,
            BBT.isshedtransfer
            
         
	FROM
		breederbatchtransfer BBT
        LEFT JOIN breederbatch BB ON BB.id = BBT.breederbatchid
        LEFT JOIN breedershed BS1 ON BS1.id = BBT.fromshedid
        LEFT JOIN location L1 ON L1.id = BBT.fromlocationid
        LEFT JOIN location L2 ON L2.id = BBT.fromlocationid
   	
	WHERE
		BBT.companyid = p_companyid
        
	ORDER BY BBT.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchtransfer_select`(
    IN p_id INT
)
BEGIN
    
    SELECT         
            BBT.id, 
			BBT.fromlocationid,
			BBT.tolocationid,
            BBT.fromshedid,
            BBT.toshedid,
            BS1.shedname,
            BS2.shedname,
			DATE_FORMAT(BBT.transferdate,'%d/%m/%Y') as transferdate,
			BBT.breederbatchid,
			BBT.phasestatusid,
			BBT.isshedtransfer,
			BBT.companyid
            
         
	FROM
		breederbatchtransfer BBT
        LEFT JOIN breedershed BS1 ON BS1.id = BBT.fromshedid
        LEFT JOIN breedershed BS2 ON BS2.id = BBT.toshedid
   	
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND BBT.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchvaluation_report`(
	IN p_breederbatchid INT(11),
    IN p_companyid INT(11)
)
BEGIN
	
	SET @@sql_mode = ' ';
	
    SET @amortizationdate = null;
	SELECT amortizationdate INTO @amortizationdate
    FROM amortization
    WHERE breederbatchid = p_breederbatchid;
    
    SET @placementdate = null;
    SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
    
    SET @maleitemid = null;
    SET @femaleitemid = null;
    
    SELECT maleitemid, femaleitemid
    INTO @maleitemid, @femaleitemid
    FROM breederbatch
    WHERE id = p_breederbatchid;
    
    
    SET @maleopeningbalance = 0;
    SET @femaleopeningbalance = 0;
    
	SELECT IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @maleitemid, @placementdate, p_companyid),0) INTO @maleopeningbalance;
	SELECT IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @femaleitemid, @placementdate, p_companyid),0) INTO @femaleopeningbalance;
    
    SET @birdcost = 0;
	IF EXISTS(SELECT id FROM breederbatchplacement WHERE breederbatchid = p_breederbatchid) THEN
		SELECT ((IFNULL(PID.unitprice,0) * IFNULL(PID.quantity,0)) + (IFNULL(PID1.unitprice,0) * IFNULL(PID1.quantity,0))) INTO @birdcost FROM
		breederbatchplacement BBP
		INNER JOIN breederbatchplacementdetail BBPD ON BBPD.breederbatchplacementid = BBP.id 
		INNER JOIN purchaseinvoice PI ON PI.grpono = BBP.grpono
		INNER JOIN purchaseinvoicedetail PID ON PI.id = PID.purchaseinvoiceid AND PID.itemid = @maleitemid
		INNER JOIN purchaseinvoicedetail PID1 ON PI.id = PID1.purchaseinvoiceid AND PID1.itemid = @femaleitemid
		WHERE BBP.breederbatchid = p_breederbatchid 
		AND BBP.companyid = p_companyid
        GROUP BY BBP.id;
	ELSE
		SELECT ((IFNULL(BMF.rate,0) * IFNULL(BMF.placeqty,0)) + (IFNULL(BMF1.rate,0) * IFNULL(BMF1.placeqty,0))) INTO @birdcost
		FROM breederbatchopening BBO
		INNER JOIN breederbatchmalefemaleopeningdetail BMF ON BBO.id = BMF.breederbatchopeningid AND BMF.itemid = @maleitemid
		INNER JOIN breederbatchmalefemaleopeningdetail BMF1 ON BBO.id = BMF1.breederbatchopeningid AND BMF1.itemid = @femaleitemid
		WHERE BBO.breederbatchid = p_breederbatchid AND BBO.companyid = p_companyid;
	END IF;
    
    SET @firsttransactiondate = null;
    
    SELECT transactiondate INTO @firsttransactiondate FROM breederdailytransaction WHERE breederbatchid = p_breederbatchid LIMIT 1;
    
    DROP TEMPORARY TABLE IF EXISTS openingvaluation;
    CREATE TEMPORARY TABLE openingvaluation
    SELECT BDT.transactiondate,
			(IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,@firsttransactiondate,DATE_SUB(BDT.transactiondate, INTERVAL 1 DAY),861),0) + 
			IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,@firsttransactiondate,DATE_SUB(BDT.transactiondate, INTERVAL 1 DAY),862),0)+
			IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,@firsttransactiondate,DATE_SUB(BDT.transactiondate, INTERVAL 1 DAY),863),0)+
			IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,@firsttransactiondate,DATE_SUB(BDT.transactiondate, INTERVAL 1 DAY),864),0) + 
            ((IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @maleitemid, DATE_SUB(BDT.transactiondate, INTERVAL 1 DAY), p_companyid),0) + 
            IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @femaleitemid, DATE_SUB(BDT.transactiondate, INTERVAL 1 DAY), p_companyid),0)) * @overheadexp)+@birdcost) as openingval,
            (IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,BDT.transactiondate,BDT.transactiondate,861),0) + 
			IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,BDT.transactiondate,BDT.transactiondate,862),0)+
			IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,BDT.transactiondate,BDT.transactiondate,863),0)+
			IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,BDT.transactiondate,BDT.transactiondate,864),0)) as todaysval,
            ((IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @maleitemid, BDT.transactiondate, p_companyid),0) + 
            IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @femaleitemid, BDT.transactiondate, p_companyid),0)) * @overheadexp) as todayoverheadexp
	FROM breederdailytransaction BDT
    WHERE BDT.breederbatchid = p_breederbatchid;
           
    DROP TEMPORARY TABLE IF EXISTS amortizationtbl;
    CREATE TEMPORARY TABLE amortizationtbl
	SELECT 
    AM.breederbatchid,
    BDT.transactiondate,
    CASE
		WHEN (DATEDIFF(BDT.transactiondate, @placementdate) >= 168 && AM.amortizationvalueofbird > 0) THEN AM.amortizationvalueofbird
    END as amortizationcost
    FROM amortization AM
    INNER JOIN breederdailytransaction BDT ON BDT.breederbatchid = AM.breederbatchid
    WHERE AM.breederbatchid = 13 ORDER BY BDT.transactiondate DESC LIMIT 1;
    
    DROP TEMPORARY TABLE IF EXISTS hatchingeggstbl;
    CREATE TEMPORARY TABLE hatchingeggstbl
    SELECT collectiondate, IFNULL(quantity,0) as hatchingeggs
    FROM eggsdistributiondetail
    WHERE breederbatchid = p_breederbatchid AND itemtypeid = 881;
    
    SET @overheadexp = 0;
    
    select (IFNULL(labourcharge,0) + IFNULL(overheadcost,0)) 
    INTO @overheadexp
    from breedersetting;
    
    SELECT DATE_FORMAT(BDT.transactiondate,'%d/%m/%Y') as transactiondate, FORMAT(@birdcost,2) as birdcost,
		   IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @maleitemid, BDT.transactiondate, p_companyid),0) as maleopeningbalance,
		   IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @femaleitemid, BDT.transactiondate, p_companyid),0) as femaleopeningbalance,
		   TRUNCATE(((DATEDIFF(BDT.transactiondate,@placementdate))/7),0) as ageinweek,
           TRUNCATE(((DATEDIFF(BDT.transactiondate,@placementdate))%7),0) as ageindays,
           FORMAT(IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,BDT.transactiondate,BDT.transactiondate,861),0),2) as feedcost,
		   FORMAT((fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,BDT.transactiondate,BDT.transactiondate,862) +fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,BDT.transactiondate,BDT.transactiondate,863)
		   + fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,BDT.transactiondate,BDT.transactiondate,864)),2) as medicinecost,
		   FORMAT(((IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @maleitemid, BDT.transactiondate, p_companyid),0) + 
           IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @femaleitemid, BDT.transactiondate, p_companyid),0)) * @overheadexp),2) as overheadexp,
           IFNULL(HE.hatchingeggs,0) as totalcollectedhe,
           FORMAT(OP.openingval,2) as openingvaluation,
           FORMAT((OP.openingval+OP.todaysval+OP.todayoverheadexp),2) as todaysvaluation,
		   FORMAT(IFNULL(((OP.todaysval+OP.todayoverheadexp) / IFNULL(HE.hatchingeggs,0)),0),2) as costperegg,
		   FORMAT(IFNULL(AMT.amortizationcost,0),2) as amortizationcostperegg,
		   FORMAT(IFNULL((((OP.todaysval+OP.todayoverheadexp) / IFNULL(HE.hatchingeggs,0)) + IFNULL(AMT.amortizationcost,0)),0),2) as productioncostperegg,
           FORMAT(IFNULL(((((OP.todaysval+OP.todayoverheadexp) / IFNULL(HE.hatchingeggs,0)) + IFNULL(AMT.amortizationcost,0)) * IFNULL(HE.hatchingeggs,0)),0),2) as eggsvaluation,
		   FORMAT(((OP.todaysval+OP.openingval+OP.todayoverheadexp) - IFNULL((((OP.todaysval / IFNULL(HE.hatchingeggs,0)) + IFNULL(AMT.amortizationcost,0)) * IFNULL(HE.hatchingeggs,0)),0)),2) as currentvaluation,
           FORMAT((((OP.todaysval+OP.openingval+OP.todayoverheadexp) - IFNULL((((OP.todaysval / IFNULL(HE.hatchingeggs,0)) + IFNULL(AMT.amortizationcost,0)) * IFNULL(HE.hatchingeggs,0)),0)) / (IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @femaleitemid, BDT.transactiondate, p_companyid),0) + IFNULL(fnc_breeder_batchwise_birdliveqty(p_breederbatchid, @maleitemid, BDT.transactiondate, p_companyid),0))),2) as costperbird,
		   IFNULL(BLW.totaldeliveredqty,0) as birdsold,
           FORMAT(IFNULL(BLW.totaldeliverycost,0),2) as birdsoldamount,   
		   FORMAT((((OP.todaysval+OP.openingval+OP.todayoverheadexp) - IFNULL(((((OP.todaysval+OP.todayoverheadexp) / IFNULL(HE.hatchingeggs,0)) + IFNULL(AMT.amortizationcost,0)) * IFNULL(HE.hatchingeggs,0)),0) + @overheadexp) - IFNULL(BLW.totaldeliverycost,0)),2) as finalflockvaluation
    FROM breederdailytransaction BDT
    LEFT JOIN openingvaluation OP ON OP.transactiondate = BDT.transactiondate
    LEFT JOIN hatchingeggstbl HE ON HE.collectiondate = BDT.transactiondate
    LEFT JOIN breeder_liftingweight BLW ON BLW.batchid = BDT.breederbatchid
    LEFT JOIN amortizationtbl AMT ON AMT.transactiondate = BDT.transactiondate
    WHERE BDT.breederbatchid = p_breederbatchid
    
    ORDER BY BDT.transactiondate;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatchwise_profitandloss`(
	IN p_breederbatchid INT(11),
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT
)
BEGIN

	SET @@sql_mode = ' ';
    
	SET @productionstock = 0;
	-- collected eggs
	SELECT IFNULL(SUM(quantity),0) INTO @productionstock
	FROM eggsdistributiondetail
	WHERE breederbatchid = p_breederbatchid
	AND collectiondate between p_fromdate AND p_todate;
    
    SET @eggrate = 0;
    select 
	((fnc_calculate_consumptioncost(IFNULL(group_concat(DISTINCT BDT.issueid),0), IFNULL(group_concat(DISTINCT BDC.itemid),0), BDT.transactiondate)
	+ IFNULL(AM.requiredbirdvalue,0)) / IFNULL(SUM(ED.quantity),0)) INTO @eggrate
    FROM breederdailyconsumption BDC
	LEFT JOIN breederdailytransaction BDT ON BDT.id = BDC.breederdailytransactionid
	LEFT JOIN breedershed BS ON BS.id = BDT.shedid
	LEFT JOIN eggscollection EC ON EC.breederbatchid = BDT.breederbatchid
    LEFT JOIN eggsdistributiondetail ED ON ED.breederbatchid = EC.breederbatchid
    LEFT JOIN amortization AM ON AM.breederbatchid = ED.breederbatchid
	WHERE BDT.transactiondate >= EC.productionstartdate
	AND BDT.transactiondate BETWEEN p_fromdate AND p_todate
	AND BDT.breederbatchid = p_breederbatchid;
    
    SET @eggsitemgroupids = null;
    SET @labourcharge = 0;
    SET @overheadcost = 0;
    SELECT CONCAT(IFNULL(hatchingitemgroupids,0),",", IFNULL(defaultcommercialeggsitemid,0),",", IFNULL(defaultcrackedeggsitemid,0),",", IFNULL(defaultdoubleyolkeggsitemid,0)),
    IFNULL(labourcharge,0), IFNULL(overheadcost,0)
    INTO @eggsitemgroupids, @labourcharge, @overheadcost
    FROM breedersetting;
    
    
	SET @warehousebinids = null;
	SELECT GROUP_CONCAT(DISTINCT BS.warehousebinid) INTO @warehousebinids
	FROM breederbatchbalance BBB
	LEFT JOIN breedershed BS ON BS.id = BBB.breedershedid
	WHERE BBB.breederbatchid = p_breederbatchid;
    
    -- sold eggs
    SET @soldeggstock = 0;
    SET @soldeggamount = 0;
	SELECT SUM(quantity), (SUM(quantity) * rate) 
    INTO @soldeggstock, @soldeggamount
	FROM salesdeliverydetail SDD
	LEFT JOIN salesdelivery SD ON SD.id = SDD.salesdeliveryid
	LEFT JOIN item I ON I.id = SDD.itemid 
	WHERE isbird = 0
	AND FIND_IN_SET(I.itemgroupid, @eggsitemgroupids)
    AND deliverydate BETWEEN p_fromdate AND p_todate
    AND FIND_IN_SET(warehousebinid,@warehousebinids);

	-- bird sold
	SET @soldbirdstock = 0;
    SET @soldbirdamount = 0;
	SELECT SUM(quantity), (SUM(quantity) * rate) 
    INTO @soldbirdstock, @soldbirdamount
	FROM salesdeliverydetail SDD
	LEFT JOIN salesdelivery SD ON SD.id = SDD.salesdeliveryid 
	WHERE isbird = 1
    AND deliverydate BETWEEN p_fromdate AND p_todate
    AND FIND_IN_SET(warehousebinid,@warehousebinids);
    
    -- module out birds
    
    SET @defaultdocitemid = null;
    SET @defaulthatcherywhfordoc = null;
    
    SELECT defaultdocitemid, defaulthatcherywhfordoc 
    INTO @defaultdocitemid, @defaulthatcherywhfordoc
    FROM hatcherysettings WHERE companyid = p_companyid;
    
    SET @itembatch = null;
    SET @chickspulloutqty = 0;
    SET @rateperdoc = 0;
    
    SELECT GROUP_CONCAT(MM.itembatch), SUM(CP.totalhatch), (SUM(CP.totalcost)/SUM(CP.totalhatch))
    INTO @itembatch, @chickspulloutqty, @rateperdoc
    FROM materialmovement MM
	LEFT JOIN chickspullout CP ON CP.itembatchid = MM.itembatch AND CP.itembatchid like CONCAT(MM.itembatch, '%')
	WHERE CP.breederbatchid = p_breederbatchid
    AND MM.itemid = @defaultdocitemid 
    AND MM.transactiontypeid = 681
	AND MM.towarehouseid = @defaulthatcherywhfordoc
    AND MM.transactiondate BETWEEN p_fromdate AND p_todate;
    
    SET @moduleoutchiksamt = 0;
    SELECT SUM(MM.itemvalue) INTO @moduleoutchiksamt
    FROM materialmovement MM
    WHERE MM.itemid = @defaultdocitemid 
    AND MM.transactiontypeid = 682
    AND FIND_IN_SET(MM.itembatch, @itembatch)
	AND MM.fromwarehouseid = @defaulthatcherywhfordoc;
    
    SET @saleoutchiksamt = 0;
    SELECT SUM(MM.itemvalue) INTO @saleoutchiksamt
    FROM materialmovement MM
    WHERE MM.itemid = @defaultdocitemid 
    AND MM.transactiontypeid = 683
    AND FIND_IN_SET(MM.itembatch, @itembatch)
	AND MM.fromwarehouseid = @defaulthatcherywhfordoc;

	SET @birdplaceqty = 0;
    SET @maleitemid = null;
    SET @femaleitemid = null;
	SELECT (IFNULL(fnc_chicks_placementqty(BB.id,p_companyid,BB.femaleitemid),0) + IFNULL(fnc_chicks_placementqty(BB.id,p_companyid,BB.maleitemid),0)),
		   BB.maleitemid, BB.femaleitemid
    INTO @birdplaceqty, @maleitemid, @femaleitemid
    FROM breederbatch BB
	WHERE BB.id = p_breederbatchid;

	DROP TEMPORARY TABLE IF EXISTS expenses;
    CREATE TEMPORARY TABLE expenses(particulars VARCHAR(200), amount VARCHAR(200));
    
    INSERT INTO expenses VALUES("Chicks Placement Date", DATE_FORMAT(fnc_getplacementdate(p_breederbatchid, p_companyid),'%d/%m/%Y'));
    INSERT INTO expenses VALUES("Feed Cost", FORMAT(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,p_fromdate,p_todate,861),2));
    INSERT INTO expenses VALUES("Medicine Cost", FORMAT((fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,p_fromdate,p_todate,862) + 
		   fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,p_fromdate,p_todate,863) +
           fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,p_fromdate,p_todate,864)),2));
    INSERT INTO expenses VALUES("Chicks Cost", FORMAT(((IFNULL(fnc_chicks_placementqty(p_breederbatchid,p_companyid,@maleitemid),0) * IFNULL(fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@maleitemid),0)) + 
           (IFNULL(fnc_chicks_placementqty(p_breederbatchid,p_companyid,@femaleitemid),0) * IFNULL(fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@femaleitemid),0))),2));
    INSERT INTO expenses VALUES("Administration Cost",FORMAT(((@birdplaceqty * @labourcharge) + (@birdplaceqty * @overheadcost)),2));
    INSERT INTO expenses VALUES("Destroyed Eggs Cost",0);
    INSERT INTO expenses VALUES("","");
    INSERT INTO expenses VALUES("","");
    INSERT INTO expenses VALUES("","");
    INSERT INTO expenses VALUES("","");
    INSERT INTO expenses VALUES("","");
    
    SELECT * FROM expenses;
    
    SET @totalexpenses = 0;
    SELECT 
		   (fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,p_fromdate,p_todate,861) +
		   (fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,p_fromdate,p_todate,862) + 
		   fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,p_fromdate,p_todate,863) +
           fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,p_fromdate,p_todate,864)) +
           ((IFNULL(fnc_chicks_placementqty(BB.id,p_companyid,BB.maleitemid),0) * IFNULL(fnc_chicks_purchasecost(BB.id,p_companyid,BB.maleitemid),0)) + 
           (IFNULL(fnc_chicks_placementqty(BB.id,p_companyid,BB.femaleitemid),0) * IFNULL(fnc_chicks_purchasecost(BB.id,p_companyid,BB.femaleitemid),0))) +
		   ((@birdplaceqty * @labourcharge) + (@birdplaceqty * @overheadcost))) INTO @totalexpenses
	FROM breederbatch BB
	WHERE BB.id = p_breederbatchid;
    
    DROP TEMPORARY TABLE IF EXISTS income;
    CREATE TEMPORARY TABLE income(particulars VARCHAR(200), amount VARCHAR(200));
    
    INSERT INTO income VALUES("Flock cull's Date",DATE_FORMAT(fnc_getplacementdate(p_breederbatchid, p_companyid),'%d/%m/%Y'));
    INSERT INTO income VALUES("Total Eggs Collected",@productionstock);
    INSERT INTO income VALUES("Total Eggs Sold",IFNULL(@soldeggstock,0));
    INSERT INTO income VALUES("Total Eggs Sold Amount",IFNULL(FORMAT(@soldeggamount,2),0));
	INSERT INTO income VALUES("Avg. Selling Rate/Egg",IFNULL(FORMAT((@soldeggamount/@soldeggstock),2),0));
    INSERT INTO income VALUES("Prod. Cost/Egg",FORMAT(IFNULL(@eggrate,0),2));
    INSERT INTO income VALUES("Total Eggs Module Out",0);
    INSERT INTO income VALUES("Avg. Module Out Rate/Egg",0);
	INSERT INTO income VALUES("Total Bird Sold",IFNULL(@soldbirdstock,0));
    INSERT INTO income VALUES("Avg. Sale Rate/Bird",IFNULL(FORMAT(@soldbirdamount,2),0));
    INSERT INTO income VALUES("Total Bird Sold Amount",IFNULL(FORMAT((@soldbirdamount/@soldbirdstock),2),0));
    INSERT INTO income VALUES("Total Chicks Pullout",IFNULL(FORMAT(@chickspulloutqty,2),0));
    INSERT INTO income VALUES("Rate/DOC",IFNULL(FORMAT(@rateperdoc,2),0));
    INSERT INTO income VALUES("Total Chicks Module Out",IFNULL(FORMAT(@moduleoutchiksamt,2),0));
    INSERT INTO income VALUES("Total Chicks Sale Out",IFNULL(FORMAT(@saleoutchiksamt,2),0));
    
    SELECT * FROM income;
    
    SET @totalincome = 0;
    SELECT
           IFNULL((@soldeggamount + 
           @soldbirdamount),0) INTO @totalincome;

	SELECT FORMAT(@totalincome,2) as totalincome,
		   FORMAT(@totalexpenses,2) as totalexpenses,
           FORMAT(ABS((IFNULL(@totalincome, 0) - IFNULL(@totalexpenses, 0))),2) as netporl;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatch_birdcost`(
	IN p_breederbatchid INT,
	IN p_transactiondate Date,
	IN p_companyid INT)
BEGIN
SET @@sql_mode = ' ';

SET @maleitemid = null;
SET @femaleitemid = null;
SET @purvalue = null;
SET @maleliveqty = null;
SET @femaleliveqty = null;
SET @ohexp = null;
SET @otexp = null;
SET @amortizationvalue = null;
SET @feedcost= null;
SET @medicost = null;
SET @vaccost = null;
SET @vitmcost = null;
SET @salesvalue= null;
SET @nonprodbird = null;
SET @p_placementdate = null;
SET @malepurchasecost = null;
SET @femalepurchasecost= NUll;
SET @maleplaceqty = NUll;
SET @femaleplacedqty = NUll;
SET  @birdcoststd = null;
SET @birdcostnonprodbird = null;
SET @applynonproductive = null;
SET @ageindays = 0;
SET @p_transactiondate = date_add(p_transactiondate, INTERVAL 1 DAY);
 SELECT birdcoststd,birdcostnonprodbird INTO @birdcoststd,@birdcostnonprodbird FROM breedersetting WHERE companyid = p_companyid limit 1;
 SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
 SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@placementdate)/7)),0) INTO @ageinweek;
 SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@placementdate)%7)),0) INTO @ageindays;
   if(@birdcoststd = 1) then
			SET @applynonproductive = 0;
	END IF;
	if(@birdcostnonprodbird = 1 and @ageinweek>=24 and @ageindays>0) then
			SET @applynonproductive = 1;
		ELSE
			SET @applynonproductive = 0;
		END IF;

SELECT maleitemid ,femaleitemid INTO @maleitemid,@femaleitemid FROM breederbatch WHERE id = p_breederbatchid;
SELECT  fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@maleitemid),
		fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@femaleitemid) ,
		fnc_chicks_placementqty(p_breederbatchid,p_companyid,@maleitemid) ,
	    fnc_chicks_placementqty(p_breederbatchid,p_companyid,@femaleitemid),
		fnc_breeder_batchwise_birdliveqty(p_breederbatchid,@maleitemid,@p_transactiondate,p_companyid),
		fnc_breeder_batchwise_birdliveqty(p_breederbatchid,@femaleitemid,@p_transactiondate,p_companyid),
		fun_overhed_exp(p_breederbatchid,721,p_transactiondate,p_companyid),
		fnc_getgoodsissue(p_breederbatchid,721,p_transactiondate),
		fun_amortizatiobvalue_forbreeder(p_breederbatchid,p_transactiondate),
		fnc_consumption_wise_cost(p_breederbatchid,p_transactiondate,861,p_companyid),
		fnc_consumption_wise_cost(p_breederbatchid,p_transactiondate,862,p_companyid),
		fnc_consumption_wise_cost(p_breederbatchid,p_transactiondate,863,p_companyid),
		fnc_consumption_wise_cost(p_breederbatchid,p_transactiondate,864,p_companyid),
		fnc_breederbatchwise_salesvalue(p_breederbatchid,721,p_transactiondate,p_companyid)
	INTO 
	@malepurchasecost,@femalepurchasecost,@maleplaceqty,@femaleplacedqty,@maleliveqty,@femaleliveqty,@ohexp,@otexp,@amortizationvalue,@feedcost,@medicost,@vaccost,@vitmcost,@salesvalue
	;
 SELECT 
  spc_getbatchwise_nonproductive_bird(p_breederbatchid,p_companyid,p_transactiondate,@femaleitemid) INTO @nonprodbird;
  SELECT ((@malepurchasecost*@maleplaceqty)+(@femalepurchasecost*@femaleplacedqty)) INTO @purvalue;
  if(@applynonproductive = 1)THEN
  SELECT ROUND(@purvalue,3) as purvalue ,(@maleliveqty+@femaleliveqty) as liveqty,((@maleliveqty+@femaleliveqty)-(@nonprodbird+@maleliveqty)) as productivebird,(@nonprodbird+@maleliveqty)as nonprobird,(@nonprodbird) as tempbird,
          (@maleliveqty) as maleliveqty, (@femaleliveqty) as femaleliveqty,
		  ROUND(@ohexp,3) as ohexp, ROUND(@otexp,3) as otexp, ROUND(@amortizationvalue,3) as amortizationvalue, ROUND(@feedcost,3) as feedcost, ROUND(@medicost,3) as medicost, ROUND(@vaccost,3) as vaccost, ROUND(@vitmcost,3) as vitmcost, ROUND(@salesvalue,3) as salesvalue,
		 ROUND((@purvalue+@feedcost+@medicost+@vaccost+@vitmcost+@ohexp+@otexp),3) as totalvalue, ROUND(((@purvalue+@feedcost+@medicost+@vaccost+@vitmcost+@ohexp+@otexp)-(@amortizationvalue+@salesvalue)),3) as balancevalue;
        
	END IF;
    IF(@applynonproductive = 0)THEN
     SELECT  ROUND(@purvalue,3) as purvalue ,(@maleliveqty+@femaleliveqty) as liveqty,((@maleliveqty+@femaleliveqty)) as productivebird,(@nonprodbird+@maleliveqty)as nonprobird,(@nonprodbird) as tempbird,
          (@maleliveqty) as maleliveqty, (@femaleliveqty) as femaleliveqty,
		  ROUND(@ohexp,3) as ohexp, ROUND(@otexp,3) as otexp, ROUND(@amortizationvalue,3) as amortizationvalue, ROUND(@feedcost,3) as feedcost, ROUND(@medicost,3) as medicost, ROUND(@vaccost,3) as vaccost, ROUND(@vitmcost,3) as vitmcost, ROUND(@salesvalue,3) as salesvalue,
		 ROUND((@purvalue+@feedcost+@medicost+@vaccost+@vitmcost+@ohexp+@otexp),3) as totalvalue, 
         ROUND(((@purvalue+@feedcost+@medicost+@vaccost+@vitmcost+@ohexp+@otexp)-(@amortizationvalue+@salesvalue)),3) as balancevalue;
END IF;
            
            
            --  eggscolection
            
SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @p_placementdate;
 
DROP TEMPORARY TABLE IF EXISTS tepmeggscollection;
CREATE TEMPORARY TABLE tepmeggscollection
(itemid INT(11),
itemname VARCHAR(200),
Production_Week INT,
Week_No INT,
eggrate DECIMAL(9,3),
amortizationcostperegg DECIMAL(9,3),
quantity VARCHAR(200));

INSERT INTO tepmeggscollection 
SELECT ED.itemid,REPLACE(I.itemname, ' ', '-')as itemname,
TRUNCATE (((DATEDIFF(EC.productionstartdate,@p_placementdate)/7)+1),0)  as proageinweeks,
TRUNCATE (((DATEDIFF(EC.collectiondate,@p_placementdate)/7)+1),0)  as ageinweeks,
FORMAT(((fnc_calculate_consumptioncost(IFNULL(group_concat(DISTINCT BDT.issueid),0), IFNULL(group_concat(DISTINCT BDC.itemid),0), p_transactiondate)
	+ IFNULL(AM.amortizationvalueofbird,0)) / IFNULL(SUM(ED.quantity),0)),2) as eggrate,
IFNULL(AM.amortizationvalueofbird,0) as amortizationcostperegg,
ED.quantity
 FROM eggscollection EC
 Inner JOIN eggsdistributiondetail ED ON ED.eggscollectionid = EC.id 
 INNER JOIN breederdailytransaction BDT ON BDT.breederbatchid = ED.breederbatchid
 INNER JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id
 LEFT JOIN amortization AM ON AM.breederbatchid = ED.breederbatchid
 LEFT JOIN item I ON I.id = ED.itemid
 WHERE EC.breederbatchid = p_breederbatchid
 AND EC.collectiondate between @p_placementdate AND p_transactiondate;
 
 SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tepmeggscollection;
  
SET @sql = CONCAT('SELECT Production_Week,Week_No,', @sql, ' 
                  FROM tepmeggscollection 
                   GROUP BY Week_No');

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatch_bylocation`(
	IN p_locationid INT(11),
    IN p_companyid INT(11)
)
BEGIN

SET @fromwarehouseid = null;
SET @fromwarehousename = null;


	SELECT BS.defaultchickwarehouseid, W1.warehousename 
    INTO 
    @fromwarehouseid, @fromwarehousename
    FROM breedersetting BS
    LEFT JOIN warehouse W1 ON W1.id = BS.defaultchickwarehouseid
    WHERE BS.companyid = p_companyid;
    
    

	SELECT BB.id,
		   BB.batchname,
           BB.locationid,
           L.locationname,
           BB.statusid,
           REF.refname as batchstatus,
           BB.warehouseid,
           W.warehousename,
           @fromwarehouseid as fromwarehouseid,
		   @fromwarehousename as fromwarehousename
           
	FROM breederbatch BB
    LEFT JOIN location L ON L.id = BB.locationid
    LEFT JOIN breederphase BF ON BF.id = BB.statusid
    LEFT JOIN warehouse W ON W.id = BB.warehouseid
	LEFT JOIN `reference` REF ON REF.id = BB.statusid
    
    WHERE BB.locationid = p_locationid
    AND BB.companyid = p_companyid
    
    ORDER BY BB.id DESC;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatch_bystatusid`(
    IN p_companyid INT,
    IN p_statusid INT
)
BEGIN
    
    SELECT
		B.id,
        B.locationid,
        L.locationcode,
        L.locationname,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        DATE_FORMAT(fnc_getplacementdate(B.id, p_companyid),'%d/%m/%Y') as batchplacementdate,
        WB.bincode,
        WB.binname,
        B.statusid,
        REF.refname as batchstatus
		
	
    FROM
		breederbatch B
	
    LEFT JOIN location L ON B.locationid = L.id
    LEFT JOIN warehouse W ON B.warehouseid = W.id
    LEFT JOIN warehousebin WB on B.binid = WB.id
   -- LEFT JOIN breederbatchplacement BP on B.id = BP.breederbatchid
    INNER JOIN `reference` REF ON REF.id = B.statusid
	
	WHERE
		B.companyid = p_companyid AND
        B.statusid = p_statusid
        
	ORDER BY B.id DESC;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatch_bywarehouseid`(
 IN p_companyid INT,
 IN p_warehouseid varchar(200)
 )
BEGIN 
SET @@sql_mode = ' ';

select  
BB.warehouseid,
BB.id as breederbatchid,
BB.batchname,
W.id,
W.warehousename 
from breederbatch BB
LEFT JOIN warehouse W ON BB.warehouseid = W.id
Where FIND_IN_SET(BB.warehouseid,p_warehouseid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatch_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederbatch WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatch_foramortization`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		B.id,
        L.locationcode,
        L.locationname,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        WB.bincode,
        WB.binname,
        B.statusid,
        REF.refname as batchstatus,
        DATE_FORMAT(fnc_getplacementdate(B.id, p_companyid),'%d/%m/%Y') as placementdate
	
    FROM
		breederbatch B
	
    LEFT JOIN location L ON B.locationid = L.id
    LEFT JOIN warehouse W ON B.warehouseid = W.id
    LEFT JOIN warehousebin WB on B.binid = WB.id
    LEFT JOIN `reference` REF ON REF.id = B.statusid
	LEFT JOIN amortization A ON B.id = A.breederbatchid
	
	WHERE
		B.companyid = p_companyid
        AND A.id is null 
		AND B.statusid = 222
		-- AND CAST(BBP.placementdate AS DATE) >= CAST(DATE_ADD(now(), INTERVAL 168 DAY) AS DATE);
        
	ORDER BY B.id DESC;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatch_forbatchdetail`(
	IN p_companyid INT(11),
	IN p_breederbatchid INT(11)
)
BEGIN
 
	 SET @maleitemid = NULL;
     SET @maleitemname = NULL;
     SET @femaleitemid = NULL;
     SET @femaleitemname = NULL;
	 SET @femalebirdquantity = 0;
     SET @malebirdquantity = 0;
     SET @eggscollectionquantity = 0;
     SET @hatchingeggquantity = 0;
     SET @placementdate = NULL;
     SET @phaseid = NULL;
     SET @batchstatusid = NULL;
     SET @batchname = NULL;
     SET @batchstatus = NULL;
     SET @transactiondate = NULL;
     SET @collectiondate = NULL;
     SET @livebatchdate = NULL;
     SET @batchplactdate = null;
     SET @biologicalvalue = null;
     SET @op_total_eggs = 0;
     SET @op_hatchig_eggs = 0;
    
		SELECT 
			BB.maleitemid, BB.femaleitemid, I1.itemname, I2.itemname
			INTO 
            @maleitemid, @femaleitemid, @maleitemname, @femaleitemname
		FROM 
			breederbatch BB
            INNER JOIN item I1 ON I1.id = BB.maleitemid
            INNER JOIN item I2 ON I2.id = BB.femaleitemid
		WHERE BB.id = p_breederbatchid
		LIMIT 1;
        
        SELECT 
			BT.transactiondate
			INTO 
            @transactiondate
		FROM 
			breederdailytransaction BT
		WHERE BT.breederbatchid = p_breederbatchid
        ORDER BY BT.id DESC
		LIMIT 1;
        
        SELECT 
			EC.collectiondate
			INTO 
            @collectiondate
		FROM 
			eggscollection EC
		WHERE EC.breederbatchid = p_breederbatchid
        ORDER BY EC.id DESC
		LIMIT 1;
        
       IF(@transactiondate IS NOT NULL) THEN
			SELECT @transactiondate INTO @livebatchdate;
       ELSEIF(@collectiondate IS NOT null) then
		   IF(@transactiondate>@collectiondate)THEN
			
				SELECT @transactiondate INTO @livebatchdate;
				
			ELSE
				SELECT @collectiondate INTO @livebatchdate;
				
			END IF;
		
            /*if(@livebatchdate IS NULL)then
				SET @livebatchdate = now();
                end if; */
                
		ELSE
			IF EXISTS(SELECT id FROM breederbatchbalance WHERE breederbatchid = p_breederbatchid) THEN
				SELECT updateddate INTO @livebatchdate FROM breederbatchbalance WHERE breederbatchid = p_breederbatchid;
			ELSE
				SELECT firstdaydate INTO @livebatchdate FROM breederbatchplacement WHERE breederbatchid = p_breederbatchid;
            END IF;
        END IF;
        
        
    IF EXISTS(SELECT id FROM breederbatchplacement WHERE breederbatchid = p_breederbatchid AND id IS NOT NULL LIMIT 1) THEN
 
		SELECT
			BBP.placementdate,
            BBP.firstdaydate,
            BBP.phasestatusid,
			fnc_chicks_placementqty(p_breederbatchid,p_companyid,@maleitemid),
			fnc_chicks_placementqty(p_breederbatchid,p_companyid,@femaleitemid),
            BB.statusid,
            REF.refname,
            BB.batchname 
            INTO @placementdate,@firstdaydate,@phaseid, @malebirdquantity, @femalebirdquantity,@batchstatusid,@batchstatus,@batchname
      
            
		FROM
			breederbatchplacement BBP
			LEFT JOIN breederbatchplacementdetail BBPD ON BBPD.breederbatchplacementid = BBP.id 
			INNER JOIN breederbatch BB ON BB.id = BBP.breederbatchid
            LEFT JOIN `reference` REF ON REF.id = BB.statusid
		WHERE 
		breederbatchid = p_breederbatchid LIMIT 1 ;
     
    ELSE  
     
			SELECT
			BBO.batchplacementdate,
            BBO.firstdaydate,
			BBO.phasestatusid,
			fnc_chicks_placementqty(p_breederbatchid,p_companyid,@maleitemid),
			fnc_chicks_placementqty(p_breederbatchid,p_companyid,@femaleitemid),
			BB.statusid,
            REF.refname,
            BB.batchname INTO
			@placementdate,@firstdaydate,@phaseid, @malebirdquantity, @femalebirdquantity,@batchstatusid,@batchstatus,@batchname

			FROM breederbatchlocationwiseopeningdetail BLO
			INNER JOIN breederbatchopening BBO ON BBO.id = BLO.breederbatchopeningid 
			INNER JOIN breederbatch BB ON BB.id = BBO.breederbatchid
            LEFT JOIN `reference` REF ON REF.id = BB.statusid
		WHERE 
		BBO.breederbatchid = p_breederbatchid
        group by  BBO.id LIMIT 1;
        select ifnull(fnc_breeder_opening_totaleggs(p_breederbatchid,p_companyid),0) INTO @op_total_eggs;
         select ifnull(fnc_opening_breeder_hatching_eggs(p_breederbatchid,p_companyid),0) INTO @op_hatchig_eggs;
         
        END IF;
			
		select sum(ECD.quantity) INTO @eggscollectionquantity from eggscollection EC 
		LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id
        WHERE breederbatchid= p_breederbatchid;
        
        SELECT SUM(EDD.quantity) INTO @hatchingeggquantity from eggsdistributiondetail EDD
        WHERE breederbatchid= p_breederbatchid AND EDD.itemtypeid = 881 AND collectiondate = @livebatchdate;
        
        
        SET @amortizationcost = 0;
		SELECT IFNULL(AM.amortizationvalueofbird,0) INTO @amortizationcost
		FROM amortization AM WHERE AM.breederbatchid = p_breederbatchid;
        
        SET @todaysval = null;
        SELECT (IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,@livebatchdate,@livebatchdate,861),0) + 
		IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,@livebatchdate, @livebatchdate,862),0)+
		IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,@livebatchdate, @livebatchdate,863),0)+
		IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(p_breederbatchid,@livebatchdate, @livebatchdate,864),0)+
		IFNULL(fun_overhed_exp(p_breederbatchid,721,@livebatchdate,p_companyid),0)) INTO @todaysval;
        
	 SELECT fnc_breeder_biologicalvalue(p_breederbatchid,@livebatchdate, @placementdate,p_companyid) INTO @biologicalvalue;
        
        select @maleitemid as maleitemid,
			   @maleitemname as maleitemname ,
			   @femaleitemid as femaleitemid, 
               @femaleitemname as femaleitemname ,
               @femalebirdquantity as femalequantity,
               @malebirdquantity as malequantity,
               (ifnull((@eggscollectionquantity),0)+@op_total_eggs) as eggscollectionquantity, 
               (ifnull((@hatchingeggquantity),0)+@op_hatchig_eggs) as hatchingeggquantity,
               @placementdate as placementdate,
               @firstdaydate as firstdaydate,
               @batchstatusid as batchstatusid,
               @batchstatus as batchstatus,
               @batchname as batchname,
			   @phaseid as phaseid,
               DATE_FORMAT(@livebatchdate,'%d/%m/%Y') as livebatchdate,
               -- @livebatchdate as livebatchdate,
               @biologicalvalue as biologicalvalue,
			   IFNULL((@todaysval / @hatchingeggquantity),0) as costperegg,
               ((IFNULL((@todaysval / @hatchingeggquantity),0) + @amortizationcost) * @hatchingeggquantity) as amortizationcostperegg;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatch_forbatchdetail1`(
	IN p_companyid INT(11),
	IN p_breederbatchid INT(11)
)
BEGIN
	SELECT 
		BB.id,
        BB.statusid,
        REF1.refname as breederbatchstatus,
        DATE_FORMAT(BBP.placementdate,'%d/%m/%Y') as placementdate,
		DATE_FORMAT(BBP.firstdaydate,'%d/%m/%Y') as firstdaydate,
        BBP.phasestatusid,
        REF2.refname as phasestatusname,
        BBPD.itemid,
        BBPD.quantity,
        BBPD.breedershedpenid,
        I.itemname,
        ECD.eggscollectionid,
        ECD.quantity as totaleggquantity,
        EDD.quantity as hatchingeggquantity
        
        -- 881
    
    FROM breederbatch BB
    INNER JOIN reference REF1 ON REF1.id = BB.statusid
    INNER JOIN breederbatchplacement BBP ON BBP.breederbatchid = BB.id
    INNER JOIN breederbatchplacementdetail BBPD ON BBPD.breederbatchplacementid = BBP.id
    INNER JOIN item I ON BBPD.itemid = I.id
    INNER JOIN reference REF2 ON REF2.id = BBP.phasestatusid
    /*INNER JOIN breederdailytransaction BDT ON BDT.breederbatchid = BB.id
    INNER JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id
    AND BDM.itemid = BBPD.itemid*/
    LEFT JOIN eggscollection EC ON EC.breederbatchid = BB.id
    LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id
    LEFT JOIN eggsdistributiondetail EDD ON EDD.eggscollectionid = EC.id
    AND EDD.itemtypeid = 881
    
    WHERE BB.id = p_breederbatchid AND
		  BB.companyid = p_companyid;
          
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatch_forlocation`(
	
    IN p_companyid INT(11),
    IN p_locationid VARCHAR(200)
)
BEGIN
SET  @location = p_locationid;
SET @fromwarehouseid = null;
SET @fromwarehousename = null;


	SELECT BS.defaultchickwarehouseid, W1.warehousename 
    INTO 
    @fromwarehouseid, @fromwarehousename
    FROM breedersetting BS
    LEFT JOIN warehouse W1 ON W1.id = BS.defaultchickwarehouseid
    WHERE BS.companyid = p_companyid;
    
    

	SELECT BB.id,
		   BB.batchname,
           BB.locationid,
           L.locationname,
           BB.statusid,
           BF.phasename as batchstatus,
           BB.warehouseid,
           W.warehousename,
           @fromwarehouseid as fromwarehouseid,
		   @fromwarehousename as fromwarehousename,
             DATE_FORMAT(fnc_getplacementdate(BB.id,p_companyid),'%d/%m/%Y') as placementdate
           
	FROM breederbatch BB
    LEFT JOIN location L ON L.id = BB.locationid
    LEFT JOIN breederphase BF ON BF.id = BB.statusid
    LEFT JOIN warehouse W ON W.id = BB.warehouseid
    LEFT JOIN breederbatchplacement BP ON BB.id = BP.breederbatchid
    
    WHERE 
     FIND_IN_SET(BB.locationid,@location) 
    -- BB.locationid = p_locationid
    AND BB.companyid = p_companyid;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatch_locationwise`(
	IN p_locationid INT(11),
    IN p_statusid INT(11),
    IN p_companyid INT(11)
)
BEGIN

SET @fromwarehouseid = null;
SET @fromwarehousename = null;


	SELECT BS.defaultchickwarehouseid, W1.warehousename 
    INTO 
    @fromwarehouseid, @fromwarehousename
    FROM breedersetting BS
    LEFT JOIN warehouse W1 ON W1.id = BS.defaultchickwarehouseid
    WHERE BS.companyid = p_companyid;
    
    

	SELECT BB.id,
		   BB.batchname,
           BB.locationid,
           L.locationname,
           BB.statusid,
           BF.phasename as batchstatus,
           BB.warehouseid,
           W.warehousename,
           @fromwarehouseid as fromwarehouseid,
		   @fromwarehousename as fromwarehousename
           
	FROM breederbatch BB
    LEFT JOIN location L ON L.id = BB.locationid
    LEFT JOIN breederphase BF ON BF.id = BB.statusid
    LEFT JOIN warehouse W ON W.id = BB.warehouseid
    
    WHERE BB.locationid = p_locationid
    AND BB.statusid = p_statusid
    AND BB.companyid = p_companyid;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatch_save`(
	IN p_id INT,
    IN p_locationid VARCHAR(100),
    IN p_warehouseid INT,
    IN p_batchname VARCHAR(200),
    IN p_binid INT,
    IN p_statusid INT(11),
    IN p_isNewFinancialYear TINYINT(4),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
     IF EXISTS(
            SELECT batchname from breederbatch where LOWER(batchname) = LOWER(p_batchname) 
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 

    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederbatch 
				(id, locationid, warehouseid, batchname, statusid, binid, isNewFinancialYear, maleitemid, femaleitemid, companyid)
			VALUES 
				(p_id, p_locationid, p_warehouseid, p_batchname, p_statusid, p_binid, p_isNewFinancialYear, NULL, NULL, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE breederbatch
				SET locationid = p_locationid, 
                warehouseid = p_warehouseid,
                batchname = p_batchname, 
                statusid = p_statusid,
                binid = p_binid,
                isNewFinancialYear = p_isNewFinancialYear,
                maleitemid = NULL,
                femaleitemid = NULL,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breederbatch', out_id, @action, p_userid);
   	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatch_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		B.id,
        L.locationcode,
        L.locationname,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        WB.bincode,
        WB.binname,
        B.statusid,
        REF.refname as batchstatus,
        B.locationid
	
    FROM
		breederbatch B
	
    LEFT JOIN location L ON B.locationid = L.id
    LEFT JOIN warehouse W ON B.warehouseid = W.id
    LEFT JOIN warehousebin WB on B.binid = WB.id
    LEFT JOIN `reference` REF ON REF.id = B.statusid
	
	WHERE
		B.companyid = p_companyid
        
	ORDER BY B.id DESC;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbatch_select`(
	IN p_id INT
)
BEGIN
    
    SELECT
		B.id,
		B.locationid,
        L.locationcode,
        L.locationname,
        B.warehouseid,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        WB.bincode,
        WB.binname
	
    FROM
		breederbatch B
	
    LEFT JOIN location L ON B.locationid = L.id
    LEFT JOIN warehouse W ON B.warehouseid = W.id
    LEFT JOIN warehousebin WB on B.binid = WB.id
	
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND B.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
      

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbirdsalesorderbatch_byorderid`(
	IN p_breederbirdsalesorderid INT,
    IN p_warehouseid INT,
    IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';
	IF((SELECT moduleid FROM breeder_birdsalesorder WHERE id = p_breederbirdsalesorderid) = 721) THEN
		SELECT 
			BSOD.batchid,BB.batchname
		FROM breeder_birdsalesorderdetail BSOD
			LEFT JOIN breederbatch BB ON BB.id = BSOD.batchid
			LEFT JOIN breedershed BS ON BSOD.shedid = BS.id AND BS.warhouseid = p_warehouseid
		WHERE BSOD.breederbirdsalesorderid = p_breederbirdsalesorderid
		
		AND BSOD.companyid = p_companyid
		group by BSOD.batchid;
	END IF;
    
    IF((SELECT moduleid FROM breeder_birdsalesorder WHERE id = p_breederbirdsalesorderid) = 725) THEN
		SELECT 
			BSOD.batchid,LB.batchname
		FROM breeder_birdsalesorderdetail BSOD
			LEFT JOIN layerbatch LB ON LB.id = BSOD.batchid
			LEFT JOIN layershed LS ON BSOD.shedid = LS.id AND LS.warehouseid = p_warehouseid
		WHERE BSOD.breederbirdsalesorderid = p_breederbirdsalesorderid
		
		AND BSOD.companyid = p_companyid
		group by BSOD.batchid;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbirdsalesorderdetail_save`(
	IN p_id INT,
    IN p_breederbirdsalesorderid INT,
    IN p_batchid INT,
    IN p_batchsaleweight DECIMAL(12,3),
    IN p_avgweight DECIMAL(9,3),
    IN p_itemid INT(11),
    IN p_shedid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breeder_birdsalesorderdetail 
				(breederbirdsalesorderid,batchid,batchsaleweight, pendingweight,itemid,shedid,avgweight, companyid)
			VALUES 
				(p_breederbirdsalesorderid, p_batchid,p_batchsaleweight, p_batchsaleweight,p_itemid,p_shedid, p_avgweight, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE breeder_birdsalesorderdetail
				SET breederbirdsalesorderid = p_breederbirdsalesorderid,
					batchid = p_batchid,
                    batchsaleweight = p_batchsaleweight,
                    itemid = p_itemid,
                    shedid = p_shedid,
                    avgweight = p_avgweight,
					companyid = p_companyid,
				    id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF((SELECT statusid FROM breeder_birdsalesorder WHERE id = p_breederbirdsalesorderid) = 4102) THEN
		SET @salesdetailid = NULL;
     
		CALL spc_salesorderdetail_save(
			NULL, (SELECT stdsalesorderid FROM breeder_birdsalesorder WHERE id = p_breederbirdsalesorderid),
			p_itemid, (p_batchsaleweight/p_avgweight), 1,
			p_batchsaleweight, 1, 142, (SELECT rateperkg FROM breeder_birdsalesorder WHERE id = p_breederbirdsalesorderid), 
			NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL,
			NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL,
			(p_batchsaleweight * (SELECT rateperkg FROM breeder_birdsalesorder WHERE id = p_breederbirdsalesorderid)), p_companyid, p_userid, @salesdetailid
		);
        
	END IF;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breeder_birdsalesorderdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbirdsalesorderdetail_search`(
	IN p_breederbirdsalesorderid INT,
    IN p_moduleid INT,
    IN p_companyid INT
    
)
BEGIN
SET @@sql_mode = '';
IF(p_moduleid = 721) THEN

	SELECT BSOD.*, 
           I.itemname,
           BB.batchname,
           BBB.quantity as liveqty,
		    BSOD.avgweight as avgweight,
		   ((BBB.quantity)*(BSOD.avgweight)) as totalbatchsaleweight,
           BSOD.shedid,
           BS.shedname
    FROM breeder_birdsalesorderdetail BSOD
		LEFT JOIN item I ON I.id = BSOD.itemid
		LEFT JOIN breederbatchbalance BBB ON BBB.breederbatchid = BSOD.batchid AND BBB.itemid = BSOD.itemid
		LEFT JOIN breederbatch BB ON BB.id = BSOD.batchid
        LEFT JOIN breedershed BS ON BS.id = BSOD.shedid
   
    WHERE BSOD.breederbirdsalesorderid = p_breederbirdsalesorderid AND 
			BSOD.companyid = p_companyid 
    group by BSOD.id;
END IF;
IF(p_moduleid = 725) THEN

	SELECT BSOD.*, 
           I.itemname,
           LB.batchname,
           LBB.quantity as liveqty,
		    BSOD.avgweight as avgweight,
		   ((LBB.quantity)*(BSOD.avgweight)) as totalbatchsaleweight,
           BSOD.shedid,
           LS.shedname
    FROM breeder_birdsalesorderdetail BSOD
		LEFT JOIN item I ON I.id = BSOD.itemid
		LEFT JOIN layerbatchbalance LBB ON LBB.layerbatchid = BSOD.batchid AND LBB.itemid = BSOD.itemid
		LEFT JOIN layerbatch LB ON LB.id = BSOD.batchid
        LEFT JOIN layershed LS ON LS.id = BSOD.shedid
   
    WHERE BSOD.breederbirdsalesorderid = p_breederbirdsalesorderid AND 
			BSOD.companyid = p_companyid 
    group by BSOD.id;
END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbirdsalesorder_bylocation`( 
 IN p_locationid INT(11),
 IN p_date DATE,
 IN p_moduleid INT,
 IN p_companyid INT)
BEGIN
SET @@sql_mode = '';
IF(p_moduleid = 721) THEN 
	SELECT 
		BBS.id as breederbirdsalesorderid,
        BBS.partyid,
        BBSD.batchid,
        BBSD.batchsaleweight as plannedweight,
        BBSD.pendingweight,
        BBSD.itemid,
        BBS.rateperkg,
        BBS.locationid,
        (BBB.quantity * BBSD.avgweight) as batchweight,
        0 as approvedweight,
		0 as batchcost,
        BB.batchname,
        P.partyname
        
        
    FROM 
		breeder_birdsalesorder BBS
        
        LEFT JOIN  breeder_birdsalesorderdetail BBSD ON BBSD.breederbirdsalesorderid = BBS.id
        LEFT JOIN breederbatchbalance BBB ON BBB.breederbatchid = BBSD.batchid AND BBB.itemid = BBSD.itemid
		LEFT JOIN breederbatch BB ON BB.id = BBSD.batchid
        LEFT JOIN item I ON I.id = BBSD.itemid
        LEFT JOIN party P ON P.id =  BBS.partyid
      
    WHERE
		BBS.locationid = p_locationid AND
        BBS.orderdate = p_date AND
        BBS.companyid = p_companyid AND
        BBS.statusid = 4102
        group by  BBSD.itemid;
END IF;


IF(p_moduleid = 725) THEN 
	SELECT 
		BBS.id as breederbirdsalesorderid,
        BBS.partyid,
        BBSD.batchid,
        BBSD.batchsaleweight as plannedweight,
        BBSD.pendingweight,
        BBSD.itemid,
        BBS.rateperkg,
        BBS.locationid,
        (LBB.quantity * BBSD.avgweight) as batchweight,
        0 as approvedweight,
		0 as batchcost,
        LB.batchname,
        P.partyname
        
        
    FROM 
		breeder_birdsalesorder BBS
        
        LEFT JOIN  breeder_birdsalesorderdetail BBSD ON BBSD.breederbirdsalesorderid = BBS.id
        LEFT JOIN layerbatchbalance LBB ON LBB.layerbatchid = BBSD.batchid AND LBB.itemid = BBSD.itemid
		LEFT JOIN layerbatch LB ON LB.id = BBSD.batchid
        LEFT JOIN item I ON I.id = BBSD.itemid
        LEFT JOIN party P ON P.id =  BBS.partyid
      
    WHERE
		BBS.locationid = p_locationid AND
        BBS.orderdate = p_date AND
        BBS.companyid = p_companyid AND
        BBS.statusid = 4102
        group by BBSD.itemid;
END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbirdsalesorder_save`(
	IN p_id INT(11),
    IN p_moduleid INT(11),
    IN p_partyid INT,
    IN p_locationid INT,
	IN p_orderdate DATE,
	IN p_totalsaleweight DECIMAL(12,3),
    IN p_rateperkg DECIMAL(9,3),
    IN p_fromweight DECIMAL(9,3),
    IN p_toweight DECIMAL(9,3),
    IN p_statusid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breeder_birdsalesorder 
				(stdsalesorderid,moduleid, partyid, locationid, orderdate, 
                fromweight, toweight, totalsalesweight, rateperkg, statusid,
                companyid)
			VALUES 
				(NULL, p_moduleid,p_partyid, p_locationid, p_orderdate, 
                p_fromweight, p_toweight, p_totalsaleweight, p_rateperkg, p_statusid, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE breeder_birdsalesorder
				SET
					moduleid = p_moduleid,
					partyid = p_partyid,
                    locationid = p_locationid,
                    orderdate = p_orderdate, 
                    fromweight = p_fromweight,
                    toweight = p_toweight,
					totalsalesweight = p_totalsaleweight,
                    rateperkg = p_rateperkg,
                    statusid = p_statusid,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF(p_statusid = 4102) THEN
		SET @salesid = NULL;
		set @out_seriesid = '0';
		call spc_financialyeardocseries_newseries('SO', p_companyid, @out_seriesid);
		
		
		CALL spc_salesorder_save(
			NULL, p_moduleid, (select @out_seriesid), p_partyid, NULL,
			p_orderdate, NULL, NULL, p_orderdate, 
			1561, NULL, NULL, NULL,NULL, NULL, NULL, NULL,
			(p_totalsaleweight * p_rateperkg), NULL, NULL, 
			(p_totalsaleweight * p_rateperkg), NULL, NULL, 
			p_userid, 1362, p_companyid, p_userid, @salesid
		);
    
		-- update stdsalesorderid
		
		UPDATE breeder_birdsalesorder SET stdsalesorderid = @salesid WHERE id = out_id;
        
	END IF;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breeder_birdsalesorder', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbirdsalesorder_select`(
	IN p_id INT,
	IN p_companyid INT
)
BEGIN

	SELECT  BBS.id,
           BBS.stdsalesorderid,
		   BBS.partyid,
           BBS.moduleid,
           BBS.locationid as locationid,
           DATE_FORMAT(BBS.orderdate,'%d/%m/%Y') as orderdate,
           BBS.totalsalesweight,
           BBS.fromweight,
           BBS.toweight,
           BBS.rateperkg,
           BBS.statusid,
           REF.refname,
           P.partyname
           
	FROM breeder_birdsalesorder BBS
    LEFT JOIN `reference` REF ON REF.id = BBS.statusid
    LEFT JOIN party P ON P.id = BBS.partyid
    
    WHERE BBS.id = p_id AND BBS.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbirdsalesoreder_search`(
	IN p_todaydate DATE,
	IN p_companyid INT
)
BEGIN

	SELECT BBS.id,
           BBS.stdsalesorderid,
		   BBS.partyid,
           BBS.moduleid,
           BBS.locationid as locationid,
           DATE_FORMAT(BBS.orderdate,'%d/%m/%Y') as orderdate,
           BBS.totalsalesweight,
           BBS.fromweight,
           BBS.toweight,
           BBS.rateperkg,
           BBS.statusid,
           REF.refname,
           P.partyname
           
	FROM breeder_birdsalesorder BBS
    LEFT JOIN `reference` REF ON REF.id = BBS.statusid
    LEFT JOIN party P ON P.id = BBS.partyid
    
    WHERE BBS.orderdate = p_todaydate AND BBS.companyid = p_companyid
    order by BBS.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederbtch_bylocation`(
IN p_locationid varchar(200),
IN p_companyid INT(11)

)
BEGIN
SELECT  
		SB.scheduleid,
        HS.locationid,
        SB.breederbatchid as breederbatchid,
        BB.batchname as breederbatchname
        
FROM setterbatch SB 
LEFT JOIN hatcheryschedule HS  ON HS.id = SB.scheduleid   
LEFT JOIN breederbatch BB ON BB.id =  SB.breederbatchid

 WHERE SB.companyid = p_companyid AND
FIND_IN_SET( HS.locationid, p_locationid) AND
SB.sourceid = 261;  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederdailyconsumption_breederbatchwise`(
	IN p_companyid INT,
    IN p_breederbatchid INT
)
BEGIN
 
    SELECT
        BDC.id,
        BDC.breederdailytransactionid,
        BDC.consumptiontypeid,
        BDC.itemid,
        I.itemname,
        BDC.breederitemid as breedertypeid,
        BDC.shedlineid,
        BDC.quantity,
        BB.locationid,
        L.locationname,
        L.locationcode
     
    FROM
		breederdailyconsumption BDC
	LEFT JOIN breederdailytransaction BDT ON BDC.breederdailytransactionid = BDT.id
    INNER JOIN item I ON I.id = BDC.itemid
    INNER JOIN breederbatch BB ON BB.id = p_breederbatchid
    INNER JOIN location L ON L.id = BB.locationid
    
	WHERE
		BDC.companyid = p_companyid
        AND BDT.breederbatchid = p_breederbatchid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederdailyconsumption_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DELETE FROM breederdailyconsumption WHERE id = p_id;
    
	-- record log
	CALL spc_commonlog_save(p_companyid, 'breederdailyconsumption', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederdailyconsumption_save`(
	IN p_id INT,
    IN p_breederdailytransactionid INT,
    IN p_consumptiontypeid INT,
    IN p_itemid INT,
    IN p_shedlineid INT,
    IN p_isherbal INT,
    IN p_standardconsumption DECIMAL(20,3),
    IN p_quantity DECIMAL(20,3),
	IN p_warehouseid INT,
	IN p_issuedetailid INT,
    IN p_breederitemid INT(11),
	IN p_itemvalue DECIMAL(30,6),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederdailyconsumption
				(breederdailytransactionid, 
				 consumptiontypeid, 
                 itemid, 
                 shedlineid, 
                 isherbal, 
                 standardconsumption,
                 quantity, 
                 issuedetailid,
                 breederitemid,
                 itemvalue,
                 companyid)
			VALUES 
				(p_breederdailytransactionid, 
                 p_consumptiontypeid, 
                 p_itemid, 
                 p_shedlineid, 
                 p_isherbal, 
                 p_standardconsumption,
                 p_quantity,
                 p_issuedetailid,
                 p_breederitemid,
                 p_itemvalue,
                 p_companyid);
      
      SET @action = 'INSERT';
      
	 
    ELSE
    
		UPDATE  breederdailyconsumption
				SET consumptiontypeid = p_consumptiontypeid, 
                itemid = p_itemid,
                shedlineid = p_shedlineid,
                isherbal = p_isherbal,
                standardconsumption = p_standardconsumption,
                quantity = p_quantity,
                issuedetailid = p_issuedetailid,
                breederitemid = p_breederitemid,
				itemvalue = p_itemvalue,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   
    -- record log
    -- CALL spc_commonlog_save(p_companyid, 'breederdailyconsumption', out_id, @action, p_userid);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederdailyconsumption_savejson`(
	IN p_breederdailytransactionid INT,
    IN p_dailyMortality json,
    IN p_feedConsumption json,
    IN p_medicineConsumption json,
    IN p_vaccineConsumption json,
	IN p_vitaminConsumption json,
    IN p_otherDetails json,
    OUT out_id INT
)
BEGIN

	-- save other details 
    
    SET @i = 0;
    
			SET @p_id = CASE WHEN JSON_EXTRACT(p_otherDetails, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.id'))) AS SIGNED) end;
			SET @out_id = null;
        
	CALL spc_breederdailyotherdetails_save(
        
	     @p_id,
		 p_breederdailytransactionid,
         JSON_UNQUOTE((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.lighton')))),
		 JSON_UNQUOTE((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.lightoff')))),
         IF(json_type(json_extract(p_otherDetails, CONCAT('$.duration'))) = 'NULL', null, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.duration'))) AS DECIMAL(9,2))),
         IF(json_type(json_extract(p_otherDetails, CONCAT('$.temperature'))) = 'NULL', null, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.temperature'))) AS DECIMAL(9,2))),
         IF(json_type(json_extract(p_otherDetails, CONCAT('$.humidity'))) = 'NULL', null, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.humidity'))) AS DECIMAL(9,2))),
		 IF(json_type(json_extract(p_otherDetails, CONCAT('$.waterconsumption'))) = 'NULL', null, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.waterconsumption'))) AS DECIMAL(9,2))),
         CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.companyid'))) AS UNSIGNED INTEGER),
		 CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.userid'))) AS UNSIGNED INTEGER),
		 @out_id
	 );
     
    --  save daily mortality
    
	 SET @i = 0;
    
	 WHILE @i < JSON_LENGTH(p_dailyMortality) DO
    
		 SET @str = NULL;
         SELECT JSON_EXTRACT(p_dailyMortality,CONCAT('$[',@i,']')) INTO @str;
        
		 SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
		 SET @out_id = null;
        
		 CALL spc_breederdailymortality_save(
        
			 @p_id,
             p_breederdailytransactionid,
             (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.avgweight'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.totalmortality'))),
              if(json_type(json_extract(@str, CONCAT('$.mortalityreasonid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.mortalityreasonid'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.totalculls'))),
              if(json_type(json_extract(@str, CONCAT('$.cullsreasonid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.cullsreasonid'))),
			 (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
		     (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			 @out_id
         );

		 SELECT @i + 1 INTO @i;
        
	  END WHILE;
    
    
    -- save daily feed consumption 
    
    SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_feedConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_feedConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_breederdailyconsumption_save(
        
			@p_id,
            p_breederdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
            -- if(json_type(json_extract(@str, CONCAT('$.breedertypeid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breedertypeid'))),
            if(json_type(json_extract(@str, CONCAT('$.shedlineid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.standardconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
			if(json_type(json_extract(@str, CONCAT('$.breederitemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breederitemid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemvalue'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
         
	END WHILE;
    
    -- save daily medicine consumption
    
	SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_medicineConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_medicineConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_breederdailyconsumption_save(
        
			@p_id,
            p_breederdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
            if(json_type(json_extract(@str, CONCAT('$.shedlineid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.standardconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
			if(json_type(json_extract(@str, CONCAT('$.breederitemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breederitemid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemvalue'))),
			(SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    -- save daily vaccine consumption
    
	SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_vaccineConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_vaccineConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_breederdailyconsumption_save(
        
			@p_id,
            p_breederdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
           --  if(json_type(json_extract(@str, CONCAT('$.breedertypeid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breedertypeid'))),
            if(json_type(json_extract(@str, CONCAT('$.shedlineid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.standardconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
             if(json_type(json_extract(@str, CONCAT('$.breederitemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breederitemid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemvalue'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    
    -- save daily vitamin comsumtion
    
     SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_vitaminConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_vitaminConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_breederdailyconsumption_save(
        
			@p_id,
            p_breederdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
           -- if(json_type(json_extract(@str, CONCAT('$.breedertypeid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breedertypeid'))),
            if(json_type(json_extract(@str, CONCAT('$.shedlineid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.standardconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
            if(json_type(json_extract(@str, CONCAT('$.breederitemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breederitemid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemvalue'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederdailyconsumption_select`(
	IN p_breederdailytransactionid INT
)
BEGIN
   
   SET @warehouseid = null;
   SET @warehousebinid = null;
   
   SELECT BS.warhouseid, BS.warehousebinid INTO @warehouseid, @warehousebinid
   FROM breederdailytransaction BDT
   LEFT JOIN breedershed BS ON BDT.shedid = BS.id
   WHERE BDT.id = p_breederdailytransactionid;
   
   -- select feed consumption
   SELECT 
			BDC.id,
            BDC.breederdailytransactionid,
            BDC.consumptiontypeid,
            BDC.itemid,
            I.itemcode,
            I.itemname,
           -- R1.refname as breedertype,
            BDC.shedlineid,
            BSL.linename,
            BDC.isherbal,
            BDC.standardconsumption,
            BDC.quantity,
            BDC.breederitemid,
            R2.refname as unitname,
            I1.itemname as breederitemname,
			BDC.itemvalue,
            BDC.companyid,
            fnc_consumptionlivestock(BDC.itemid, @warehouseid,@warehousebinid, BDC.companyid) as instock,
            fnc_consumptionlivestock(BDC.itemid, @warehouseid,@warehousebinid, BDC.companyid) as instockforref
            -- fnc_consumptionlivestock(BDC.itemid, @warehouseid, BDC.companyid) as instockforref
	
    FROM 
		breederdailyconsumption BDC
        LEFT JOIN item I On BDC.itemid = I.id
        LEFT JOIN item I1 On BDC.breederitemid = I1.id
       -- LEFT JOIN `reference` R1 ON BDC.breedertypeid = R1.id
        LEFT JOIN breedershedline BSL ON BDC.shedlineid = BSL.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		breederdailytransactionid = p_breederdailytransactionid AND
        consumptiontypeid = 861;
        
	
    -- select medicine consumption
   SELECT 
			BDC.id,
            BDC.breederdailytransactionid,
            BDC.consumptiontypeid,
            BDC.itemid,
            I.itemcode,
            I.itemname,
            BDC.breederitemid,
            I1.itemname as breederitemname,
          --   R1.refname as breedertype,
            BDC.shedlineid,
            BSL.linename,
            BDC.isherbal,
            BDC.standardconsumption,
            BDC.quantity,
            R2.refname as unitname,
			BDC.itemvalue,
            BDC.companyid,
             fnc_consumptionlivestock(BDC.itemid, @warehouseid,@warehousebinid, BDC.companyid) as instock,
            fnc_consumptionlivestock(BDC.itemid, @warehouseid,@warehousebinid, BDC.companyid) as instockforref
            -- fnc_consumptionlivestock(BDC.itemid, @warehouseid, BDC.companyid) as instock,
           --  fnc_consumptionlivestock(BDC.itemid, @warehouseid, BDC.companyid) as instockforref
	
    FROM 
		breederdailyconsumption BDC
        LEFT JOIN item I On BDC.itemid = I.id
       -- LEFT JOIN `reference`R1 ON BDC.breedertypeid = R1.id
        LEFT JOIN breedershedline BSL ON BDC.shedlineid = BSL.id
		LEFT JOIN item I1 On BDC.breederitemid = I1.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		breederdailytransactionid = p_breederdailytransactionid AND
        consumptiontypeid = 862;
        
	-- select vaccine consumption
   SELECT 
			BDC.id,
            BDC.breederdailytransactionid,
            BDC.consumptiontypeid,
            BDC.itemid,
            I.itemcode,
            I.itemname,
            -- R1.refname as breedertype,
            BDC.shedlineid,
            BSL.linename,
            BDC.isherbal,
            BDC.standardconsumption,
            BDC.quantity,
            R2.refname as unitname,
            BDC.breederitemid,
            I1.itemname as breederitemname,
			BDC.itemvalue,
            BDC.companyid,
             fnc_consumptionlivestock(BDC.itemid, @warehouseid,@warehousebinid, BDC.companyid) as instock,
            fnc_consumptionlivestock(BDC.itemid, @warehouseid,@warehousebinid, BDC.companyid) as instockforref
           --  fnc_consumptionlivestock(BDC.itemid, @warehouseid, BDC.companyid) as instock,
           --  fnc_consumptionlivestock(BDC.itemid, @warehouseid, BDC.companyid) as instockforref
  
  FROM 
		breederdailyconsumption BDC
        LEFT JOIN item I On BDC.itemid = I.id
        -- LEFT JOIN `reference` R1 ON BDC.breedertypeid = R1.id
        LEFT JOIN breedershedline BSL ON BDC.shedlineid = BSL.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
		LEFT JOIN item I1 On BDC.breederitemid = I1.id
        
	WHERE
		breederdailytransactionid = p_breederdailytransactionid AND
        consumptiontypeid = 863;
        
	-- select vitamin consumption
   SELECT 
			BDC.id,
            BDC.breederdailytransactionid,
            BDC.consumptiontypeid,
            BDC.itemid,
            I.itemcode,
            I.itemname,
           -- R1.refname as breedertype,
            BDC.shedlineid,
            BSL.linename,
            BDC.isherbal,
            BDC.breederitemid,
            I1.itemname as breederitemname,
            BDC.standardconsumption,
            BDC.quantity,
            R2.refname as unitname,
			BDC.itemvalue,
            BDC.companyid,
             fnc_consumptionlivestock(BDC.itemid, @warehouseid,@warehousebinid, BDC.companyid) as instock,
            fnc_consumptionlivestock(BDC.itemid, @warehouseid,@warehousebinid, BDC.companyid) as instockforref
            -- fnc_consumptionlivestock(BDC.itemid, @warehouseid, BDC.companyid) as instock,
           --  fnc_consumptionlivestock(BDC.itemid, @warehouseid, BDC.companyid) as instockforref
	
    FROM 
		breederdailyconsumption BDC
        LEFT JOIN item I On BDC.itemid = I.id
       --  LEFT JOIN `reference` R1 ON BDC.breedertypeid = R1.id
        LEFT JOIN breedershedline BSL ON BDC.shedlineid = BSL.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
		LEFT JOIN item I1 On BDC.breederitemid = I1.id
        
	WHERE
		breederdailytransactionid = p_breederdailytransactionid AND
        consumptiontypeid = 864;
            
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederdailymortality_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN
    DELETE FROM breederdailymortality WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'breederdailymortality', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederdailymortality_save`(
	IN p_id INT,
    IN p_breederdailytransactionid INT,
    IN p_itemid INT,
    IN p_shedlineid INT,
    IN p_avgweight DECIMAL(9,3),
    IN p_totalmortality INT,
    IN p_mortalityreasonid INT,
    IN p_totalculls INT,
    IN p_cullsreasonid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederdailymortality
				(breederdailytransactionid, 
				 itemid, 
                 shedlineid, 
                 avgweight, 
                 totalmortality, 
                 mortalityreasonid, 
                 totalculls, 
                 cullsreasonid,
                 companyid)
			VALUES 
				(p_breederdailytransactionid, 
                 p_itemid, 
                 p_shedlineid, 
                 p_avgweight, 
                 p_totalmortality, 
                 p_mortalityreasonid,
                 p_totalculls, 
                 p_cullsreasonid,
                 p_companyid);
	  
      SET @action = 'INSERT';
	
    ELSE
    
		UPDATE  breederdailymortality
				SET breederdailytransactionid = p_breederdailytransactionid, 
                itemid = p_itemid,
                shedlineid = p_shedlineid, 
                avgweight = p_avgweight,
                totalmortality = p_totalmortality,
                mortalityreasonid = p_mortalityreasonid,
                totalculls = p_totalculls,
                cullsreasonid = p_cullsreasonid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederdailymortality', out_id, @action, p_userid);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederdailyotherdetails_save`(
	IN p_id INT,
    IN p_breederdailytransactionid INT,
    IN p_lighton VARCHAR(30),
    IN p_lightoff VARCHAR(30),
    IN p_duration DECIMAL(9,2),
    IN p_temperature DECIMAL(9,3),
    IN p_humidity DECIMAL(9,3),
    IN p_waterconsumption DECIMAL(9,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
     
     
     -- SET p_lighton = TIME(STR_TO_DATE(p_lighton, '%h:%i %p' ));
	 -- SET p_lightoff = TIME(STR_TO_DATE(p_lightoff, '%h:%i %p' ));
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederdailyotherdetail
				(breederdailytransactionid, 
				 lighton, 
                 lightoff, 
                 duration, 
                 temperature, 
                 humidity, 
                 waterconsumption, 
                 companyid)
			VALUES 
				(p_breederdailytransactionid, 
				 p_lighton,
                 p_lightoff,
                 p_duration, 
                 p_temperature, 
                 p_humidity, 
                 p_waterconsumption,
                 p_companyid);
	  
      SET @action = 'INSERT';
	
    ELSE
    
		UPDATE  breederdailyotherdetail
				SET breederdailytransactionid = p_breederdailytransactionid, 
                lighton = p_lighton,
                lightoff = p_lightoff, 
                duration = p_duration,
                temperature = p_temperature,
                humidity = p_humidity,
                waterconsumption = p_waterconsumption,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederdailyotherdetails', out_id, @action, p_userid);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederdailytransactionlist_search`(
	IN p_locationid INT,
    IN p_breederbatchid INT,
    IN p_shed INT,
    IN p_from_date date,
	IN p_to_date date
)
BEGIN
    
    SELECT
			BT.id,
            BT.shedid,
            BS.shedname,
            BT.breederbatchid,
            BB.batchname,
            DATE_FORMAT( BT.transactiondate,'%d/%m/%Y') as transactiondate,
            DATE_FORMAT( BT.placementdate,'%d/%m/%Y') as placementdate,
            DATEDIFF(BT.transactiondate, BT.placementdate) as daydiff,
            CONCAT(FLOOR((DATEDIFF(BT.transactiondate, BT.placementdate) + 1) % 7), " day(s)") as ageindays,
            CONCAT(FLOOR((DATEDIFF(BT.transactiondate, BT.placementdate) + 1) / 7), " week(s)") as ageinweeks,
            R.refname as `status`
		
    FROM
		breederdailytransaction BT
		LEFT JOIN breedershed BS ON BT.shedid = BS.id
        LEFT JOIN breederbatch BB ON BT.breederbatchid = BB.id
        LEFT JOIN `reference` R ON BT.statusid = R.id
    
	WHERE
		BT.locationid = p_locationid AND
        BT.breederbatchid = p_breederbatchid AND
        BT.shedid = p_shed AND
        (BT.transactiondate BETWEEN p_from_date AND p_to_date)
        ORDER BY BT.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederdailytransaction_bybreederbatchid`(
	IN p_breederbatchid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	
SET @maleitemid = NULL;
SET @femaleitemid = NULL;
SET @malemortality = 0;
SET @femalemortality = 0;
SET @maleculls = 0;
SET @femaleculls = 0;
SELECT  
			defaultfemalechickid, defaultmalechickid INTO @femaleitemid, @maleitemid
			
		FROM 
			breedersetting LIMIT 1;
            
            SELECT 
			
				CASE WHEN itemid = @maleitemid THEN @malemortality:= totalmortality ELSE NULL END as malemortality,
				CASE WHEN itemid = @femaleitemid THEN @femalemortality:= totalmortality ELSE NULL END as femalemortality
                
				FROM( SELECT
					  itemid, SUM(totalmortality) as totalmortality   
            
					  FROM breederdailytransaction BDT
					  LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id
    
					  WHERE breederbatchid = p_breederbatchid
    
				GROUP BY itemid) as totalmortality;
                
                
                SELECT 
			
				CASE WHEN itemid = @maleitemid THEN @maleculls:= totalculls ELSE NULL END as maleculls,
				CASE WHEN itemid = @femaleitemid THEN @femaleculls:= totalculls ELSE NULL END as femaleculls
                
				FROM( SELECT
					  itemid, SUM(totalculls) as totalculls    
            
					  FROM breederdailytransaction BDT
					  LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id
    
					  WHERE breederbatchid = p_breederbatchid
    
				GROUP BY itemid) as totalculls;
    
    SELECT 
			 IFNULL(@malemortality,0) AS malemortality,
			 IFNULL(@maleculls,0) AS maleculls,
             IFNULL(@femalemortality,0) AS femalemortality,
			 IFNULL(@femaleculls,0) AS femaleculls;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederdailytransaction_issueconsumeditems`(
  IN p_dailytransactionid INT,
  IN p_outid INT
)
BEGIN
	DECLARE p_itemid INT;
	DECLARE p_itemname VARCHAR(200);
	DECLARE p_itemunitid INT;
	DECLARE p_unitcost DECIMAL(30,6);
	DECLARE p_totalmortality INT;
	DECLARE p_totalculls INT;
    DECLARE p_quantity DECIMAL(20,3);
    DECLARE p_companyid INT;
    DECLARE p_userid INT;
    DECLARE p_breederbatchid INT;
    DECLARE p_shedwarehousebinid INT;
    DECLARE p_warehouseid INT;
    DECLARE p_mortalityid INT;
    DECLARE p_grpoid INT;
    DECLARE p_consumptionid INT;
    DECLARE p_itemvalue DECIMAL(30,6);
	DECLARE p_itembatch VARCHAR(300);
    DECLARE p_shedid INT;
    DECLARE x INT;
	DECLARE i INT;
    DECLARE j INT;
    DECLARE material_itemid INT;
    DECLARE material_itembatch VARCHAR(300);
    DECLARE material_quantity INT;
    DECLARE p_transactiondate DATE;
	SET @row_number = 0;
    SET @row_number1 = 0;
	SET @reccount = 0;
    SET @consumptionreccount = 0;
	SET x = 1;
    SET i = 1;
    SET j = 1;
    SET @materialissue_outid = null;
    SET @materialissuedetail_outid = null;
    SET @movement_outid = null;
    SET @consumptionissue_outid = null;
    SET @biredprice = null;
    SET @livebiredprice = null;
    SET @materialtransfer_outid = null;
     SET @birdcoststd = null;
     SET @birdcostnonprodbird = null;
	 SET @@sql_mode = ' ';


    
    SELECT BDT.breederbatchid, BS.warehousebinid, BDT.companyid, BDT.approvedby, BS.warhouseid, BDT.transactiondate,BDT.shedid, BBP.grpono
    INTO p_breederbatchid, p_shedwarehousebinid, p_companyid, p_userid, p_warehouseid, p_transactiondate,p_shedid,p_grpoid
    
    FROM breederdailytransaction BDT
    LEFT JOIN breedershed BS ON BDT.shedid = BS.id
    LEFT JOIN breederbatchplacement BBP ON BDT.breederbatchid = BBP.breederbatchid
    
    WHERE BDT.id = p_dailytransactionid;
   
   
	-- get warehouse for default culls
    select BS.defaultcullswarehouseid,WB.id,BS.birdcoststd,BS.birdcostnonprodbird INTO @tocullswarehouseid,@tocullswarehousebinid,@birdcoststd,@birdcostnonprodbird
		FROM breedersetting BS 
		LEFT JOIN warehousebin WB ON WB.warehouseid = BS.defaultcullswarehouseid AND WB.isdefault = 1
		WHERE BS.companyid = p_companyid limit 1;
       -- set live bird price 
        SELECT fnc_breederbatchwise_bird_cost(p_breederbatchid,p_transactiondate,p_companyid) INTO @livebiredprice;
	-- save issue parent record
	 CALL spc_materialissue_save(
			null, 
			p_transactiondate, 
			381, 
			p_breederbatchid, 
			362, 
			'breeder daily culls and mortality', 
			p_userid, 
            p_warehouseid,
            p_shedwarehousebinid,
            null, 
			null, 
            p_companyid, 
            p_userid, 
            @materialissue_outid
		);
        
            -- inventory transfer for culls
       /* call `spc_materialtransfer_save`(
			NULL, 501,501,582,p_transactiondate, p_transactiondate,'Breeder daily culls',
			p_warehouseid,p_shedwarehousebinid,623,
			p_breederbatchid,p_breederbatchid,NULL,p_companyid,p_userid,
			@materialtransfer_outid
		);*/
 
	UPDATE breederdailytransaction SET issueid = @materialissue_outid
	WHERE id = p_dailytransactionid;
        
	-- select mortality and culls detail for given daily transaction and issue them
		
   SET @reccount = 0;
   SET @reccount1 = 0;
   SET x = 1;
   SET @row_number = 0;
 
   


	DROP TEMPORARY TABLE IF EXISTS tempmortality;
	CREATE TEMPORARY TABLE tempmortality
	SELECT 
			BDM.id,
			BDM.itemid, 
			I.itemname, 
			I.itemunitid,
			-- @biredprice as unitcost,
			totalmortality, 
			totalculls, 
			(@row_number := @row_number + 1) as `rank`
            
		FROM breederdailymortality BDM
		LEFT JOIN item I ON BDM.itemid = I.id
		WHERE BDM.breederdailytransactionid = p_dailytransactionid;
	 
		SELECT COUNT(*) INTO @reccount1 FROM tempmortality;
    
	WHILE x  <= @reccount1 DO
			
		SET p_mortalityid = null;
		SET p_itemid = null;
		SET p_itemname = null;
		SET p_itemunitid = null;
		SET p_totalmortality = null;
		SET p_quantity = null;
        SET p_totalculls = null;
        SET j = 0;
		SET @reccount = 0;
   
		SELECT id, itemid, itemname, itemunitid, totalmortality, totalculls,(totalmortality+totalculls)
            INTO p_mortalityid, p_itemid, p_itemname, p_itemunitid, p_totalmortality, p_totalculls,p_quantity
            FROM tempmortality WHERE `rank` = x;
           --  SET p_quantity = (p_totalmortality + p_totalculls);
         select p_mortalityid, p_itemid, p_itemname, p_itemunitid, p_totalmortality, p_totalculls,p_quantity;
	
        -- select itembatch and quantity from material movement for current item
        DROP TEMPORARY TABLE IF EXISTS mortempitembatch;
        
		CREATE TEMPORARY TABLE mortempitembatch
        
        SELECT itemid, itembatch, stockin, transactiondate,
        fnc_itembatchstockout(itemid, IFNULL(itembatch,''), p_warehouseid, p_shedwarehousebinid) as stockout,
        (@row_number1 := @row_number1 + 1) as recordrank 
       FROM(
    
			SELECT itemid, itembatch,SUM(quantity) as stockin,transactiondate
			FROM materialmovement
			WHERE 
				itemid = p_itemid AND
				companyid = p_companyid AND
				towarehouseid = p_warehouseid AND
                towarehousebinid = p_shedwarehousebinid AND
				transactiontypeid in (681,682,684,685) AND itembatch is not null
				GROUP BY itemid, itembatch
               
			) stocktable order by transactiondate asc; 
      
        
		SELECT COUNT(*) INTO @reccount FROM  mortempitembatch;
        
        WHILE j < @reccount DO
        
			SET @issuequantity = 0;
			
			SELECT itemid, itembatch, (stockin - stockout) as quantity
			INTO  material_itemid, material_itembatch, material_quantity
			FROM  mortempitembatch where recordrank = j+1 ;
         --  WHERE recordrank = i;
			
             IF (p_quantity > 0 ) THEN
				
                IF(material_quantity > 0) THEN
					IF (material_quantity >= p_quantity) THEN
						SET @issuequantity = p_quantity;
						SET p_quantity = 0;
					ELSE 
                    
						SET @issuequantity = material_quantity;
                        SET p_quantity = p_quantity - material_quantity;
                    
					-- ELSE
						-- SET @issuequantity = p_quantity - material_quantity;
					END IF;
                    
				END IF;
                 if (@issuequantity >0) then
                  SELECT fun_purchse_biredcost(p_breederbatchid,p_companyid,p_transactiondate) INTO @biredprice;
				  CALL spc_materialissuedetail_save(null, @materialissue_outid, p_itemid, p_itemname, @issuequantity, @biredprice,(@issuequantity*@biredprice), p_itemunitid, material_itembatch, p_companyid, p_userid, @materialissuedetail_outid);
				  CALL spc_materialmovement_save(null, p_itemid, material_itembatch, 683, @materialissuedetail_outid, p_transactiondate, @issuequantity, p_warehouseid, p_shedwarehousebinid, null, null,(@issuequantity*@biredprice), p_companyid, p_userid,@movement_outid);
				  CALL spc_breeder_birdcost_save(null,p_itemid,@issuequantity,p_transactiondate,@livebiredprice,(@issuequantity * @livebiredprice),material_itembatch,p_breederbatchid,p_shedid,p_dailytransactionid,p_companyid);
                  UPDATE breederdailymortality SET issuedetailid = @materialissuedetail_outid
				  WHERE id = p_mortalityid;
                  
              /*  SET @out_transferdetailid = NULL;
				CALL spc_materialtransferdetail_save(
					NULL, @materialtransfer_outid, @tocullswarehouseid,@tocullswarehousebinid,p_itemid, (SELECT itemname FROM item WHERE id = p_itemid),
					0, p_totalculls,(SELECT refname FROM `reference` WHERE id = p_itemid),material_itembatch,
					p_userid, p_companyid, @out_transferdetailid
				 );*/
                 
              
              END IF;
            
            END IF;
            
        	SET  j = j + 1; 
	    END WHILE;
       
       DROP TEMPORARY TABLE mortempitembatch;
            
			SET  x = x + 1; 
	END WHILE;
	 
	DROP TEMPORARY TABLE tempmortality;

        
	
   -- select daily consumption for given daily transaction and issue them itembatch wise
   
   SET @reccount = 0;
   SET x = 1;
   SET @row_number = 0;
 
   
	DROP TEMPORARY TABLE IF EXISTS tempconsumption;
        
	CREATE TEMPORARY TABLE tempconsumption
	SELECT 
		BDC.id,
		BDC.itemid, 
		I.itemname, 
		I.itemunitid,
		SUM(itemvalue) as itemvalue,
		SUM(quantity) as quantity, 
		(@row_number := @row_number + 1) as `rank`
	FROM breederdailyconsumption BDC
	LEFT JOIN item I ON BDC.itemid = I.id
	WHERE BDC.breederdailytransactionid = p_dailytransactionid group by BDC.itemid;
	 
	SELECT COUNT(*) INTO @consumptionreccount FROM tempconsumption;
    
    
	WHILE x  <= @consumptionreccount DO
			
		SET p_consumptionid = null;
		SET p_itemid = null;
		SET p_itemname = null;
		SET p_itemunitid = null;
		SET p_unitcost = null;
		SET p_quantity = null;
        SET p_itemvalue = null;
        SET i = 0;
		SET @reccount = 0;
         SET @row_number1 = 0;
   
		SELECT id, itemid, itemname, itemunitid, quantity,itemvalue
		INTO  p_consumptionid, p_itemid, p_itemname, p_itemunitid, p_quantity,p_itemvalue
		FROM tempconsumption WHERE `rank` = x;
         
	
        -- select itembatch and quantity from material movement for current item
        DROP TEMPORARY TABLE IF EXISTS tempitembatch;
        
		CREATE TEMPORARY TABLE tempitembatch
        
        SELECT itemid, itembatch, stockin,unitcost, transactiondate,
       fnc_itembatchstockout(itemid, IFNULL(itembatch,''), p_warehouseid, p_shedwarehousebinid) as stockout,
        (@row_number1 := @row_number1 + 1) as recordrank2
       FROM(
    
			SELECT itemid, itembatch,SUM(quantity) as stockin,(SUM(itemvalue)/SUM(quantity))as unitcost,transactiondate
			FROM materialmovement
			WHERE 
				 
				itemid = p_itemid AND
				companyid = p_companyid AND
				towarehouseid = p_warehouseid AND
                towarehousebinid = p_shedwarehousebinid AND
				transactiontypeid in (681,682,684,685) AND itembatch is not null
				GROUP BY itemid, itembatch
               
			) stocktable order by transactiondate asc; 
      
        
		SELECT COUNT(*) INTO @reccount FROM  tempitembatch;
        SELECT * FROM tempitembatch;
        WHILE i<@reccount DO
			SET @issuequantity = 0;
			SET @p_unitcost = null;
			SELECT itemid, itembatch, (stockin - stockout) as quantity,unitcost
			 INTO  material_itemid, material_itembatch, material_quantity,p_unitcost
			FROM  tempitembatch where recordrank2 = i+1 limit 1;
            
          --  SELECT material_itemid, material_itembatch, material_quantity,@p_unitcost;
           
         --  WHERE recordrank = i;
			
             IF (p_quantity > 0 ) THEN
				
                IF(material_quantity > 0) THEN
					IF (material_quantity >= p_quantity) THEN
						SET @issuequantity = p_quantity;
						SET p_quantity = 0;
					ELSE 
                    
						SET @issuequantity = material_quantity;
                        SET p_quantity = p_quantity - material_quantity;
                    
					-- ELSE
						-- SET @issuequantity = p_quantity - material_quantity;
					END IF;
                    
				END IF;
                select @issuequantity;
				   if (@issuequantity >0) then
					  CALL spc_materialissuedetail_save(null, @materialissue_outid, p_itemid, p_itemname, @issuequantity, p_unitcost,(@issuequantity*p_unitcost), p_itemunitid, material_itembatch, p_companyid, p_userid, @materialissuedetail_outid);
					  CALL spc_materialmovement_save(null, p_itemid, material_itembatch, 683, @materialissuedetail_outid, p_transactiondate, @issuequantity, p_warehouseid, p_shedwarehousebinid, null, null,(@issuequantity*p_unitcost), p_companyid, p_userid,@movement_outid);
					  CALL spc_breeder_birdcost_save(null,p_itemid,@issuequantity,p_transactiondate,p_unitcost,(@issuequantity * p_unitcost),material_itembatch,p_breederbatchid,p_shedid,p_dailytransactionid,p_companyid);
					 
					--  UPDATE breederdailyconsumption SET issuedetailid = @materialissuedetail_outid
					--  WHERE id = p_consumptionid;

				  END IF;
            
            END IF;
            
        	SET  i = i + 1; 
	    END WHILE;
       
       DROP TEMPORARY TABLE tempitembatch;
			SET  x = x + 1; 
	END WHILE;
	 
	DROP TEMPORARY TABLE tempconsumption;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederdailytransaction_je_search`(
	IN p_id INT
)
BEGIN

	SELECT JE.*,
		   B.bankname,
           CB.branchname,
           AD.dimensionname,
           P.partyname
    
    FROM journalentry JE
    LEFT JOIN bank B ON B.id = JE.bankid
    LEFT JOIN commonbranch CB ON CB.id = JE.branchid
    LEFT JOIN party P ON P.id = JE.partyid
    LEFT JOIN accounts_dimension AD ON AD.id = JE.dimensionid
    WHERE JE.moduleid = 721
    AND JE.narration = "Breeder daily transaction after 24 week JE"
    AND JE.transactionid = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederdailytransaction_save`(
	IN p_id INT,
    IN p_locationid INT,
    IN p_shedid INT,
    IN p_breederbatchid INT,
    IN p_createdby INT,
    IN p_transactiondate DATE,
    IN p_approvedby INT,
    IN p_approvaldate DATE,
    IN p_statusid INT,
    IN p_remark VARCHAR(500),
    IN p_warehouseid INT,
    IN p_placementdate DATE,
    IN p_issueid INT,
    IN p_userid INT,
    IN p_companyid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;
     
	IF EXISTS(
		SELECT id from breederdailytransaction where breederbatchid = p_breederbatchid AND transactiondate = p_transactiondate AND shedid = p_shedid
				AND (
						(NULLIF(p_id, 0) IS NULL)
						-- OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id)
                    )
            
		) THEN BEGIN
        
		SELECT -1 INTO out_id;
	
	END;
            
    ELSEIF EXISTS(
		 SELECT id from breederdailytransaction where statusid = 821 AND locationid = p_locationid AND breederbatchid = p_breederbatchid AND shedid = p_shedid
			 AND (
				 (NULLIF(p_id, 0) IS NULL)
				    -- OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id)
				 )
            
		 ) THEN  BEGIN
        
	 SELECT -2 INTO out_id;
	
	 END;
    
    ELSE
    
    BEGIN
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
		
        IF (p_statusid = 822) THEN
			SET p_approvaldate = NOW();
        END IF;
        
        INSERT INTO breederdailytransaction 
				(shedid, 
				 breederbatchid, 
                 createdby, 
                 transactiondate, 
                 approvedby, 
                 approvaldate, 
                 statusid, 
                 remark, 
                 placementdate,
                 issueid,
                 companyid, 
                 locationid)
			VALUES 
				(p_shedid, 
                 p_breederbatchid, 
                 p_createdby, 
                 p_transactiondate, 
                 p_approvedby, 
                 p_approvaldate, 
                 p_statusid,
                 p_remark, 
                 p_placementdate,
                 @materialissue_outid,
                 p_companyid,
                 p_locationid);
	  
      SET @action = 'INSERT';
        
    ELSE
    
		UPDATE  breederdailytransaction
				SET shedid = p_shedid, 
                breederbatchid = p_breederbatchid,
                transactiondate = p_transactiondate,
                approvedby = p_approvedby,
                approvaldate = p_approvaldate,
                statusid = p_statusid,
                remark = p_remark,
                placementdate = p_placementdate,
                issueid = p_issueid,
                companyid = p_companyid,
                locationid = p_locationid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
             
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
     CALL spc_commonlog_save(p_companyid, 'breederdailytransaction', out_id, @action, p_userid);
  
  END;
  
	-- update livebatchdate of batchdetail table
    UPDATE batchdetail SET livebatchdate = p_transactiondate WHERE breederbatchid = p_breederbatchid;
   
   END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederdailytransaction_search`(
	IN p_companyid INT
)
BEGIN
    
    SELECT
			BT.id,
            BT.shedid,
            BS.shedname,
            BT.breederbatchid,
            BB.batchname,
            DATE_FORMAT( BT.transactiondate,'%d/%m/%Y') as transactiondate,
            R.refname as `status`
		
    FROM
		breederdailytransaction BT
		LEFT JOIN breedershed BS ON BT.shedid = BS.id
        LEFT JOIN breederbatch BB ON BT.breederbatchid = BB.id
        LEFT JOIN `reference` R ON BT.statusid = R.id
    
	WHERE
		BT.companyid = p_companyid
        ORDER BY BT.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederdailytransaction_select`(
	IN p_id INT
)
BEGIN
    
    -- select breeder daily transaction details
    SELECT
		  BDT.id,
          shedid,
          BS.warhouseid as warehouseid,
          BS.warehousebinid,
          BS.shedname,
          BDT.breederbatchid,
          L.locationcode,
          L.locationname,
          BB.batchname,
		  DATE_FORMAT(BDT.transactiondate,'%d/%m/%Y') as transactiondate,
		  BDT.statusid,
          R.refname as `status`,
          U.username as createdbyname,
          BDT.remark,
          BDT.companyid,
          BDT.createdby,
		  BDT.createdby as userid,
          BDT.issueid,
		  DATE_FORMAT(BDT.placementdate,'%d/%m/%Y') as placementdate,
          BF.phasename as phasestatusname,
          BB.locationid
          
    FROM
		breederdailytransaction BDT
		LEFT JOIN breedershed BS ON BDT.shedid = BS.id
        LEFT JOIN breederbatch BB ON BDT.breederbatchid = BB.id
        LEFT JOIN `reference` R ON BDT.statusid = R.id
        LEFT JOIN `user1` U ON BDT.createdby = U.id
        LEFT JOIN location L ON BB.locationid = L.id
        LEFT JOIN breederbatchplacement BBP ON BDT.breederbatchid = BBP.breederbatchid
        LEFT JOIN breederphase BF on BBP.phasestatusid = BF.id

	WHERE
		 BDT.id = p_id;
         
         
	-- select breeder daily transaction other details
    
    SELECT
			id,
            breederdailytransactionid,
            lighton,
            lightoff,
            duration,
            temperature,
            humidity,
            waterconsumption,
            companyid,
            (SELECT createdby FROM breederdailytransaction WHERE id = p_id) as userid 
    
    FROM
		breederdailyotherdetail 
        
	WHERE
		breederdailytransactionid = p_id;
        
	
	-- select breeder daily culls-mortality details
  
    SELECT
			BDM.id,
            BDM.breederdailytransactionid,
            BDM.itemid,
            I.itemcode,
            I.itemname,
            BDM.shedlineid,
            BSL.linename,
            BDM.avgweight,
            BDM.totalmortality,
            BDM.mortalityreasonid,
            BR1.reason as mortalityreason,
            BDM.totalculls,
            BDM.cullsreasonid,
            BR2.reason as cullsreason,
            BDM.companyid,
           -- fnc_linewise_chickslivestock(BDM.shedlineid, BDM.itemid, BDM.breederdailytransactionid) as instock,
           fnc_linewise_chickslivestock(BDM.shedlineid, BDM.itemid, BDM.breederdailytransactionid) as instock,
           
          -- fnc_linewise_chicksplacedtock(BDM.shedlineid, BDM.itemid, BDM.breederdailytransactionid) as instockforref,
          fnc_linewise_chickslivestock(BDM.shedlineid, BDM.itemid, BDM.breederdailytransactionid) as instockforref,
            BDM.issuedetailid
            
	FROM breederdailymortality BDM
    LEFT JOIN breederreasons BR1 ON BDM.mortalityreasonid = BR1.id
    LEFT JOIN breederreasons BR2 ON BDM.cullsreasonid = BR2.id
    LEFT JOIN item I ON BDM.itemid = I.id
    LEFT JOIN breedershedline BSL ON BDM.shedlineid = BSL.id
    
    WHERE
		BDM.breederdailytransactionid = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederdailytransaction_updatebatchbalance`(
	IN p_breederdailytransactionid INT(11),
    OUT out_id INT
)
BEGIN
    
    DECLARE p_breederbatchid INT;
    DECLARE p_shedid INT;
    DECLARE p_shedlineid INT;
	DECLARE p_itemid INT;
	DECLARE p_totalmortality INT;
	DECLARE p_totalculls INT;
    DECLARE p_quantity INT;
	DECLARE x INT;
	SET @reccount = 0;
    SET @row_number = 0;
	SET x = 1;
    
    
	 DROP TEMPORARY TABLE IF EXISTS tempdailymortality;
        
		CREATE TEMPORARY TABLE tempdailymortality
        
		SELECT 
			BDT.breederbatchid,
            BDT.shedid,
            BDM.shedlineid,
			BDM.itemid, 
			totalmortality, 
			totalculls, 
			(@row_number := @row_number + 1) as `rank`
            
		FROM breederdailymortality BDM
		LEFT JOIN item I ON BDM.itemid = I.id
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
		WHERE BDM.breederdailytransactionid = p_breederdailytransactionid;
	 
		SELECT COUNT(*) INTO @reccount FROM tempdailymortality;
	 
		WHILE x  <= @reccount DO
    
			SET p_breederbatchid = null;
            SET p_shedid = null;
            SET p_shedlineid = null;
            SET p_itemid = null;
            SET p_totalmortality = null;
            SET p_totalculls = null;
            SET p_quantity = 0;
            
			SELECT breederbatchid, shedid, shedlineid, itemid, totalmortality, totalculls
            INTO p_breederbatchid, p_shedid, p_shedlineid, p_itemid, p_totalmortality, p_totalculls
            FROM tempdailymortality WHERE `rank` = x;
            
            SET p_quantity = (p_totalmortality + p_totalculls);
		
			UPDATE breederbatchbalance 
            SET 
				quantity = (quantity - p_quantity),
                updateddate = NOW()
                
            WHERE 
                breederbatchid = p_breederbatchid AND
                breedershedid = p_shedid AND
                breedershedpenid = p_shedlineid AND
                itemid = p_itemid AND
                quantity != 0;
                
			IF((SELECT SUM(quantity) FROM breederbatchbalance WHERE breederbatchid = p_breederbatchid AND
                breedershedid = p_shedid AND
                itemid = p_itemid) = 0) THEN
                
                UPDATE breedershed SET statusid = 11 WHERE id = p_shedid;
            
            END IF;
            
            SELECT LAST_INSERT_ID() INTO out_id; 
            
			SET  x = x + 1; 
            
		END WHILE;
	 
		DROP TEMPORARY TABLE tempdailymortality;

    
    
   -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederbatchbalance', out_id, 'update', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederfeedstandarddetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederfeedstandarddetail WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederfeedstandarddetail_feedconsumed_search`(
 IN p_week INT(11),
 IN p_itemid INT(11),
 IN p_breederitemid INT(11),
 IN p_companyid INT(11)
 )
BEGIN 

	SELECT BFS.id,
           BFSD.feedconsumed
           
	FROM breederfeedstandard BFS
    
    LEFT JOIN breederfeedstandarddetail BFSD ON BFSD.breederfeedstandardid =  BFS.id
  
    WHERE BFSD.weeknumber = p_week
    AND BFSD.itemid = p_itemid AND
    BFS.breeditemid = p_breederitemid AND
    BFS.companyid = p_companyid ;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederfeedstandarddetail_save`(
    IN p_id INT,
    IN p_breederfeedstandardid INT(11),
    IN p_weeknumber TINYINT(4),
    IN p_itemid INT(11),
    IN p_feedconsumed DECIMAL(9,3),
	IN p_cumulativefeed DECIMAL(9,3),
    IN p_weeklybodyweight DECIMAL(9,3),
	IN p_weeklygain DECIMAL(9,3),
    IN p_phaseid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederfeedstandarddetail 
				(id, breederfeedstandardid, weeknumber, itemid, feedconsumed, cumulativefeed, weeklybodyweight, weeklygain, phaseid, companyid)
			VALUES 
				(p_id, p_breederfeedstandardid, p_weeknumber, p_itemid, p_feedconsumed, p_cumulativefeed, p_weeklybodyweight, p_weeklygain, p_phaseid, p_companyid);
		
        SET @action = 'INSERT';

	ELSE
    
		UPDATE breederfeedstandarddetail
			SET breederfeedstandardid = p_breederfeedstandardid, 
				weeknumber = p_weeknumber,
				itemid = p_itemid,
                feedconsumed = p_feedconsumed,
                cumulativefeed = p_cumulativefeed,
                weeklybodyweight = p_weeklybodyweight,
                weeklygain = p_weeklygain,
                phaseid = p_phaseid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
             SET @action = 'UPDATE';   
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	-- record log
   CALL spc_commonlog_save(p_companyid, 'breederfeedstandarddetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederfeedstandarddetail_select`(
	IN p_breederfeedstandardid INT
)
BEGIN

	SELECT
		 B.id,
         breederfeedstandardid,
         weeknumber,
		 itemid,
         feedconsumed,
         cumulativefeed,
         weeklybodyweight,
         weeklygain,
         phaseid,
         I.itemname,
         I.itemcode
        
	FROM
		breederfeedstandarddetail B
        LEFT JOIN item I ON B.itemid = I.id
        
	WHERE
		breederfeedstandardid = p_breederfeedstandardid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederfeedstandard_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederfeedstandarddetail WHERE breederfeedstandardid = p_id;
	DELETE FROM breederfeedstandard WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederfeedstandard_save`(
    IN p_id INT,
    IN p_standardname VARCHAR(200),
    IN p_breednametypeid INT(11),
    IN p_breeditemid INT(11),
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederfeedstandard 
				(id, standardname, breednametypeid, breeditemid, fromdate, todate, companyid)
			VALUES 
				(p_id, p_standardname, p_breednametypeid, p_breeditemid, p_fromdate, p_todate, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE breederfeedstandard
			SET standardname = p_standardname, 
				breednametypeid = p_breednametypeid,
                breeditemid = p_breeditemid,
                fromdate = p_fromdate,
                todate = p_todate,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'breederfeedstandard', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederfeedstandard_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 BFS.id,
         BFS.standardname,
		 BFS.breednametypeid,
         BFS.breeditemid,
         I.itemname as breeditemname,
         DATE_FORMAT(BFS.fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(BFS.todate,'%d/%m/%Y') as todate
         
	FROM
		breederfeedstandard BFS
        LEFT JOIN item I ON I.id = BFS.breeditemid
   	
	WHERE
		BFS.companyid = p_companyid
        
	ORDER BY id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederfeedstandard_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 BFS.id,
         BFS.standardname,
		 BFS.breednametypeid,
         BFS.breeditemid,
         I.itemname as breeditemname,
         DATE_FORMAT(BFS.fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(BFS.todate,'%d/%m/%Y') as todate
         
	FROM
		breederfeedstandard BFS
        LEFT JOIN item I ON I.id = BFS.breeditemid
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND BFS.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederperformanceobjective_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederperformanceobjective WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederperformanceobjective_save`(
	IN p_id INT,
    IN p_itemid INT,
    IN p_ageinweek INT,
    IN p_livability DECIMAL(8,3),
    IN p_hdinpercent DECIMAL(8,3),
    IN p_heinpercent DECIMAL(8,3),
    IN p_hhpperweek DECIMAL(8,3),
    IN p_cumhhp DECIMAL(8,3),
	IN p_hhheperweek DECIMAL(8,3),
    IN p_cumhhhe DECIMAL(8,3),
    IN p_hatchinpercent DECIMAL(8,3),
    IN p_chicksperweek DECIMAL(8,3),
    IN p_cumchicks DECIMAL(8,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederperformanceobjective
				(itemid, ageinweek , livability, hdinpercent, 
                heinpercent, hhpperweek, cumhhp, hhheperweek, hatchinpercent, 
                cumhhhe, chicksperweek, cumchicks, companyid)
			VALUES 
				(p_itemid, p_ageinweek , p_livability, p_hdinpercent, 
                p_heinpercent, p_hhpperweek, p_cumhhp, p_hhheperweek, p_hatchinpercent, 
                p_cumhhhe, p_chicksperweek, p_cumchicks, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE breederperformanceobjective
			SET 
				itemid	=	p_itemid,
                ageinweek = p_ageinweek, 
                livability = p_livability,
                hdinpercent = p_hdinpercent, 
                heinpercent = p_heinpercent,
                cumhhp = p_cumhhp,
                hhpperweek = p_hhpperweek,
                hhheperweek = p_hhheperweek,
                hatchinpercent = p_hatchinpercent,
                cumhhhe = p_cumhhhe,
                chicksperweek = p_chicksperweek,
                cumchicks =p_cumchicks,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breederperformanceobjective', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederperformanceobjective_search`(
IN p_itemid INT
)
BEGIN
	SELECT id ,
		itemid,
        ageinweek,
        livability,
        hdinpercent,
        heinpercent,
        hhpperweek,
        cumhhp,
        hhheperweek,
        cumhhhe,
        hatchinpercent,
        chicksperweek,
        cumchicks,
        suggestedfeedingram,
        fertilityinpercent
	FROM breederperformanceobjective
    WHERE
    itemid = p_itemid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederperformanceobjective_select`(
IN p_id INT
)
BEGIN
	SELECT id,
		itemid,
		ageinweek,
		livability,
        hdinpercent,
        heinpercent,
        hhpperweek,
        cumhhp,
        hhheperweek,
		cumhhhe,
        hatchinpercent,
        chicksperweek,
        cumchicks,
        suggestedfeedingram,
        fertilityinpercent
        
	
    FROM  breederperformanceobjective 
	
    WHERE 
          id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederperformance_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederperformance WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederperformance_save`(
	IN p_id INT,
    IN p_date date,
    IN p_week INT,
    IN p_totaleggspercenthw DECIMAL(8,3),
    IN p_hatcheggspercenthw DECIMAL(8,3),
    IN p_mortality DECIMAL(8,3),
    IN p_percentheweekly DECIMAL(8,3),
    IN p_totaleggshh DECIMAL(8,3),
    IN p_hatcheggshh DECIMAL(8,3),
    IN p_weeklypercenthatch DECIMAL(8,3),
    IN p_chickshh DECIMAL(8,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
    
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederperformance
				(date, week, totaleggspercenthw, hatcheggspercenthw, mortality , 
                percentheweekly, totaleggshh, hatcheggshh, 
                weeklypercenthatch, chickshh, companyid)
			VALUES 
				(p_date, p_week, p_totaleggspercenthw, p_hatcheggspercenthw, p_mortality, p_percentheweekly, 
                p_totaleggshh, p_hatcheggshh, p_weeklypercenthatch, p_chickshh,  
                p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE breederperformance
			SET 
				date	=	p_date,
				week	=	p_week,
                totaleggspercenthw = p_totaleggspercenthw,
                hatcheggspercenthw = p_hatcheggspercenthw, 
                mortality = p_mortality,
                percentheweekly = p_percentheweekly, 
                totaleggshh = p_totaleggshh,
                hatcheggshh = p_hatcheggshh,
                weeklypercenthatch = p_weeklypercenthatch,
                chickshh = p_chickshh,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breederperformance', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederperformance_search`(
IN p_companyid INT
)
BEGIN
	SELECT id ,
		week,
        date,
		totaleggspercenthw,
        hatcheggspercenthw,
        mortality,
        percentheweekly,
        totaleggshh,
        hatcheggshh,
        weeklypercenthatch,
        chickshh
        
	FROM breederperformance
    WHERE
    companyid = p_companyid
    
    ORDER BY id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederperformance_select`(
IN p_id INT
)
BEGIN
	SELECT id,
		week,
        CONVERT(date,DATE) AS date,
		totaleggspercenthw,
		hatcheggspercenthw,
        mortality,
        percentheweekly,
        totaleggshh,
        hatcheggshh,
        weeklypercenthatch,
        chickshh
        
	
    FROM  breederperformance 
	
    WHERE 
          id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederphase_byweek`(
  IN p_week INT
  )
BEGIN
 SELECT id , phasename from breederphase
  
   WHERE fromweek <= p_week
   AND toweek >= p_week;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederplacementscheduledetail_byrequestid`(
    IN p_placementscheduleid INT,
    IN p_grpono varchar(255),
    IN p_companyid INT 
    )
BEGIN
	/*SET @grpono = null;
    
	SELECT G.id into @grpono
	FROM grpo G
		INNER JOIN breederplacementschedule BPS ON BPS.id = p_placementscheduleid
		INNER JOIN purchaseorder PO ON PO.purchaserequestid = BPS.requestid
		
	WHERE
		G.purchaseorderid = PO.id;*/
        
SELECT  BPD.id as placementscheduledetailid,
		BPD.placementscheduleid,
        BPD.breedershedid,
		BS.shedname as shedname,
        BSL.linename,
        BSL.id as breedershedpenid,
        BSL.capacity as linecapacity,
		BPD.maleproposalquantity,
		BPD.femaleproposalquantity,
		BPD.remark,
        GD.itemid,
        (GD.quantity) as quantity, 
        G.id as grpono
        
	FROM 
		breederplacementscheduledetail BPD
    
       LEFT JOIN breedershed BS ON BPD.breedershedid= BS.id
       LEFT JOIN breedershedline BSL ON BSL.breedershedid = BS.id
       LEFT JOIN breederplacementschedule BPS ON BPS.id = BPD.placementscheduleid
       LEFT JOIN purchaseorder PO ON PO.purchaserequestid = BPS.requestid
       LEFT JOIN grpo G ON G.purchaseorderid = PO.id
       LEFT JOIN grpodetail GD ON GD.grpoid = G.id

	
	WHERE
		BPD.placementscheduleid = p_placementscheduleid
        AND G.id = p_grpono
        AND BPD.companyid = p_companyid;
        

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederplacementscheduledetail_save`(
	IN p_id INT(11),
	IN p_placementscheduleid INT(11),
	IN p_shedreadyid INT(11),
	IN p_breedershedid INT(11),
	IN p_capacity INT(11),
	IN p_maleproposalquantity INT(11),
	IN p_femaleproposalquantity INT(11),
	IN p_remark	varchar(200),
	IN p_companyid INT(11),
    IN p_userid INT,
	OUT out_id INT
    )
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederplacementscheduledetail 
				(placementscheduleid, shedreadyid, breedershedid, capacity, maleproposalquantity, femaleproposalquantity, remark, companyid)
			VALUES 
				(p_placementscheduleid, p_shedreadyid, p_breedershedid, p_capacity, p_maleproposalquantity, p_femaleproposalquantity, p_remark, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE breederplacementscheduledetail
			SET placementscheduleid = p_placementscheduleid,
                shedreadyid = p_shedreadyid, 
                breedershedid = p_breedershedid,
                capacity = p_capacity, 
                maleproposalquantity = p_maleproposalquantity,
                femaleproposalquantity = p_femaleproposalquantity,
                remark = p_remark,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
			
             
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    -- update breeder shed status 13 = 'scheduled'
    UPDATE breedershed BS SET statusid = 13 where BS.id = p_breedershedid;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breederplacementscheduledetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederplacementscheduledetail_search`(
	IN p_placementscheduleid INT,
    IN p_companyid INT 
    )
BEGIN
        
SELECT  BPD.id,
		BPD.placementscheduleid,
		BS.shedname as shedname,
        BPD.shedreadyid,
        BPD.breedershedid,
		L.locationname,
        BPD.capacity,
		BPD.maleproposalquantity,
		BPD.femaleproposalquantity,
		BPD.remark,
		BPD.companyid
	FROM 
		breederplacementscheduledetail BPD
    
       INNER JOIN breedershed BS ON BPD.breedershedid= BS.id
       INNER JOIN location L ON BS.locationid = L.id
	
	
	WHERE
		BPD.placementscheduleid = p_placementscheduleid
        AND BPD.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederplacementschedule_availableforbatchplacement`(
IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';
	SELECT BP.id,
		DATE_FORMAT(schedulefordate,'%d/%m/%Y') as scheduledate,
		BP.batchid,
		BP.statusid,
		BP.createdby,
        UR.fullname AS schedulername,
        REF.refname AS statusname,
        BPD.breedershedid,
		BS.locationid,
        L.locationcode,
        L.locationname,
		BP.companyid,
        BP.requestid
	FROM 
		breederplacementschedule BP
        LEFT JOIN `user` UR on BP.createdby = UR.id
        LEFT JOIN `reference` REF ON BP.statusid = REF.id
		LEFT JOIN breederplacementscheduledetail BPD ON BP.id = BPD.placementscheduleid
		INNER JOIN breedershed BS ON BPD.breedershedid = BS.id
		INNER JOIN location L ON BS.locationid = L.id
        LEFT JOIN breederbatchplacement BBP ON BBP.placementscheduleid = BP.id
		 LEFT JOIN purchaseorder PO ON PO.purchaserequestid = BP.requestid
		LEFT JOIN grpo GR ON GR.purchaseorderid = PO.id
	WHERE
		BP.companyid = p_companyid
        AND BBP.id is null 
        AND BP.statusid = 702 -- Approved
	  --  AND GR.id IS NOT NULL
	GROUP BY BP.id
    ORDER BY BP.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederplacementschedule_delete`(
	IN p_id INT
)
BEGIN

	DELETE FROM breederplacementschedule WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederplacementschedule_save`(
  IN p_id INT,
  IN p_date date,
  IN P_schedulefordate date,
  IN p_batchid INT,
  IN p_totalshedcapacity INT,
  IN p_totalmaleproposedqty INT,
  IN p_totalfemaleproposedqty INT,
  IN p_approvedby INT,
  IN p_approveddate DATE,
  IN p_remark VARCHAR(200),
  IN p_statusid INT,
  IN p_createdby INT,
  IN p_companyid INT,
  IN p_userid INT,
  OUT out_id INT,
  OUT req_no VARCHAR(200)
)
BEGIN

	SET @action = null;
    SET @defaultfemalechickid = null;
    SET @defaultmalechickid = null;
	SET @defaultfemaleitemname = null;
    SET @defaultfemaleitemunitid = null;
	SET @defaultmaleitemname = null;
    SET @defaultmaleitemunitid = null;
    
    -- Get default Male and Female chick item
    SELECT  
			defaultfemalechickid, IT1.itemname, IT1.itemunitid,
            defaultmalechickid, IT2.itemname ,IT2.itemunitid
			INTO @defaultfemalechickid,@defaultfemaleitemname,
            @defaultfemaleitemunitid, @defaultmalechickid,
            @defaultmaleitemname,@defaultmaleitemunitid 
	FROM
		breedersetting BS
	INNER JOIN item IT1 ON BS.defaultfemalechickid = IT1.id
    INNER JOIN item IT2 ON BS.defaultmalechickid = IT2.id
    WHERE 
		BS.companyid = p_companyid limit 1;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO breederplacementschedule 
				(date, schedulefordate, batchid, totalshedcapacity, totalmaleproposedqty, totalfemaleproposedqty,
				approvedby, approveddate,remark, statusid, createdby, companyid)
			VALUES 
				(p_date, p_schedulefordate, p_batchid, p_totalshedcapacity, p_totalmaleproposedqty, p_totalfemaleproposedqty,
				p_approvedby, p_approveddate, p_remark, p_statusid, p_createdby, p_companyid);
		
         -- insert into purchaserequest 
         -- 541 is 'Breeder' Request source
         -- 91 is 'New' purchase request status
                
			SET @action = 'INSERT';

	ELSE
    
		UPDATE breederplacementschedule
			SET date = p_date,
				schedulefordate = p_schedulefordate,
				batchid = p_batchid,
				totalshedcapacity = p_totalshedcapacity,
				totalmaleproposedqty = p_totalmaleproposedqty,
                totalfemaleproposedqty = p_totalfemaleproposedqty,
                approvedby = p_approvedby,
				approveddate = p_approveddate,
                remark = p_remark,
				statusid = p_statusid,
				createdby = p_createdby,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
		
                SET @action = 'UPDATE';
	END IF;
    
    
	SELECT LAST_INSERT_ID() INTO out_id; 

		IF (p_statusid = 702) THEN  -- When status is 702 = 'Approved'
			
            SET @out_purreqid = null;
			CALL spc_purchaserequest_save(
				NULL, NUll,541, p_schedulefordate, p_createdby, p_approvedby, 
				'Chicks purchase request', 92, null,
				null,p_schedulefordate,p_companyid, p_userid, @out_purreqid
			);
            
             -- SELECT LAST_INSERT_ID() INTO @outpurreqid1; 
				-- insert into purchaserequestDetail for female item 
				-- SET @outpurreqdetailid1 = NULL;
			CALL spc_purchaserequestdetail_save(
				 NULL, @out_purreqid, @defaultfemalechickid, @defaultfemaleitemname, 
                 p_totalfemaleproposedqty, @defaultfemaleitemunitid,1641, p_companyid, p_userid, 
                 @outpurreqdetailid1
			 );
             
              -- insert into purchaserequestDetail for male item 
			  -- SET @outpurreqdetailid1 = NULL;
                
			 CALL spc_purchaserequestdetail_save(
				NULL, @out_purreqid, @defaultmalechickid, @defaultmaleitemname, p_totalmaleproposedqty, 
                @defaultmaleitemunitid,1641, p_companyid, p_userid, @outpurreqdetailid1
			 );
                

			-- update the request id in breederplacementschedule table
			UPDATE breederplacementschedule SET requestid = @out_purreqid WHERE id = out_id;
    
		END IF;
    
    select 
    PR.purchaserequestno INTO req_no
    from breederplacementschedule BPS
    LEFT JOIN purchaserequest PR ON PR.id = BPS.requestid
    where BPS.requestid = @out_purreqid;
    
   CALL spc_commonlog_save(p_companyid, 'breederplacementschedule', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederplacementschedule_search`(
IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';

	SELECT BP.id,
		DATE_FORMAT(schedulefordate,'%d/%m/%Y') as scheduledate,
		BP.batchid,
		BP.statusid,
		BP.createdby,
        REF.refname AS statusname,
        BPD.breedershedid,
		BS.locationid,
        L.locationcode,
        L.locationname,
		BP.companyid
	FROM 
		breederplacementschedule BP
        LEFT JOIN `reference` REF ON BP.statusid = REF.id
		LEFT JOIN breederplacementscheduledetail BPD ON BP.id = BPD.placementscheduleid
		INNER JOIN breedershed BS ON BPD.breedershedid = BS.id
		 INNER JOIN location L ON BS.locationid = L.id
	WHERE
		BP.companyid = p_companyid
        
	GROUP BY BP.id
    ORDER BY BP.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederplacementschedule_select`(
	IN p_schedulefordate DATE,
    IN p_id INT,
    IN p_companyid INT
)
BEGIN

	SELECT PS.id,
		BS.shedname as shedname,
        BS.locationid,
		L.locationname,
        L.locationcode,
		PS.batchid,
        BS.capacity,
        totalshedcapacity,
		totalfemaleproposedqty,
		totalmaleproposedqty,
		PS.statusid,
		DATE_FORMAT(schedulefordate,'%d/%m/%Y') as scheduledate,
        REF.refname AS statusname,
        PR.purchaserequestno,
		PS.remark,
        PS.date,
		PS.companyid
	FROM 
		breederplacementschedule PS
    
       LEFT JOIN breederplacementscheduledetail BPD ON PS.id = BPD.placementscheduleid
       INNER JOIN breedershed BS ON BPD.breedershedid= BS.id
       INNER JOIN location L ON BS.locationid = L.id
       LEFT JOIN reference REF ON PS.statusid = REF.id
		LEFT JOIN purchaserequest PR ON PR.id = PS.requestid
	
	
	WHERE
		PS.schedulefordate = p_schedulefordate
        AND PS.id = p_id
        AND PS.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederreasons_search`(
  IN p_companyid INT 
)
BEGIN
	SELECT BR.id,
		   typeid,
           R.refname as reasontype,
           reason
            
    FROM  breederreasons BR
    LEFT JOIN `reference` R ON BR.typeid = R.id
    
    WHERE 
          BR.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederreasons_select`(
  IN p_id INT 
)
BEGIN
	SELECT BR.id ,
		   BR.typeid,
           R.refname as reasontype,
           reason,
           companyid
            
    FROM  breederreasons BR
    LEFT JOIN `reference` R ON BR.typeid = R.id
    WHERE 
          BR.id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederreason_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN
  	DELETE FROM breederreasons WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'breederreasons', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederreason_save`(
	IN p_id INT,
    IN p_typeid INT,
	IN p_reason VARCHAR(300),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;
 IF EXISTS(
            SELECT reason from breederreasons where reason = p_reason
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederreasons 
				(typeid, reason, companyid)
			VALUES 
				(p_typeid, p_reason, p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE breederreasons
			SET 
				typeid = p_typeid, 
                reason = p_reason, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';   
    
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
   
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breederreasons', out_id, @action, p_userid);
    END;
END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederscheduledetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederscheduledetail WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederscheduledetail_save`(
    IN p_id INT,
    IN p_breederscheduleid INT(11),
    IN p_itemid INT(11),
    IN p_fromweek TINYINT(4),
    IN p_toweek TINYINT(4),
    IN p_weeknumber TINYINT(4),
    IN p_method VARCHAR(100),
    IN p_quantity DECIMAL(8,3),
    IN p_feedunitid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederscheduledetail 
				(id, breederscheduleid, itemid, fromweek, toweek, weeknumber, method, quantity, feedunitid, companyid)
			VALUES 
				(p_id, p_breederscheduleid, p_itemid, p_fromweek, p_toweek, p_weeknumber, p_method, p_quantity, p_feedunitid, p_companyid);
		
        SET @action = 'INSERT';

	ELSE
    
		UPDATE breederscheduledetail
			SET breederscheduleid = p_breederscheduleid, 
				itemid = p_itemid,
                fromweek = p_fromweek,
                toweek = p_toweek,
                weeknumber = p_weeknumber,
                method = p_method,
                quantity = p_quantity,
                feedunitid = p_feedunitid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
             SET @action = 'UPDATE';   
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	-- record log
   CALL spc_commonlog_save(p_companyid, 'breederscheduledetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederscheduledetail_search`(
    IN p_breederscheduleid INT
)
BEGIN
    
    SELECT
		 P.id,
         breederscheduleid,
		 itemid,
         fromweek,
         toweek,
         weeknumber,
         method,
         quantity,
         feedunitid,
         I.itemname
         
    FROM
		breederscheduledetail P
        INNER JOIN item I ON P.itemid = I.id
   	
	WHERE
		breederscheduleid = p_breederscheduleid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederscheduledetail_select`(
	IN p_breederscheduleid INT
)
BEGIN

	SELECT
		 B.id,
         breederscheduleid,
		 B.itemid,
         fromweek,
         toweek,
         weeknumber,
         method,
         quantity,
         feedunitid,
         I.itemname,
         I.itemcode,
         R.refname as itemunit
        
	FROM
		breederscheduledetail B
        LEFT JOIN item I ON B.itemid = I.id
        LEFT JOIN `reference` R ON I.itemunitid = R.id
        
	WHERE
		breederscheduleid = p_breederscheduleid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederschedulelocation_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederschedulelocation WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederschedulelocation_save`(
    IN p_id INT,
    IN p_breederscheduleid INT(11),
    IN p_locationid INT(11),
    IN p_companyid INT,
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
    
		IF EXISTS(SELECT id FROM breederschedulelocation WHERE breederscheduleid = p_breederscheduleid)
			THEN
				BEGIN
					DELETE FROM breederschedulelocation WHERE breederscheduleid = p_breederscheduleid;
					
					INSERT INTO breederschedulelocation 
							(id, breederscheduleid, locationid, companyid)
						VALUES 
							(p_id, p_breederscheduleid, p_locationid, p_companyid);

					SET @action = 'INSERT';
                END;
        
		ELSE
			INSERT INTO breederschedulelocation 
					(id, breederscheduleid, locationid, companyid)
				VALUES 
					(p_id, p_breederscheduleid, p_locationid, p_companyid);

			SET @action = 'INSERT';
		END IF;
	ELSE
    
		UPDATE breederschedulelocation
			SET breederscheduleid = p_breederscheduleid, 
				locationid = p_locationid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
			SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'breederschedulelocation', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederschedulelocation_search`(
    IN p_breederscheduleid INT
)
BEGIN
    
    SELECT
		 B.id,
         breederscheduleid,
		 locationid,
         L.locationname
        
	FROM
		breederschedulelocation B
        LEFT JOIN location L ON L.id = B.locationid
        
	WHERE
		breederscheduleid = p_breederscheduleid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederschedulelocation_select`(
	IN p_breederscheduleid INT
)
BEGIN

	SELECT
		 B.id,
         breederscheduleid,
		 locationid,
         L.locationname
        
	FROM
		breederschedulelocation B
        LEFT JOIN location L ON L.id = B.locationid
        
	WHERE
		breederscheduleid = p_breederscheduleid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederschedule_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederscheduledetail WHERE breederscheduleid = p_id;
    DELETE FROM breederschedulelocation WHERE breederscheduleid = p_id;
	DELETE FROM breederschedule WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederschedule_save`(
    IN p_id INT,
    IN p_schedulename VARCHAR(200),
    IN p_breederscheduletypeid INT(11),
    IN p_breednametypeid INT(11),
    IN p_breeditemid INT(11),
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_locationids VARCHAR(200),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederschedule 
				(id, schedulename, breederscheduletypeid, breednametypeid, breeditemid, fromdate, todate, locationids, companyid)
			VALUES 
				(p_id, p_schedulename, p_breederscheduletypeid, p_breednametypeid, p_breeditemid, p_fromdate, p_todate, p_locationids, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE breederschedule
			SET schedulename = p_schedulename, 
				breederscheduletypeid = p_breederscheduletypeid,
                breednametypeid = p_breednametypeid,
                breeditemid = p_breeditemid,
                fromdate = p_fromdate,
                todate = p_todate,
                locationids = p_locationids,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'breederschedule', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederschedule_search`(
    IN p_companyid INT,
    IN p_scheduletypeid INT
)
BEGIN
    
    SELECT
		 BS.id,
         BS.schedulename,
		 BS.breederscheduletypeid,
         BS.breednametypeid,
         BS.breeditemid,
         I.itemname,
         DATE_FORMAT(BS.fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(BS.todate,'%d/%m/%Y') as todate,
         locationids
        
	FROM
		breederschedule BS
        LEFT JOIN item I ON I.id = BS.breeditemid
   	
	WHERE
		BS.companyid = p_companyid AND breederscheduletypeid = p_scheduletypeid
        
	ORDER BY id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederschedule_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 BS.id,
         BS.schedulename,
		 BS.breederscheduletypeid,
         BS.breednametypeid,
         BS.breeditemid,
         I.itemname as breeditemname,
         DATE_FORMAT(BS.fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(BS.todate,'%d/%m/%Y') as todate,
         locationids
        
	FROM
		breederschedule BS
        LEFT JOIN item I ON I.id = BS.breeditemid
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND BS.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedersetting_save`(
	IN p_id INT,
	IN p_shedrestperiod INT(11),
    IN p_defaultmalechickid INT(11),
	IN p_defaultmalechickcost DECIMAL(8,3),
    IN p_defaultfemalechickid INT(11),
    IN p_defaultfemalechickcost DECIMAL(8,3),
    IN p_defaultchickwarehouseid INT(11),
    IN p_defaultoutsidehatcherywarehouseid INT(11),
    IN p_malepercentage DECIMAL(9,3),
    IN p_labourcharge DECIMAL(8,3),
	IN p_overheadcost DECIMAL(8,3),
    IN p_eggspredictionperbird INT,
    IN p_hatchingitemgroupids VARCHAR(200),
    IN p_defaultcommercialeggsitemid INT,
    IN p_defaultcrackedeggsitemid INT,
    IN p_defaultdoubleyolkeggsitemid INT,
    IN p_malestandardweight DECIMAL(9,3),
    IN p_femalestandardweight DECIMAL(9,3),
	IN p_feeditemgroupids VARCHAR(200),
	IN p_medicineitemgroupids VARCHAR(200),
	IN p_vaccineitemgroupids VARCHAR(200),
	IN p_vitaminitemgroupids VARCHAR(200),
    IN p_breeditemgroupids VARCHAR(200),
    IN p_chicksitemgroupids VARCHAR(200),
    IN p_hatchingeggscost DECIMAL(9,3),
    IN p_commercialeggscost DECIMAL(9,3),
    IN p_crackedeggscost DECIMAL(9,3),
    IN p_doubleyolkeggscost DECIMAL(9,3),
    IN p_costofgoodsoldledgerid INT(11),
    IN p_WIPledgerid INT(11),
    IN p_grpowithoutinvoiceledgerid INT(11),
    IN p_cashledgerid INT(11),
    IN p_freightledgerid INT(11),
    IN p_discountledgerid INT(11),
    IN p_stockledgerid INT(11),
    IN p_mortalityledgerid INT(11),
    IN p_feedledgerid INT(11),
    IN p_vaccineledgerid INT(11),
    in p_vitaminledgerid INT(11),
    In p_medicineledgerid INT(11),
    IN p_amortizationledgerid INT,
    IN p_ctrlaccledgerid INT,
    IN p_inventorygainandlossledgerid INT,
    IN p_wastageeggsitemid INT,
    In p_wastageeggscost DECIMAL(15,3),
    IN p_defaultcullswarehouseid INT(11),
    IN p_amortizationcoststd TINYINT(4),
	IN p_birdcoststd TINYINT(4),
	IN p_amortizationcostnonprodbird TINYINT(4),
	IN p_birdcostnonprodbird TINYINT(4),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breedersetting
				(id, 
                 shedrestperiod, 
                 defaultmalechickid,
                 defaultmalechickcost, 
                 defaultfemalechickid,
                 defaultfemalechickcost, 
                 defaultchickwarehouseid,
                 defaultoutsidehatcherywarehouseid,
                 malepercentage,
                 labourcharge,
				 overheadcost,
                 eggspredictionperbird,
                 hatchingitemgroupids,
                 defaultcommercialeggsitemid,
                 defaultcrackedeggsitemid,
                 defaultdoubleyolkeggsitemid,
                 malestandardweight,
                 femalestandardweight,
                 feeditemgroupids,
                 medicineitemgroupids,
                 vaccineitemgroupids,
                 vitaminitemgroupids,
                 breeditemgroupids,
                 chicksitemgroupids,
                 hatchingeggscost,
                 commercialeggscost,
                 crackedeggscost,
                 doubleyolkeggscost,
                 costofgoodsoldledgerid,
                 WIPledgerid,
                 grpowithoutinvoiceledgerid,
                 cashledgerid,
                 freightledgerid,
                 discountledgerid,
                 stockledgerid,
                 mortalityledgerid,
                 feedledgerid,
                 vaccineledgerid,
                 vitaminledgerid,
                 medicineledgerid,
                 amortizationledgerid,
                 ctrlaccledgerid,
                 inventorygainandlossledgerid,
                 wastageeggsitemid,
                 wastageeggscost,
                 defaultcullswarehouseid,
                 amortizationcoststd,
				 birdcoststd,
				 amortizationcostnonprodbird,
				 birdcostnonprodbird,
                 companyid
                 )
			VALUES 
				(p_id, 
                 p_shedrestperiod, 
                 p_defaultmalechickid,
                 p_defaultmalechickcost, 
                 p_defaultfemalechickid,
                 p_defaultfemalechickcost, 
                 p_defaultchickwarehouseid, 
                 p_defaultoutsidehatcherywarehouseid,
                 p_malepercentage,
                 p_labourcharge,
			     p_overheadcost,
                 p_eggspredictionperbird,
                 p_hatchingitemgroupids,
                 p_defaultcommercialeggsitemid,
                 p_defaultcrackedeggsitemid, 
                 p_defaultdoubleyolkeggsitemid,
                 p_malestandardweight,
                 p_femalestandardweight,
                 p_feeditemgroupids,
                 p_medicineitemgroupids,
                 p_vaccineitemgroupids,
                 p_vitaminitemgroupids,
                 p_breeditemgroupids,
                 p_chicksitemgroupids,
                 p_hatchingeggscost,
                 p_commercialeggscost,
                 p_crackedeggscost,
                 p_doubleyolkeggscost,
                 p_costofgoodsoldledgerid,
                 p_WIPledgerid,
                 p_grpowithoutinvoiceledgerid,
                 p_cashledgerid,
                 p_freightledgerid,
                 p_discountledgerid,
                 p_stockledgerid,
                 p_mortalityledgerid,
                 p_feedledgerid,
                 p_vaccineledgerid,
                 p_vitaminledgerid,
                 p_medicineledgerid,
                 p_amortizationledgerid,
                 p_ctrlaccledgerid,
                 p_inventorygainandlossledgerid,
                 p_wastageeggsitemid,
                 p_wastageeggscost,
                 p_defaultcullswarehouseid,
                 p_amortizationcoststd,
				 p_birdcoststd,
                 p_amortizationcostnonprodbird,
				 p_birdcostnonprodbird,
                 p_companyid);
		
        SET @action = 'INSERT';
          
	ELSE
    
		UPDATE breedersetting
				SET shedrestperiod = p_shedrestperiod,
                defaultmalechickid = p_defaultmalechickid,
                defaultmalechickcost = p_defaultmalechickcost,
                defaultfemalechickid = p_defaultfemalechickid,
                defaultfemalechickcost = p_defaultfemalechickcost,
                defaultchickwarehouseid = p_defaultchickwarehouseid,
                defaultoutsidehatcherywarehouseid = p_defaultoutsidehatcherywarehouseid,
                malepercentage = p_malepercentage,
                labourcharge = p_labourcharge,
				overheadcost = p_overheadcost,
                eggspredictionperbird = p_eggspredictionperbird,
                hatchingitemgroupids = p_hatchingitemgroupids,
                defaultcommercialeggsitemid = p_defaultcommercialeggsitemid,
                defaultcrackedeggsitemid = p_defaultcrackedeggsitemid,
                defaultdoubleyolkeggsitemid = p_defaultdoubleyolkeggsitemid,
                malestandardweight = p_malestandardweight,
                femalestandardweight = p_femalestandardweight,
                feeditemgroupids = p_feeditemgroupids,
                medicineitemgroupids = p_medicineitemgroupids,
                vaccineitemgroupids = p_vaccineitemgroupids,
                vitaminitemgroupids = p_vitaminitemgroupids,
                breeditemgroupids = p_breeditemgroupids,
                chicksitemgroupids = p_chicksitemgroupids,
				hatchingeggscost = p_hatchingeggscost,
				commercialeggscost = p_commercialeggscost,
				crackedeggscost = p_crackedeggscost,
				doubleyolkeggscost = p_doubleyolkeggscost,
                costofgoodsoldledgerid = p_costofgoodsoldledgerid,
                WIPledgerid = p_WIPledgerid,
                grpowithoutinvoiceledgerid = p_grpowithoutinvoiceledgerid,
                cashledgerid = p_cashledgerid,
				freightledgerid = p_freightledgerid,
                stockledgerid = p_stockledgerid,
                mortalityledgerid = p_mortalityledgerid,
                feedledgerid = p_feedledgerid,
                vaccineledgerid = p_vaccineledgerid,
                vitaminledgerid = p_vitaminledgerid,
                medicineledgerid = p_medicineledgerid,
                amortizationledgerid = p_amortizationledgerid,
                ctrlaccledgerid = p_ctrlaccledgerid,
                inventorygainandlossledgerid = p_inventorygainandlossledgerid,
				wastageeggsitemid = p_wastageeggsitemid,
				wastageeggscost = p_wastageeggscost,
                defaultcullswarehouseid = p_defaultcullswarehouseid,
                amortizationcoststd = p_amortizationcoststd,
				birdcoststd = p_birdcoststd,
                amortizationcostnonprodbird = p_amortizationcostnonprodbird,
				birdcostnonprodbird = p_birdcostnonprodbird,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';     
         
	END IF;
    
      SELECT LAST_INSERT_ID() INTO out_id;
      
      -- record log
    --  CALL spc_commonlog_save(p_companyid, 'breedersetting', out_id, @action, p_userid);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedersetting_search`(
	IN p_companyid INT
)
BEGIN
 
    SELECT
        BS.malepercentage,
        BS.defaultmalechickid,
        I1.itemcode as maleitemcode,
		I1.itemname as maleitemname,
        BS.defaultfemalechickid,   
        I2.itemcode as femaleitemcode,
        I2.itemname as femaleitemname,
        BS.labourcharge,
        BS.overheadcost,
        BS.eggspredictionperbird,
		BS.labourcharge,
		BS.overheadcost,
		BS.eggspredictionperbird,
		BS.malestandardweight,
		BS.femalestandardweight,
		BS.feeditemgroupids,
		BS.medicineitemgroupids,
		BS.vaccineitemgroupids,
		BS.vitaminitemgroupids,
        BS.breeditemgroupids,
        BS.chicksitemgroupids,
        BS.costofgoodsoldledgerid,
        BS.cashledgerid,
        BS.freightledgerid,
        BS.WIPledgerid,
        BS.grpowithoutinvoiceledgerid,
		BS.cashledgerid,
		BS.cashledgerid,
		BS.freightledgerid,
		BS.discountledgerid,
		COA1.coaname as goodledgername,
        COA1.glcode as goodglcode,
        COA2.coaname as birdledgername,
        COA2.glcode as birdglcode,
        COA3.coaname as grpowithoutinvoiceledgername,
        COA3.glcode as grpowithoutinvoiceglcode,
        COA4.coaname as cashledgername,
        COA4.glcode as cashglcode,
        COA5.coaname as freightledgername,
        COA5.glcode as freightglcode,
        COA6.coaname as discountledgername,
        COA6.glcode as discountglcode,
        BS.mortalityledgerid,
		COA7.coaname as mortalityledgernamename,
        COA7.glcode as mortalityglcode,
		BS.medicineledgerid,
        COA8.coaname as medicineledgernamename,
        COA8.glcode as medicineglcode,
        BS.feedledgerid,
        COA9.coaname as feedledgernamename,
        COA9.glcode as feedglcode,
		BS.vaccineledgerid,
        COA10.coaname as vaccineledgernamename,
        COA10.glcode as vaccineglcode,
        BS.vitaminledgerid,
        COA11.coaname as vitaminledgernamename,
        COA11.glcode as vitaminglcode,
        BS.amortizationledgerid,
        COA12.coaname as amortizationledgername,
        COA12.glcode as amortizationglcode,
		BS.ctrlaccledgerid,
        COA13.coaname as ctrlaccledgername,
        COA13.glcode as ctrlaccglcode,
        BS.inventorygainandlossledgerid,
        COA14.coaname as inventorygainandlossledgername,
        COA14.glcode as inventorygainandlossglcode,
        BS.stockledgerid,
        COA15.coaname as stockledgername,
        COA15.glcode as stockglcode,
        BS.wastageeggsitemid,
		BS.wastageeggscost,
        BS.defaultcullswarehouseid,
        BS.amortizationcoststd,
		BS.birdcoststd,
		BS.amortizationcostnonprodbird,
		BS.birdcostnonprodbird

    FROM
		breedersetting BS
	LEFT JOIN item I1 ON BS.defaultmalechickid = I1.id
    LEFT JOIN item I2 ON BS.defaultfemalechickid = I2.id
	LEFT JOIN chartofaccount COA1 ON COA1.id = BS.costofgoodsoldledgerid
    LEFT JOIN chartofaccount COA2 ON COA2.id = BS.WIPledgerid
    LEFT JOIN chartofaccount COA3 ON COA3.id = BS.grpowithoutinvoiceledgerid
    LEFT JOIN chartofaccount COA4 ON COA4.id = BS.cashledgerid
    LEFT JOIN chartofaccount COA5 ON COA5.id = BS.freightledgerid
    LEFT JOIN chartofaccount COA6 ON COA6.id = BS.discountledgerid
	LEFT JOIN chartofaccount COA7 ON COA7.id = BS.mortalityledgerid
    LEFT JOIN chartofaccount COA8 ON COA8.id = BS.medicineledgerid
    LEFT JOIN chartofaccount COA9 ON COA9.id = BS.feedledgerid
	LEFT JOIN chartofaccount COA10 ON COA10.id = BS.vaccineledgerid
    LEFT JOIN chartofaccount COA11 ON COA11.id = BS.vitaminledgerid
    LEFT JOIN chartofaccount COA12 ON COA12.id = BS.amortizationledgerid
    LEFT JOIN chartofaccount COA13 ON COA13.id = BS.ctrlaccledgerid
    LEFT JOIN chartofaccount COA14 ON COA14.id = BS.inventorygainandlossledgerid
    LEFT JOIN chartofaccount COA15 ON COA15.id = BS.stockledgerid
 
	WHERE
		BS.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedersetting_select`(
	IN p_companyid INT
)
BEGIN

	SELECT 
			BS.id, 
			BS.shedrestperiod, 
            BS.defaultmalechickid,
			BS.defaultmalechickcost, 
            BS.defaultfemalechickid,
			BS.defaultfemalechickcost, 
			BS.defaultchickwarehouseid, 
            BS.defaultoutsidehatcherywarehouseid, 
            BS.malepercentage,
            BS.hatchingitemgroupids,
            BS.defaultcommercialeggsitemid,
            BS.defaultcrackedeggsitemid,
            BS.defaultdoubleyolkeggsitemid,
            W.warehousename as defaultchickwarehousename,
            W1.warehousename as defaultOutsideHatcherywarehousename,
			BS.companyid,
            I1.itemname as defaultmalechickitem,
            I2.itemname as defaultfemalechickitem,
            I3.itemname as defaultcrackedeggsitemname,
           --  I4.itemname as defaulthatchingeggsitemname,
            I5.itemname as defaultcommercialeggsitemname,
            I6.itemname as defaultdoubleyolkeggsitemname,
            BS.labourcharge,
			BS.overheadcost,
            BS.eggspredictionperbird,
            BS.malestandardweight,
            BS.femalestandardweight,
            BS.feeditemgroupids,
            BS.medicineitemgroupids,
            BS.vaccineitemgroupids,
            BS.vitaminitemgroupids,
            BS.breeditemgroupids,
            BS.chicksitemgroupids,
			BS.hatchingeggscost,
		    BS.commercialeggscost,
		    BS.crackedeggscost,
		    BS.doubleyolkeggscost,
            BS.costofgoodsoldledgerid,
            COA1.coaname as goodledgername,
		    COA1.glcode as goodglcode,
		    COA2.coaname as birdledgername,
		    COA2.glcode as birdglcode,
			COA3.coaname as grpowithoutinvoiceledgername,
			COA3.glcode as grpowithoutinvoiceglcode,
            COA4.coaname as cashledgername,
			COA4.glcode as cashglcode,
			COA5.coaname as freightledgername,
			COA5.glcode as freightglcode,
            COA6.coaname as discountledgername,
			COA6.glcode as discountglcode,
			BS.cashledgerid,
			BS.freightledgerid,
			BS.WIPledgerid,
			BS.grpowithoutinvoiceledgerid,
			BS.cashledgerid,
			BS.freightledgerid,
			BS.discountledgerid,
			BS.mortalityledgerid,
			COA7.coaname as mortalityledgernamename,
			COA7.glcode as mortalityglcode,
			BS.medicineledgerid,
			COA8.coaname as medicineledgernamename,
			COA8.glcode as medicineglcode,
			BS.feedledgerid,
			COA9.coaname as feedledgernamename,
			COA9.glcode as feedglcode,
			BS.vaccineledgerid,
			COA10.coaname as vaccineledgernamename,
			COA10.glcode as vaccineglcode,
			BS.vitaminledgerid,
			COA11.coaname as vitaminledgernamename,
			COA11.glcode as vitaminglcode,
            BS.amortizationledgerid,
			COA12.coaname as amortizationledgername,
			COA12.glcode as amortizationglcode,
			BS.ctrlaccledgerid,
			COA13.coaname as ctrlaccledgername,
			COA13.glcode as ctrlaccglcode,
            BS.inventorygainandlossledgerid,
			COA14.coaname as inventorygainandlossledgername,
			COA14.glcode as inventorygainandlossglcode,
			BS.stockledgerid,
			COA15.coaname as stockledgername,
			COA15.glcode as stockglcode,
			BS.wastageeggsitemid,
		    BS.wastageeggscost,
            I4.itemname as defaultwastageeggsitemname,
			BS.defaultcullswarehouseid,
			W2.warehousename as defaultcullswarehouse,
			BS.amortizationcoststd,
			BS.birdcoststd,
            BS.amortizationcostnonprodbird,
		    BS.birdcostnonprodbird
			
	FROM
			breedersetting BS
            LEFT JOIN warehouse W ON W.id = BS.defaultchickwarehouseid
            LEFT JOIN warehouse W1 ON W1.id = defaultoutsidehatcherywarehouseid
            LEFT JOIN warehouse W2 ON W2.id = BS.defaultcullswarehouseid
            LEFT JOIN item I1 ON I1.id = BS.defaultmalechickid
            LEFT JOIN item I2 ON I2.id = BS.defaultfemalechickid
			LEFT JOIN item I3 ON I3.id = BS.defaultcrackedeggsitemid
            LEFT JOIN item I4 ON I4.id = BS.wastageeggsitemid
            LEFT JOIN item I5 ON I5.id = BS.defaultcommercialeggsitemid
            LEFT JOIN item I6 ON I6.id = BS.defaultdoubleyolkeggsitemid
            
            LEFT JOIN chartofaccount COA1 ON COA1.id = BS.costofgoodsoldledgerid
			LEFT JOIN chartofaccount COA2 ON COA2.id = BS.WIPledgerid
			LEFT JOIN chartofaccount COA3 ON COA3.id = BS.grpowithoutinvoiceledgerid
            LEFT JOIN chartofaccount COA4 ON COA4.id = BS.cashledgerid
			LEFT JOIN chartofaccount COA5 ON COA5.id = BS.freightledgerid
            LEFT JOIN chartofaccount COA6 ON COA6.id = BS.discountledgerid
            LEFT JOIN chartofaccount COA7 ON COA7.id = BS.mortalityledgerid
			LEFT JOIN chartofaccount COA8 ON COA8.id = BS.medicineledgerid
			LEFT JOIN chartofaccount COA9 ON COA9.id = BS.feedledgerid
			LEFT JOIN chartofaccount COA10 ON COA10.id = BS.vaccineledgerid
			LEFT JOIN chartofaccount COA11 ON COA11.id = BS.vitaminledgerid
            LEFT JOIN chartofaccount COA12 ON COA12.id = BS.amortizationledgerid
			LEFT JOIN chartofaccount COA13 ON COA13.id = BS.ctrlaccledgerid
            LEFT JOIN chartofaccount COA14 ON COA14.id = BS.inventorygainandlossledgerid
            LEFT JOIN chartofaccount COA15 ON COA15.id = BS.stockledgerid

    WHERE
			BS.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedforreport_search`(
	IN p_breederbatchid INT(11)
)
BEGIN
	SET @@sql_mode = ' ';

	SELECT 
    
        breedershedid as breedershedid,
        BS.shedname
       
        
	FROM
		breederbatchbalance BBB
        
        LEFT JOIN breedershed BS ON BS.id = BBB.breedershedid
		
	WHERE
        BBB.breederbatchid = p_breederbatchid
        GROUP BY BBB.breedershedid;
       
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedline_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breedershedline WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedline_remainingcapacity`(
	IN p_tolineid INT(11)
)
BEGIN
	
    SET @tolinecapacity = NULL;
	SET @tolineusedquantity = NULL;
    
	if exists(SELECT * FROM breederbatchtransferdetail WHERE tolineid = p_tolineid) then
    
		SELECT BSL.capacity, IFNULL(SUM(BBTD.quantity), 0) INTO @tolinecapacity, @tolineusedquantity
		FROM breederbatchtransferdetail BBTD
        LEFT JOIN breedershedline BSL ON BSL.id = BBTD.tolineid
		WHERE 
				 BBTD.tolineid = p_tolineid;
    
    else
    
		SELECT capacity, 0 INTO @tolinecapacity, @tolineusedquantity
		FROM breedershedline 
		WHERE 
				 id = p_tolineid;
    
    end if;
    
  select IFNULL((@tolinecapacity - @tolineusedquantity), 0) as remainingcapacity;
		 -- IFNULL((@tolinecapacity), 0) as tolinecapacity;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedline_save`(
	IN p_id INT,
    IN p_breedershedid INT,
    IN p_linename VARCHAR(50),
    IN p_description VARCHAR(500),
    IN p_capacity INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
SET @action = null;
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breedershedline
				(breedershedid, linename, description, capacity, companyid)
			VALUES 
				(p_breedershedid, p_linename, p_description, p_capacity, p_companyid);
		
            SET @action = 'INSERT';
		
	ELSE
    
		UPDATE breedershedline
				SET breedershedid = p_breedershedid, 
                linename = p_linename, 
                description = p_description,
                capacity = p_capacity,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;

	SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breedershedline', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedline_search`(
  IN p_breedershedid INT 
)
BEGIN
	SELECT id,
		   linename,
           breedershedid,
           description,
           capacity
            
    FROM  breedershedline
    WHERE 
          breedershedid = p_breedershedid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedline_select`(
  IN p_id INT 
)
BEGIN
	SELECT id,
           breedershedid,
		   linename,
		   description,
           capacity
            
    FROM  breedershedline
    WHERE 
          id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedparameter_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breedershedparameter WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedparameter_save`(
	IN p_id INT,
    IN p_parametertypeid INT,
    IN p_parametername VARCHAR(200),
    IN p_requiredratio VARCHAR(50),
    IN p_ismandatory TINYINT(4),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
-- Validation added for dulpicate parameter in same parametertyape 
        IF EXISTS(
            SELECT parametername from breedershedparameter where parametername = p_parametername
            AND parametertypeid = p_parametertypeid
			AND (NULLIF(p_id, '0') IS NULL)
              
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breedershedparameter
				(id, parametertypeid, parametername, requiredratio, ismandatory, companyid)
			VALUES 
				(p_id, p_parametertypeid, p_parametername, p_requiredratio, p_ismandatory, p_companyid);
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE breedershedparameter
				SET parametertypeid = p_parametertypeid, 
                parametername = p_parametername, 
                requiredratio = p_requiredratio,
                ismandatory = p_ismandatory,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'breedershedparameter', out_id, @action, p_userid);
END;
END IF;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedparameter_search`(
    IN p_companyid INT,
    IN p_parametertypeid INT
)
BEGIN

	SELECT 
		 id,
         parametername,
         requiredratio,
         ismandatory
	FROM
		breedershedparameter L
	
	WHERE
		companyid = p_companyid AND
        parametertypeid = p_parametertypeid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedparameter_select`(
  IN p_id INT 
)
BEGIN
	SELECT id,
		   parametertypeid,
		   parametername,
           requiredratio,
           ismandatory
            
    FROM  breedershedparameter 
    WHERE 
          id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedparameter_shedready`(
	IN p_companyid INT
)
BEGIN

	SELECT id as shedparameterid,
		   parametertypeid,
		   parametername,
           requiredratio,
           ismandatory
            
    FROM  breedershedparameter 
    WHERE 
          companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedpen_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breedershedpen WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedpen_save`(
	IN p_id INT,
    IN p_breedershedid INT,
    IN p_penname VARCHAR(50),
    IN p_pendescription VARCHAR(500),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breedershedpen
				(id, breedershedid, penname, pendescription, companyid, createdby, createddate)
			VALUES 
				(p_id, p_breedershedid, p_penname, p_pendescription, p_companyid, p_userid, NOW());
		
	ELSE
    
		UPDATE breedershedpen
				SET breedershedid = p_breedershedid, 
                penname = p_penname, 
                pendescription = p_pendescription,
                companyid = p_companyid,
                modifiedby = p_userid,
                modifieddate = NOW(),
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedpen_search`(
  IN p_breedershedid INT 
)
BEGIN
	SELECT id,
		   linename,
           breedershedid,
           description,
           active
            
    FROM  breedershedline
    WHERE 
          breedershedid = p_breedershedid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedpen_select`(
  IN p_id INT 
)
BEGIN
	SELECT id,
           breedershedid,
		   penname,
		   pendescription
            
    FROM  breedershedpen
    WHERE 
          id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedreadydetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breedershedreadydetail WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedreadydetail_save`(IN p_id INT,
	IN p_breedershedreadyid INT,
	IN p_parametertypeid INT,
	IN p_shedparameterid INT,
	IN p_isapplied TINYINT,
	IN p_remark VARCHAR(200),
	IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breedershedreadydetail
				(breedershedreadyid, parametertypeid, shedparameterid, isapplied,
					remark, companyid)
			VALUES 
				(p_breedershedreadyid, p_parametertypeid, p_shedparameterid, p_isapplied,
					p_remark, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE breedershedreadydetail
			SET 
				breedershedreadyid = p_breedershedreadyid, 
                parametertypeid = p_parametertypeid, 
                shedparameterid = p_shedparameterid, 
                isapplied = p_isapplied,
				remark = p_remark, 
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breedershedreadydetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedreadydetail_search`(
	IN p_breedershedreadyid INT
)
BEGIN

	SELECT id,
		breedershedreadyid,
		SD.parametertypeid,
        REF.refname as parametertypename,
		shedparameterid,
        SP.parametername,
		isapplied,
		remark
	FROM 
		breedershedreadydetail SD
        LEFT JOIN reference REF ON SD.breedershedreadyid = REF.id
        LEFT JOIN shedparameter SP ON SD.parametertypeid = SP.id
	WHERE
		breedershedreadyid = p_breedershedreadyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedreadydetail_select`(
	IN p_breedershedreadyid INT
)
BEGIN

	SELECT
		BR.id,
		breedershedreadyid,
		BR.parametertypeid,
		shedparameterid,
        BP.parametername,
		isapplied,
        ismandatory,
		remark
		
        
	FROM
		breedershedreadydetail BR
        LEFT JOIN breedershedparameter BP ON BP.id = BR.shedparameterid
        
	WHERE
		breedershedreadyid = p_breedershedreadyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedreadylist_search`(
    IN p_locationid INT
)
BEGIN
    
    SELECT
		SR.id,
		SR.breedershedid,
        L.locationname,
        S.shedname,
        S.capacity,
		batchid,
        BT.batchname,
		DATE_FORMAT(batchstartdate,'%d/%m/%Y') as batchstartdate,
		restperiod,
		createdby,
        UR.fullname AS username,
		DATE_FORMAT(SR.createddate,'%d/%m/%Y') as createddate,
		DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
		SR.statusid,
        REF.refname AS statusname,
		SR.companyid
        
	FROM
		breedershedready SR
        LEFT JOIN breedershed S ON SR.breedershedid = S.id
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN breederbatch BT ON SR.batchid = BT.id
        LEFT JOIN user UR on SR.createdby = UR.id
        LEFT JOIN `reference` REF ON SR.statusid = REF.id
   	
	WHERE
		S.locationid = p_locationid
        
	ORDER BY SR.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedready_byloation_search`(
 IN p_locationid INT,
 IN p_date DATE,
 IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';
DROP TEMPORARY TABLE IF EXISTS tempdivation ;
CREATE TEMPORARY TABLE tempdivation 

				SELECT
					SR.id as shedreadyid,
					SR.breedershedid,
					L.locationname,
					S.locationid,
					S.shedname,
					S.capacity,
					SR.createdby,
					SR.statusid,
					REF.refname AS statusname,
					EMP.employeename AS username,
					SR.companyid,
                    S.statusid as 'No'
					
					
				FROM
					breedershedready SR
					LEFT JOIN breedershed S ON SR.breedershedid = S.id
					LEFT JOIN location L ON S.locationid = L.id
					LEFT JOIN employee EMP on SR.createdby = EMP.id
					LEFT JOIN `reference` REF ON SR.statusid = REF.id
					
				
				WHERE
					SR.companyid = p_companyid AND
					S.statusid = 12 AND -- 'shedready'
					SR.statusid = 182 AND -- 'Approved'
					S.locationid = p_locationid AND
                     p_date >= DATE_ADD(SR.finalcleaningdate, INTERVAL SR.restperiod DAY)
					
				ORDER BY 
					SR.createddate DESC;

	
SELECT shedreadyid,
        TEMP1.breedershedid,
        locationname,
        locationid,
        shedname,
        capacity,
        createdby,
		statusid,
        statusname,
        username,
		companyid,
        DATE_FORMAT( maxbatch.placementdate,'%d/%m/%Y') as prevbatchdate,
		maxbatch.quantity as prevbatchquantity,
		'NO' as isscheduled 
        FROM tempdivation TEMP1
			LEFT JOIN
					(
						SELECT BBP.id, BBP.placementdate, BBPD.breedershedid, SUM(BBPD.quantity) AS quantity 
							FROM breederbatchplacement BBP
							INNER JOIN breederbatchplacementdetail BBPD ON BBPD.breederbatchplacementid = BBP.id
						GROUP BY BBP.id, BBP.placementdate, BBPD.breedershedid
						
			) maxbatch ON maxbatch.breedershedid = TEMP1.breedershedid

	group by TEMP1.breedershedid
	ORDER BY shedname;
    
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedready_byshedid`(
	IN p_breedershedid INT,
    IN p_companyid INT
)
BEGIN

	SELECT SR.id,
		SR.breedershedid,
		batchid,
		DATE_FORMAT(batchstartdate,'%d/%m/%Y') as batchstartdate,
		restperiod,
		createdby,
		DATE_FORMAT(createddate,'%d/%m/%Y') as createddate,
		DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
		SR.statusid,
        L.locationname,
        S.shedname,
        SR.createdby,
        EMP.employeename
		
	FROM 
		breedershedready SR
        LEFT JOIN breedershed S ON SR.breedershedid = S.id
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN employee EMP on SR.createdby = EMP.id
    WHERE 
          SR.breedershedid = p_breedershedid
          and SR.companyid = p_companyid;
		
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedready_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breedershedready WHERE id = p_id;
    DELETE FROM breedershedreadydetail WHERE breedershedreadyid = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedready_save`(
	IN p_id int,
	IN p_breedershedid int,
	IN p_batchid int,
	IN p_batchstartdate date,
	IN p_restperiod int,
	IN p_createdby int,
	IN p_createddate date,
	IN p_finalcleaningdate date,
	IN p_statusid int,
	IN p_companyid int,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breedershedready
				(breedershedid, batchid, batchstartdate, restperiod,
					createdby, createddate, finalcleaningdate, statusid, companyid)
			VALUES 
				(p_breedershedid, p_batchid, p_batchstartdate, p_restperiod,
					p_createdby, p_createddate, p_finalcleaningdate, p_statusid, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE breedershedready
			SET 
				breedershedid = p_breedershedid,
				batchid = p_batchid,
				batchstartdate = p_batchstartdate,
				restperiod = p_restperiod,
				createdby = p_createdby,
				createddate = p_createddate,
				finalcleaningdate = p_finalcleaningdate,
				statusid = p_statusid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- Update shed status to 12 = 'Shed Ready'
    UPDATE breedershed SET statusid = 12 WHERE id = p_breedershedid;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breedershedready', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedready_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		SR.id,
		SR.breedershedid,
        L.locationname,
        S.shedname,
		batchid,
        BT.batchname,
		DATE_FORMAT(batchstartdate,'%d/%m/%Y') as batchstartdate,
		restperiod,
		createdby,
        UR.fullname AS username,
		DATE_FORMAT(SR.createddate,'%d/%m/%Y') as createddate,
		DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
		SR.statusid,
        REF.refname AS statusname,
		SR.companyid
        
	FROM
		breedershedready SR
        LEFT JOIN breedershed S ON SR.breedershedid = S.id
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN breederbatch BT ON SR.batchid = BT.id
        LEFT JOIN user UR on SR.createdby = UR.id
        LEFT JOIN `reference` REF ON SR.statusid = REF.id
   	
	WHERE
		SR.companyid = p_companyid
        
	ORDER BY SR.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershedready_select`(
IN p_id INT
)
BEGIN

	SELECT SR.id,
		SR.breedershedid,
		batchid,
		DATE_FORMAT(batchstartdate,'%d/%m/%Y') as batchstartdate,
		restperiod,
		createdby,
		DATE_FORMAT(createddate,'%d/%m/%Y') as createddate,
		DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
		SR.statusid,
        L.locationname,
        S.shedname,
        SR.createdby,
        EMP.employeename
		
	FROM 
		breedershedready SR
        LEFT JOIN breedershed S ON SR.breedershedid = S.id
        LEFT JOIN location L ON S.locationid = L.id
         LEFT JOIN employee EMP on SR.createdby = EMP.id
       --  LEFT JOIN party P ON P.id = SR.createdby
    WHERE 
          SR.id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershed_availablesheds_search`(
    IN p_companyid INT,
    IN p_statusid INT,
    IN p_locationid INT
)
BEGIN

	SELECT 
		id,
        statusid,
        shedname,
        locationid
        
	FROM
		breedershed
    
	WHERE
		statusid = p_statusid and
        locationid = p_locationid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershed_batchwise_search`(
    IN p_companyid INT,
    IN p_breederbatchid INT
)
BEGIN
	SET @lasttransactiondate = null;
	IF EXISTS(SELECT id FROM breederdailytransaction WHERE breederbatchid = p_breederbatchid) THEN
		SELECT DATE_FORMAT(DATE_ADD((SELECT transactiondate FROM breederdailytransaction WHERE breederbatchid = p_breederbatchid ORDER BY transactiondate DESC LIMIT 1), INTERVAL 1 DAY),'%d/%m/%Y') INTO @lasttransactiondate;
    ELSE
		IF EXISTS(SELECT id FROM breederbatchplacement WHERE breederbatchid = p_breederbatchid) THEN
			SELECT DATE_FORMAT((SELECT firstdaydate FROM breederbatchplacement WHERE breederbatchid = p_breederbatchid),'%d/%m/%Y') INTO @lasttransactiondate;
        ELSE 
			SELECT DATE_FORMAT((SELECT firstdaydate FROM breederbatchopening WHERE breederbatchid = p_breederbatchid),'%d/%m/%Y') INTO @lasttransactiondate;
        END IF;
    END IF;

        
	SELECT 
    
		BBB.breederbatchid,
        BS.id as shedid,
        BS.shedname,
        BS.capacity,
		L.locationname,
        BS.warhouseid as warehouseid,
        BS.warehousebinid,
        -- DATE_FORMAT(DATE_ADD((SELECT transactiondate FROM breederdailytransaction WHERE breederbatchid = BBB.breederbatchid AND shedid = BS.id  ORDER BY transactiondate DESC LIMIT 1), INTERVAL 1 DAY),'%d/%m/%Y') AS lasttransactiondate
        -- DATE_FORMAT(DATE_ADD(updateddate, INTERVAL 1 DAY),'%d/%m/%Y') AS lasttransactiondate
		@lasttransactiondate as lasttransactiondate
    FROM
		breederbatchbalance BBB
        
        LEFT JOIN breedershed BS ON BS.id = BBB.breedershedid
        LEFT JOIN location L ON BS.locationid = L.id
		
	WHERE
        BBB.breederbatchid = p_breederbatchid
		AND BBB.companyid = p_companyid
        AND BBB.quantity != 0
        GROUP BY BBB.breedershedid;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershed_batch_started`(
	IN p_locationid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT 
		BS.id,
        BS.statusid,
        BS.capacity,
        BS.shedname,
        R.refname,
        BS.locationid,
        L.locationname
        -- BSR.batchid
        
        
	FROM
		breedershed BS
        LEFT JOIN `reference` R ON R.id = BS.statusid
        LEFT JOIN location L ON BS.locationid = L.id
    
	WHERE BS.statusid = 14 AND
	BS.locationid = p_locationid
    AND BS.active = 1
    AND BS.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershed_bystatusandlocation_search`(
  IN p_companyid INT,
  IN p_locationid INT(11),
  IN p_statusid INT
 )
BEGIN
	SELECT
		BS.id,
        BS.statusid,
        active,
        L.locationcode,
        L.locationname,
        shedname,
		R.refname as statusname
        
	FROM
		breedershed BS
        
	INNER JOIN location L ON BS.locationid = L.id
    INNER JOIN reference R ON BS.statusid = R.id

WHERE
		BS.companyid = p_companyid AND
        BS.statusid = p_statusid
        AND BS.locationid = p_locationid;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershed_bystatus_search`(
  IN p_companyid INT,
  IN p_statusid INT
 )
BEGIN
	SELECT
		BS.id,
        BS.statusid,
        active,
        L.locationcode,
        L.locationname,
        shedname,
		R.refname as statusname
        
	FROM
		breedershed BS
        
	INNER JOIN location L ON BS.locationid = L.id
    INNER JOIN reference R ON BS.statusid = R.id

WHERE
		BS.companyid = p_companyid AND
        BS.statusid = p_statusid;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershed_delete`(
	IN p_id INT
)
BEGIN
SET @Statusid = null;
SELECT statusid INTO @Statusid
 from breedershed 
 where id = p_id AND statusid = 11;
 IF(@Statusid IS NOT NUll) THEN
 BEGIN
     SELECT 1 as yes;
     DELETE FROM breedershedline WHERE breedershedid = p_id;
	DELETE FROM breedershed WHERE id = p_id;
 END;
 ELSE
  BEGIN
		SELECT 0 as yes;
			
		 END;
	END IF;
           
    END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershed_locationwise_search`(
    IN p_companyid INT,
    IN p_locationid INT
)
BEGIN

	SELECT 
		BS.id as shedid,
        BS.statusid,
        BS.capacity,
        BS.shedname,
        R.refname,
        L.locationname
        -- BSR.batchid
        
        
	FROM
		breedershed BS
        LEFT JOIN `reference` R ON R.id = BS.statusid
        LEFT JOIN location L ON L.id = BS.locationid
       --  LEFT JOIN breedershedready BSR ON BSR.breedershedid = BS.id AND BS.statusid = 13 -- 'batch started'
    
	WHERE
		 BS.statusid = 11 AND
        BS.locationid = p_locationid
        and BS.active = 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershed_prevnext`(
	IN p_id INT,
    IN p_order 

VARCHAR(10)
)
BEGIN
   
   IF(p_id = 0) THEN
   
     IF(p_order = 'desc') THEN  -- select last record
    
        SELECT
              id,
              locationid,
              statusid,
              shedname,
              active,
              capacity
        FROM 
             breedershed
             
	    ORDER BY id DESC LIMIT 1;

 
     ELSE --  select first record
        SELECT 
              id,
              locationid,
              statusid,
			  shedname,
              capacity,
              active
        FROM 
			 breedershed 
        
        ORDER BY id limit 1;
     
     END IF;
     
   ELSE 
   
	 IF(p_order = 'desc') THEN
     
      IF EXISTS( SELECT id,locationid, statusid, shedname capacity, active FROM breedershed WHERE id < p_id ORDER BY id DESC LIMIT 1) THEN
           SELECT 
                id,
                locationid,
                statusid,
                capacity,
                active
                shedname
           FROM breedershed 
           WHERE id < p_id 
           ORDER BY id DESC LIMIT 1;
           
	  ELSE
          
          SELECT 
               id,
               locationid,
               statusid,
               capacity,
               active,
               shedname
	      FROM 
              breedershed
           
	      WHERE id > p_id ORDER BY id DESC LIMIT 1;
          
	  END IF;
        
     ELSE
     
       IF EXISTS ( SELECT id,locationid,statusid,shedname,capacity,active FROM breedershed WHERE id > p_id ORDER BY id ASC LIMIT 1) THEN
          SELECT 
			   id,
               locationid,
               statusid,
               capacity,
               active,
               shedname
	      FROM 
              breedershed
           
	      WHERE id > p_id ORDER BY id ASC LIMIT 1;
          
       ELSE
          SELECT 
               id,
               locationid,
               statusid,
               capacity,
               active,
               shedname
          FROM breedershed 
          WHERE id < p_id ORDER BY id ASC LIMIT 1;
          
       END IF;
	
     END IF;
     
   END IF;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershed_save`(
	IN p_id INT,
    IN p_locationid INT,
    IN p_shedname VARCHAR(50),
    IN p_capacity INT,
    IN p_statusid VARCHAR(200),
    IN p_active TINYINT(4),
    IN p_warhouseid INT(11),
    IN p_warehousebinid INT(11),
    IN p_shedtypeid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action1 = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breedershed
				(locationid, shedname, capacity, statusid, active, warhouseid, warehousebinid, shedtypeid, companyid)
			VALUES 
				(p_locationid, p_shedname, p_capacity, p_statusid, p_active, p_warhouseid, NULL, p_shedtypeid, p_companyid);
			
            SET @action1 = 'INSERT';
            
		
	ELSE
    
		UPDATE breedershed
				SET
                locationid = p_locationid, 
                shedname = p_shedname, 
                capacity = p_capacity,
				statusid = p_statusid,
                active = p_active,
                warhouseid = p_warhouseid,
                warehousebinid = p_warehousebinid,
                shedtypeid = p_shedtypeid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action1 = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
      -- create one warehousebin for current shed
		SET @out_warehousebinid = NULL;
		CALL spc_warehousebin_save(
			NULL, p_warhouseid, CONCAT(p_shedname,'-BIN'), p_shedname,
			p_companyid, 0, p_userid, @out_warehousebinid
		);
		
		-- update warehouse bin id 
		
		UPDATE breedershed SET warehousebinid = @out_warehousebinid WHERE id = out_id;
            
	END IF;
   
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breedershed', out_id, @action1, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershed_search`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		BS.id,
        BS.statusid,
        BS.active,
        L.locationcode,
        L.locationname,
        BS.shedname,
		BS.warhouseid,
        BS.warehousebinid,
        WB.binname,
        W.warehousename,
        BS.shedtypeid
       
        -- R.refname
        
	FROM
		breedershed BS
        
	INNER JOIN location L ON BS.locationid = L.id
    LEFT JOIN warehousebin WB ON WB.id = BS.warehousebinid
    LEFT JOIN warehouse W ON W.id = WB.warehouseid
   
    -- INNER JOIN reference R ON BS.statusid = R.id
    
	WHERE
		BS.companyid = p_companyid
        
	ORDER BY BS.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershed_select`(
	IN p_id INT
)
BEGIN

	SELECT 
		BS.id,
		BS.locationid,
        L.locationcode,
        shedname,
        capacity,
        BS.active,
        statusid,
        BS.warhouseid,
        BS.warehousebinid,
        L.locationname,
        W.warehousename,
        W.warehousecode,
        WB.binname,
        WB.bincode,
        BS.shedtypeid,
        BS.companyid
        
	FROM
		breedershed BS
        
    INNER JOIN location L ON BS.locationid = L.id
	LEFT JOIN warehouse W ON BS.warhouseid = W.id
	LEFT JOIN warehousebin WB ON WB.id = BS.warehousebinid
	WHERE
	    BS.id = p_id;
		
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breedershed_supplier_search`(
    IN p_companyid INT,
    IN p_roleid INT
)
BEGIN

	SELECT 
		id,
		username,
        roleid
        
	FROM
		user
    
	WHERE
		roleid = p_roleid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederuniformitydetail_delete`(
	IN p_id INT
)
BEGIN
	
    SET @uniformityid = NULL;
    SET @count = NULL;
    
    select uniformityid INTO @uniformityid from breeder_uniformitydetail WHERE id = p_id;
    select count(*) INTO @count from breeder_uniformitydetail WHERE uniformityid = @uniformityid;
    
    IF(@count = 1)THEN
		DELETE FROM breeder_uniformitydetail WHERE id = p_id;	
		DELETE FROM uniformitylocation WHERE uniformityid = @uniformityid;
    else
		DELETE FROM breeder_uniformitydetail WHERE id = p_id;	
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederuniformitydetail_save`(
	IN p_id INT,
    IN p_uniformityid INT(11),
    IN p_fromweeks SMALLINT(6),
    IN p_toweeks SMALLINT(6),
    IN p_percent decimal(8,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breeder_uniformitydetail
				(uniformityid, fromweeks, toweeks, percent, companyid)
			VALUES 
				(p_uniformityid, p_fromweeks, p_toweeks, p_percent, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE breeder_uniformitydetail
			SET 
				uniformityid = p_uniformityid,
				fromweeks =	p_fromweeks,
                toweeks = p_toweeks, 
                percent = p_percent,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breeder_uniformitydetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederuniformitydetail_search`(
IN p_uniformityid INT(11)
)
BEGIN
	SELECT id ,
        fromweeks,
        toweeks,
        percent
	FROM breeder_uniformitydetail
    WHERE
    uniformityid = p_uniformityid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederuniformity_save`(
    IN p_id INT,
    IN p_locationid VARCHAR(200),
    IN p_date date,
    IN p_itemid INT(11),
    IN p_companyid INT,
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breeder_uniformity
				(locationid, date, itemid, companyid)
			VALUES 
				(p_locationid, p_date, p_itemid, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE breeder_uniformity
			SET 
				locationid = p_locationid,
                date = p_date,
                itemid = p_itemid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breeder_uniformity', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederuniformity_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 U.id,
		 locationid,
         L.locationname,
         DATE_FORMAT(date,'%d/%m/%Y') as date,
         itemid,
         I.itemname, 
         I.itemcode
        
	FROM
		breeder_uniformity U
        LEFT JOIN location L ON L.id = U.locationid
        LEFT JOIN item I ON I.id = U.itemid
        
	WHERE
		U.companyid= p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breederuniformity_select`(
IN p_id INT(11)
)
BEGIN
	SELECT U.id,
		DATE_FORMAT(date,'%d/%m/%Y') as date,
        locationid,
        L.locationname,
        itemid,
		I.itemname,
        I.itemcode
        
    FROM  breeder_uniformity U
	INNER JOIN location L on U.locationid = L.id
    INNER JOIN item I on U.itemid = I.id
    
    WHERE 
          U.id = p_id
           GROUP BY U.locationid ;
	-- ORDER BY date DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breeder_before_amortization_exp_reporst`(
IN p_batchid varchar(2000),
IN p_fromdate DATE,
IN p_todate DATE,
IN p_companyid INT)
BEGIN
SET  @p_todate = null;
SET  @p_placementdate = null;
  /*SELECT fnc_getplacementdate(p_batchid,p_companyid) INTO @p_placementdate;
 SELECT TRUNCATE (((DATEDIFF(p_todate,@p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 24 )THEN
      SELECT date_add(@p_placementdate,INTERVAL 167 DAY) INTO @p_todate;
      END IF;
      if(@ageinweeks <= 24) THEN
       SELECT p_todate INTO @p_todate;
	  END IF;*/
SELECT 
		DATE_FORMAT( JEA.jedate,'%d/%m/%Y') as jedate,
		JEA.dramount,CA.coaname,CA.glcode, JEA.cramount,JEA.batchid,BB.batchname
		FROM journalentryfor_amortization JEA
        LEFT JOIN chartofaccount CA ON CA.id = JEA.acledgerid
        LEFT JOIN breederbatch BB ON BB.id = JEA.batchid
        WHERE find_in_set(JEA.batchid,p_batchid)
        AND JEA.moduleid = 721 AND JEA.jedate between p_fromdate  AND p_todate;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breeder_birdcost_save`(
 IN p_id INT(11),
 IN p_itemid INT(11),
 IN p_issueqty DECIMAL(20,3),
 IN p_transactiondate DATE,
 IN p_unitcost DECIMAL(9,3),
 IN p_itemvalue DECIMAL(20,3),
 IN p_itembatch VARCHAR(200),
 IN p_breederbatchid INT(11),
 IN p_shedid INT(11),
 IN p_transactionid INT(11),
 IN p_companyid INT(11))
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO breeder_biredcost(itemid, issueqty, transactiondate, unitcost, itemvalue,itembatch,breederbatchid,shedid,transactionid,companyid)
        VALUES (p_itemid, p_issueqty, p_transactiondate, p_unitcost, p_itemvalue,p_itembatch,p_breederbatchid,p_shedid,p_transactionid,p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE breeder_biredcost
        SET itemid = p_itemid,
			issueqty = p_issueqty,
            transactiondate = p_transactiondate,
            unitcost = p_unitcost,
            itemvalue = p_itemvalue,
            itembatch = p_itembatch,
            breederbatchid = p_breederbatchid,
            shedid = p_shedid,
            transactionid = p_transactionid,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
  
   END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breeder_feeddeviation_report`( 
 IN p_breederbatchid INT,
 IN p_shedid VARCHAR(200),
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_companyid INT)
BEGIN
SET @@sql_mode = ' ';
SET @maleitemid = null;
SET @femaleitemid = null;
 -- for naleid and female id for breederbatch
	SELECT  
		 maleitemid,femaleitemid INTO @maleitemid,@femaleitemid
	FROM
		breederbatch
        WHERE 
			id = p_breederbatchid ;


SELECT breeditemid, shedname, weekno, breeditemname,livestock,itemname,feedstdid,ifnull(BFSD.feedconsumed ,0) as stfeedconsumed,atfeedconsumption, ifnull((BFSD.feedconsumed - atfeedconsumption),0) as difffeedconsumption,ifnull((BFSD.feedconsumed/livestock),0) as stfeedconsumedperbird FROM(
SELECT 
       fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid) as weekno,
       BDT.shedid,
       BFS.id as feedstdid,
       BS.shedname,
	   MIN(fnc_transaction_date_wise_liveqty(BDT.breederbatchid, BDT.shedid,@femaleitemid,BDT.transactiondate,p_companyid))as livestock,
       BDC.itemid as feeditemid,
       BDM.itemid as breeditemid,
	   I.itemname,
	   I1.itemname as breeditemname,
	   ifnull((fnc_calculate_malefemale_feedconsumption(BDT.id,BDM.itemid,BDC.itemid)),0) as atfeedconsumption
        
 FROM breederdailytransaction  BDT
  LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id AND BDM.itemid = @femaleitemid
  LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id AND BDC.consumptiontypeid = 861 AND BDC.breederitemid = @femaleitemid
  LEFT JOIN breederfeedstandard BFS ON BFS.breeditemid = @femaleitemid
  LEFT JOIN item I ON I.id = BDC.itemid 
  LEFT JOIN breedershed BS ON BS.id =  BDT.shedid
  LEFT JOIN item I1 ON I1.id = BDM.itemid 
 WHERE 
               BDT.breederbatchid = p_breederbatchid
                AND FIND_IN_SET(BDT.shedid, p_shedid)
				AND BDT.transactiondate between p_fromdate AND p_todate
				group by weekno
                order by BDT.breederbatchid, BDT.shedid, BDT.transactiondate ) as temp1
                LEFT JOIN breederfeedstandarddetail BFSD ON BFSD.breederfeedstandardid= feedstdid AND weekno=BFSD.weeknumber AND BFSD.itemid= feeditemid
UNION ALL

SELECT breeditemid, shedname, weekno, breeditemname,livestock,itemname,feedstdid,ifnull(BFSD.feedconsumed,0) as stfeedconsumed,atfeedconsumption,ifnull((BFSD.feedconsumed - atfeedconsumption),0) as difffeedconsumption,ifnull((BFSD.feedconsumed/livestock),0) as stfeedconsumedperbird FROM(
SELECT DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y') as transactiondate,
       fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid) as weekno,
       BDT.shedid,
       BS.shedname,
       BFS.id as feedstdid,
	   MIN(fnc_transaction_date_wise_liveqty(BDT.breederbatchid, BDT.shedid,@maleitemid,BDT.transactiondate,p_companyid))as livestock,
       BDC.itemid as feeditemid,
       BDM.itemid as breeditemid,
	   I.itemname,
	   I1.itemname as breeditemname,
	   ifnull(SUM(fnc_calculate_malefemale_feedconsumption(BDT.id,BDM.itemid,BDC.itemid)),0) as atfeedconsumption
        
 FROM breederdailytransaction  BDT
  LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id AND BDM.itemid = @maleitemid
  LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id AND BDC.consumptiontypeid = 861 AND BDC.breederitemid = @maleitemid
  LEFT JOIN breederfeedstandard BFS ON BFS.breeditemid = @maleitemid
  LEFT JOIN item I ON I.id = BDC.itemid 
  LEFT JOIN item I1 ON I1.id = BDM.itemid 
  LEFT JOIN breedershed BS ON BS.id = BDT.shedid
 WHERE 
                BDT.breederbatchid = p_breederbatchid
                AND FIND_IN_SET(BDT.shedid, p_shedid)
				AND BDT.transactiondate between p_fromdate AND p_todate
				group by weekno
                order by BDT.breederbatchid, BDT.shedid, BDT.transactiondate ) as temp
                LEFT JOIN breederfeedstandarddetail BFSD ON BFSD.breederfeedstandardid= feedstdid AND weekno=BFSD.weeknumber AND BFSD.itemid= feeditemid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breeder_liftingweightdetail_save`(
 IN p_id INT(11),
 IN p_itemid INT(11),
 IN p_breederliftingweightid INT,
 IN p_plannedqty INT,
 IN p_deliveredqty INT,
 IN p_plannedwt DECIMAL(15,3),
 IN p_deliveredwt DECIMAL(15,3),
 IN p_liftingtime VARCHAR(45),
 IN p_rateperkg DECIMAL(15,3),
 IN p_totalcost DECIMAL(15,3),
 IN p_excessbirds INT,
 IN p_birdshortage INT,
  IN p_shedid INT,
 IN p_warehousebinid INT,
 IN p_companyid INT(11),
 IN p_userid INT(11),
 OUT out_id INT )
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO breeder_liftingweightdetail(
				itemid,breederliftingweightid, plannedqty, deliveredqty, plannedwt,
                deliveredwt,liftingtime, rateperkg, totalcost, excessbirds, birdshortage,shedid,warehousebinid, companyid)
        VALUES (p_itemid,p_breederliftingweightid, p_plannedqty, p_deliveredqty, p_plannedwt,
                p_deliveredwt, p_liftingtime, p_rateperkg, p_totalcost, p_excessbirds, p_birdshortage,p_shedid,p_warehousebinid, p_companyid); 
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE breeder_liftingweightdetail
        SET itemid = p_itemid,
			breederliftingweightid = p_breederliftingweightid,
			plannedqty = p_plannedqty,
            deliveredqty = p_deliveredqty,
            plannedwt = p_plannedwt,
			deliveredwt = p_deliveredwt,
            liftingtime = p_liftingtime,
            rateperkg = p_rateperkg,
            totalcost = p_totalcost,
			excessbirds = p_excessbirds,
            birdshortage = p_birdshortage,
            shedid = p_shedid,
            warehousebinid = p_warehousebinid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- Sales delivery detail
    SET @stddeliveryid = null;
    SET @islastdelivery = null;
    SET @stdsalesorderid = null;
    SET @breederbirdsalesorderid = null;
    SET @batchid = null;
    SELECT stddeliveryid, islastdelivery, stdsalesorderid,breederbirdsalesorderid,batchid 
    INTO @stddeliveryid, @islastdelivery, @stdsalesorderid,@breederbirdsalesorderid ,@batchid
    FROM breeder_liftingweight WHERE id = p_breederliftingweightid;


    SET @deliverydetail = null;
    
    
   CALL spc_salesdeliverydetail_save(
		NULL, @stddeliveryid, @stdsalesorderid, 
        p_itemid, p_deliveredqty, 1, p_deliveredwt,(select itemunitid FROM item WHERE id = p_itemid),
        NULL,p_warehousebinid, 1581,
        p_companyid, p_userid, @deliverydetail
    );
    
    -- update pending weight in birdsalesorder table
    SET @batchsaleweight = null;
    SELECT BSOD.batchsaleweight INTO @batchsaleweight
    FROM breeder_birdsalesorderdetail BSOD
    WHERE breederbirdsalesorderid = @breederbirdsalesorderid AND shedid = p_shedid AND itemid = p_itemid
    LIMIT 1;
    
    SET @moduleid = null;
    SELECT moduleid  INTO @moduleid FROM breeder_birdsalesorder WHERE id = @breederbirdsalesorderid;
    
    UPDATE breeder_birdsalesorderdetail SET pendingweight = (@batchsaleweight - p_deliveredwt) WHERE batchid = @batchid AND shedid = p_shedid AND itemid = p_itemid;
    
    -- UPDATE LIVE BATCH QUANTITY OF SELECTED BATCH
    IF(@moduleid = 721) THEN
		UPDATE breederbatchbalance SET quantity = (quantity - p_deliveredqty) WHERE breederbatchid = @batchid AND breedershedid = p_shedid AND itemid = p_itemid;
		
		IF((SELECT SUM(quantity) FROM breederbatchbalance WHERE breederbatchid = @batchid group by breederbatchid) = 0) THEN
			UPDATE breederbatch SET statusid = 223 WHERE id = @batchid;
            
            UPDATE breedershed SET statusid = 11 WHERE id = (SELECT breedershedid FROM breederbatchbalance WHERE breederbatchid = @batchid LIMIT 1);
		
		END IF;
		
		IF(@islastdelivery = 1) THEN
			UPDATE breederbatch SET statusid = 223 WHERE id = @batchid;
		
			UPDATE breedershed SET statusid = 11 WHERE id = (SELECT breedershedid FROM breederbatchbalance WHERE breederbatchid = @batchid LIMIT 1);
		
        END IF;
    END IF;
    
       -- UPDATE LIVE BATCH QUANTITY OF SELECTED BATCH
    IF(@moduleid = 725) THEN
		UPDATE layerbatchbalance SET quantity = (quantity - p_deliveredqty) WHERE layerbatchid = @batchid AND layershedid = p_shedid AND itemid = p_itemid;
		
		IF((SELECT SUM(quantity) FROM layerbatchbalance WHERE layerbatchid = @batchid group by layerbatchid) = 0) THEN
			UPDATE layerbatch SET statusid = 983 WHERE id = @batchid;
            
            UPDATE layershed SET statusid = 921 WHERE id = (SELECT layershedid FROM layerbatchbalance WHERE layerbatchid = @batchid LIMIT 1);
		END IF;
		
		IF(@islastdelivery = 1) THEN
			UPDATE layerbatch SET statusid = 983 WHERE id = @batchid;
		
			UPDATE layershed SET statusid = 921 WHERE id = (SELECT layershedid FROM layerbatchbalance WHERE layerbatchid = @batchid LIMIT 1);
		
        END IF;
    END IF;
    

    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'breeder_liftingweightdetail', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breeder_liftingweightdetail_search`(
IN p_breederliftingweightid INT(11),
In p_companyid INT(11))
BEGIN
SET @@sql_mode = ' ';
SELECT
	BLWD.id,BLWD.itemid, BLWD.breederliftingweightid, BLWD.plannedqty, BLWD.deliveredqty, BLWD.plannedwt,
	BLWD.deliveredwt,BLWD.liftingtime, BLWD.rateperkg, BLWD.totalcost, BLWD.excessbirds, BLWD.birdshortage, BLWD.companyid,
    I.itemname,
    BSOD.pendingweight,
    BSOD.avgweight,
    ((BSOD.pendingweight)/(BSOD.avgweight)) as openqty,
    BLWD.shedid,
    BLWD.warehousebinid
    
FROM
	breeder_liftingweightdetail BLWD
    
     LEFT JOIN breeder_liftingweight BLW ON  BLW.id = BLWD.breederliftingweightid
     LEFT JOIN breeder_birdsalesorderdetail BSOD ON  BSOD.breederbirdsalesorderid = BLW.breederbirdsalesorderid AND BSOD.itemid =BLWD.itemid 
     LEFT JOIN item I ON  I.id = BLWD.itemid 
WHERE 
	BLWD.breederliftingweightid = p_breederliftingweightid
    AND BLWD.companyid = p_companyid
    group by BLWD.id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breeder_liftingweightdetail_select`(
In p_id INT(11),
IN p_companyid INT(11))
BEGIN


SELECT
	id, breederliftingweightid, batchid, plannedqty, deliveredqty, plannedwt,
	deliveredwt,liftingtime, rateperkg, totalcost, excessbirds, birdshortage, companyid
    
FROM
	breeder_liftingweightdetail
WHERE 
	id = p_id AND
	companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breeder_liftingweight_save`(
 IN p_id INT(11),
 IN p_liftingscheduleid INT,
 IN p_breederbirdsalesorderid INT,
 IN p_stdsalesorderid INT,
 IN p_liftingdate DATE,
 IN p_totaldeliveredqty INT,
 IN p_totaldeliveredwt DECIMAL(12,3),
 IN p_totaldeliverycost DECIMAL(12,3),
 IN p_excessbirds INT,
 IN p_birdshortage INT,
 IN p_islastdelivery TINYINT(4),
 IN p_batchid INT,
 IN p_warehouseid INT,
 IN p_companyid INT(11),
 IN p_userid INT(11),
 OUT out_id INT )
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO breeder_liftingweight(
				liftingscheduleid, breederbirdsalesorderid, stdsalesorderid,
				liftingdate, totaldeliveredqty, totaldeliveredwt,
				totaldeliverycost, excessbirds, birdshortage,
				islastdelivery,batchid,warehouseid, companyid)
        VALUES (p_liftingscheduleid, p_breederbirdsalesorderid, 
				p_stdsalesorderid, 
				p_liftingdate, p_totaldeliveredqty, p_totaldeliveredwt,
                p_totaldeliverycost, p_excessbirds, p_birdshortage,
                p_islastdelivery,p_batchid,p_warehouseid, p_companyid); 
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE breeder_liftingweight
        SET liftingscheduleid = p_liftingscheduleid, 
			breederbirdsalesorderid = p_breederbirdsalesorderid,
			stdsalesorderid = p_stdsalesorderid, 
			liftingdate = p_liftingdate, 
            totaldeliveredqty = p_totaldeliveredqty,
            totaldeliveredwt = p_totaldeliveredwt,
            totaldeliverycost = p_totaldeliverycost, 
            excessbirds = p_excessbirds, 
            birdshortage = p_birdshortage,
			islastdelivery = p_islastdelivery,
            batchid = p_batchid,
            warehouseid = p_warehouseid,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- Sales delivery
    SET @delivery = null;

    CALL spc_salesdelivery_save(
		NULL,(select moduleid from breeder_birdsalesorder where id =p_breederbirdsalesorderid), p_stdsalesorderid, NULL,
        p_liftingdate, NULL, NULL, NULL,NULL, p_warehouseid, 
		NULL, NULL, NULL, 1622, p_companyid, p_userid, @delivery
    );
    
    -- update deliveryid in sales_delivery_weights table
    UPDATE breeder_liftingweight SET stddeliveryid = @delivery WHERE id = OUT_ID;
    -- record log
   CALL spc_commonlog_save(p_companyid, 'breeder_liftingweight', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breeder_liftingweight_search`( 
 IN p_companyid INT(11)
 )
BEGIN
	SELECT 
		BLW.id,
		BLW.liftingscheduleid, BLW.breederbirdsalesorderid, BLW.stdsalesorderid,
		DATE_FORMAT(BLW.liftingdate,'%d/%m/%Y') as liftingdate,
		 BLW.totaldeliveredqty, BLW.totaldeliveredwt,
		BLW.totaldeliverycost, BLW.excessbirds, BLW.birdshortage,
		BLW.islastdelivery, BLW.companyid,P.partyname,
        BLW.batchid,BLW.warehouseid,BB.batchname,warehousename
                
	FROM 
		breeder_liftingweight BLW
	LEFT JOIN breeder_birdsalesorder BSO ON BLW.breederbirdsalesorderid = BSO.id
    LEFT JOIN party P ON P.id = BSO.partyid 
	LEFT JOIN breederbatch BB ON BB.id = BLW.batchid
	LEFT JOIN warehouse W ON W.id = BLW.warehouseid
        
	WHERE 
		BLW.companyid = p_companyid
	order by BLW.id desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breeder_liftingweight_select`( 
 IN p_id INT(11),
 IN p_companyid INT(11)
 )
BEGIN
	SELECT 
		liftingscheduleid, breederbirdsalesorderid, stdsalesorderid,
		liftingdate, totaldeliveredqty, totaldeliveredwt,
		totaldeliverycost, excessbirds, birdshortage,
		islastdelivery, companyid,batchid,warehouseid
                
	FROM 
		breeder_liftingweight
        
	WHERE 
		companyid = p_companyid AND
        id = p_id;
        

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breeder_lifting_schedule_delete`(
IN p_id INT,
IN p_companyid INT)
BEGIN
	DELETE 
		
	FROM 
		breeder_lifting_schedule
	WHERE companyid = p_companyid AND
		  id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breeder_lifting_schedule_details_save`(
	IN p_id INT,
    IN p_liftingscheduleid INT,
    IN p_breederbirdsalesorderid INT,
    IN p_batchid INT,
    IN p_batchweight DECIMAL(15,3),
    IN p_plannedweight DECIMAL(15,3),
    IN p_approvedweight  DECIMAL(15,3),
    IN p_batchcost DECIMAL(15,3),
    IN p_linesupervisorid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action1 = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breeder_lifting_schedule_details
				(liftingscheduleid, breederbirdsalesorderid, batchid, batchweight, plannedweight, approvedweight, batchcost, linesupervisorid,companyid)
			VALUES 
				(p_liftingscheduleid, p_breederbirdsalesorderid, p_batchid, p_batchweight,p_plannedweight, p_approvedweight, p_batchcost, p_linesupervisorid,p_companyid);
			
            SET @action1 = 'INSERT';
	ELSE
    
		UPDATE breeder_lifting_schedule_details
				SET
                liftingscheduleid = p_liftingscheduleid, 
                breederbirdsalesorderid = p_breederbirdsalesorderid, 
                batchid = p_batchid,
				batchweight = p_batchweight,
                plannedweight = p_plannedweight,
                approvedweight = p_approvedweight,
                batchcost = p_batchcost,
                linesupervisorid = p_linesupervisorid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action1 = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    
   
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breeder_lifting_schedule_details', out_id, @action1, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breeder_lifting_schedule_details_search`(
 IN p_liftingscheduleid INT
 )
BEGIN
	SELECT 
		BLS.id,
		BLS.liftingscheduleid,
		BLS.breederbirdsalesorderid,
		BLS.batchid, batchweight, 
		BLS.plannedweight, 
		BLS.approvedweight,
		BLS.batchcost, 
		BLS.linesupervisorid,
		BLS.companyid,
        BSO.rateperkg,
        P.partyname
	FROM 
		breeder_lifting_schedule_details BLS
    LEFT JOIN breeder_birdsalesorder BSO ON BSO.id = BLS.breederbirdsalesorderid
    LEFT JOIN party P ON P.id = BSO.partyid
   WHERE 
    BLS.liftingscheduleid = p_liftingscheduleid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breeder_lifting_schedule_details_select`(
 IN p_id INT,
 IN p_companyid INT
 )
BEGIN
	SELECT 
		id,
		liftingscheduleid,
		breederbirdsalesorderid,
		batchid, batchweight, 
		plannedweight, 
		approvedweight,
		batchcost, 
		linesupervisorid,
		companyid
        
    FROM breeder_lifting_schedule_details
    
   WHERE 
    id = p_id AND
    companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breeder_lifting_schedule_save`(
 IN p_id INT,
 IN p_moduleid INT,
 IN p_locationid INT,
 IN p_scheduledate DATE,
 IN p_statusid INT,
 IN p_companyid INT,
 IN p_userid INT,
 OUT out_id INT
)
BEGIN
SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breeder_lifting_schedule 
				(moduleid, locationid, scheduledate,statusid, companyid)
			VALUES 
				(p_moduleid, p_locationid, p_scheduledate,p_statusid, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE breeder_lifting_schedule
				SET
					moduleid = p_moduleid,
                    locationid = p_locationid,
                    scheduledate = p_scheduledate,
                    statusid = p_statusid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breeder_lifting_schedule', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breeder_lifting_schedule_search`(
 IN p_companyid INT)
BEGIN
	
    SELECT 
		BLS.id, BLS.moduleid, BLS.locationid,
        DATE_FORMAT(BLS.scheduledate ,'%d/%m/%Y') as scheduledate,
        BLS.statusid, BLS.companyid,
        L.locationname,R.refname as module,R1.refname as status
	FROM 
		breeder_lifting_schedule BLS
	LEFT JOIN location L ON BLS.locationid = L.id
    LEFT JOIN `reference` R ON R.id = BLS.moduleid
    LEFT JOIN `reference` R1 ON R1.id = BLS.statusid
	WHERE BLS.companyid = p_companyid
    order by BLS.id desc;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_breeder_lifting_schedule_select`(
IN p_id INT,
IN p_companyid INT)
BEGIN
	SELECT
		id,moduleid, locationid, scheduledate,statusid, companyid
	FROM 
		breeder_lifting_schedule
	WHERE companyid = p_companyid AND
		  id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_calculate_meanage`(
	IN p_cbf_batchid INT(11),
    IN p_companyid INT(11),
    OUT OUT_ID INT(11)
)
BEGIN

	SET @age = 0;
    SET @rcount = 0;
    
    SELECT COUNT(DISTINCT CDW.id) INTO @rcount 
    FROM cbf_delivery_weights_detail CDWD
    INNER JOIN cbf_delivery_weights CDW ON CDW.id = CDWD.cbf_delivery_weightsid
    WHERE cbf_batchid = p_cbf_batchid;
    
	SET @placedate = null;
    SELECT fnc_getcbfplacementdate(p_cbf_batchid, p_companyid) INTO @placedate;

	SET @row_number = 0;
	   
	DROP TEMPORARY TABLE IF EXISTS cbfage;
	CREATE TEMPORARY TABLE cbfage
    
    SELECT (@row_number:=@row_number + 1) AS num, id,liftingdate from (
		SELECT 
			CDW.id,
			CDW.liftingdate
		FROM cbf_delivery_weights CDW
		LEFT JOIN cbf_delivery_weights_detail CDWD ON CDWD.cbf_delivery_weightsid = CDW.id
		WHERE CDWD.cbf_batchid = p_cbf_batchid
	) as tblcbfage;
	BEGIN
			DECLARE n INT DEFAULT 0;
			DECLARE i INT DEFAULT 0;
			SELECT COUNT(*) FROM cbfage INTO n;
			 
			WHILE i<n DO 
				SET @id = null;
				SET @liftingdate = null;
				SELECT id, liftingdate
                INTO @id, @liftingdate FROM cbfage WHERE num = i+1;
                
                SET @age = @age + DATEDIFF(@liftingdate, @placedate);
				SET i = i + 1;
			END WHILE;
		End;
        
    SELECT (@age/@rcount) INTO OUT_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_candlingtestlist_search`(
	IN p_location INT,
    IN p_from_date date,
	IN p_to_date date
)
BEGIN

	SELECT CT.id,
		setterbatchid as settingno,
        DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
        L.locationname,
        W.warehousename,
		DATE_FORMAT(testdate,'%d/%m/%Y') as testdate
        
	FROM 
		candlingtest CT
        LEFT JOIN setterbatch SB ON CT.setterbatchid = SB.id
        LEFT JOIN setter S ON CT.setterid = S.id     
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN warehouse W ON S.warehouseid = W.id
        
	WHERE
		S.locationid = p_location AND
        (CT.testdate BETWEEN p_from_date AND p_to_date)
        -- GROUP BY CT.batchid;
        
	ORDER BY setterbatchid DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_candlingtestreport_select`(
	IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT
)
BEGIN
    
    SELECT
		  DATE_FORMAT(C.testdate,'%d/%m/%Y') as candlingdate,
		  C.batchid as settingno,
          C.id as testno,
          C.breederbatchid as batchno,
          C.setterid as setterno,
          S.settername,
          C.samplequantity as noofeggstested,
          C.trueinfertile as infertileeggs
       
    FROM
		candlingtest C
        
		LEFT JOIN setter S ON C.setterid = S.id
	
	WHERE
		C.testdate BETWEEN p_fromdate AND p_todate AND
        C.companyid = p_companyid;
      

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_candlingtestreport_select1`(
	IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT
)
BEGIN
    SET @@sql_mode = ' ';
    SET @row_number = 0;
    
    select 
    CASE WHEN (batchno = '') THEN '' ELSE (@row_number:=@row_number + 1)  END sqno, 
    TEMP.* from (
    SELECT 
        CASE WHEN (batchno = 'Grand Total') THEN '' ELSE batchno END batchno, 
		setterno, 
        CASE WHEN (hatchdate = 'Grand Total') THEN '' ELSE 
        DATE_FORMAT(hatchdate,'%d/%m/%Y')
        END hatchdate, 
        hatchno, 
        sourcename, 
        testno, 
        CASE WHEN (testdate = 'Grand Total') THEN '' ELSE 
        DATE_FORMAT(testdate,'%d/%m/%Y')
        END testdate, 
        ROUND(((infertileeggs * 100) / noofeggstested),2) as infertileeggspercent,
		ROUND((stdeggsquantity*(ROUND(expectedchickspercent,2))/100),0)as chicksquantity, 
        stdeggsquantity,
        noofeggstested, 
        infertileeggs,
        clears,
        ROUND(expectedchickspercent,2) AS expectedchickspercent
        
    FROM (
			SELECT 
				COALESCE(SB.id,'Grand Total') AS batchno,
				COALESCE(SB.setterid, 'Grand Total') setterno,
				COALESCE(CP.pulloutdate, '') AS hatchdate,
				COALESCE(HB.hatcherid, '') AS hatchno,
				COALESCE(REF1.refname, '') AS sourcename,
				COALESCE(C.id, '') AS testno,
				COALESCE(C.testdate, 'Grand Total') AS testdate,
				SUM(HB.actualquantity) AS chicksquantitytb,
				SUM(C.actualquantity) as stdeggsquantity,
				SUM(C.samplequantity) as noofeggstested,
				SUM(C.trueinfertile) AS infertileeggs,
                SUM(C.clears) AS clears,
				MAX(C.fertilitypercentage) as expectedchickspercent
			
			FROM setterbatch SB 
			LEFT JOIN hatcherbatch HB ON HB.setterbatchid = SB.id
			INNER JOIN candlingtest C ON C.setterbatchid = SB.id
			INNER JOIN reference REF1 ON SB.sourceid = REF1.id
            LEFT JOIN chickspullout CP ON CP.hatchbatchid = HB.id
			
             WHERE
				 HB.batchdate BETWEEN p_fromdate AND p_todate
			GROUP BY 
			SB.id, 
			SB.setterid, 
			HB.batchdate, 
			HB.hatcherid, 
			C.id, 
			C.testdate,
			REF1.refname
			WITH ROLLUP
			HAVING sourcename != '' or  (sourcename = '' and  batchno = 'Grand Total') 
    ) 
    AS TEMP
    ) AS TEMP;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_candlingtest_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN
	DELETE FROM candlingtest WHERE id = p_id;
    
     -- record log
    CALL spc_commonlog_save(p_companyid, 'candlingtest', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_candlingtest_save`(
	IN p_id INT,
	IN p_batchid INT,
    IN p_setterid INT,
    IN p_breederbatchid INT,
    IN p_testdate DATE,
    IN p_actualquantity INT,
    IN p_samplequantity INT,
    IN p_trueinfertile INT,
    IN p_clears INT,
    IN p_bloodring INT,
    IN p_membrane INT,
    IN p_agemortality INT,
    IN p_fertility DECIMAL(8,3),
    IN p_fertilitypercentage DECIMAL(8,3),
	IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO candlingtest 
				(setterbatchid, setterid, breederbatchid, testdate, actualquantity, samplequantity, trueinfertile,
					clears, bloodring, membrane, agemortality, fertility, fertilitypercentage, companyid)
			VALUES 
				(p_batchid, p_setterid, p_breederbatchid, p_testdate, p_actualquantity, p_samplequantity, p_trueinfertile,
					p_clears, p_bloodring, p_membrane, p_agemortality, p_fertility, p_fertilitypercentage, p_companyid);
                    
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE candlingtest
				SET 
                setterbatchid = p_batchid,
				setterid = p_setterid,
                breederbatchid = p_breederbatchid,
				testdate = p_testdate,
				actualquantity = p_actualquantity,
				samplequantity = p_samplequantity,
				trueinfertile = p_trueinfertile,
				clears = p_clears,
				bloodring = p_bloodring,
				membrane = p_membrane,
				agemortality = p_agemortality,
				fertility = p_fertility,
				fertilitypercentage = p_fertilitypercentage,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'candlingtest', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_candlingtest_search`(
	IN p_companyid INT
)
BEGIN


	SELECT CT.id,
		setterbatchid as settingno,
        DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
        L.locationname,
        W.warehousename,
		DATE_FORMAT(testdate,'%d/%m/%Y') as testdate
        
	FROM 
		candlingtest CT
        LEFT JOIN setterbatch SB ON CT.setterbatchid = SB.id
        LEFT JOIN setter S ON CT.setterid = S.id     
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN warehouse W ON S.warehouseid = W.id
        
	WHERE
		CT.companyid = p_companyid
        -- GROUP BY CT.batchid;
        
	ORDER BY setterbatchid DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_candlingtest_select`(
	IN p_settingno INT
)
BEGIN

	SELECT CT.id,
		setterbatchid as settingno,
        DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
        L.locationname,
		CT.setterid,
        S.settername,
        BB.batchname as breederbatchname,
        CT.breederbatchid,
        W.warehousename,
		DATE_FORMAT(testdate,'%d/%m/%Y') as testdate,
		CT.actualquantity,
		samplequantity,
		trueinfertile,
		clears,
		bloodring,
		membrane,
		agemortality,
		fertility,
		fertilitypercentage,
        CT.actualquantity as settingquantity,
        SB.status as setterbatchstatus
        
	FROM
		candlingtest CT
        
		LEFT JOIN setterbatch SB ON CT.setterbatchid = SB.id
        LEFT JOIN setter S ON CT.setterid = S.id     
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN breederbatch BB on CT.breederbatchid = BB.id
		LEFT JOIN warehouse W ON S.warehouseid = W.id
        
	WHERE
		CT.setterbatchid = p_settingno;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cashbookregister_report`(
	IN p_ledgerid VARCHAR(255),
    IN p_fromdate DATE,
	IN p_todate DATE,
    IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';
    SET @cramount = null;
    SET @dramount = null;
    
    SELECT IFNULL((select REPLACE(cast(IFNULL(SUM(JED.cramount),0) as CHAR(100)), '-', '')),0), 
		   IFNULL(SUM(JED.dramount),0)
   
    INTO @cramount, @dramount
    FROM journalentrydetail JED
    LEFT JOIN journalentry JE ON JED.journalentryid = JE.id
    WHERE JE.voucherdate BETWEEN p_fromdate AND p_todate
    AND FIND_IN_SET(JED.acledgerid, p_ledgerid);
    
    SELECT null as voucherdate,
		   null as jeid,
           null as vouchertypeid,
           null as refname,
           'Opening Balance' as narration,
           IFNULL(fnc_openingcreditdebitbalforledger(JED.acledgerid, p_fromdate, 'debit'),0) as dramount,
           IFNULL(fnc_openingcreditdebitbalforledger(JED.acledgerid, p_fromdate, 'credit'),0) as cramount,
           null chequeno,
		   null as chequedate,
           null as branchid,
           null as branchcode,
           null as branchname,
           null as bankid,
           null as acledgerid,
           null as glcode,
           null as partyid,
           null as partyname,
           IFNULL(((fnc_openingcreditdebitbalforledger(JED.acledgerid, p_fromdate, 'debit'))-(fnc_openingcreditdebitbalforledger(JED.acledgerid, p_fromdate, 'credit'))),0) as closingbalance

           
	FROM journalentry JE
    LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    WHERE JE.companyid = p_companyid
	AND JE.voucherdate < p_fromdate
    -- AND JE.voucherdate BETWEEN p_fromdate AND p_todate
    AND FIND_IN_SET(JED.acledgerid, p_ledgerid)
    GROUP BY JED.acledgerid
    
    UNION ALL

	SELECT DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate,
		   JE.id as jeid,
           JE.vouchertypeid,
           REF.refname,
           JED.narration,
           IFNULL(JED.dramount,0) as dramount,
           IFNULL(JED.cramount,0) as cramount,
           JE.chequeno,
		   DATE_FORMAT(JE.chequedate,'%d/%m/%Y') as chequedate,
           JE.branchid,
           BR.branchcode,
           BR.branchname,
           JE.bankid,
           JED.acledgerid,
           COA.glcode,
           JE.partyid,
            P.partyname,
           0 as closingbalance
           
	FROM journalentry JE
    INNER JOIN `reference` REF ON JE.vouchertypeid = REF.id
    INNER JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    INNER JOIN chartofaccount COA ON JED.acledgerid = COA.id
    INNER JOIN commonbranch BR ON BR.id = JE.branchid
	LEFT JOIN party P ON P.id = JE.partyid 
    WHERE FIND_IN_SET(JED.acledgerid, p_ledgerid)
    AND JE.companyid = p_companyid
    AND JE.voucherdate BETWEEN p_fromdate AND p_todate
    GROUP BY JE.id;
    
   /* UNION ALL
    
    SELECT null,
		   null,
           null,
           null,
           'Grand Total',
		   IFNULL((fnc_openingcreditdebitbalforledger(JED.acledgerid, p_fromdate, 'debit') + @dramount),0) as dramount,
           IFNULL((fnc_openingcreditdebitbalforledger(JED.acledgerid, p_fromdate, 'credit') + @cramount),0) as cramount,
           null,
		   null,
           null,
           null,
           null,
           null,
           null,
           null,
           null,
           null,
           IFNULL(((fnc_openingcreditdebitbalforledger(JED.acledgerid, p_fromdate, 'debit') + @dramount) -(fnc_openingcreditdebitbalforledger(JED.acledgerid, p_fromdate, 'credit') + @cramount)),0) as closingbalance
           
	FROM journalentry JE
    LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    WHERE JE.companyid = p_companyid
    AND FIND_IN_SET(JED.acledgerid, p_ledgerid)
    GROUP BY JED.acledgerid;*/
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfagewisemortality_report`(
IN p_batch_id varchar(15000),
IN p_companyid INT(11)
)
BEGIN

SET @@sql_mode = ' ';

select *,ROUND(((fwmortality/placeqty)*100),2) as fweekmorper,
		 ROUND(((swmortality/fwliveqty)*100),2) as sweekmorper,  -- swliveqty
         ROUND(((twmortality/swliveqty)*100),2) as tweekmorper,-- twliveqty
         ROUND(((fourthwmortality/twliveqty)*100),2) as fourthweekmorper,-- fourthwliveqty
         ROUND(((fifthwmortality/fourthwliveqty)*100),2) as fifthweekmorper, -- fifthwliveqty
         ROUND(((sixwmortality/fifthwliveqty)*100),2) as sixweekmorper, -- sixwliveqty
         ROUND(((sevenwmortality/sixwliveqty)*100),2) as sevenweekmorper, -- sevenwliveqty
         ROUND(((eightwmortality/sevenwliveqty)*100),2) as eightweekmorper, -- eightwliveqty
         (IFNULL(fwmortality,0)+IFNULL(swmortality,0)+IFNULL(twmortality,0)+IFNULL(fourthwmortality,0)+IFNULL(fifthwmortality,0)+
         IFNULL(sixwmortality,0)+IFNULL(sevenwmortality,0)+IFNULL(eightwmortality,0)) as totalmortalitydata
from(
select
CBD.id as batchid,
CFE.branch_id,
-- CBD.total_mortality as totalmortalitydata,
CFE.line_id,
CFE.id as farmerid,
CBD.batch_number,
CL.linename,
CFE.farmer_name,
CFE.farm_name,
CBD.batch_place_qty as placeqty,
DATE_FORMAT( CBD.batch_place_date,'%d/%m/%Y') as placement_date,
DATE_FORMAT( CDT.transactiondate,'%d/%m/%Y') as transactiondate,


/* Calculate all week last dates */
DATE_ADD( CBD.batch_place_date, INTERVAL 6 DAY ) AS fweeklastdate,
DATE_ADD( CBD.batch_place_date, INTERVAL 13 DAY ) AS sweeklastdate,
DATE_ADD( CBD.batch_place_date, INTERVAL 20 DAY ) AS tweeklastdate,
DATE_ADD( CBD.batch_place_date, INTERVAL 27 DAY ) AS fourthweeklastdate,
DATE_ADD( CBD.batch_place_date, INTERVAL 34 DAY ) AS fifthweeklastdate,
DATE_ADD( CBD.batch_place_date, INTERVAL 41 DAY ) AS sixweeklastdate,
DATE_ADD( CBD.batch_place_date, INTERVAL 48 DAY ) AS sevenweeklastdate,
DATE_ADD( CBD.batch_place_date, INTERVAL 55 DAY ) AS eightweeklastdate,

/* Calculate all week first dates */
DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 13 DAY ),INTERVAL 6 DAY )SWfirstdate,
DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 20 DAY ),INTERVAL 6 DAY )tWfirstdate,
DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 27 DAY ),INTERVAL 6 DAY )fWfirstdate,
DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 34 DAY ),INTERVAL 6 DAY )fifthWfirstdate,
DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 41 DAY ),INTERVAL 6 DAY )sixWfirstdate,
DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 48 DAY ),INTERVAL 6 DAY )sevenWfirstdate,
DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 55 DAY ),INTERVAL 6 DAY )eightWfirstdate,

/* Calculate all week Livequantity upto week last dates */
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 6 DAY )),CBB.cbfbatchid,CBD.breed_id)as fwliveqty,
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 13 DAY )),CBB.cbfbatchid,CBD.breed_id)as swliveqty,
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 20 DAY )),CBB.cbfbatchid,CBD.breed_id)as twliveqty,
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 27 DAY )),CBB.cbfbatchid,CBD.breed_id)as fourthwliveqty,
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 34 DAY )),CBB.cbfbatchid,CBD.breed_id)as fifthwliveqty,
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 41 DAY )),CBB.cbfbatchid,CBD.breed_id)as sixwliveqty,
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 48 DAY )),CBB.cbfbatchid,CBD.breed_id)as sevenwliveqty,
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 55 DAY )),CBB.cbfbatchid,CBD.breed_id)as eightwliveqty,

/* Calculate all week mortality betwwen weekfirstdate to weeklastdate dates */
fuc_calculate_mortalityfirstweek(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 6 DAY )),CBB.cbfbatchid)as fwmortality,
fuc_calculate_mortalityweekwise((DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 13 DAY ),INTERVAL 6 DAY )),(DATE_ADD( CBD.batch_place_date, INTERVAL 13 DAY )),CBB.cbfbatchid,CBD.breed_id) as swmortality,
fuc_calculate_mortalityweekwise((DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 20 DAY ),INTERVAL 6 DAY )),(DATE_ADD( CBD.batch_place_date, INTERVAL 20 DAY )),CBB.cbfbatchid,CBD.breed_id) as twmortality,
fuc_calculate_mortalityweekwise((DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 27 DAY ),INTERVAL 6 DAY )),(DATE_ADD( CBD.batch_place_date, INTERVAL 27 DAY )),CBB.cbfbatchid,CBD.breed_id) as fourthwmortality,
fuc_calculate_mortalityweekwise((DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 34 DAY ),INTERVAL 6 DAY )),(DATE_ADD( CBD.batch_place_date, INTERVAL 34 DAY )),CBB.cbfbatchid,CBD.breed_id) as fifthwmortality,
fuc_calculate_mortalityweekwise((DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 41 DAY ),INTERVAL 6 DAY )),(DATE_ADD( CBD.batch_place_date, INTERVAL 41 DAY )),CBB.cbfbatchid,CBD.breed_id) as sixwmortality,
fuc_calculate_mortalityweekwise((DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 48 DAY ),INTERVAL 6 DAY )),(DATE_ADD( CBD.batch_place_date, INTERVAL 46 DAY )),CBB.cbfbatchid,CBD.breed_id) as sevenwmortality,
fuc_calculate_mortalityweekwise((DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 55 DAY ),INTERVAL 6 DAY )),(DATE_ADD( CBD.batch_place_date, INTERVAL 27 DAY )),CBB.cbfbatchid,CBD.breed_id) as eightwmortality

FROM cbf_batchbalance CBB
	 LEFT JOIN cbf_batch_details CBD ON CBD.id =  CBB.cbfbatchid
	 LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid =   CBB.cbfbatchid
	 LEFT JOIN cbf_dailymortality CDM ON CDT.id = CDM.cbfdailytransactionid
	 LEFT JOIN cbf_farmerenquiry CFE  ON CFE.id = CBD.farmer_enquiry_id
	 LEFT JOIN cbf_line CL  ON  CL.id = CFE.line_id
	 LEFT JOIN `reference` REF ON CBD.statusid = REF.id
   
    
    WHERE CDT.companyid = p_companyid AND
		FIND_IN_SET( CBB.cbfbatchid,p_batch_id)
         Group By CBB.cbfbatchid) as temp;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbatchbalance_save`(
	IN p_id INT,
    IN p_updateddate DATE,
    IN p_cbfbatchid INT,
    IN p_cbfshedid INT,
    IN p_itemid INT,
    IN p_quantity INT,
    IN p_transactionname VARCHAR(100),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO cbf_batchbalance(updateddate, cbfbatchid,
        cbfshedid, itemid, quantity, transactionname, companyid)
        VALUES (p_updateddate, p_cbfbatchid,
        p_cbfshedid, p_itemid, p_quantity, p_transactionname, p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE cbf_batchbalance
        SET updateddate = p_updateddate, 
			cbfbatchid = p_cbfbatchid,
			cbfshedid = p_cbfshedid, 
			itemid = p_itemid, 
			quantity = p_quantity, 
			transactionname = p_transactionname,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_batchbalance', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbatchdetails_branchwisereasyforsale`(
	IN p_branchid INT(11),
    IN p_fromweight DECIMAL(15,3),
    IN p_toweight DECIMAL(15,3),
    IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';
	IF(p_fromweight = 0 AND p_toweight = 0)THEN
    
		SELECT CB.id as cbf_batchid,
			   FE.farmer_name,
               FE.id as farmerenquiryid,
			   CB.live_batch_qty,
               CB.body_weight as avgweight,
               (CB.live_batch_qty * CB.body_weight) as totalbatchsaleweight,
               (CB.live_batch_qty * CB.body_weight) as totalbatchweight,
               FE.id as farmerenquiryid,
               0 as batchcost,
               SDD.shed_name,
               CB.batch_number
               -- fnc_getChickCost(sourceid, transactionid, itemid) as chickCost
			   
		FROM cbf_batch_details CB
        LEFT JOIN cbf_batchbalance CBB ON CBB.cbfbatchid = CB.id
        LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CBB.cbfshedid
		LEFT JOIN cbf_farmerenquiry FE ON CB.farmer_enquiry_id = FE.id
		
		WHERE CB.statusid = 3023
		AND FE.branch_id = p_branchid
		AND CB.companyid = p_companyid
        GROUP BY CB.id;
        
	ELSE
    
		SELECT CB.id as cbf_batchid,
			   FE.farmer_name,
			   CB.live_batch_qty,
               CB.body_weight as avgweight,
               0 as batchsaleweight,
               (CB.live_batch_qty * CB.body_weight) as totalbatchsaleweight,
               (CB.live_batch_qty * CB.body_weight) as totalbatchweight,
               FE.id as farmerenquiryid,
               0 as batchcost,
			   SDD.shed_name,
               CB.batch_number
               
		FROM cbf_batch_details CB
		LEFT JOIN cbf_batchbalance CBB ON CBB.cbfbatchid = CB.id
        LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CBB.cbfshedid
		LEFT JOIN cbf_farmerenquiry FE ON CB.farmer_enquiry_id = FE.id
		
		WHERE CB.statusid = 3023
		AND FE.branch_id = p_branchid
		AND CB.body_weight BETWEEN p_fromweight AND p_toweight
		AND CB.companyid = p_companyid
        GROUP BY CB.id;
    
    END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbatchdetails_bystatusid`(
	IN p_statusid VARCHAR(100),
    IN p_companyid INT
)
BEGIN
   
		SELECT CB.id,
		       CB.farmer_enquiry_id,
			   CB.statusid,
			   REF.refname,
			   B.branchname,
			   CPS.cbfshedid,
               FESDD.shed_name,
			   CB.batch_number,
			   FE.farmer_name,
			   FE.farm_name
         FROM cbf_batch_details CB
         LEFT JOIN cbf_procurementscheduledetail CPS ON CPS.batchid = CB.id
         Inner JOIN cbf_farmerenquiry_sheddimensiondetail FESDD ON FESDD.id = CPS.cbfshedid
         Inner JOIN cbf_farmerenquiry FE ON FESDD.farmerenquiryid = FE.id
         LEFT JOIN commonbranch B ON B.id = FE.branch_id
		 LEFT JOIN `reference` REF ON REF.id = CB.statusid
         WHERE INSTR(p_statusid, '3021') AND CB.statusid = 3021
        
		 UNION ALL
         
         SELECT CB.id,
			    CB.farmer_enquiry_id,
			   CB.statusid,
			   REF.refname,
			   B.branchname,
			   CBB.cbfshedid,
               FESDD.shed_name,
			   CB.batch_number,
			   FE.farmer_name,
			   FE.farm_name
         FROM cbf_batch_details CB
         LEFT JOIN cbf_batchbalance CBB ON CBB.cbfbatchid = CB.id
         Inner JOIN cbf_farmerenquiry_sheddimensiondetail FESDD ON FESDD.id = CBB.cbfshedid
         Inner JOIN cbf_farmerenquiry FE ON FESDD.farmerenquiryid = FE.id
         LEFT JOIN commonbranch B ON B.id = FE.branch_id
		 LEFT JOIN `reference` REF ON REF.id = CB.statusid
         WHERE find_in_set(CB.statusid,p_statusid) AND CB.statusid <> 3021;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbatchdetails_delete`(
  IN p_id INT,
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN
	DELETE FROM cbf_batch_details WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'cbf_batch_details', p_id, 'delete', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbatchdetails_report`(
IN p_cbf_batchid VARCHAR(200),
IN p_companyid INT(11)
)
BEGIN
	SET @@sql_mode = ' ';

	select * ,  dailytransactionid,
				cbf_batchid,
				itemid,
				transactiondate,
				warehouseid,
				ROUND(IFNULL(((Cumulativemortality/itemopeningbal)*100),0),2) As Percumulativemortality,
				ROUND(IFNULL(((Cumulativeculls/itemopeningbal)*100),0),2) As Percumulativeculls,
				ROUND(IFNULL((totalwt/actualfeedconsumption),0),2) As actualbodyweight,
				(openingbal+inventorytransferin-inventorytransferout) As closingbal,
				(itemopeningbal+iteminventorytransferin-outwithmortality) As itemclosingbal,
                -- ROUND((IFNULL(conquantity,0)/IFNULL(avgweight,0)),2) as actualfcr,
                --  ROUND((IFNULL(conquantityingram,0)/IFNULL(avgweight,0)),2) as actualfcr,
                -- ((IFNULL(conquantityingram,0)/IFNULL(iteminventorytransferin,1))/IFNULL(avgweight,0)) as invconperbird,
		     	--  ((IFNULL(conquantityingram,0)/IFNULL(itemopeningbal,1))) as opeconperbird,
                conquantityingram as conquantityingram1,
                iteminventorytransferin as iteminventorytransferin1,
                avgweight as avgweight1,
                ROUND(IFNULL(IF(itemopeningbal=0 ,((IFNULL(conquantityingram,0)/IFNULL(iteminventorytransferin,0))/IFNULL(avgweight,0)),
                ((IFNULL(conquantityingram,0)/IFNULL(itemopeningbal,0))/IFNULL(avgweight,0))),0),2) as actualfcr
                 

	from(
	select
	CDT.id as dailytransactionid,
	CDT.transactiondate as finaltransactiondate,
    DATE_FORMAT( CDT.transactiondate,'%d/%m/%Y') as transactiondate,
	((DATEDIFF(CDT.transactiondate,CBD.batch_place_date))+1) As age,
    ROUND(IFNULL(fuc_calculate_agewisestdfcr((((DATEDIFF(CDT.transactiondate,CBD.batch_place_date))+1)),CBB.itemid),0),2) as fcr,
    IFNULL(fuc_calculate_agewisestdcon((((DATEDIFF(CDT.transactiondate,CBD.batch_place_date))+1)),CBB.itemid),0) as stdconsumption,
	CBB.cbfbatchid as cbf_batchid,
	CBB.cbfbatchid as batchid,
	CBB.cbfshedid as shedid,
    CBD.breed_id,
	CDC.breeditemid,
	CDC.itemid,
	WB.warehouseid,
	CFESD.warehousebinid,
	I.itemname as itemname,
    I1.itemname as birditemname,
	CDM.itemid as mortalittitemid,
	fnc_batchwise_culls_ongivendate_cbf(CDT.id,CBD.breed_id,CBB.cbfshedid) as totalculls,
	fnc_batchwise_mortality_ongivendate_cbf(CDT.id,CBD.breed_id,CBB.cbfshedid) as totalmortality,
	fnc_itembatchbalancedate(CDC.itemid,WB.warehouseid,CFESD.warehousebinid,CDT.transactiondate,p_companyid) as openingbal,
   
	IFNULL(fnc_itembatchbalancedate(CBD.breed_id,WB.warehouseid,CFESD.warehousebinid,CDT.transactiondate,p_companyid),0) as itemopeningbal,   
    
    /*(select CDC1.itemid from cbf_dailyconsumption CDC1 
	LEFT JOIN cbf_dailytransaction CDT1 ON CDT1.id = CDC1.cbfdailytransactionid 
	where CDC1.cbfdailytransactionid= CDC.cbfdailytransactionid and CDC1.consumptiontypeid = 861
	and DATE_SUB(CDT.transactiondate, INTERVAL 1 DAY))as itemidconid,*/

	(CBD.batch_place_qty-(IFNULL(fnc_calculate_cummamortalitycbf(CBB.cbfbatchid,CBB.cbfshedid,CDT.transactiondate,CDT.companyid),0)+IFNULL(fnc_calculate_cummalefemalecullscbf(CDT.cbf_batchid,CDT.shedid,CDT.transactiondate,CDT.companyid),0))) as finalliveqty,
	CBB.cbfbatchid as trbatchid,
	CBB.cbfshedid as trshrdid,
	fnc_calculate_cummalefemalecullscbf(CBB.cbfbatchid,CBB.cbfshedid,CDT.transactiondate,CDT.companyid) as Cumulativeculls,
	fnc_calculate_cummamortalitycbf(CBB.cbfbatchid,CBB.cbfshedid,CDT.transactiondate,CDT.companyid) as Cumulativemortality,

	CBD.batch_place_qty as chick_qty,
	fun_inventorytransferin(CDT.transactiondate,CFESD.warehousebinid,CDC.itemid) As inventorytransferin,
	fun_inventorytransferout(CDT.transactiondate,CFESD.warehousebinid,CDC.itemid) As inventorytransferout,
	fun_inventorytransferin(CDT.transactiondate,CFESD.warehousebinid,CBD.breed_id) As iteminventorytransferin,
    fun_inventorytransferout(CDT.transactiondate,CFESD.warehousebinid,CBD.breed_id) As outwithmortality,
    (IFNULL(fun_inventorytransferout(CDT.transactiondate,CFESD.warehousebinid,CBD.breed_id),0)-
	IFNULL(fnc_batchwise_mortality_ongivendate_cbf(CDT.id,CBD.breed_id,CBB.cbfshedid),0) -
	 IFNULL(fnc_batchwise_culls_ongivendate_cbf(CDT.id,CBD.breed_id,CBB.cbfshedid),0)) as iteminventorytransferout,
    IFNULL(CDC.quantity,0) as actualfeedconsumption,
	IFNULL(CDC.itemvalue,0) as feedconcost,
    fnc_convertfeed_bagtokg(CBB.cbfbatchid,CBB.cbfshedid,CDT.transactiondate,I.itemunitid,p_companyid) as conquantity,
	fnc_calculate_cummastdconcbf(CBB.cbfbatchid,CBB.cbfshedid,CDT.transactiondate,CDT.companyid)as cummulativestdfeed,
	fnc_calculate_cummactconcbf(CBB.cbfbatchid,CBB.cbfshedid,CDT.transactiondate,CDT.companyid)as cummulativeactualfeed,
    (fnc_calculate_cummactconcbf(CBB.cbfbatchid,CBB.cbfshedid,CDT.transactiondate,CDT.companyid)*1000)as conquantityingram,
    fnc_calculate_cummactconcostcbf(CBB.cbfbatchid,CBB.cbfshedid,CDT.transactiondate,CDT.companyid) as cummulativeactualfeedcost,
	IFNULL(CDC.quantity,0) as totalfeedconsumption,
	IFNULL(fnc_cbf_deliveredweight_ongivendate_cbf(CDT.transactiondate,CBB.cbfbatchid),0) as totaldeliveredqty,
	CDM.avgweight,
	CBD.batch_place_date,
	CBD.live_batch_qty,
	IFNULL((CDM.avgweight/CBD.live_batch_qty),0) as totalwt,
    R.refname as itemunitname,
    I.itemunitid
   

	FROM cbf_batchbalance CBB
    LEFT JOIN cbf_batch_details CBD ON CBD.id = CBB.cbfbatchid
	LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = CBD.id
	LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CFESD ON CFESD.id = CBB.cbfshedid
	LEFT JOIN warehousebin WB ON WB.id =  CFESD.warehousebinid
	LEFT JOIN cbf_dailyconsumption CDC ON  CDT.id = CDC.cbfdailytransactionid AND consumptiontypeid = 861
	LEFT JOIN cbf_dailymortality CDM ON CDT.id = CDM.cbfdailytransactionid -- AND CDC.cbfdailytransactionid
	LEFT JOIN item I ON I.id = CDC.itemid
    LEFT JOIN item I1 ON I1.id = CBD.breed_id
    LEFT JOIN `reference` R ON R.id = I.itemunitid


	 WHERE CDT.companyid = p_companyid AND
	 CBB.cbfbatchid = p_cbf_batchid
	 group by CDT.transactiondate,CDC.itemid 
     order by finaltransactiondate) as temp;
     
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbatchdetails_reportfinal`(
IN p_cbf_batchid VARCHAR(200),
IN p_companyid INT(11)
)
BEGIN
 SET @@sql_mode = ' ';

DROP TEMPORARY TABLE IF EXISTS tempfloackproductionsummaryeport;
CREATE TEMPORARY TABLE tempfloackproductionsummaryeport


          
SELECT 
		CBD.id as batchid,
		CBD.batch_number,
		CDT.id as transactionid,
        fnc_getcbfplacementdate(CBD.id,p_companyid)as placementdate,
        ((DATEDIFF((CURDATE()),(fnc_getcbfplacementdate(CBD.id,p_companyid))))+1) As age,
        MAX(CDT.transactiondate) AS tranc_date,
        fnc_cbf_cullsmortlity_uptotodate(CBD.id,(MAX(CDT.transactiondate)),p_companyid)as cullsmoor,
        fnc_cbfbatchwise_totalBirdSold(CBD.id,723,(MAX(CDT.transactiondate)),p_companyid) as birdsold,
        fnc_act_feed_consumption(CBD.id,(MAX(CDT.transactiondate)),(fnc_getcbfplacementdate(CBD.id,p_companyid)),861,p_companyid)as actfeedcon,
		fnc_std_feed_consumption(CBD.id,(MAX(CDT.transactiondate)),(fnc_getcbfplacementdate(CBD.id,p_companyid)),861,p_companyid)as stdfeedcon,
        fun_calculate_batchwiseweight((fnc_getcbfplacementdate(CBD.id,p_companyid)),CBD.id,(MAX(CDT.transactiondate)))as weight,
        fun_calculate_batchwiseweight((fnc_getcbfplacementdate(CBD.id,p_companyid)),CBD.id,(MAX(CDT.transactiondate)))as stdweight,
        fun_cbfcalculatefeedob((MAX(CDT.transactiondate)),MM.towarehousebinid,MM.itemid) AS openingbal,
        fun_inventorytransferin((MAX(CDT.transactiondate)),MM.towarehousebinid,MM.itemid) As inventorytransferin,
        fun_inventorytransferout((MAX(CDT.transactiondate)),MM.towarehousebinid,MM.itemid) As inventorytransferout,
        fun_cbfcalculatefeedob_cbf((MAX(CDT.transactiondate)),MM.towarehousebinid,MM.itemid)as closingbal,
        fnc_cbf_batchwise_birdliveqty(CBD.id,(MAX(CDT.transactiondate)),p_companyid)as chick_qty
        
INTO  @batchid,@batch_number,@transactionid,@placementdate,@age,@tranc_date,@cullsmoor,@birdsold,@actfeedcon,@stdfeedcon,@weight,
	  @stdweight,@openingbal,@inventorytransferin,@inventorytransferout,@closingbal,@chick_qty

FROM cbf_batch_details CBD
	 LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = CBD.id
	 LEFT JOIN cbf_farmerenquiry CFE  ON CDT.branchid = CFE.branch_id
	 LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CFESD ON CFE.id = CFESD.farmerenquiryid
     LEFT JOIN materialmovement MM ON  CFESD.warehousebinid = MM.towarehousebinid
     -- LEFT JOIN cbf_dailyconsumption CDC ON  CDT.id = CDC.cbfdailytransactionid

Where FIND_IN_SET( CBD.id,p_cbf_batchid)
 AND  CBD.companyid = p_companyid
 group by CBD.id;
 
 select  batchid,batch_number,chick_qty,transactionid,placementdate,age,tranc_date as transactiondate,cullsmoor as totalmortality,
		 SUM(cullsmoor) OVER(ORDER BY transactionid) AS Cumulativemortality,birdsold as totaldeliveredqty,actfeedcon as actualfeedconsumption,SUM(actfeedcon) OVER(ORDER BY transactionid) AS cummulativeactualfeed,
		 stdfeedcon as stdconsumption,SUM(stdfeedcon) OVER(ORDER BY transactionid) AS cummulativestdfeed,weight as avgweight,
		 stdweight as actualbodyweight,actfeedcon/weight as actualfcr,stdfeedcon/stdweight as fcr,openingbal as openingbal ,inventorytransferin,
		 inventorytransferout,closingbal as quantity,((openingbal+inventorytransferin)-inventorytransferout)as closingbal,
         (((SUM(cullsmoor) OVER(ORDER BY transactionid))/chick_qty)*100) As Percumulativemortality
		 

 
 FROM 
  tempfloackproductionsummaryeport
  group by batchid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbatchdetails_save`(
	IN p_id INT(11),
    IN p_farmer_enquiry_id INT(11),
    IN p_batch_number VARCHAR(50),
    IN p_batch_qty INT(11),
    IN p_batch_place_qty INT(11),
    IN p_live_batch_qty INT(11),
    IN p_breed_id INT(11),
    IN p_batch_schedule_id INT(11),
    IN p_line_supervisor_id INT(11),
    IN p_farm_rest_period INT(11),
    IN p_total_mortality INT(11),
    IN p_production_qty INT(11),
    IN p_excess_birds INT(11),
    IN p_shortage_chicks INT(11),
    IN p_current_density INT(11),
    IN p_processing_qty INT(11),
    IN p_batch_date DATE,
    IN p_batch_place_date DATE, 
    IN p_live_batch_date DATE,
    IN p_batch_lifting_date DATE,
    IN p_batch_close_date DATE,
    IN p_statusid INT(11),
    IN p_age INT(11),
    IN p_body_weight INT(11),
    IN p_culls INT(11),
    IN p_compensation INT(11),
    IN p_sale_qty INT(11),
    IN p_weak_chicks INT(11),
    IN p_batch_cost INT(11), 
    IN p_remark VARCHAR(250),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_batch_details(
                farmer_enquiry_id,
                batch_number,
                batch_qty ,
                batch_place_qty,
                live_batch_qty,
                breed_id,
                batch_schedule_id,
                line_supervisor_id,
                farm_rest_period,
                total_mortality,
                production_qty,
                excess_birds,
                shortage_chicks,
                current_density,
                processing_qty,
                batch_date,
                batch_place_date,
                live_batch_date,
                batch_lifting_date,
                batch_close_date,
                statusid,
                age,
                body_weight,
                culls,
                compensation,
                sale_qty,
                weak_chicks,
                batch_cost,
                remark,
                companyid
    )
			VALUES 
				(
                p_farmer_enquiry_id,
                p_batch_number,
                p_batch_qty ,
                p_batch_place_qty,
                p_live_batch_qty,
                p_breed_id,
                p_batch_schedule_id,
                p_line_supervisor_id,
                p_farm_rest_period,
                p_total_mortality,
                p_production_qty,
                p_excess_birds,
                p_shortage_chicks,
                p_current_density,
                p_processing_qty,
                p_batch_date,
                p_batch_place_date,
                p_live_batch_date,
                p_batch_lifting_date,
                p_batch_close_date,
                p_statusid,
                p_age,
                p_body_weight,
                p_culls,
                p_compensation,
                p_sale_qty,
                p_weak_chicks,
                p_batch_cost,
                p_remark,
                p_companyid
                );
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE cbf_batch_details
				SET farmer_enquiry_id = pfarmer_enquiry_id,
                batch_number = p_batch_number,
                batch_qty = p_batch_qty ,
                batch_place_qty = p_batch_place_qty,
                live_batch_qty = p_live_batch_qty,
                breed_id = p_breed_id,
                batch_schedule_id = p_batch_schedule_id,
                line_supervisor_id = p_line_supervisor_id,
                farm_rest_period = p_farm_rest_period,
                total_mortality = p_total_mortality,
                production_qty = p_production_qty,
                excess_birds = p_excess_birds,
                shortage_chicks = p_shortage_chicks,
                current_density = p_current_density,
                processing_qty = p_processing_qty,
                batch_date = p_batch_date,
                batch_place_date = p_batch_place_date,
                live_batch_date = p_live_batch_date,
                batch_lifting_date = p_batch_lifting_date,
                batch_close_date = p_batch_close_date,
                statusid = p_statusid,
                age = p_age,
                body_weight = p_body_weight,
                culls = p_culls,
                compensation = p_compensation,
                sale_qty = p_sale_qty,
                weak_chicks = p_weak_chicks,
                batch_cost = p_batch_cost,
                remark = p_remark,
                companyid = pcompanyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_batch_details', out_id, @action, p_userid);

    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbatchdetails_search`(
	IN p_companyid INT
)
BEGIN
	SET @@sql_mode = ' ';
	SELECT CB.id,
           SDD.warehousebinid,
           WB.warehouseid,
           SDD.id as shedid,
           SDD.shed_name,
           CB.batch_number,
           REF.refname,
           CB.statusid
    
	FROM cbf_batch_details CB
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = CB.farmer_enquiry_id
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.farmerenquiryid = FE.id
    LEFT JOIN warehousebin WB ON WB.id = SDD.warehousebinid
    LEFT JOIN `reference` REF ON REF.id = CB.statusid
    
	WHERE
    CB.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbatchdetails_select`(
  IN p_id INT 
)
BEGIN
SET @@sql_mode = ' ';
	SELECT  CB.id as cbf_batchid, 
		    CB.farmer_enquiry_id,
            FE.farmer_name,
            FE.farm_name,
			CB.batch_number,
			IFNULL(CB.batch_qty,0) as batch_qty,
			IFNULL(CB.batch_place_qty,0) as batch_place_qty,
			IFNULL(CB.live_batch_qty,0) as live_batch_qty,
			CB.breed_id,
            I.itemname as breedname,
			IFNULL(CB.batch_schedule_id,'Opening Batch') as batch_schedule_id,
			CB.line_supervisor_id,
            E.employeename,
			CB.farm_rest_period,
			-- IFNULL(CB.total_mortality,0) as total_mortality,
            fnc_calculate_cummamortalitycbfscreen(CB.id,CBB.cbfshedid) as total_mortality,
			IFNULL(CB.production_qty,0) as production_qty,
			IFNULL(CB.excess_birds,0) as excess_birds,
			IFNULL(CB.shortage_chicks,0) as shortage_chicks,
			-- IFNULL(CB.current_density,0) as current_density,
             ROUND(IFNULL(((FE.total_area)/CB.batch_place_qty),0),2) As current_density,
			IFNULL(CB.processing_qty,0) as processing_qty,
			CB.statusid,
			CB.age,
			IFNULL(CB.body_weight,0) as body_weight1,
            SUM(CDWD.deliveredwt)as deliveredwt,
            ROUND(IF(CB.live_batch_qty>0, ((fnc_calculate_cummactconbatchdetailscreen(CB.id,CB.companyid)/(CB.body_weight))/CB.live_batch_qty), ROUND(fnc_calculate_cummactconbatchdetailscreen(CB.id,CB.companyid)/(SUM(CDWD.deliveredwt)),2)),2)as fcr,
            (fnc_calculate_cummactconbatchdetailscreen(CB.id,CB.companyid)) as consumption,
            IF(CB.live_batch_qty>0, IFNULL((CB.body_weight*1000),0),(ROUND((SUM(CDWD.deliveredwt)/CB.sale_qty),2)*1000)) as body_weight,
			(IFNULL(CB.body_weight,0)*1000) as body_weight,
			IFNULL(CB.culls,0) as culls,
            fnc_calculate_cummalefemalecullscbfscreen(CB.id,CBB.cbfshedid) as culls,
			IFNULL(CB.compensation,0) as compensation,
			IFNULL(CB.sale_qty,0) as sale_qty,
			IFNULL(CB.weak_chicks,0) as weak_chicks,
			-- IFNULL(CB.batch_cost,0) as batch_cost,
			CB.remark,
            CCP.placement_date,
            DATE_FORMAT(CB.batch_place_date,'%d/%m/%Y') as placementdate,
            DATE_FORMAT(CB.batch_date,'%d/%m/%Y') as batch_date,
            DATE_FORMAT(CB.live_batch_date,'%d/%m/%Y') as live_batch_date,
            DATE_FORMAT(CB.batch_lifting_date,'%d/%m/%Y') as batch_lifting_date,
            DATE_FORMAT(CB.batch_close_date,'%d/%m/%Y') as batch_close_date,
            IFNULL(CC.administrationcost,0) as administrationcost,
            IFNULL(ROUND(fun_cbf_live_biredcost(CB.id,CB.companyid,CB.live_batch_date),3),0) as cost,
            ROUND(IFNULL(fun_cbf_live_biredcost(CB.id,CB.companyid,CB.live_batch_date),0),2)as batch_cost,
            FE.branch_id as branchid,
			CB.scheme_id,
            CC.`name` as schemename
    
    FROM cbf_batch_details CB
    LEFT JOIN cbf_batchbalance CBB ON CBB.cbfbatchid = CB.id
    LEFT JOIN cbf_chick_placement CCP ON CCP.batch_id = CB.id
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = CB.farmer_enquiry_id
	LEFT JOIN cbf_delivery_weights_detail CDWD ON CDWD.cbf_batchid = CB.id
    LEFT JOIN item I ON I.id = CB.breed_id
    LEFT JOIN employee E ON E.id = CB.line_supervisor_id
    LEFT JOIN coststructure CC ON CC.id = CB.scheme_id
    WHERE CB.id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbatchschedule_report`(
IN p_branch_id varchar(200),
IN p_line_id varchar(200),
IN p_companyid INT(11)

)
BEGIN
 SET @@sql_mode = ' ';


DROP TEMPORARY TABLE IF EXISTS tempbatchshedule ;
CREATE TEMPORARY TABLE tempbatchshedule 

SELECT
		 CB.branchname,
		 CFE.branch_id,
         CFE.id as farmid, 
         CFE.farmer_name,
         CFE.farm_name,
         CSDD.shed_name,
         CBD.id As id,
         CBD.batch_number As batchid,
         -- CBLF.id as lineid,
		 -- CBLF.linename,
         CL.id as lineid,
         CL.linename,
         CFE.total_area,
         -- CFE.density,
         ROUND(IFNULL(((CFE.total_area)/CBD.batch_place_qty),0),2) As density,
		 CBD.batch_qty,
         CBD.batch_place_qty
		 
         
        
   -- FROM commonbranchline CBL
    FROM cbf_farmerenquiry CFE
    
	LEFT JOIN commonbranch CB  ON  CB.id = CFE.branch_id
    LEFT JOIN cbf_line CL  ON  CL.id = CFE.line_id 
    LEFT JOIN cbf_batch_details CBD  ON  CBD.farmer_enquiry_id = CFE.id
	LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CSDD  ON  CSDD.farmerenquiryid = CFE.id
	LEFT JOIN cbf_procurementschedule CPS  ON  CPS.branchid = CFE.branch_id

    
    
   /* FROM cbf_farmerenquiry CFE
    LEFT JOIN cbf_batch_details CBD  ON  CFE.id = CBD.farmer_enquiry_id
    LEFT JOIN commonbranch CB ON CFE.branch_id =   CB.id 
    LEFT JOIN commonbranchline CBL ON  CFE.line_id =  CBL.id */
  
    
     WHERE CFE.company_id = p_companyid AND
	 FIND_IN_SET( CFE.branch_id, p_branch_id) AND
     FIND_IN_SET( CFE.line_id, p_line_id)   AND
     CPS.statusid = 3002 AND
	 CBD.statusid= 3022  -- show all placed batches
     GROUP BY  CBD.id;         
    
	DROP TEMPORARY TABLE IF EXISTS tempbatchshedule1;
	CREATE TEMPORARY TABLE tempbatchshedule1
    
select * from tempbatchshedule;    
-- for sub total--
	 DROP TEMPORARY TABLE IF EXISTS tempbatchshedule2;
	CREATE TEMPORARY TABLE tempbatchshedule2	
    SELECT * from (
    SELECT * from tempbatchshedule1
    UNION ALL	
				SELECT 
                
					'' as branchname,
                    '' as brnach_id,
					'' as farmid,
					'' as farmer_name,
					'' as farm_name,
                    'Sub Total' as shed_name,
                    '' as id,
					'' as batchid,
					       lineid,
                    '' as linename,
                    SUM(total_area) as total_area,
					'' as density,
                    SUM(batch_qty) as batch_qt,
					SUM(batch_place_qty) as batch_place_qty
				
				FROM
					tempbatchshedule
                   
						GROUP BY linename
                        ) as tmpresult; 
	
SELECT * FROM tempbatchshedule2;    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbatchstatus_report`(
IN p_branch_id varchar(200),
IN p_line_id varchar(200),
IN p_companyid INT(11)
)
BEGIN

SET @@sql_mode = ' ';

DROP TEMPORARY TABLE IF EXISTS tempbatchstatus ;
CREATE TEMPORARY TABLE tempbatchstatus 

SELECT
	     CB.branchname,
         CB.branchcode,
         CFE.id as farmid, 
         CFE.farmer_name,
         CFE.farm_name,
         CBD.statusid,
		 REF.refname as statusname,
         CBD.id As id,
		 CBD.batch_number As batchid,
         CL.id as lineid,
		 CL.linename,
         CFE.total_area,
         CFE.density,
		 CBD.live_batch_qty
       
	
     -- FROM commonbranchline CBL
      FROM cbf_farmerenquiry CFE
      
	LEFT JOIN commonbranch CB  ON  CB.id = CFE.branch_id
    LEFT JOIN cbf_line CL  ON  CL.id = CFE.line_id
    LEFT JOIN cbf_batch_details CBD  ON  CBD.farmer_enquiry_id = CFE.id
	LEFT JOIN `reference` REF ON  CBD.statusid = REF.id
  
    
     WHERE CFE.company_id = p_companyid AND
	 FIND_IN_SET( CFE.branch_id, p_branch_id) AND
     FIND_IN_SET( CFE.line_id, p_line_id)
    
    GROUP BY  CBD.id;       
    
	DROP TEMPORARY TABLE IF EXISTS tempbatchstatus1;
	CREATE TEMPORARY TABLE tempbatchstatus1
    
select *, 'item' as entity from tempbatchstatus;    
-- for sub total--
	 DROP TEMPORARY TABLE IF EXISTS tempbatchstatus2;
	CREATE TEMPORARY TABLE tempbatchstatus2	
    SELECT * from (
    SELECT * from tempbatchstatus1
    UNION ALL	
				SELECT 
                
					'' as branchname,
                    '' as branchcode,
					'' as farmid,
					'' as farmer_name,
					'' as farm_name,
                    '' as statusid,
                    '' as statusname,
                    '' as id,
					'' as batchid,
					 lineid,
                    'Sub Total' as linename,
                    SUM(total_area) as total_area,
					SUM(density) as density,
                    SUM(live_batch_qty) as batch_qt,
                    'subtotal' as entity
				
				FROM
					tempbatchstatus
                    
						GROUP BY lineid
                        ) as tmpresult; 
	
SELECT * FROM tempbatchstatus2;    


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbatchwisebirdcostreport_report`(
IN p_placementdate date,
IN p_batchid varchar(200),
IN p_companyid INT(11)

)
BEGIN
SET @@sql_mode = ' ';

DROP TEMPORARY TABLE IF EXISTS batchwisebirdcost;
CREATE TEMPORARY TABLE batchwisebirdcost 

SELECt*,  IFNULL(SUM(feedamount),0) as cummufeedamount,
				IFNULL((placeamount+feedamount+amount),0)as totalamt
FROM(

SELECt*,  (batch_place_qty * costperbird) as placeamount,
		  IFNULL((quantity/isherbal),0) as feedamount,
          IFNULL((quantity*rate),0)as amount,
		  IFNULL((cummufeedconsumption*rate),0)as cummufeedconsumptionamount
FROM(
SELECT  
		CDT.transactiondate,
        CDT.cbf_batchid,
		CB.batch_place_qty,
		CB.live_batch_qty,
        CB.costperbird,
        IFNULL((CB.sale_qty),0) as saleqty, 
        CB.culls,
        CB.total_mortality,
        DATE_FORMAT(CB.batch_place_date,'%d/%m/%Y') as placement_date,
        CDC.isherbal,
        CDC.isherbal as cummulativeamt,
		IFNULL((CDC.quantity),0) AS cummufeedconsumption,
        CDC.quantity AS quantity, -- feed consumption
      --  fun_calculate_cumulativestdfeed(CDT.transactiondate,CDT.cbf_batchid) as cummufeedconsumption,
        IFNULL((CDC.itemvalue/CDC.quantity),0) as rate
     
FROM cbf_dailytransaction CDT
LEFT JOIN cbf_batch_details CB ON CB.id = CDT.cbf_batchid
LEFT JOIN cbf_dailyconsumption CDC ON CDC.cbfdailytransactionid = CDT.id

      WHERE CDT.companyid = p_companyid AND
      FIND_IN_SET(  CDT.cbf_batchid, p_batchid)) as temp   )as temp1
      group By   cbf_batchid;   
      select * from batchwisebirdcost;
    
/*DROP TEMPORARY TABLE IF EXISTS batchwisebirdcostone;
CREATE TEMPORARY TABLE batchwisebirdcostone    */ 
 
/*select * from batchwisebirdcost;

DROP TEMPORARY TABLE IF EXISTS batchwisebirdcosttwo;
CREATE TEMPORARY TABLE batchwisebirdcosttwo	
 
 
SELECT * from (
SELECT * from batchwisebirdcostone
UNION ALL 

SELECT *,    IFNULL(SUM(feedamount),0) as cummufeedamount,
				IFNULL((placeamount+feedamount+amount),0)as totalamt
FROM(

SELECT *,    IFNULL((batch_place_qty * costperbird),0) as placeamount,
             IFNULL((quantity/isherbal),0) as feedamount,
             -- IFNULL(SUM(feedamount),0) as cummufeedamount,
			 IFNULL((rate*quantity),0) as amount,
			 IFNULL((cummufeedconsumption*rate),0)as cummufeedconsumptionamount
FROM(
SELECT 
        '' as transactiondate,
        'Sub Total' as cbf_batchid,
		SUM(batch_place_qty) as batch_place_qty,
		-- CB.batch_place_qty as batch_place_qty,
        '' as live_batch_qty,
		'' as costperbird,
        -- CB.costperbird as costperbird,
        '' as sale_qty,
        '' as culls,
		'' as total_mortality,
		'' as placement_date,
        '' as isherbal,
        -- SUM(CDC.isherbal) as isherbal,
        -- CDC.isherbal as cummulativeamt,
        '' as cummulativeamt,
        -- IFNULL(SUM(CDC.quantity),0) as cummufeedconsumption,
        ' ' as cummufeedconsumption,
        -- CDC.quantity as quantity,
        '' as quantity,
		-- SUM(quantity) AS quantity,
		-- IFNULL((CDC.itemvalue/CDC.quantity),0) as rate
        '' as rate

 FROM cbf_dailyconsumption CDC
 LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDC.cbfdailytransactionid
 LEFT JOIN `reference` REF ON CDT.statusid = REF.id
 LEFT JOIN cbf_batch_details CB ON CB.id = CDT.cbf_batchid


 Where  CDT.companyid = p_companyid AND
		REF.id= 862 and 863 AND
		FIND_IN_SET(  CDT.cbf_batchid, p_batchid))as tempone)as temptwo )as tempthree;
      
SELECT * FROM batchwisebirdcosttwo;  */  

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbatchwisebirdcost_report`(
	IN p_branch_id varchar(225),
	IN p_line_id varchar(225),
	IN p_companyid INT(11)
)
BEGIN
 SET @@sql_mode = ' ';


	SELECT 
		   B.branchname,
           CBL.linename,
		   FE.farmer_name,
           FE.id,
           DATE_FORMAT(CB.batch_place_date,'%d/%m/%Y') as placement_date,
		   DATE_FORMAT(CDT.transactiondate,'%d/%m/%Y') as transactiondate,
           ((DATEDIFF(CB.live_batch_date,CB.batch_place_date))+1) As age,
           -- fun_inventorytransferinreport(CDT.transactiondate,MM.towarehousebinid,MM.itemid) As inventorytransferin,
           -- fun_inventorytransferout(CDT.transactiondate,MM.fromwarehousebinid,MM.itemid) As inventorytransferout,
           fnc_feedtransferin(MM.towarehousebinid, MM.itemid, p_companyid) As inventorytransferin,
           fnc_feedtransferout(MM.towarehousebinid, MM.itemid, p_companyid) As inventorytransferout,
           CB.batch_place_qty,
           CB.live_batch_qty
    
    FROM cbf_dailytransaction CDT
    LEFT JOIN commonbranch B ON B.id = CDT.branchid
    LEFT JOIN commonbranchline CBL ON CBL.branchid = B.id
    LEFT JOIN cbf_batch_details CB ON CB.id = CDT.cbf_batchid
    LEFT JOIN cbf_farmerenquiry FE ON FE.line_id = CBL.id AND FE.id = CB.farmer_enquiry_id
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON FE.id = SDD.farmerenquiryid
    LEFT JOIN materialmovement MM ON MM.towarehousebinid = SDD.warehousebinid
    
    
    WHERE find_in_set(CDT.branchid, p_branch_id)
    AND FIND_IN_SET( CBL.id, p_line_id) AND FE.id IS NOT NULL
    
	GROUP BY CB.id, FE.id;
     
     /*
     
     SELECT 
        
        CB.branchname,
		CBL.linename,
        CFE.farmer_name,
        DATE_FORMAT( CCP.placement_date,'%d/%m/%Y') as placement_date,
		DATE_FORMAT( CDT.transactiondate,'%d/%m/%Y') as transactiondate,
        ((DATEDIFF(CBD.live_batch_date,CCP.placement_date))+1) As age,
        fun_inventorytransferinreport(CDT.transactiondate,MM.towarehousebinid,MM.itemid) As inventorytransferin,
        fun_inventorytransferout(CDT.transactiondate,MM.towarehousebinid,MM.itemid) As inventorytransferout,
        CCP.chick_qty,
        MM.itemid,
        MM.towarehousebinid,
        CDT.id,
        fun_cbfcalculatefeedob(CDT.transactiondate,MM.towarehousebinid,MM.itemid) AS openingbal,
        CDM.avgweight,
		-- CDWD.deliveredwt,
        CDC.quantity,
        fun_calculate_dailyculls(placement_date,CDT.cbf_batchid) As dailyculls,
        fun_calculate_dailyweight(placement_date,CDT.cbf_batchid) As dailywt,
        fun_calculate_dailymortality(placement_date,CDT.cbf_batchid) As dailymortality,
		fun_calculate_dailyliveqty(placement_date,CDT.transactiondate,CDT.cbf_batchid,CDT.id) As liveqty,
		-- fun_calculate_cbfclosingbalance(CDT.transactiondate,MM.towarehousebinid,MM.itemid),
		CBD.live_batch_qty, 
        CDM.totalmortality,
         fun_calculate_consumptionforbirdreport(placement_date,CDT.cbf_batchid) As totalfeedconsumption,
        -- (fnc_feedtransferin(MM.warehousebinid,CDC.itemid, p_companyid) - fnc_feedtransferout(MM.warehousebinid,CDC.itemid, p_companyid)) As totalfeedconsumption,
	    -- fuc_calculate_percentagemortality(CCP.chick_qty,CDM.totalmortality) As ptotalmortality,
        (CDM.avgweight*CBD.live_batch_qty) As totalwt,
        CFE.branch_id,
		CFE.line_id,
        CCP.batch_id,
		CS.chickcost,
        CS.feedcost,
        CS.medicinecost,
        CS.vaccinecost,
        -- CBD.id as batchid,
        CFESD.warehousebinid
        
       
     FROM cbf_dailytransaction CDT
	 LEFT JOIN cbf_farmerenquiry CFE  ON CDT.branchid = CFE.branch_id
     LEFT JOIN commonbranch CB ON CFE.branch_id = CB.id
	 LEFT JOIN commonbranchline CBL ON CFE.line_id = CBL.id
	 LEFT JOIN cbf_chick_placement CCP ON  CDT.cbf_batchid = CCP.batch_id 
     LEFT JOIN cbf_batch_details CBD ON CCP.batch_id = CBD.id
    -- LEFT JOIN cbf_delivery_weights_detail CDWD ON CDT.branchid = CDWD.cbf_batchid
   --  LEFT JOIN salesinvoice SI ON CDWD.cbf_delivery_weightsid = SI.salesorderid
     LEFT JOIN coststructure CS ON CS.id = CBD.scheme_id
     LEFT JOIN cbf_dailymortality CDM ON CDT.id = CDM.cbfdailytransactionid
     LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CFESD ON CFE.id = CFESD.farmerenquiryid
     LEFT JOIN materialmovement MM ON  CFESD.warehousebinid = MM.towarehousebinid
     LEFT JOIN cbf_dailyconsumption CDC ON  CDT.id = CDC.cbfdailytransactionid
	
	
    
    WHERE CDT.companyid = p_companyid AND
         FIND_IN_SET( CFE.branch_id, p_branch_id) AND
		 FIND_IN_SET( CFE.line_id, p_line_id) AND
         CDC.consumptiontypeid = 861 AND
         CDT.readyforsale = 1) as temp
         group by line_id; 
     
     */

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbatch_byfarmname`(
IN p_farmid varchar(1000),
IN p_companyid INT(11)

)
BEGIN
SET @@sql_mode = ' ';

SELECT  
        CFE.farm_name,
        -- CCP.batch_id,
        CBD.id as batch_id,
        CBD.id,
        CBD.batch_number
        
        
        
FROM cbf_farmerenquiry CFE 
-- LEFT JOIN cbf_farmerenquiry CFE  ON CBL.branchid = CFE.branch_id 
 -- LEFT JOIN cbf_chick_placement CCP  ON CFE.branch_id = CCP.branch_id 
  LEFT JOIN cbf_batch_details CBD  ON CFE.id = CBD.farmer_enquiry_id 
	

 WHERE CFE.company_id = p_companyid AND
    FIND_IN_SET( CFE.id, p_farmid)
    group By batch_id;     


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbatch_byshedname`(
IN p_shedid varchar(200),
IN p_companyid INT(11)

)
BEGIN
SET @@sql_mode = ' ';

select 
CBB.cbfshedid,
CBB.cbfbatchid,
CBD.batch_number

from cbf_batchbalance CBB
LEFT JOIN cbf_batch_details CBD ON CBD.id = CBB.cbfbatchid

where FIND_IN_SET (CBB.cbfshedid,p_shedid)
and CBB.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbirdsalesorderdetail_delete`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	DELETE FROM cbf_birdsalesorderdetail WHERE id = p_id AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbirdsalesorderdetail_save`(
	IN p_id INT,
    IN p_cbfbirdsalesorderid INT,
    IN p_cbf_batchid INT,
    IN p_farmerenquiryid INT,
    IN p_batchsaleweight DECIMAL(12,3),
    IN p_avgweight DECIMAL(9,3),
    IN p_birdqty INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_birdsalesorderdetail 
				(id, cbfbirdsalesorderid, cbf_batchid, farmerenquiryid, batchsaleweight, pendingweight,birdqty, companyid)
			VALUES 
				(p_id, p_cbfbirdsalesorderid, p_cbf_batchid, p_farmerenquiryid, p_batchsaleweight, p_batchsaleweight,p_birdqty, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_birdsalesorderdetail
				SET cbfbirdsalesorderid = p_cbfbirdsalesorderid,
					cbf_batchid = p_cbf_batchid,
                    farmerenquiryid = p_farmerenquiryid,
                    batchsaleweight = p_batchsaleweight, 
                    pendingweight = p_batchsaleweight,
                    birdqty = p_birdqty,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF((SELECT statusid FROM cbf_birdsalesorder WHERE id = p_cbfbirdsalesorderid) = 3082) THEN
		SET @salesdetailid = NULL;
		CALL spc_salesorderdetail_save(
			NULL, (SELECT stdsalesorderid FROM cbf_birdsalesorder WHERE id = p_cbfbirdsalesorderid),
			(SELECT breed_id FROM cbf_batch_details WHERE id = p_cbf_batchid),p_birdqty, 1,
			p_batchsaleweight, 1, 142, (SELECT rateperkg FROM cbf_birdsalesorder WHERE id = p_cbfbirdsalesorderid), 
			NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL,
			NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL,
			(p_batchsaleweight * (SELECT rateperkg FROM cbf_birdsalesorder WHERE id = p_cbfbirdsalesorderid)), p_companyid, p_userid, @salesdetailid
		);
        
	END IF;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_birdsalesorderdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbirdsalesorderdetail_search`(
	IN p_cbfbirdsalesorderid INT,
    IN p_companyid INT
)
BEGIN

	SELECT CSOD.*, CSO.stdsalesorderid, 
           DATE_FORMAT(CSO.orderdate,'%d/%m/%Y') as orderdate,
		   CSOD.batchsaleweight,
           IFNULL(CB.body_weight,0) as body_weight,
		   IFNULL((CSOD.batchsaleweight / CB.body_weight),0) as batchsaleqty,
           CSO.vendorid,
           P.partyname,
           FE.farmer_name,
           IFNULL(CB.body_weight,0) as avgweight,
           CSO.rateperkg,
           -- IFNULL((CSOD.pendingweight / CB.body_weight),0) as openqty,
           CSOD.birdqty as openqty,
           CB.live_batch_qty,
           (CB.live_batch_qty * CB.body_weight) as totalbatchsaleweight,
           CSOD.birdqty,
		   SDD.shed_name,
		   CB.batch_number
           
    FROM cbf_birdsalesorderdetail CSOD
    LEFT JOIN cbf_farmerenquiry FE ON CSOD.farmerenquiryid = FE.id
    LEFT JOIN cbf_birdsalesorder CSO ON CSO.id = p_cbfbirdsalesorderid
    INNER JOIN party P ON P.id = CSO.vendorid
    LEFT JOIN cbf_batch_details CB ON CB.id = CSOD.cbf_batchid
    LEFT JOIN cbf_batchbalance CBB ON CBB.cbfbatchid = CB.id
	LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CBB.cbfshedid
    WHERE CSOD.cbfbirdsalesorderid = p_cbfbirdsalesorderid AND CSOD.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbirdsalesorderdetail_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN


	SELECT * FROM cbf_birdsalesorderdetail WHERE id = p_id AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbirdsalesorder_bydate`(
	IN p_date DATE,
    IN p_branchid INT,
    IN p_companyid INT
)
BEGIN
SET @@sql_mode = ' ';

	SELECT DISTINCT
		   CSD.cbf_batchid,
		   CSD.pendingweight as orgplannedweight,
		   CASE WHEN (IFNULL(LSD.approvedweight,0) > 0 AND SUM(LSD.approvedweight) < CSD.pendingweight) 
           THEN CSD.pendingweight - SUM(LSD.approvedweight) ELSE CSD.pendingweight END as plannedweight,
           SUM(IFNULL(LSD.approvedweight,0)) as approvedweight, 
           0 as approvedweight,
           0 as batchcost,
           CS.vendorid,
           P.partyname,
           CSD.farmerenquiryid,
           FE.farmer_name,
           CSD.cbfbirdsalesorderid,
           (CB.live_batch_qty * CB.body_weight) as batchweight,
           FE.supervisor_id as line_supervisor_id,
           E.employeename,
           CS.rateperkg,
           CS.branchid,
           CS.stdsalesorderid,
           CS.statusid,
           SO.salesorderno
           
		   
	FROM cbf_birdsalesorderdetail CSD
    LEFT JOIN cbf_birdsalesorder CS ON CS.id = CSD.cbfbirdsalesorderid
    LEFT JOIN cbf_lifting_schedule_details LSD ON LSD.cbfbirdsalesorderid = CSD.cbfbirdsalesorderid
	LEFT JOIN salesorder SO ON SO.id = CS.stdsalesorderid
    LEFT JOIN cbf_delivery_weights_detail CDWD ON CSD.cbf_batchid = CDWD.cbf_batchid
    LEFT JOIN party P ON P.id = CS.vendorid
    LEFT JOIN cbf_batch_details CB ON CB.id = CSD.cbf_batchid
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = CSD.farmerenquiryid
    LEFT JOIN employee E ON E.id = FE.supervisor_id
    
    WHERE CS.orderdate = p_date
    AND CS.branchid = p_branchid
    AND CS.companyid = p_companyid
    AND CS.statusid = 3082
    AND (CSD.pendingweight>0)
    group by    SO.salesorderno,LSD.cbfbirdsalesorderid
	having ((ifnull(approvedweight,0) > 0 AND approvedweight < orgplannedweight) OR (Ifnull(approvedweight,0) = 0)); 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbirdsalesorder_delete`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	DELETE FROM cbf_birdsalesorderdetail WHERE cbfbirdsalesorderid = p_id AND companyid = p_companyid;
	DELETE FROM cbf_birdsalesorder WHERE id = p_id AND companyid = p_companyid;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbirdsalesorder_save`(
	IN p_id INT,
    IN p_stdsalesorderid INT,
    IN p_vendorid INT,
    IN p_branchid INT,
	IN p_orderdate DATE,
	IN p_totalsaleweight DECIMAL(12,3),
    IN p_rateperkg DECIMAL(9,3),
    IN p_fromweight DECIMAL(9,3),
    IN p_toweight DECIMAL(9,3),
    IN p_statusid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_birdsalesorder 
				(id, stdsalesorderid, vendorid, branchid, orderdate, 
                fromweight, toweight, totalsaleweight, rateperkg, statusid,
                companyid)
			VALUES 
				(p_id, p_stdsalesorderid, p_vendorid, p_branchid, p_orderdate, 
                p_fromweight, p_toweight, p_totalsaleweight, p_rateperkg, p_statusid, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_birdsalesorder
				SET stdsalesorderid = p_stdsalesorderid,
					vendorid = p_vendorid,
                    branchid = p_branchid,
                    orderdate = p_orderdate, 
                    fromweight = p_fromweight,
                    toweight = p_toweight,
					totalsaleweight = p_totalsaleweight,
                    rateperkg = p_rateperkg,
                    statusid = p_statusid,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF(p_statusid = 3082) THEN
		SET @salesid = NULL;
		set @out_seriesid = '0';
		call spc_financialyeardocseries_newseries('SO', p_companyid, @out_seriesid);
		CALL spc_salesorder_save(
			NULL, 723, (select @out_seriesid), p_vendorid, NULL,
			p_orderdate, NULL, NULL, p_orderdate, 
			1562, NULL, NULL, NULL,NULL, NULL, NULL, NULL,
			(p_totalsaleweight * p_rateperkg), NULL, NULL, 
			(p_totalsaleweight * p_rateperkg), NULL, NULL, 
			p_userid, 1362, p_companyid, p_userid, @salesid
		);
    
		-- update stdsalesorderid
		
		UPDATE cbf_birdsalesorder SET stdsalesorderid = @salesid WHERE id = out_id;
        
	END IF;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_birdsalesorder', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbirdsalesorder_search`(
	IN p_todaydate DATE,
	IN p_companyid INT
)
BEGIN

	SELECT CBS.id,
		   CBS.vendorid,
           CBS.branchid,
           DATE_FORMAT(CBS.orderdate,'%d/%m/%Y') as orderdate,
           CBS.totalsaleweight,
           CBS.statusid,
           REF.refname,
           P.partyname,
           CBS.rateperkg,
           CBS.fromweight,
           CBS.toweight,
           CBS.stdsalesorderid,
           SO.salesorderno
           
	FROM cbf_birdsalesorder CBS
    LEFT JOIN salesorder SO ON SO.id = CBS.stdsalesorderid
    LEFT JOIN `reference` REF ON REF.id = CBS.statusid
    LEFT JOIN party P ON P.id = CBS.vendorid
    
    WHERE   CBS.companyid = p_companyid
    order by CBS.id desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbirdsalesorder_select`(
	IN p_id INT,
	IN p_companyid INT
)
BEGIN

	SELECT CBS.id,
		   CBS.vendorid,
           CBS.branchid,
           DATE_FORMAT(CBS.orderdate,'%d/%m/%Y') as orderdate,
           CBS.totalsaleweight,
           CBS.fromweight,
           CBS.toweight,
           CBS.rateperkg,
           CBS.statusid,
           CBS.stdsalesorderid
           
	FROM cbf_birdsalesorder CBS
    
    WHERE CBS.id = p_id AND CBS.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbranchwisesupervisordetails_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM cbf_branchwisesupervisordetail WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbranchwisesupervisordetails_save`(
	IN p_id INT,
    IN p_branchwisesupervisorid INT,
    IN p_empids VARCHAR(100),
    IN p_lineid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
		INSERT INTO cbf_branchwisesupervisordetail 
				(branchwisesupervisorid, 
                empids,
                lineid,
                companyid)
			VALUES 
				(p_branchwisesupervisorid, 
                p_empids,
                p_lineid,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE cbf_branchwisesupervisordetail
			SET branchwisesupervisorid = p_branchwisesupervisorid,
				empids = p_empids,
                lineid = p_lineid,
				companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_branchwisesupervisordetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbranchwisesupervisordetails_select`(
	IN p_branchwisesupervisorid INT,
    IN p_companyid INT
)
BEGIN
	select BWS.id,
		   (SELECT GROUP_CONCAT(employeename) FROM `employee` WHERE FIND_IN_SET(id, BWS.empids)) as employeename,
           lineid,
           E.employeename,
           L.linename,
           BWS.empids
    
    from cbf_branchwisesupervisordetail BWS
    LEFT JOIN employee E ON E.id = BWS.empids
    LEFT JOIN cbf_line L ON L.id = BWS.lineid
    
    where branchwisesupervisorid = p_branchwisesupervisorid
    AND BWS.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbranchwisesupervisor_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM cbf_branchwisesupervisordetail WHERE branchwisesupervisorid = p_id;
	DELETE FROM cbf_branchwisesupervisor WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbranchwisesupervisor_save`(
	IN p_id INT,
    IN p_branchid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
		INSERT INTO cbf_branchwisesupervisor 
				(branchid, 
                companyid)
			VALUES 
				(p_branchid, 
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE cbf_branchwisesupervisor
			SET branchid = p_branchid, 
				company_id = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_branchwisesupervisor', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbranchwisesupervisor_select`(
	IN p_branchid INT,
	IN p_companyid INT
)
BEGIN
	select a.*, b.branchname, b.branchcode from cbf_branchwisesupervisor as a
    left OUTER join commonbranch as b on a.branchid = b.id
    where ((p_branchid is null) or (a.branchid=p_branchid)) AND
    ((p_companyid is null) or (a.companyid=p_companyid));
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfbroilerbirdbalance_report`(
In p_farmid varchar(1500),
IN p_batchid varchar(1500), 
IN p_todate DATE,
IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';

 DROP TEMPORARY TABLE IF EXISTS tempcbffinanceper;
 CREATE TEMPORARY TABLE tempcbffinanceper

select 
CBD.id as batchid,
CBD.batch_number,
CFE.id as farmid,
CFE.farmer_name,
CFE.farm_name,
DATE_FORMAT( max(CBD.batch_place_date),'%d/%m/%Y') as placementdate,
CBD.batch_place_qty,
(IFNULL(CBD.costperbird,0)*CBD.batch_place_qty) as totalchickcost,
IFNULL(fnc_calculate_cummalefemalecullscbf(CBB.cbfbatchid,CBB.cbfshedid,p_todate,p_companyid),0) as culls,
IFNULL(fnc_calculate_cummamortalitycbf(CBB.cbfbatchid,CBB.cbfshedid,p_todate,p_companyid),0) as onlytotalmortality,
IFNULL(fnc_cbfbatchwise_malefemalemortality_uptodate(CBB.cbfbatchid,p_todate,p_companyid),0)as totalmortality,

-- fnc_cbf_batchwise_birdliveqty(CBD.id,p_todate,(fnc_getcbfplacementdate(CBD.id,p_companyid)),p_companyid)as birdliveqty,
CBD.live_batch_qty as birdliveqty,
IFNULL(fnc_consumption_wise_cost_cbf(CBD.id,p_todate,861,p_companyid),0)as feedconcost,
IFNULL(fnc_consumption_wise_cost_cbf(CBD.id,p_todate,862,p_companyid),0)as medconcost,
IFNULL(fnc_consumption_wise_cost_cbf(CBD.id,p_todate,863,p_companyid),0) as vaccineconcost,
IFNULL(fnc_consumption_wise_cost_cbf(CBD.id,p_todate,864,p_companyid),0)as vitaminconcost,
fnc_getgoodsissue(CBD.id,723,p_todate)as othercost,
-- fnc_cbfbatchwise_totalBirdSold(CBD.id,FSDD.warehousebinid,723,p_todate,p_companyid)as totalbirdsold,
IFNULL(CBD.sale_qty,0) as totalbirdsold,
DATEDIFF(p_todate,(fnc_getcbfplacementdate(CBD.id,p_companyid)))as ageindays,
-- fnc_act_feed_consumption(CBD.id,(max(CDW.liftingdate)),(fnc_getcbfplacementdate(CBD.id,p_companyid)),861,p_companyid)as actfeedcon,
fnc_act_feed_consumption(CBD.id,p_todate,CBD.batch_place_date,861,p_companyid)as actfeedcon,

DATE_FORMAT( max(CDW.liftingdate),'%d/%m/%Y') as lastliftimgdate,
fun_calculate_batchwiseweight((fnc_getcbfplacementdate(CBD.id,p_companyid)),CBD.id,p_todate)as weight,
DATE_FORMAT( max(CBD.live_batch_date),'%d/%m/%Y') as live_batch_date,
REF.refname as batchstatus,
(IFNULL(CBD.costperbird,0)*CBD.batch_place_qty) as purvalue,
(IFNULL(CS.administrationcost,0)*CBD.batch_place_qty) as administrationcost



from cbf_batch_details CBD
LEFT JOIN cbf_batchbalance CBB ON CBD.id = CBB.cbfbatchid
LEFT JOIN cbf_farmerenquiry CFE  ON CFE.id = CBD.farmer_enquiry_id
LEFT JOIN cbf_farmerenquiry_sheddimensiondetail FSDD  ON CFE.id = FSDD.farmerenquiryid
LEFT JOIN cbf_delivery_weights_detail CDWD ON CDWD.cbf_batchid = CBD.id
LEFT JOIN cbf_delivery_weights CDW ON   CDW.id = CDWD.cbf_delivery_weightsid
LEFT JOIN coststructure CS ON CS.id = CBD.scheme_id
LEFT JOIN coststructuredetail CSD ON CSD.coststructureid = CS.id
LEFT JOIN `reference` REF ON  CBD.statusid = REF.id

where  
			find_in_set(CBD.id,p_batchid)
            group by CBD.id;
            
select 
batch_number,batchid,farmid,farmer_name,farm_name,placementdate,batch_place_qty,totalchickcost,culls,onlytotalmortality,totalmortality,birdliveqty,
feedconcost,medconcost,vitaminconcost,vaccineconcost,othercost,totalbirdsold,ageindays,actfeedcon,lastliftimgdate,weight,
live_batch_date,batchstatus,purvalue,administrationcost,(batch_place_qty-(onlytotalmortality+culls)),
ROUND(IFNULL((purvalue+administrationcost+feedconcost+medconcost+vaccineconcost+vitaminconcost),0),3) as totalcost,
ROUND(IFNULL(((purvalue+administrationcost+feedconcost+medconcost+vaccineconcost+vitaminconcost)/(batch_place_qty-(onlytotalmortality+culls))),0),2) as costperbird

FROM 
tempcbffinanceper
group by batchid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfBroiler_Batch_Financial_Performance_report`(
In p_farmid varchar(100),
IN p_fromdate DATE,
IN p_todate DATE,
IN p_companyid INT)
BEGIN

SET @@sql_mode = '';
DROP TEMPORARY TABLE IF EXISTS tempcbffinanceper;
CREATE TEMPORARY TABLE tempcbffinanceper

select CBD.id as batchid,CBD.batch_number,
CFE.id as farmid,CFE.farmer_name,CFE.farm_name,
fnc_getcbfplacementdate(CBD.id,p_companyid)as placementdate,CDW.liftingdate,CDWD.deliveredqty,
-- DATEDIFF(p_todate,fnc_getcbfplacementdate(CBD.id,p_companyid))as age,
((DATEDIFF(p_todate,CBD.batch_place_date))+1) As age,
max(CDW.liftingdate)as lastliftimgdate,
(IFNULL(CBD.costperbird,0)*CBD.batch_place_qty) as purvalue,
-- DATE_FORMAT( CDW.liftingdate,'%d/%m/%Y') as lastliftimgdate,
fnc_act_feed_consumption(CBD.id,(max(CDW.liftingdate)),(fnc_getcbfplacementdate(CBD.id,p_companyid)),861,p_companyid)as actfeedcon,
fnc_std_feed_consumption(CBD.id,(max(CDW.liftingdate)),(fnc_getcbfplacementdate(CBD.id,p_companyid)),861,p_companyid)as stdfeedcon,
fun_calculate_batchwiseweight((fnc_getcbfplacementdate(CBD.id,p_companyid)),CBD.id,p_todate)as weight,

fnc_cbf_batchwise_birdliveqty(CBD.id,p_todate,(fnc_getcbfplacementdate(CBD.id,p_companyid)),p_companyid)as birdliveqty,
fnc_cbfbatchwise_malefemalemortality_uptodate(CBD.id,p_todate,p_companyid)as totalmortality,
-- fnc_cbfbatchwise_totalBirdSold(CBD.id,723,p_todate,p_companyid)as totalbirdsold,
CBD.sale_qty as totalbirdsold,
-- fun_calculate_batchwiseweight((fnc_getcbfplacementdate(CBD.id,p_companyid)),CBD.id,p_todate)totalbirdweight,
-- (CBD.body_weight*1000) as totalbirdweight,
IFNULL(SUM(CDWD.deliveredwt),0) as deliveredwt,
fnc_consumption_wise_cost_cbf(CBD.id,p_todate,861,p_companyid)as feedconcost,
fnc_consumption_wise_cost_cbf(CBD.id,p_todate,862,p_companyid)as medconcost,
fnc_consumption_wise_cost_cbf(CBD.id,p_todate,863,p_companyid)as vitconcost,
fnc_consumption_wise_cost_cbf(CBD.id,p_todate,864,p_companyid)as vaccconcost,
fnc_getgoodsissue(CBD.id,723,p_todate)as othercost,
(IFNULL(CS.administrationcost,0)*CBD.batch_place_qty) as administrationcost,
CBD.batch_place_qty as batch_place_qty,
fnc_std_feed_consumptioncbf(CBD.breed_id,(DATEDIFF(p_todate,fnc_getcbfplacementdate(CBD.id,p_companyid))),p_companyid) as stdfeedconone,
fnc_std_bodyweightcbf(CBD.breed_id,(DATEDIFF(p_todate,fnc_getcbfplacementdate(CBD.id,p_companyid))),p_companyid) as stdbodyweight,
fnc_std_fcr_cbf(CBD.breed_id,((DATEDIFF(p_todate,CBD.batch_place_date))+1),p_companyid) as stdfcr,
(fnc_cbf_deliveredweight_uptogivendate_cbf(p_todate,CBD.id)/CBD.sale_qty)as  avgsize,
IF(CBD.live_batch_qty>0, (((fnc_calculate_cummactconbatchdetailscreen(CBD.id,CBD.companyid)*1000)/fnc_cbf_batchwise_birdliveqty(CBD.id,p_todate,(fnc_getcbfplacementdate(CBD.id,p_companyid)),p_companyid))/((CBD.body_weight)*1000)), ROUND((fnc_calculate_cummactconbatchdetailscreen(CBD.id,CBD.companyid)*1000)/((SUM(CDWD.deliveredwt)*1000)),2))as fcr
-- fnc_calculate_cummactconbatchdetailscreen(CBD.id,CBD.companyid) as cumactcon

 

INTO 
@batchid,@batch_number,@farmid,@farmer_name,@farm_name,@placementdate,@liftingdate,@deliveredqty,@age,@lastliftimgdate,@purvalue,
@actfeedcon,@stdfeedcon,@weight,@birdliveqty,@totalmortality,@totalbirdsold,@deliveredwt,@feedconcost,
@medconcost,@vitconcost,@vaccconcost,@othercost,@administrationcost,@batch_place_qty,@stdfeedconone,@stdbodyweight,@stdfcr,@avgsize,@fcr



from cbf_batch_details CBD
LEFT JOIN cbf_farmerenquiry CFE  ON CFE.id = CBD.farmer_enquiry_id
LEFT JOIN cbf_delivery_weights_detail CDWD ON CDWD.cbf_batchid = CBD.id
LEFT JOIN cbf_delivery_weights CDW ON   CDW.id = CDWD.cbf_delivery_weightsid
LEFT JOIN coststructure CS ON CS.id = CBD.scheme_id
LEFT JOIN coststructuredetail CSD ON CSD.coststructureid = CS.id
where CFE.id = p_farmid;
-- group by CBD.id;


-- select * from tempcbffinanceper;

select 
batchid,batch_number,farmid,farmer_name,farm_name,
-- placementdate,
DATE_FORMAT( placementdate,'%d/%m/%Y') as placementdate,
-- liftingdate,
DATE_FORMAT( liftingdate,'%d/%m/%Y') as liftingdate,
deliveredqty,
age,
-- lastliftimgdate,
DATE_FORMAT( lastliftimgdate,'%d/%m/%Y') as lastliftimgdate,
purvalue,
administrationcost,
actfeedcon,stdfeedcon,weight,birdliveqty,totalmortality,
totalbirdsold,deliveredwt,feedconcost,
medconcost,vitconcost,vaccconcost,othercost,
-- fun_batch_ageindays(lastliftimgdate,placementdate,batchid)as age,
ROUND((actfeedcon/birdliveqty),3)as actfeedconperbird,
ROUND((stdfeedconone/birdliveqty),3)as stdfeedconperbird,
 -- ROUND(IFNULL(((fwconsumption*1000)/((fweekbw)*fwliveqty)),0),2) as fweekfcr,
ROUND(fcr,2)as actfcr,
-- ROUND(((actfeedcon*1000)/((totalbirdweight)*birdliveqty)),3)as fcr,
ROUND(IFNULL(stdfcr,0),2) as stdfcr,
-- ROUND(((stdfeedcon*1000)/((totalbirdweight)*birdliveqty)),3)as stdfcr,
ROUND(((totalmortality/batch_place_qty)*100),2)as morper,
batch_place_qty,
(purvalue+administrationcost+feedconcost+medconcost+vitconcost+vaccconcost+othercost)as totalcost,
ROUND(((purvalue+administrationcost+feedconcost+medconcost+vitconcost+vaccconcost+othercost)/birdliveqty),2)as  costperbird,
stdfeedconone,
stdbodyweight,
avgsize

FROM 
tempcbffinanceper
group by batchid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfBroiler_Batch_Reconcilation_report`(
-- In farmid varchar(1500),
In p_batchid varchar(1500),
IN p_fromdate DATE,
IN p_todate DATE,
IN p_companyid INT)
BEGIN

SET @@sql_mode = '';

DROP TEMPORARY TABLE IF EXISTS tempcbffinanceper;
CREATE TEMPORARY TABLE tempcbffinanceper

select CBD.id as batchid,CBD.batch_number,
CFE.id as farmid,CFE.farmer_name,CFE.farm_name,L.locationname,REF.refname,
CBD.batch_place_date as placementdate,
CBD.live_batch_qty as liveqty,
CBD.batch_place_qty,
CBD.live_batch_date,CDW.liftingdate,CDWD.deliveredqty,
max(CDW.liftingdate)as lastliftimgdate,
IFNULL(fnc_calculate_cummalefemalecullscbf(CBB.cbfbatchid,CBB.cbfshedid,p_todate,p_companyid),0) as culls,
IFNULL(fnc_calculate_cummamortalitycbf(CBB.cbfbatchid,CBB.cbfshedid,p_todate,p_companyid),0) as mortality,
fnc_cbfbatchwise_malefemalemortality_uptodate(CBD.id,p_todate,p_companyid)as totalmortality,
fnc_cbf_batchwise_birdliveqty(CBD.id,p_todate,CBD.batch_place_date,p_companyid)as birdliveqty,
fnc_std_feed_consumption(CBD.id,p_todate,CBD.batch_place_date,861,p_companyid)as stdfeedcon,
fun_calculate_batchwiseweight(CBD.batch_place_date,CBD.id,p_todate)as weight,
fnc_cbf_deliveredquantity_uptogivendate_cbf(p_todate,CBD.id) as totalbirdsold,
fnc_cbf_deliveredcost_uptogivendate_cbf(p_todate,CBD.id) as totalbirdsoldcost,
fnc_cbf_deliveredweight_uptogivendate_cbf(p_todate,CBD.id) as totalsoldweight,
fnc_cbfchicks_placementqty(CBD.id,p_companyid)as placeqty,
DATEDIFF(p_todate,CBD.batch_place_date)as ageindays,
-- (CBD.batch_place_qty*costperbird) as purvalue,
fnc_consumption_wise_cost_cbf(CBD.id,p_todate,861,p_companyid)as feedconcost,
fnc_consumption_wise_cost_cbf(CBD.id,p_todate,862,p_companyid)as medconcost,
fnc_consumption_wise_cost_cbf(CBD.id,p_todate,863,p_companyid)as vaccconcost,
fnc_consumption_wise_cost_cbf(CBD.id,p_todate,864,p_companyid)as vitconcost,
fnc_getgoodsissue(CBD.id,723,p_todate)as othercost,
(IFNULL(CBD.costperbird,0)*CBD.batch_place_qty) as purvalue,
(IFNULL(CS.administrationcost,0)*CBD.batch_place_qty) as administrationcost

from cbf_batch_details CBD
LEFT JOIN cbf_batchbalance CBB ON CBD.id = CBB.cbfbatchid
LEFT JOIN cbf_farmerenquiry CFE  ON CFE.id = CBD.farmer_enquiry_id
LEFT JOIN cbf_delivery_weights_detail CDWD ON CDWD.cbf_batchid = CBD.id
LEFT JOIN cbf_delivery_weights CDW ON   CDW.id = CDWD.cbf_delivery_weightsid
LEFT JOIN coststructure CS ON CS.id = CBD.scheme_id
LEFT JOIN coststructuredetail CSD ON CSD.coststructureid = CS.id
LEFT JOIN location L ON L.branchid = CFE.branch_id
LEFT JOIN `reference` REF ON  CBD.statusid = REF.id
where find_in_set(CBD.id,p_batchid) 
group by CBD.id;
-- select * from tempcbffinanceper;

select 
batchid,batch_number,farmid,farmer_name,farm_name,locationname,refname as batchstatus,
-- placementdate,
DATE_FORMAT( placementdate,'%d/%m/%Y') as placementdate,
DATE_FORMAT( live_batch_date,'%d/%m/%Y') as live_batch_date,
DATE_FORMAT( liftingdate,'%d/%m/%Y') as liftingdate,
DATE_FORMAT( lastliftimgdate,'%d/%m/%Y') as lastliftimgdate,
deliveredqty,
stdfeedcon,weight,birdliveqty,totalmortality,
totalbirdsold,totalbirdsoldcost,placeqty,ageindays,purvalue,administrationcost,feedconcost,
medconcost,vitconcost,vaccconcost,othercost,
ROUND(IFNULL(((purvalue+administrationcost+feedconcost+medconcost+vaccconcost+vitconcost)/(batch_place_qty-(mortality+culls))),0),2) as costperbird,
ROUND(IFNULL((purvalue+administrationcost+feedconcost+medconcost+vaccconcost+vitconcost),0),3) as totalcost

FROM 
tempcbffinanceper
group by batchid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfchickplacementregister_report`(
IN p_fromdate date,
IN p_todate date,
IN p_branch_id LONGTEXT,
IN p_line_id LONGTEXT,
IN p_companyid INT(11)
)
BEGIN

SET @@sql_mode = ' '; 

DROP TEMPORARY TABLE IF EXISTS tempchickplacement ;
CREATE TEMPORARY TABLE tempchickplacement 

SELECT  CBD.batch_place_date as placement_date,
        CCP.batch_id,
		CBD.batch_number,
        CFE.farmer_name,
		CFE.farm_name,
		CFE.branch_id,
        CFE.line_id,
        CB.branchname,
		CL.linename,
        CFE.total_area,
        CFE.density,
		(IFNULL(CCP.chick_qty,IFNULL(COBD.placementqty,0))) as batch_place_qty,
        IFNULL(CCP.free_qty,IFNULL(COBD.excess,0))as free_qty,
        IFNULL(CCP.culls,0)as culls,
        IFNULL(CCP.shortage,IFNULL(COBD.shortage,0))as shortage,
        IFNULL(CCP.mortality,IFNULL(COBD.mortality,0))as mortality,
         (IFNULL(CCP.chick_qty,IFNULL(COBD.placementqty,0))+IFNULL(CCP.culls,0)+IFNULL(CCP.shortage,IFNULL(COBD.shortage,0))+IFNULL(CCP.mortality,IFNULL(COBD.mortality,0))--IFNULL(CCP.free_qty,IFNULL(COBD.excess,0)))as chick_qty
        
      
         
    FROM cbf_farmerenquiry CFE
	LEFT JOIN commonbranch CB  ON  CB.id = CFE.branch_id
    LEFT JOIN cbf_line CL  ON  CL.id = CFE.line_id
    LEFT JOIN cbf_batch_details CBD  ON  CBD.farmer_enquiry_id = CFE.id
	LEFT JOIN cbf_chick_placement CCP ON CFE.id = CCP.farmer_enquiry_id
    LEFT JOIN cbf_openingbalancedetail COBD ON COBD.farmerenquiryid = CFE.id
    
   WHERE    CBD.batch_place_date BETWEEN p_fromdate AND p_todate AND
			CFE.company_id = p_companyid AND
			FIND_IN_SET( CFE.branch_id, p_branch_id) AND
			FIND_IN_SET( CFE.line_id, p_line_id)
             GROUP BY   CBD.id,CL.id;     
             
 DROP TEMPORARY TABLE IF EXISTS tempchickplacement1;
 CREATE TEMPORARY TABLE tempchickplacement1
    
select * from tempchickplacement;

-- for sub total--
	DROP TEMPORARY TABLE IF EXISTS tempchickplacement2;
	CREATE TEMPORARY TABLE tempchickplacement2	
    SELECT * from (
    SELECT * from tempchickplacement1
    UNION ALL	
				SELECT 
					'Sub Total' as placement_date,
					'' as batch_id,
                    '' as batch_number,
					'' as farmer_name,
					'' as farm_name,
                    '' as branch_id,
					'' as line_id,
                    '' as branchname,
                    'Sub Total' as linename,
                    SUM(total_area) as total_area,
					SUM(density) as density,
                    SUM(batch_place_qty) as batch_place_qty,
                    SUM(free_qty) as free_qty,
					SUM(culls) as culls,
					SUM(shortage) as shortage,
					SUM(mortality)as mortality,
					SUM(chick_qty) as chick_qty
				
				FROM
					tempchickplacement  
						
                        ) as tmpresult; 
	
SELECT *, DATE_FORMAT( placement_date,'%d/%m/%Y') as finalplacedate
 FROM tempchickplacement2 ORDER BY placement_date ;      
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfchickplacement_delete`(
  IN p_id INT,
  IN p_companyid INT
)
BEGIN
	DELETE FROM cbf_chick_placement WHERE id = p_id AND companyid = p_companyid;
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'cbf_chick_placement', p_id, 'delete', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfchickplacement_save`(
	IN p_id INT(11),
    IN p_batch_id INT(11),
    IN p_sourceid INT(11),
    IN p_requestid INT(11),
    IN p_create_batch_schedule_id INT(11),
    IN p_transaction_id INT,
    IN p_placement_date DATE,
    IN p_first_day_date DATE,
    IN p_status_id INT(11),
    IN p_std_lifting_age INT(11),
    IN p_branch_id INT(11),
    IN p_farmer_enquiry_id INT(11),
    IN p_shed_id INT(11),
    IN p_chick_qty INT(11),
    IN p_week_chicks INT(11),
    IN p_free_qty INT(11),
    IN p_culls INT(11),
    IN p_shortage INT(11),
    IN p_mortality INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    SET @grpoid = null;
	SET @grpodetailid = null;
    SET @unitprice = 0;
    SET @finishgooditemid = null;
    SET @finishgooditemname = null;
    SET @finishgooditemunitid = null;
    
    SELECT CS.finishgooditemid, I.itemname, I.itemunitid
    INTO @finishgooditemid, @finishgooditemname, @finishgooditemunitid
    FROM cbfsetting CS
    LEFT JOIN item I ON I.id = CS.finishgooditemid
    LIMIT 1;    
            
	SET @itemid = NULL;
	SET @itemname = NULL;
	SET @batch_qty = NULL;
	SET @itemunitid = NULL;
	
	SELECT CB.breed_id, I.itemname, CB.batch_qty, I.itemunitid
	INTO @itemid, @itemname, @batch_qty, @itemunitid
	FROM cbf_batch_details CB
	LEFT JOIN item I ON I.id = CB.breed_id
	WHERE CB.id = p_batch_id AND CB.companyid = p_companyid LIMIT 1;

	IF(NULLIF(p_id, '0') IS NULL) THEN
    
		SET @warehouseid = null;
		SET @warehousebinid = null;
		
		SELECT SDD.warehousebinid, WB.warehouseid
		INTO @warehousebinid, @warehouseid
		FROM cbf_farmerenquiry_sheddimensiondetail SDD
		LEFT JOIN warehousebin WB ON WB.id = SDD.warehousebinid
		WHERE SDD.id = p_shed_id LIMIT 1;
    
		IF(p_sourceid = 261)THEN
        
			IF EXISTS(SELECT SUM(itemvalue)/SUM(quantity) as unitcost FROM materialmovement WHERE itemid = @itemid) THEN
				SELECT (SUM(itemvalue)/SUM(quantity)) INTO @unitprice FROM materialmovement WHERE itemid = @itemid;
			ELSE
				SELECT unitcost INTO @unitprice FROM item WHERE id = @itemid;
			END IF;
			
			SET @out_transferid = null;
            SET @out_transferdetailid = null;
            
            CALL spc_materialtransfer_save(
				NULL, 502, 501, 582, p_placement_date, p_placement_date,NULL,
				NULL, NULL,
				 622, NULL,
				p_batch_id, p_requestid, p_companyid, p_userid, @out_transferid
			);
			
			CALL spc_materialtransferdetail_save(
				NULL, @out_transferid,
				@warehouseid, @warehousebinid,
				@itemid, @itemname,
				p_chick_qty, p_chick_qty, 
				@itemunitid, p_batch_id, p_userid, p_companyid, @out_transferdetailid
			);
            
            -- ISSUE DOC ITEM
            SET @missueid = null;
            CALL spc_materialissue_save(
				NULL, p_placement_date, 383, NULL, 
                362, NULL, p_userid, @warehouseid, 
				@warehousebinid, p_userid, p_placement_date,
                p_companyid, p_userid, @missueid
            );
            
            SET @missuedetailid = null;
            CALL spc_materialissuedetail_save(
				NULL, @missueid, @itemid, @itemname,
                p_chick_qty, @unitprice, (p_chick_qty * @unitprice),
                @itemunitid, p_batch_id,
                p_companyid, p_userid, @missuedetailid
            );
            
            SET @mmovementid = null;
            CALL spc_materialmovement_save(
				NULL, @itemid, p_batch_id,
                683, @missueid, p_placement_date, p_chick_qty, @warehouseid, 
				@warehousebinid, NULL, NULL, (p_chick_qty * @unitprice), p_companyid,
                p_userid, @mmovementid
            );
            
            -- ISSUE DOC ITEM END
            
            -- RECEIPT FINISH GOOD ITEM
            SET @finishgoodunitprice = 0;
            IF EXISTS(SELECT SUM(itemvalue)/SUM(quantity) as unitcost FROM materialmovement WHERE itemid = @finishgooditemid and transactiontypeid = 684) THEN
				SELECT (SUM(itemvalue)/SUM(quantity)) INTO @finishgoodunitprice FROM materialmovement WHERE itemid = @finishgooditemid and transactiontypeid = 684;
			ELSE
				SELECT unitcost INTO @finishgoodunitprice FROM item WHERE id = @finishgooditemid;
			END IF;
            
            SET @mreceiptid = null;
            CALL spc_materialreceipt_save(
				NULL, p_placement_date, 343, NULL, 322,
                NULL, p_userid, p_userid, p_placement_date, 
                p_companyid, p_userid, @mreceiptid
            );

			SET @itembatch = null;
            SET @itemgroup = null;
            
			select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch from item I
			INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

			WHERE I.id = @finishgooditemid;
            
            SET @mreceiptdetailid = null;
            CALL spc_materialreceiptdetail_save(
				NULL, @mreceiptid, @finishgooditemid,
                @finishgooditemname, p_chick_qty, @unitprice,
                (p_chick_qty * @finishgoodunitprice), @finishgooditemunitid, 
                @itembatch, @warehouseid, @warehousebinid,
                p_companyid, p_userid, NULL, @mreceiptdetailid
            );
            
            SELECT itemgroupid INTO @itemgroup FROM item WHERE id = @finishgooditemid;
        
			UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
			
			WHERE id = @itemgroup;
            
            SET @mmovementid1 = null;
            CALL spc_materialmovement_save(
				NULL, @finishgooditemid, @itembatch,
                684, @mreceiptid, p_placement_date, p_chick_qty, NULL, NULL, @warehouseid, 
				@warehousebinid, (p_chick_qty * @finishgoodunitprice), p_companyid,
                p_userid, @mmovementid1
            );
            
            -- RECEIPT FINISH GOOD ITEM END
        
        ELSEIF(p_sourceid = 262) THEN
			
			SET @vendorid = NULL;
			SET @poid = NULL;
			SET @podate = NULL;
			SET @discount = NULL;
			SELECT id, vendorid, podate, discount INTO @poid, @vendorid, @podate, @discount FROM purchaseorder WHERE FIND_IN_SET(p_requestid, purchaserequestid) LIMIT 1;
			
            SET @grposeries = null;
			CALL spc_financialyeardocseries_newseries(
				'GRN', p_companyid, @grposeries
			);
			CALL spc_grpo_save(
				NULL, (SELECT @grposeries), p_placement_date, @vendorid,
				NULL, p_placement_date, @poid, @podate,
				NULL, NULL, NULL, NULL, @warehouseid, 
				@warehousebinid, @discount, 642, NULL, 0,
				NULL, p_companyid, p_userid, @grpoid 
			);
			
            SET @podetailid = NULL;
            SET @itemdiscount = NULL;
            SET @taxpercent = NULL;
            SET @taxid = NULL;
            SET @quantity = 0;
            SET @freequantitypercent = 0;
            SET @pendinggrpoquantity = 0;
            
            SELECT id, unitprice, itemdiscount, taxpercent, taxid, quantity, freequantitypercent, pendinggrpoquantity
            INTO @podetailid, @unitprice, @itemdiscount, @taxpercent, @taxid, @quantity, @freequantitypercent, @pendinggrpoquantity
            FROM purchaseorderdetail WHERE purchaseorderid = @poid AND itemid = @itemid LIMIT 1;
            
            SELECT unitprice INTO @finishgoodunitprice
            FROM purchaseorderdetail WHERE purchaseorderid = @poid AND itemid = @itemid LIMIT 1;
            
            -- calculate free quantity
            SET @freeqty = 0;
            SELECT (@quantity * @freequantitypercent)/100 INTO @freeqty;
            
			CALL spc_grpodetail_save(
				NULL, @grpoid, @podetailid, 
                @itemid, @itemname, p_chick_qty,
                p_free_qty, @itemunitid, @unitprice,
                @itemdiscount, @taxpercent, @taxid,
                NULL, p_companyid, p_userid, @grpodetailid
			);
            
            -- update pending qty in purchaseorder detail table
            UPDATE purchaseorderdetail
            SET pendinggrpoquantity = @pendinggrpoquantity - ((p_chick_qty-p_free_qty) + p_week_chicks + p_culls + p_shortage + p_mortality)
            WHERE id = @podetailid
            AND itemid = @itemid;
            
            -- SAVE GRPO JE
            CALL spc_savegrpo_je(@grpoid, p_companyid, p_userid);
            
            -- ISSUE DOC ITEM
            SET @missueid = null;
            CALL spc_materialissue_save(
				NULL, p_placement_date, 383, NULL, 
                362, NULL, p_userid, @warehouseid, 
				@warehousebinid, p_userid, p_placement_date,
                p_companyid, p_userid, @missueid
            );
            
            SET @missuedetailid = null;
            CALL spc_materialissuedetail_save(
				NULL, @missueid, @itemid, @itemname,
                p_chick_qty, @unitprice, (p_chick_qty * @unitprice),
                @itemunitid, (SELECT itembatch FROM grpodetail WHERE grpoid = @grpoid AND itemid = @itemid),
                p_companyid, p_userid, @missuedetailid
            );
            
            SET @mmovementid = null;
            CALL spc_materialmovement_save(
				NULL, @itemid, (SELECT itembatch FROM grpodetail WHERE grpoid = @grpoid AND itemid = @itemid),
                683, @missueid, p_placement_date, p_chick_qty, @warehouseid, 
				@warehousebinid, NULL, NULL, (p_chick_qty * @unitprice), p_companyid,
                p_userid, @mmovementid
            );
            
            -- ISSUE DOC ITEM END
            
            -- RECEIPT FINISH GOOD ITEM
            SET @mreceiptid = null;
            CALL spc_materialreceipt_save(
				NULL, p_placement_date, 343, NULL, 322,
                'CBF Chick Placement', p_userid, p_userid, p_placement_date, 
                p_companyid, p_userid, @mreceiptid
            );

			SET @itembatch = null;
            SET @itemgroup = null;
            
			select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch from item I
			INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

			WHERE I.id = @finishgooditemid;
            
            SET @mreceiptdetailid = null;
            CALL spc_materialreceiptdetail_save(
				NULL, @mreceiptid, @finishgooditemid,
                @finishgooditemname, p_chick_qty, @unitprice,
                (p_chick_qty * @unitprice), @finishgooditemunitid, 
                @itembatch, @warehouseid, @warehousebinid,
                p_companyid, p_userid, NULL, @mreceiptdetailid
            );
            
            SELECT itemgroupid INTO @itemgroup FROM item WHERE id = @finishgooditemid;
        
			UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
			
			WHERE id = @itemgroup;
            
            SET @mmovementid1 = null;
            CALL spc_materialmovement_save(
				NULL, @finishgooditemid, @itembatch,
                684, @mreceiptid, p_placement_date, p_chick_qty, NULL, NULL, @warehouseid, 
				@warehousebinid, (p_chick_qty * @unitprice), p_companyid,
                p_userid, @mmovementid1
            );
            
            -- RECEIPT FINISH GOOD ITEM END
            
            SET @chicksmortalityid = NULL;
            
            CALL spc_cbfchicksmortality_save(
				NULL, @grpoid, @itemid, p_culls,
                p_mortality, p_shortage, p_week_chicks,
                p_free_qty, p_companyid, p_userid, @chicksmortalityid
            );
        END IF;
        
		INSERT INTO cbf_chick_placement
				(batch_id, create_batch_schedule_id, transaction_id, placement_date, first_day_date, status_id, std_lifting_age, branch_id, farmer_enquiry_id, shed_id, chick_qty, week_chicks, free_qty, culls, shortage, mortality, company_id)
			VALUES 
				(p_batch_id, p_create_batch_schedule_id, NULL, p_placement_date, p_first_day_date, p_status_id, p_std_lifting_age, p_branch_id, p_farmer_enquiry_id, p_shed_id, p_chick_qty, p_week_chicks, p_free_qty, p_culls, p_shortage, p_mortality, p_companyid);
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE cbf_chick_placement
				SET batch_id = p_batch_id, 
                create_batch_schedule_id = p_create_batch_schedule_id, 
                transaction_id = p_transaction_id,
                placement_date = p_placement_date,
                first_day_date = p_first_day_date, 
                status_id = p_status_id,
                std_lifting_age = p_std_lifting_age, 
                branch_id = p_branch_id,
                farmer_enquiry_id = p_farmer_enquiry_id,
                shed_id = p_shed_id,
                chick_qty = p_chick_qty, 
                week_chicks = p_week_chicks, 
                free_qty = p_free_qty,
                culls = p_culls,
                shortage = p_shortage, 
                mortality = p_mortality,
                company_id = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- update transaction id as per sourceid
  
    IF(p_sourceid = 261)THEN
		UPDATE cbf_chick_placement SET transaction_id = @out_transferid WHERE id = out_id;
	ELSE
		UPDATE cbf_chick_placement SET transaction_id = @grpoid WHERE id = out_id;
    END IF;
    
    -- update batch status to 3022 as batch started
    if(out_id > 0)THEN
		SELECT out_id as placementid;
		UPDATE cbf_batch_details 
        SET statusid = 3022 ,
			culls = p_culls,
            weak_chicks = p_week_chicks,
            shortage_chicks = p_shortage,
            total_mortality = p_mortality,
            excess_birds = p_free_qty,
            live_batch_qty = p_chick_qty,
            batch_place_qty = p_chick_qty,
            batch_place_date = p_placement_date,
            live_batch_date = p_placement_date,
            line_supervisor_id = (SELECT supervisor_id FROM cbf_farmerenquiry WHERE id = p_farmer_enquiry_id ORDER BY id DESC LIMIT 1),
            scheme_id = (SELECT schemeid FROM cbf_farmeragreement WHERE farmerenquiryid = p_farmer_enquiry_id ORDER BY id DESC LIMIT 1),
            farm_rest_period = (SELECT rest_period FROM cbf_farmerenquiry WHERE id = p_farmer_enquiry_id),
            breed_id = @finishgooditemid,
            costperbird = @finishgoodunitprice
        WHERE id = p_batch_id;
        
        SET @cbfbatchbalanceid = null;
		CALL spc_cbfbatchbalance_save(
			NULL, p_placement_date, p_batch_id, p_shed_id,
			@finishgooditemid,
			p_chick_qty, 'CBF chick placement', p_companyid, p_userid,
			@cbfbatchbalanceid
		);
    END IF;
    
    -- record log
  -- CALL spc_commonlog_save(p_companyid, 'cbffarmparameter', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfchickplacement_search`(
	IN p_companyid INT
)
BEGIN

	SELECT CP.id,
		   CP.batch_id,
		   DATE_FORMAT(CP.placement_date,'%d/%m/%Y') as placement_date,
		   DATE_FORMAT(CP.first_day_date,'%d/%m/%Y') as first_day_date,
           CP.branch_id,
           B.branchname,
           CP.farmer_enquiry_id,
           FE.farmer_name,
           CP.shed_id,
           SDD.shed_name,
           CP.chick_qty,
           REF.refname as sourcename,
           CB.batch_qty,
           CP.free_qty,
           (CP.week_chicks + CP.culls + CP.mortality + CP.shortage) as waste_qty,
           CP.status_id
	FROM
		cbf_chick_placement CP
        LEFT JOIN commonbranch B ON B.id = CP.branch_id
        LEFT JOIN cbf_farmerenquiry FE ON FE.id = CP.farmer_enquiry_id
        LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CP.shed_id
        LEFT JOIN cbf_procurementscheduledetail PSD ON PSD.batchid = CP.batch_id
        LEFT JOIN `reference` REF ON REF.id = PSD.sourceid
        INNER JOIN cbf_batch_details CB ON CB.id = CP.batch_id
	WHERE
		CP.company_id = p_companyid
        
	ORDER BY CP.placement_date ASC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfchickplacement_select`(
  IN p_id INT 
)
BEGIN
	SELECT 
		CP.id,
		   CP.batch_id as batch_number,
           CP.create_batch_schedule_id,
		   DATE_FORMAT(CP.placement_date,'%d/%m/%Y') as placement_date,
		   DATE_FORMAT(CP.first_day_date,'%d/%m/%Y') as first_day_date,
           CP.branch_id,
           B.branchname,
           CP.farmer_enquiry_id,
           FE.farmer_name,
           CP.shed_id,
           SDD.shed_name,
           CP.chick_qty,
           REF.refname as sourcename,
           CB.batch_qty,
           CP.free_qty,
           CP.week_chicks,
           CP.culls,
           CP.mortality, 
           CP.shortage,
           CP.status_id,
           CP.std_lifting_age
    FROM  cbf_chick_placement CP
    LEFT JOIN commonbranch B ON B.id = CP.branch_id
	LEFT JOIN cbf_farmerenquiry FE ON FE.id = CP.farmer_enquiry_id
	LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CP.shed_id
	LEFT JOIN cbf_procurementscheduledetail PSD ON PSD.batchid = CP.batch_id
	LEFT JOIN `reference` REF ON REF.id = PSD.sourceid
	INNER JOIN cbf_batch_details CB ON CB.id = CP.batch_id
	
	WHERE CP.id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfchicksmortality_save`(
   IN p_id INT(11),
   IN p_grpoid INT(11),
   IN p_itemid VARCHAR(200),
   IN p_culls VARCHAR(200),
   IN p_mortality VARCHAR(1000),
   IN p_shortage VARCHAR(50),
   IN p_weak_chicks VARCHAR(45),
   IN p_freeqty INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_chicksmortality 
				(id, grpoid, itemid, culls, mortality, 
                shortage, weak_chicks, freeqty, companyid)
			VALUES 
				(p_id, p_grpoid, p_itemid, p_culls, p_mortality, 
                p_shortage, p_weak_chicks, p_freeqty, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_chicksmortality
				SET grpoid = p_grpoid,
                itemid = p_itemid,
                culls = p_culls,
                mortality = p_mortality, 
                shortage = p_shortage,
                weak_chicks = p_weak_chicks,
                freeqty = p_freeqty,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_chicksmortality', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfcommonbranch_bylineandstatus`(
IN p_branchid varchar(200),
IN p_companyid INT(11)

)
BEGIN
SELECT  CBL.id,
		-- CBL.branchid,
        CBL.linename
		-- CFE.status_id,
		-- REF.refname as statusname
        
        
FROM  commonbranchline CBL
      LEFT JOIN cbf_farmerenquiry CFE ON CBL.branchid = CFE.branch_id
	  LEFT JOIN `reference` REF ON CFE.status_id = REF.id
 WHERE CBL.companyid = p_companyid AND
	FIND_IN_SET( CBL.branchid, p_branchid);    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdailyconsumption_cbfbatchwise`(
	IN p_companyid INT,
    IN p_batchid INT
)
BEGIN
 
    SELECT
        CDC.id,
        CDC.cbfdailytransactionid,
        CDC.consumptiontypeid,
        CDC.itemid,
        I.itemname,
        CDC.quantity,
        B.branchname
     
    FROM
		cbf_dailyconsumption CDC
	LEFT JOIN cbf_dailytransaction CDT ON CDC.cbfdailytransactionid = CDT.id
    INNER JOIN item I ON I.id = CDC.itemid
    INNER JOIN cbf_batch_details CB ON CB.id = p_batchid
    INNER JOIN cbf_farmerenquiry FE ON FE.id = CB.farmer_enquiry_id
    INNER JOIN commonbranch B ON B.id = FE.branch_id
    
	WHERE
		CDC.companyid = p_companyid
        AND CDT.cbf_batchid = p_batchid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdailyconsumption_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DELETE FROM cbf_dailyconsumption WHERE id = p_id;
    
	-- record log
	CALL spc_commonlog_save(p_companyid, 'cbf_dailyconsumption', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdailyconsumption_save`(
	IN p_id INT,
    IN p_cbfdailytransactionid INT,
    IN p_consumptiontypeid INT,
    IN p_itemid INT,
    IN p_isherbal TINYINT,
    IN p_stdconsumption DECIMAL(9,3),
    IN p_quantity DECIMAL(9,3),
	IN p_issuedetailid INT,
    IN p_breeditemid INT(11),
    IN p_itemvalue DECIMAL(20,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_dailyconsumption
				(cbfdailytransactionid, 
				 consumptiontypeid, 
                 itemid, 
                 isherbal, 
                 stdconsumption,
                 quantity, 
                 issuedetailid,
                 breeditemid,
                 itemvalue,
                 companyid)
			VALUES 
				(p_cbfdailytransactionid, 
                 p_consumptiontypeid, 
                 p_itemid, 
                 p_isherbal, 
                 p_stdconsumption,
                 p_quantity,
                 p_issuedetailid,
                 p_breeditemid,
                 p_itemvalue,
                 p_companyid);
      
      SET @action = 'INSERT';
      
	 
    ELSE
    
		UPDATE  cbf_dailyconsumption
				SET consumptiontypeid = p_consumptiontypeid, 
                itemid = p_itemid,
                isherbal = p_isherbal,
                stdconsumption = p_stdconsumption,
                quantity = p_quantity,
                issuedetailid = p_issuedetailid,
                breeditemid = p_breeditemid,
                itemvalue = p_itemvalue,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   
    -- record log
    -- CALL spc_commonlog_save(p_companyid, 'breederdailyconsumption', out_id, @action, p_userid);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdailyconsumption_savejson`(
	IN p_cbfdailytransactionid INT,
    IN p_dailyMortality json,
    IN p_feedConsumption json,
    IN p_medicineConsumption json,
    IN p_vaccineConsumption json,
	IN p_vitaminConsumption json,
    IN p_otherDetails json,
    OUT out_id INT
)
BEGIN

	-- save other details 
    
    SET @i = 0;
    
    SET @p_id = CASE WHEN JSON_EXTRACT(p_otherDetails, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.id'))) AS SIGNED) end;
	SET @out_id = null;
        
	CALL spc_cbfdailyotherdetails_save(
        
	     @p_id,
		 p_cbfdailytransactionid,
         JSON_UNQUOTE((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.lighton')))),
         JSON_UNQUOTE((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.lightoff')))),
		 --  CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.duration'))) AS DECIMAL(9,3)),
		 -- CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.temperature'))) AS DECIMAL(9,3)),
		 -- CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.humidity'))) AS DECIMAL(9,3)),
		 IF(json_type(JSON_EXTRACT(p_otherDetails, CONCAT('$.duration'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.duration'))) AS DECIMAL(9,2))),
         IF(json_type(JSON_EXTRACT(p_otherDetails, CONCAT('$.temperature'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.temperature'))) AS DECIMAL(9,2))),
         IF(json_type(JSON_EXTRACT(p_otherDetails, CONCAT('$.humidity'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.humidity'))) AS DECIMAL(9,2))),
		 IF(json_type(JSON_EXTRACT(p_otherDetails, CONCAT('$.waterconsumption'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.waterconsumption'))) AS DECIMAL(9,2))),
         IF(json_type(JSON_EXTRACT(p_otherDetails, CONCAT('$.companyid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.companyid'))) AS UNSIGNED INTEGER)),
		 IF(json_type(JSON_EXTRACT(p_otherDetails, CONCAT('$.userid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.userid'))) AS UNSIGNED INTEGER)),
		 @out_id
	 );
     
    --  save daily mortality
    
	 SET @i = 0;
    
	 WHILE @i < JSON_LENGTH(p_dailyMortality) DO
    
		 SET @str = NULL;
         SELECT JSON_EXTRACT(p_dailyMortality,CONCAT('$[',@i,']')) INTO @str;
        
		 SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
		 SET @out_id = null;
        
		 CALL spc_cbfdailymortality_save(
        
			 @p_id,
             p_cbfdailytransactionid,
             IF(json_type(JSON_EXTRACT(@str, CONCAT('$.itemid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))) AS UNSIGNED INTEGER)),
             IF(json_type(JSON_EXTRACT(@str, CONCAT('$.avgweight'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.avgweight'))) AS DECIMAL(9,2))),
             IF(json_type(JSON_EXTRACT(@str, CONCAT('$.totalmortality'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.totalmortality'))) AS UNSIGNED INTEGER)),
			 if(json_type(json_extract(@str, CONCAT('$.mortalityreasonid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.mortalityreasonid'))),
             IF(json_type(JSON_EXTRACT(@str, CONCAT('$.totalculls'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.totalculls'))) AS UNSIGNED INTEGER)),
			 if(json_type(json_extract(@str, CONCAT('$.cullsreasonid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.cullsreasonid'))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.companyid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.userid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))) AS UNSIGNED INTEGER)),
			 @out_id
         );

		 SELECT @i + 1 INTO @i;
        
	  END WHILE;
    
    
    -- save daily feed consumption 
    
    SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_feedConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_feedConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_cbfdailyconsumption_save(
        
			 @p_id,            
             p_cbfdailytransactionid,
             IF(json_type(JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.itemid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))) AS UNSIGNED INTEGER)),
			 if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.stdconsumption'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.stdconsumption'))) AS DECIMAL(9,2))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.quantity'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))) AS DECIMAL(9,2))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.breeditemid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.breeditemid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.itemvalue'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.itemvalue'))) AS DECIMAL(9,2))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.companyid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.userid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))) AS UNSIGNED INTEGER)),
			 
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    -- save daily medicine consumption
    
	SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_medicineConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_medicineConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_cbfdailyconsumption_save(
        
			@p_id,
            p_cbfdailytransactionid,
            IF(json_type(JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.itemid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))) AS UNSIGNED INTEGER)),
			 if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.stdconsumption'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.stdconsumption'))) AS DECIMAL(9,2))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.quantity'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))) AS DECIMAL(9,2))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.breeditemid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.breeditemid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.itemvalue'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.itemvalue'))) AS DECIMAL(9,2))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.companyid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.userid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))) AS UNSIGNED INTEGER)),
			 @out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    -- save daily vaccine consumption
    
	SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_vaccineConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_vaccineConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_cbfdailyconsumption_save(
        
			@p_id,
            p_cbfdailytransactionid,
            IF(json_type(JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.itemid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))) AS UNSIGNED INTEGER)),
			 if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.stdconsumption'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.stdconsumption'))) AS DECIMAL(9,2))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.quantity'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))) AS DECIMAL(9,2))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.breeditemid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.breeditemid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.itemvalue'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.itemvalue'))) AS DECIMAL(9,2))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.companyid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.userid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))) AS UNSIGNED INTEGER)),
			 @out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    
    -- save daily vitamin comsumtion
    
     SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_vitaminConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_vitaminConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_cbfdailyconsumption_save(
        
			@p_id,
            p_cbfdailytransactionid,
            IF(json_type(JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.itemid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))) AS UNSIGNED INTEGER)),
			 if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.stdconsumption'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.stdconsumption'))) AS DECIMAL(9,2))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.quantity'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))) AS DECIMAL(9,2))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.breeditemid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.breeditemid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.itemvalue'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.itemvalue'))) AS DECIMAL(9,2))),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.companyid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))) AS UNSIGNED INTEGER)),
			 IF(json_type(JSON_EXTRACT(@str, CONCAT('$.userid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))) AS UNSIGNED INTEGER)),
			 @out_id
        );
		
		SELECT @i + 1 INTO @i;
	
	END WHILE;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdailyconsumption_select`(
	IN p_cbfdailytransactionid INT
)
BEGIN
   
   SET @warehouseid = null;
   SET @warehousebinid = null;
   SET @cbf_batchid = null;
   SET @shedid = null;
   SET @transactiondate = null;
   
   SELECT WB.warehouseid, SDD.warehousebinid, CDT.cbf_batchid, CDT.shedid, CDT.transactiondate
   INTO @warehouseid, @warehousebinid, @cbf_batchid, @shedid, @transactiondate
   FROM cbf_dailytransaction CDT
   LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON CDT.shedid = SDD.id
   INNER JOIN warehousebin WB ON WB.id = SDD.warehousebinid 
   WHERE CDT.id = p_cbfdailytransactionid;
   
   -- select feed consumption
   SELECT 
			CDC.id,
            CDC.cbfdailytransactionid,
            CDC.consumptiontypeid,
            CDC.itemid,
            I.itemcode,
            I.itemname,
           -- R1.refname as breedertype,
            CDC.isherbal,
            CDC.stdconsumption,
            CDC.quantity,
            CDC.breeditemid,
            R2.refname as unitname,
            I1.itemname as breederitemname,
            CDC.companyid,
			CDC.itemvalue,
            fnc_consumptionlivestock(CDC.itemid, @warehouseid, @warehousebinid, CDC.companyid) as instock,
            fnc_consumptionlivestock(CDC.itemid, @warehouseid, @warehousebinid, CDC.companyid) as instockforref,
			IFNULL(fnc_calculate_cummactconcbf(@cbf_batchid, @shedid, @transactiondate, CDC.companyid),0) as cumfeed
    
    FROM 
		cbf_dailyconsumption CDC
        LEFT JOIN item I On CDC.itemid = I.id
        LEFT JOIN item I1 On CDC.breeditemid = I1.id
       -- LEFT JOIN `reference` R1 ON BDC.breedertypeid = R1.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		CDC.cbfdailytransactionid = p_cbfdailytransactionid AND
        CDC.consumptiontypeid = 861;
        
	
    -- select medicine consumption
   SELECT 
			CDC.id,
            CDC.cbfdailytransactionid,
            CDC.consumptiontypeid,
            CDC.itemid,
            I.itemcode,
            I.itemname,
            CDC.breeditemid,
            I1.itemname as breederitemname,
          --   R1.refname as breedertype,
            CDC.isherbal,
            CDC.stdconsumption,
            CDC.quantity,
            R2.refname as unitname,
            CDC.companyid,
            CDC.itemvalue,
            fnc_consumptionlivestock(CDC.itemid, @warehouseid, @warehousebinid, CDC.companyid) as instock,
            fnc_consumptionlivestock(CDC.itemid, @warehouseid, @warehousebinid, CDC.companyid) as instockforref
	
    FROM 
		cbf_dailyconsumption CDC
        LEFT JOIN item I On CDC.itemid = I.id
       -- LEFT JOIN `reference`R1 ON BDC.breedertypeid = R1.id
	    LEFT JOIN item I1 On CDC.breeditemid = I1.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		CDC.cbfdailytransactionid = p_cbfdailytransactionid AND
        CDC.consumptiontypeid = 862;
        
	-- select vaccine consumption
   SELECT 
			CDC.id,
            CDC.cbfdailytransactionid,
            CDC.consumptiontypeid,
            CDC.itemid,
            I.itemcode,
            I.itemname,
            CDC.breeditemid,
            I1.itemname as breederitemname,
          --   R1.refname as breedertype,
            CDC.isherbal,
            CDC.stdconsumption,
            CDC.quantity,
            R2.refname as unitname,
            CDC.companyid,
            CDC.itemvalue,
            fnc_consumptionlivestock(CDC.itemid, @warehouseid, @warehousebinid, CDC.companyid) as instock,
            fnc_consumptionlivestock(CDC.itemid, @warehouseid, @warehousebinid, CDC.companyid) as instockforref
	
    FROM 
		cbf_dailyconsumption CDC
        LEFT JOIN item I On CDC.itemid = I.id
       -- LEFT JOIN `reference`R1 ON BDC.breedertypeid = R1.id
		LEFT JOIN item I1 On CDC.breeditemid = I1.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		CDC.cbfdailytransactionid = p_cbfdailytransactionid AND
        CDC.consumptiontypeid = 863;
        
	-- select vitamin consumption
   SELECT 
			CDC.id,
            CDC.cbfdailytransactionid,
            CDC.consumptiontypeid,
            CDC.itemid,
            I.itemcode,
            I.itemname,
            CDC.breeditemid,
            CDC.itemvalue,
            I1.itemname as breederitemname,
          --   R1.refname as breedertype,
            CDC.isherbal,
            CDC.stdconsumption,
            CDC.quantity,
            R2.refname as unitname,
            CDC.companyid,
            fnc_consumptionlivestock(CDC.itemid, @warehouseid, @warehousebinid, CDC.companyid) as instock,
            fnc_consumptionlivestock(CDC.itemid, @warehouseid, @warehousebinid, CDC.companyid) as instockforref
	
    FROM 
		cbf_dailyconsumption CDC
        LEFT JOIN item I On CDC.itemid = I.id
       -- LEFT JOIN `reference`R1 ON BDC.breedertypeid = R1.id
		LEFT JOIN item I1 On CDC.breeditemid = I1.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		CDC.cbfdailytransactionid = p_cbfdailytransactionid AND
        CDC.consumptiontypeid = 864;
            
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdailymortality_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN
    DELETE FROM cbf_dailymortality WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'cbf_dailymortality', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdailymortality_save`(
	IN p_id INT,
    IN p_cbfdailytransactionid INT,
    IN p_itemid INT,
    IN p_avgweight DECIMAL(9,3),
    IN p_totalmortality INT,
    IN p_mortalityreasonid INT,
    IN p_totalculls INT,
    IN p_cullsreasonid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_dailymortality
				(cbfdailytransactionid, 
				 itemid, 
                 avgweight, 
                 totalmortality, 
                 mortalityreasonid, 
                 totalculls, 
                 cullsreasonid,
                 companyid)
			VALUES 
				(p_cbfdailytransactionid, 
                 p_itemid, 
                 p_avgweight, 
                 p_totalmortality, 
                 p_mortalityreasonid,
                 p_totalculls, 
                 p_cullsreasonid,
                 p_companyid);
	  
      SET @action = 'INSERT';
	
    ELSE
    
		UPDATE  cbf_dailymortality
				SET cbfdailytransactionid = p_cbfdailytransactionid, 
                itemid = p_itemid,
                avgweight = p_avgweight,
                totalmortality = p_totalmortality,
                mortalityreasonid = p_mortalityreasonid,
                totalculls = p_totalculls,
                cullsreasonid = p_cullsreasonid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF((SELECT statusid FROM cbf_dailytransaction WHERE id = p_cbfdailytransactionid) = 3062)THEN

    
    SET @batch_id = null;
    SELECT cbf_batchid INTO @batch_id FROM cbf_dailytransaction WHERE id = p_cbfdailytransactionid;
    
    IF(p_avgweight IS NOT NULL) THEN
		IF( p_avgweight > 0) THEN
			UPDATE cbf_batch_details SET body_weight = (p_avgweight/1000)
			WHERE id = @batch_id;
		END IF;
	END IF;
        
        -- update CBF_batch_details table
        
        UPDATE cbf_batch_details 
		SET
			culls = (culls + IFNULL(p_totalculls,0)),
			total_mortality = (total_mortality + IFNULL(p_totalmortality,0)),
            live_batch_qty = live_batch_qty - (IFNULL(p_totalculls,0) + IFNULL(p_totalmortality,0))
		WHERE id = @batch_id;
        
        
        -- update cbf_batchbalance table
        UPDATE cbf_batchbalance
        SET updateddate = (SELECT transactiondate FROM cbf_dailytransaction WHERE id = p_cbfdailytransactionid),
			quantity = quantity - (IFNULL(p_totalmortality,0) + IFNULL(p_totalculls,0)),
            transactionname = 'CBF Daily transaction'
            
		WHERE cbfbatchid = (SELECT cbf_batchid FROM cbf_dailytransaction WHERE id = p_cbfdailytransactionid);
        
        IF((SELECT readyforsale FROM cbf_dailytransaction WHERE id = p_cbfdailytransactionid) = 1) THEN
			SET @productionqty = NULL;
            SELECT live_batch_qty INTO @productionqty FROM cbf_batch_details WHERE id = @batch_id;
			UPDATE cbf_batch_details 
			SET
				production_qty = @productionqty
			WHERE id = @batch_id;
        END IF;
        
        IF((SELECT live_batch_qty FROM cbf_batch_details WHERE id = @batch_id) = 0) THEN
			UPDATE cbf_batch_details SET statusid = 3024,
			batch_close_date = (SELECT transactiondate FROM cbf_dailytransaction WHERE id = p_cbfdailytransactionid) WHERE id = @batch_id;
			
			UPDATE cbf_farmerenquiry_sheddimensiondetail 
			SET statusid = 2081 
			WHERE farmerenquiryid = (SELECT farmer_enquiry_id FROM cbf_batch_details WHERE id = @batch_id);
			
		END IF;
    END IF;
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederdailymortality', out_id, @action, p_userid);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdailyotherdetails_save`(
	IN p_id INT,
    IN p_cbfdailytransactionid INT,
    IN p_lighton VARCHAR(30),
    IN p_lightoff VARCHAR(30),
    IN p_duration DECIMAL(9,2),
    IN p_temperature DECIMAL(9,3),
    IN p_humidity DECIMAL(9,3),
    IN p_waterconsumption DECIMAL(9,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
     
 
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_dailyotherdetail
				(cbfdailytransactionid, 
				 lighton, 
                 lightoff, 
                 duration, 
                 temperature, 
                 humidity, 
                 waterconsumption, 
                 companyid)
			VALUES 
				(p_cbfdailytransactionid, 
				 p_lighton,
                 p_lightoff,
                 p_duration, 
                 p_temperature, 
                 p_humidity, 
                 p_waterconsumption,
                 p_companyid);
	  
      SET @action = 'INSERT';
	
    ELSE
    
		UPDATE  cbf_dailyotherdetail
				SET cbfdailytransactionid = p_cbfdailytransactionid, 
                lighton = p_lighton,
                lightoff = p_lightoff, 
                duration = p_duration,
                temperature = p_temperature,
                humidity = p_humidity,
                waterconsumption = p_waterconsumption,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederdailyotherdetails', out_id, @action, p_userid);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdailysupervisior_report`(
IN p_curdate date,
IN p_branch_id varchar(225),
IN p_line_id varchar(225),
IN p_empid INT(11),
IN p_companyid INT(11)


)
BEGIN

SELECT *, (totalfeedconsumption/totalwt) As fcr,
		  (quantity/liveqty) As dailyconperbird,
		  (openingbal+addqty-quantity) As Bal 
FROM(
SELECT 
        CURDATE(),
        CFE.farmer_name,
		C.cityname,
        E.employeename,
		E.id as employeeid,
        MM.itemid,
        MM.towarehousebinid,
        CDT.id,
		DATE_FORMAT( CCP.placement_date,'%d/%m/%Y') as placement_date,
		DATE_FORMAT( CDT.transactiondate,'%d/%m/%Y') as transactiondate,
		((DATEDIFF(CBD.live_batch_date,CCP.placement_date))+1) As age,
        fun_cbfcalculatefeedob(CDT.transactiondate,MM.towarehousebinid,MM.itemid) AS openingbal,
        fun_cbfcalculateaddreceitinqty_fordailysupervisor(CDT.transactiondate,MM.towarehousebinid,MM.itemid) As addqty,
        -- fun_calculate_dailymortality(placement_date,CDT.cbf_batchid) As dailymortality,
		fun_calculate_dailyculls(placement_date,cbf_batchid) As daailyculls,
        fun_calculate_dailymortality(placement_date,cbf_batchid) As dailymortality,
		fun_calculate_dailyliveqty(placement_date,CDT.transactiondate,cbf_batchid,CDT.id) As liveqty,
        CDC.quantity,
        CBD.live_batch_qty, 
        -- (CDC.quantity/liveqty) As dailyconperbird, 
        CDM.totalmortality,
        fun_calculate_consumptionforbirdreport(placement_date,CDT.cbf_batchid) As totalfeedconsumption,
	 --   fuc_calculate_percentagemortality(CCP.chick_qty,CDM.totalmortality) As ptotalmortality,
	    CDM.avgweight,
	    (CDM.avgweight/CBD.live_batch_qty) As totalwt,
		CFE.farm_name,
        CFE.cityid,
        CCP.chick_qty,
        CFE.line_id,
        CFE.branch_id,
        CCP.batch_id,
        CBD.breed_id,
		CB.branchname,
		REF2.refname as linename,
	    -- REF4.refname as cityname,
	    REF5.refname as breedname
	 
	   
     FROM cbf_dailytransaction CDT
	 LEFT JOIN cbf_farmerenquiry CFE  ON CDT.branchid = CFE.branch_id
     LEFT JOIN city C ON CFE.cityid = C.id
     LEFT JOIN employee E ON CFE.supervisor_id = E.id
	 LEFT JOIN cbf_chick_placement CCP ON  CDT.cbf_batchid  =  CCP.batch_id 
     LEFT JOIN cbf_batch_details CBD ON CCP.batch_id =   CBD.id
     LEFT JOIN cbf_dailymortality CDM ON CDT.id = CDM.cbfdailytransactionid
     LEFT JOIN commonbranch CB ON CCP.branch_id =   CB.id
     LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CFESD ON CFE.id = CFESD.farmerenquiryid
     LEFT JOIN materialmovement MM ON  CFESD.warehousebinid = MM.towarehousebinid
     LEFT JOIN cbf_dailyconsumption CDC ON  CDT.id = CDC.cbfdailytransactionid
	 LEFT JOIN `reference` REF2 ON CFE.line_id = REF2.id
	 LEFT JOIN `reference` REF4 ON CFE.cityid = REF4.id
	 LEFT JOIN `reference` REF5 ON CBD.breed_id = REF4.id
    
    
    WHERE CDT.companyid = p_companyid AND
		 FIND_IN_SET( CFE.branch_id, p_branch_id) AND
		 FIND_IN_SET( CFE.line_id, p_line_id) AND
         FIND_IN_SET( E.id, p_empid) AND
         CDC.consumptiontypeid = 861 AND
         CDT.readyforsale = 1
         -- group by employeeid
         ) as temp;
		


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdailytransaction_bycbfbatchid`(
	IN p_cbfbatchid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	
SET @breeditemid = NULL;
SET @mortality = 0;
SET @culls = 0;
	SELECT  
		breed_id INTO @breeditemid
		
	FROM 
		cbf_batch_details
        
	WHERE id = p_cbfbatchid LIMIT 1;
            
            SELECT 
			
				CASE WHEN itemid = @breeditemid THEN @mortality:= totalmortality ELSE NULL END as mortality
                
				FROM( SELECT
					  itemid, SUM(totalmortality) as totalmortality   
            
					  FROM cbf_dailytransaction CDT
					  LEFT JOIN cbf_dailymortality CDM ON CDM.cbfdailytransactionid = CDT.id
    
					  WHERE cbf_batchid = p_cbfbatchid
    
				GROUP BY itemid) as totalmortality;
                
                
                SELECT 
			
				CASE WHEN itemid = @breeditemid THEN @culls:= totalculls ELSE NULL END as culls
                
				FROM( SELECT
					  itemid, SUM(totalculls) as totalculls    
            
					   FROM cbf_dailytransaction CDT
					  LEFT JOIN cbf_dailymortality CDM ON CDM.cbfdailytransactionid = CDT.id
    
					  WHERE cbf_batchid = p_cbfbatchid
    
				GROUP BY itemid) as totalculls;
    
    SELECT 
			 IFNULL(@mortality,0) AS mortality,
			 IFNULL(@culls,0) AS culls;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdailytransaction_issueconsumeditems`(
  IN p_dailytransactionid INT,
  IN p_outid INT
)
BEGIN

	DECLARE p_itemid INT;
	DECLARE p_itemname VARCHAR(200);
	DECLARE p_itemunitid INT;
	DECLARE p_unitcost DECIMAL(30,6);
	DECLARE p_totalmortality INT;
	DECLARE p_totalculls INT;
    DECLARE p_quantity DECIMAL(20,3);
    DECLARE p_companyid INT;
    DECLARE p_userid INT;
    DECLARE p_cbfbatchid INT;
    DECLARE p_shedwarehousebinid INT;
    DECLARE p_warehouseid INT;
    DECLARE p_mortalityid INT;
    DECLARE p_grpoid INT;
    DECLARE p_consumptionid INT;
    DECLARE p_itemvalue DECIMAL(30,6);
	DECLARE p_itembatch VARCHAR(300);
    DECLARE p_shedid INT;
    DECLARE x INT;
	DECLARE i INT;
    DECLARE j INT;
    DECLARE material_itemid INT;
    DECLARE material_itembatch VARCHAR(300);
    DECLARE material_quantity INT;
    DECLARE material_unitcost DECIMAL(30,6);
    DECLARE p_transactiondate DATE;
	SET @row_number = 0;
    SET @row_number1 = 0;
	SET @reccount = 0;
    SET @consumptionreccount = 0;
	SET x = 1;
    SET i = 1;
    SET j = 1;
    SET @materialissue_outid = null;
    SET @materialissuedetail_outid = null;
    SET @movement_outid = null;
    SET @consumptionissue_outid = null;
    SET @birdprice = null;
    SET @livebiredprice = 0;
	 SET @@sql_mode = '';
    
    SELECT CDT.cbf_batchid, SDD.warehousebinid, CDT.companyid, CDT.approvedby, WB.warehouseid, CDT.transactiondate,CBB.cbfshedid
    INTO p_cbfbatchid, p_shedwarehousebinid, p_companyid, p_userid, p_warehouseid, p_transactiondate,p_shedid
    
    FROM cbf_dailytransaction CDT
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CDT.shedid
    LEFT JOIN warehousebin WB ON WB.id = SDD.warehousebinid
    LEFT JOIN cbf_batchbalance CBB ON CDT.cbf_batchid = CBB.cbfbatchid
    
    WHERE CDT.id = p_dailytransactionid;
   
     SELECT fun_cbf_live_biredcost(p_cbfbatchid,p_companyid,p_transactiondate) INTO @livebiredprice;

	-- save issue parent record
	 CALL spc_materialissue_save(
			null, 
			p_transactiondate, 
			381, 
			p_cbfbatchid, 
			362, 
			'CBF daily culls and mortality', 
			p_userid, 
            p_warehouseid,
            p_shedwarehousebinid,
            null, 
			null, 
            p_companyid, 
            p_userid, 
            @materialissue_outid
		);
 
	UPDATE cbf_dailytransaction SET issueid = @materialissue_outid
	WHERE id = p_dailytransactionid;
        
	-- select mortality and culls detail for given daily transaction and issue them
		
   SET @reccount = 0;
   SET @reccount1 = 0;
   SET x = 1;
   SET @row_number = 0;
 
   


	DROP TEMPORARY TABLE IF EXISTS tempmortality;
        
	CREATE TEMPORARY TABLE tempmortality
	SELECT 
			CDM.id,
			CDM.itemid, 
			I.itemname, 
			I.itemunitid,
			-- @birdprice as unitcost,
			totalmortality, 
			totalculls, 
			(@row_number := @row_number + 1) as `rank`
            
		FROM cbf_dailymortality CDM
		LEFT JOIN item I ON CDM.itemid = I.id
		WHERE CDM.cbfdailytransactionid = p_dailytransactionid;
	 SELECT * FROM tempmortality;
		SELECT COUNT(*) INTO @reccount1 FROM tempmortality;
    
	WHILE x  <= @reccount1 DO
			
		SET p_mortalityid = null;
		SET p_itemid = null;
		SET p_itemname = null;
		SET p_itemunitid = null;
		SET p_totalmortality = 0;
		SET p_quantity = 0;
        SET p_totalculls = 0;
        SET j = 0;
		SET @reccount = 0;
   
		SELECT id, itemid, itemname, itemunitid, totalmortality, totalculls,(totalmortality+totalculls)
            INTO p_mortalityid, p_itemid, p_itemname, p_itemunitid, p_totalmortality, p_totalculls,p_quantity
            FROM tempmortality WHERE `rank` = x;
           --  SET p_quantity = (p_totalmortality + p_totalculls);
           
         SELECT p_mortalityid, p_itemid, p_itemname, p_itemunitid, p_totalmortality, p_totalculls,p_quantity;
	
        -- select itembatch and quantity from material movement for current item
        DROP TEMPORARY TABLE IF EXISTS mortempitembatch;
        
		CREATE TEMPORARY TABLE mortempitembatch
        
        SELECT itemid, itembatch, stockin, transactiondate,itemunitcost,
        fnc_itembatchstockout(itemid, IFNULL(itembatch,''), p_warehouseid, p_shedwarehousebinid) as stockout,
        (@row_number1 := @row_number1 + 1) as recordrank 
       FROM(
    
			SELECT itemid, itembatch,SUM(quantity) as stockin,transactiondate,(itemvalue/quantity) as itemunitcost
			FROM materialmovement
			WHERE 
				itemid = p_itemid AND
				companyid = p_companyid AND
				towarehouseid = p_warehouseid AND
                towarehousebinid = p_shedwarehousebinid AND
				transactiontypeid in (681,682,684,685) AND itembatch is not null
				GROUP BY itemid, itembatch
               
			) stocktable order by transactiondate asc; 
      
        select * FROM  mortempitembatch;
		SELECT COUNT(*) INTO @reccount FROM  mortempitembatch;
        
        WHILE j < @reccount DO
        
			SET @issuequantity = 0;
			
			SELECT itemid, itembatch, (stockin - stockout) as quantity, itemunitcost
			INTO  material_itemid, material_itembatch, material_quantity, material_unitcost
			FROM  mortempitembatch where recordrank = j+1 ;
         --  WHERE recordrank = i;
			select p_quantity as mortqty;
             IF (p_quantity > 0 ) THEN
				
                IF(material_quantity > 0) THEN
					IF (material_quantity >= p_quantity) THEN
						SET @issuequantity = p_quantity;
						SET p_quantity = 0;
					ELSE 
                    
						SET @issuequantity = material_quantity;
                        SET p_quantity = p_quantity - material_quantity;
                    
					END IF;
                    
				END IF;
                 
                 if (@issuequantity >0) then
                  
                  CALL spc_materialissuedetail_save(null, @materialissue_outid, p_itemid, p_itemname, @issuequantity, material_unitcost,(@issuequantity*material_unitcost), p_itemunitid, material_itembatch, p_companyid, p_userid, @materialissuedetail_outid);
				  CALL spc_materialmovement_save(null, p_itemid, material_itembatch, 683, @materialissuedetail_outid, p_transactiondate, @issuequantity, p_warehouseid, p_shedwarehousebinid, null, null,(@issuequantity*material_unitcost), p_companyid, p_userid,@movement_outid);
                  CALL spc_cbf_birdcost_save(null,p_itemid,@issuequantity,p_transactiondate,@livebiredprice,(@issuequantity * @livebiredprice),material_itembatch,p_cbfbatchid,p_shedid,p_dailytransactionid,p_companyid);
                  UPDATE cbf_dailymortality SET issuedetailid = @materialissuedetail_outid
				  WHERE id = p_mortalityid;
              
              END IF;
            
            END IF;
            
        	SET  j = j + 1; 
	    END WHILE;
       
       DROP TEMPORARY TABLE mortempitembatch;
            
			SET  x = x + 1; 
	END WHILE;
	 
 	DROP TEMPORARY TABLE tempmortality;
   
   SET @reccount = 0;
   SET x = 1;
   SET @row_number = 0;
 
   
	DROP TEMPORARY TABLE IF EXISTS tempconsumption;
        
	CREATE TEMPORARY TABLE tempconsumption
	SELECT 
		CDC.id,
		CDC.itemid, 
		I.itemname, 
		I.itemunitid,
		SUM(itemvalue) as itemvalue,
		SUM(quantity) as quantity, 
		(@row_number := @row_number + 1) as `rank`
	FROM cbf_dailyconsumption CDC
	LEFT JOIN item I ON CDC.itemid = I.id
	WHERE CDC.cbfdailytransactionid = p_dailytransactionid group by CDC.itemid;
	 
   
	SELECT COUNT(*) INTO @consumptionreccount FROM tempconsumption;
    
    
	WHILE x  <= @consumptionreccount DO
			
		SET p_consumptionid = null;
		SET p_itemid = null;
		SET p_itemname = null;
		SET p_itemunitid = null;
		SET p_unitcost = 0;
		SET p_quantity = null;
        SET p_itemvalue = null;
        SET i = 0;
		SET @reccount = 0;
         SET @row_number1 = 0;
   
		SELECT id, itemid, itemname, itemunitid, quantity,itemvalue
		INTO  p_consumptionid, p_itemid, p_itemname, p_itemunitid, p_quantity,p_itemvalue
		FROM tempconsumption WHERE `rank` = x;
        
        DROP TEMPORARY TABLE IF EXISTS tempitembatch;
        
		CREATE TEMPORARY TABLE tempitembatch
        
		SELECT itemid, itembatch, stockin,unitcost, transactiondate,
		  fnc_itembatchstockout(itemid, IFNULL(itembatch,''), p_warehouseid, p_shedwarehousebinid) as stockout,
		   (@row_number1 := @row_number1 + 1) as recordrank2
      
       
       FROM(
    
			SELECT itemid, itembatch,SUM(quantity) as stockin,(SUM(itemvalue)/SUM(quantity))as unitcost,transactiondate
			FROM materialmovement
			WHERE 
				 
				itemid = p_itemid AND
				companyid = p_companyid AND
				towarehouseid = p_warehouseid AND
                towarehousebinid = p_shedwarehousebinid AND
				transactiontypeid in (681,682,684,685) AND itembatch is not null
				GROUP BY itemid, itembatch
               
			) stocktable order by transactiondate asc; 
      
        SELECT * FROM tempitembatch;
		SELECT COUNT(*) INTO @reccount FROM  tempitembatch;
        
        
         SELECT i;
        WHILE i<@reccount DO
        SELECT i;
			
			SET @issuequantity = 0;
			SELECT itemid, itembatch, (stockin - stockout) as quantity,unitcost
			 INTO  material_itemid, material_itembatch, material_quantity,p_unitcost
			FROM  tempitembatch where recordrank2 = i+1 limit 1;
			
             IF (p_quantity > 0 ) THEN
				
                IF(material_quantity > 0) THEN
					IF (material_quantity >= p_quantity) THEN
						SET @issuequantity = p_quantity;
						SET p_quantity = 0;
					ELSE 
                    
						SET @issuequantity = material_quantity;
                        SET p_quantity = p_quantity - material_quantity;
                    
				
					END IF;
                    
				END IF;
                select @issuequantity;
				   if (@issuequantity >0) then
                  CALL spc_materialissuedetail_save(null, @materialissue_outid, p_itemid, p_itemname, @issuequantity, p_unitcost,(@issuequantity*p_unitcost), p_itemunitid, material_itembatch, p_companyid, p_userid, @materialissuedetail_outid);
				  CALL spc_materialmovement_save(null, p_itemid, material_itembatch, 683, @materialissue_outid, p_transactiondate, @issuequantity, p_warehouseid, p_shedwarehousebinid, null, null,(@issuequantity*p_unitcost), p_companyid, p_userid,@movement_outid);
				  CALL spc_cbf_birdcost_save(null,p_itemid,@issuequantity,p_transactiondate,p_unitcost,(@issuequantity * p_unitcost),material_itembatch,p_cbfbatchid,p_shedid,p_dailytransactionid,p_companyid);
				 
              
              END IF;
            
            END IF;
            
        	SET  i = i + 1; 
	    END WHILE;
       
       DROP TEMPORARY TABLE tempitembatch;
       
	
		UPDATE cbf_dailyconsumption SET issuedetailid = @materialissuedetail_outid
        WHERE id = p_consumptionid;
            
			SET  x = x + 1; 
	END WHILE;
	 
	 DROP TEMPORARY TABLE tempconsumption;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdailytransaction_save`(
	IN p_id INT,
    IN p_branchid INT,
    IN p_shedid INT,
    IN p_cbf_batchid INT,
    IN p_createdby INT,
    IN p_transactiondate DATE,
    IN p_approvedby INT,
    IN p_approvaldate DATE,
    IN p_statusid INT,
    IN p_remark VARCHAR(500),
    IN p_readyforsale TINYINT(4),
    IN p_warehouseid INT,
    IN p_issueid INT,
    IN p_age INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;
     
	IF EXISTS(
		SELECT id from cbf_dailytransaction where cbf_batchid = p_cbf_batchid AND transactiondate = p_transactiondate AND shedid = p_shedid
				AND (
						(NULLIF(p_id, 0) IS NULL)
						-- OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id)
                    )
            
		) THEN BEGIN
        
		SELECT -1 INTO out_id;
	
	END;
            
    ELSEIF EXISTS(
		 SELECT id from cbf_dailytransaction where statusid = 3061 AND branchid = p_branchid AND cbf_batchid = p_cbf_batchid AND shedid = p_shedid
			 AND (
				 (NULLIF(p_id, 0) IS NULL)
				    -- OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id)
				 )
            
		 ) THEN  BEGIN
        
	 SELECT -2 INTO out_id;
	
	 END;
    
    ELSE
    
    BEGIN
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
		
        IF (p_statusid = 822) THEN
			SET p_approvaldate = NOW();
        END IF;
        
        INSERT INTO cbf_dailytransaction 
				(branchid,shedid, 
				 cbf_batchid, 
                 createdby, 
                 transactiondate, 
                 approvedby, 
                 approvaldate, 
                 statusid, 
                 remark, 
                 readyforsale,
                 issueid,
                 companyid)
			VALUES 
				(p_branchid,p_shedid, 
                 p_cbf_batchid, 
                 p_createdby, 
                 p_transactiondate, 
                 p_approvedby, 
                 p_approvaldate, 
                 p_statusid,
                 p_remark, 
                 p_readyforsale,
                 @materialissue_outid,
                 p_companyid);
	  
      SET @action = 'INSERT';
        
    ELSE
    
		UPDATE  cbf_dailytransaction
				SET branchid = p_branchid, 
                shedid = p_shedid, 
                cbf_batchid = p_cbf_batchid,
                transactiondate = p_transactiondate,
                approvedby = p_approvedby,
                approvaldate = p_approvaldate,
                statusid = p_statusid,
                remark = p_remark,
                readyforsale = p_readyforsale,
                issueid = p_issueid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
             
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    IF(p_statusid = 3062)THEN
		UPDATE cbf_batch_details 
		SET
            age = p_age,
            live_batch_date = p_transactiondate
		WHERE id = p_cbf_batchid;
        
        -- update batch status as ready for sale
        IF(p_readyforsale = 1)THEN
			UPDATE cbf_batch_details SET statusid = 3023 WHERE id = p_cbf_batchid;
        END IF;
    END IF;
    
    
     
    
    -- record log
     CALL spc_commonlog_save(p_companyid, 'cbf_dailytransaction', out_id, @action, p_userid);
  
  END;
   
   END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdailytransaction_search`(
	IN p_companyid INT
)
BEGIN
    
    SELECT
			CT.id,
            CT.shedid,
            SDD.shed_name as shedname,
            CT.cbf_batchid,
            DATE_FORMAT( CT.transactiondate,'%d/%m/%Y') as transactiondate,
            R.refname as `status`,
            CT.readyforsale,
            CT.statusid,
            CBD.batch_number,
            CFE.farmer_name
		
    FROM
		cbf_dailytransaction CT
		LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON CT.shedid = SDD.id
        LEFT JOIN cbf_batch_details CBD ON CT.cbf_batchid = CBD.id
        LEFT JOIN cbf_farmerenquiry CFE ON CFE.id = CBD.farmer_enquiry_id
        LEFT JOIN `reference` R ON CT.statusid = R.id
    
	WHERE
		CT.companyid = p_companyid
        ORDER BY CT.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdailytransaction_select`(
	IN p_id INT
)
BEGIN
SET @@sql_mode = '';
    
    -- select breeder daily transaction details
    SELECT
		  CDT.id,
          CDT.branchid,
          shedid,
          WB.warehouseid,
          SDD.warehousebinid,
          SDD.shed_name,
          FE.id as farmerenquiryid,
          FE.farmer_name,
          CDT.cbf_batchid,
          B.branchcode,
          B.branchname,
		  DATE_FORMAT(CDT.transactiondate,'%d/%m/%Y') as transactiondate,
		  CDT.statusid,
          R.refname,
          U.username as createdbyname,
          CDT.remark,
          CDT.companyid,
          CDT.createdby,
		  CDT.createdby as userid,
          CDT.issueid,
          DATE_FORMAT(CBD.batch_place_date,'%d/%m/%Y') as batch_place_date,
          DATE_FORMAT(CBD.batch_place_date,'%d/%m/%Y') as placement_date,
          CDT.readyforsale
    FROM
		cbf_dailytransaction CDT
        LEFT JOIN cbf_batch_details CBD ON CDT.cbf_batchid = CBD.id
		LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON CDT.shedid = SDD.id
        INNER JOIN cbf_farmerenquiry FE ON FE.id = SDD.farmerenquiryid
        LEFT JOIN warehousebin WB ON WB.id = SDD.warehousebinid
        LEFT JOIN `reference` R ON CDT.statusid = R.id
        LEFT JOIN `user1` U ON CDT.createdby = U.id
        LEFT JOIN commonbranch B ON B.id = CDT.branchid
        LEFT JOIN cbf_chick_placement CCP ON CDT.cbf_batchid = CCP.batch_id

	WHERE
		 CDT.id = p_id;
         
         
	-- select breeder daily transaction other details
    
    SELECT
			id,
            cbfdailytransactionid,
            TIME_FORMAT(lighton, '%h:%i %p') as lighton,
            TIME_FORMAT(lightoff, '%h:%i %p') as lightoff,
            duration,
            temperature,
            humidity,
            waterconsumption,
            companyid,
            (SELECT createdby FROM cbf_dailytransaction WHERE id = p_id) as userid 
    
    FROM
		cbf_dailyotherdetail 
        
	WHERE
		cbfdailytransactionid = p_id;
        
	
	-- select breeder daily culls-mortality details
  
    SELECT
			CDM.id,
            CDM.cbfdailytransactionid,
            CDM.itemid,
            CDT.cbf_batchid,
            I.itemcode,
            I.itemname,
            CDM.avgweight,
            CDM.totalmortality,
            CDM.mortalityreasonid,
            CR1.reason as mortalityreason,
            CDM.totalculls,
            CDM.cullsreasonid,
            CR2.reason as cullsreason,
            CDM.companyid,
           -- fnc_shedwise_chickslivestock(CDT.shedid, CDM.itemid, CDM.cbfdailytransactionid) as instock,
           -- fnc_shedwise_chickslivestock(CDT.shedid, CDM.itemid, CDM.cbfdailytransactionid) as instockforref,
            -- (CBB.quantity) as instock,
			-- (CBB.quantity) as instockforref,
            fnc_iteminstock(CBB.itemid, SDD.warehousebinid, CDT.transactiondate, CBB.companyid) as instock,
            fnc_iteminstock(CBB.itemid, SDD.warehousebinid, CDT.transactiondate, CBB.companyid) as instockforref,
            CDM.issuedetailid,
            IFNULL(fnc_calculate_cummamortalitycbf(CDT.cbf_batchid, CDT.shedid, CDT.transactiondate, CDT.companyid),0) as cummortality,
            IFNULL(fnc_calculate_cummalefemalecullscbf(CDT.cbf_batchid, CDT.shedid, CDT.transactiondate, CDT.companyid),0) as cumculls
            
            
	FROM cbf_dailymortality CDM
    LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDM.cbfdailytransactionid
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON CDT.shedid = SDD.id
	LEFT JOIN cbf_batchbalance CBB ON CBB.cbfbatchid = CDT.cbf_batchid
    LEFT JOIN cbf_reasons CR1 ON CDM.mortalityreasonid = CR1.id
    LEFT JOIN cbf_reasons CR2 ON CDM.cullsreasonid = CR2.id
    LEFT JOIN item I ON CDM.itemid = I.id
    
    WHERE
		CDM.cbfdailytransactionid = p_id
        group by itemid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdashboard_batchwise`(
	IN p_branchids VARCHAR(255),
    IN p_companyid INT
)
BEGIN
    
    -- batchwise mortality table
 -- SELECT *, ((total_mortality/batch_place_qty)*100) As pfwm
 
 -- FROM(
    SELECT 
		   ((CB.total_mortality/CB.batch_place_qty)*100) As Permortality,		
           (CB.body_weight/CB.batch_place_qty) As avgweight,
           CB.batch_number,
           CB.id,
		   CB.batch_place_qty,
		   CB.live_batch_qty,
           CB.culls,
           CB.sale_qty,
           CB.body_weight,
           CB.excess_birds,
           CCB.branchname,
           DATEDIFF(now(), CB.batch_place_date) as age,
           FE.farmer_name,
           FE.farm_name,
           FE.address,
           FE.mobile_no,
           CB.total_mortality,
           DATE_FORMAT(CB.batch_place_date,'%d/%m/%Y') as placementdate,
           DATE_FORMAT(CB.batch_lifting_date,'%d/%m/%Y') as deliverydate,
           FE.total_area,
           IFNULL(fuc_calculate_mortality(CB.batch_place_date,CB.id,8),0)As fwm
           
	FROM cbf_batch_details CB
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = CB.farmer_enquiry_id
    LEFT JOIN commonbranch CCB ON CCB.id = FE.branch_id
    
    WHERE FIND_IN_SET(FE.branch_id, p_branchids)
    AND CB.companyid = p_companyid; -- )temp;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdashboard_branchwise`(
	IN p_branchid INT,
    IN p_companyid INT
)
BEGIN

-- TOP PERFORMER FARMER
	SELECT CB.batch_number,
           FE.farmer_name,
           -- (SUM(CDC.quantity)/CB.live_batch_qty) as FCR
           fnc_cbf_batchwisefcr(CB.id, p_companyid) as FCR
	FROM cbf_batch_details CB
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = CB.id
    LEFT JOIN cbf_dailyconsumption CDC ON CDT.id = CDC.cbfdailytransactionid
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = CB.farmer_enquiry_id
    LEFT JOIN cbfstandardchartdetail CSC ON CSC.age = CB.age
    
    WHERE FE.branch_id = p_branchid
    AND fnc_cbf_batchwisefcr(CB.id, p_companyid) <= CSC.fcr
    AND CB.companyid = p_companyid;
    
-- Low performer Farmer

	SELECT CB.batch_number,
           FE.farmer_name,
           -- (SUM(CDC.quantity)/CB.live_batch_qty) as FCR
           fnc_cbf_batchwisefcr(CB.id, p_companyid) as FCR
	FROM cbf_batch_details CB
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = CB.id
    LEFT JOIN cbf_dailyconsumption CDC ON CDT.id = CDC.cbfdailytransactionid
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = CB.farmer_enquiry_id
    LEFT JOIN cbfstandardchartdetail CSC ON CSC.age = CB.age
    
    WHERE FE.branch_id = p_branchid
    AND fnc_cbf_batchwisefcr(CB.id, p_companyid) > CSC.fcr
    AND CB.companyid = p_companyid;


-- Total farms with capacity

	SELECT count(*) as farm_count,
		   SUM(total_area) as total_area
           
	FROM cbf_farmerenquiry
    
    WHERE branch_id = p_branchid
    AND company_id = p_companyid;
    
-- Ready for Sale batches

	SELECT SUM(CB.live_batch_qty) as quantity,
		   SUM(CB.live_batch_qty*CB.body_weight) as weight
           
	FROM cbf_batch_details CB
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = CB.farmer_enquiry_id
    
    WHERE FE.branch_id = p_branchid
    AND CB.companyid = p_companyid
    AND CB.statusid = 3023;
    
    -- batchwise mortality table
    
    SELECT CB.batch_number,
		   CB.batch_place_qty,
           FE.farmer_name,
           CB.total_mortality,
		   fnc_cbffirstweekmortality(CB.batch_place_date, CB.id) as firstweekmortality
           
	FROM cbf_batch_details CB
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = CB.farmer_enquiry_id
    
    WHERE FE.branch_id = p_branchid
    AND CB.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdeliveryweightsdetail_delete`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	DELETE FROM cbf_delivery_weights_detail WHERE id = p_id AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdeliveryweightsdetail_save`(
 IN p_id INT(11),
 IN p_cbf_delivery_weightsid INT,
 IN p_cbf_batchid INT,
 IN p_plannedqty INT,
 IN p_deliveredqty INT,
 IN p_plannedwt DECIMAL(12,3),
 IN p_deliveredwt DECIMAL(12,3),
 IN p_liftingtime VARCHAR(45),
 IN p_rateperkg DECIMAL(9,3),
 IN p_totalcost DECIMAL(12,3),
 IN p_excessbirds INT,
 IN p_birdshortage INT,
 IN p_companyid INT(11),
 IN p_userid INT(11),
 OUT out_id INT )
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO cbf_delivery_weights_detail(
				cbf_delivery_weightsid, cbf_batchid, plannedqty, deliveredqty, plannedwt,
                deliveredwt, `liftingtime`, rateperkg, totalcost, excessbirds, birdshortage, companyid)
        VALUES (p_cbf_delivery_weightsid, p_cbf_batchid, p_plannedqty, p_deliveredqty, p_plannedwt,
                p_deliveredwt, p_liftingtime, p_rateperkg, p_totalcost, p_excessbirds, p_birdshortage, p_companyid); 
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE cbf_delivery_weights_detail
        SET cbf_delivery_weightsid = p_cbf_delivery_weightsid, 
			cbf_batchid = p_cbf_batchid,
			plannedqty = p_plannedqty,
            deliveredqty = p_deliveredqty,
            plannedwt = p_plannedwt,
			deliveredwt = p_deliveredwt,
            liftingtime = p_liftingtime,
            rateperkg = p_rateperkg,
            totalcost = p_totalcost,
			excessbirds = p_excessbirds,
            birdshortage = p_birdshortage,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    IF((SELECT statusid FROM cbf_delivery_weights WHERE id = p_cbf_delivery_weightsid) = 6302) THEN
		SET @transactiondate  = null;
        SET @birdcost = null;
        SELECT liftingdate INTO @transactiondate FROM cbf_delivery_weights WHERE id = p_cbf_delivery_weightsid;
        select fun_cbf_live_biredcost(p_cbf_batchid,p_companyid,@transactiondate) INTO @birdcost;
		update cbf_delivery_weights_detail SET livebirdcost= @birdcost WHERE id = p_cbf_delivery_weightsid;
		
		-- Sales delivery detail
		SET @stddeliveryid = null;
		SET @islastdelivery = null;
		SET @liftingdate = null;
		SET @stdsalesorderid = null;
		SELECT stddeliveryid, islastdelivery, liftingdate,stdsalesorderid INTO @stddeliveryid, @islastdelivery, @liftingdate,@stdsalesorderid FROM cbf_delivery_weights WHERE id = p_cbf_delivery_weightsid;
		
		SET @itemid = null;
		SET @itemunitid = null;
		SET @warehousebinid = null;
		SET @cbf_batchid = null;
		SET @farmerenquiryid = null;
		
		SELECT CB.id, CB.breed_id, I.itemunitid, SDD.warehousebinid,SDD.farmerenquiryid
		INTO @cbf_batchid, @itemid, @itemunitid, @warehousebinid,@farmerenquiryid
		FROM cbf_batch_details CB 
		LEFT JOIN item I ON I.id = CB.breed_id
		LEFT JOIN cbf_batchbalance CBB ON CBB.cbfbatchid = CB.id
		LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CBB.cbfshedid
		WHERE CB.id = p_cbf_batchid LIMIT 1;
		
		SET @deliverydetail = null;
		
		CALL spc_salesdeliverydetail_save(
			NULL, @stddeliveryid, @stdsalesorderid, 
			@itemid, p_deliveredqty, 1, p_deliveredwt, @itemunitid,
			p_rateperkg, @warehousebinid, 1581,
			p_companyid,p_rateperkg, null, null, null, p_userid, @deliverydetail
		);
		
		-- update pending weight in birdsalesorder table
		SET @batchsaleweight = null;
		SET @birdsalesorderdetailid = null;
		SET @pendingweight = null;
		SELECT BSD.id, BSD.batchsaleweight, BSD.pendingweight,birdqty
		INTO @birdsalesorderdetailid, @batchsaleweight, @pendingweight,@birdqty
		FROM cbf_birdsalesorderdetail BSD
		LEFT JOIN cbf_delivery_weights CDW ON CDW.birdsalesorderid = BSD.cbfbirdsalesorderid
		WHERE CDW.id = p_cbf_delivery_weightsid AND BSD.cbf_batchid = p_cbf_batchid;
		
		UPDATE cbf_birdsalesorderdetail SET pendingweight = (@pendingweight - p_deliveredwt),
		birdqty = (@birdqty - p_deliveredqty) WHERE id = @birdsalesorderdetailid;
		
		-- UPDATE LIVE BATCH QUANTITY OF SELECTED BATCH
		SET @live_batch_qty = null;
		SET @sale_qty = null;
		SET @production_qty = null;
		SELECT live_batch_qty, IFNULL(sale_qty,0), IFNULL(production_qty,0) INTO @live_batch_qty, @sale_qty, @production_qty FROM cbf_batch_details WHERE id = p_cbf_batchid;
		UPDATE cbf_batch_details SET live_batch_qty = (@live_batch_qty - p_deliveredqty),
		production_qty = (@production_qty - p_deliveredqty),
		batch_lifting_date = @liftingdate,
		sale_qty = (@sale_qty + p_deliveredqty)
		WHERE id = p_cbf_batchid;
		
		SET @batquantity = null;
		SELECT quantity INTO @batquantity FROM cbf_batchbalance WHERE cbfbatchid = p_cbf_batchid;
		UPDATE cbf_batchbalance 
		SET quantity = @batquantity - p_deliveredqty,
		updateddate = @liftingdate,
		transactionname = 'CBF lifting weight'
		WHERE cbfbatchid = p_cbf_batchid;
		
		IF((SELECT live_batch_qty FROM cbf_batch_details WHERE id = p_cbf_batchid) = 0) THEN
			UPDATE cbf_batch_details SET statusid = 3024,
			batch_close_date = @liftingdate WHERE id = p_cbf_batchid;
			
			UPDATE cbf_farmerenquiry_sheddimensiondetail 
			SET statusid = 2081 
			WHERE farmerenquiryid = @farmerenquiryid;
			
		END IF;
		
		IF(@islastdelivery = 1) THEN
			UPDATE cbf_batch_details SET statusid = 3024,
			batch_close_date = @liftingdate WHERE id = p_cbf_batchid;
			
			UPDATE cbf_farmerenquiry_sheddimensiondetail 
			SET statusid = 2081 
			WHERE farmerenquiryid = @farmerenquiryid;
		END IF;
	END IF;
    -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_delivery_weights_detail', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdeliveryweightsdetail_search`(
	IN p_cbf_delivery_weightsid INT,
	IN p_companyid INT
)
BEGIN

	SELECT CDWD.id, 
		   CDWD.cbf_delivery_weightsid,
           CDWD.cbf_batchid,
           CDWD.plannedqty,
           CDWD.deliveredqty,
           CDWD.plannedwt,
		   CDWD.deliveredwt,
           CDWD.liftingtime,
           CDWD.rateperkg,
           CDWD.totalcost,
           CDWD.excessbirds,
           CDWD.birdshortage,
           CB.batch_number
           
	FROM cbf_delivery_weights_detail CDWD
    LEFT JOIN cbf_batch_details CB ON CB.id = CDWD.cbf_batchid
    
    WHERE CDWD.cbf_delivery_weightsid = p_cbf_delivery_weightsid
    AND CDWD.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdeliveryweightsdetail_select`(
	IN p_id INT,
	IN p_companyid INT
)
BEGIN

	SELECT 
		   CDWD.id, 
           CBD.batch_number,
           CBD.live_batch_qty as openqty,
		   CDWD.cbf_delivery_weightsid,
           CDW.liftingscheduleid as liftingscheduledetailid,
           CDWD.cbf_batchid,
           CDWD.plannedqty,
           CDWD.deliveredqty,
           CDWD.plannedwt,
		   CDWD.deliveredwt,
           CDWD.liftingtime,
           CDWD.rateperkg,
           CDWD.totalcost,
           CDWD.excessbirds,
           CDWD.birdshortage
           
	FROM cbf_delivery_weights CDW
    LEFT JOIN cbf_delivery_weights_detail CDWD ON CDWD.cbf_delivery_weightsid = CDW.id
    LEFT JOIN cbf_batch_details CBD ON CBD.id = CDWD.cbf_batchid and CDWD.id=p_id
   -- LEFT JOIN cbf_lifting_schedule LS ON LS.id = CDW.lifting_schedule_id
    WHERE CDWD.id = p_id
    AND CDWD.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdeliveryweights_delete`(
	IN p_id INT,
	IN p_companyid INT
)
BEGIN

	DELETE FROM cbf_delivery_weights WHERE id = p_id AND companyid = p_companyid;
	DELETE FROM cbf_delivery_weights_detail WHERE cbf_delivery_weightsid = p_id AND companyid = p_companyid;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdeliveryweights_save`(
 IN p_id INT(11),
 IN p_liftingscheduleid INT,
 IN p_farmerenquiryid INT,
 IN p_birdsalesorderid INT,
 IN p_stdsalesorderid INT,
 IN p_liftingdate DATE,
 IN p_totaldeliveredqty INT,
 IN p_totaldeliveredwt DECIMAL(12,3),
 IN p_totaldeliverycost DECIMAL(12,3),
 IN p_excessbirds INT,
 IN p_birdshortage INT,
 IN p_islastdelivery TINYINT(4),
 IN p_statusid INT(11),
 IN p_customerid INT(11),
 IN p_companyid INT(11),
 IN p_userid INT(11),
 OUT out_id INT )
BEGIN
SET @action = null;
SET @stdsalesorderid = null;
SELECT stdsalesorderid INTO @stdsalesorderid
FROM cbf_birdsalesorder 
WHERE id = p_birdsalesorderid;
				
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO cbf_delivery_weights(
				liftingscheduleid, farmerenquiryid, birdsalesorderid, stdsalesorderid,
				`liftingdate`, totaldeliveredqty, totaldeliveredwt,
				totaldeliverycost, excessbirds, birdshortage,
				islastdelivery, statusid, companyid, customerid)
        VALUES (p_liftingscheduleid, p_farmerenquiryid, p_birdsalesorderid, 
				@stdsalesorderid, p_liftingdate, p_totaldeliveredqty, p_totaldeliveredwt,
                p_totaldeliverycost, p_excessbirds, p_birdshortage,
                p_islastdelivery, p_statusid, p_companyid, p_customerid); 
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE cbf_delivery_weights
        SET liftingscheduleid = p_liftingscheduleid, 
			farmerenquiryid = p_farmerenquiryid,
			birdsalesorderid = p_birdsalesorderid,
			stdsalesorderid = @stdsalesorderid, 
			`liftingdate` = p_liftingdate, 
            totaldeliveredqty = p_totaldeliveredqty,
            totaldeliveredwt = p_totaldeliveredwt,
            totaldeliverycost = p_totaldeliverycost, 
            excessbirds = p_excessbirds, 
            birdshortage = p_birdshortage,
			islastdelivery = p_islastdelivery,
            statusid = p_statusid,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    SET @delivery = null;
    IF(p_statusid = 6302) THEN
		-- Sales delivery
    
		SET @customerid = null;
		IF(p_customerid IS NULL)THEN
			SELECT customerid INTO @customerid FROM salesorder WHERE id = @stdsalesorderid;
		ELSE 
			SELECT p_customerid INTO @customerid;
		END IF;
		
		UPDATE cbf_delivery_weights
		SET customerid = @customerid
		WHERE id = p_id;    
        
         SET @warehouseaddress = null;
         SET @deliverytoaddress = null;
         SET @billtoaddress = null;

		CALL spc_salesdelivery_save(
			NULL, 723, @stdsalesorderid, NULL,
			p_liftingdate, (SELECT id FROM partyaddress WHERE partyid = @customerid AND addresstypeid = 1404 LIMIT 1),
            fnc_getaddress('partaddress', (SELECT id FROM partyaddress WHERE partyid = @customerid AND addresstypeid = 1404 LIMIT 1)), 
            (SELECT id FROM partyaddress WHERE partyid = @customerid AND addresstypeid = 1402 LIMIT 1),
            fnc_getaddress('partaddress', (SELECT id FROM partyaddress WHERE partyid = @customerid AND addresstypeid = 1402 LIMIT 1)), 
			(SELECT defaultcbfwarehouseid FROM cbfsetting LIMIT 1),
            fnc_getaddress('warehouse', (SELECT defaultcbfwarehouseid FROM cbfsetting LIMIT 1)), 
            NULL, NULL, 1622, @customerid, p_companyid, p_userid, @delivery
		);
		
		SELECT @delivery as stddeliveryid;

		-- update deliveryid in cbf_delivery_weights table
		UPDATE cbf_delivery_weights SET stddeliveryid = @delivery WHERE id = OUT_ID;
	ELSE
		SELECT -1 as stddeliveryid;
	END IF;
		
    -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_delivery_weights', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdeliveryweights_search`(
	IN p_companyid INT
)
BEGIN

	SELECT CDW.id,
		   CDW.liftingscheduleid, 
           CDW.farmerenquiryid,
           FE.farmer_name,
           SO.salesorderno,
           CB.id as branchid,
           CB.branchname,
		   CDW.birdsalesorderid,
           BSO.vendorid,
           P.partyname,
           P.partycode,
           CDW.stdsalesorderid,
           DATE_FORMAT(CDW.liftingdate,'%d/%m/%Y') as liftingdate,
           CDW.totaldeliveredqty,
           CDW.totaldeliveredwt,
           CDW.totaldeliverycost,
           CDW.excessbirds,
           CDW.birdshortage,
           CDW.islastdelivery,
           CDW.companyid,
           CDW.statusid,
           CS.deliverywithoutso,
           1 as fromweight,
           3 as toweight,
           CDW.customerid
           
	FROM cbf_delivery_weights CDW
    LEFT JOIN cbf_birdsalesorder BSO ON BSO.id = CDW.birdsalesorderid
    LEFT JOIN party P ON P.id = BSO.vendorid
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = CDW.farmerenquiryid
    LEFT JOIN commonbranch CB ON CB.id = FE.branch_id
    LEFT JOIN salesorder SO ON SO.id = CDW.stdsalesorderid
    INNER JOIN common_setting CS ON CS.companyid = CDW.companyid
    
    WHERE CDW.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdeliveryweights_select`(
	IN p_id INT,
	IN p_companyid INT
)
BEGIN

	SELECT CDW.id,
		   CDW.liftingscheduleid, 
           CDW.farmerenquiryid,
		   CDW.birdsalesorderid,
		   CDW.birdsalesorderid as cbfbirdsalesorderid,
           CDW.stdsalesorderid,
           DATE_FORMAT(CDW.liftingdate,'%d/%m/%Y') as liftingdate,
           CDW.totaldeliveredqty,
           CDW.totaldeliveredwt,
           CDW.totaldeliverycost,
           CDW.excessbirds,
           CDW.birdshortage,
           CDW.islastdelivery,
           CDW.companyid,
           CDW.statusid
           
	FROM cbf_delivery_weights CDW
    
    WHERE CDW.id = p_id AND CDW.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdensityregister_report`(
IN p_fromdate date,
IN p_todate date,
IN p_fromage INT(11),
IN p_toage INT(11),
IN p_branch_id varchar(225),
IN p_line_id varchar(225),
IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';

DROP TEMPORARY TABLE IF EXISTS tempdensity;
CREATE TEMPORARY TABLE tempdensity 
	

SELECT  
        DATE_FORMAT( CBD.batch_place_date,'%d/%m/%Y') as placement_date,
		((DATEDIFF(CBD.live_batch_date,CBD.batch_place_date))+1) As age,
        -- DATE_FORMAT(fnc_getcbfplacementdate(CBD.id,p_companyid),'%d/%m/%Y') as placementdate,
        ((DATEDIFF(p_todate,CBD.batch_place_date))+1) As finalage,
        CBD.live_batch_date,
        CBD.batch_number,
        CCP.batch_id,
        CFE.farmer_name,
		CFE.farm_name,
		CFE.branch_id,
        CFE.line_id,
        CB.branchname,
		CL.linename,
        CFE.total_area,
		-- D.densityperbird as density,
		IFNULL(((CFE.total_area)/CBD.batch_place_qty),0) As density,
		-- CCP.chick_qty,
        CBD.batch_place_qty as chick_qty
      
        
 FROM cbf_farmerenquiry CFE
	LEFT JOIN commonbranch CB  ON  CB.id = CFE.branch_id
    LEFT JOIN location L ON L.branchid =  CFE.branch_id
    LEFT JOIN density D  ON  D.locationid = L.id
    LEFT JOIN cbf_line CL  ON  CL.id = CFE.line_id
    LEFT JOIN cbf_batch_details CBD  ON  CBD.farmer_enquiry_id = CFE.id
	LEFT JOIN cbf_chick_placement CCP ON CFE.id = CCP.farmer_enquiry_id
 

WHERE       CBD.batch_place_date BETWEEN p_fromdate AND p_todate AND
			((DATEDIFF(CBD.live_batch_date,CBD.batch_place_date))+1) BETWEEN p_fromage AND p_toage AND
			CFE.company_id = p_companyid AND
			FIND_IN_SET( CFE.branch_id, p_branch_id) AND
			FIND_IN_SET( CFE.line_id, p_line_id)
            GROUP BY CBD.id;
            
DROP TEMPORARY TABLE IF EXISTS tempdensity1;            
CREATE TEMPORARY TABLE tempdensity1            
            
select * from tempdensity;    
-- for subtotal --

DROP TEMPORARY TABLE IF EXISTS tempdensity2;
CREATE TEMPORARY TABLE tempdensity2

select * from ( 

select * from  tempdensity1
UNION ALL

SELECT 
				'' AS placement_date,
                '' AS age,
                -- '' AS placementdate,
                -- '' AS densityperbird,
                '' AS finalage,
                '' AS live_batch_date,
				'' AS batch_number,
                '' AS batch_id,
                '' AS farmer_name,
                '' AS farm_name,
                '' AS branch_id,
                line_id AS line_id,
				'' AS branchname,
                'Sub Total' as linename,
                SUM(total_area) as total_area,
				-- SUM((total_area)/chick_qty) as density,
                SUM(density) as density,
				SUM(chick_qty) as batch_qt
 
 FROM  tempdensity
 
 	GROUP BY linename ) as tmpresult; 
 
 SELECT * FROM tempdensity2;
      
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdocumentcollectiondetails_delete`(
IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_documentcollectiondetails WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdocumentcollectiondetails_save`(
	IN p_id INT(11),
    IN p_document_collection_id INT(11),
    IN p_document_id INT(11),
    IN p_image_url VARCHAR(250),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_documentcollectiondetails
				(id, document_collection_id, document_id, image_url, company_id)
			VALUES 
				(p_id, p_document_collection_id, p_document_id, p_image_url, p_companyid);
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE cbf_documentcollectiondetails
				SET document_collection_id = p_document_collection_id, 
                document_id = p_document_id,
                image_url = p_image_url,
                company_id = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'cbf_documentcollectiondetails', out_id, @action, p_userid);

    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdocumentcollectiondetails_search`(
	IN p_documentcollectionid INT(11),
	IN p_companyid INT(11)
)
BEGIN
	SELECT CDD.*,
		   D.documentname as document,
           D.ismandatory as mandatory
           
    FROM cbf_documentcollectiondetails CDD
    LEFT JOIN document D ON D.id = CDD.document_id
    WHERE document_collection_id = p_documentcollectionid 
    AND CDD.company_id = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdocumentcollectiondetails_select`(
	IN p_id INT(11),
    IN p_document_collection_id INT,
    IN p_companyid INT(11)
)
BEGIN
	SELECT * FROM cbf_documentcollectiondetails
    WHERE id = p_id
    AND document_collection_id = p_document_collection_id
    AND company_id = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdocumentcollectionlist_search`(
	IN p_from_date date,
	IN p_to_date date
)
BEGIN
	SELECT CD.*,
		   B.branchname,
           FE.farmer_name,
           REF.refname,
           FE.farm_name
    
    FROM cbf_documentcollection CD
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = CD.enquiry_id
    LEFT JOIN commonbranch B ON B.id = FE.branch_id
    LEFT JOIN `reference` REF ON REF.id = CD.status_id
    
    WHERE
        CD.receipt_date BETWEEN p_from_date AND p_to_date
    
    ORDER BY CD.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdocumentcollection_delete`(
IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_documentcollection WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdocumentcollection_save`(
	IN p_id INT(11),
    IN p_enquiry_id INT(11),
    IN p_status_id INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_documentcollection
				(id, enquiry_id, status_id, companyid)
			VALUES 
				(p_id, p_enquiry_id, p_status_id, p_companyid);
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE cbf_documentcollection
				SET enquiry_id = p_enquiry_id, 
                status_id = p_status_id, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'cbf_documentcollection', out_id, @action, p_userid);

    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdocumentcollection_search`(
	IN p_companyid INT(11)
)
BEGIN
	SELECT CD.*,
		   B.branchname,
           FE.farmer_name,
           REF.refname,
           FE.farm_name
    
    FROM cbf_documentcollection CD
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = CD.enquiry_id
    LEFT JOIN commonbranch B ON B.id = FE.branch_id
    LEFT JOIN `reference` REF ON REF.id = CD.status_id
    
    WHERE CD.companyid = p_companyid
    
    ORDER BY CD.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfdocumentcollection_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN
	SELECT * FROM cbf_documentcollection
    WHERE id = p_id
    AND companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmenquirydetail_search`(
	IN p_farmerenquiryid INT(11),
    IN p_companyid INT(11) 
)
BEGIN

	-- water analysis
	SELECT FW.id, 
		   water_parameter_id,
		   result,
           W.name,
           W.unit,
           W.stdspecification
           
	FROM cbf_farmerenquiry_wateranalysis FW
    LEFT JOIN waterparameter W ON W.id = FW.water_parameter_id
    
    WHERE FW.farmerenquiryid = p_farmerenquiryid
    AND FW.companyid = p_companyid;
    
    -- Shed dimension detail
    SELECT id, 
		   shed_name,
			width,
			length,
			total_sq_ft,
			side_wall_height,
			wire_mash_height,
			side_height,
			center_height,
			foundation_height,
			dist_bet_shed,
			dist_from_branch,
			dist_from_feed_mill,
            statusid
            
	FROM cbf_farmerenquiry_sheddimensiondetail
    
    WHERE farmerenquiryid = p_farmerenquiryid
    AND companyid = p_companyid;
    
    
    -- Equipment details
    SELECT FEE.id, 
		   FEE.equipment_id,
		   FEE.fulfillment_qty,
		   FEE.fulfillment,
           FP.parametername,
           FP.requiredratio
           
	FROM cbf_farmerenquiry_equipmentdetail FEE
    LEFT JOIN cbffarmparameter FP ON FP.id = FEE.equipment_id
    
    WHERE FEE.farmerenquiryid = p_farmerenquiryid
    AND FEE.companyid = p_companyid;
    
    
    -- Previous performance history
    SELECT id, 
		     contract_type_id,
			 company_name,
			 batches_grown,
			 avg_body_weight,
			 fcr,
			 mortality,
			 eef,
			 rearing_charges
             
	FROM cbf_farmerenquiry_prevperformancehistory
    
    WHERE farmerenquiryid = p_farmerenquiryid
    AND companyid = p_companyid;
    
    -- parent table
     SELECT FE.id, 
                supervisor_id,
                E.employeename,
                DATE_FORMAT(enquiry_date,'%d/%m/%Y') as enquiry_date,
                farmer_name,
                farm_name,
                farm_type_id,
                address,
                mobile_no,
                incharge_name,
                shed_type_id,
                property_owner,
                age,
                occupation,
                branch_id,
                B.branchname,
                line_id,
                rest_period,
                farm_area_length,
                farm_area_width,
                total_area,
                density,
                incharge_contact_no,
                water_facility_id,
                over_head_tank_capacity,
                over_head_tank_type_id,
                holding_tank_capacity,
                holding_tank_type_id,
                flooring_id,
                roofing_id,
                diesel_brooder,
                gas_brooder,
                cool_brooder,
                farm_partition,
                electric_brooder,
                wood_brooder,
                thermometer,
                spray_pump,
                road_facility_id,
                mseb_connection_id,
                feed_room_facility,
                curtain_type_id,
                cross_curtains,
                foggers,
                mortality_disposal_pit,
                generator,
                refrigerator,
                inverter,
                tus_storage_facility,
                thermos,
                out_side_curtains,
                ceiling_curtains,
                center_curtains,
                contract_type_id,
                reasons_for_disc_per,
                district,
                taluka,
                post,
                gat_sr_no,
                area,
                valuation,
                owner_name,
                chick_capacity,
                status_id,
                distance_from_branch,
                distance_from_feed_mill
                
		FROM cbf_farmerenquiry FE
        LEFT JOIN commonbranch B ON B.id = FE.branch_id
        LEFT JOIN employee E ON E.id = FE.supervisor_id
        
        WHERE FE.id = p_farmerenquiryid AND FE.company_id = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmeragreementdocumentdetails_delete`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	DELETE FROM cbf_farmeragreement_documentdetails WHERE id = p_id AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmeragreementdocumentdetails_save`(
	IN p_id INT(11),
	IN p_farmeragreementid INT(11),
	IN p_documentid INT(11),
	IN p_iscollected TINYINT(4),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_farmeragreement_documentdetails 
				(id, farmeragreementid, documentid, iscollected, companyid)
			VALUES 
				(p_id, p_farmeragreementid, p_documentid, p_iscollected, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_farmeragreement_documentdetails
				SET farmeragreementid = p_farmeragreementid,
                documentid = p_documentid,
                iscollected = p_iscollected,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_farmeragreement_documentdetails', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmeragreementdocumentdetails_search`(
	IN p_farmeragreementid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT FAD.id, farmeragreementid, documentid, iscollected, D.documentname
    
    FROM cbf_farmeragreement_documentdetails FAD
    LEFT JOIN document D ON D.id = FAD.documentid
    
    WHERE FAD.farmeragreementid = p_farmeragreementid
    AND FAD.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmeragreementdocumentdetails_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT FAD.id, farmeragreementid, documentid, iscollected, D.documentname
    
    FROM cbf_farmeragreement_documentdetails FAD
    LEFT JOIN document D ON D.id = FAD.documentid
    
    WHERE FAD.id = p_id
    AND FAD.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmeragreement_delete`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	DELETE FROM cbf_farmeragreement_documentdetails WHERE farmeragreementid = p_id AND companyid = p_companyid;
    DELETE FROM cbf_farmeragreement WHERE id = p_id AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmeragreement_save`(
	IN p_id INT(11),
	IN p_farmerenquiryid INT(11),
    IN p_farmer_name VARCHAR(100),
	IN p_description varchar(100),
    IN p_emailid VARCHAR(150),
	IN p_agreementmethodid INT(11),
	IN p_agreementtypeid INT(11),
	IN p_startdate DATE,
	IN p_enddate DATE,
	IN p_terminationdate DATE,
	IN p_signingdate DATE,
	IN p_schemeid INT(11),
	IN p_statusid INT(11),
	IN p_remark varchar(150),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_farmeragreement 
				(partyid, farmerenquiryid, description, emailid, agreementmethodid,
                agreementtypeid, startdate, enddate, terminationdate, signingdate, 
                schemeid, statusid, remark, companyid)
			VALUES 
				(null, p_farmerenquiryid, p_description, p_emailid, p_agreementmethodid,
                p_agreementtypeid, p_startdate, p_enddate, p_terminationdate, p_signingdate, 
                p_schemeid, p_statusid, p_remark, p_companyid);
	  SET @action = 'INSERT';
      
      
	ELSE
    
		UPDATE cbf_farmeragreement
				SET
                farmerenquiryid = p_farmerenquiryid,
                description = p_description,
                emailid = p_emailid,
                agreementmethodid = p_agreementmethodid,
                agreementtypeid = p_agreementtypeid,
                startdate = p_startdate,
                enddate = p_enddate,
                terminationdate = p_terminationdate,
                signingdate = p_signingdate, 
                schemeid = p_schemeid,
                statusid = p_statusid,
                remark = p_remark,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- Create new party with role farmer = 34
    
    SET @mobileno = null;
    SET @address = null;
    SET @cityid = NULL;
    SET @supplierledgerid = null;
    SET @tdsid = null;
    
    SELECT mobile_no, address, cityid INTO @mobileno, @address, @cityid FROM cbf_farmerenquiry WHERE id = p_farmerenquiryid;
    
    SELECT supplierledgerid INTO @supplierledgerid FROM cbfsetting WHERE companyid = p_companyid LIMIT 1;
    
    SELECT tdsid INTO @tdsid FROM cbfsetting LIMIT 1;
    
    IF((SELECT farmer_id FROM cbf_farmerenquiry WHERE id = p_farmerenquiryid) IS NOT NULL) THEN
    
		UPDATE cbf_farmeragreement SET partyid = (SELECT farmer_id FROM cbf_farmerenquiry WHERE id = p_farmerenquiryid) WHERE id = out_id;
		
	
    ELSE
    if(p_statusid = 2062) then
		SET @partyseries = null;
        CALL spc_financialyeardocseries_newseries_forparty(
			'FR', p_companyid, 34, @partyseries
        );
		-- update partyid in cbf_farmeragreement table
		SET @out_partyid = NULL;
		/*CALL spc_party_save(
			NULL, p_farmer_name, 34, @mobileno,
			NULL, NULL, NULL, NULL, NULL, p_emailid,
			NULL, NULL, NULL, NULL, NULL, 1, @supplierledgerid, NULL, (SELECT @partyseries), @tdsid,
			723,NULL,NULL,NULL,NULL,NULL,p_companyid, p_userid, @out_partyid
		);*/
        
        CALL spc_party_save(
			NULL, p_farmer_name, 34, @mobileno,
			NULL, NULL, NULL, NULL, NULL, p_emailid,
			NULL, NULL, NULL, NULL, NULL, 1, (SELECT @partyseries), @tdsid,
			723,NULL,NULL,NULL,NULL,NULL,p_companyid, p_userid, @out_partyid
		);
		
		-- update partyid in cbf_farmeragreement table
		UPDATE cbf_farmeragreement SET partyid = @out_partyid WHERE id = out_id;
		
		-- create party address
		SET @out_partyaddressid = NULL;
		CALL spc_partyaddress_save(
			NULL, @out_partyid, NULL, @address,
			@cityid, (SELECT stateid FROM city WHERE id = @cityid),
			(SELECT countryid FROM state WHERE id = (SELECT stateid FROM city WHERE id = @cityid)),
			NULL, NULL, NULL, NULL,
			p_companyid, p_userid, @out_partyaddressid
		);
		
		-- create party contact
		SET @out_partycontactid = NULL;
		CALL spc_partycontact_save(
			NULL, @out_partyid, @mobileno, NULL, 
			p_companyid, p_userid, @out_partycontactid
		);
        END IF;
        
    END IF;
    
    -- update shed status in farmer enquiry as shed ready = 2082
   /* BEGIN
    
		DECLARE n INT DEFAULT 0;
		DECLARE i INT DEFAULT 0;
		SELECT COUNT(*) INTO n FROM cbf_farmerenquiry_sheddimensiondetail WHERE farmerenquiryid = p_farmerenquiryid;
        
        WHILE i<n DO 
        
			UPDATE cbf_farmerenquiry_sheddimensiondetail SET statusid = 2082 WHERE farmerenquiryid = p_farmerenquiryid;
            
			SET i = i + 1;
		END WHILE;
    
    END;*/
   -- record log
 --  CALL spc_commonlog_save(p_companyid, 'cbf_farmeragreement', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmeragreement_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT FA.id,
		   FA.partyid, 
           FE.farmer_name,
           farmerenquiryid, 
           description, 
           agreementmethodid,
		   agreementtypeid, 
           DATE_FORMAT(startdate,'%d/%m/%Y') as startdate,
           DATE_FORMAT(enddate,'%d/%m/%Y') as enddate,
           DATE_FORMAT(terminationdate,'%d/%m/%Y') as terminationdate,
           DATE_FORMAT(signingdate,'%d/%m/%Y') as signingdate,
		   schemeid, 
           CS.name as scheme_name,
           statusid, 
           remark,
           REF.refname,
           FA.emailid
                
	FROM cbf_farmeragreement FA
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = FA.farmerenquiryid
    LEFT JOIN `reference` REF ON REF.id = FA.statusid
    LEFT JOIN coststructure CS ON CS.id = FA.schemeid
    LEFT JOIN party P ON P.id = FA.partyid
    
    WHERE FA.companyid = p_companyid
    
    ORDER BY FA.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmeragreement_select`(
	IN p_id INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
		   partyid, 
           farmerenquiryid, 
           description, 
           agreementmethodid,
		   agreementtypeid, 
           DATE_FORMAT(startdate,'%d/%m/%Y') as startdate,
           DATE_FORMAT(enddate,'%d/%m/%Y') as enddate,
           DATE_FORMAT(terminationdate,'%d/%m/%Y') as terminationdate,
           DATE_FORMAT(signingdate,'%d/%m/%Y') as signingdate,
		   schemeid, 
           statusid, 
           remark,
           emailid
                
	FROM cbf_farmeragreement
    
    WHERE id = p_id AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquiryequipmentdetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_farmerenquiry_equipmentdetail WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquiryequipmentdetail_save`(
   IN p_id INT(11),
   IN p_farmerenquiryid INT(11),
   IN p_equipment_id INT(11),
   IN p_fulfillment_qty DECIMAL(12,3),
   IN p_fulfillment TINYINT(4),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_farmerenquiry_equipmentdetail
				(id,
				 farmerenquiryid,
				 equipment_id,
				 fulfillment_qty,
				 fulfillment,
                 companyid)
			VALUES 
				(p_id,
				 p_farmerenquiryid,
				 p_equipment_id,
				 p_fulfillment_qty,
				 p_fulfillment,
                 p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_farmerenquiry_equipmentdetail
				SET 
					 farmerenquiryid = p_farmerenquiryid,
					 equipment_id = p_equipment_id,
					 fulfillment_qty = p_fulfillment_qty,
					 fulfillment = p_fulfillment,
					 companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_farmerenquiry_equipmentdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquiryequipmentdetail_search`(
	IN p_farmerenquiryid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,equipment_id,
		   fulfillment_qty,
		   fulfillment
           
	FROM cbf_farmerenquiry_equipmentdetail
    
    WHERE farmerenquiryid = p_farmerenquiryid
    AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquiryequipmentdetail_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,equipment_id,
		   fulfillment_qty,
		   fulfillment
           
	FROM cbf_farmerenquiry_equipmentdetail
    
    WHERE id = p_id
    AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquiryprevperformancehistory_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_farmerenquiry_prevperformancehistory WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquiryprevperformancehistory_save`(
   IN p_id INT(11),
   IN p_farmerenquiryid INT(11),
   IN p_contract_type_id INT(11),
   IN p_company_name VARCHAR(100),
   IN p_batches_grown VARCHAR(45),
   IN p_avg_body_weight DECIMAL(9,3),
   IN p_fcr DECIMAL(9,3),
   IN p_mortality DECIMAL(9,3),
   IN p_eef DECIMAL(9,3),
   IN p_rearing_charges DECIMAL(9,3),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_farmerenquiry_prevperformancehistory
				(id,
				 farmerenquiryid,
				 contract_type_id,
				 company_name,
				 batches_grown,
				 avg_body_weight,
				 fcr,
				 mortality,
				 eef,
				 rearing_charges,
                 companyid)
			VALUES 
				(p_id,
				 p_farmerenquiryid,
				 p_contract_type_id,
				 p_company_name,
				 p_batches_grown,
				 p_avg_body_weight,
				 p_fcr,
				 p_mortality,
				 p_eef,
				 p_rearing_charges,
                 p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_farmerenquiry_prevperformancehistory
				SET 
					 farmerenquiryid = p_farmerenquiryid,
					 contract_type_id = p_contract_type_id,
					 company_name = p_company_name,
					 batches_grown = p_batches_grown,
					 avg_body_weight = p_avg_body_weight,
					 fcr = p_fcr,
					 mortality = p_mortality,
					 eef = p_eef,
					 rearing_charges = p_rearing_charges,
					 companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_farmerenquiry_prevperformancehistory', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquiryprevperformancehistory_search`(
	IN p_farmerenquiryid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,contract_type_id,
			 company_name,
			 batches_grown,
			 avg_body_weight,
			 fcr,
			 mortality,
			 eef,
			 rearing_charges
             
	FROM cbf_farmerenquiry_prevperformancehistory
    
    WHERE farmerenquiryid = p_farmerenquiryid
    AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquiryprevperformancehistory_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,contract_type_id,
			 company_name,
			 batches_grown,
			 avg_body_weight,
			 fcr,
			 mortality,
			 eef,
			 rearing_charges
             
	FROM cbf_farmerenquiry_prevperformancehistory
    
    WHERE id = p_id
    AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquirysheddimensiondetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_farmerenquiry_sheddimensiondetail where id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquirysheddimensiondetail_save`(
   IN p_id INT(11),
   IN p_farmerenquiryid INT(11),
   IN p_shed_name VARCHAR(100),
   IN p_width DECIMAL(9,3),
   IN p_length DECIMAL(9,3),
   IN p_total_sq_ft DECIMAL(12,3),
   IN p_side_wall_height DECIMAL(9,3),
   IN p_wire_mash_height DECIMAL(9,3),
   IN p_side_height DECIMAL(9,3),
   IN p_center_height DECIMAL(9,3),
   IN p_foundation_height DECIMAL(9,3),
   IN p_dist_bet_shed DECIMAL(9,3),
   IN p_dist_from_branch DECIMAL(9,3),
   IN p_dist_from_feed_mill DECIMAL(9,3),
   IN p_statusid INT(11),
   IN p_warehousebinid INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_farmerenquiry_sheddimensiondetail 
				(id,
				 farmerenquiryid,
				 shed_name,
				 width,
				 length,
				 total_sq_ft,
				 side_wall_height,
				 wire_mash_height,
				 side_height,
				 center_height,
				 foundation_height,
				 dist_bet_shed,
				 dist_from_branch,
				 dist_from_feed_mill,
                 statusid,
                 warehousebinid,
                 companyid)
			VALUES 
				(p_id,
				 p_farmerenquiryid,
				 p_shed_name,
				 p_width,
				 p_length,
				 p_total_sq_ft,
				 p_side_wall_height,
				 p_wire_mash_height,
				 p_side_height,
				 p_center_height,
				 p_foundation_height,
				 p_dist_bet_shed,
				 p_dist_from_branch,
				 p_dist_from_feed_mill,
                 p_statusid,
                 NULL,
                 p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_farmerenquiry_sheddimensiondetail
				SET 
					 farmerenquiryid = p_farmerenquiryid,
					 shed_name = p_shed_name,
					 width = p_width,
					 length = p_length,
					 total_sq_ft = p_total_sq_ft,
					 side_wall_height = p_side_wall_height,
					 wire_mash_height = p_wire_mash_height,
					 side_height = p_side_height,
					 center_height = p_center_height,
					 foundation_height = p_foundation_height,
					 dist_bet_shed = p_dist_bet_shed,
					 dist_from_branch = p_dist_from_branch,
					 dist_from_feed_mill = p_dist_from_feed_mill,
                     statusid = p_statusid,
                     warehousebinid = p_warehousebinid,
					 companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF((SELECT status_id FROM cbf_farmerenquiry WHERE id = p_farmerenquiryid) = 1722) THEN
    
		SET @warehouseid = NULL;
        SELECT defaultcbfwarehouseid INTO @warehouseid
        FROM cbfsetting LIMIT 1;
        
        SELECT @warehouseid;
      -- create one warehousebin for current shed
		SET @out_warehousebinid = NULL;
		CALL spc_warehousebin_save(
			NULL, @warehouseid, CONCAT(p_shed_name,'-BIN'), 
            CONCAT((SELECT farmer_name FROM cbf_farmerenquiry WHERE id = p_farmerenquiryid),p_shed_name,'-BIN'),
			p_companyid, 0, p_userid, @out_warehousebinid
		);
		
		-- update warehouse bin id 
		
		UPDATE cbf_farmerenquiry_sheddimensiondetail SET warehousebinid = @out_warehousebinid WHERE id = out_id;
            
	END IF;
    
   -- record log
  -- CALL spc_commonlog_save(p_companyid, 'cbf_farmerenquiry_sheddimensiondetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquirysheddimensiondetail_search`(
	IN p_farmerenquiryid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT SDD.id,SDD.shed_name,
		    SDD.farmerenquiryid,
			SDD.width,
			SDD.length,
			SDD.total_sq_ft,
			SDD.side_wall_height,
			SDD.wire_mash_height,
			SDD.side_height,
			SDD.center_height,
			SDD.foundation_height,
			SDD.dist_bet_shed,
			SDD.dist_from_branch,
			SDD.dist_from_feed_mill,
            SDD.statusid,
            (SDD.total_sq_ft / FE.density) as capacity
            
	FROM cbf_farmerenquiry_sheddimensiondetail SDD
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = SDD.farmerenquiryid
    
    WHERE SDD.farmerenquiryid = p_farmerenquiryid
    AND SDD.companyid = p_companyid
    AND SDD.statusid = 2081;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquirysheddimensiondetail_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,shed_name,
			width,
			length,
			total_sq_ft,
			side_wall_height,
			wire_mash_height,
			side_height,
			center_height,
			foundation_height,
			dist_bet_shed,
			dist_from_branch,
			dist_from_feed_mill,
            statusid
            
	FROM cbf_farmerenquiry_sheddimensiondetail
    
    WHERE id = p_id
    AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquirywateranalysis_delete`(
	 IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_farmerenquiry_wateranalysis WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquirywateranalysis_save`(
   IN p_id INT(11),
   IN p_farmerenquiryid INT(11),
   IN p_water_parameter_id INT(11),
   IN p_result DECIMAL(9,3),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_farmerenquiry_wateranalysis 
				(id,
				 farmerenquiryid,
				 water_parameter_id,
				 result,
                 companyid)
			VALUES 
				(p_id,
				 p_farmerenquiryid,
				 p_water_parameter_id,
				 p_result,
                 p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_farmerenquiry_wateranalysis
				SET 
					 farmerenquiryid = p_farmerenquiryid,
					 water_parameter_id = p_water_parameter_id,
					 result = p_result,
					 companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_farmerenquiry_wateranalysis', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquirywateranalysis_search`(
	IN p_farmerenquiryid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,
		   water_parameter_id,
		   result,
           W.name as facility
           
	FROM cbf_farmerenquiry_wateranalysis FW
    LEFT JOIN waterfacility W ON W.id = FW.water_parameter_id
    
    WHERE FW.farmerenquiryid = p_farmerenquiryid
    AND FW.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquirywateranalysis_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id, 
		   water_parameter_id,
		   result,
           W.name
           
	FROM cbf_farmerenquiry_wateranalysis FW
    LEFT JOIN waterparameter W ON W.id = FW.water_parameter_id
    
    WHERE FW.id = p_id
    AND FW.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerenquirywise_warehousebin`(
	IN p_farmerenquiryid INT(11)
)
BEGIN

	SELECT SDD.warehousebinid,
		   WB.binname,
           WB.bincode
	FROM cbf_farmerenquiry FE
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.farmerenquiryid = FE.id
    LEFT JOIN warehousebin WB ON WB.id = SDD.warehousebinid
    
    WHERE FE.id = p_farmerenquiryid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmerlist_report`(
IN p_branch_id varchar(200),
IN p_line_id varchar(200),
IN p_status_id varchar(200),
IN p_company_id INT(11)
)
BEGIN
SELECT  
        CFE.status_id,
		REF.refname as statusname,
        REF1.refname as accounttypename,
		CFE.farmer_name,
		CFE.farm_name,
        CFE.address,
        CFE.branch_id,
        CFE.line_id,
        CFE.mobile_no,
		CFE.total_area,
	    CFE.distance_from_feed_mill,
        CB.branchname,
        CL.linename,
        E.employeename,
        P.bankname,
        P.accounttype,
        P.bankbranch,
        P.ifsccode,
        P.accountno
       
      
	FROM cbf_farmerenquiry CFE
	LEFT JOIN commonbranch CB  ON  CB.id = CFE.branch_id
    LEFT JOIN  employee E  ON  E.id = CFE.supervisor_id
	LEFT JOIN  party P  ON  P.id = CFE.farmer_id
    LEFT JOIN cbf_line CL  ON  CL.id = CFE.line_id
	LEFT JOIN cbf_farmeragreement CFA  ON CFE.id = CFA.farmerenquiryid
    LEFT JOIN `reference` REF ON CFE.status_id = REF.id   
    LEFT JOIN `reference` REF1 ON P.accounttype = REF1.id   
           
    /* FROM cbf_farmerenquiry CFE
    LEFT JOIN cbf_farmeragreement CFA  ON CFE.id = CFA.farmerenquiryid
    LEFT JOIN commonbranch CB ON CFE.branch_id =   CB.id 
	LEFT JOIN commonbranchline CBL ON  CFE.line_id =  CBL.id 
	LEFT JOIN `reference` REF ON CFE.status_id = REF.id */
   
    
   WHERE 
	FIND_IN_SET( CFE.branch_id, p_branch_id) AND
	FIND_IN_SET( CFE.line_id, p_line_id) AND
	FIND_IN_SET(CFE.status_id, p_status_id) AND
     CFE.company_id = p_company_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmername_bybranchname`(
IN p_branchid varchar(200),
IN p_companyid INT(11)
)
BEGIN
SELECT 

		CB.id,
        CB.branchname,
        CFE.branch_id,
		CFE.farmer_name,
        CFE.id
        
FROM cbf_farmerenquiry CFE    
 LEFT JOIN  commonbranch CB ON CB.id = CFE.branch_id

 WHERE CFE.company_id = p_companyid AND
	FIND_IN_SET( CFE.branch_id, p_branchid); 
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmername_byline`(
IN p_branchlineid varchar(200),
IN p_companyid INT(11)

)
BEGIN
SELECT  -- CFE.id,
		CBFL.id as lineid,
        CFE.farmer_name,
        CFE.id
        
        
-- FROM  commonbranchline CBL
FROM cbf_farmerenquiry CFE 
LEFT JOIN cbf_line CBFL  ON CBFL.id = CFE.line_id   
LEFT JOIN commonbranch CB  ON  CB.id = CBFL.branchid


 WHERE CFE.company_id = p_companyid AND
FIND_IN_SET( CBFL.id, p_branchlineid);     


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmer_enquirylist_search`(
	IN p_from_date date,
	IN p_to_date date
)
BEGIN
	
    SELECT FE.id, 
			supervisor_id,
			DATE_FORMAT(enquiry_date,'%d/%m/%Y') as enquiry_date,
			farmer_name,
			farm_name,
			farm_type_id,
			address,
			mobile_no,
			incharge_name,
			shed_type_id,
			property_owner,
			age,
			occupation,
			branch_id,
            B.branchname,
            B.branchcode,
			line_id,
            CBL.linename,
			rest_period,
			farm_area_length,
			farm_area_width,
			total_area,
			density,
			incharge_contact_no,
			water_facility_id,
			over_head_tank_capacity,
			over_head_tank_type_id,
			holding_tank_capacity,
			holding_tank_type_id,
			flooring_id,
			roofing_id,
			diesel_brooder,
			gas_brooder,
			cool_brooder,
			farm_partition,
			electric_brooder,
			wood_brooder,
			thermometer,
			spray_pump,
			road_facility_id,
			mseb_connection_id,
			feed_room_facility,
			curtain_type_id,
			cross_curtains,
			foggers,
			mortality_disposal_pit,
			generator,
			refrigerator,
			inverter,
			tus_storage_facility,
			thermos,
			out_side_curtains,
			ceiling_curtains,
			center_curtains,
			contract_type_id,
			reasons_for_disc_per,
			taluka,
			post,
			gat_sr_no,
			area,
			valuation,
			owner_name,
			chick_capacity,
			status_id,
            REF.refname,
			distance_from_branch,
			distance_from_feed_mill,
            cityid as district,
            C.stateid,
            S.countryid
                
		FROM cbf_farmerenquiry FE
        LEFT JOIN commonbranch B ON B.id = FE.branch_id 
        LEFT JOIN commonbranchline CBL ON CBL.id = FE.line_id 
        LEFT JOIN city C ON C.id = FE.cityid
        LEFT JOIN state S ON S.id = C.stateid
        LEFT JOIN `reference` REF ON REF.id = FE.status_id
        
        WHERE
        FE.enquiry_date BETWEEN p_from_date AND p_to_date
        
        ORDER BY FE.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmer_enquiry_delete`(
  IN p_id INT
)
BEGIN
	DELETE FROM cbf_farmerenquiry WHERE id = p_id;
    
    -- record log
    -- CALL spc_commonlog_save(p_companyid, 'cbf_farmerenquiry', p_id, 'delete', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmer_enquiry_save`(
	IN p_id INT,
    IN p_supervisor_id INT,
    IN p_enquiry_date DATE,
    IN p_farmer_name VARCHAR(250),
    IN p_farmer_id INT(11),
    IN p_farm_name VARCHAR(250),
    IN p_farm_type_id INT,
    IN p_address VARCHAR(250),
    IN p_mobile_no VARCHAR(200),
    IN p_incharge_name VARCHAR(250),
    IN p_shed_type_id INT,
    IN p_property_owner VARCHAR(250),
    IN p_age INT,
    IN p_occupation VARCHAR(250),
    IN p_branch_id INT,
    IN p_line_id INT,
    IN p_rest_period INT,
    IN p_farm_area_length DECIMAL(12,3),
    IN p_farm_area_width DECIMAL(12,3),
    IN p_total_area DECIMAL(12,3),
    IN p_density DECIMAL(12,3),
    IN p_incharge_contact_no VARCHAR(200),
    IN p_water_facility_id INT,
    IN p_over_head_tank_capacity DECIMAL(12,3),
    IN p_over_head_tank_type_id INT,
    IN p_holding_tank_capacity DECIMAL(12,3),
    IN p_holding_tank_type_id INT,
    IN p_flooring_id INT,
    IN p_roofing_id INT,
    IN p_diesel_brooder INT,
    IN p_gas_brooder INT,
    IN p_cool_brooder INT,
    IN p_farm_partition INT,
    IN p_electric_brooder INT,
    IN p_wood_brooder INT,
    IN p_thermometer INT,
    IN p_spray_pump INT,
    IN p_road_facility_id INT,
    IN p_mseb_connection_id INT,
    IN p_feed_room_facility INT,
    IN p_curtain_type_id INT,
    IN p_cross_curtains TINYINT,
    IN p_foggers TINYINT,
    IN p_mortality_disposal_pit TINYINT,
    IN p_generator TINYINT,
    IN p_refrigerator TINYINT,
    IN p_inverter TINYINT,
    IN p_tus_storage_facility TINYINT,
    IN p_thermos TINYINT,
    IN p_out_side_curtains TINYINT,
    IN p_ceiling_curtains TINYINT,
    IN p_center_curtains TINYINT,
    IN p_contract_type_id INT,
    IN p_reasons_for_disc_per VARCHAR(250),
    IN p_district VARCHAR(250),
    IN p_taluka VARCHAR(250),
    IN p_post VARCHAR(250),
    IN p_gat_sr_no VARCHAR(250),
    IN p_area DECIMAL(12,3),
    IN p_valuation DECIMAL(12,3),
    IN p_owner_name VARCHAR(250),
    IN p_chick_capacity DECIMAL(12,3),
    IN p_status_id INT,
    IN p_distance_from_branch DECIMAL(12,3),
    IN p_distance_from_feed_mill DECIMAL(12,3),
    IN p_cityid INT,
    IN p_company_id INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF EXISTS(
		SELECT id from cbf_farmerenquiry where LOWER(farm_name) = LOWER(p_farm_name) AND LOWER(farmer_name) = LOWER(p_farmer_name)
			AND ((NULLIF(p_id, 0) IS NULL)
				OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
		
		) THEN BEGIN

			SELECT -1 INTO out_id;
	END;
    
    ELSE
		BEGIN
	
		IF(NULLIF(p_id, '0') IS NULL) THEN
			
			INSERT INTO cbf_farmerenquiry 
					(id, 
					supervisor_id,
					enquiry_date,
					farmer_name,
					farmer_id,
					farm_name,
					farm_type_id,
					address,
					mobile_no,
					incharge_name,
					shed_type_id,
					property_owner,
					age,
					occupation,
					branch_id,
					line_id,
					rest_period,
					farm_area_length,
					farm_area_width,
					total_area,
					density,
					incharge_contact_no,
					water_facility_id,
					over_head_tank_capacity,
					over_head_tank_type_id,
					holding_tank_capacity,
					holding_tank_type_id,
					flooring_id,
					roofing_id,
					diesel_brooder,
					gas_brooder,
					cool_brooder,
					farm_partition,
					electric_brooder,
					wood_brooder,
					thermometer,
					spray_pump,
					road_facility_id,
					mseb_connection_id,
					feed_room_facility,
					curtain_type_id,
					cross_curtains,
					foggers,
					mortality_disposal_pit,
					generator,
					refrigerator,
					inverter,
					tus_storage_facility,
					thermos,
					out_side_curtains,
					ceiling_curtains,
					center_curtains,
					contract_type_id,
					reasons_for_disc_per,
					cityid,
					district,
					taluka,
					post,
					gat_sr_no,
					area,
					valuation,
					owner_name,
					chick_capacity,
					status_id,
					distance_from_branch,
					distance_from_feed_mill,
					company_id)
				VALUES 
					(p_id,
					p_supervisor_id,
					p_enquiry_date,
					p_farmer_name,
					p_farmer_id,
					p_farm_name,
					p_farm_type_id,
					p_address,
					p_mobile_no,
					p_incharge_name,
					p_shed_type_id,
					p_property_owner,
					p_age,
					p_occupation,
					p_branch_id,
					p_line_id,
					p_rest_period,
					p_farm_area_length,
					p_farm_area_width,
					p_total_area,
					p_density,
					p_incharge_contact_no,
					p_water_facility_id,
					p_over_head_tank_capacity,
					p_over_head_tank_type_id,
					p_holding_tank_capacity,
					p_holding_tank_type_id,
					p_flooring_id,
					p_roofing_id,
					p_diesel_brooder,
					p_gas_brooder,
					p_cool_brooder,
					p_farm_partition,
					p_electric_brooder,
					p_wood_brooder,
					p_thermometer,
					p_spray_pump,
					p_road_facility_id,
					p_mseb_connection_id,
					p_feed_room_facility,
					p_curtain_type_id,
					p_cross_curtains,
					p_foggers,
					p_mortality_disposal_pit,
					p_generator,
					p_refrigerator,
					p_inverter,
					p_tus_storage_facility,
					p_thermos,
					p_out_side_curtains,
					p_ceiling_curtains,
					p_center_curtains,
					p_contract_type_id,
					p_reasons_for_disc_per,
					p_cityid,
					p_district,
					p_taluka,
					p_post,
					p_gat_sr_no,
					p_area,
					p_valuation,
					p_owner_name,
					p_chick_capacity,
					p_status_id,
					p_distance_from_branch,
					p_distance_from_feed_mill,
					p_company_id);
					
			SET @action = 'INSERT';

		ELSE
		
			UPDATE cbf_farmerenquiry
				SET supervisor_id = p_supervisor_id,
					enquiry_date = p_enquiry_date,
					farmer_name = p_farmer_name,
					farmer_id = p_farmer_id,
					farm_name = p_farm_name,
					farm_type_id = p_farm_type_id,
					address = p_address,
					mobile_no = p_mobile_no,
					incharge_name = p_incharge_name,
					shed_type_id = p_shed_type_id,
					property_owner = p_property_owner,
					age = p_age,
					occupation = p_occupation,
					branch_id = p_branch_id,
					line_id = p_line_id,
					rest_period = p_rest_period,
					farm_area_length = p_farm_area_length,
					farm_area_width = p_farm_area_width,
					total_area = p_total_area,
					density = p_density,
					incharge_contact_no = p_incharge_contact_no,
					water_facility_id = p_water_facility_id,
					over_head_tank_capacity = p_over_head_tank_capacity,
					over_head_tank_type_id = p_over_head_tank_type_id,
					holding_tank_capacity = p_holding_tank_capacity,
					holding_tank_type_id = p_holding_tank_type_id,
					flooring_id = p_flooring_id,
					roofing_id = p_roofing_id,
					diesel_brooder = p_diesel_brooder,
					gas_brooder = p_gas_brooder,
					cool_brooder = p_cool_brooder,
					farm_partition = p_farm_partition,
					electric_brooder = p_electric_brooder,
					wood_brooder = p_wood_brooder,
					thermometer = p_thermometer,
					spray_pump = p_spray_pump,
					road_facility_id = p_road_facility_id,
					mseb_connection_id = p_mseb_connection_id,
					feed_room_facility = p_feed_room_facility,
					curtain_type_id = p_curtain_type_id,
					cross_curtains = p_cross_curtains,
					foggers = p_foggers,
					mortality_disposal_pit = p_mortality_disposal_pit,
					generator = p_generator,
					refrigerator = p_refrigerator,
					inverter = p_inverter,
					tus_storage_facility = p_tus_storage_facility,
					thermos = p_thermos,
					out_side_curtains = p_out_side_curtains,
					ceiling_curtains = p_ceiling_curtains,
					center_curtains = p_center_curtains,
					contract_type_id = p_contract_type_id,
					reasons_for_disc_per = p_reasons_for_disc_per,
					cityid = p_cityid,
					district = p_district,
					taluka = p_taluka,
					post = p_post,
					gat_sr_no = p_gat_sr_no,
					area = p_area,
					valuation = p_valuation,
					owner_name = p_owner_name,
					chick_capacity = p_chick_capacity,
					status_id = p_status_id,
					distance_from_branch = p_distance_from_branch,
					distance_from_feed_mill = p_distance_from_feed_mill,
					company_id = p_company_id,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND company_id = p_company_id;
					
					SET @action = 'UPDATE';
		END IF;
		SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
  -- CALL spc_commonlog_save(p_company_id, 'cbf_farmerenquiry', out_id, @action, p_userid);
		END;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmer_enquiry_search`(
	IN p_companyid VARCHAR(250)
)
BEGIN
	/*select a.*, DATE_FORMAT(a.enquiry_date,'%d/%m/%Y') as enquiry_date, b.branchname, b.branchcode, c.id as supervisor_id, c.employeename as supervisor_name,
    d.id as shedtype_id, d.shedtype, e.id as status_id, e.refname as status from cbf_farmerenquiry as a 
    left OUTER join branch as b on a.branch_id = b.id
    left OUTER join employee as c on a.supervisor_id = c.id
    left OUTER join cbfshedtype as d on a.shed_type_id = d.id
    left OUTER join `reference` as e on a.status_id = e.id
    where ((p_branchid is null) or (a.branch_id=p_branchid)) AND
    ((p_companyid is null) or (a.company_id=p_companyid))
    order by a.id asc;*/
    
    SELECT FE.id, 
			supervisor_id,
			DATE_FORMAT(enquiry_date,'%d/%m/%Y') as enquiry_date,
			farmer_name,
			farm_name,
			farm_type_id,
			address,
			mobile_no,
			incharge_name,
			shed_type_id,
			property_owner,
			age,
			occupation,
			branch_id,
            B.branchname,
            B.branchcode,
			line_id,
            CBL.linename,
			rest_period,
			farm_area_length,
			farm_area_width,
			total_area,
			density,
			incharge_contact_no,
			water_facility_id,
			over_head_tank_capacity,
			over_head_tank_type_id,
			holding_tank_capacity,
			holding_tank_type_id,
			flooring_id,
			roofing_id,
			diesel_brooder,
			gas_brooder,
			cool_brooder,
			farm_partition,
			electric_brooder,
			wood_brooder,
			thermometer,
			spray_pump,
			road_facility_id,
			mseb_connection_id,
			feed_room_facility,
			curtain_type_id,
			cross_curtains,
			foggers,
			mortality_disposal_pit,
			generator,
			refrigerator,
			inverter,
			tus_storage_facility,
			thermos,
			out_side_curtains,
			ceiling_curtains,
			center_curtains,
			contract_type_id,
			reasons_for_disc_per,
			taluka,
			post,
			gat_sr_no,
			area,
			valuation,
			owner_name,
			chick_capacity,
			status_id,
            REF.refname,
			distance_from_branch,
			distance_from_feed_mill,
            cityid as district,
            C.stateid,
            S.countryid
                
		FROM cbf_farmerenquiry FE
        LEFT JOIN commonbranch B ON B.id = FE.branch_id 
        LEFT JOIN commonbranchline CBL ON CBL.id = FE.line_id 
        LEFT JOIN city C ON C.id = FE.cityid
        LEFT JOIN state S ON S.id = C.stateid
        LEFT JOIN `reference` REF ON REF.id = FE.status_id
        
        WHERE FE.company_id = p_companyid
        
        ORDER BY FE.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmer_enquiry_select`(
	IN p_id VARCHAR(250),
	IN p_companyid VARCHAR(250)
)
BEGIN
	/*select a.*, DATE_FORMAT(a.enquiry_date,'%d/%m/%Y') as enquiry_date, b.branchname, b.branchcode, c.id as supervisor_id, c.employeename as supervisor_name,
    d.id as shedtype_id, d.shedtype, e.id as status_id, e.refname as status from cbf_farmerenquiry as a 
    left OUTER join branch as b on a.branch_id = b.id
    left OUTER join employee as c on a.supervisor_id = c.id
    left OUTER join cbfshedtype as d on a.shed_type_id = d.id
    left OUTER join `reference` as e on a.status_id = e.id
    where ((p_branchid is null) or (a.branch_id=p_branchid)) AND
    ((p_companyid is null) or (a.company_id=p_companyid))
    order by a.id asc;*/
    
    SELECT FE.id, 
                FE.supervisor_id,
                DATE_FORMAT(enquiry_date,'%d/%m/%Y') as enquiry_date,
                farmer_name,
                farm_name,
                farm_type_id,
                address,
                mobile_no,
                incharge_name,
                shed_type_id,
                property_owner,
                age,
                occupation,
                branch_id,
                line_id,
                CBL.linename,
                rest_period,
                farm_area_length,
                farm_area_width,
                total_area,
                density,
                incharge_contact_no,
                water_facility_id,
                over_head_tank_capacity,
                over_head_tank_type_id,
                holding_tank_capacity,
                holding_tank_type_id,
                flooring_id,
                roofing_id,
                diesel_brooder,
                gas_brooder,
                cool_brooder,
                farm_partition,
                electric_brooder,
                wood_brooder,
                thermometer,
                spray_pump,
                road_facility_id,
                mseb_connection_id,
                feed_room_facility,
                curtain_type_id,
                cross_curtains,
                foggers,
                mortality_disposal_pit,
                generator,
                refrigerator,
                inverter,
                tus_storage_facility,
                thermos,
                out_side_curtains,
                ceiling_curtains,
                center_curtains,
                contract_type_id,
                reasons_for_disc_per,
                district,
                taluka,
                post,
                gat_sr_no,
                area,
                valuation,
                owner_name,
                chick_capacity,
                status_id,
                distance_from_branch,
                distance_from_feed_mill
                
		FROM cbf_farmerenquiry FE
        LEFT JOIN commonbranchline CBL ON CBL.id = FE.line_id
        
        WHERE FE.id = p_id AND FE.company_id = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmer_enquiry_withagreement`(
	IN p_companyid INT(11),
    IN p_branchid INT(11)
)
BEGIN
    
    SELECT  FE.id as farmerenquiryid,
			supervisor_id,
			DATE_FORMAT(enquiry_date,'%d/%m/%Y') as enquiry_date,
			farmer_name,
			farm_name,
			farm_type_id,
			address,
			mobile_no,
			incharge_name,
			shed_type_id,
			property_owner,
			age,
			occupation,
			branch_id,
            B.branchname,
            B.branchcode,
			line_id,
			rest_period,
			farm_area_length,
			farm_area_width,
			total_area,
			density,
			incharge_contact_no,
			water_facility_id,
			over_head_tank_capacity,
			over_head_tank_type_id,
			holding_tank_capacity,
			holding_tank_type_id,
			flooring_id,
			roofing_id,
			diesel_brooder,
			gas_brooder,
			cool_brooder,
			farm_partition,
			electric_brooder,
			wood_brooder,
			thermometer,
			spray_pump,
			road_facility_id,
			mseb_connection_id,
			feed_room_facility,
			curtain_type_id,
			cross_curtains,
			foggers,
			mortality_disposal_pit,
			generator,
			refrigerator,
			inverter,
			tus_storage_facility,
			thermos,
			out_side_curtains,
			ceiling_curtains,
			center_curtains,
			contract_type_id,
			reasons_for_disc_per,
			district,
			taluka,
			post,
			gat_sr_no,
			area,
			valuation,
			owner_name,
			chick_capacity,
			status_id,
			distance_from_branch,
			distance_from_feed_mill,
            FA.partyid
                
		FROM cbf_farmerenquiry FE
        LEFT JOIN cbf_farmeragreement FA ON FA.farmerenquiryid = FE.id
        LEFT JOIN commonbranch B ON B.id = FE.branch_id 
        
        WHERE FE.company_id = p_companyid
        AND FA.id is not null 
        AND FA.statusid = 2062
        AND FE.branch_id = p_branchid
        
        ORDER BY FE.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmer_enquiry_withoutagreement`(
	IN p_companyid VARCHAR(250)
)
BEGIN
    
    SELECT FE.id, 
			supervisor_id,
			DATE_FORMAT(enquiry_date,'%d/%m/%Y') as enquiry_date,
			farmer_name,
			farm_name,
			farm_type_id,
			address,
			mobile_no,
			incharge_name,
			shed_type_id,
			property_owner,
			age,
			occupation,
			branch_id,
            B.branchname,
            B.branchcode,
			line_id,
			rest_period,
			farm_area_length,
			farm_area_width,
			total_area,
			density,
			incharge_contact_no,
			water_facility_id,
			over_head_tank_capacity,
			over_head_tank_type_id,
			holding_tank_capacity,
			holding_tank_type_id,
			flooring_id,
			roofing_id,
			diesel_brooder,
			gas_brooder,
			cool_brooder,
			farm_partition,
			electric_brooder,
			wood_brooder,
			thermometer,
			spray_pump,
			road_facility_id,
			mseb_connection_id,
			feed_room_facility,
			curtain_type_id,
			cross_curtains,
			foggers,
			mortality_disposal_pit,
			generator,
			refrigerator,
			inverter,
			tus_storage_facility,
			thermos,
			out_side_curtains,
			ceiling_curtains,
			center_curtains,
			contract_type_id,
			reasons_for_disc_per,
			district,
			taluka,
			post,
			gat_sr_no,
			area,
			valuation,
			owner_name,
			chick_capacity,
			status_id,
			distance_from_branch,
			distance_from_feed_mill,
            REF.refname
                
		FROM cbf_farmerenquiry FE
        LEFT JOIN cbf_farmeragreement FA ON FA.farmerenquiryid = FE.id
        LEFT JOIN commonbranch B ON B.id = FE.branch_id
        LEFT JOIN `reference` REF ON REF.id = FE.status_id
        
        WHERE FE.company_id = p_companyid
        AND FA.id is null 
		AND FE.status_id = 1722
        
        ORDER BY FE.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmname_byfarmername`(
IN P_framerid varchar(1000),
IN p_companyid INT(11)

)
BEGIN
SELECT 
		CFE.id,
        CFE.farmer_name,
        CFE.farm_name
        
        
        
FROM cbf_farmerenquiry CFE 
 
	

 WHERE CFE.company_id = p_companyid AND
    FIND_IN_SET( CFE.id, P_framerid);     

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmparameter_byparametertype`(
  IN p_parametertypeid INT,
  IN p_companyid INT
)
BEGIN
	SELECT id,
		   parametertypeid,
		   parametername,
           requiredratio,
           ismandatory
            
    FROM  cbffarmparameter 
    WHERE 
          parametertypeid = p_parametertypeid
          AND companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmparameter_delete`(
  IN p_id INT,
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN
	DELETE FROM cbffarmparameter WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'cbffarmparameter', p_id, 'delete', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmparameter_save`(
	IN p_id INT(11),
    IN p_parametertypeid INT(11),
    IN p_parametername VARCHAR(200),
    IN p_requiredratio VARCHAR(50),
    IN p_ismandatory TINYINT(4),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF EXISTS(
			SELECT id from cbffarmparameter where parametername = p_parametername 
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
			
			) THEN BEGIN
		
				SELECT -1 INTO out_id;

			END;
		
	 ELSE 
		BEGIN
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO cbffarmparameter
						(parametertypeid, parametername, requiredratio, ismandatory, companyid)
					VALUES 
						(p_parametertypeid, p_parametername, p_requiredratio, p_ismandatory, p_companyid);
				
				SET @action = 'INSERT';
				
			ELSE
			
				UPDATE cbffarmparameter
						SET parametertypeid = p_parametertypeid, 
						parametername = p_parametername, 
						requiredratio = p_requiredratio,
						ismandatory = p_ismandatory,
						companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
						
					SET @action = 'UPDATE';

			END IF;
			
			SELECT LAST_INSERT_ID() INTO out_id;
			
			-- record log
		   CALL spc_commonlog_save(p_companyid, 'cbffarmparameter', out_id, @action, p_userid);

			

		END;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmparameter_search`(
    IN p_companyid INT,
    IN p_parametertypeid INT
)
BEGIN

	SELECT 
		 id,
         parametername,
         requiredratio,
         ismandatory
	FROM
		cbffarmparameter 
	
	WHERE
		companyid = p_companyid AND
        parametertypeid = p_parametertypeid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmparameter_select`(
  IN p_id INT 
)
BEGIN
	SELECT id,
		   parametertypeid,
		   parametername,
           requiredratio,
           ismandatory
            
    FROM  cbffarmparameter 
    WHERE 
          id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmparameter_shedready`(
	IN p_companyid INT
)
BEGIN

	SELECT id as cbfparameterid,
		   parametertypeid,
		   parametername,
           requiredratio,
           ismandatory,
           0 as isapplied,
           null as remark
            
    FROM  cbffarmparameter 
    WHERE 
          companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffarmperformance_report`(
IN p_fromdate date,
IN p_todate date,
IN p_farm_id  VARCHAR(200),
IN p_companyid INT(11)
)
BEGIN
 SET @@sql_mode = ' ';


SELECT *,   -- (totalfeedconsumption/totalwt) As fcr,
			-- (totaldeliveredqty-productionqty) As Shortage,
            (chick_qty*chickcost) As chickamt,
            (totalwt/totaldeliveredqty)As avgbirdwt,
			((feedcost+chickcost+vaccinecost+medicinecost)/liveqty) As actualcost,
		    ((dailymortality/chick_qty)*100) As Percentagemortality,
			((dailyculls/chick_qty)*100) As Percentageculls,
			(inventorytransferin-inventorytransferout-quantity) As closingstock
		 
FROM(
SELECT 
        
        CB.branchname,
		CBL.linename,
        CFE.farmer_name,
        CFE.farm_name,
        -- CDM.totalculls,
        -- CDM.totalmortality,
        CDW.totaldeliveredqty,
		CDM.avgweight,
        CCP.batch_id,
		CS.chickcost,
        CS.feedcost,
        -- CS.administrationcost,
        CS.medicinecost,
        CS.vaccinecost,
        CGC.cullspercent,
        CGC.totalmortality,
        CGC.totalmortalitypercent,
		CGC.totalfeedconsumed,
        CGC.totalfeedcost,
		CGC.administrationcost,
        CGC.totalmedicinecost,
        CGC.totalbirdssold,
		CGC.excessbirds,
		CGC.totalweightofbird,
        CGC.avgweightofbird,
        CGC.fcr,
        CGC.cfcr,
        CGC.avgsellingrate,
        CGC.actualrearingchargekg,
        CGC.rearingchrgebird,
		CGC.avgliftingage,
        CGC.compensateamt,
        CGC.rearingchargepayable, 
		DATE_FORMAT( CDW.liftingdate,'%d/%m/%Y') as liftingdate,
        DATE_FORMAT( CCP.placement_date,'%d/%m/%Y') as placement_date,
		DATE_FORMAT( CDT.transactiondate,'%d/%m/%Y') as transactiondate,
        fun_inventorytransferin(CDT.transactiondate,MM.towarehousebinid,MM.itemid) As inventorytransferin,
        fun_inventorytransferout(CDT.transactiondate,MM.towarehousebinid,MM.itemid) As inventorytransferout,
		fun_cbfcalculatefeedob(CDT.transactiondate,MM.towarehousebinid,MM.itemid) AS openingbal,
        fun_calculate_dailyculls(placement_date,CDT.cbf_batchid) As dailyculls,
        fun_calculate_dailyweight(placement_date,CDT.cbf_batchid) As dailywt,
        fun_calculate_dailymortality(placement_date,CDT.cbf_batchid) As dailymortality,
		fun_calculate_dailyliveqty(placement_date,CDT.transactiondate,CDT.cbf_batchid,CDT.id) As liveqty,
        fun_calculate_conforbird(placement_date,CDT.cbf_batchid) As totalfeedconsumption,
	    ((CDM.totalmortality/CCP.chick_qty)*100) As ptotalmortality,
        (CCP.chick_qty-CCP.culls-CCP.mortality) As productionqty,
		(CDM.avgweight/CBD.live_batch_qty) As totalwt,
        CCP.chick_qty,
        MM.itemid,
        MM.towarehousebinid,
        CDT.id,
        CDC.quantity,
		CBD.live_batch_qty, 
        CFE.line_id,
        CFE.branch_id,
		P.partyname
       
	   
     FROM cbf_dailytransaction CDT
	 LEFT JOIN cbf_growingcharges CGC  ON CDT.cbf_batchid = CGC.cbf_batchid
	 LEFT JOIN cbf_farmerenquiry CFE  ON CDT.branchid = CFE.branch_id
	 LEFT JOIN cbf_delivery_weights CDW ON CFE.id = CDW.farmerenquiryid
     LEFT JOIN salesinvoice SI ON CDW.id = SI.salesorderid
	 LEFT JOIN cbf_chick_placement CCP ON  CDT.cbf_batchid  =  CCP.batch_id 
     LEFT JOIN cbf_procurementschedule CPS ON   CCP.branch_id =  CPS.branchid      
     LEFT JOIN cbf_batch_details CBD ON CCP.batch_id =   CBD.id
     LEFT JOIN coststructure CS ON CS.id = CBD.scheme_id
     LEFT JOIN cbf_dailymortality CDM ON CDT.id = CDM.cbfdailytransactionid
     LEFT JOIN commonbranch CB ON CCP.branch_id =   CB.id
	 LEFT JOIN commonbranchline CBL ON CFE.line_id =   CBL.id
     LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CFESD ON CFE.id = CFESD.farmerenquiryid
     LEFT JOIN materialmovement MM ON  CFESD.warehousebinid = MM.towarehousebinid
     LEFT JOIN cbf_dailyconsumption CDC ON  CDT.id = CDC.cbfdailytransactionid
	 LEFT JOIN party P ON SI.customerid = P.id
  
    WHERE CDT.companyid = p_companyid AND
		  CDW.liftingdate BETWEEN p_fromdate AND p_todate AND
		  FIND_IN_SET( CFE.id, p_farm_id) AND
        --  CDC.consumptiontypeid = 861 AND
       --   CCP.transaction_id = 262
        --  OR CCP.transaction_id = 261 AND
          CDT.readyforsale = 1 AND
          CDW.islastdelivery = 1) as temp
          Group by line_id;
          
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffeedconsumption_agewise`(
	IN p_breeditemid INT(11),
    IN p_feeditemid INT(11),
    IN p_age INT(11),
    IN p_scheduletypeid INT(11)
)
BEGIN

	SELECT CSD.quantity
    FROM cbfscheduledetail CSD
    LEFT JOIN cbfschedule CS ON CS.id = CSD.cbfscheduleid
    WHERE CS.breednameid = p_breeditemid
    AND CSD.itemid = p_feeditemid
    AND CS.cbfscheduletypeid = p_scheduletypeid
    AND p_age BETWEEN CSD.fromage AND CSD.toage;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbffeeddeviation_report`(
 IN p_batch_id VARCHAR(200),
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_companyid INT
 )
BEGIN
SET @@sql_mode = ' ';
DROP TEMPORARY TABLE IF EXISTS tempdivation ;
CREATE TEMPORARY TABLE tempdivation 
select *,   DATEDIFF(transactiondateone,placement_dateone)as ageindays
 

from(
SELECT
 CDT.branchid,CBD.batch_number, CDT.cbf_batchid,
  DATE_FORMAT( CDT.transactiondate,'%d/%m/%Y') as transactiondate,
  CDT.transactiondate as transactiondateone,
 CDC.itemid as conitemid,
 CDC.breeditemid as breeditemid,
 CDC.quantity, 
 CDC.quantity as devper,
 CFE.farm_name,
 CFE.farmer_name ,
 E.employeename,
 fnc_getcbfplacementdate(cbf_batchid,p_companyid) as placement_date,
date_sub(CBD.batch_place_date,INTERVAL 1 DAY)as placement_dateone,
 /* calculate Feed in gram */
 ROUND(((fnc_convertfeed_bagtokg(CBD.id,CBB.cbfshedid,CDT.transactiondate,I.itemunitid,CDT.companyid)*1000)/
 fnc_itembatchbalancedate(CDC.breeditemid,WB.warehouseid,CFESD.warehousebinid,CDT.transactiondate,p_companyid)),2)as quantityingram,
 -- DATE_ADD(DATEDIFF(CDT.transactiondate,CBD.batch_place_date),INTERVAL 1 DAY) as ageindays,
 -- DATEDIFF(CDT.transactiondate,CBD.batch_place_date)as ageindays,
 
 CSC.id as standaedchartid,
 I.itemunitid,
 fnc_itembatchbalancedate(CDC.breeditemid,WB.warehouseid,CFESD.warehousebinid,CDT.transactiondate,p_companyid) as openingbal

 FROM cbf_batch_details CBD
 LEFT JOIN cbf_batchbalance CBB ON CBB.cbfbatchid = CBD.id
 LEFT JOIN cbf_dailytransaction CDT ON CBD.id = CDT.cbf_batchid 
 LEFT JOIN cbf_dailyconsumption CDC ON CDT.id = CDC.cbfdailytransactionid AND consumptiontypeid = 861
 LEFT JOIN cbf_farmerenquiry CFE  ON CFE.id = CBD.farmer_enquiry_id
 LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CFESD ON CFESD.id = CBB.cbfshedid
 LEFT JOIN warehousebin WB ON WB.id =  CFESD.warehousebinid
 LEFT JOIN employee E ON E.id = CFE.supervisor_id
 LEFT JOIN cbfstandardchart CSC  ON CSC.breednameid = CDC.breeditemid 
 LEFT JOIN item I ON I.id = CDC.itemid
 
 WHERE CDT.companyid = p_companyid 
 AND FIND_IN_SET(CBD.id,p_batch_id) AND
 CDT.transactiondate between p_fromdate AND p_todate  AND CSC.id IS NOT NULL 
    ) as temp1 group by cbf_batchid,conitemid,ageindays;

-- select * from tempdivation;

DROP TEMPORARY TABLE IF EXISTS tempdivation1 ;
CREATE TEMPORARY TABLE tempdivation1 
SELECT*, ROUND(((deviation/stdfeedconsumptionone)*100),3) as deviationper -- Deviation per in gram
 FrOM(

 SELECT 
 standaedchartid,
 batch_number,
 cbf_batchid,
 CSCD1.itemid as expitemid,
 I1.itemname as expitemname,
 transactiondate,
 conitemid,
 I.itemname,
 ageindays,
 farm_name,
 farmer_name,
 employeename,
 quantity,
 quantityingram,
 IFNULL((CSCD.feedconsumption),0) as stdfeedconsumption,
 CSCD1.feedconsumption as stdfeedconsumptionone,
 (IFNULL((CSCD1.feedconsumption),0)-(IFNULL(quantityingram,0)))as deviation,/* Actual feed Con minus Std con in gm*/
 IFNULL((CSCD1.feedconsumption),0) as expfeedconsumption  
 
 FROM tempdivation TB1 
 
 LEFT JOIN cbfstandardchartdetail CSCD  ON CSCD.cbfstandardchartid = TB1.standaedchartid AND CSCD.age = TB1.ageindays AND CSCD.itemid = TB1.breeditemid 
 LEFT JOIN cbfstandardchartdetail CSCD1  ON CSCD1.cbfstandardchartid = TB1.standaedchartid AND CSCD1.age = TB1.ageindays
 LEFT JOIN item I1  ON I1.id = CSCD1.itemid 
 LEFT JOIN item I  ON I.id = TB1.conitemid  order by TB1.ageindays)as temp;


 -- select * from tempdivation1;
 
 DROP TEMPORARY TABLE IF EXISTS tempdivation2;
	CREATE TEMPORARY TABLE tempdivation2
    select *, 'item' as entity from tempdivation1;
-- for sub total--
	 DROP TEMPORARY TABLE IF EXISTS tempdivation3;
	CREATE TEMPORARY TABLE tempdivation3	
    SELECT * from (
    SELECT * from tempdivation2
    UNION ALL	
				SELECT 
					'' as standaedchartid,
                    batch_number,
                      cbf_batchid as cbf_batchid,
                     '' as expitemid,
                     '' as  expitemname,
					'' as transactiondate,
                    '' as conitemid,
                    'Sub Total' as itemname,
                    MAX(ageindays) as ageindays,
                    '' as farm_name,
                    '' as farmer_name,
                    '' as employeename,
					SUM(quantity),
                    '' quantityingram,
					SUM(stdfeedconsumption),
                    SUM(stdfeedconsumptionone),
                    '' as deviation,
                    SUM(expfeedconsumption),
                    '' as deviationper,
					'subtotal' as entity
				FROM
					tempdivation1
                   
						GROUP BY farmer_name
                        ) as tmpresult  ORDER BY cbf_batchid,ageindays;
	
SELECT * FROM tempdivation3;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfgetsupervisorname_byline`(
IN p_branchlineid varchar(200),
IN p_companyid INT(11)

)
BEGIN
SELECT  E.id,
        E.employeename
        
        
        
FROM employee E 
 LEFT JOIN cbf_farmerenquiry CFE  ON E.id = CFE.supervisor_id    
	

 WHERE E.companyid = p_companyid AND
    FIND_IN_SET( CFE.line_id, p_branchlineid);     

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfgrowingcharge_delete`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	DELETE FROM cbf_growingcharges WHERE id = p_id AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfgrowingcharge_save`(
  IN p_id INT,
  IN p_cbf_batchid INT,
  IN p_farmerenquiryid INT,
  IN p_branchid INT,
  IN p_schemeid INT,
  IN p_firstdaydate DATE,
  IN p_batchclosedate DATE,
  IN p_breeditemid INT,
  IN p_statusid INT,
  IN p_applyschemefeedcost TINYINT,
  IN p_applyschememedicinecost TINYINT,
  IN p_applyschemevaccinecost TINYINT,
  IN p_editdeductionvalues TINYINT,
  IN p_productionqty INT,
  IN p_batchplaceqty INT,
  IN p_cullspercent DECIMAL(9, 3),
  IN p_compensationpercent DECIMAL(9, 3),
  IN p_birdsavailable INT,
  IN p_FWmortality INT,
  IN p_FWmortalitypercent DECIMAL(9, 3),
  IN p_totalmortality INT,
  IN p_totalmortalitypercent DECIMAL(9, 3),
  IN p_feedtransferin DECIMAL(12, 3),
  IN p_feedtransferout DECIMAL(12, 3),
  IN p_totalfeedconsumed DECIMAL(12, 3),
  IN p_totalfeedcost DECIMAL(12, 3),
  IN p_totalmedicinecost DECIMAL(12, 3),
  IN p_totalvaccinecost DECIMAL(12, 3),
  IN p_administrationcost DECIMAL(12, 3),
  IN p_actualproductioncost DECIMAL(12, 3),
  IN p_stdproductioncost DECIMAL(12, 3),
  IN p_schemeproductioncost DECIMAL(12, 3),
  IN p_totalsaleqty INT,
  IN p_totalsaleweight DECIMAL(12, 3),
  IN p_totalprocessingqty INT,
  IN p_totalprocessingweight DECIMAL(12, 3),
  IN p_totalbirdssold INT,
  IN p_excessbirds INT,
  IN p_totalweightofbird DECIMAL(12, 3),
  IN p_avgweightofbird DECIMAL(12, 3),
  IN p_fcr DECIMAL(12, 3),
  IN p_cfcr DECIMAL(12, 3),
  IN p_avgsellingrate DECIMAL(12, 3),
  IN p_stdrearingchargekg DECIMAL(12, 3),
  IN p_actualrearingchargekg DECIMAL(12, 3),
  IN p_rearingchrgebird DECIMAL(12, 3),
  IN p_totalrearingcharge DECIMAL(12, 3),
  IN p_additionalincentive DECIMAL(12, 3),
  IN p_mortalityincentive DECIMAL(12, 3),
  IN p_excessbirdincentive DECIMAL(12, 3),
  IN p_vehicleincentive DECIMAL(12, 3),
  IN p_eefvalue DECIMAL(12, 3),
  IN p_eefgradeid INT,
  IN p_avgliftingage DECIMAL(9, 3),
  IN p_perdaygrowthgrm DECIMAL(9, 3),
  IN p_fcrdeduction DECIMAL(12, 3),
  IN p_totalmortalitydeduction DECIMAL(12, 3),
  IN p_FWmortalitydeduction DECIMAL(12, 3),
  IN p_birdshortage INT,
  IN p_birdshortageamt DECIMAL(12, 3),
  IN p_compensateamt DECIMAL(12, 3),
  IN p_alldeduction DECIMAL(12, 3),
  IN p_allincentive DECIMAL(12, 3),
  IN p_total DECIMAL(12, 3),
  IN p_totaldownpayment DECIMAL(12, 3),
  IN p_rearingchargepayable DECIMAL(12, 3),
  IN p_freightamt DECIMAL(12, 3),
  IN p_tds DECIMAL(12, 3),
  IN p_netpayableamt DECIMAL(12, 3),
  IN p_isinvoicebooked TINYINT,
  IN p_companyid INT,
  IN p_userid INT,
  OUT out_id INT
)
BEGIN
SET @action = null;
IF(NULLIF(p_id, '0') IS NULL) THEN
INSERT INTO
  `cbf_growingcharges` (
    `id`,
    `cbf_batchid`,
    `farmerenquiryid`,
    `branchid`,
    `schemeid`,
    `firstdaydate`,
    `batchclosedate`,
    `breeditemid`,
    `statusid`,
    `applyschemefeedcost`,
    `applyschememedicinecost`,
    `applyschemevaccinecost`,
    `editdeductionvalues`,
    `productionqty`,
    `batchplaceqty`,
    `cullspercent`,
    `compensationpercent`,
    `birdsavailable`,
    `FWmortality`,
    `FWmortalitypercent`,
    `totalmortality`,
    `totalmortalitypercent`,
    `feedtransferin`,
    `feedtransferout`,
    `totalfeedconsumed`,
    `totalfeedcost`,
    `totalmedicinecost`,
    `totalvaccinecost`,
    `administrationcost`,
    `actualproductioncost`,
    `stdproductioncost`,
    `schemeproductioncost`,
    `totalsaleqty`,
    `totalsaleweight`,
    `totalprocessingqty`,
    `totalprocessingweight`,
    `totalbirdssold`,
    `excessbirds`,
    `totalweightofbird`,
    `avgweightofbird`,
    `fcr`,
    `cfcr`,
    `avgsellingrate`,
    `stdrearingchargekg`,
    `actualrearingchargekg`,
    `rearingchrgebird`,
    `totalrearingcharge`,
    `additionalincentive`,
    `mortalityincentive`,
    `excessbirdincentive`,
    `vehicleincentive`,
    `eefvalue`,
    `eefgradeid`,
    `avgliftingage`,
    `perdaygrowthgrm`,
    `fcrdeduction`,
    `totalmortalitydeduction`,
    `FWmortalitydeduction`,
    `birdshortage`,
    `birdshortageamt`,
    `compensateamt`,
    `alldeduction`,
    `allincentive`,
    `total`,
    `totaldownpayment`,
    `rearingchargepayable`,
    `freightamt`,
    `tds`,
    `netpayableamt`,
    `isinvoicebooked`,
    `companyid`
  )
VALUES
  (
    p_id,
    p_cbf_batchid,
    p_farmerenquiryid,
    p_branchid,
    p_schemeid,
    p_firstdaydate,
    p_batchclosedate,
    p_breeditemid,
    p_statusid,
    p_applyschemefeedcost,
    p_applyschememedicinecost,
    p_applyschemevaccinecost,
    p_editdeductionvalues,
    p_productionqty,
    p_batchplaceqty,
    p_cullspercent,
    p_compensationpercent,
    p_birdsavailable,
    p_FWmortality,
    p_FWmortalitypercent,
    p_totalmortality,
    p_totalmortalitypercent,
    p_feedtransferin,
    p_feedtransferout,
    p_totalfeedconsumed,
    p_totalfeedcost,
    p_totalmedicinecost,
    p_totalvaccinecost,
    p_administrationcost,
    p_actualproductioncost,
    p_stdproductioncost,
    p_schemeproductioncost,
    p_totalsaleqty,
    p_totalsaleweight,
    p_totalprocessingqty,
    p_totalprocessingweight,
    p_totalbirdssold,
    p_excessbirds,
    p_totalweightofbird,
    p_avgweightofbird,
    p_fcr,
    p_cfcr,
    p_avgsellingrate,
    p_stdrearingchargekg,
    p_actualrearingchargekg,
    p_rearingchrgebird,
    p_totalrearingcharge,
    p_additionalincentive,
    p_mortalityincentive,
    p_excessbirdincentive,
    p_vehicleincentive,
    p_eefvalue,
    p_eefgradeid,
    p_avgliftingage,
    p_perdaygrowthgrm,
    p_fcrdeduction,
    p_totalmortalitydeduction,
    p_FWmortalitydeduction,
    p_birdshortage,
    p_birdshortageamt,
    p_compensateamt,
    p_alldeduction,
    p_allincentive,
    p_total,
    p_totaldownpayment,
    p_rearingchargepayable,
    p_freightamt,
    p_tds,
    p_netpayableamt,
    p_isinvoicebooked,
    p_companyid
  );
SET @action = 'INSERT';ELSE
UPDATE
  cbf_growingcharges
SET
  id = p_id,
  cbf_batchid = p_cbf_batchid,
  farmerenquiryid = p_farmerenquiryid,
  branchid = p_branchid,
  schemeid = p_schemeid,
  firstdaydate = p_firstdaydate,
  batchclosedate = p_batchclosedate,
  breeditemid = p_breeditemid,
  statusid = p_statusid,
  applyschemefeedcost = p_applyschemefeedcost,
  applyschememedicinecost = p_applyschememedicinecost,
  applyschemevaccinecost = p_applyschemevaccinecost,
  editdeductionvalues = p_editdeductionvalues,
  productionqty = p_productionqty,
  batchplaceqty = p_batchplaceqty,
  cullspercent = p_cullspercent,
  compensationpercent = p_compensationpercent,
  birdsavailable = p_birdsavailable,
  FWmortality = p_FWmortality,
  FWmortalitypercent = p_FWmortalitypercent,
  totalmortality = p_totalmortality,
  totalmortalitypercent = p_totalmortalitypercent,
  feedtransferin = p_feedtransferin,
  feedtransferout = p_feedtransferout,
  totalfeedconsumed = p_totalfeedconsumed,
  totalfeedcost = p_totalfeedcost,
  totalmedicinecost = p_totalmedicinecost,
  totalvaccinecost = p_totalvaccinecost,
  administrationcost = p_administrationcost,
  actualproductioncost = p_actualproductioncost,
  stdproductioncost = p_stdproductioncost,
  schemeproductioncost = p_schemeproductioncost,
  totalsaleqty = p_totalsaleqty,
  totalsaleweight = p_totalsaleweight,
  totalprocessingqty = p_totalprocessingqty,
  totalprocessingweight = p_totalprocessingweight,
  totalbirdssold = p_totalbirdssold,
  excessbirds = p_excessbirds,
  totalweightofbird = p_totalweightofbird,
  avgweightofbird = p_avgweightofbird,
  fcr = p_fcr,
  cfcr = p_cfcr,
  avgsellingrate = p_avgsellingrate,
  stdrearingchargekg = p_stdrearingchargekg,
  actualrearingchargekg = p_actualrearingchargekg,
  rearingchrgebird = p_rearingchrgebird,
  totalrearingcharge = p_totalrearingcharge,
  additionalincentive = p_additionalincentive,
  mortalityincentive = p_mortalityincentive,
  excessbirdincentive = p_excessbirdincentive,
  vehicleincentive = p_vehicleincentive,
  eefvalue = p_eefvalue,
  eefgradeid = p_eefgradeid,
  avgliftingage = p_avgliftingage,
  perdaygrowthgrm = p_perdaygrowthgrm,
  fcrdeduction = p_fcrdeduction,
  totalmortalitydeduction = p_totalmortalitydeduction,
  FWmortalitydeduction = p_FWmortalitydeduction,
  birdshortage = p_birdshortage,
  birdshortageamt = p_birdshortageamt,
  compensateamt = p_compensateamt,
  alldeduction = p_alldeduction,
  allincentive = p_allincentive,
  total = p_total,
  totaldownpayment = p_totaldownpayment,
  rearingchargepayable = p_rearingchargepayable,
  freightamt = p_freightamt,
  tds = p_tds,
  netpayableamt = p_netpayableamt,
  isinvoicebooked = p_isinvoicebooked,
  companyid = p_companyid,
  id = LAST_INSERT_ID(id)
WHERE
  id = p_id
  AND companyid = p_companyid;
SET
  @action = 'UPDATE';
  END IF;
SELECT
  LAST_INSERT_ID() INTO OUT_ID;-- record log
  -- CALL spc_commonlog_save(p_companyid, 'GC', out_id, @action, p_userid);
  END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfgrowingcharge_search`(
	IN p_companyid INT
)
BEGIN

	SELECT CGC.id, 
		   CGC.cbf_batchid,
		   CGC.farmerenquiryid,
           FE.farmer_name,
           FE.farm_name,
           CGC.branchid, 
           B.branchname,
           DATE_FORMAT(CGC.firstdaydate ,'%d/%m/%Y') as firstdaydate, 
           DATE_FORMAT(CGC.batchclosedate ,'%d/%m/%Y') as batchclosedate, 
           CGC.breeditemid, 
           I.itemname as breeditem,
           CGC.totaldownpayment, 
           CGC.rearingchargepayable, 
           CGC.freightamt, 
           CGC.tds, 
           CGC.netpayableamt,
           P.partyname,
           REF.refname,
           FE.address,
           CGC.statusid,
           CGC.schemeid, 
           `applyschemefeedcost`, 
           `applyschememedicinecost`, 
           `applyschemevaccinecost`, 
           `editdeductionvalues`, 
           `productionqty`, 
           `batchplaceqty`, 
           `cullspercent`, 
           `compensationpercent`, 
           `birdsavailable`, 
           `FWmortality`,
           `FWmortalitypercent`, 
           `totalmortality`,
           `totalmortalitypercent`, 
           `feedtransferin`, 
           `feedtransferout`, 
           `totalfeedconsumed`, 
           `totalfeedcost`,
           `totalmedicinecost`, 
           `totalvaccinecost`, 
           `administrationcost`, 
           `actualproductioncost`, 
           `stdproductioncost`, 
           `schemeproductioncost`, 
           `totalsaleqty`,
           `totalsaleweight`, 
           `totalprocessingqty`,
           `totalprocessingweight`, 
           `totalbirdssold`, 
           `excessbirds`, 
           `totalweightofbird`, 
           `avgweightofbird`, 
           `fcr`, 
           `cfcr`, 
           `avgsellingrate`, 
           `stdrearingchargekg`, 
           `actualrearingchargekg`, 
           `rearingchrgebird`, 
           `totalrearingcharge`, 
           `additionalincentive`, 
           `mortalityincentive`, 
           `excessbirdincentive`, 
           `vehicleincentive`, 
           `eefvalue`, 
           `eefgradeid`, 
           `avgliftingage`, 
           `perdaygrowthgrm`, 
           `fcrdeduction`, 
           `totalmortalitydeduction`, 
           `FWmortalitydeduction`, 
           `birdshortage`, 
           `birdshortageamt`, 
           `compensateamt`, 
           `alldeduction`, 
           `allincentive`, 
           `total`,
           isinvoicebooked
           
	FROM `cbf_growingcharges` CGC
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = CGC.farmerenquiryid
    LEFT JOIN cbf_farmeragreement FA ON FA.farmerenquiryid = FE.id
    LEFT JOIN party P ON P.id = FA.partyid
    LEFT JOIN commonbranch B ON B.id = CGC.branchid
    LEFT JOIN `reference` REF ON REF.id = CGC.statusid
    LEFT JOIN item I ON I.id = CGC.breeditemid
    
    WHERE CGC.companyid = p_companyid;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfgrowingcharge_select`(
	IN p_id INT,
	IN p_companyid INT
)
BEGIN

	SELECT `id`, 
		   `cbf_batchid`,
		   `farmerenquiryid`,
           `branchid`, 
           `schemeid`, 
           `firstdaydate`, 
           `batchclosedate`, 
           `breeditemid`, 
           `statusid`, 
           `applyschemefeedcost`, 
           `applyschememedicinecost`, 
           `applyschemevaccinecost`, 
           `editdeductionvalues`, 
           `productionqty`, 
           `batchplaceqty`, 
           `cullspercent`, 
           `compensationpercent`, 
           `birdsavailable`, 
           `FWmortality`,
           `FWmortalitypercent`, 
           `totalmortality`,
           `totalmortalitypercent`, 
           `feedtransferin`, 
           `feedtransferout`, 
           `totalfeedconsumed`, 
           `totalfeedcost`,
           `totalmedicinecost`, 
           `totalvaccinecost`, 
           `administrationcost`, 
           `actualproductioncost`, 
           `stdproductioncost`, 
           `schemeproductioncost`, 
           `totalsaleqty`,
           `totalsaleweight`, 
           `totalprocessingqty`,
           `totalprocessingweight`, 
           `totalbirdssold`, 
           `excessbirds`, 
           `totalweightofbird`, 
           `avgweightofbird`, 
           `fcr`, 
           `cfcr`, 
           `avgsellingrate`, 
           `stdrearingchargekg`, 
           `actualrearingchargekg`, 
           `rearingchrgebird`, 
           `totalrearingcharge`, 
           `additionalincentive`, 
           `mortalityincentive`, 
           `excessbirdincentive`, 
           `vehicleincentive`, 
           `eefvalue`, 
           `eefgradeid`, 
           `avgliftingage`, 
           `perdaygrowthgrm`, 
           `fcrdeduction`, 
           `totalmortalitydeduction`, 
           `FWmortalitydeduction`, 
           `birdshortage`, 
           `birdshortageamt`, 
           `compensateamt`, 
           `alldeduction`, 
           `allincentive`, 
           `total`, 
           `totaldownpayment`, 
           `rearingchargepayable`, 
           `freightamt`, 
           `tds`, 
           `netpayableamt`,
           `isinvoicebooked`
           
	FROM `cbf_growingcharges`
    
    WHERE id = p_id
    AND companyid = p_companyid;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfincentiveschemedetail_search`(
	IN p_incentiveschemeid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	-- employee position
    
	SELECT ISE.id,
		   ISE.incentiveschemeid,
           ISE.employeeid,
           E.employeename,
           ISE.position,
           ISE.percentage
           
	FROM cbf_incentivescheme_employeeorposition ISE
    LEFT JOIN employee E ON E.id = ISE.employeeid
    
    WHERE ISE.incentiveschemeid = p_incentiveschemeid
    AND ISE.companyid = p_companyid;

	-- rate per kg on eef
    
    SELECT ISR.id,
		   ISR.incentiveschemeid, 
           ISR.fromeef, 
           ISR.toeef, 
           ISR.rateperkg
    
    FROM cbf_incentivescheme_rateperkgoneef ISR
    
    WHERE ISR.incentiveschemeid = p_incentiveschemeid
    AND ISR.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfincentiveschemelist_search`(
	IN p_from_date date,
	IN p_to_date date
)
BEGIN

	SELECT ISM.id,
		   ISM.schemeapplyby,
		   ISM.schemename,
           ISM.breeditemid,
           I.itemname as breeditemname,
		   ISM.branchid,         
           B.branchname,
           DATE_FORMAT(ISM.fromdate,'%d/%m/%Y') as fromdate,
           DATE_FORMAT(ISM.todate,'%d/%m/%Y') as todate,
           ISM.applyto,
           ISM.isbyfunctionapplicable,
           ISM.applybyemployee
           
	FROM cbf_incentivescheme ISM
    LEFT JOIN item I ON I.id = ISM.breeditemid
    LEFT JOIN branch B ON B.id = ISM.branchid
    
    WHERE 
        (ISM.fromdate <= p_from_date) AND
        (ISM.todate >= p_to_date);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfincentivescheme_delete`(
	IN p_id INT(11)
)
BEGIN

    DELETE FROM cbf_incentivescheme_rateperkgoneef WHERE incentiveschemeid = p_id;
    DELETE FROM cbf_incentivescheme_employeeorposition WHERE incentiveschemeid = p_id;
    DELETE FROM cbf_incentivescheme WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfincentivescheme_employeeorposition_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_incentivescheme_employeeorposition WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfincentivescheme_employeeorposition_save`(
	IN p_id INT(11),
	IN p_incentiveschemeid INT(11),
	IN p_employeeid INT(11),
	IN p_position VARCHAR(100),
	IN p_percentage DECIMAL(9,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_incentivescheme_employeeorposition 
				(id, incentiveschemeid, employeeid, `position`, percentage, companyid)
			VALUES 
				(p_id, p_incentiveschemeid, p_employeeid, p_position, p_percentage, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_incentivescheme_employeeorposition
				SET incentiveschemeid = p_incentiveschemeid,
					employeeid = p_employeeid,
                    `position` = p_position,
                    percentage = p_percentage,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_incentivescheme_employeeorposition', out_id, @action, p_userid);



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfincentivescheme_employeeorposition_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT ISE.id,
		   ISE.incentiveschemeid,
           ISE.employeeid,
           E.employeename,
           ISE.position,
           ISE.percentage
           
	FROM cbf_incentivescheme_employeeorposition ISE
    LEFT JOIN employee E ON E.id = ISE.employeeid
    
    WHERE ISE.id = p_id
    AND ISE.companyid = p_companyid;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfincentivescheme_rateperkgoneef_delete`(
	 IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_incentivescheme_rateperkgoneef WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfincentivescheme_rateperkgoneef_save`(
	IN p_id INT(11),
    IN p_incentiveschemeid INT(11),
    IN p_fromeef DECIMAL(9,3),
    IN p_toeef DECIMAL(9,3),
    IN p_rateperkg DECIMAL(9,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_incentivescheme_rateperkgoneef 
				(id, incentiveschemeid, fromeef, toeef, rateperkg, companyid)
			VALUES 
				(p_id, p_incentiveschemeid, p_fromeef, p_toeef, p_rateperkg, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_incentivescheme_rateperkgoneef
				SET incentiveschemeid = p_incentiveschemeid,
					fromeef = p_fromeef,
                    toeef = p_toeef,
                    rateperkg = p_rateperkg,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_incentivescheme_rateperkgoneef', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfincentivescheme_rateperkgoneef_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT ISR.id,
		   ISR.incentiveschemeid,
           ISR.fromeef,
           ISR.toeef,
           ISR.rateperkg,
           ISR.companyid
           
	FROM cbf_incentivescheme_rateperkgoneef ISR
    
    WHERE ISR.id = p_id
    AND ISR.companyid = p_comanyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfincentivescheme_save`(
	IN p_id INT(11),
    IN p_schemeapplyby INT(11),
	IN p_schemename VARCHAR(100),
	IN p_breeditemid INT(11),
	IN p_branchid INT(11),
	IN p_fromdate DATE,
	IN p_todate DATE,
	IN p_applyto VARCHAR(150),
	IN p_isbyfunctionapplicable TINYINT(4),
    IN p_applybyemployee TINYINT(4),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_incentivescheme 
				(id, schemeapplyby, schemename, breeditemid, branchid, fromdate, 
                todate, applyto, isbyfunctionapplicable, applybyemployee, companyid)
			VALUES 
				(p_id, p_schemeapplyby, p_schemename, p_breeditemid, p_branchid, p_fromdate, 
                p_todate, p_applyto, p_isbyfunctionapplicable, p_applybyemployee, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_incentivescheme
				SET schemeapplyby = p_schemeapplyby,
					schemename = p_schemename,
					breeditemid = p_breeditemid,
					branchid = p_branchid,
					fromdate = p_fromdate, 
					todate = p_todate,
					applyto = p_applyto,
					isbyfunctionapplicable = p_isbyfunctionapplicable,
                    applybyemployee = p_applybyemployee,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_incentivescheme', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfincentivescheme_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT ISM.id,
		   ISM.schemeapplyby,
		   ISM.schemename,
           ISM.breeditemid,
           I.itemname as breeditemname,
		   ISM.branchid,         
           B.branchname,
           DATE_FORMAT(ISM.fromdate,'%d/%m/%Y') as fromdate,
           DATE_FORMAT(ISM.todate,'%d/%m/%Y') as todate,
           ISM.applyto,
           ISM.isbyfunctionapplicable,
           ISM.applybyemployee
           
	FROM cbf_incentivescheme ISM
    LEFT JOIN item I ON I.id = ISM.breeditemid
    LEFT JOIN branch B ON B.id = ISM.branchid
    
    WHERE ISM.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfincentivescheme_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT ISM.id,
		   ISM.schemeapplyby,
		   ISM.schemename,
           ISM.breeditemid,
           I.itemname,
           ISM.branchid,
           B.branchname,
           ISM.fromdate,
           ISM.todate,
           ISM.applyto,
           ISM.isbyfunctionapplicable,
           ISM.applybyemployee
           
	FROM cbf_incentivescheme ISM
    
    WHERE ISM.id = p_id
    AND ISM.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfliftingscheduledetails_delete`(
  IN p_id INT,
  IN p_company_id INT
)
BEGIN
	DELETE FROM cbf_lifting_schedule_details WHERE id = p_id AND company_id = p_company_id;
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'cbf_chick_placement', p_id, 'delete', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfliftingscheduledetails_save`(
	IN p_id INT(11),
    IN p_lifting_schedule_id INT(11),
    IN p_cbfbirdsalesorderid INT(11),
    IN p_cbf_batchid INT,
    IN p_farmerenquiryid INT,
    IN p_batchweight DECIMAL(12,3),
    IN p_plannedweight DECIMAL(12,3),
    IN p_approvedweight DECIMAL(12,3),
    IN p_batchcost DECIMAL(12,3),
    IN p_line_supervisor_id INT,
    IN p_company_id INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_lifting_schedule_details(
                lifting_schedule_id,
                cbfbirdsalesorderid,
                cbf_batchid,
                farmerenquiryid,
                batchweight,
                plannedweight,
                approvedweight,
                batchcost,
                line_supervisor_id,
                company_id
    )
			VALUES 
				(
                p_lifting_schedule_id,
                p_cbfbirdsalesorderid,
                p_cbf_batchid,
                p_farmerenquiryid,
                p_batchweight,
                p_plannedweight,
                p_approvedweight,
                p_batchcost,
                p_line_supervisor_id,
                p_company_id
                );
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE cbf_lifting_schedule_details
			SET lifting_schedule_id = p_lifting_schedule_id,
                cbfbirdsalesorderid = p_cbfbirdsalesorderid,
                cbf_batchid = p_cbf_batchid,
                farmerenquiryid = p_farmerenquiryid,
                batchweight = p_batchweight,
                plannedweight = p_plannedweight,
                approvedweight = p_approvedweight,
                batchcost = p_batchcost,
                line_supervisor_id = p_line_supervisor_id,
                company_id = p_company_id,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND company_id = p_company_id;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   CALL spc_commonlog_save(p_company_id, 'cbf_lifting_schedule_details', out_id, @action, p_userid);

    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfliftingscheduledetails_search`(
	IN p_lifting_schedule_id INT
)
BEGIN
	
	SELECT CLSD.id,
		CLSD.lifting_schedule_id,
        CLSD.cbfbirdsalesorderid,
        CLSD.cbf_batchid,
        CB.batch_number,
        CLSD.farmerenquiryid,
        FE.farmer_name,
        (CB.live_batch_qty * CB.body_weight) as batchweight,
        CLSD.plannedweight,
        CLSD.approvedweight,
        CLSD.batchcost,
        CLSD.line_supervisor_id,
        E.employeename,
        CSO.vendorid,
        P.partyname,
        CSO.rateperkg,
        SO.salesorderno,
        (CLSD.plannedweight * CSO.rateperkg) as totalcost,
		CB.live_batch_qty as openqty
        
    FROM cbf_lifting_schedule_details CLSD
    LEFT JOIN cbf_batch_details CB ON CB.id = CLSD.cbf_batchid
    LEFT JOIN cbf_birdsalesorder CSO ON CSO.id = CLSD.cbfbirdsalesorderid
    LEFT JOIN cbf_birdsalesorderdetail CSOD ON CSO.id = CSOD.cbfbirdsalesorderid
    LEFT JOIN salesorder SO ON SO.id = CSO.stdsalesorderid
    LEFT JOIN party P ON P.id = CSO.vendorid
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = CLSD.farmerenquiryid
    LEFT JOIN employee E ON E.id = CLSD.line_supervisor_id
    
    WHERE CLSD.lifting_schedule_id = p_lifting_schedule_id
    
    ORDER BY SO.salesorderno;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfliftingscheduledetails_select`(
  IN p_id INT 
)
BEGIN
	SELECT * FROM cbf_lifting_schedule_details WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfliftingschedule_delete`(
  IN p_id INT,
  IN p_company_id INT
)
BEGIN
	DELETE FROM cbf_lifting_schedule WHERE id = p_id AND company_id = p_company_id;
    DELETE FROM cbf_lifting_schedule_details WHERE lifting_schedule_id = p_id AND company_id = p_company_id;
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'cbf_chick_placement', p_id, 'delete', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfliftingschedule_save`(
	IN p_id INT(11),
    IN p_branch_id INT(11),
    IN p_schedule_date DATE,
    IN p_status_id  INT(11),
    IN p_company_id INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_lifting_schedule(
                branch_id,
                schedule_date,
                status_id,
                company_id
    )
			VALUES 
				(
                p_branch_id,
                p_schedule_date,
                p_status_id,
                p_company_id
                );
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE cbf_lifting_schedule
				SET branch_id = p_branch_id,
                schedule_date = p_schedule_date,
                status_id = p_status_id,
                company_id = p_company_id,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND company_id = p_company_id;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   CALL spc_commonlog_save(p_company_id, 'cbf_batch_details', out_id, @action, p_userid);

    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfliftingschedule_search`(
	IN p_company_id INT
)
BEGIN
	SET @@sql_mode = '';
	SELECT DISTINCT CLS.id,
		   CLS.branch_id,
           B.branchname,
           CLS.status_id,
           REF.refname,
           DATE_FORMAT(CLS.schedule_date,'%d/%m/%Y') as schedule_date,
           CDW.stdsalesorderid,
           IFNULL(fun_liftingschedule_totalweight(CLS.id),0) as scheduleexists
           
	FROM cbf_lifting_schedule CLS
    LEFT JOIN cbf_delivery_weights CDW ON CDW.liftingscheduleid = CLS.id
    LEFT JOIN commonbranch B ON B.id = CLS.branch_id
    LEFT JOIN `reference` REF ON REF.id = CLS.status_id
    
    WHERE CLS.company_id = p_company_id
    GROUP BY CLS.id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfliftingschedule_select`(
  IN p_id INT 
)
BEGIN
	SELECT * FROM  cbf_lifting_schedule WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbflinedetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_linedetail WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbflinedetail_save`(
   IN p_id INT(11),
   IN p_lineid INT(11),
   IN p_fromvillageid INT(11),
   IN p_tovillageid INT(11),
   IN p_km DECIMAL(12,3),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_linedetail 
				(id, lineid, fromvillageid, tovillageid, km, companyid)
			VALUES 
				(p_id, p_lineid, p_fromvillageid, p_tovillageid, p_km, p_companyid);
	  SET @action = 'INSERT';
	ELSE
	
		UPDATE cbf_line
				SET branchid = p_branchid,
					lineid = p_lineid,
                    fromvillageid = p_fromvillageid,
                    tovillageid = p_tovillageid,
                    km = p_km,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
		   SET @action = 'UPDATE';     
				
				
	END IF;
	
	SELECT LAST_INSERT_ID() INTO out_id; 
	
	-- record log
	CALL spc_commonlog_save(p_companyid, 'cbf_linedetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbflinedetail_search`(
	IN p_lineid INT(11)
)
BEGIN

	SELECT CLD.id,
		   CLD.lineid, 
		   CLD.fromvillageid,
		   CV1.villagename as fromvillage,
		   CLD.tovillageid,
		   CV2.villagename as tovillage,
		   CLD.km
    FROM cbf_linedetail CLD
    LEFT JOIN cbf_villages CV1 ON CV1.id = CLD.fromvillageid
    LEFT JOIN cbf_villages CV2 ON CV2.id = CLD.tovillageid
    WHERE CLD.lineid = p_lineid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbflinedetail_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT CLD.id,
		   CLD.lineid, 
		   CLD.fromvillageid,
		   CV1.villagename,
		   CLD.tovillageid,
		   CV2.villagename,
		   CLD.km
    FROM cbf_linedetail CLD
    LEFT JOIN cbf_villages CV1 ON CV1.id = CLD.fromvillageid
    LEFT JOIN cbf_villages CV2 ON CV2.id = CLD.tovillageid
    WHERE CLD.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbflinename_bybranchname`(
IN p_branchid varchar(200),
IN p_companyid INT(11)


)
BEGIN
SELECT 
		
        CBFL.branchid as branch_id,
        CBFL.linename,
        CBFL.id
  
FROM cbf_line CBFL  
-- FROM cbf_farmerenquiry CFE 
-- LEFT JOIN cbf_line CBFL  ON CBFL.id = CFE.line_id and CBFL.branchid =  CFE.branch_id 

 WHERE CBFL.companyid = p_companyid AND
	FIND_IN_SET( CBFL.branchid, p_branchid); 
    
    
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfline_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_line WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfline_save`(
   IN p_id INT(11),
   IN p_branchid INT(11),
   IN p_linename VARCHAR(100),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF EXISTS(
            SELECT linename from cbf_line where LOWER(linename) = LOWER(p_linename)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    
		BEGIN
		
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO cbf_line 
						(id, branchid, linename, companyid)
					VALUES 
						(p_id, p_branchid, p_linename, p_companyid);
			  SET @action = 'INSERT';
			ELSE
			
				UPDATE cbf_line
						SET branchid = p_branchid,
							linename = p_linename,
							companyid = p_companyid,
							id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
				   SET @action = 'UPDATE';     
						
						
			END IF;
			
			SELECT LAST_INSERT_ID() INTO out_id; 
			
			-- record log
			CALL spc_commonlog_save(p_companyid, 'cbf_line', out_id, @action, p_userid);

		END;
     
   END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfline_search`(
	IN p_companyid INT(11),
    IN p_branchid INT(11)
)
BEGIN
	
    SELECT L.id,
		   L.branchid,
           B.branchname,
           L.linename,
           B.branchcode,
		   fnc_supervisorallocation_employee(L.id,p_companyid) as employeename,
           BWS.empids
	
    FROM cbf_line L
    LEFT JOIN commonbranch B ON B.id = L.branchid
    LEFT JOIN cbf_branchwisesupervisordetail BWS ON L.id = BWS.lineid
    
    WHERE 
    ((p_branchid is null) or (L.branchid=p_branchid))
    AND L.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfline_select`(
	IN p_companyid INT(11),
    IN p_id INT(11),
    IN p_branchid INT(11)
)
BEGIN

	SELECT L.id,
		   L.branchid,
           B.branchname,
           L.linename,
           B.branchcode
	
    FROM cbf_line L
    LEFT JOIN commonbranch B ON B.id = L.branchid
    
    WHERE L.id = p_id
    AND L.branchid = p_branchid
    AND L.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfmaterialtransferfinal_report`(
IN p_fromdate date,
IN p_todate date,
IN p_cbf_batchid varchar(1000),
IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';

SELECT *, (rate*quantity) as amount
FROM(
SELECT
CDT.cbf_batchid,
CDT.shedid,
CFSDD.id,
CFSDD.warehousebinid,
WHB.warehouseid,
-- WHB.warehouseid,
MM.itemid,
MM.transactionid,
I.itemname,
I.itemunitid,
REF.refname as itemunitname,
-- MM.transactiondate,
DATE_FORMAT( MM.transactiondate,'%d/%m/%Y') as transactiondate,
MM.quantity,
MM.itemvalue,
MM.transactiontypeid,
(MM.itemvalue/MM.quantity) As rate



 from cbf_dailytransaction CDT 
	LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CFSDD ON CDT.shedid = CFSDD.id
	LEFT JOIN warehousebin WHB ON WHB.id = CFSDD.warehousebinid
	LEFT JOIN materialmovement MM ON MM.towarehousebinid = CFSDD.warehousebinid and WHB.id
    LEFT JOIN item I ON I.id = MM.itemid
	LEFT JOIN `reference` REF ON I.itemunitid = REF.id
   
  
  WHERE CDT.companyid = p_companyid AND
		FIND_IN_SET( CDT.cbf_batchid,p_cbf_batchid) AND  
        MM.transactiontypeid = 682 AND
        MM.transactiondate BETWEEN p_fromdate AND p_todate
        group by itemid)temp;
        -- GROUP BY shedid;
		-- CBD.statusid != 3024;
        
  
/*DROP TEMPORARY TABLE IF EXISTS temp1 ;
CREATE TEMPORARY TABLE temp1 

select * from temp1;

SELECT *, (rate*quantity) as amount
FROM(

  SELECt 
  warehouseid,
  MM.itemid,
  MM.transactiontypeid,
  I.itemname,
  itemunitid,
  REF.refname as itemunitname,
  -- MM.transactiondate,
  DATE_FORMAT( MM.transactiondate,'%d/%m/%Y') as transactiondate,
  MM.quantity,
 (MM.quantity*MM.itemvalue) As rate
 

  
  FROM(
 select
       CDT.shedid,
	   WHB.warehouseid as warehouseid

 from cbf_dailytransaction CDT 
 
	LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CFSDD ON CDT.shedid = CFSDD.id
	LEFT JOIN warehousebin WHB ON WHB.id = CFSDD.warehousebinid
 where
  FIND_IN_SET( CDT.cbf_batchid,p_cbf_batchid)
  GROUP BY CDT.shedid
  ) as temp
  
  LEFT JOIN materialmovement MM ON MM.towarehouseid = warehouseid
  LEFT JOIN item I ON I.id = MM.itemid
  LEFT JOIN `reference` REF ON I.itemunitid = REF.id
     
     where
     MM.transactiondate BETWEEN p_fromdate AND p_todate) as temparary; -- AND MM.transactiontypeid = 682;

SELECT * FROM temp1;  */

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfmaterialtransfer_report`(
IN p_fromdate date,
IN p_todate date,
IN p_cbf_batchid varchar(100),
IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';

SELECT

CDT.cbf_batchid,
MM.transactionid,
DATE_FORMAT( MM.transactiondate,'%d/%m/%Y') as transactiondate,
(MM.quantity*GD.unitprice) As rate,
MM.quantity,
MM.itemid,
GD.itemname,
GD.itemunitid,
GD.unitprice,
CFSDD.warehousebinid,
MM.towarehousebinid,
MM.transactiontypeid,
REF.refname as itemunitname


 FROM materialmovement MM
   LEFT JOIN grpodetail GD ON MM.itemid = GD.itemid
   LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CFSDD ON MM.itemid = GD.itemid
   LEFT JOIN cbf_dailytransaction CDT ON CFSDD.id = CDT.shedid
   LEFT JOIN `reference` REF ON GD.itemunitid = REF.id
   
  
  WHERE CDT.companyid = p_companyid AND
		MM.transactiondate BETWEEN p_fromdate AND p_todate AND
		FIND_IN_SET(CDT.cbf_batchid, p_cbf_batchid) AND
        CFSDD.warehousebinid = MM.towarehousebinid
         AND MM.transactiontypeid = 682;
		-- CBD.statusid != 3024;
 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfopeningbalancedetail_delete`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

    DELETE FROM cbf_openingbalancedetail WHERE id = p_id AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfopeningbalancedetail_save`(
   IN p_id INT(11),
   IN p_cbfopeningbalanceid INT,
   IN p_farmerenquiryid INT,
   IN p_cbfbatchno VARCHAR(100),
   IN p_cbfshedid INT,
   IN p_totalarea DECIMAL(20,3),
   IN p_placementdate DATE,
   IN p_firstdaydate DATE,
   IN p_livebatchdate DATE,
   IN p_age INT,
   IN p_placementqty INT,
   IN p_mortality INT,
   IN p_saleqty INT,
   IN p_transferqty INT,
   IN p_liveqty INT,
   IN p_saleweight DECIMAL(20,3),
   IN p_salevalue DECIMAL(30,3),
   IN p_transferweight DECIMAL(20,3),
   IN p_transfervalue DECIMAL(30,3),
   IN p_totalweight DECIMAL(30,3),
   IN p_feedconsume DECIMAL(20,3),
   IN p_feedvalue DECIMAL(30,3),
   IN p_medicinevalue DECIMAL(30,3),
   IN p_vaccinevalue DECIMAL(30,3),
   IN p_vitaminvalue DECIMAL(30,3),
   IN p_herbalvalue DECIMAL(30,3),
   IN p_batchstatusid INT,
   IN p_shortage INT,
   IN p_excess INT,
   IN p_warehouseid INT,
   IN p_warehousebinid INT,
   IN p_supervisorid INT,
   IN p_liftingdate DATE,
   IN p_totalbirdvalue DECIMAL(30,3),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @warehouseid = null;
    SET @warehousebinid = null;

	SELECT SDD.warehousebinid, WB.warehouseid
    INTO @warehousebinid, @warehouseid
    FROM cbf_farmerenquiry_sheddimensiondetail SDD
    LEFT JOIN warehousebin WB ON WB.id = SDD.warehousebinid
    WHERE SDD.id = p_cbfshedid;
    
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_openingbalancedetail 
				(id, 
                 cbfopeningbalanceid,
				 farmerenquiryid,
                 cbfbatchno,
				 cbfshedid,
				 totalarea,
				 placementdate,
				 firstdaydate,
				 livebatchdate,
				 age,
				 placementqty,
				 mortality,
				 saleqty,
				 transferqty,
                 liveqty,
				 saleweight,
				 salevalue,
				 transferweight,
				 transfervalue,
				 totalweight,
				 feedconsume,
				 feedvalue,
				 medicinevalue,
				 vaccinevalue,
				 vitaminvalue,
				 herbalvalue,
				 batchstatusid,
				 shortage,
				 excess,
				 warehouseid,
				 warehousebinid,
				 supervisorid,
				 liftingdate,
				 totalbirdvalue,
                 companyid)
			VALUES 
				(p_id,
                 p_cbfopeningbalanceid,
				 p_farmerenquiryid,
                 p_cbfbatchno,
				 p_cbfshedid,
				 p_totalarea,
				 p_placementdate,
				 p_firstdaydate,
				 p_livebatchdate,
				 p_age,
				 p_placementqty,
				 p_mortality,
				 p_saleqty,
				 p_transferqty,
                 p_liveqty,
				 p_saleweight,
				 p_salevalue,
				 p_transferweight,
				 p_transfervalue,
				 p_totalweight,
				 p_feedconsume,
				 p_feedvalue,
				 p_medicinevalue,
				 p_vaccinevalue,
				 p_vitaminvalue,
				 p_herbalvalue,
				 p_batchstatusid,
				 p_shortage,
				 p_excess,
				 @warehouseid,
				 @warehousebinid,
				 p_supervisorid,
				 p_liftingdate,
				 p_totalbirdvalue,
                 p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_openingbalancedetail
				SET cbfopeningbalanceid = p_cbfopeningbalanceid,
					 farmerenquiryid = p_farmerenquiryid,
                     cbfbatchno = p_cbfbatchno,
					 cbfshedid = p_cbfshedid,
					 totalarea = p_totalarea,
					 placementdate = p_placementdate,
					 firstdaydate = p_firstdaydate,
					 livebatchdate = p_livebatchdate,
					 age = p_age,
					 placementqty = p_placementqty,
					 mortality = p_mortality,
					 saleqty = p_saleqty,
					 transferqty = p_transferqty,
                     liveqty = p_liveqty,
					 saleweight = p_saleweight,
					 salevalue = p_salevalue,
					 transferweight = p_transferweight,
					 transfervalue = p_transfervalue,
					 totalweight = p_totalweight,
					 feedconsume = p_feedconsume,
					 feedvalue = p_feedvalue,
					 medicinevalue = p_medicinevalue,
					 vaccinevalue = p_vaccinevalue,
					 vitaminvalue = p_vitaminvalue,
					 herbalvalue = p_herbalvalue,
					 batchstatusid = p_batchstatusid,
					 shortage = p_shortage,
					 excess = p_excess,
					 warehouseid = @warehouseid,
					 warehousebinid = @warehousebinid,
					 supervisorid = p_supervisorid,
					 liftingdate = p_liftingdate,
					 totalbirdvalue = p_totalbirdvalue,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF((SELECT statusid FROM cbf_openingbalance WHERE id = p_cbfopeningbalanceid) = 3082)THEN -- Approved
    
		SET @itemid = null;
        SET @stockledgerid = null;
        SELECT breeditemid, stockledgerid INTO @itemid, @stockledgerid 
        FROM cbf_openingbalance
        WHERE id = p_cbfopeningbalanceid;
        
		-- Create CBF batch
		SET @batchid = null;
		call spc_cbfbatchdetails_save(
			NULL,
			p_farmerenquiryid, p_cbfbatchno, p_liveqty,
			p_placementqty, p_liveqty,
			@itemid,
			NULL, p_supervisorid, NULL, p_mortality, NULL,
			p_excess, p_shortage,
			(SELECT density FROM cbf_farmerenquiry WHERE id = p_farmerenquiryid),
			p_transferqty, NULL, p_placementdate, p_livebatchdate,
			NULL, NULL, p_batchstatusid, p_age, NULL,
			NULL, NULL, p_saleqty, NULL, NULL, 
			'CBF BATCH Opening Balance', p_companyid, p_userid, @batchid
		);
        
        UPDATE cbf_batch_details 
        SET scheme_id = (SELECT schemeid FROM cbf_farmeragreement WHERE farmerenquiryid = p_farmerenquiryid ORDER BY id DESC LIMIT 1),
		farm_rest_period = (SELECT rest_period FROM cbf_farmerenquiry WHERE id = p_farmerenquiryid),
        costperbird = (p_totalbirdvalue/p_placementqty)
		WHERE id = @batchid;
		-- update CBF batchid in cbf_openingbalancedetail table
		UPDATE cbf_openingbalancedetail SET cbfbatchid = @batchid WHERE id = out_id;
		
		-- Update Shed status to 2084 i.e batch started
		UPDATE cbf_farmerenquiry_sheddimensiondetail SET statusid = 2084 WHERE id = p_cbfshedid;
		
		-- Update cbf_batchbalance table
		
		SET @cbfbatchbalanceid = null;
		CALL spc_cbfbatchbalance_save(
			NULL, p_livebatchdate, @batchid, p_cbfshedid,
			@itemid,
			p_liveqty, 'CBF opening balance', p_companyid, p_userid,
			@cbfbatchbalanceid
		);
        
        
        -- Make material receipt entry for DOC
		SET @out_recid = NULL;
		CALL spc_materialreceipt_save(
			NULL, p_placementdate, 343, @batchid, 322, 'Cbf Opening Batch',
			p_userid, p_userid, p_placementdate, p_companyid,
			p_userid, @out_recid
		);
        
        
        -- create itembatch for material receipt
		SET @itembatch = null;
		SET @itemgroup = null;
        SET @itemname = null;
        SET @itemunitid = null;
        SET @itemledgerid = null;
    
        select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith), itemname, itemunitid,ledgerid
        INTO @itembatch, @itemname, @itemunitid,@itemledgerid 
        from item I
		INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

		WHERE I.id = @itemid;
        
        SELECT @itembatch;
        
        -- Material receipt detail entry
        SET @out_recdetailid = NULL;
		CALL spc_materialreceiptdetail_save(
			NULL, @out_recid, @itemid, @itemname,
            p_liveqty, (p_totalbirdvalue/p_placementqty),
            (p_liveqty * (p_totalbirdvalue/p_placementqty)),
            @itemunitid, @itembatch,
			@warehouseid,
            @warehousebinid,
            p_companyid,
			p_userid, NULL, @out_recdetailid
		);
              
		-- Make material movement entry for material receipt
        SET @out_movid1 = NULL;
		CALL spc_materialmovement_save(
			NULL, @itemid, @itembatch, 684,
			@out_recid, p_placementdate, p_liveqty,
			NULL, NULL,
            @warehouseid,
            @warehousebinid,
			(p_liveqty * (p_totalbirdvalue/p_placementqty)), p_companyid, p_userid, @out_movid1
		);
              
		 -- get item group id from the item id and update itemgroup table
        SELECT itemgroupid INTO @itemgroup FROM item WHERE id = @itemid;
        
        UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
        
        WHERE id = @itemgroup;
        
        -- JE effect
        
			SET @WIPledgerid = null;
			SELECT WIPledgerid
			INTO @WIPledgerid
			FROM cbfsetting LIMIT 1;
		   
			set @branch = null;
			SELECT L.branchid INTO @branch 
			FROM location L
			LEFT JOIN warehouse W ON W.id = @warehouseid
			WHERE W.locationid = L.id LIMIT 1;
            
            SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				p_livebatchdate,
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                341,
				NULL,
				'CBF batch opening JE',
				NULL,
				NULL,
				NULL,
				p_cbfopeningbalanceid,
				'CBF batch opening JE',
				p_companyid,
                p_userid,
                @jeid
           );
           
           -- insert JE detail
                        
			-- Credit to stock - Ledger
			 
			 SET @jedetailid1 = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				@stockledgerid,
				0,
                NUll,
				@batchid,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				0,
				p_totalbirdvalue,
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'CBF batch opening JE',
				p_companyid,
				p_userid,
				@jedetailid1
			 );
			
			-- Debit to WIP Bird - Ledger
			
			 SET @jedetailid = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				@itemledgerid,
				0,
                NUll,
				@batchid,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				p_totalbirdvalue,
				0,
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'CBF batch opening JE',
				p_companyid,
				p_userid,
				@jedetailid
			 );
        
    END IF;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_openingbalancedetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfopeningbalancedetail_search`(
	IN p_cbfopeningbalanceid INT,
    IN p_companyid INT
)
BEGIN
SET @@sql_mode = ' ';


	SELECT COBD.id, 
		 COBD.cbfopeningbalanceid,
		 COBD.farmerenquiryid,
         FE.farmer_name,
         FE.farm_name,
         COBD.cbfbatchno,
		 COBD.cbfbatchid,
		 COBD.cbfshedid,
         SDD.shed_name,
		 COBD.totalarea,
         DATE_FORMAT(COBD.placementdate,'%d/%m/%Y') as placementdate,
		 DATE_FORMAT(COBD.firstdaydate,'%d/%m/%Y') as firstdaydate,
		 DATE_FORMAT(COBD.livebatchdate,'%d/%m/%Y') as livebatchdate,
		 COBD.age,
		 COBD.placementqty,
		 COBD.mortality,
		 COBD.saleqty,
		 COBD.transferqty,
         COBD.liveqty,
		 COBD.saleweight,
		 COBD.salevalue,
		 COBD.transferweight,
		 COBD.transfervalue,
		 COBD.totalweight,
		 COBD.feedconsume,
		 COBD.feedvalue,
		 COBD.medicinevalue,
		 COBD.vaccinevalue,
		 COBD.vitaminvalue,
		 COBD.herbalvalue,
		 COBD.batchstatusid,
		 COBD.shortage,
		 COBD.excess,
		 COBD.warehouseid,
		 COBD.warehousebinid,
		 COBD.supervisorid,
		 DATE_FORMAT(COBD.liftingdate,'%d/%m/%Y') as liftingdate,
		 COBD.totalbirdvalue,
         SDD.statusid as shedstatusid
         
	FROM cbf_openingbalancedetail COBD
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = COBD.farmerenquiryid
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = COBD.cbfshedid
    
    WHERE COBD.cbfopeningbalanceid = p_cbfopeningbalanceid
    AND COBD.companyid = p_companyid
    
    GROUP BY COBD.id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfopeningbalancedetail_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	SELECT COBD.id, 
		 COBD.cbfopeningbalanceid,
		 COBD.farmerenquiryid,
         FE.farm_name,
         FE.farmer_name,
		 COBD.cbfbatchid,
         COBD.cbfbatchno,
		 COBD.cbfshedid,
         SDD.shed_name,
         (SDD.total_sq_ft / FE.density) as capacity,
		 COBD.totalarea,
		 DATE_FORMAT(COBD.placementdate,'%d/%m/%Y') as placementdate,
		 DATE_FORMAT(COBD.firstdaydate,'%d/%m/%Y') as firstdaydate,
		 DATE_FORMAT(COBD.livebatchdate,'%d/%m/%Y') as livebatchdate,
		 COBD.age,
		 COBD.placementqty,
		 COBD.mortality,
		 COBD.saleqty,
		 COBD.transferqty,
         COBD.liveqty,
		 COBD.saleweight,
		 COBD.salevalue,
		 COBD.transferweight,
		 COBD.transfervalue,
		 COBD.totalweight,
		 COBD.feedconsume,
		 COBD.feedvalue,
		 COBD.medicinevalue,
		 COBD.vaccinevalue,
		 COBD.vitaminvalue,
		 COBD.herbalvalue,
		 COBD.batchstatusid,
		 COBD.shortage,
		 COBD.excess,
		 COBD.warehouseid,
         W.warehousename,
		 COBD.warehousebinid,
         WB.binname as warehousebinname,
		 COBD.supervisorid,
		 DATE_FORMAT(COBD.liftingdate,'%d/%m/%Y') as liftingdate,
		 COBD.totalbirdvalue
         
	FROM cbf_openingbalancedetail COBD
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = COBD.farmerenquiryid
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = COBD.cbfshedid
    LEFT JOIN warehouse W ON W.id = COBD.warehouseid
    LEFT JOIN warehousebin WB ON WB.id = COBD.warehousebinid
    
    WHERE COBD.id = p_id
    AND COBD.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfopeningbalance_delete`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	DELETE FROM cbf_openingbalancedetail WHERE cbfopeningbalanceid = p_id AND companyid = p_companyid;
    DELETE FROM cbf_openingbalance WHERE id = p_id AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfopeningbalance_save`(
   IN p_id INT(11),
   IN p_date DATE,
   IN p_eggage DECIMAL(9,3),
   IN p_locationid INT,
   IN p_sourceid INT,
   IN p_vendorid INT,
   IN p_breeditemid INT,
   IN p_fromwarehouseid INT,
   IN p_hatchid INT,
   IN p_stockledgerid INT,
   IN p_statusid INT,
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_openingbalance 
				(id, `date`, eggage, locationid, sourceid, 
                vendorid, breeditemid, fromwarehouseid, 
                hatchid, stockledgerid, statusid, companyid)
			VALUES 
				(p_id, p_date, p_eggage, p_locationid, p_sourceid, 
                p_vendorid, p_breeditemid, p_fromwarehouseid, 
                p_hatchid, p_stockledgerid, p_statusid, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_openingbalance
				SET `date` = p_date,
					eggage = p_eggage,
                    locationid = p_locationid,
                    sourceid = p_sourceid, 
					vendorid = p_vendorid, 
                    breeditemid = p_breeditemid, 
                    fromwarehouseid = p_fromwarehouseid, 
					hatchid = p_hatchid, 
                    stockledgerid = p_stockledgerid,
                    statusid = p_statusid,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_openingbalance', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfopeningbalance_search`(
	IN p_companyid INT
)
BEGIN

	SELECT COB.id,
		   DATE_FORMAT(COB.`date`,'%d/%m/%Y') as `date`,
           COB.eggage,
           COB.locationid,
           L.locationname,
           COB.vendorid,
           P.partyname,
           COB.sourceid,
           REF.refname as sourcename,
           COB.breeditemid,
           I.itemname,
           COB.fromwarehouseid,
    --       COBD.farmerenquiryid,
      --     CFE.farm_name,
           W.warehousename,
           COB.hatchid,
           COB.stockledgerid,
           COA.coaname as stockledgername,
           COA.glcode as stockglcode,
           COB.statusid,
           REF1.refname as statusname
           
	FROM cbf_openingbalance COB
   -- LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id
   -- LEFT JOIN cbf_farmerenquiry CFE ON CFE.id = COBD.farmerenquiryid
    LEFT JOIN location L ON COB.locationid = L.id
    LEFT JOIN party P ON COB.vendorid = P.id
    LEFT JOIN `reference` REF ON COB.sourceid = REF.id
    LEFT JOIN `reference` REF1 ON COB.statusid = REF1.id
    LEFT JOIN item I ON COB.breeditemid = I.id
    LEFT JOIN warehouse W ON COB.fromwarehouseid = W.id
    LEFT JOIN chartofaccount COA ON COB.stockledgerid = COA.id
    
    WHERE COB.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfopeningbalance_select`(
	IN p_id INT,
	IN p_companyid INT
)
BEGIN

	SELECT COB.id,
		   DATE_FORMAT(COB.`date`,'%d/%m/%Y') as `date`,
           COB.eggage,
           COB.locationid,
           L.locationname,
           L.locationcode,
           COB.vendorid,
           P.partyname,
           COB.sourceid,
           REF.refname as sourcename,
           COB.breeditemid,
           I.itemname,
           COB.fromwarehouseid,
           W.warehousename,
           W.warehousecode,
           COB.hatchid,
           COB.stockledgerid,
           COA.coaname as stockledgername,
           COA.glcode as stockglcode,
           COB.statusid
           
	FROM cbf_openingbalance COB
    LEFT JOIN location L ON COB.locationid = L.id
    LEFT JOIN party P ON COB.vendorid = P.id
    LEFT JOIN `reference` REF ON COB.sourceid = REF.id
    LEFT JOIN item I ON COB.breeditemid = I.id
    LEFT JOIN warehouse W ON COB.fromwarehouseid = W.id
    LEFT JOIN chartofaccount COA ON COB.stockledgerid = COA.id
    
    WHERE COB.id = p_id AND COB.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfprocurementscheduledetail_bybatchid`(
	IN p_batchid INT(11),
    IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = '';
		SELECT PSD.id as procurementscheduledetailid,
			   PSD.procurementscheduleid as create_batch_schedule_id,
			   PSD.cbfshedid as shed_id,
			   SDD.shed_name,
			   PSD.chicksitemid,
			   I.itemname,
			   PSD.chicksproposalquantity,
			   PSD.sourceid,
               REF.refname as sourcename,
			   PSD.requestid,
			   PSD.batchid as batch_id,
			   CB.farmer_enquiry_id,
               CB.batch_qty,
               FE.farmer_name,
               FE.branch_id,
               B.branchname,
               fnc_cbfPlacementMaterialStatus(p_batchid, p_companyid) as materialreceiptstatus,
               fnc_cbfPlacementTransactionId(PSD.sourceid, PSD.requestid) as request_id,
               DATE_FORMAT(now(),'%d/%m/%Y') as placement_date,
               DATE_FORMAT(now(),'%d/%m/%Y') as first_day_date,
               fnc_cbffreechicks(PSD.sourceid, PSD.requestid, CB.batch_qty) as free_qty,
               0 as shortage,
               0 as mortality,
               0 as culls,
               0 as week_chicks,
               0 as std_lifting_age
			   
		FROM cbf_procurementscheduledetail PSD
		LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = PSD.cbfshedid
		LEFT JOIN item I ON I.id = PSD.chicksitemid
		LEFT JOIN cbf_batch_details CB ON CB.id = PSD.batchid
        LEFT JOIN `reference` REF ON REF.id = PSD.sourceid
        LEFT JOIN cbf_farmerenquiry FE ON FE.id = CB.farmer_enquiry_id
        LEFT JOIN commonbranch B ON B.id = FE.branch_id
		
		WHERE PSD.batchid = p_batchid
		AND PSD.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfprocurementscheduledetail_delete`(
	IN p_id INT,
    IN p_company_id INT
)
BEGIN
	DELETE FROM cbf_procurementscheduledetail WHERE id = p_id AND companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfprocurementscheduledetail_save`(
	IN p_id INT,
    IN p_procurementscheduleid INT,
    IN p_shedreadyid INT,
    IN p_cbfshedid INT,
    IN p_capacity INT,
    IN p_chicksitemid INT,
    IN p_chicksproposalquantity INT,
    IN p_sourceid INT,
    IN p_requestid INT,
    IN p_batchid INT,
    IN p_remark VARCHAR(150),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    /*SET @docitemid = null;
    SET @docitemname = null; 
    SET @docunitid = null;
    
    SELECT CS.DOCitemid, I.itemname, I.itemunitid
    INTO @docitemid, @docitemname, @docunitid
    FROM cbfsetting CS
    LEFT JOIN item I ON I.id = CS.DOCitemid
    LIMIT 1;*/
    
    SET @docitemname = null; 
    SET @docunitid = null;
    
    SELECT itemname, itemunitid
    INTO @docitemname, @docunitid
    FROM item 
    WHERE id = p_chicksitemid;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		IF NOT EXISTS(SELECT id FROM cbf_procurementscheduledetail WHERE cbfshedid = p_cbfshedid) THEN
			INSERT INTO cbf_procurementscheduledetail
					(id, 
					procurementscheduleid,
					shedreadyid,
					cbfshedid,
					capacity,
					chicksitemid,
					chicksproposalquantity,
					sourceid,
					requestid,
					batchid,
					remark,
					companyid)
				VALUES 
					(p_id,
					p_procurementscheduleid,
					p_shedreadyid,
					p_cbfshedid,
					p_capacity,
					p_chicksitemid,
					p_chicksproposalquantity,
					p_sourceid,
					p_requestid,
					p_batchid,
					p_remark,
					p_companyid);
					
			SET @action = 'INSERT';
		END IF;
	ELSE
    
		UPDATE cbf_procurementscheduledetail
			SET procurementscheduleid = p_procurementscheduleid,
                shedreadyid = p_shedreadyid,
                cbfshedid = p_cbfshedid,
                capacity = p_capacity,
                chicksitemid = p_chicksitemid,
                chicksproposalquantity = p_chicksproposalquantity,
                sourceid = p_sourceid,
                requestid = p_requestid,
                batchid = p_batchid,
                remark = p_remark,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    
    -- get procurement schedule status
    SET @statusid = null;
    
    SET @farmerenquiryid = null;
    
    SELECT statusid INTO @statusid FROM cbf_procurementschedule CPS WHERE CPS.id = p_procurementscheduleid;
    
    SELECT farmerenquiryid INTO @farmerenquiryid FROM cbf_farmerenquiry_sheddimensiondetail CSD WHERE CSD.id = p_cbfshedid;
    
    IF(@statusid = 3002)THEN -- schedule is approved
		
         -- update CBF shed status 2083 = 'scheduled'
		UPDATE cbf_farmerenquiry_sheddimensiondetail SET statusid = 2083 where id = p_cbfshedid;
    
    
		-- create CBF batch
        IF(out_id > 0)THEN
        
			SET @farmercode = null;
            SET @batchcnt = 0;
            
			SELECT P.partycode INTO @farmercode
            FROM party P
            LEFT JOIN cbf_farmeragreement CFA ON CFA.partyid = P.id
            WHERE CFA.farmerenquiryid = @farmerenquiryid;
            
            IF EXISTS(SELECT id FROM cbf_batch_details WHERE farmer_enquiry_id = @farmerenquiryid) THEN
				SELECT count(*) INTO @batchcnt FROM cbf_batch_details WHERE farmer_enquiry_id = @farmerenquiryid;
			END IF;
        
			SET @batch_id = null;
            CALL spc_cbfbatchdetails_save(
				null, @farmerenquiryid,
                CONCAT(@farmercode, 'F', @farmerenquiryid, (@batchcnt + 1)), p_chicksproposalquantity, null,
                null, p_chicksitemid, p_procurementscheduleid, null,
                (SELECT id FROM cbf_shedready WHERE id = p_shedreadyid ), 
                null, null, null, null, (SELECT density FROM cbf_farmerenquiry WHERE id = @farmerenquiryid),
                null, (SELECT `date` FROM cbf_procurementschedule WHERE id = p_procurementscheduleid), null, null, null,
                null, 3021, null, null,
                null, null, null, null,
                null, 'CBF batch', p_companyid, p_userid,
                @batch_id
            );
            
            IF(@batch_id > 0) THEN
				UPDATE cbf_procurementscheduledetail
                SET batchid = @batch_id
                WHERE id = out_id;
			END IF;
            
        END IF;
    
		IF(out_id > 0 AND p_sourceid = 261)THEN -- source is OWN then do material request
        
			SET @warehouseid = null;
            SET @warehousebinid = null;
			SELECT WB.warehouseid, SDD.warehousebinid 
            INTO @warehouseid, @warehousebinid
            FROM cbf_farmerenquiry_sheddimensiondetail SDD
            LEFT JOIN warehousebin WB ON WB.id = SDD.warehousebinid
            WHERE SDD.id = p_cbfshedid;
			
            SET @out_materialRequestId = null;
			SET @out_materialrequestdetailid = null;
          
		    CALL spc_materialrequest_save(
				null, 503, 502, 444, now(),
				(SELECT schedulefordate FROM cbf_procurementschedule WHERE id = p_procurementscheduleid),
				'Chicks request from system',
				-- (SELECT warehouseid FROM setter WHERE id = p_setterid), 
                -- (SELECT warehousebinid FROM setter WHERE id = p_setterid),
                @warehouseid,
                @warehousebinid,
                null, null,
				null,
				p_companyid ,
				p_userid,
                @out_materialRequestId
			);
		
            CALL spc_materialrequestdetail_save(
				null, 
                @out_materialRequestId,
                p_chicksitemid,
                @docitemname,
                p_chicksproposalquantity,
                @docunitid,
                p_companyid,
				p_userid,
                @out_materialrequestdetailid
			);
            
            IF(@out_materialRequestId > 0) THEN
				UPDATE cbf_procurementscheduledetail
                SET requestid = @out_materialRequestId
                WHERE id = out_id;
			END IF;
            
			SET @out_purchaseRequestId = null;
			SET @out_purchaserequestdetailid = null;
          
		ELSE IF(out_id > 0 AND p_sourceid = 262) THEN
				 CALL spc_purchaserequest_save(
					null,
					null,
					543,
					(SELECT schedulefordate FROM cbf_procurementschedule WHERE id = p_procurementscheduleid),
					p_userid,
					null,
					'Chicks purchase request',
					92,
					null,
					null,
                    now(),
					p_companyid,
					p_userid,
					@out_purchaseRequestId
				 );
				 
				 CALL spc_purchaserequestdetail_save(
					null,
					@out_purchaseRequestId,
					p_chicksitemid,
					@docitemname,
					p_chicksproposalquantity,
					@docunitid,
					1641,
					p_companyid,
					p_userid,
					@out_purchaserequestdetailid
				 );
				 
				IF(@out_purchaseRequestId > 0) THEN
					UPDATE cbf_procurementscheduledetail
					SET requestid =@out_purchaseRequestId
					WHERE id = out_id;
				END IF;
			END IF;
		END IF;
    
    END IF;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfprocurementscheduledetail_search`(
	IN p_procurementscheduleid INT,
    IN p_companyid INT
)
BEGIN
	SELECT CPSD.id,
		   CPSD.procurementscheduleid,
           CPSD.shedreadyid,
           CPSD.cbfshedid,
           SDD.shed_name,
           CPSD.capacity,
           CPSD.chicksitemid,
           I.itemname,
           CPSD.chicksproposalquantity,
           CPSD.sourceid,
           CPSD.batchid,
           CPSD.remark,
           CPSD.requestid,
           REF.refname as scheduleSts,
           CFE.farmer_name,
           CFE.farm_name
    
    FROM cbf_procurementscheduledetail CPSD
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CPSD.cbfshedid
    LEFT JOIN cbf_farmerenquiry CFE ON CFE.id = SDD.farmerenquiryid
    LEFT JOIN `reference` REF ON REF.id = SDD.statusid
    LEFT JOIN item I ON I.id = CPSD.chicksitemid
    
    WHERE CPSD.procurementscheduleid = p_procurementscheduleid AND CPSD.companyid = p_companyid
    
    ORDER BY CPSD.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfprocurementscheduledetail_select`(
	IN p_id INT,
	IN p_companyid INT	
)
BEGIN
	SELECT CPSD.id,
		   CPSD.procurementscheduleid,
           CPSD.shedreadyid,
           CPSD.cbfshedid,
           SDD.shed_name,
           CPSD.capacity,
           CPSD.chicksitemid,
           I.itemname,
           CPSD.chicksproposalquantity,
           CPSD.sourceid,
           CPSD.batchid,
           CPSD.remark,
           CPSD.requestid
    
    FROM cbf_procurementscheduledetail CPSD
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CPSD.cbfshedid
    LEFT JOIN item I ON I.id = CPSD.chicksitemid 
    
    WHERE CPSD.id = p_id AND CPSD.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfprocurementschedule_delete`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN
	DELETE FROM cbf_procurementschedule WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfprocurementschedule_save`(
	IN p_id INT,
    IN p_date DATE,
    IN p_schedulefordate DATE,
    IN p_totalshedcapacity INT,
    IN p_totalchicksquantity INT,
    IN p_approvedby INT,
    IN p_approveddate DATE,
    IN p_remark VARCHAR(150),
    IN p_createdby INT,
    IN p_branchid INT,
    IN p_statusid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
		INSERT INTO cbf_procurementschedule
				(id, 
                `date`,
                schedulefordate,
                totalshedcapacity,
                totalchicksquantity,
                approvedby,
                approveddate,
                remark,
                createdby,
                branchid,
                statusid,
                companyid)
			VALUES 
				(p_id,
                p_date,
                p_schedulefordate,
                p_totalshedcapacity,
                p_totalchicksquantity,
                p_approvedby,
                p_approveddate,
                p_remark,
                p_createdby,
                p_branchid,
                p_statusid,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE cbf_procurementschedule
			SET `date` = p_date,
                schedulefordate = p_schedulefordate,
                totalshedcapacity = p_totalshedcapacity,
                totalchicksquantity = p_totalchicksquantity,
                approvedby = p_approvedby,
                approveddate = p_approveddate,
                remark = p_remark,
                createdby = p_createdby,
                branchid = p_branchid,
                statusid = p_statusid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfprocurementschedule_search`(
	IN p_companyid VARCHAR(250)
)
BEGIN
	SET @@sql_mode = '';
	SELECT  CPS.id, 
			`date`,
			DATE_FORMAT(CPS.schedulefordate,'%d/%m/%Y') as schedulefordate,
			CPS.totalshedcapacity,
			CPS.totalchicksquantity,
			CPS.approvedby,
			CPS.approveddate,
			CPS.remark,
			CPS.createdby,
			CPS.statusid, 
            REF.refname,
            B.branchname,
            B.branchcode,
            CPS.branchid,
            CFE.farmer_name,
            CFE.farm_name,
            CFE.id as farmid,
            SDD.farmerenquiryid,
            SDD.id as shedid
	
    FROM cbf_procurementschedule CPS
	LEFT JOIN cbf_procurementscheduledetail CPSD ON CPS.id = CPSD.procurementscheduleid
	LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CPSD.cbfshedid
	LEFT JOIN cbf_farmerenquiry CFE ON CFE.id = SDD.farmerenquiryid

    LEFT JOIN commonbranch B ON B.id = CPS.branchid
    LEFT JOIN `reference` REF ON REF.id = CPS.statusid
    
    WHERE CPS.companyid = p_companyid
    GROUP BY CPS.id
    ORDER BY CPS.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfprocurementschedule_select`(
	IN p_id INT,
	IN p_companyid INT	
)
BEGIN
	SELECT CPS.id, 
			`date`,
			DATE_FORMAT(CPS.schedulefordate,'%d/%m/%Y') as schedulefordate,
			CPS.totalshedcapacity,
			CPS.totalchicksquantity,
			CPS.approvedby,
			CPS.approveddate,
			CPS.remark,
			CPS.createdby,
			CPS.statusid, 
            REF.refname,
            B.branchname,
            B.branchcode,
            CPS.branchid
	
    FROM cbf_procurementschedule CPS
    LEFT JOIN commonbranch B ON B.id = CPS.branchid
    LEFT JOIN `reference` REF ON REF.id = CPS.statusid
    
    WHERE CPS.id = p_id AND CPS.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfproductiondeduction_delete`(
 IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM cbf_productiondeduction WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'cbf_productiondeduction', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfproductiondeduction_save`(
   IN p_id INT(11),
   IN p_coststructureid INT(11),
   IN p_fromrate DECIMAL(9,3),
   IN p_torate DECIMAL(9,3),
   IN p_dividendperrupee DECIMAL(9,3),
   IN p_deductionapplyby INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_productiondeduction 
				(coststructureid, deductionapplyby, fromrate, torate, dividendperrupee, companyid)
			VALUES 
				(p_coststructureid, p_deductionapplyby, p_fromrate, p_torate, p_dividendperrupee, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_productiondeduction
				SET coststructureid = p_coststructureid,
					deductionapplyby = p_deductionapplyby,
                    fromrate = p_fromrate,
                    torate = p_torate,
                    dividendperrupee = p_dividendperrupee,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_productiondeduction', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfproductiondeduction_search`(
  IN p_coststructureid INT
)
BEGIN

	SELECT 
		 id,
         coststructureid,
         deductionapplyby,
         fromrate,
         torate, 
         dividendperrupee,
         companyid
         
	FROM
		cbf_productiondeduction 
        
	WHERE
	coststructureid = p_coststructureid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfproductiondeduction_select`(
  IN p_id INT
)
BEGIN

	SELECT 
		 id,
         coststructureid,
         deductionapplyby,
         fromrate,
         torate, 
         dividendperrupee,
         companyid
         
	FROM
		cbf_productiondeduction 
        
	WHERE
	 (
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfproductionincentive_delete`(
 IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM cbf_productionincentive WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'cbf_productionincentive', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfproductionincentive_save`(
   IN p_id INT(11),
   IN p_coststructureid INT(11),
   IN p_fromrate DECIMAL(9,3),
   IN p_torate DECIMAL(9,3),
   IN p_dividendperrupee DECIMAL(9,3),
   IN p_incentiveapplyby INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_productionincentive 
				(coststructureid, incentiveapplyby, fromrate, torate, dividendperrupee, companyid)
			VALUES 
				(p_coststructureid, p_incentiveapplyby, p_fromrate, p_torate, p_dividendperrupee, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_productionincentive
				SET coststructureid = p_coststructureid,
					incentiveapplyby = p_incentiveapplyby,
                    fromrate = p_fromrate,
                    torate = p_torate,
                    dividendperrupee = p_dividendperrupee,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_productionincentive', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfproductionincentive_search`(
  IN p_coststructureid INT
)
BEGIN

	SELECT 
		 id,
         coststructureid,
         incentiveapplyby,
         fromrate,
         torate, 
         dividendperrupee,
         companyid
         
	FROM
		cbf_productionincentive 
        
	WHERE
	coststructureid = p_coststructureid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfproductionincentive_select`(
  IN p_id INT
)
BEGIN

	SELECT 
		 id,
         coststructureid,
         incentiveapplyby,
         fromrate,
         torate, 
         dividendperrupee,
         companyid
         
	FROM
		cbf_productionincentive 
        
	WHERE
	 (
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfreadybirdforsale_report`(
IN p_curdate date,
IN p_branch_id varchar(225),
IN p_fromage INT(11),
IN p_toage INT(11),
IN p_fromweight DECIMAL(9,3),
IN p_toweight DECIMAL(9,3),
IN p_companyid INT(11)
)
BEGIN
 SET @@sql_mode = ' ';

 SELECT *,     -- ROUND(IFNULL(((fwconsumption*1000)/((fweekbw)*fwliveqty)),0),2) as fweekfcr,
				ROUND(IFNULL(((cummulativeactualfeed*1000)/((avgweight)*itemopeningbal)),0),2) As fcr,
				-- ROUND(IFNULL((cummulativeactualfeed/((avgweight/1000)*liveqty)),0),3) As fcr,
				ROUND(((avgweight/1000)*liveqty),2) as totalwt,
                ROUND(IFNULL((((totalmortality+Cumulativeculls)/chick_qty)*100),0),2) As ptotalmortality
			
 FROM(
select 
CFE.farmer_name,
CFE.farm_name,
CBD.id as batch_id,
I.itemname,
CB.branchname,
C.cityname,
CL.linename,
CBD.batch_place_qty as chick_qty,
CBD.batch_number as batch_number,
((DATEDIFF(p_curdate,CBD.batch_place_date))+1) As age,
CBD.live_batch_qty as liveqty,
IFNULL(fnc_itembatchbalancedate(CBD.breed_id,WB.warehouseid,CFESD.warehousebinid,p_curdate,p_companyid),0) as itemopeningbal,  
fnc_calculate_cummalefemalecullscbf(CBB.cbfbatchid,CBB.cbfshedid,p_curdate,CDT.companyid) as Cumulativeculls,
fnc_calculate_cummamortalitycbf(CBB.cbfbatchid,CBB.cbfshedid,p_curdate,CDT.companyid) as totalmortality,
fuc_calculate_maxavgweight(p_curdate,CBB.cbfbatchid) as avgweight,
fnc_calculate_cummactconcbf(CBB.cbfbatchid,CBB.cbfshedid,p_curdate,CDT.companyid)as cummulativeactualfeed


FROM cbf_batch_details CBD
LEFT JOIN cbf_batchbalance CBB ON CBB.cbfbatchid = CBD.id
LEFT JOIN cbf_farmerenquiry CFE  ON CBD.farmer_enquiry_id = CFE.id
LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CFESD ON CFESD.id = CBB.cbfshedid
LEFT JOIN warehousebin WB ON WB.id =  CFESD.warehousebinid
LEFT JOIN cbf_dailytransaction  CDT ON CDT.cbf_batchid = CBD.id
LEFT JOIN commonbranch CB  ON  CB.id = CFE.branch_id
LEFT JOIN cbf_line CL  ON  CL.id = CFE.line_id 
LEFT JOIN item I ON I.id = CBD.breed_id
LEFT JOIN city C ON CFE.cityid = C.id

WHERE 
CBD.companyid = p_companyid AND
CDT.transactiondate <= p_curdate AND
FIND_IN_SET( CFE.branch_id, p_branch_id) AND
CBD.statusid != 3024 AND
CDT.readyforsale = 1
group by CBD.id ) as temp;   
 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfreasons_search`(
  IN p_companyid INT 
)
BEGIN
	SELECT CR.id,
		   typeid,
           R.refname as reasontype,
           reason
            
    FROM  cbf_reasons CR
    LEFT JOIN `reference` R ON CR.typeid = R.id
    
    WHERE 
          CR.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfreasons_select`(
  IN p_id INT 
)
BEGIN
	SELECT CR.id ,
		   CR.typeid,
           R.refname as reasontype,
           reason,
           companyid
            
    FROM  cbf_reasons CR
    LEFT JOIN `reference` R ON CR.typeid = R.id
    WHERE 
          CR.id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfreason_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN
  	DELETE FROM cbf_reasons WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'cbf_reasons', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfreason_save`(
	IN p_id INT,
    IN p_typeid INT,
	IN p_reason VARCHAR(300),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_reasons 
				(typeid, reason, companyid)
			VALUES 
				(p_typeid, p_reason, p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE cbf_reasons
			SET 
				typeid = p_typeid, 
                reason = p_reason, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';   
    
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_reasons', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfscheduledetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM cbfscheduledetail WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfscheduledetail_save`(
    IN p_id INT,
    IN p_cbfscheduleid INT(11),
    IN p_itemid INT(11),
    IN p_fromage TINYINT(4),
    IN p_toage TINYINT(4),
    IN p_ageindays TINYINT(4),
    IN p_method VARCHAR(200),
    IN p_quantity DECIMAL(8,3),
    IN p_itemunitid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbfscheduledetail 
				(id, 
                cbfscheduleid, 
                itemid, 
                fromage, 
                toage, 
                ageindays, 
                method, 
                quantity, 
                itemunitid, 
                companyid)
			VALUES 
				(p_id, 
                p_cbfscheduleid, 
                p_itemid, 
                p_fromage, 
                p_toage, 
                p_ageindays, 
                p_method, 
                p_quantity, 
                p_itemunitid, 
                p_companyid);
		
        SET @action = 'INSERT';

	ELSE
    
		UPDATE cbfscheduledetail
			SET cbfscheduleid = p_cbfscheduleid, 
				itemid = p_itemid,
                fromage = p_fromage,
                toage = p_toage,
                ageindays = p_ageindays,
                method = p_method,
                quantity = p_quantity,
                itemunitid = p_itemunitid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
             SET @action = 'UPDATE';   
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	-- record log
   CALL spc_commonlog_save(p_companyid, 'cbfscheduledetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfscheduledetail_select`(
	IN p_cbfscheduleid INT
)
BEGIN

	SELECT
		 CSD.id,
         cbfscheduleid,
		 CSD.itemid,
         I.id as itmiditemtable,
         fromage,
         toage,
         ageindays,
         method,
         quantity,
         CSD.itemunitid,
         I.itemname,
         I.itemcode,
         R.refname as itemunitname
        
	FROM
		cbfscheduledetail CSD
        LEFT JOIN item I ON I.id = CSD.itemid
        LEFT JOIN `reference` R ON I.itemunitid = R.id
        
	WHERE
		cbfscheduleid = p_cbfscheduleid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfschedule_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM cbfscheduledetail WHERE cbfscheduleid = p_id;
	DELETE FROM cbfschedule WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfschedule_save`(
    IN p_id INT,
    IN p_schedulename VARCHAR(200),
    IN p_cbfscheduletypeid INT(11),
    IN p_breednameid INT(11),
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_locationids VARCHAR(200),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null; 
    
	 IF EXISTS(
		SELECT id from cbfschedule where breednameid = p_breednameid
			AND ((NULLIF(p_id, 0) IS NULL)
				OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
		
		) THEN BEGIN
	
			SELECT -1 INTO out_id;

		END;
    
    ELSE 
		BEGIN
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO cbfschedule 
						(id, 
						schedulename, 
						cbfscheduletypeid, 
						breednameid, 
						fromdate, 
						todate, 
						locationids, 
						companyid)
					VALUES 
						(p_id, 
						p_schedulename, 
						p_cbfscheduletypeid, 
						p_breednameid, 
						p_fromdate, 
						p_todate, 
						p_locationids, 
						p_companyid);
						
				SET @action = 'INSERT';

			ELSE
			
				UPDATE cbfschedule
					SET schedulename = p_schedulename, 
						cbfscheduletypeid = p_cbfscheduletypeid,
						breednameid = p_breednameid,
						fromdate = p_fromdate,
						todate = p_todate,
						locationids = p_locationids,
						companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
						
						SET @action = 'UPDATE';
			END IF;
			SELECT LAST_INSERT_ID() INTO out_id; 

			-- record log
			CALL spc_commonlog_save(p_companyid, 'cbfschedule', out_id, @action, p_userid);

		END;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfschedule_search`(
    IN p_companyid INT,
    IN p_scheduletypeid INT
)
BEGIN
    
    SELECT
		 CS.id,
         CS.schedulename,
		 CS.cbfscheduletypeid,
         CS.breednameid,
         I.itemname,
         DATE_FORMAT(CS.fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(CS.todate,'%d/%m/%Y') as todate,
         locationids
        
	FROM
		cbfschedule CS
        LEFT JOIN item I ON I.id = CS.breednameid
   	
	WHERE
		CS.companyid = p_companyid AND 
        cbfscheduletypeid = p_scheduletypeid
        
	ORDER BY id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfschedule_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 CS.id,
         CS.schedulename,
		 CS.cbfscheduletypeid,
         CS.breednameid,
         I.itemname as breeditemname,
         DATE_FORMAT(CS.fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(CS.todate,'%d/%m/%Y') as todate,
         locationids
        
	FROM
		cbfschedule CS
        LEFT JOIN item I ON I.id = CS.breednameid
	WHERE
		CS.id = p_id;	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfseeting_search`(
IN p_companyid INT
)
BEGIN
 
    SELECT
        CS.id,
		CS.defaultchickitemid,
		CS.standardweight,
		CS.shedrestperiod,
		CS.defaultchickcost,
		CS.labourcharge,
		CS.overheadcost,
		CS.defaultcbfwarehouseid,
		CS.feeditemgroupids,
		CS.medicineitemgroupids,
		CS.vaccineitemgroupids,
		CS.vitaminitemgroupids,
		CS.breeditemgroupids,
		CS.chicksitemgroupids,
		I1.itemcode as femaleitemcode,
        I1.itemname as defaultchickitemname,
		W.warehousename as defaultcbfwarehousename,
        CS.supplierledgerid,
        CS.supervisorkmledgerid,
        COA.coaname as supplierledgername,
        COA.glcode as supplierglcode,
        CS.taxid,
        T.taxname,
        T.taxpercent,
        CS.tdsid,
        TD.section,
        TD.rate,
        CS.costofgoodsoldledgerid,
        COA1.coaname as costofgoodsoldledgername,
        COA1.glcode as costofgoodsoldglcode,
		CS.WIPledgerid,
        COA2.coaname as WIPledgername,
        COA2.glcode as WIPglcode,
		CS.grpowithoutinvoiceledgerid,
        COA3.coaname as grpowithoutinvoiceledgername,
        COA3.glcode as grpowithoutinvoiceglcode,
		CS.ctrlaccledgerid,
        COA4.coaname as ctrlaccledgername,
        COA4.glcode as ctrlaccglcode,
		CS.freightledgerid,
        COA5.coaname as freightledgername,
        COA5.glcode as freightglcode,
		CS.discountledgerid,
        COA6.coaname as discountledgername,
        COA6.glcode as discountglcode,
        CS.cashledgerid,
        COA7.coaname as cashledgername,
        COA7.glcode as cashglcode,
		COA8.coaname as supervisorkmledgername,
        COA8.glcode as supervisorkmledgerglcode,
        CS.DOCitemid,
        I2.itemcode as DOCitemcode,
        I2.itemname as DOCitemname,
        CS.finishgooditemid,
        I3.itemcode as finishgooditemcode,
        I3.itemname as finishgooditemname
     
    FROM
		cbfsetting CS
            LEFT JOIN item I1 ON CS.defaultchickitemid = I1.id
            LEFT JOIN item I2 ON CS.DOCitemid = I2.id
            LEFT JOIN item I3 ON CS.finishgooditemid = I3.id
            LEFT JOIN warehouse W ON W.id = CS.defaultcbfwarehouseid
            LEFT JOIN chartofaccount COA ON COA.id = CS.supplierledgerid
			LEFT JOIN tax T ON T.id = CS.taxid
            LEFT JOIN account_tds TD ON TD.id = CS.tdsid
            LEFT JOIN chartofaccount COA1 ON COA1.id = CS.costofgoodsoldledgerid
            LEFT JOIN chartofaccount COA2 ON COA2.id = CS.WIPledgerid
            LEFT JOIN chartofaccount COA3 ON COA3.id = CS.grpowithoutinvoiceledgerid
            LEFT JOIN chartofaccount COA4 ON COA4.id = CS.ctrlaccledgerid
            LEFT JOIN chartofaccount COA5 ON COA5.id = CS.freightledgerid
            LEFT JOIN chartofaccount COA6 ON COA6.id = CS.discountledgerid
            LEFT JOIN chartofaccount COA7 ON COA7.id = CS.cashledgerid
            LEFT JOIN chartofaccount COA8 ON COA8.id = CS.supervisorkmledgerid
    
	WHERE
		CS.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfsetting_save`(
    IN p_id INT(11),
	IN p_defaultchickitemid INT(11),
	IN p_standardweight DECIMAL(9,3),
	IN p_shedrestperiod INT(11),
	IN p_defaultchickcost DECIMAL(9,3),
	IN p_labourcharge DECIMAL(9,3),
	IN p_overheadcost DECIMAL(9,3),
	IN p_defaultcbfwarehouseid INT(11),
	IN p_feeditemgroupids VARCHAR(200),
	IN p_medicineitemgroupids VARCHAR(200),
	IN p_vaccineitemgroupids VARCHAR(200),
	IN p_vitaminitemgroupids VARCHAR(200),
	IN p_breeditemgroupids VARCHAR(200),
	IN p_chicksitemgroupids VARCHAR(200),
    IN p_supplierledgerid INT(11),
    IN p_taxid INT,
    IN p_tdsid INT,
    IN p_costofgoodsoldledgerid INT(11),
    IN p_WIPledgerid INT(11),
    IN p_grpowithoutinvoiceledgerid INT(11),
    IN p_ctrlaccledgerid INT(11),
    IN p_freightledgerid INT(11),
    IN p_discountledgerid INT(11),
    IN p_cashledgerid INT(11),
    IN p_supervisorkmledgerid INT(11),
    IN p_DOCitemid INT(11),
    IN p_finishgooditemid INT(11),
	IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbfsetting 
				(
                defaultchickitemid,
				standardweight,
				shedrestperiod,
				defaultchickcost,
				labourcharge,
				overheadcost,
				defaultcbfwarehouseid,
				feeditemgroupids,
				medicineitemgroupids,
				vaccineitemgroupids,
				vitaminitemgroupids,
				breeditemgroupids,
				chicksitemgroupids,
                supplierledgerid,
                taxid,
                tdsid,
                costofgoodsoldledgerid,
				WIPledgerid,
				grpowithoutinvoiceledgerid,
				ctrlaccledgerid,
				freightledgerid,
				discountledgerid,
                cashledgerid,
                supervisorkmledgerid,
                companyid,
                DOCitemid,
                finishgooditemid
              )
			VALUES 
				(
                    p_defaultchickitemid,
					p_standardweight,
					p_shedrestperiod,
					p_defaultchickcost,
					p_labourcharge,
					p_overheadcost,
					p_defaultcbfwarehouseid,
					p_feeditemgroupids,
					p_medicineitemgroupids,
					p_vaccineitemgroupids,
					p_vitaminitemgroupids,
					p_breeditemgroupids,
					p_chicksitemgroupids,
                    p_supplierledgerid,
                    p_taxid,
					p_tdsid,
                    p_costofgoodsoldledgerid,
					p_WIPledgerid,
					p_grpowithoutinvoiceledgerid,
					p_ctrlaccledgerid,
					p_freightledgerid,
					p_discountledgerid,
                    p_cashledgerid,
                    p_supervisorkmledgerid,
					p_companyid,
                    p_DOCitemid,
                    p_finishgooditemid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbfsetting
				SET defaultchickitemid = p_defaultchickitemid,
					standardweight = p_standardweight,
					shedrestperiod = p_shedrestperiod,
					defaultchickcost = p_defaultchickcost,
					labourcharge = p_labourcharge,
					overheadcost = p_overheadcost,
					defaultcbfwarehouseid = p_defaultcbfwarehouseid,
					feeditemgroupids = p_feeditemgroupids,
					medicineitemgroupids = p_medicineitemgroupids,
					vaccineitemgroupids = p_vaccineitemgroupids,
					vitaminitemgroupids = p_vitaminitemgroupids,
					breeditemgroupids = p_breeditemgroupids,
					chicksitemgroupids = p_chicksitemgroupids,
                    supplierledgerid = p_supplierledgerid,
                    taxid = p_taxid,
					tdsid = p_tdsid,
                    costofgoodsoldledgerid = p_costofgoodsoldledgerid,
					WIPledgerid = p_WIPledgerid,
					grpowithoutinvoiceledgerid = p_grpowithoutinvoiceledgerid,
					ctrlaccledgerid = p_ctrlaccledgerid,
					freightledgerid = p_freightledgerid,
					discountledgerid = p_discountledgerid,
                    cashledgerid = p_cashledgerid,
                    supervisorkmledgerid = p_supervisorkmledgerid,
					companyid = p_companyid,
                    DOCitemid = p_DOCitemid,
                    finishgooditemid = p_finishgooditemid,
				    id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbfsetting', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfshedreadydetail_delete`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	DELETE FROM cbf_shedreadydetail WHERE id = p_id AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfshedreadydetail_save`(
	IN p_id INT,
	IN p_cbfshedreadyid INT,
	IN p_parametertypeid INT,
	IN p_shedparameterid INT,
	IN p_isapplied TINYINT,
	IN p_remark VARCHAR(200),
	IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_shedreadydetail
				(cbfshedreadyid, parametertypeid, shedparameterid, isapplied,
					remark, companyid)
			VALUES 
				(p_cbfshedreadyid, p_parametertypeid, p_shedparameterid, p_isapplied,
					p_remark, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE cbf_shedreadydetail
			SET 
				cbfshedreadyid = p_cbfshedreadyid, 
                parametertypeid = p_parametertypeid, 
                shedparameterid = p_shedparameterid, 
                isapplied = p_isapplied,
				remark = p_remark, 
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_shedreadydetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfshedreadydetail_search`(
	IN p_cbfshedreadyid INT(11),
    IN p_companyid INT
)
BEGIN

	SELECT SRD.id,
		   SRD.cbfshedreadyid,
           SRD.parametertypeid,
           SRD.shedparameterid as cbfparameterid,
           SRD.isapplied,
		   SRD.remark,
           FP.ismandatory,
           (FE.total_area/FE.density) as shedcapacity
    
    FROM cbf_shedreadydetail SRD
    LEFT JOIN cbffarmparameter FP ON FP.id = SRD.shedparameterid
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = SRD.farmerenquiryid
    
    WHERE cbfshedreadyid = p_cbfshedreadyid
    AND companyid = p_companyid;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfshedreadydetail_select`(
	IN p_cbfshedreadyid INT(11),
    IN p_companyid INT
)
BEGIN

	SELECT SRD.id,
		   SRD.cbfshedreadyid,
           SRD.parametertypeid,
           SRD.shedparameterid as cbfparameterid,
           SRD.isapplied,
		   SRD.remark,
           FP.ismandatory,
           FP.parametername,
           CFE.farmer_name,
           CFE.farm_name
           
    
    FROM cbf_shedreadydetail SRD
    LEFT JOIN cbf_shedready CSR ON CSR.id = SRD.cbfshedreadyid
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CFESDD ON CFESDD.id = CSR.shedid
	LEFT JOIN cbf_farmerenquiry CFE ON CFE.id = CFESDD.farmerenquiryid
    
    LEFT JOIN cbffarmparameter FP ON FP.id = SRD.shedparameterid
    
    WHERE SRD.cbfshedreadyid = p_cbfshedreadyid
    AND SRD.companyid = p_companyid;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfshedready_branchwise`(
	 IN p_branchid INT,
     IN p_shedreadystatus INT,
     IN p_companyid INT
)
BEGIN
	SET @@sql_mode = ' ';
	SELECT SR.id as shedreadyid,
		   FES.id as shedid,
           FES.shed_name,
           (FES.total_sq_ft/FE.density) as capacity,
           FE.farmer_name,
           FE.farm_name
           
	FROM cbf_shedready SR
    LEFT JOIN cbf_farmerenquiry FE ON FE.branch_id = p_branchid
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail FES ON FES.farmerenquiryid = FE.id
    LEFT JOIN cbf_procurementscheduledetail CPS ON CPS.cbfshedid = FES.id
    
    WHERE SR.companyid = p_companyid
    AND SR.statusid = p_shedreadystatus
    AND FES.statusid = 2082 -- shed ready
    AND CPS.cbfshedid IS NULL
    
    GROUP BY FES.id; 

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfshedready_delete`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN
	
    DELETE FROM cbf_shedreadydetail WHERE cbfshedreadyid = p_id AND companyid = p_companyid;
	DELETE FROM cbf_shedready WHERE id = p_id AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfshedready_save`(
	IN p_id int,
	IN p_shedid int,
	IN p_restperiod int,
	IN p_createdby int,
	IN p_createddate date,
	IN p_finalcleaningdate date,
	IN p_statusid int,
	IN p_companyid int,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_shedready
				(shedid, restperiod, createdby, createddate, finalcleaningdate, statusid, companyid)
			VALUES 
				(p_shedid, p_restperiod, p_createdby, p_createddate, p_finalcleaningdate, p_statusid, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE cbf_shedready
			SET 
				shedid = p_shedid,
				restperiod = p_restperiod,
				createdby = p_createdby,
				createddate = p_createddate,
				finalcleaningdate = p_finalcleaningdate,
				statusid = p_statusid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF(p_statusid = 2041) THEN
		
        -- Update shed status to 2082 = 'Shed Ready'
		UPDATE cbf_farmerenquiry_sheddimensiondetail SET statusid = 2082 WHERE id = p_shedid;
        
    END IF;
    
  
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_shedready', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfshedready_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT SR.id, 
		   SR.shedid, 
           FES.shed_name,
           B.branchname,
           B.branchcode, 
           restperiod, 
           createdby, 
           FE.farmer_name,
           DATE_FORMAT(SR.createddate,'%d/%m/%Y') as createddate,
           DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
           SR.statusid,
           REF.refname as shedstatus
	
    FROM cbf_shedready SR
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail FES ON FES.id = SR.shedid
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = FES.farmerenquiryid
    LEFT JOIN commonbranch B ON B.id = FE.branch_id
    LEFT JOIN `reference` REF ON REF.id = SR.id
    
    WHERE SR.companyid = p_companyid
    
    ORDER BY SR.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfshedready_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT SR.id, 
		   SR.shedid, 
           FES.shed_name,
           B.branchname,
           B.branchcode,
           restperiod, 
           createdby, 
           DATE_FORMAT(SR.createddate,'%d/%m/%Y') as createddate,
           DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
           SR.statusid,
           REF.refname as shedreadystatus,
           'Approved' as farmstatus,
           ROUND((FES.total_sq_ft/FE.density),3) as shedcapacity,
           FE.chick_capacity,
           FE.farmer_name,
           FE.farm_name
	
    FROM cbf_shedready SR
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail FES ON FES.id = SR.shedid
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = FES.farmerenquiryid
    LEFT JOIN commonbranch B ON B.id = FE.branch_id
    LEFT JOIN `reference` REF ON REF.id = SR.statusid
    
    WHERE SR.id = p_id AND SR.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfshedtype_delete`( 
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM cbfshedtype WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'cbfshedtype', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfshedtype_save`(
 IN p_id INT(11),
 IN p_shedtype VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO cbfshedtype
              (shedtype, companyid)
       VALUES
            (p_shedtype, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE cbfshedtype 
   
	SET shedtype = p_shedtype,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbfshedtype', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfshedtype_search`( 
 IN p_companyid INT(11)
)
BEGIN

	SELECT id, shedtype, companyid
           
	FROM cbfshedtype
    
    WHERE companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfshedtype_select`(
  IN p_id INT(11)
)
BEGIN

	SELECT id, shedtype, companyid
           
	FROM cbfshedtype
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfshed_byfarmname`(
IN p_farmid varchar(200),
IN p_companyid INT(11)

)
BEGIN
SET @@sql_mode = ' ';

select 
farmerenquiryid,
id as shedid,
shed_name

from cbf_farmerenquiry_sheddimensiondetail

where FIND_IN_SET( farmerenquiryid, p_farmid)
and companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfstandardchartdetail_delete`(
   IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM cbfstandardchartdetail WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'cbfstandardchartdetail', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfstandardchartdetail_feedconsumed_search`(
 IN p_age INT(11),
 IN p_itemid INT(11),
 IN p_breednameid INT(11),
 IN p_companyid INT(11)
 )
BEGIN 

	SELECT CSC.id,
           CSCD.feedconsumption as standardconsumption
           
	FROM cbfstandardchart CSC
    
    LEFT JOIN cbfstandardchartdetail CSCD ON CSCD.cbfstandardchartid =  CSC.id
  
    WHERE CSCD.age = p_age
    AND CSCD.itemid = p_itemid AND
    CSC.breednameid = p_breednameid AND
    CSC.companyid = p_companyid ;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfstandardchartdetail_save`(
   IN p_id INT(11),
   IN p_cbfstandardchartid INT(11),
   IN p_itemid INT(11),
   IN p_age INT(11),
   IN p_mortality INT(11),
   IN p_feedconsumption DECIMAL(9,3),
   IN p_cumulativefeed DECIMAl(9,3),
   IN p_bodyweight DECIMAL(9,3),
   In p_fcr DECIMAL(9,3),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbfstandardchartdetail 
				(cbfstandardchartid, itemid, age, mortality, feedconsumption, cumulativefeed, bodyweight, fcr, companyid)
			VALUES 
				(p_cbfstandardchartid, p_itemid, p_age, p_mortality, p_feedconsumption, p_cumulativefeed, p_bodyweight, p_fcr, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbfstandardchartdetail
        
				SET cbfstandardchartid = p_cbfstandardchartid,
					itemid = p_itemid,
                    age = p_age,
                    mortality = p_mortality,
                    feedconsumption = p_feedconsumption,
                    cumulativefeed = p_cumulativefeed,
                    bodyweight = p_bodyweight,
                    fcr = p_fcr,
					companyid = p_companyid,
				     id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbfstandardchartdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfstandardchartdetail_search`(
  IN p_cbfstandardchartid INT
)
BEGIN

	SELECT 
		 cscd.id,
         cscd.itemid, 
         cscd.age, 
         cscd.mortality,
         cscd.feedconsumption, 
         cscd.cumulativefeed,
         cscd.bodyweight,
         cscd.fcr, 
         cscd.companyid,
         I.itemname,
         I.itemcode
         
	FROM
		cbfstandardchartdetail cscd
         LEFT JOIN item I ON I.id = cscd.itemid
        
	WHERE
	 cscd.cbfstandardchartid = p_cbfstandardchartid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfstandardchartdetail_select`(
  IN p_id INT
)
BEGIN

	SELECT 
		 cscd.id,
         cscd.cbfstandardchartid,
         cscd.itemid, 
         cscd.age, 
         cscd.mortality,
         cscd.feedconsumption, 
         cscd.cumulativefeed,
         cscd.bodyweight,
         cscd.fcr, 
         cscd.companyid
         
	FROM
		cbfstandardchartdetail cscd 
        
	WHERE
	 (
			NULLIF(p_id, '') IS NOT NULL AND cscd.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfstandardchart_delete`(
   IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM cbfstandardchart WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'cbfstandardchart', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfstandardchart_save`(
   IN p_id INT(11),
   IN p_chartname VArCHAR(200),
   IN p_breednameid INT(11),
   IN p_locationids VARCHAR(200),
   IN p_fromdate DATE,
   IN p_todate DATE,
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbfstandardchart 
				(chartname, breednameid, locationids, fromdate, todate, companyid)
			VALUES 
				(p_chartname, p_breednameid, p_locationids, p_fromdate, p_todate, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbfstandardchart
				SET chartname = p_chartname,
					breednameid = p_breednameid,
                    locationids = p_locationids,
                    fromdate = p_fromdate,
                    todate = p_todate,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbfstandardchart', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfstandardchart_search`(
IN p_companyid INt(11)
)
BEGIN
 SELECT
       CSC.id ,
	   CSC.chartname, 
	   CSC.breednameid, 
	   CSC.locationids,
       I.itemname as breeditemname,
	   DATE_FORMAT(CSC.fromdate,'%d/%m/%Y') as fromdate,
	   DATE_FORMAT(CSC.todate,'%d/%m/%Y') as todate
   
  FROM
  
  cbfstandardchart CSC
  
   LEFT JOIN item I ON I.id = CSC.breednameid
  
  WHERE
  CSC.companyid = p_companyid
  order by CSC.id  desc;
  
 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfstandardchart_select`(
IN p_id INT(11)
)
BEGIN
 SELECT
       CSC.id ,
	   CSC.chartname, 
	   CSC.breednameid, 
	   CSC.locationids,
       I.itemname as breeditemname,
	   DATE_FORMAT(CSC.fromdate,'%d/%m/%Y') as fromdate,
	   DATE_FORMAT(CSC.todate,'%d/%m/%Y') as todate
   
  FROM
  
  cbfstandardchart CSC
  
   LEFT JOIN item I ON I.id = CSC.breednameid
  
  WHERE
    (
			NULLIF(p_id, '') IS NOT NULL AND CSC.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

  
 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfstockoflivebird_report`(
IN p_curdate date,
IN p_branch_id VARCHAR(200),
IN p_line_id VARCHAR(200),
IN p_companyid INT(11)
)
BEGIN
  SET @@sql_mode = ' ';
  
  SELECT *, ROUND(IFNULL(((purvalue+administrationcost+feedconcost+medconcost+vaccconcost+vitconcost)/(batch_place_qty-(mortality+culls))),0),2) as cost,
               (batch_place_qty-(mortality+culls))as bird,
             ROUND(((IFNULL(((purvalue+administrationcost+feedconcost+medconcost+vaccconcost+vitconcost)/(batch_place_qty-(mortality+culls))),0))*liveqty),2) as amount,
             TRUNCATE(((DATEDIFF(p_curdate, batch_place_date)/7)+1),0) As ageinweek

FROM( 
SELECT 	
        IFNULL(fnc_calculate_cummalefemalecullscbf(CBB.cbfbatchid,CBB.cbfshedid,p_curdate,p_companyid),0) as culls,
	    IFNULL(fnc_calculate_cummamortalitycbf(CBB.cbfbatchid,CBB.cbfshedid,p_curdate,p_companyid),0) as mortality,
	    DATE_FORMAT( CBD.batch_place_date,'%d/%m/%Y') as placement_date,
        IFNULL(CBD.costperbird,0) as costperbird,
        (IFNULL(CBD.costperbird,0)*CBD.batch_place_qty) as purvalue,
        CBD.batch_number,
        (IFNULL(CS.administrationcost,0)*CBD.batch_place_qty) as administrationcost,
        CBD.live_batch_qty as liveqty,
        max(CDW.liftingdate)as lastliftimgdate,
		CBD.batch_place_qty,
		CBD.id as batch_id,
        CFE.id as farmid,
        CFE.farmer_name,
		CFE.branch_id,
        CL.id as lineid,
        CBD.live_batch_qty,
        CB.branchname,
        CBD.batch_place_date,
		IFNULL(fnc_consumption_wise_cost_cbf(CBD.id,p_curdate,861,p_companyid),0)as feedconcost,
		IFNULL(fnc_consumption_wise_cost_cbf(CBD.id,p_curdate,862,p_companyid),0)as medconcost,
		IFNULL(fnc_consumption_wise_cost_cbf(CBD.id,p_curdate,863,p_companyid),0)as vaccconcost,
		IFNULL(fnc_consumption_wise_cost_cbf(CBD.id,p_curdate,864,p_companyid),0)as vitconcost,
		IFNULL(fnc_getgoodsissue(CBD.id,723,p_curdate),0)as othercost,
        IFNULL(fnc_cbf_deliveredcost_uptogivendate_cbf(p_curdate,CBD.id),0) as totalbirdsoldcost
        
     FROM cbf_farmerenquiry CFE
      LEFT JOIN commonbranch CB  ON  CB.id = CFE.branch_id
      LEFT JOIN cbf_line CL  ON  CL.id = CFE.line_id
      LEFT JOIN cbf_batch_details CBD  ON  CBD.farmer_enquiry_id = CFE.id
      LEFT JOIN cbf_batchbalance CBB ON CBD.id = CBB.cbfbatchid
      LEFT JOIN cbf_delivery_weights_detail CDWD ON CDWD.cbf_batchid = CBD.id
      LEFT JOIN cbf_delivery_weights CDW ON   CDW.id = CDWD.cbf_delivery_weightsid
	  LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = CBD.id
	  LEFT JOIN coststructure CS ON CS.id = CBD.scheme_id
      LEFT JOIN coststructuredetail CSD ON CSD.coststructureid = CS.id
   
   WHERE 
        CBD.statusid != 3024 AND
		CBD.companyid = p_companyid AND
		FIND_IN_SET( CFE.branch_id,p_branch_id) AND
		FIND_IN_SET(CFE.line_id,p_line_id)
        group by CBD.id) as temp; 
 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfvillage_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_villages WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfvillage_save`(
   IN p_id INT(11),
   IN p_branchid INT(11),
   IN p_villagename VARCHAR(100),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF EXISTS(
            SELECT villagename from cbf_villages where LOWER(villagename) = LOWER(p_villagename)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    
		BEGIN
		
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO cbf_villages 
						(id, branchid, villagename, companyid)
					VALUES 
						(p_id, p_branchid, p_villagename, p_companyid);
			  SET @action = 'INSERT';
			ELSE
			
				UPDATE cbf_villages
						SET branchid = p_branchid,
							villagename = p_villagename,
							companyid = p_companyid,
							id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
				   SET @action = 'UPDATE';     
						
						
			END IF;
			
			SELECT LAST_INSERT_ID() INTO out_id; 
			
			-- record log
			CALL spc_commonlog_save(p_companyid, 'cbf_villages', out_id, @action, p_userid);

		END;
     
   END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfvillage_search`(
	IN p_companyid INT(11),
    IN p_branchid INT(11)
)
BEGIN
	
    SELECT V.id,	
		   V.branchid,
           B.branchname,
           V.villagename,
           B.branchcode
           
    FROM cbf_villages V
    LEFT JOIN commonbranch B ON B.id = V.branchid
    
    WHERE 
    ((p_branchid is null) or (V.branchid=p_branchid))
    AND V.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfvillage_select`(
    IN p_id INT(11),
    IN p_branchid INT(11)
)
BEGIN

	SELECT V.id,
		   V.branchid,
           B.branchname,
           V.villagename,
           B.branchcode
	
    FROM cbf_villages V
    LEFT JOIN commonbranch B ON B.id = V.branchid
    
    WHERE V.id = p_id
    AND V.branchid = p_branchid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbfweekwisebodyweightfcr_report`(
IN p_curdate DATE,
IN p_branchid  varchar(15000),
In p_lineid varchar(15000),
In p_farmerid varchar(15000),
In p_farmid varchar(15000),
IN p_batch_id varchar(15000),
IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';
SET @opecon = 0;

select *, 
		 ROUND(IFNULL(((fwconsumption*1000)/((fweekbw)*fwliveqty)),0),2) as fweekfcr,
		 ROUND(IFNULL(((swconsumption*1000)/((sweekbw)*swliveqty)),0),2) as sweekfcr,
         ROUND(IFNULL(((twconsumption*1000)/((tweekbw)*twliveqty)),0),2) as tweekfcr,
         ROUND(IFNULL(((fourthconsumption*1000)/((forthweekbw)*fourthwliveqty)),0),2) as fourthweekfcr,
         ROUND(IFNULL(((fifthwconsumption*1000)/((fifththweekbw)*fifthwliveqty)),0),2) as fifthweekfcr,
         ROUND(IFNULL(((sixconsumption*1000)/((sixweekbw)*sixwliveqty)),0),2) as sixweekfcr,
         ROUND(IFNULL(((sevenconsumption*1000)/((sevenweekbw)*sevenwliveqty)),0),2) as sevenweekfcr,
         ROUND(IFNULL(((eightconsumption*1000)/((eightweekbw)*eightwliveqty)),0),2) as eightweekfcr
       
from(
select
CBD.id as batchid,
CDC.itemid as conitem,
CFE.branch_id,
CBD.batch_place_qty as chick_qty,
CFE.line_id,
CFE.id as farmerid,
CBD.batch_number,
CL.linename,
CB.branchname,
CFE.farmer_name,
CFE.farm_name,
R.refname as itemunitname,
I.itemunitid,
CBD.batch_place_qty as placeqty,
DATE_FORMAT( CBD.batch_place_date,'%d/%m/%Y') as placement_date,
DATE_FORMAT( CDT.transactiondate,'%d/%m/%Y') as transactiondate,

/* Calculate all week last dates */
DATE_ADD( CBD.batch_place_date, INTERVAL 6 DAY ) AS fweeklastdate,
DATE_ADD( CBD.batch_place_date, INTERVAL 13 DAY ) AS sweeklastdate,
DATE_ADD( CBD.batch_place_date, INTERVAL 20 DAY ) AS tweeklastdate,
DATE_ADD( CBD.batch_place_date, INTERVAL 27 DAY ) AS fourthweeklastdate,
DATE_ADD( CBD.batch_place_date, INTERVAL 34 DAY ) AS fifthweeklastdate,
DATE_ADD( CBD.batch_place_date, INTERVAL 41 DAY ) AS sixweeklastdate,
DATE_ADD( CBD.batch_place_date, INTERVAL 48 DAY ) AS sevenweeklastdate,
DATE_ADD( CBD.batch_place_date, INTERVAL 55 DAY ) AS eightweeklastdate,

/* Calculate all week first dates */
DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 13 DAY ),INTERVAL 6 DAY )SWfirstdate,
DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 20 DAY ),INTERVAL 6 DAY )tWfirstdate,
DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 27 DAY ),INTERVAL 6 DAY )fWfirstdate,
DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 34 DAY ),INTERVAL 6 DAY )fifthWfirstdate,
DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 41 DAY ),INTERVAL 6 DAY )sixWfirstdate,
DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 48 DAY ),INTERVAL 6 DAY )sevenWfirstdate,
DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 55 DAY ),INTERVAL 6 DAY )eightWfirstdate,

/* Calculate all week Livequantity upto week last dates */
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 6 DAY )),CBB.cbfbatchid,CBD.breed_id)as fwliveqty,
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 13 DAY )),CBB.cbfbatchid,CBD.breed_id)as swliveqty,
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 20 DAY )),CBB.cbfbatchid,CBD.breed_id)as twliveqty,
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 27 DAY )),CBB.cbfbatchid,CBD.breed_id)as fourthwliveqty,
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 34 DAY )),CBB.cbfbatchid,CBD.breed_id)as fifthwliveqty,
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 41 DAY )),CBB.cbfbatchid,CBD.breed_id)as sixwliveqty,
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 48 DAY )),CBB.cbfbatchid,CBD.breed_id)as sevenwliveqty,
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 55 DAY )),CBB.cbfbatchid,CBD.breed_id)as eightwliveqty,

/* Calculate all week avgweight betwwen weekfirstdate to weeklastdate dates */
/*(fuc_calculate_weightweekwise(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 6 DAY )),CBB.cbfbatchid,CBD.breed_id)/
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 6 DAY )),CBB.cbfbatchid,CBD.breed_id)) as fweekbw,
(fuc_calculate_weightweekwise((DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 13 DAY ),INTERVAL 6 DAY )),(DATE_ADD( CBD.batch_place_date, INTERVAL 13 DAY )),CBB.cbfbatchid,CBD.breed_id)/
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 13 DAY )),CBB.cbfbatchid,CBD.breed_id)) as sweekbw,
(fuc_calculate_weightweekwise((DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 20 DAY ),INTERVAL 6 DAY )),(DATE_ADD( CBD.batch_place_date, INTERVAL 20 DAY )),CBB.cbfbatchid,CBD.breed_id)/
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 20 DAY )),CBB.cbfbatchid,CBD.breed_id)) as tweekbw,
(fuc_calculate_weightweekwise((DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 27 DAY ),INTERVAL 6 DAY )),(DATE_ADD( CBD.batch_place_date, INTERVAL 27 DAY )),CBB.cbfbatchid,CBD.breed_id)/
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 27 DAY )),CBB.cbfbatchid,CBD.breed_id)) as forthweekbw,
(fuc_calculate_weightweekwise((DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 34 DAY ),INTERVAL 6 DAY )),(DATE_ADD( CBD.batch_place_date, INTERVAL 34 DAY )),CBB.cbfbatchid,CBD.breed_id)/
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 34 DAY )),CBB.cbfbatchid,CBD.breed_id)) as fifththweekbw,
(fuc_calculate_weightweekwise((DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 41 DAY ),INTERVAL 6 DAY )),(DATE_ADD( CBD.batch_place_date, INTERVAL 41 DAY )),CBB.cbfbatchid,CBD.breed_id)/
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 41 DAY )),CBB.cbfbatchid,CBD.breed_id)) as sixweekbw,
(fuc_calculate_weightweekwise((DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 48 DAY ),INTERVAL 6 DAY )),(DATE_ADD( CBD.batch_place_date, INTERVAL 46 DAY )),CBB.cbfbatchid,CBD.breed_id)/
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 48 DAY )),CBB.cbfbatchid,CBD.breed_id)) as sevenweekbw,
(fuc_calculate_weightweekwise((DATE_SUB(DATE_ADD( CBD.batch_place_date, INTERVAL 55 DAY ),INTERVAL 6 DAY )),(DATE_ADD( CBD.batch_place_date, INTERVAL 27 DAY )),CBB.cbfbatchid,CBD.breed_id)/
fun_calculate_CBFdailyliveqty(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 55 DAY )),CBB.cbfbatchid,CBD.breed_id)) as eightweekbw,*/

fuc_calculate_avgweightfrodayweekwise((DATE_ADD( CBD.batch_place_date, INTERVAL 6 DAY )),CBB.cbfbatchid) as fweekbw,
fuc_calculate_avgweightfrodayweekwise((DATE_ADD( CBD.batch_place_date, INTERVAL 13 DAY )),CBB.cbfbatchid) as sweekbw,
fuc_calculate_avgweightfrodayweekwise((DATE_ADD( CBD.batch_place_date, INTERVAL 20 DAY )),CBB.cbfbatchid) as tweekbw,
fuc_calculate_avgweightfrodayweekwise((DATE_ADD( CBD.batch_place_date, INTERVAL 27 DAY )),CBB.cbfbatchid) as forthweekbw,
fuc_calculate_avgweightfrodayweekwise((DATE_ADD( CBD.batch_place_date, INTERVAL 34 DAY )),CBB.cbfbatchid)as fifththweekbw,
fuc_calculate_avgweightfrodayweekwise((DATE_ADD( CBD.batch_place_date, INTERVAL 41 DAY )),CBB.cbfbatchid) as sixweekbw,
fuc_calculate_avgweightfrodayweekwise((DATE_ADD( CBD.batch_place_date, INTERVAL 48 DAY )),CBB.cbfbatchid) as sevenweekbw,
fuc_calculate_avgweightfrodayweekwise((DATE_ADD( CBD.batch_place_date, INTERVAL 55 DAY )),CBB.cbfbatchid) as eightweekbw,

/* Calculate all week consumption betwwen weekfirstdate to weeklastdate dates */
fuc_calculate_feedconweekwise(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 6 DAY )),CBB.cbfbatchid,CDC.itemid,I.itemunitid) as fwconsumption,
fuc_calculate_feedconweekwise(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 13 DAY )),CBB.cbfbatchid,CDC.itemid,I.itemunitid) as swconsumption,
fuc_calculate_feedconweekwise(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 20 DAY )),CBB.cbfbatchid,CDC.itemid,I.itemunitid) as twconsumption,
fuc_calculate_feedconweekwise(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 27 DAY )),CBB.cbfbatchid,CDC.itemid,I.itemunitid) as fourthconsumption,
fuc_calculate_feedconweekwise(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 34 DAY )),CBB.cbfbatchid,CDC.itemid,I.itemunitid) as fifthwconsumption,
fuc_calculate_feedconweekwise(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 41 DAY )),CBB.cbfbatchid,CDC.itemid,I.itemunitid) as sixconsumption,
fuc_calculate_feedconweekwise(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 48 DAY )),CBB.cbfbatchid,CDC.itemid,I.itemunitid) as sevenconsumption,
fuc_calculate_feedconweekwise(CBD.batch_place_date,(DATE_ADD( CBD.batch_place_date, INTERVAL 55 DAY )),CBB.cbfbatchid,CDC.itemid,I.itemunitid) as eightconsumption

FROM cbf_batchbalance CBB
	 LEFT JOIN cbf_batch_details CBD ON CBD.id =  CBB.cbfbatchid
	 LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid =   CBB.cbfbatchid
	 LEFT JOIN cbf_dailymortality CDM ON CDT.id = CDM.cbfdailytransactionid
     LEFT JOIN cbf_dailyconsumption CDC ON CDT.id = CDC.cbfdailytransactionid 
     LEFT JOIN item I ON I.id = CDC.itemid
	 LEFT JOIN `reference` R ON R.id = I.itemunitid
	 LEFT JOIN cbf_farmerenquiry CFE  ON CFE.id = CBD.farmer_enquiry_id
	 LEFT JOIN commonbranch CB  ON  CB.id = CFE.branch_id
	 LEFT JOIN cbf_line CL  ON  CL.id = CFE.line_id
	 LEFT JOIN `reference` REF ON CBD.statusid = REF.id
    
    WHERE CDT.companyid = p_companyid AND
		FIND_IN_SET( CBB.cbfbatchid,p_batch_id)
         Group By CBB.cbfbatchid) as temp;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cbf_birdcost_save`(
 IN p_id INT(11),
 IN p_itemid INT(11),
 IN p_issueqty DECIMAL(20,3),
 IN p_transactiondate DATE,
 IN p_unitcost DECIMAL(9,3),
 IN p_itemvalue DECIMAL(20,3),
 IN p_itembatch VARCHAR(200),
 IN p_cbfbatchid INT(11),
 IN p_shedid INT(11),
 IN p_transactionid INT(11),
 IN p_companyid INT(11))
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO cbf_birdcost(itemid, issueqty, transactiondate, unitcost, itemvalue,itembatch,cbfbatchid,shedid,transactionid,companyid)
        VALUES (p_itemid, p_issueqty, p_transactiondate, p_unitcost, p_itemvalue,p_itembatch,p_cbfbatchid,p_shedid,p_transactionid,p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE cbf_birdcost
        SET itemid = p_itemid,
			issueqty = p_issueqty,
            transactiondate = p_transactiondate,
            unitcost = p_unitcost,
            itemvalue = p_itemvalue,
            itembatch = p_itembatch,
            cbfbatchid = p_cbfbatchid,
            shedid = p_shedid,
            transactionid = p_transactionid,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
  
   END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chartofaccoint_getallledgers`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,coaname as ledgername, glcode 
    FROM chartofaccount 
    WHERE companyid = p_companyid AND coatypeid = 1003 AND is_deleted = 0 AND isactive = 1;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chartofaccount_cashledgers`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT COA.id,
		   coaname as ledgername,
           CC.category,
           glcode,
           COA.iscostcenterapplicable
           
	FROM chartofaccount COA
    LEFT JOIN coacategory CC ON CC.id = COA.categoryid
    
    WHERE COA.coatypeid = 1003
    AND iscashacc = 1
    -- AND categoryid = 1
    AND COA.companyid = p_companyid
	AND is_deleted = 0
     AND isactive = 1;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chartofaccount_categoriwiseledgers`(
	IN p_categoryid INT(110),
    IN p_companyid INT(11)
)
BEGIN

	SELECT COA.id,
		   coaname,
           coaname as ledgername,
           glcode,
           CC.category,
           COA.groupid
           
	FROM chartofaccount COA
    LEFT JOIN coacategory CC ON CC.id = COA.categoryid
    
    WHERE COA.categoryid = p_categoryid
    AND COA.companyid = p_companyid
    AND COA.coatypeid = 1003
	AND COA.is_deleted = 0
	AND COA.isactive = 1 -- get only ledgers
    
    order by glcode;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chartofaccount_delete`(
	IN p_id INT(11)
)
BEGIN

	-- DELETE FROM chartofaccount WHERE id = p_id;
    IF((SELECT isparent FROM chartofaccount WHERE id = p_id) = 1) THEN
		UPDATE chartofaccount SET is_deleted = 1 WHERE groupid = p_id;
	END IF;
    UPDATE chartofaccount SET is_deleted = 1 WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chartofaccount_getgroups`(
	IN p_categoryid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT COA.id,
		   COA.categoryid,
           COA.coaname,
           COA.glcode,
           COA.coatypeid,
           COA.isparent,
           COA.groupid,
           COA.iscontrolacc,
           COA.isblockmanualposting,
           COA.iscashacc,
           COA.isproject,
           COA.projectid,
           CC.category
    
    FROM chartofaccount COA
    LEFT JOIN coacategory CC ON CC.id = COA.categoryid
    
    WHERE COA.categoryid = p_categoryid
    AND COA.companyid = p_companyid
     AND COA.coatypeid != 1003
      AND COA.is_deleted = 0;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chartofaccount_ledgerswithnocontrolaccount`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT COA.id,
		   coaname as ledgername,
           glcode,
           CC.category,
           iscostcenterapplicable,
           COA.categoryid
           
	FROM chartofaccount COA
    LEFT JOIN coacategory CC ON CC.id = COA.categoryid
    
    WHERE coatypeid = 1003
    AND iscontrolacc = 0
    AND COA.companyid = p_companyid
	AND is_deleted = 0
     AND isactive = 1;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chartofaccount_save`(
	IN p_id INT(11),
    IN p_categoryid INT(11),
    IN p_coaname VARCHAR(150),
    IN p_glcode VARCHAR(100),
    IN p_coatypeid INT(11),
    IN p_isparent TINYINT(4),
    IN p_groupid INT(11),
    IN p_iscontrolacc TINYINT(4),
    IN p_isblockmanualposting TINYINT(4),
    IN p_iscashacc TINYINT(4),
    IN p_isproject TINYINT(4),
    IN p_projectid INT(11),
    IN p_isactive TINYINT(4),
    IN p_iscostcenterapplicable TINYINT(4),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO chartofaccount 
				(id, categoryid, coaname, glcode, coatypeid, isparent, groupid, iscontrolacc,
                 isblockmanualposting, iscashacc, isproject, projectid, is_deleted, isactive, iscostcenterapplicable, companyid)
			VALUES 
				(p_id, p_categoryid, p_coaname, p_glcode, p_coatypeid, p_isparent, p_groupid, p_iscontrolacc,
                 p_isblockmanualposting, p_iscashacc, p_isproject, p_projectid, 0, p_isactive, p_iscostcenterapplicable, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE chartofaccount
				SET categoryid = p_categoryid,
					coaname = p_coaname,
                    glcode = p_glcode,
                    coatypeid = p_coatypeid,
                    isparent = p_isparent,
                    groupid = p_groupid,
                    iscontrolacc = p_iscontrolacc,
                    isblockmanualposting = p_isblockmanualposting,
                    isproject = p_isproject,
                    iscashacc = p_iscashacc,
                    projectid = p_projectid,
					isactive = p_isactive,
                    iscostcenterapplicable = p_iscostcenterapplicable,
                    is_deleted = 0,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'chartofaccount', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chartofaccount_search`(
	IN p_companyid INT(11),
    IN p_categoryid INT(11)
)
BEGIN

SELECT COA.*, CC.category FROM chartofaccount COA
LEFT JOIN coacategory CC ON CC.id = COA.categoryid
WHERE COA.companyid = p_companyid
AND COA.categoryid = p_categoryid AND COA.is_deleted = 0;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chartofaccount_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT COA.id,
		   COA.categoryid,
           COA.coaname,
           COA.glcode,
           COA.coatypeid,
           COA.isparent,
           COA.groupid,
           COA.iscontrolacc,
           COA.isblockmanualposting,
           COA.iscashacc,
           COA.isproject,
           COA.projectid,
           COA.isactive,
           COA.iscostcenterapplicable,
		   CC.category,
           REF.refname
           
	FROM chartofaccount COA
    LEFT JOIN coacategory CC ON CC.id = COA.categoryid
    LEFT JOIN `reference` REF ON REF.id = COA.coatypeid
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND COA.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		)
         AND COA.is_deleted = 0;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_checkledgerbalance`(
	IN p_ledgerid INT(11),
    IN p_voucherdate DATE,
    IN p_companyid INT(11)
)
BEGIN

	SELECT JED.acledgerid,
		   SUM(JED.dramount) as dramount,
           SUM(JED.cramount) as cramount,
           FORMAT(ABS(SUM(JED.dramount) - SUM(JED.cramount)),2) as ledgerbalance,
           CASE
				WHEN (SUM(JED.dramount) - SUM(JED.cramount)) > 0 THEN 'Dr'
                WHEN (SUM(JED.dramount) - SUM(JED.cramount)) > 0 THEN ''
				ELSE 'Cr'
			END as crdr
           
	FROM journalentrydetail JED
    INNER JOIN journalentry JE ON JE.id = JED.journalentryid
    WHERE JED.acledgerid = p_ledgerid
    AND JED.companyid = p_companyid
	AND JE.voucherdate <= p_voucherdate;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_checklist_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM checklist WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_checklist_save`(
	IN p_id INT,
    IN p_sequence INT,
    IN p_checkname VARCHAR(200),
    IN p_ismandatory INT,
    IN p_companyid INT,
    IN p_userid INT,
	OUT out_id INT
)
BEGIN

SET @action = null;

IF EXISTS(
            SELECT checkname from checklist where checkname = p_checkname
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    BEGIN
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO checklist 
				(sequence, checkname, ismandatory, companyid)
			VALUES 
				(p_sequence, p_checkname, p_ismandatory, p_companyid);
			 
			SET @action = 'INSERT';
            SELECT LAST_INSERT_ID() INTO out_id;
	ELSE
    
		UPDATE checklist
			SET checkname = p_checkname, 
				sequence = p_sequence,
                ismandatory = p_ismandatory,
                companyid = p_companyid
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';     
                
           SELECT p_id INTO out_id;     
	END IF;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'checklist', out_id, @action, p_userid);
      END;
END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_checklist_search`(
    IN p_companyid INT
)
BEGIN

	SELECT
		id,
        sequence,
		checkname,
        ismandatory       
	
    FROM
		checklist
	WHERE
		companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_checklist_select`(
	IN p_id INT
)
BEGIN

	SELECT
		id,
		checkname,
		sequence,
        ismandatory,
        companyid
	
    FROM
		checklist
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
       
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chickseconomyreport_select`(
	IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT
)
BEGIN
    
    SET @row_number = 0;
    
    SELECT
		  (@row_number:=@row_number + 1) AS sqno,
 		  DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
          DATE_FORMAT(C.pulloutdate,'%d/%m/%Y') as hatchdate,
		  C.setterbatchid as settingno,
          REF1.refname AS sourcename,
          SB.availablequantity as noofeggsreceived,
          SB.actualquantity as noofeggsset,
          C.totalhatch as noofchicksreceived,
          ROUND(((IFNULL(C.totalhatch, 0) * 100) / IFNULL(SB.actualquantity, 1)),2) hatchpercent,		    
          C.sellable as completequantity,
         ROUND((IFNULL(C.sellable, 0)/IFNULL(SB.actualquantity, 1)*100),2) as saleablepercent,
          C.sellable AS deliveredchicks,
          0 AS delloss,
          0 AS hatchrate,
          0 AS amount,
          0 AS adminexp,
          0 AS totaladminexp,
          0 AS totalchicksexp,
          0 AS perchicksexp
    FROM
		chickspullout C
		LEFT JOIN setterbatch SB ON C.setterbatchid = SB.id
        LEFT JOIN reference REF1 ON SB.sourceid = REF1.id
        LEFT JOIN hatcherbatch HB ON C.hatchbatchid = HB.id
		
	  WHERE
		 C.pulloutdate BETWEEN p_fromdate AND p_todate AND
         C.companyid = p_companyid;
      

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chicksmortality_bygrpo`(
	IN p_companyid INT,
    IN p_grpono INT
)
BEGIN
	 SELECT  CM.id,
	         CM.culls,
             CM.mortality,
             CM.shortage,
             CM.grpono,
             CM.freeqty,
            -- GD.quantity,
            (SELECT SUM(quantity) from grpodetail where grpoid = p_grpono ) as quantity,
             CM.itemid
            
	 FROM chicksmortality CM
   --  LEFT JOIN grpodetail GD ON GD.grpoid = CM.grpono
    
     WHERE CM.companyid = p_companyid
	  AND CM.grpono = p_grpono;
		
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chicksmortality_save`(
	IN p_id INT,
    IN p_grpono INT(11),
    IN p_itemid INT(11),
    IN p_culls INT(11),
    IN p_mortality INT(11),
    IN p_shortage INT(11),
    IN p_freeqty INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO chicksmortality 
				(id, grpono, itemid, culls, mortality, shortage, freeqty, companyid)
			VALUES 
				(p_id, p_grpono, p_itemid, p_culls, p_mortality, p_shortage, p_freeqty, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE chicksmortality
				SET grpono = p_grpono, 
                itemid = p_itemid,
                culls = p_culls,
                mortality = p_mortality, 
                shortage = p_shortage,
                freeqty = p_freeqty,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
  -- CALL spc_commonlog_save(p_companyid, 'chicksmortality', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chicksmortality_select`(
	IN p_id INT
)
BEGIN
    
    SELECT
		id, 
        grpono, 
        culls, 
        mortality, 
        shortage, 
        freeqty,
        companyid,
        itemid
	
    FROM
		chicksmortality 
	
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
      

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chickspulloutlist_search`(
	IN p_location INT,
    IN p_from_date date,
	IN p_to_date date
)
BEGIN

	SELECT
		C.id,
		C.locationid,
		hatchbatchid,
        DATE_FORMAT(C.pulloutdate,'%d/%m/%Y') as pulloutdate,
		setterbatchid,
		C.breederbatchid,
		C.itemid,
        C.sellableper,
		hatcherquantity,
		infertile,
		deadingerm,
		earlymortality,
		middlemortality,
		deadinshell,
		LCM,
		burst,
		totalhatch,
		culls,
		sellable,
		itembatchid,
		C.unitcost,
		totalcost,
		C.itemunitid,
        I.itemname,
        B.batchname,
        C.companyid,
        C.warehouselocationid,
        W.warehousename,
        R.refname as itemunitname,
        L.id as locationid,
        L.locationname,
        hatchbatchid as hatcherbatchno
        
        
        
        
   FROM chickspullout C
        
		LEFT JOIN breederbatch B ON C.breederbatchid = B.id
        LEFT JOIN item I ON C.itemid = I.id
        LEFT JOIN warehouse W ON W.id = warehouselocationid
        LEFT JOIN location L ON L.id = W.locationid 
        LEFT JOIN reference R ON R.id = C.itemunitid
       
	
   WHERE
		W.locationid = p_location AND
        (C.pulloutdate BETWEEN p_from_date AND p_to_date);
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chickspullout_byitembatch`(
 IN p_itembatchid INT
 )
BEGIN

	SELECT
		id as pulloutid,
		sellable,
		itembatchid
        
	FROM
		chickspullout
        
	WHERE
		itembatchid = p_itembatchid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chickspullout_delete`(
	IN p_id int,
	IN p_companyid INT,
	IN p_userid INT
)
BEGIN
	DELETE FROM chickspullout WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'chickspullout', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chickspullout_save`(
		IN p_id INT,
		IN p_locationid INT,
		IN p_hatchbatchid INT,
		IN p_pulloutdate date,
		IN p_setterbatchid INT,
		IN p_breederbatchid INT,
		IN p_itemid INT,
		IN p_hatcherquantity INT,
		IN p_infertile INT,
		IN p_deadingerm INT,
		IN p_earlymortality INT,
		IN p_middlemortality INT,
		IN p_deadinshell INT,
		IN p_LCM INT,
		IN p_burst INT,
		IN p_totalhatch INT,
		IN p_culls INT,
		IN p_sellable INT,
        IN  p_sellableper decimal(9,3),
		IN p_itembatchid INT,
		IN p_unitcost decimal(9,3),
		IN p_totalcost decimal(9,3),
		IN p_itemunitid INT,
        IN p_warehouselocationid INT,
        IN p_itemname VARCHAR(100),
        IN p_eggsunitcost decimal(9,3),
		IN p_eggstotalcost decimal(9,3),
		IN p_eggsitemunitid INT,
        IN p_fromwarehouseid INT,
        IN p_eggsitemid INT,
        IN p_itembatchidformatissue VARCHAR(100),
        IN p_eggsitemname VARCHAR(100),
		IN p_companyid INT,
		IN p_userid INT,
        OUT out_id INT
)
BEGIN
        SET    @defaulthatcherywhfordoc = null;
        SET    @overheadcostperegg = null;
        SET    @docledgerid = null;
        SET    @overheadexpenseglid = null;
        SET    @WIPeggledgerid = null;
		SET	    @loadchargeperegg = null;
        SET     @defaulteggsitemid = null;
	-- Get hatchery setting default values
    
	SELECT  
			@defaulthatcherywhfordoc:= defaulthatcherywhfordoc,
            @overheadcostperegg:= IFNULL(overheadcostperegg, 0),
            @docledgerid := docledgerid,
            @overheadexpenseglid := overheadexpenseglid,
            @WIPeggledgerid := WIPeggledgerid,
			@loadchargeperegg := IFNULL(loadchargeperegg,0),
            @defaulteggsitemid:= defaulteggsitemid
	FROM
		hatcherysettings HS
        
    WHERE 
		HS.companyid = p_companyid;
        
	SET @action = null;
    SET @chickspulloutid = null;
    SET @matissueid = null;
	SET @matissueiddetailsid = null;
    SET @matreceid = null;
    
    -- create itembatch for material receipt
    SET @itembatch = null;
    SET @itemgroup = null;
    SET @eggscost = null;
    SET @overheadCost = null;
    SET @overheadcost =null;
    SET @doccost = null;
    select (p_hatcherquantity*@overheadcostperegg) INTO @eggscost;
    SELECT (p_hatcherquantity*@loadchargeperegg) INTO @overheadcost;
    SELECT ((@eggscost+@overheadcost)/p_sellable) INTO @doccost;
    
        
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		INSERT INTO chickspullout
				(locationid, hatchbatchid, pulloutdate, setterbatchid, breederbatchid, itemid,
                hatcherquantity, infertile, deadingerm, earlymortality, 
                middlemortality, deadinshell, LCM, burst, totalhatch,
                culls, sellable,sellableper, itembatchid, unitcost, totalcost, warehouselocationid, 
                itemunitid, companyid)
			VALUES 
				(p_locationid, p_hatchbatchid, p_pulloutdate, p_setterbatchid, p_breederbatchid, p_itemid,
                p_hatcherquantity, p_infertile, p_deadingerm, p_earlymortality, p_middlemortality, p_deadinshell, p_LCM, 
                p_burst, p_totalhatch, p_culls, p_sellable,p_sellableper, p_itembatchid,
                @doccost,(p_sellable*@doccost), p_warehouselocationid, p_itemunitid, p_companyid);
                
		SET @chickspulloutid  = last_insert_id(); 
        
		-- Make material issue entry for damaged eggs
        SET @out_issueid = NULL;
		CALL spc_materialissue_save(
			NULL, p_pulloutdate, 382, p_hatchbatchid, 362, "issue from chicks pullout",
			p_userid, (SELECT warehouseid FROM hatcher WHERE id = (SELECT hatcherid FROM hatcherbatch WHERE id = p_hatchbatchid)), 
            (SELECT warehousebinid FROM hatcher WHERE id = (SELECT hatcherid FROM hatcherbatch WHERE id = p_hatchbatchid)), 
            p_userid, p_pulloutdate,
			p_companyid, p_userid, @out_issueid
		);
                            
		
		SET @out_issuedetailid = NULL;
		CALL spc_materialissuedetail_save(
			NULL, @out_issueid, @defaulteggsitemid, p_eggsitemname,
			p_hatcherquantity, @overheadcostperegg, @eggscost,
			p_eggsitemunitid, p_itembatchidformatissue,
			p_companyid, p_userid, @out_issuedetailid
		);
                
        -- Make material movement entry for material issue
        SET @out_movid = NULL;
		CALL spc_materialmovement_save(
			NULL, @defaulteggsitemid, p_itembatchidformatissue, 683,
			@out_issueid, p_pulloutdate, p_hatcherquantity,
			(SELECT warehouseid FROM hatcher WHERE id = (SELECT hatcherid FROM hatcherbatch WHERE id = p_hatchbatchid)), 
            (SELECT warehousebinid FROM hatcher WHERE id = (SELECT hatcherid FROM hatcherbatch WHERE id = p_hatchbatchid)), 
            NULL,
            NULL,
			@eggscost, p_companyid, p_userid, @out_movid
		);
		
		-- Make material receipt entry for DOC
		SET @out_recid = NULL;
		CALL spc_materialreceipt_save(
			NULL, p_pulloutdate, 342, p_hatchbatchid, 322, "recipt FROM chikcs Pullout",
			p_userid, p_userid, p_pulloutdate, p_companyid,
			p_userid, @out_recid
		);
		
        
        -- create itembatch for material receipt
        
        select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch from item I
		INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

		WHERE I.id = p_itemid;
        
        
        -- update new chicks pullout entry with updated itembatch
        UPDATE chickspullout SET itembatchid = @itembatch WHERE id = @chickspulloutid;
        
        -- Material receipt detail entry
        SET @out_recdetailid = NULL;
		CALL spc_materialreceiptdetail_save(
			NULL, @out_recid, p_itemid, p_itemname, p_sellable,
             @doccost, (p_sellable*@doccost), p_itemunitid, @itembatch,
			p_warehouselocationid,
            (SELECT id FROM warehousebin WHERE warehouseid = p_warehouselocationid AND isdefault = 1 limit 1),
            p_companyid,
			p_userid, NULL, @out_recdetailid
		);
              
		-- Make material movement entry for material receipt
        SET @out_movid1 = NULL;
		CALL spc_materialmovement_save(
			NULL, p_itemid, @itembatch, 684,
			@out_recid, p_pulloutdate, p_sellable,
			NULL,
            NULL,
            @defaulthatcherywhfordoc, (SELECT id FROM warehousebin WHERE warehouseid = @defaulthatcherywhfordoc AND isdefault = 1 limit 1),
			(p_sellable*@doccost), p_companyid, p_userid, @out_movid1
		);
              
		 -- get item group id from the item id and update itemgroup table
        SELECT itemgroupid INTO @itemgroup FROM item WHERE id = p_itemid;
        
        UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
        
        WHERE id = @itemgroup;
        
		UPDATE hatcherbatch
		set statusid = 303
		where id = p_hatchbatchid;  
            
		-- Free up the hatcher capacity
        SET @usedcapacity = 0;
        SET @hatcherid = null;
        SELECT usedcapacity, id
        INTO @usedcapacity, @hatcherid
        FROM hatcher 
        WHERE id = (SELECT hatcherid FROM hatcherbatch WHERE id = p_hatchbatchid);
        
        UPDATE hatcher
        SET usedcapacity = (usedcapacity = p_hatcherquantity)
        WHERE id = @hatcherid;
            
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE chickspullout
			SET 
				locationid = p_locationid,
				hatchbatchid = p_hatchbatchid,
				pulloutdate = p_pulloutdate,
				setterbatchid = p_setterbatchid,
				breederbatchid = p_breederbatchid,
				itemid = p_itemid,
				hatcherquantity = p_hatcherquantity,
				infertile = p_infertile,
				deadingerm = p_deadingerm,
				earlymortality = p_earlymortality,
				middlemortality = p_middlemortality,
				deadinshell = p_deadinshell,
				LCM = p_LCM,
				burst = p_burst,
				totalhatch = p_totalhatch,
				culls =p_culls,
				sellable = p_sellable,
                sellableper = p_sellableper,
				itembatchid = @itembatch,
				unitcost = p_unitcost,
				totalcost = p_totalcost,
				itemunitid = p_itemunitid,
                warehouselocationid = p_warehouselocationid,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
     set @branch = 1;
      SELECT L.branchid INTO @branch 
       FROM location L
       LEFT JOIN warehouse W ON W.id = p_warehouselocationid
       
       WHERE W.locationid = L.id;
    
    
    -- JE for WIP egg ledger to sellable chick and waste chicks ledger
        SET @jeid = null;
		CALL spc_journalentry_save(
			NULL,
			NULL,
			1297,
			NULL,
			p_pulloutdate,
			NULL,
			@branch,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
            NULL,
            722,
			NULL,
			'Chicks pullout',
			NULL,
			NULL,
			NULL,
			out_id,
			'Chicks pullout',
			p_companyid,
			p_userid,
			@jeid
		);
        
        -- credit WIP eggs item - ledger
        SET @jedetailid = null;
        CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			@WIPeggledgerid,
            0,
            NULL,
            p_hatchbatchid,
			NULL,
            NULL,
			NULL,
            NULL,
			NULL,
			0,
			@eggscost,
			NULL,
			NULL,
			NULL,
			@itemid,
			NULL,
			'Chicks pullout',
			p_companyid,
			p_userid,
			@jedetailid
		 );
		 
		 -- Debit to sellable chick - Ledger
		
		 SET @jedetailid1 = null;
		 CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
            @docledgerid,
            0,
            NULL,
            p_hatchbatchid,
			NULL,
            NULL,
			NULL,
            NULL,
			NULL,
			(p_sellable*@doccost),
			0,
			NULL,
			NULL,
			NULL,
			@itemid,
			NULL,
			'Chicks pullout',
			p_companyid,
			p_userid,
			@jedetailid1
		 );
         
         -- Debit to expense - Ledger
		
		 SET @jedetailid2 = null;
		 CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
            @overheadexpenseglid,
            0,
            NULL,
            p_hatchbatchid,
			NULL,
            NULL,
			NULL,
            NULL,
			NULL,
			0,
            @overheadcost,
			NULL,
			NULL,
			NULL,
			@itemid,
			NULL,
			'Chicks pullout',
			p_companyid,
			p_userid,
			@jedetailid2
		 );
    
   -- record log
  -- CALL spc_commonlog_save(p_companyid, 'chickspullout', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chickspullout_search`(
-- IN p_companyid INT,
IN p_hatchbatchid INT
)
BEGIN

	SELECT
		C.id,
		C.locationid,
		hatchbatchid,
		pulloutdate,
		setterbatchid,
		C.breederbatchid,
		C.itemid,
        C.sellableper,
		hatcherquantity,
		infertile,
		deadingerm,
		earlymortality,
		middlemortality,
		deadinshell,
		LCM,
		burst,
		totalhatch,
		culls,
		sellable,
		itembatchid,
		C.unitcost,
		totalcost,
		C.itemunitid,
        I.itemname,
        B.batchname,
        C.companyid,
        C.warehouselocationid,
        W.warehousename,
        R.refname as itemunitname,
        L.id as locationid,
        L.locationname,
        hatchbatchid as hatcherbatchno
        
        
        
        
   FROM chickspullout C
        
		LEFT JOIN breederbatch B ON C.breederbatchid = B.id
        LEFT JOIN item I ON C.itemid = I.id
        LEFT JOIN warehouse W ON W.id = warehouselocationid
        LEFT JOIN location L ON L.id = W.locationid 
        LEFT JOIN reference R ON R.id = C.itemunitid
       
	
   WHERE
    
	-- C.companyid = p_companyid
		-- and
     hatchbatchid = p_hatchbatchid;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_chickspullout_select`(
	IN p_id INT
 )
BEGIN

	SELECT
		CP.id as pulloutid,
		CP.sellable,
        CP.sellableper,
		CP.itembatchid,
        CP.warehouselocationid,
        W.warehousename
        
	FROM
		chickspullout CP
        LEFT JOIN warehouse W ON W.id = CP.warehouselocationid
        
	WHERE
		CP.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_city_ddl`(
)
BEGIN

	SELECT id,
		   stateid,
           cityname
           
	FROM city;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_city_save`(
	IN p_id INT,
    IN p_stateid INT,
    IN p_citycode VARCHAR(45),
    IN p_cityname VARCHAR(100),
    IN p_companyid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO city 
				(id, stateid, citycode, cityname, 
                companyid)
			VALUES 
				(p_id, p_stateid, p_citycode, p_cityname, 
                p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE city
				SET stateid = p_stateid,
                citycode = p_citycode,
                cityname = p_cityname,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_city_search`(
	IN p_stateid INT(11)
)
BEGIN

	SELECT id,
		   stateid,
           citycode,
           cityname
           
	FROM city
    
    WHERE stateid = p_stateid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_coacategory_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DELETE FROM coacategory WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'coacategory', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_coacategory_save`(
	IN p_id INT,
	IN p_category VARCHAR(100),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO coacategory 
				(category, companyid)
			VALUES 
				(p_category, p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE coacategory
			SET 
				category = p_category, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';   
    
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'coacategory', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_coacategory_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
			id,
            category
			
	FROM coacategory
    
	WHERE companyid = p_companyid;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_coacategory_select`(
	IN p_id INT
)
BEGIN

	SELECT
			id,
            category
			
	FROM coacategory
    
	WHERE id = p_id;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_collectionsummary_report`(
IN p_fromdate DATE,
IN p_todate DATE,
IN p_partyid VARCHAR(255),
IN p_companyid INT(11)
)
BEGIN

 SELECT 
			   JED.acledgerid,
			   SUM(JED.dramount),
			   SUM(JED.cramount),
               IFNULL(fnc_openingcreditdebitbal( P.id,JED.acledgerid, p_fromdate, 'credit'),0) as op_cr,
               IFNULL(fnc_openingcreditdebitbal( P.id,JED.acledgerid, p_fromdate, 'debit'),0) as op_dr,
               P.partyname,
               P.id as partyid,
                P.partycode as partycode,
               DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate
			   
		FROM journalentry JE
		
		LEFT JOIN journalentrydetail JED ON JE.id = JED.journalentryid
		LEFT JOIN chartofaccount COA ON JED.acledgerid = COA.id
        LEFT JOIN party P ON P.customerledgerid = JED.acledgerid AND P.id = JED.partyid 
		
		WHERE JE.voucherdate BETWEEN p_fromdate AND p_todate AND
		 JE.companyid = p_companyid AND
         FIND_IN_SET( JE.partyid, p_partyid)
        AND P.id = JED.partyid
         AND P.partyroleids = 32
        
	GROUP BY P.id; 

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_commonbranchlinebybranchidage_report`(

IN p_branchid varchar(255),
IN p_companyid INT(11)
)
BEGIN
	/*SET @age = null;
	SELECT ((DATEDIFF(p_fromdate,CCP.placement_date))+1) INTO @age
    FROM commonbranchline CBL    
	LEFT JOIN cbf_chick_placement CCP ON CBL.branchid  = CCP.branch_id
    WHERE CCP.placement_date BETWEEN p_fromdate AND p_todate AND
	CBL.companyid = p_companyid AND
	FIND_IN_SET( CBL.branchid, p_branchid);  */

SELECT  CBL.id,
		CBL.branchid,
        CBL.linename,
        DATE_FORMAT( CCP.placement_date,'%d/%m/%Y') as placement_date,
       ((DATEDIFF(p_fromdate,CCP.placement_date))+1) As age
        
        
FROM commonbranchline CBL    
LEFT JOIN cbf_chick_placement CCP ON CBL.branchid  = CCP.branch_id

 WHERE 	
		 CCP.placement_date BETWEEN p_fromdate AND p_todate AND
		((DATEDIFF(p_fromdate,CCP.placement_date))+1) BETWEEN p_fromage AND p_toage
         AND
		 CBL.companyid = p_companyid AND
		 FIND_IN_SET( CBL.branchid, p_branchid);       

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_commonbranchlinebybranchid_report`(
IN p_branchid varchar(255),
IN p_companyid INT(11)

)
BEGIN
SELECT  CBL.id,
		CBL.branchid,
        CBL.linename,
        DATE_FORMAT( CCP.placement_date,'%d/%m/%Y') as placement_date
       
        
        
FROM commonbranchline CBL    
LEFT JOIN cbf_chick_placement CCP ON CBL.branchid  = CCP.branch_id

 WHERE 	
		CBL.companyid = p_companyid AND
		FIND_IN_SET( CBL.branchid, p_branchid);          


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_commonbranchline_delete`(
 IN p_id INT(11),
 IN p_compnayid INT(11),
 IN p_userid INT(11)
)
BEGIN

	DELETE FROM commonbranchline WHERE id = p_id;
	CALL spc_commonlog_save(p_companyid, 'commonbranchline', p_id, 'delete', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_commonbranchline_save`(
 IN p_id INT(11),
 IN p_branchid INT(11),
 IN p_linename VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT(11),
 OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO commonbranchline 
				(branchid, linename, companyid)
			VALUES 
				(p_branchid, p_linename, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE commonbranchline
				SET 
					branchid = p_branchid,
					linename = p_linename,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'commonbranchline', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_commonbranchline_search`(
 IN p_branchid INT(11)
)
BEGIN

	SELECT id, branchid, linename, companyid
           
	FROM commonbranchline
  
		WHERE branchid = p_branchid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_commonbranchline_select`( 
   IN p_id INT(11)
)
BEGIN

	SELECT id, branchid, linename, companyid
           
	FROM commonbranchline
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_commonbranch_delete`(
 IN p_id INT(11),
 IN p_companyid INT(11),
 IN p_userid INT(11),
 out out_id INT(11)
)
BEGIN
IF exists(select branchid FROM journalentry where branchid = p_id limit 1) THEN
     SELECT -1 INTO out_id;
     ELSE
	  	DELETE FROM commonbranch WHERE id = p_id;
	    CALL spc_commonlog_save(p_companyid, 'commonbranch', p_id, 'delete', p_userid);
     SELECT  p_id INTO out_id;
     END IF;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_commonbranch_save`(
   IN p_id INT(11),
   IN p_branchcode VARCHAR(200),
   IN p_branchname VARCHAR(200),
   IN p_isactive TINYINT(4),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
              IF EXISTS(
            SELECT id from commonbranch where LOWER(branchname) = LOWER(p_branchname) OR  branchcode = p_branchcode
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    
    ELSE 
    BEGIN
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO commonbranch 
				(branchcode, branchname, isactive, companyid)
			VALUES 
				(p_branchcode, p_branchname, p_isactive, p_companyid);
	  SET @action = 'INSERT';
	ELSE
		UPDATE commonbranch
				SET 
					branchcode = p_branchcode,
					branchname = p_branchname,
                    isactive = p_isactive,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
 
   -- record log
   CALL spc_commonlog_save(p_companyid, 'commonbranch', out_id, @action, p_userid);

END;
END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_commonbranch_search`(
IN p_companyid INT(11)
)
BEGIN

	SELECT id, branchname, branchcode, isactive, companyid
           
	FROM commonbranch
    
    WHERE companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_commonbranch_select`(
  IN p_id INT(11)
)
BEGIN

	SELECT id, branchname, branchcode, isactive, companyid
           
	FROM commonbranch
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_commondashboard`(
	IN p_userid INT
)
BEGIN

	-- payment to be paid
	SELECT PI.vendorid as partyid,
		   P.partyname,
		   PI.purchaseinvoiceno as invoiceno,
		   DATE_FORMAT(PI.invoicedate,'%d/%m/%Y') as invoicedate,
		   FORMAT(PI.pendingtotal,2) as pendingtotal,
		   DATE_FORMAT(DATE_ADD(PI.invoicedate, INTERVAL IFNULL(P.creditperiod,0) DAY),'%d/%m/%Y') as duedate,
		   -- DATEDIFF((DATE_ADD(PI.invoicedate, INTERVAL P.creditperiod DAY)), PI.invoicedate) as datediff,
		   (DATEDIFF(now(),(DATE_ADD(PI.invoicedate, INTERVAL IFNULL(P.creditperiod,0) DAY)))) as todaydiff,
           CASE
				WHEN (DATEDIFF(now(),(DATE_ADD(PI.invoicedate, INTERVAL IFNULL(P.creditperiod,0) DAY)))) > 0 THEN "crossed"
				WHEN (DATEDIFF(now(),(DATE_ADD(PI.invoicedate, INTERVAL IFNULL(P.creditperiod,0) DAY)))) <= 0 THEN "not crossed"
		   END as duestatus
		   
		   
	FROM purchaseinvoice PI
	LEFT JOIN party P ON P.id = PI.vendorid;


	-- payment to be received
	SELECT SI.customerid as partyid,
		   P.partyname,
		   SI.salesinvoiceno as invoiceno,
		   DATE_FORMAT(SI.salesinvoicedate,'%d/%m/%Y') as invoicedate,
		   FORMAT(SI.pendingtotal,2) as pendingtotal,
		   DATE_FORMAT(DATE_ADD(SI.salesinvoicedate, INTERVAL IFNULL(P.creditperiod,0) DAY),'%d/%m/%Y') as duedate,
		   (DATEDIFF(now(),(DATE_ADD(SI.salesinvoicedate, INTERVAL IFNULL(P.creditperiod,0) DAY)))) as todaydiff,
           CASE
				WHEN (DATEDIFF(now(),(DATE_ADD(SI.salesinvoicedate, INTERVAL IFNULL(P.creditperiod,0) DAY)))) > 0 THEN "crossed"
				WHEN (DATEDIFF(now(),(DATE_ADD(SI.salesinvoicedate, INTERVAL IFNULL(P.creditperiod,0) DAY)))) <= 0 THEN "not crossed"
		   END as duestatus
		   
		   FROM salesinvoice SI
	LEFT JOIN party P ON P.id = SI.customerid;

	-- pending your approval
	-- breeder daily transaction
    DROP TEMPORARY TABLE IF EXISTS BDT;
	CREATE TEMPORARY TABLE BDT
    
    SELECT BD.id,
		   'Breeder Daily Transaction' as transactionname,
           REF.refname,
           BD.createdby
	FROM breederdailytransaction BD
    LEFT JOIN `reference` REF ON REF.id = BD.statusid
    WHERE BD.createdby = p_userid
    AND BD.statusid = 821;
    
    -- layer daily transaction
    DROP TEMPORARY TABLE IF EXISTS LDT;
	CREATE TEMPORARY TABLE LDT
    
    SELECT LD.id,
		   'Layer Daily Transaction' as transactionname,
           REF.refname,
           LD.createdby
	FROM layerdailytransaction LD
    LEFT JOIN `reference` REF ON REF.id = LD.statusid
    WHERE LD.createdby = p_userid
    AND LD.statusid = 1169;

	-- CBF daily transaction
    DROP TEMPORARY TABLE IF EXISTS CDT;
	CREATE TEMPORARY TABLE CDT
    
    SELECT CD.id,
		   'CBF Daily Transaction' as transactionname,
           REF.refname,
           CD.createdby
	FROM cbf_dailytransaction CD
    LEFT JOIN `reference` REF ON REF.id = CD.statusid
    WHERE CD.createdby = p_userid
    AND CD.statusid = 3061;
    
    -- breeder eggs collection
    
    DROP TEMPORARY TABLE IF EXISTS BEC;
	CREATE TEMPORARY TABLE BEC
    
    SELECT BC.id,
		   'Breeder Eggs Collection' as transactionname,
           REF.refname,
           BC.createdby
	FROM eggscollection BC
    LEFT JOIN `reference` REF ON REF.id = BC.statusid
    WHERE BC.createdby = p_userid
    AND BC.statusid = 801;
    
    -- layer eggs collection
    DROP TEMPORARY TABLE IF EXISTS LEC;
	CREATE TEMPORARY TABLE LEC
    
    SELECT LC.id,
		   'Breeder Eggs Collection' as transactionname,
           REF.refname,
           LC.createdby
	FROM layereggscollection LC
    LEFT JOIN `reference` REF ON REF.id = LC.statusid
    WHERE LC.createdby = p_userid
    AND LC.statusid = 1089;
    
    DROP TEMPORARY TABLE IF EXISTS alldailytransaction;
	CREATE TEMPORARY TABLE alldailytransaction
    
    SELECT * FROM BDT
    UNION ALL SELECT * FROM LDT 
    UNION ALL SELECT * FROM CDT
    UNION ALL SELECT * FROM BEC
    UNION ALL SELECT * FROM LEC;
    
    SELECT * FROM alldailytransaction;

	-- pending others approval
	-- breeder daily transaction
    DROP TEMPORARY TABLE IF EXISTS BDT1;
	CREATE TEMPORARY TABLE BDT1
    
    SELECT BD.id,
		   'Breeder Daily Transaction' as transactionname,
           REF.refname,
           BD.createdby
	FROM breederdailytransaction BD
    LEFT JOIN `reference` REF ON REF.id = BD.statusid
    WHERE BD.createdby != p_userid
    AND BD.statusid = 821;
    
    -- layer daily transaction
    DROP TEMPORARY TABLE IF EXISTS LDT1;
	CREATE TEMPORARY TABLE LDT1
    
    SELECT LD.id,
		   'Layer Daily Transaction' as transactionname,
           REF.refname,
           LD.createdby
	FROM layerdailytransaction LD
    LEFT JOIN `reference` REF ON REF.id = LD.statusid
    WHERE LD.createdby != p_userid
    AND LD.statusid = 1169;

	-- CBF daily transaction
    DROP TEMPORARY TABLE IF EXISTS CDT1;
	CREATE TEMPORARY TABLE CDT1
    
    SELECT CD.id,
		   'CBF Daily Transaction' as transactionname,
           REF.refname,
           CD.createdby
	FROM cbf_dailytransaction CD
    LEFT JOIN `reference` REF ON REF.id = CD.statusid
    WHERE CD.createdby != p_userid
    AND CD.statusid = 3061;
    
    -- breeder eggs collection
    
    DROP TEMPORARY TABLE IF EXISTS BEC1;
	CREATE TEMPORARY TABLE BEC1
    
    SELECT BC.id,
		   'Breeder Eggs Collection' as transactionname,
           REF.refname,
           BC.createdby
	FROM eggscollection BC
    LEFT JOIN `reference` REF ON REF.id = BC.statusid
    WHERE BC.createdby != p_userid
    AND BC.statusid = 801;
    
    -- layer eggs collection
    DROP TEMPORARY TABLE IF EXISTS LEC1;
	CREATE TEMPORARY TABLE LEC1
    
    SELECT LC.id,
		   'Breeder Eggs Collection' as transactionname,
           REF.refname,
           LC.createdby
	FROM layereggscollection LC
    LEFT JOIN `reference` REF ON REF.id = LC.statusid
    WHERE LC.createdby != p_userid
    AND LC.statusid = 1089;
    
    DROP TEMPORARY TABLE IF EXISTS alldailytransaction1;
	CREATE TEMPORARY TABLE alldailytransaction1
    
    SELECT * FROM BDT1
    UNION ALL SELECT * FROM LDT1
    UNION ALL SELECT * FROM CDT1
    UNION ALL SELECT * FROM BEC1
    UNION ALL SELECT * FROM LEC1;
    
    SELECT * FROM alldailytransaction1;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_commonlog_save`(
	IN p_companyid INT,
    IN p_tablename VARCHAR(100),
    IN p_id INT,
    IN p_action VARCHAR(30),
    IN p_createdby INT
)
BEGIN

	SET @retJson = NULL;
	CALL spc_commonlog_tablerowjson(p_tablename, p_id, @retJson);

	INSERT INTO commonlog 
		(companyid,tablename, rowdata, action, createdby, createddate)
	VALUES
		(p_companyid,p_tablename, @retJson, p_action, p_createdby, now());

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_commonlog_tablerowjson`(
	IN p_tablename VARCHAR(100),
    IN p_id INT,
    OUT out_JSON json
)
BEGIN

	SET @strJson = NULL;

	SELECT 
		group_concat(concat("'", COLUMN_NAME, "', ", COLUMN_NAME) separator ',')
	INTO    
		@cols
	FROM
		information_schema.columns
	WHERE
		TABLE_NAME = p_tablename and TABLE_SCHEMA = database();
        

	SET @strquery = concat('select json_object(', @cols, ') into @strJson from ', p_tablename);

	IF p_id IS NOT NULL THEN
		SET @strquery = concat(@strquery, ' where id = ', p_id);
	END IF;
    
	SET @strquery = concat(@strquery, ';');
    
	PREPARE statement FROM @strquery;
	EXECUTE statement;
	DEALLOCATE PREPARE statement;
    
    SET out_JSON = @strJson;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_common_dashboard_profitandloss`(
	IN p_todate DATE,
    IN p_company_id INT(11)
)
BEGIN

 DECLARE n INT DEFAULT 0; -- variable for table count
 DECLARE i INT DEFAULT 0; -- index vaiable for while loop
	SET @@sql_mode = ' ';
    SET @profit = 0;
    SET @loss = 0;
    SET @fromdate = null;
DROP TEMPORARY TABLE IF EXISTS temppandl;
CREATE TEMPORARY TABLE temppandl
(
 Monthname VARCHAR(100),
 Income DECIMAL(15,3),
 Expenses DECIMAL(15,3)
 );
 SELECT startfrom INTO @fromdate FROM financialyearsetting WHERE companyid = p_company_id AND statusid = 6021 AND active = 1 limit 1;
   WHILE i<12 DO 
  SET @income = 0;SET @expense = 0;
   SET @month = MONTH(@fromdate);
   SET @month1 = @month+i;
IF (@month1 = 13) THEN SET @month1 = 1;

ELSEIF (@month1 = 14) THEN SET @month1 = 2;

ELSEIF (@month1 = 15) THEN SET @month1 = 3;
END IF;

	SELECT 
          abs((((IFNULL(fnc_profitandloss(@fromdate, p_todate,JED.acledgerid), 0) + IFNULL(SUM(JED.dramount),0)) - IFNULL(SUM(JED.cramount),0)))) as income
           INTO @income
	FROM chartofaccount COA
    
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid
    
    WHERE  JE.voucherdate BETWEEN @fromdate AND p_todate AND 
     MONTH(voucherdate) =  @month1
    AND JE.companyid = p_company_id
    AND COA.categoryid = 4
    AND COA.companyid = p_company_id
    group by MONTHNAME(voucherdate);
    
SELECT 
          abs((((IFNULL(fnc_profitandloss(@fromdate, p_todate,JED.acledgerid), 0) + IFNULL(SUM(JED.dramount),0)) - IFNULL(SUM(JED.cramount),0)))) as expenses
           INTO @expense
	FROM chartofaccount COA
    
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid
    
    WHERE  JE.voucherdate BETWEEN @fromdate AND p_todate AND 
     MONTH(voucherdate) =  @month1
    AND JE.companyid = p_company_id
    AND COA.categoryid = 5
    AND COA.companyid = p_company_id
    group by MONTHNAME(voucherdate);
      INSERT INTO temppandl
      SELECT @month1,@income,@expense;
	SET i = i + 1;
	END WHILE;
   
 SELECT CASE
    WHEN Monthname = 1 THEN "Jan"
    WHEN Monthname = 2 THEN "Feb"
	WHEN Monthname = 3 THEN "March"
	WHEN Monthname = 4 THEN "April"
	WHEN Monthname = 5 THEN "May"
	WHEN Monthname = 6 THEN "Jun"
    WHEN Monthname = 7 THEN "July"
    WHEN Monthname = 8 THEN "Aug"
	WHEN Monthname = 9 THEN "Sep"
    WHEN Monthname = 10 THEN "Oct"
    WHEN Monthname = 11 THEN "Nov"
	WHEN Monthname = 12 THEN "Dec"
END AS Monthname,Income,Expenses FROM temppandl;  


    
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_common_dashboard_search`(
 IN p_company_id INT(11),
 IN p_to_date Date
 )
BEGIN
 -- get financial year start date from financialyear setting
  SET @start_date = null;
  select  startfrom INTO @start_date FROM  financialyearsetting WHERE companyid = p_company_id AND active = 1 AND statusid = 6021;
  
  SELECT fnc_sales_overdue_invoice_count(@start_date,p_to_date) as sales_inv_overdue_count,
  fnc_sales_overdue_amount(@start_date,p_to_date)as sales_inv_overdue_amount,
  fnc_purchase_overdue_amount(@start_date,p_to_date)as PI_overdue_amount,
  fnc_purchase_overdue_count(@start_date,p_to_date)as PI_overdue_count,
  fnc_total_revenu_amount(@start_date,p_to_date,p_company_id)as revenu_amount,
  fnc_total_expenses_amount(@start_date,p_to_date,p_company_id)as expenses_amount;

  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_common_nextprevrecord`(
	IN p_id INT,
    IN p_tablename varchar(100),
    IN p_action VARCHAR(10),
    IN p_companyid INT,
    OUT out_returnid INT
)
BEGIN

	SET @returnid = null;
 	SET @strquery = null;
    
		IF(p_id IS NULL) THEN
			SET p_id = 0;
		END IF;
        			
		SET @strquery = concat('SELECT id into @returnid FROM ', p_tablename, ' WHERE ');
		SET @strquery = concat(@strquery, ' (IFNULL(' , p_id , ', 0) != 0 && ''' , p_action , ''' = ''PREV'' && id < ',p_id,')');
		SET @strquery = concat(@strquery, ' OR ');
		SET @strquery = concat(@strquery, ' (IFNULL(' , p_id , ', 0) != 0 && ''' , p_action ,''' = ''NEXT'' && id > ',p_id,')');
		SET @strquery = concat(@strquery, ' OR ');
		SET @strquery = concat(@strquery, ' (IFNULL(' , p_id , ', 0) = 0 && (''' , p_action , ''' = ''PREV''  ||  ''' , p_action , ''' = ''NEXT'' )) ');
		
		IF(IFNULL(p_companyid, 0) != 0) THEN
			SET @strquery = concat(@strquery, ' AND companyid = ' , p_companyid );
		END IF;
      
		IF(p_action = 'PREV') THEN
			SET @strquery = concat(@strquery, ' ORDER BY id DESC ');
		END IF;
        
        SET @strquery = concat(@strquery, ' LIMIT 1;');

           
     PREPARE statement FROM @strquery;
	 EXECUTE statement;
	 DEALLOCATE PREPARE statement;

		-- SET out_query = @strquery;

	 IF(IFNULL(@returnid, 0) != 0) THEN
	 SET out_returnid = @returnid;
     ELSE
	 SET out_returnid = p_id;
     END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_common_setting_save`( 
 IN p_id INT(11),
 IN p_discountledgerid INT(11),
 IN p_cogsledgerid INT(11),
 IN p_cashledgerid INT(11),
 IN p_grpowithoutinvoiceledgerid INT(11),
 IN p_inventorygainandlossledgerid INT(11), 
 IN p_profitandlossledgerid INT(11),
 IN p_grpowithoutpo TINYINT(4),
 IN p_purchaseinvoicewithoutgrpo TINYINT(4),
 IN p_purchaseinvoicewithoutpo TINYINT(4),
 IN p_opening_balance_ledger_id INT(11),
 IN p_customer_ledger_group_id INT(11),
 IN p_supplier_ledger_group_id INT(11),
 IN p_controlaccountledgerid INT(11),
 IN p_deliverywithoutso TINYINT(4),
 IN p_salesinvoicewithoutdelivery TINYINT(4),
 IN p_salesinvoicewithoutso TINYINT(4),
 IN p_companyid INT(11),
 IN p_userid INT(11),
 OUT out_id INT)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO common_setting(discountledgerid, cogsledgerid, cashledgerid, grpowithoutinvoiceledgerid,inventorygainandlossledgerid,profitandlossledgerid, 
        grpowithoutpo, purchaseinvoicewithoutgrpo, purchaseinvoicewithoutpo, companyid,opening_balance_ledger_id,
        customer_ledger_group_id,supplier_ledger_group_id, controlaccountledgerid, deliverywithoutso, salesinvoicewithoutdelivery, salesinvoicewithoutso)
        VALUES (p_discountledgerid, p_cogsledgerid, p_cashledgerid, p_grpowithoutinvoiceledgerid, p_inventorygainandlossledgerid,
        p_profitandlossledgerid, p_grpowithoutpo, p_purchaseinvoicewithoutgrpo, p_purchaseinvoicewithoutpo, p_companyid,p_opening_balance_ledger_id,
        p_customer_ledger_group_id,p_supplier_ledger_group_id, p_controlaccountledgerid, p_deliverywithoutso, p_salesinvoicewithoutdelivery, p_salesinvoicewithoutso);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE common_setting
        SET discountledgerid = p_discountledgerid,
			cogsledgerid = p_cogsledgerid,
            cashledgerid = p_cashledgerid,
            grpowithoutinvoiceledgerid = p_grpowithoutinvoiceledgerid,
            inventorygainandlossledgerid = p_inventorygainandlossledgerid,
            profitandlossledgerid = p_profitandlossledgerid,
            grpowithoutpo = p_grpowithoutpo,
            purchaseinvoicewithoutgrpo = p_purchaseinvoicewithoutgrpo,
            purchaseinvoicewithoutpo = p_purchaseinvoicewithoutpo,
			companyid = p_companyid,
            opening_balance_ledger_id = p_opening_balance_ledger_id,
            customer_ledger_group_id = p_customer_ledger_group_id,
            supplier_ledger_group_id = p_supplier_ledger_group_id,
            controlaccountledgerid = p_controlaccountledgerid,
            deliverywithoutso = p_deliverywithoutso,
            salesinvoicewithoutdelivery = p_salesinvoicewithoutdelivery,
            salesinvoicewithoutso = p_salesinvoicewithoutso,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'common_setting', out_id, @action, p_userid);



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_common_setting_search`(
 IN p_companyid INT(11)
 )
BEGIN
 SELECT CS.id,
		 CS.discountledgerid,
		 COA.coaname as discountledgername,
         COA.glcode as discountledgercode,
		 CS.cogsledgerid, 
         COA1.coaname as cogsledgername,
         COA1.glcode as cogsledgercode,
		 CS.cashledgerid, 
         COA2.coaname as cashledgername,
         COA2.glcode as cashledgercode,
		 CS.grpowithoutinvoiceledgerid,
		 COA3.coaname as grpolegdgername,
         COA3.glcode as grpoledgercode,
		 CS.inventorygainandlossledgerid,
         COA3.coaname as inventoryledgername,
         COA3.glcode as inventoryledgercode,
         CS.profitandlossledgerid,
		 COA4.coaname as inventoryledgername ,
         COA4.glcode as inventoryledgercode,
         CS.grpowithoutpo,
         CS.purchaseinvoicewithoutgrpo,
         CS.purchaseinvoicewithoutpo,
         CS.deliverywithoutso,
         CS.salesinvoicewithoutdelivery,
         CS.salesinvoicewithoutso,
		 CS.opening_balance_ledger_id,
		 CS.customer_ledger_group_id,
		 CS.supplier_ledger_group_id,
         CS.controlaccountledgerid,
         COA5.coaname as controlaccountledger,
         COA5.glcode as controlaccountledgercode
 FROM 
 common_setting CS
 LEFT JOIN chartofaccount COA ON COA.id = CS.discountledgerid
 LEFT JOIN chartofaccount COA1 ON COA1.id = CS.cogsledgerid
 LEFT JOIN chartofaccount COA2 ON COA2.id = CS.cashledgerid
 LEFT JOIN chartofaccount COA3 ON COA3.id = CS.grpowithoutinvoiceledgerid
 LEFT JOIN chartofaccount COA4 ON COA4.id = CS.inventorygainandlossledgerid
 LEFT JOIN chartofaccount COA5 ON COA5.id = CS.controlaccountledgerid
 /*LEFT JOIN chartofaccount COA5 ON COA5.id = CS.profitandlossledgerid
 LEFT JOIN chartofaccount COA6 ON COA6.id = CS.opening_balance_ledger_id
 LEFT JOIN chartofaccount COA7 ON COA7.id = CS.customer_ledger_group_id
 LEFT JOIN chartofaccount COA8 ON COA8.id = CS.supplier_ledger_group_id*/
 WHERE 
	CS.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_common_splitstr_totable`(
    IN `INPUTSTR` TEXT CHARSET utf8mb4, 
    IN `SEPARATR` TEXT CHARSET utf8mb4
)
BEGIN

	SET @I = 1;
    SET @SEP = SEPARATR;
    SET @VARSTR = INPUTSTR;
    
    SET @N = FORMAT((LENGTH(@VARSTR)-LENGTH(REPLACE(@VARSTR, @SEP, '')))/LENGTH(@SEP), 0)+1;
   
    CREATE TEMPORARY TABLE IF NOT EXISTS splt_table_002(P1 VARCHAR(100) NULL);
	TRUNCATE TABLE splt_table_002;
    
    label1: LOOP
    
		SET @TEMP = SUBSTRING_INDEX(SUBSTRING_INDEX(@VARSTR, @SEP, 1), ',' , -1);
        -- SELECT @TEMP;
        insert into splt_table_002 (`P1`) SELECT @TEMP;
        SET @I = @I + 1;
        
        SET @pos = POSITION(@SEP IN @VARSTR); 
		SET @VARSTR = SUBSTRING(@VARSTR, @pos + 1 , length(@VARSTR)); 
       
        IF @N >= @I THEN
          ITERATE label1;
        END IF;
        
        LEAVE label1;
        
      END LOOP label1;
      
    SELECT * FROM splt_table_002;           

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_companysubscription_activelicenses`(
	IN p_companyid INT
)
BEGIN

	SELECT
		`id`,
		`companyid`,
		`productid`,
		`licensetypeid`,
		`licensetypename`,
        DATE_FORMAT(activationdate,'%d/%m/%Y') as activationdate,
		`frequencytypeid`,
		`frequencytypename`,
        DATE_FORMAT(expirydate,'%d/%m/%Y') as expirydate,
		`value`,
        fnc_subscription_licenseused(id) as licenseused,
		`statusid`
	FROM
		companysubscription CS
	WHERE
		companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_companysubscription_save`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_productid INT,
    IN p_subscriptionid INT,
    IN p_subscriptiontypeid INT,
    IN p_licensetypeid INT,
    IN p_licensetypename VARCHAR(100),
    IN p_activationdate DATE,
    IN p_frequencytypeid INT,
    IN p_frequencytypename VARCHAR(100),
    IN p_value INT,
    IN p_expirydate DATE,
    IN p_statusid INT,
    IN p_statusname VARCHAR(100),
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO companysubscription 
				(
					
					`companyid`,
					`productid`,
                    `subscriptionid`,
                    `subscriptiontypeid`,
					`licensetypeid`,
                    `licensetypename`,
					`activationdate`,
					`frequencytypeid`,
                    `frequencytypename`,
					`value`,
					`expirydate`,
                    `statusid`,
                    `statusname`
				)
			VALUES 
				(	
					
					p_companyid,
					p_productid,
                    p_subscriptionid,
                    p_subscriptiontypeid,
					p_licensetypeid,
                    p_licensetypename,
					p_activationdate,
					p_frequencytypeid,
                    p_frequencytypename,
					p_value,
					p_expirydate,
                    p_statusid,
                    p_statusname
				);
                
		SET @action = 'INSERT';
      
	ELSE
    
		UPDATE companysubscription
        
				SET 
					companyid = p_companyid,
					productid = p_productid,
					subscriptionid = p_subscriptionid,
                    subscriptiontypeid = p_subscriptiontypeid,
					licensetypeid = p_licensetypeid,
                    licensetypename = p_licensetypename,
					activationdate = p_activationdate,
					frequencytypeid = p_frequencytypeid,
                    frequencytypename = p_frequencytypename,
					`value` = p_value,
					expirydate = p_expirydate,
                    statusid = p_statusid,
                    statusname = p_statusname,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id;
                
		SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_companysubscription_savejson`(
	IN p_companyid INT,
    IN p_productid INT,
    IN p_companydata json,
    IN p_subscriptions json,
    IN p_roles json,
    IN p_roleaccess json,
    OUT out_id INT
)
BEGIN
    
    -- save company details
    
    SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_companydata) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_companydata,CONCAT('$[',@i,']')) INTO @str;
        
		INSERT INTO company (id, companyname, companycode, email) 
		values (null,
			JSON_UNQUOTE(if(json_type(JSON_EXTRACT(@str, CONCAT('$.companyname'))) = 'NULL', null,JSON_EXTRACT(@str, CONCAT('$.companyname')))),
            JSON_UNQUOTE(if(json_type(JSON_EXTRACT(@str, CONCAT('$.companycode'))) = 'NULL', null,JSON_EXTRACT(@str, CONCAT('$.companycode')))),
            JSON_UNQUOTE(if(json_type(JSON_EXTRACT(@str, CONCAT('$.email'))) = 'NULL', null,JSON_EXTRACT(@str, CONCAT('$.email'))))
        );
        
        
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    
    -- save daily feed consumption 
    
    SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_subscriptions) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_subscriptions,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
		
        CALL spc_companysubscription_save(
			null,
            CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))) AS UNSIGNED INTEGER),
            CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.productid'))) AS UNSIGNED INTEGER),
            CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.subscriptionid'))) AS UNSIGNED INTEGER),
            CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.subscriptiontypeid'))) AS UNSIGNED INTEGER),
            CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.licensetypeid'))) AS UNSIGNED INTEGER),
            JSON_UNQUOTE(if(json_type(JSON_EXTRACT(@str, CONCAT('$.licensetypename'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.licensetypename')))),
            JSON_UNQUOTE(JSON_EXTRACT(@str, CONCAT('$.activationdate'))),
            CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.frequencytypeid'))) AS UNSIGNED INTEGER),
            JSON_UNQUOTE(if(json_type(JSON_EXTRACT(@str, CONCAT('$.frequencytypename'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.frequencytypename')))),
            CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.value'))) AS UNSIGNED INTEGER),
            JSON_UNQUOTE(JSON_EXTRACT(@str, CONCAT('$.expirydate'))),
            if(json_type(JSON_EXTRACT(@str, CONCAT('$.statusid'))) = 'NULL',null, CAST(JSON_EXTRACT(@str, CONCAT('$.statusid')) AS UNSIGNED INTEGER )),
            JSON_UNQUOTE(if(json_type(JSON_EXTRACT(@str, CONCAT('$.statusname'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.statusname')))),
            1,
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    -- save Roles assigned to company
   
    -- save Roles assigned to company
    
	SET @i = 0;
    
    select 'length', JSON_LENGTH(p_roles);
    
    WHILE @i < JSON_LENGTH(p_roles) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_roles,CONCAT('$[',@i,']')) INTO @str;
			
        INSERT INTO `role`(`id`,`rolename`, `description`, `licensetypeid`)
			VALUES 
				(
					null,
					JSON_UNQUOTE(if(json_type(JSON_EXTRACT(@str, CONCAT('$.rolename'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.rolename')))),
				JSON_UNQUOTE(if(json_type(JSON_EXTRACT(@str, CONCAT('$.description'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.description')))),
				CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.licensetypeid'))) AS SIGNED)
                );
            		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    
    -- save role access
    
	SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_roleaccess) DO
    
    	SET @str = NULL;
		SELECT JSON_UNQUOTE(JSON_EXTRACT(p_roleaccess,CONCAT('$[',@i,']'))) INTO @str;
        
        INSERT INTO roleaccess (id, roleid, entityid, entitytypeid, permissions, checked, parentid)
			VALUES 
				(	
					null,
					CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.roleid'))) AS SIGNED),            
					CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.entityid'))) AS SIGNED),            
					CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.entitytypeid'))) AS SIGNED),            
					JSON_UNQUOTE(if(json_type(json_extract(@str, CONCAT('$.permissions'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.permissions')))),
					JSON_UNQUOTE(if(json_type(json_extract(@str, CONCAT('$.checked'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.checked')))),
					if(json_type(json_extract(@str, CONCAT('$.parentid'))) = 'NULL',null,CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.parentid'))) AS UNSIGNED INTEGER))
				);
        
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_companysubscription_userlicenseDdl`(
	IN p_userid INT,
	IN p_companyid INT
)
BEGIN


	SELECT 	tblLicenses.id,  licensetypename,  licenseleft, UL.userid 
    FROM
	(
		SELECT
			id,
			licensetypename,
			`value` - fnc_subscription_licenseused(id) AS licenseleft
		FROM
			companysubscription
		WHERE
			companyid = p_companyid 
	)
    AS tblLicenses
    
    LEFT JOIN userlicense UL ON UL.companysubscriptionid = tblLicenses.id
				AND UL.userid = p_userid
    WHERE 
		licenseleft > 0 
        OR (UL.userid IS NOT NULL AND licenseleft = 0);
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_company_select`(
IN p_companyid INT
)
BEGIN
SELECT 
	 id,
	 companyname,
     companycode,
     description,
     email,
     contactno1,
     contactno2,
     address,
     state,
     statecode,
     city,
     countrycode,
     pincode
     
	FROM
    company 
    WHERE
    id = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_consumptionissue_save`(
	IN p_id INT,
	IN p_itemid INT,
    IN p_consumptionid INT,
    IN p_issuedetailid INT,
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO consumptionissue
				(itemid, 
				 consumptionid, 
                 issuedetailid)
			VALUES 
				(p_itemid, 
                 p_consumptionid, 
                 p_issuedetailid);
      
    ELSE
    
		UPDATE  consumptionissue
				SET itemid = p_itemid, 
                consumptionid = p_consumptionid,
                issuedetailid = p_issuedetailid, 
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id;
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_costcenter_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM costcenter WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_costcenter_parentcostcenter`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id, dimenssioncode, dimenssionname, description, isactive, isparent, parentid
           
	FROM costcenter
    
    WHERE companyid = p_companyid
    AND isparent = 1;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_costcenter_save`(
   IN p_id INT(11),
   IN p_dimenssioncode VARCHAR(45),
   IN p_dimenssionname VARCHAR(100),
   IN p_description VARCHAR(300),
   IN p_isactive TINYINT(4),
   IN p_isparent TINYINT(4),
   IN p_parentid INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   IN p_accounts_dimensionid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF EXISTS(
            SELECT id from costcenter where LOWER(dimenssioncode) = LOWER(p_dimenssioncode) OR dimenssionname = p_dimenssionname
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE
		BEGIN
    
				IF(NULLIF(p_id, '0') IS NULL) THEN
				
					INSERT INTO costcenter 
							(id, dimenssioncode, dimenssionname, description, isactive, isparent, parentid, companyid, accounts_dimensionid)
						VALUES 
							(p_id, p_dimenssioncode, p_dimenssionname, p_description, p_isactive, p_isparent, p_parentid, p_companyid, p_accounts_dimensionid);
				  SET @action = 'INSERT';
				ELSE
				
					UPDATE costcenter
							SET dimenssioncode = p_dimenssioncode,
								dimenssionname = p_dimenssionname,
								description = p_description,
								isactive = p_isactive,
								isparent = p_isparent,
								parentid = p_parentid,
								companyid = p_companyid,
								accounts_dimensionid = p_accounts_dimensionid,
							id = LAST_INSERT_ID(id)
						WHERE
							id = p_id
							AND companyid = p_companyid;
					   SET @action = 'UPDATE';     
							
							
				END IF;
				
				SELECT LAST_INSERT_ID() INTO out_id; 
				
			   -- record log
			   CALL spc_commonlog_save(p_companyid, 'costcenter', out_id, @action, p_userid);
			END;
		END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_costcenter_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id, dimenssioncode, dimenssionname, description, isactive, isparent, parentid, accounts_dimensionid
           
	FROM costcenter
    
    WHERE companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_costcenter_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT id, dimenssioncode, dimenssionname, description, isactive, isparent, parentid, accounts_dimensionid
           
	FROM costcenter
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_coststructuredetail_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM coststructuredetail WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'coststructuredetail', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_coststructuredetail_save`(
IN p_id INT(11),
IN p_coststructureid INT(11),
IN p_fromavgweight DECIMAL(9,3),
IN p_toavgaeight DECIMAL(9,3),
IN p_productioncost DECIMAL(9,3),
IN p_rearingcharge DECIMAL(9,3),
IN p_fcr DECIMAL(9,3),
In p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT
)
BEGIN
SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO coststructuredetail
              (coststructureid, fromavgweight, toavgaeight, productioncost, rearingcharge, fcr, companyid)
       VALUES
            (p_coststructureid, p_fromavgweight, p_toavgaeight, p_productioncost, p_rearingcharge, p_fcr, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE coststructuredetail 
   
	SET coststructureid = p_coststructureid,
        fromavgweight = p_fromavgweight,
        toavgaeight = p_toavgaeight,
        productioncost =p_productioncost,
        rearingcharge = p_rearingcharge,
        fcr = p_fcr,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'coststructuredetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_coststructuredetail_search`(
 IN p_coststructureid INT
)
BEGIN

	SELECT 
		 id,
         coststructureid,
         fromavgweight,
         toavgaeight,
         productioncost,
         rearingcharge,
         fcr,
         companyid
         
	FROM
		coststructuredetail 
        
	WHERE
		 coststructureid = p_coststructureid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_coststructuredetail_select`(
IN p_id INT
)
BEGIN

	SELECT 
		 id,
         coststructureid,
         fromavgweight,
         toavgaeight, 
         productioncost,
         rearingcharge,
         fcr,
         companyid
         
	FROM
		coststructuredetail 
        
	WHERE
	 (
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_coststructure_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM coststructure WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'coststructure', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_coststructure_save`(
  IN p_id INT(11),
  IN p_name VARCHAR(200),
  IN p_chickcost DECIMAL(9,3),
  IN p_administrationcost DECIMAL(9,3),
  IN p_fromdate DATE,
  IN p_todate DATE,
  IN p_mortalitydeduction DECIMAL(9,3),
  IN p_feedcost DECIMAL(9,3),
  IN p_medicinecost DECIMAL(9,3),
  IN p_vaccinecost DECIMAl(9,3),
  IN p_changeformula TINYINT(4),
  IN p_onbird TINYINT(4),
  IN p_birdincentiveperkg DECIMAL(9,3),
  IN p_birdincentiveperbird DECIMAl(9,3),
  IN p_birdincentivepercentage DECIMAL(9,3),
  IN p_productionincentive DECIMAl(9,3),
  IN p_costexceeds DECIMAL(9,3),
  IN p_mortalityweek DECIMAL(9,3),
  IN p_mortalitypercentage DECIMAL(9,3),
  IN p_cummulativeper DECIMAl(9,3),
  IN p_firstweekmortalityper DECIMAl(9,3),
  IN p_shortrecovery DECIMAL(9,3),
  IN p_minrearingcharges DECIMAl(9,3),
  IN p_exbirdincentive DECIMAl(9,3),
  IN p_totalmortality INT,
  IN p_incentiveperkg DECIMAl(9,3),
  In p_shortrecoveryper DECIMAL(9,3),
  IN p_companyid INT(11),
  IN p_userid INT,
  OUT out_id INT
  )
BEGIN
SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO coststructure
				(name, chickcost, administrationcost, fromdate,
                todate, mortalitydeduction,feedcost, medicinecost, 
                vaccinecost, changeformula, onbird, birdincentiveperkg, 
                birdincentiveperbird, birdincentivepercentage, productionincentive,
                costexceeds, mortalityweek, mortalitypercentage, cummulativeper,
                firstweekmortalityper, shortrecovery, minrearingcharges,
                exbirdincentive, totalmortality, incentiveperkg,
				shortrecoveryper ,companyid)
			VALUES 
				(p_name, p_chickcost, p_administrationcost, p_fromdate,
                p_todate, p_mortalitydeduction, p_feedcost, p_medicinecost,
                p_vaccinecost, p_changeformula, p_onbird, p_birdincentiveperkg,
                p_birdincentiveperbird, p_birdincentivepercentage, p_productionincentive,
				p_costexceeds, p_mortalityweek, p_mortalitypercentage, p_cummulativeper,
                p_firstweekmortalityper, p_shortrecovery, p_minrearingcharges,
                p_exbirdincentive, p_totalmortality, p_incentiveperkg,
				p_shortrecoveryper, p_companyid);
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE coststructure
				SET name = p_name,
                chickcost = p_chickcost,
                administrationcost = p_administrationcost,
                fromdate = p_fromdate,
                todate = p_todate,
                mortalitydeduction = p_mortalitydeduction,
                feedcost = p_feedcost,
                medicinecost = p_medicinecost, 
                vaccinecost = p_vaccinecost,
                changeformula = p_changeformula,
                onbird = p_onbird, 
                birdincentiveperkg = p_birdincentiveperkg, 
                birdincentiveperbird = p_birdincentiveperbird,
                birdincentivepercentage = birdincentivepercentage, 
                productionincentive = p_productionincentive,
				costexceeds = p_costexceeds,
                mortalityweek = p_mortalityweek, 
                mortalitypercentage = p_mortalitypercentage,
                cummulativeper = p_cummulativeper,
                firstweekmortalityper = p_firstweekmortalityper,
                shortrecovery = p_shortrecovery,
                minrearingcharges = p_minrearingcharges,
                exbirdincentive = p_exbirdincentive,
                totalmortality = p_totalmortality, 
                incentiveperkg = p_incentiveperkg,
                shortrecoveryper = p_shortrecoveryper,
				companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'coststructure', out_id, @action, p_userid);

    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_coststructure_search`(
 IN p_companyid INT
)
BEGIN

	SELECT id,
		 name, chickcost, 
         administrationcost, 
		 DATE_FORMAT(fromdate,'%d/%m/%Y') as fromdate,
		 DATE_FORMAT(todate,'%d/%m/%Y') as todate, mortalitydeduction,
         feedcost, medicinecost, 
         vaccinecost, changeformula,
         onbird, birdincentiveperkg, 
		 birdincentiveperbird, birdincentivepercentage,
         productionincentive,
         costexceeds, mortalityweek,
         mortalitypercentage, cummulativeper,
		firstweekmortalityper, shortrecovery, 
        minrearingcharges, exbirdincentive,
        totalmortality, incentiveperkg, shortrecoveryper
		 companyid
	FROM
		coststructure 
	
	WHERE
		companyid = p_companyid; 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_coststructure_select`(
 IN p_id INT
)
BEGIN

	SELECT id,
		 name, chickcost, 
         administrationcost,
         DATE_FORMAT(fromdate,'%d/%m/%Y') as fromdate,
		 DATE_FORMAT(todate,'%d/%m/%Y') as todate, mortalitydeduction,
         feedcost, medicinecost, 
         vaccinecost, changeformula,
         onbird, birdincentiveperkg, 
		 birdincentiveperbird, birdincentivepercentage,
         productionincentive,
         costexceeds, mortalityweek, mortalitypercentage, cummulativeper,
		 firstweekmortalityper, shortrecovery, minrearingcharges,
		 exbirdincentive, totalmortality, incentiveperkg,shortrecoveryper
		 companyid
	FROM
		coststructure 
	
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_country_save`(
	IN p_id INT,
    IN p_countrycode VARCHAR(45),
    IN p_countryname VARCHAR(200),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO country 
				(id, countrycode, countryname)
			VALUES 
				(p_id, p_countrycode, p_countryname);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE country
				SET countrycode = p_countrycode,
                countryname = p_countryname,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_country_search`(
    
)
BEGIN
    
    SELECT
		 id,
         countrycode,
         countryname
	
    FROM
		country;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_country_select`(
	IN p_id INT
)
BEGIN

	SELECT
		id,
		countrycode,
        countryname
        
	FROM
		country
        
	WHERE
		  (
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_cumm_eggscollection`(
	IN p_batchid INT(11),
	IN p_shedid INT(11),
    IN p_collectiondate DATE
)
BEGIN
SET @@sql_mode = '';
 SELECT
            itemtypeid,
			itemid,
            SUM(quantity) as cummqty,
            I.itemname,
            ED.remark,
			ED.companyid
         
    FROM
		eggsdistributiondetail ED
        
	LEFT JOIN item I ON ED.itemid =I.id
		where ED.breederbatchid = p_batchid
		AND ED.shedid = p_shedid AND statusid =842
	    AND ED.collectiondate < p_collectiondate 
        GROUP by ED.itemid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_customerwiesesale_report`(
IN p_fromdate DATE,
IN p_todate DATE,
IN p_partyid VARCHAR(100),
IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';

SELECT
CPO.itemid,
CPO.hatcherquantity as quantity,
((CPO.hatcherquantity*CPO.unitcost)/100) as avgprice,
CPO.totalcost as grosstotal,
CPO.sellable as costofsale,
CPO.pulloutdate,
I.itemname,
I. itemgroupid,
IG.groupname,
PG.partygroupname,
P.partyname,
P.id as partyid

 


FROM chickspullout CPO
LEFT JOIN item I ON I.id = CPO.itemid
LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
LEFT JOIN party P ON FIND_IN_SET(IG.moduleid,P.moduleid)
LEFT JOIN partygroup PG ON PG.id = P.partygroupid

Where 
FIND_IN_SET(P.id,p_partyid)
group by P.id,I.id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_customerwisesalereport_report`(
IN p_fromdate DATE,
IN p_todate DATE,
IN p_partyid varchar(5000),
IN p_companyid INT(11)
)
BEGIN

SET @@sql_mode = ' ';
select * ,((grosstotal-discount)+cgstamount+sgstamount+igstamount+utgstamount)as nettotal

from(
select SID.itemid,
	   I.itemname,
       SI.customerid,
       SI.salesinvoiceno,
       P.partyname,
       SID.quantity,
       SID.unitprice,
	   IFNULL(SID.weight,0) as weight,
       SID.discount as discount,
       DATE_FORMAT(SI.salesinvoicedate,'%d/%m/%Y') as salesinvoicedate,
       SI.discount as invoicediscount,
       SID.unitprice as rate,
       (SID.quantity*SID.unitprice) as amount,
       IFNULL((SID.cgstamount),0) as cgstamount,
       IFNULL((SID.sgstamount),0) as sgstamount,
       IFNULL((SID.igstamount),0) as igstamount,
       IFNULL((SID.utgstamount),0) as utgstamount,
         CASE
			WHEN SID.isbird = 1  THEN (SID.weight* SID.unitprice)
			ELSE (SID.quantity* SID.unitprice)
		END as grosstotal,
       P.partygroupid,
       PG.partygroupname

from  salesinvoice SI
LEFT JOIN salesinvoicedetail SID ON SID.salesinvoiceid = SI.id
LEFT JOIN item I ON I.id = SID.itemid
LEFT JOIN party P ON P.id = SI.customerid
LEFT JOIN partygroup PG ON PG.id = P.partygroupid

 Where 
 SI.salesinvoicedate BETWEEN p_fromdate AND p_todate
 AND find_in_set(P.id,p_partyid)
 AND P.partyroleids = 32)as temp; 
 
  END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_customerwisesalewithoutgroupreport_report`(
IN p_fromdate DATE,
IN p_todate DATE,
IN p_partyid varchar(255),
IN p_companyid INT(11)
)
BEGIN

SET @@sql_mode = ' ';
select * ,((grosstotal-discount)+cgstamount+sgstamount+igstamount+utgstamount)as nettotal

from(
select SID.itemid,
	   SI.id as invoiceid,
       SI.referenceno as referenceno,
	   I.itemname,
       I.itemcode as itemcode,
       I.description as des,
       SI.customerid,
       P.partyname,
       SID.quantity,
       SID.unitprice,
       SID.weight,
       SID.discount as discount,
       DATE_FORMAT( SI.salesinvoicedate,'%d/%m/%Y') as salesinvoicedate,
       SI.discount as invoicediscount,
       SID.unitprice as rate,
       IFNULL((SID.cgstamount),0) as cgstamount,
       IFNULL((SID.sgstamount),0) as sgstamount,
	   IFNULL((SID.igstamount),0) as igstamount,
       IFNULL((SID.utgstamount),0) as utgstamount,
       (SID.quantity* SID.unitprice) as grosstotal,
       P.partygroupid,
       PG.partygroupname

from salesinvoice SI
LEFT JOIN salesinvoicedetail SID ON SID.salesinvoiceid = SI.id
LEFT JOIN item I ON I.id = SID.itemid
LEFT JOIN party P ON P.id = SI.customerid
LEFT JOIN partygroup PG ON PG.id = P.partygroupid

 Where 
 SI.salesinvoicedate BETWEEN p_fromdate AND p_todate
 AND   find_in_set( P.id,p_partyid) 
 AND P.partyroleids = 32)as temp; 
 
 END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_dailybrodGrowReport_serch`(
 IN p_breederbatchid INT,
 IN p_shedids varchar(300), 
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_frequency VARCHAR(50),
 IN p_companyid INT)
BEGIN
SET @@sql_mode = '';
SET @maleitemid = null;
SET @femaleitemid = null;
  
  -- for maleid and female id for breederbatch
 
	SELECT  
		 maleitemid,femaleitemid INTO @maleitemid,@femaleitemid
	FROM
		breederbatch
        WHERE 
			id = p_breederbatchid ;

    -- get male female std weight
            
	SELECT  
		 malestandardweight,femalestandardweight 
	FROM
		breedersetting limit 1;

            
-- for weekly transaction
IF( p_frequency = 'weekly') THEN

DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1 
		SELECT  
				BDT.shedid, 
				DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y') as transactiondate,
                BDC.itemid as ffeeditemid, 
                I.itemname as ffeeditem,
				BDM.itemid,
                BS.shedname,
				fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid) as weekno,
                fun_batch_ageindaysbreeder(BDT.transactiondate,p_breederbatchid,p_companyid) as Ageindays,
				E.employeename as Supervisiorname,
                BR.reason as Femalemorreasom,
                fnc_transaction_date_wise_liveqty_ope(BDT.breederbatchid, BDT.shedid, @femaleitemid ,(MIN(BDT.transactiondate)),p_companyid) as femaleopeningbalance,
                fnc_transaction_date_wise_liveqty(BDT.breederbatchid, BDT.shedid, @femaleitemid ,(MAX(BDT.transactiondate)),p_companyid) as femaleclosingbalance,
				fnc_batchshedwise_malefemale_transferedquantityuptodate(BDT.breederbatchid, BDT.shedid, @femaleitemid, (MIN(BDT.transactiondate)),(MAX(BDT.transactiondate)),p_companyid) as femaletransferedquantity,
			    fnc_batchshedwise_malefemale_transfeinquantityuptodate(BDT.breederbatchid, BDT.shedid, @femaleitemid, (MIN(BDT.transactiondate)),(MAX(BDT.transactiondate)),p_companyid) as femaletransferedinquantity,
				fnc_breederfeedopeningbalance((MIN(BDT.transactiondate)),shedid,BDC.itemid,p_companyid) as ffeedopebalance,
                fnc_breederfeedclosingbalance((MAX(BDT.transactiondate)),shedid,BDC.itemid,p_companyid) as ffeedclobalance,
				IFNULL(SUM(BDM.totalmortality),0)femalemortality,
				IFNULL(SUM(BDM.totalculls),0)as femaleculls,
                IFNULL(SUM(BDM.avgweight),0)as femaleactualweight,
                MAX(fnc_cummulative_malefemalemortality(BDT.breederbatchid, BDT.shedid, BDM.itemid ,BDT.transactiondate,p_companyid))as cumulativefemalemortality,
                MAX(fnc_cummulative_malefemaleculls(BDT.breederbatchid, BDT.shedid, BDM.itemid ,BDT.transactiondate,p_companyid))as cumulativefemaleculls,
				fnc_calculate_malefemale_feedconsumptionuptodate((MIN(BDT.transactiondate)),(MAX(BDT.transactiondate)),shedid,BDC.itemid,p_companyid) as femalefeedconsumption
	    FROM breederdailytransaction BDT
        LEFT JOIN employee E ON E.id = BDT.createdby
        LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id AND BDM.itemid = @femaleitemid
		LEFT JOIN breederreasons BR ON BR.id = BDM.mortalityreasonid
        LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id AND BDC.consumptiontypeid = 861 AND BDC.breederitemid = @femaleitemid
        LEFT JOIN item I ON I.id = BDC.itemid
        LEFT JOIN breedershed BS ON BDT.shedid = BS.id
        WHERE
				BDT.breederbatchid = p_breederbatchid
                AND FIND_IN_SET(BDT.shedid, p_shedids)
				AND BDT.transactiondate between p_fromdate AND p_todate
				group by weekno
                order by BDT.breederbatchid, BDT.shedid, BDT.transactiondate, BDM.itemid; 
                
DROP TEMPORARY TABLE IF EXISTS tempmortality2;
CREATE TEMPORARY TABLE tempmortality2               
		SELECT  
				BDT.shedid, 
				DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y') as transactiondate,
                BDC.itemid as mfeeditemid,
                I.itemname as mfeeditem,
				BDM.itemid,
                BR.reason as Malemorreason,
				fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid) as weekno,
                fun_batch_ageindaysbreeder(BDT.transactiondate,p_breederbatchid,p_companyid) as Ageindays,
				fnc_transaction_date_wise_liveqty(BDT.breederbatchid, BDT.shedid, @maleitemid ,(MAX(BDT.transactiondate)),p_companyid) as maleclosingbalance,
                fnc_transaction_date_wise_liveqty_ope(BDT.breederbatchid, BDT.shedid, @maleitemid ,(MIN(BDT.transactiondate)),p_companyid) as maleopeningbalance,
				fnc_batchshedwise_malefemale_transferedquantityuptodate(BDT.breederbatchid, BDT.shedid, @maleitemid, (MIN(BDT.transactiondate)),(MAX(BDT.transactiondate)),p_companyid) as maletransferedquantity,
			    fnc_batchshedwise_malefemale_transfeinquantityuptodate(BDT.breederbatchid, BDT.shedid, @maleitemid, (MIN(BDT.transactiondate)),(MAX(BDT.transactiondate)),p_companyid) as maletransferedinquantity,
				IFNULL(SUM(BDM.totalmortality),0)as malemortality,
                fnc_breederfeedopeningbalance((MIN(BDT.transactiondate)),shedid,BDC.itemid,p_companyid) as mfeedopebalance,
                fnc_breederfeedclosingbalance((MAX(BDT.transactiondate)),shedid,BDC.itemid,p_companyid) as mfeedclobalance,
                IFNULL(SUM(BDM.totalculls),0)as maleculls,
				IFNULL(SUM(BDM.avgweight),0)as maleactualweight,
                MAX(fnc_cummulative_malefemalemortality(BDT.breederbatchid, BDT.shedid, BDM.itemid ,BDT.transactiondate,p_companyid))as cumulativemalemortality,
				MAX(fnc_cummulative_malefemaleculls(BDT.breederbatchid, BDT.shedid, BDM.itemid ,BDT.transactiondate,p_companyid))as cumulativemaleculls,
                fnc_calculate_malefemale_feedconsumptionuptodate((MIN(BDT.transactiondate)),(MAX(BDT.transactiondate)),shedid,BDC.itemid,p_companyid) as malefeedconsumption
	    FROM breederdailytransaction BDT
        LEFT JOIN employee E ON E.id = BDT.createdby
        LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id AND BDM.itemid = @maleitemid
		LEFT JOIN breederreasons BR ON BR.id = BDM.mortalityreasonid
		LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id AND BDC.consumptiontypeid = 861 AND BDC.breederitemid = @maleitemid
        LEFT JOIN item I ON I.id = BDC.itemid
        WHERE
				BDT.breederbatchid = p_breederbatchid
                AND FIND_IN_SET(BDT.shedid, p_shedids)
				AND BDT.transactiondate between p_fromdate AND p_todate
				group by weekno
                order by BDT.shedid, BDT.transactiondate, BDM.itemid; 
                
/*SELECT * FROM tempmortality1 TB1
        LEFT JOIN tempmortality2 TB2 ON TB2.weekno=TB1.weekno AND TB2.shedid=TB1.shedid;*/

DROP TEMPORARY TABLE IF EXISTS tempmortality3;
CREATE TEMPORARY TABLE tempmortality3  

	
 SELECT shedid,transactiondate, weekno,Ageindays,DATE_FORMAT(week_start, '%d/%m/%Y') as week_start,DATE_FORMAT(week_end, '%d/%m/%Y') as week_end,receivedfeed,transferedfeed,cummulativefeedconsumption,
		fnc_breederfeedopeningbalance(transactiondate,shedid,itemid,p_companyid) as totalreceivedfeed FROM(
    SELECT 	    BDT.shedid as shedid, 
				BDC.itemid as itemid,
				MAX(DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y')) as transactiondate,
                
                MAX(BDT.transactiondate) as week_end, 
                MIN(BDT.transactiondate) as week_start,
                -- MAX(DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y')) as week_end,
               --  MIN(DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y')) as week_start,
				fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid) as weekno,
                fun_batch_ageindaysbreeder(BDT.transactiondate,p_breederbatchid,p_companyid) as Ageindays,
                fnc_transaction_date_wise_liveqty_ope(BDT.breederbatchid, BDT.shedid, @femaleitemid ,(MIN(BDT.transactiondate)),p_companyid) as femaleopeningbalance,
               fnc_transaction_date_wise_liveqty_ope(BDT.breederbatchid, BDT.shedid, @femaleitemid ,(MAX(BDT.transactiondate)),p_companyid) as femaleclosingbalance,
                -- fnc_transaction_date_wise_liveqty_ope(BDT.breederbatchid, BDT.shedid, BDC.itemid,(MAX(BDT.transactiondate)),p_companyid) as femaleclosingbalance,
                SUM(fnc_calculate_received_feed(BDT.shedid,BDC.itemid, BDT.transactiondate, p_companyid)) as receivedfeed,
				SUM(fnc_calculate_transfered_feed(BDT.shedid,BDC.itemid, BDT.transactiondate,p_companyid)) as transferedfeed,
            	MAX(fnc_cummulativefeed(BDT.breederbatchid,BDC.itemid, BDT.shedid,BDT.transactiondate, p_companyid)) as cummulativefeedconsumption
                
                
	    FROM breederdailytransaction BDT
        LEFT JOIN employee E ON E.id = BDT.createdby
        LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id AND BDC.consumptiontypeid = 861 
        
        WHERE
				BDT.breederbatchid = p_breederbatchid
                AND FIND_IN_SET(BDT.shedid, p_shedids)
				AND BDT.transactiondate between p_fromdate AND p_todate
				group by  weekno
                order by BDT.shedid, BDT.transactiondate) as temp ;
	
		
		SELECT * FROM tempmortality1 TB1
         LEFT JOIN tempmortality2 TB2 ON TB2.weekno=TB1.weekno AND TB2.shedid=TB1.shedid
         LEFT JOIN tempmortality3 TB3 ON TB3.weekno=TB1.weekno AND TB3.shedid=TB1.shedid;
   END IF;
  
-- for daily transaction

IF(p_frequency = 'daily')then
	DROP TEMPORARY TABLE IF EXISTS tempmortality1;
	CREATE TEMPORARY TABLE tempmortality1
	SELECT  
			BDT.shedid, 
            BDT.id as dailytransactionid,
			I.itemname as ffeeditem,
            E.employeename as Supervisiorname,
            BR.reason as Femalemorreasom,
            fun_batch_ageindaysbreeder(BDT.transactiondate,p_breederbatchid,p_companyid) as Ageindays,
            fun_batch_ageinweek(BDT.transactiondate,p_breederbatchid,p_companyid) as weekno,
			DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y') as transactiondate,
			BDM.itemid,
            BS.shedname,
            I.itemname,
			fnc_transaction_date_wise_liveqty_ope(BDT.breederbatchid, BDT.shedid, @femaleitemid ,BDT.transactiondate,p_companyid) as femaleopeningbalance,
            fnc_transaction_date_wise_liveqty(BDT.breederbatchid, BDT.shedid, @femaleitemid ,BDT.transactiondate,p_companyid) as femaleclosingbalance,
		    fnc_batchshedwise_malefemale_transferedquantity(BDT.breederbatchid, BDT.shedid, BB.femaleitemid, BDT.transactiondate,p_companyid) as femaletransferedquantity,
			fnc_batchshedwise_malefemale_transferedinquantity(BDT.breederbatchid, BDT.shedid, BB.femaleitemid, BDT.transactiondate,p_companyid) as femaletransferedinquantity,
		    fnc_breederfeedopeningbalance(BDT.transactiondate,shedid,BDC.itemid,p_companyid) as ffeedopebalance,
            fnc_breederfeedclosingbalance(BDT.transactiondate,shedid,BDC.itemid,p_companyid) as ffeedclobalance,
            IFNULL(BDM.totalmortality,0) as femalemortality,
			IFNULL(BDM.totalculls,0) as femaleculls,
			IFNULL(BDM.avgweight,0) as femaleactualweight,
			fnc_breederfeedopeningbalance(BDT.transactiondate,BDT.shedid,BDC.itemid , p_companyid) as totalreceivedfeed,
			fnc_calculate_transfered_feed(BDT.shedid,BDC.itemid, BDT.transactiondate,  p_companyid) as transferedfeed,
			fnc_cummulative_malefemalemortality(p_breederbatchid,p_shedids, BB.femaleitemid ,BDT.transactiondate,p_companyid)as cumulativefemalemortality,
			fnc_cummulative_malefemaleculls(p_breederbatchid,p_shedids, BB.femaleitemid,BDT.transactiondate,p_companyid)as cumulativefemaleculls,
			fnc_calculate_malefemale_feedconsumption(BDT.id,BB.femaleitemid,BDC.itemid) as femalefeedconsumption,
            fnc_cummulativefeed(BDT.breederbatchid,BDC.itemid, BDT.shedid,BDT.transactiondate, p_companyid) as cummulativefeedconsumption
               
	    FROM breederbatch BB
		LEFT JOIN breederdailytransaction BDT ON  BDT.breederbatchid = BB.id
        LEFT JOIN employee E ON E.id = BDT.createdby
        LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id AND BDM.itemid = @femaleitemid
        LEFT JOIN breederreasons BR ON BR.id = BDM.mortalityreasonid
        LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id AND BDC.consumptiontypeid = 861  AND  BDC.breederitemid = @femaleitemid
        LEFT JOIN breedershed BS ON BDT.shedid = BS.id
        LEFT JOIN item I ON I.id = BDC.itemid
        
        WHERE
			    BDT.breederbatchid = p_breederbatchid
                AND FIND_IN_SET(BDT.shedid, p_shedids)
				AND BDT.transactiondate between p_fromdate AND p_todate
                order by BDT.breederbatchid, BDT.shedid, BDT.transactiondate, BDM.itemid; 
                
              --   select  * from tempmortality1;
                
DROP TEMPORARY TABLE IF EXISTS tempmortality2;
CREATE TEMPORARY TABLE tempmortality2               
		SELECT  
				BDT.shedid,
                I.itemname as mfeeditem,
				E.employeename as Supervisiorname,
                BR.reason as Malemorreason,
                fun_batch_ageindaysbreeder(BDT.transactiondate,p_breederbatchid,p_companyid) as Ageindays,
                Ageinweek,
                -- Ageindays,
				DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y') as transactiondate,
				BDM.itemid,
				fnc_transaction_date_wise_liveqty_ope(BDT.breederbatchid, BDT.shedid, @maleitemid ,BDT.transactiondate,p_companyid) as maleopeningbalance,
                fnc_transaction_date_wise_liveqty(BDT.breederbatchid, BDT.shedid, @maleitemid ,BDT.transactiondate,p_companyid) as maleclosingbalance,
			    fnc_batchshedwise_malefemale_transferedquantity(BDT.breederbatchid, BDT.shedid, @maleitemid, BDT.transactiondate,p_companyid) as maletransferedquantity,
			    fnc_batchshedwise_malefemale_transferedinquantity(BDT.breederbatchid, BDT.shedid, @maleitemid, BDT.transactiondate,p_companyid) as maletransferedinquantity,
				fnc_breederfeedopeningbalance(BDT.transactiondate,shedid,BDC.itemid,p_companyid) as mfeedopebalance,
                fnc_breederfeedclosingbalance(BDT.transactiondate,shedid,BDC.itemid,p_companyid) as mfeedclobalance,
                IFNULL(BDM.totalmortality,0) as malemortality,
                IFNULL(BDM.totalculls,0) as maleculls,
				IFNULL(BDM.avgweight,0) as maleactualweight,
                fnc_cummulative_malefemalemortality(p_breederbatchid,p_shedids,BB.maleitemid,BDT.transactiondate,p_companyid)as cumulativemalemortality,
				fnc_cummulative_malefemaleculls(p_breederbatchid,p_shedids,BB.maleitemid,BDT.transactiondate,p_companyid)as cumulativemaleculls,
                fnc_calculate_malefemale_feedconsumption(BDT.id,BB.maleitemid,BDC.itemid) as malefeedconsumption
                
	    FROM breederbatch BB
			   -- LEFT JOIN breederbatch BB ON BB.id = BDT.breederbatchid
               LEFT JOIN breederdailytransaction BDT ON  BDT.breederbatchid = BB.id
               LEFT JOIN employee E ON E.id = BDT.createdby
               LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id AND BDM.itemid = @maleitemid
			   LEFT JOIN breederreasons BR ON BR.id = BDM.mortalityreasonid
			   LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id AND BDC.consumptiontypeid = 861 AND BDC.breederitemid = @maleitemid
			   LEFT JOIN item I ON I.id = BDC.itemid
        WHERE
				BDT.breederbatchid = p_breederbatchid
                AND FIND_IN_SET(BDT.shedid, p_shedids)
				AND BDT.transactiondate between p_fromdate AND p_todate
                order by BDT.shedid, BDT.transactiondate, BDM.itemid; 
                
                
                
 DROP TEMPORARY TABLE IF EXISTS tempmortality3;
CREATE TEMPORARY TABLE tempmortality3  
SELECT shedid,transactiondate,receivedfeed,transferedfeed,cummulativefeedconsumption,
fnc_breederfeedopeningbalance(transactiondate,shedid,itemid, p_companyid) as totalreceivedfeed FROM(
    SELECT 	    BDT.shedid as shedid, 
				BDC.itemid as itemid,
				MAX(DATE_FORMAT(BDT.transactiondate,'%d/%m/%Y')) as transactiondate,
                -- MAX(DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y')) as month_end,
			    -- MIN(DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y')) as month_start,
                -- MONTHNAME(BDT.transactiondate) as Month,
				-- fun_batch_ageinmonth(BDT.transactiondate,BDT.breederbatchid,p_companyid) as monthno,
                fnc_calculate_received_feed(BDT.shedid,BDC.itemid, BDT.transactiondate,  p_companyid) as receivedfeed,
				SUM(fnc_calculate_transfered_feed(BDT.shedid,BDC.itemid, BDT.transactiondate,  p_companyid)) as transferedfeed,
            	MAX(fnc_cummulativefeed(BDT.breederbatchid,BDC.itemid, BDT.shedid,BDT.transactiondate, p_companyid)) as cummulativefeedconsumption
                
                
	    FROM breederdailytransaction BDT
        LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id AND BDC.consumptiontypeid = 861 
        
        WHERE
				BDT.breederbatchid = p_breederbatchid
                AND FIND_IN_SET(BDT.shedid, p_shedids)
				AND BDT.transactiondate between p_fromdate AND p_todate
				group by BDT.transactiondate
                order by BDT.shedid, BDT.transactiondate) as temp ;
	
		/*SELECT * FROM tempmortality1 TB1
         LEFT JOIN tempmortality2 TB2 ON TB2.monthno=TB1.monthno AND TB2.shedid=TB1.shedid
         LEFT JOIN tempmortality3 TB3 ON TB3.monthno=TB1.monthno AND TB3.shedid=TB1.shedid;*/
         
		SELECT * FROM tempmortality1 TB1
        LEFT JOIN tempmortality2 TB2 ON TB2.transactiondate=TB1.transactiondate AND TB2.shedid=TB1.shedid
        LEFT JOIN tempmortality3 TB3 ON TB3.transactiondate=TB1.transactiondate AND TB3.shedid=TB1.shedid;

                
  END IF;
  
  -- for monthly transaction
IF( p_frequency = 'monthly') THEN
	DROP TEMPORARY TABLE IF EXISTS tempmortality1;
	CREATE TEMPORARY TABLE tempmortality1
		SELECT  
				BDT.shedid, 
				DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y') as transactiondate,
				BDM.itemid,
				BDC.itemid as mfeeditemid, 
                I.itemname as ffeeditem,
                E.employeename as Supervisiorname,
                BR.reason as Femalemorreasom,
                BS.shedname,
				-- fun_batch_ageinmonth(BDT.transactiondate,BDT.breederbatchid,p_companyid) as monthno,
                MONTH(BDT.transactiondate)as monthno,
                fnc_transaction_date_wise_liveqty_ope(BDT.breederbatchid, BDT.shedid, @femaleitemid ,(MIN(BDT.transactiondate)),p_companyid) as femaleopeningbalance,
                fnc_transaction_date_wise_liveqty(BDT.breederbatchid, BDT.shedid, @femaleitemid ,(MAX(BDT.transactiondate)),p_companyid) as femaleclosingbalance,
                fnc_batchshedwise_malefemale_transferedquantityuptodate(BDT.breederbatchid, BDT.shedid, @femaleitemid, (MIN(BDT.transactiondate)),(MAX(BDT.transactiondate)),p_companyid) as femaletransferedquantity,
			    fnc_batchshedwise_malefemale_transfeinquantityuptodate(BDT.breederbatchid, BDT.shedid, @femaleitemid, (MIN(BDT.transactiondate)),(MAX(BDT.transactiondate)),p_companyid) as femaletransferedinquantity,
                fnc_breederfeedopeningbalance((MIN(BDT.transactiondate)),shedid,BDC.itemid,p_companyid) as ffeedopebalance,
				fnc_breederfeedclosingbalance((MAX(BDT.transactiondate)),shedid,BDC.itemid,p_companyid) as ffeedclobalance,
				IFNULL(SUM(BDM.totalmortality),0)femalemortality,
				IFNULL(SUM(BDM.totalculls),0)as femaleculls,
                IFNULL(SUM(BDM.avgweight),0)as femaleactualweight,
                MAX(fnc_cummulative_malefemalemortality(BDT.breederbatchid, BDT.shedid, BDM.itemid ,BDT.transactiondate,p_companyid))as cumulativefemalemortality,
                MAX(fnc_cummulative_malefemaleculls(BDT.breederbatchid, BDT.shedid, BDM.itemid ,BDT.transactiondate,p_companyid))as cumulativefemaleculls,
			    fnc_calculate_malefemale_feedconsumptionuptodate((MIN(BDT.transactiondate)),(MAX(BDT.transactiondate)),shedid,BDC.itemid,p_companyid) as femalefeedconsumption
	    FROM breederdailytransaction BDT
        LEFT JOIN employee E ON E.id = BDT.createdby
        LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id AND BDM.itemid = @femaleitemid
        LEFT JOIN breederreasons BR ON BR.id = BDM.mortalityreasonid
        LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id AND BDC.consumptiontypeid = 861 AND BDC.breederitemid = @femaleitemid
        LEFT JOIN item I ON I.id = BDC.itemid
        LEFT JOIN breedershed BS ON BDT.shedid = BS.id
        WHERE
				BDT.breederbatchid = p_breederbatchid
                AND FIND_IN_SET(BDT.shedid, p_shedids)
				AND BDT.transactiondate between p_fromdate AND p_todate
				group by monthno
                order by BDT.breederbatchid, BDT.shedid, BDT.transactiondate, BDM.itemid; 
                
DROP TEMPORARY TABLE IF EXISTS tempmortality2;
CREATE TEMPORARY TABLE tempmortality2               
		SELECT  
				BDT.shedid, 
				DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y') as transactiondate,
				BDM.itemid,
				BDC.itemid as mfeeditemid,
                I.itemname as mfeeditem,
				-- fun_batch_ageinmonth(BDT.transactiondate,BDT.breederbatchid,p_companyid) as monthno,
                MONTH(BDT.transactiondate)as monthno,
                fnc_transaction_date_wise_liveqty_ope(p_breederbatchid,p_shedids, @maleitemid ,(MIN(BDT.transactiondate)),p_companyid) as maleopeningbalance,
               fnc_transaction_date_wise_liveqty(p_breederbatchid,p_shedids, @maleitemid ,(MAX(BDT.transactiondate)),p_companyid) as maleclosingbalance,
                  -- New column added
               fnc_batchshedwise_malefemale_transferedquantityuptodate(BDT.breederbatchid, BDT.shedid, @maleitemid, (MIN(BDT.transactiondate)),(MAX(BDT.transactiondate)),p_companyid) as maletransferedquantity,
			   fnc_batchshedwise_malefemale_transfeinquantityuptodate(BDT.breederbatchid, BDT.shedid, @maleitemid, (MIN(BDT.transactiondate)),(MAX(BDT.transactiondate)),p_companyid) as maletransferedinquantity,
			   fnc_breederfeedopeningbalance((MIN(BDT.transactiondate)),shedid,BDC.itemid,p_companyid) as mfeedopebalance,
			   fnc_breederfeedclosingbalance((MAX(BDT.transactiondate)),shedid,BDC.itemid,p_companyid) as mfeedclobalance,
			   IFNULL(SUM(BDM.totalmortality),0)as malemortality,
			   IFNULL(SUM(BDM.totalculls),0)as maleculls,
			   IFNULL(SUM(BDM.avgweight),0)as maleactualweight,
			   MAX(fnc_cummulative_malefemalemortality(BDT.breederbatchid, BDT.shedid, BDM.itemid ,BDT.transactiondate,p_companyid))as cumulativemalemortality,
			   MAX(fnc_cummulative_malefemaleculls(BDT.breederbatchid, BDT.shedid, BDM.itemid ,BDT.transactiondate,p_companyid))as cumulativemaleculls,
			   fnc_calculate_malefemale_feedconsumptionuptodate((MIN(BDT.transactiondate)),(MAX(BDT.transactiondate)),shedid,BDC.itemid,p_companyid) as malefeedconsumption
               
	    FROM breederdailytransaction BDT
		LEFT JOIN employee E ON E.id = BDT.createdby
        LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id AND BDM.itemid = @maleitemid
        LEFT JOIN breederreasons BR ON BR.id = BDM.mortalityreasonid
		LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id AND BDC.consumptiontypeid = 861 AND BDC.breederitemid = @maleitemid
		LEFT JOIN item I ON I.id = BDC.itemid
        WHERE
				BDT.breederbatchid = p_breederbatchid
                AND FIND_IN_SET(BDT.shedid, p_shedids)
				AND BDT.transactiondate between p_fromdate AND p_todate
				group by monthno
                order by BDT.shedid, BDT.transactiondate, BDM.itemid; 


DROP TEMPORARY TABLE IF EXISTS tempmortality3;
CREATE TEMPORARY TABLE tempmortality3  
SELECT shedid,transactiondate,Month,monthno,month_end,month_start,receivedfeed,transferedfeed,cummulativefeedconsumption,
fnc_breederfeedopeningbalance(transactiondate,shedid,itemid, p_companyid) as totalreceivedfeed FROM(
    SELECT 	    BDT.shedid as shedid, 
				BDC.itemid as itemid,
				MAX(DATE_FORMAT(BDT.transactiondate,'%d/%m/%Y')) as transactiondate,
                MAX(DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y')) as month_end,
                MIN(DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y')) as month_start,
                MONTHNAME(BDT.transactiondate) as Month,
				MONTH(BDT.transactiondate)as monthno,
				fun_batch_ageinmonth(BDT.transactiondate,BDT.breederbatchid,p_companyid) as monthno1,
                SUM(fnc_calculate_received_feed(BDT.shedid,BDC.itemid, BDT.transactiondate,  p_companyid)) as receivedfeed,
				SUM(fnc_calculate_transfered_feed(BDT.shedid,BDC.itemid, BDT.transactiondate,  p_companyid)) as transferedfeed,
            	MAX(fnc_cummulativefeed(BDT.breederbatchid,BDC.itemid, BDT.shedid,BDT.transactiondate, p_companyid)) as cummulativefeedconsumption
                
                
	    FROM breederdailytransaction BDT
        LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id AND BDC.consumptiontypeid = 861 
        WHERE
				BDT.breederbatchid = p_breederbatchid
                AND FIND_IN_SET(BDT.shedid, p_shedids)
				AND BDT.transactiondate between p_fromdate AND p_todate
				group by Month
                order by BDT.shedid, BDT.transactiondate) as temp ;
	
		SELECT * FROM tempmortality1 TB1
         LEFT JOIN tempmortality2 TB2 ON TB2.monthno=TB1.monthno AND TB2.shedid=TB1.shedid
         LEFT JOIN tempmortality3 TB3 ON TB3.monthno=TB1.monthno AND TB3.shedid=TB1.shedid;
   END IF;
    END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_dailyconsumption_report`(
 IN p_batchid VARCHAR(100),
 IN p_fromdate Date,
 IN p_todate Date,
 IN p_companyid INT)
BEGIN

	SET @@sql_mode = ' ';
        
	SELECT 
		BC.itemid,
		IG.id as itemgroupid,
		IG.groupname,
		I.itemname,
        BDT.breederbatchid,
        BB.batchname,
        BDT.shedid,
        BDT.transactiondate,
		DATE_FORMAT(BDT.transactiondate,'%d/%m/%Y')  as `date`,
		fnc_transaction_date_wise_liveqty_ope(BDT.breederbatchid, BDT.shedid, BC.itemid ,BDT.transactiondate,p_companyid) as openingbalance,
		fnc_transaction_date_wise_liveqty(BDT.breederbatchid, BDT.shedid, BC.itemid ,BDT.transactiondate,p_companyid) as closingbalancefinal,
		-- SUM(fnc_breederfeedopeningbalance(BDT.transactiondate,BDT.shedid, BC.itemid, p_companyid)) as openingbalance,
		fnc_calculate_received_feed(BDT.shedid,BC.itemid,BDT.transactiondate, p_companyid) as receivedquantity,
		fnc_calculate_transfered_feed(BDT.shedid, BC.itemid, BDT.transactiondate, p_companyid) as outquantity,
		SUM(BC.quantity) as consumedquantity,
        fnc_calculate_cumconsumedquantity(BDT.breederbatchid, BC.itemid, BDT.transactiondate, p_companyid) as cumconsumedquantity
        
	FROM breederdailyconsumption BC
		 LEFT JOIN breederdailytransaction BDT ON BC.breederdailytransactionid = BDT.id
         LEFT JOIN breederbatch BB ON BB.id = BDT.breederbatchid
         LEFT JOIN item I ON I.id = BC.itemid
         LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
 
	WHERE
        FIND_IN_SET(BDT.breederbatchid,p_batchid)  AND
		BDT.transactiondate BETWEEN  p_fromdate AND p_todate AND
        BDT.companyid = p_companyid
      group by BDT.breederbatchid,BDT.shedid, BDT.transactiondate, BC.itemid
	ORDER BY  
         BDT.transactiondate;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_dailytransactionforlaying_saveje`(	
	IN p_breederdailytransactionid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	
    DROP TABLE IF EXISTS tempmortality;
     BEGIN 
        
        -- Journal entry detail for feed medicine vaccine ledgerid
		   SET @mortalityledgerid = null;
           SET @feedledgerid = null;
           SET @vaccineledgerid = null;
           SET @vitaminledgerid = null;
           SET @medicineledgerid = null;
           SET @cogsledgerid = null;
           SET @defaultmalechickid = null;
           SET @defaultfemalechickid = null;
           SET @defaultmalechickcost = null;
           SET @defaultfemalechickcost = null;
           SET @breederbatchid = null;
		   SET @shedid = null;
           SET @transactiondate = null;
           SET @biredprice = null;
		   SET @WIPledgerid = null;
           
		   SELECT WIPledgerid,medicineledgerid,feedledgerid,vaccineledgerid, vitaminledgerid, mortalityledgerid
		   INTO @WIPledgerid,@medicineledgerid, @feedledgerid,@vaccineledgerid,@vitaminledgerid, @mortalityledgerid
		   FROM breedersetting LIMIT 1;
           
            SELECT breederbatchid,shedid,transactiondate
                         INTO @breederbatchid, @shedid,@transactiondate
                         FROM breederdailytransaction WHERE id = p_breederdailytransactionid;
                         
			SELECT maleitemid, femaleitemid
           INTO @defaultmalechickid, @defaultfemalechickid
           FROM breederbatch WHERE id = @breederbatchid;
                         
						-- calculate bired price
		-- 	SELECT fun_live_biredcost(@breederbatchid,@shedid,p_companyid,@transactiondate) INTO @biredprice;
          SELECT fun_purchse_biredcost (@breederbatchid,p_companyid,@transactiondate) INTO @biredprice;
          
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
                NULL,
                1300,
                NULL,
                @transactiondate,
                NULL,
				(SELECT branchid FROM location WHERE id = (SELECT locationid FROM breederdailytransaction WHERE id = p_breederdailytransactionid limit 1)),
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                721,
				NULL,
                'Breeder daily transaction after 24 week JE',
                NULL,
                NULL,
                NULL,
                p_breederdailytransactionid,
                  'Breeder daily transaction after 24 week JE',
                p_companyid,
                p_userid,
                @jeid
           );
           
           	-- JE for breeder daily consumption
			SET @row_number = 0;
		    DROP TABLE IF EXISTS tempconsumption;
			CREATE TEMPORARY TABLE tempconsumption
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemledgerid, itemid FROM(
            
				SELECT itemvalue as totalcost,
                (SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                itemid
                
                FROM breederdailyconsumption 
                WHERE breederdailytransactionid = p_breederdailytransactionid
                
			) as tbldailydetail;
            
            
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempconsumption INTO n;
				
					WHILE i<n DO 
					
                    SET @totalcost = null;
					SET @itemledgerid = null;
                    SET @itemid = null;
                    
						select totalcost, itemledgerid, itemid into @totalcost, @itemledgerid, @itemid from tempconsumption where num = i+1;
                    
						-- insert JE detail
                       
                         
                         -- Credit to consumed item - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
										NULL,
                                        @jeid,
                                        @itemledgerid,
                                        0,
                                        NULL,
                                        @breederbatchid,
                                        NULL,
                                        NULL,
										NULL,
										NULL,
                                        NULL,
                                        0,
                                        @totalcost,
                                        NULL,
                                        NULL,
										NULL,
                                        @itemid,
										NULL,
                                        'Breeder daily transaction for laying',
										p_companyid,
										p_userid,
										@jedetailid1
						 );
                         
			SET i = i + 1;
			END WHILE;
			End;
            
            -- debit to consumed feed - ledgerid
            SET @row_number = 0;
		    DROP TABLE IF EXISTS tempfeedconsumption;
			CREATE TEMPORARY TABLE tempfeedconsumption
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemledgerid, itemid FROM(
            
				SELECT itemvalue as totalcost,
                (SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                itemid
                
                FROM breederdailyconsumption 
                WHERE breederdailytransactionid = p_breederdailytransactionid
                AND consumptiontypeid = 861
                
			) as tblfeeddailydetail;
            
            
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempfeedconsumption INTO n;
				
					WHILE i<n DO 
					
                    SET @totalcost = null;
					SET @itemledgerid = null;
                    SET @fitemid = null;
                    
						select totalcost, itemledgerid, itemid into @totalcost, @itemledgerid, @fitemid from tempfeedconsumption where num = i+1;
                    
						-- insert JE detail
                         
                         -- Credit to consumed item feed - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
										NULL,
                                        @jeid,
                                        @feedledgerid,
                                        0,
                                        NULL,
                                        @breederbatchid,
                                        NULL,
                                        NULL,
										NULL,
										NULL,
                                        NULL,
                                        @totalcost,
                                        0,
                                        NULL,
                                        NULL,
										NULL,
                                        @fitemid,
										NULL,
                                        'Breeder daily transaction for feed consumption',
										p_companyid,
										p_userid,
										@jedetailid1
						 );
                         
			SET i = i + 1;
			END WHILE;
			End;
            
            
               -- debit to consumed vitamin - ledgerid
            SET @row_number = 0;
		    DROP TABLE IF EXISTS tempvitaminconsumption;
			CREATE TEMPORARY TABLE tempvitaminconsumption
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemledgerid, itemid FROM(
            
				SELECT itemvalue as totalcost,
                (SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                itemid
                
                FROM breederdailyconsumption 
                WHERE breederdailytransactionid = p_breederdailytransactionid
                AND consumptiontypeid = 864
                
			) as tblvitdailydetail;
            
            
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempvitaminconsumption INTO n;
				
					WHILE i<n DO 
					
                    SET @totalcost = null;
					SET @itemledgerid = null;
                    SET @vitemid = null;
                    
						select totalcost, itemledgerid,itemid into @totalcost, @itemledgerid, @vitemid from tempvitaminconsumption where num = i+1;
                    
					
                         -- Credit to consumed item vitamin - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
										NULL,
                                        @jeid,
                                        @vitaminledgerid,
                                        0,
                                        NULL,
                                        (SELECT breederbatchid FROM breederdailytransaction WHERE id = p_breederdailytransactionid),
                                        NULL,
                                        NULL,
										NULL,
										NULL,
                                        NULL,
                                        @totalcost,
                                        0,
                                        NULL,
                                        NULL,
										NULL,
                                        @vitemid,
										NULL,
                                        'Breeder daily transaction for vitamin consumption',
										p_companyid,
										p_userid,
										@jedetailid1
						 );
                         
			SET i = i + 1;
			END WHILE;
			End;
            
              -- debit to consumed vaccine - ledgerid
            SET @row_number = 0;
		    DROP TABLE IF EXISTS tempvaccineconsumption;
			CREATE TEMPORARY TABLE tempvaccineconsumption
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemledgerid, itemid FROM(
            
				SELECT itemvalue as totalcost,
                (SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                itemid
                
                FROM breederdailyconsumption 
                WHERE breederdailytransactionid = p_breederdailytransactionid
                AND consumptiontypeid = 863
                
			) as tblvacdailydetail;
            
            
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempvaccineconsumption INTO n;
				
					WHILE i<n DO 
					
                    SET @totalcost = null;
					SET @itemledgerid = null;
                    SET @vcitemid = null;
                    
						select totalcost, itemledgerid, itemid into @totalcost, @itemledgerid,@vcitemid from tempvaccineconsumption where num = i+1;
                    
						-- insert JE detail
                         
                        
                         
                         -- Credit to consumed item vaccine- Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
										NULL,
                                        @jeid,
                                        @vaccineledgerid,
                                        0,
                                        NULL,
                                        @breederbatchid,
                                        NULL,
                                        NULL,
										NULL,
										NULL,
                                        NULL,
                                        @totalcost,
                                        0,
                                        NULL,
                                        NULL,
										NULL,
                                        @vcitemid,
										NULL,
                                        'Breeder daily transaction for vaccine consumption',
										p_companyid,
										p_userid,
										@jedetailid1
						 );
                         
			SET i = i + 1;
			END WHILE;
			End;
            
              -- debit to consumed medicine - ledgerid
            SET @row_number = 0;
		    DROP TABLE IF EXISTS tempmedicineconsumption;
			CREATE TEMPORARY TABLE tempmedicineconsumption
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemledgerid, itemid FROM(
            
				SELECT itemvalue as totalcost,
                (SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                itemid
                
                FROM breederdailyconsumption 
                WHERE breederdailytransactionid = p_breederdailytransactionid
                AND consumptiontypeid = 862
                
			) as tblmeddailydetail;
            
            
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempmedicineconsumption INTO n;
				
					WHILE i<n DO 
					
                    SET @totalcost = null;
					SET @itemledgerid = null;
                    SET @mitemid = null;
                    
						select totalcost, itemledgerid, itemid into @totalcost, @itemledgerid, @mitemid from tempmedicineconsumption where num = i+1;
                    
						-- insert JE detail
                         
                     
                         
                         -- Credit to consumed item medicine- Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
										NULL,
                                        @jeid,
                                        @medicineledgerid,
                                        0,
                                        NULL,
                                        @breederbatchid,
                                        NULL,
                                        NULL,
										NULL,
										NULL,
                                        NULL,
                                        @totalcost,
                                        0,
                                        NULL,
                                        NULL,
										NULL,
                                        @mitemid,
										NULL,
                                        'Breeder daily transaction for medicine consumption',
										p_companyid,
										p_userid,
										@jedetailid1
						 );
                         
			SET i = i + 1;
			END WHILE;
			End;
            
               -- JE for breeder daily mortality
                
                SET @row_number1 = 0;
   
				CREATE TEMPORARY TABLE tempmortality
				
				SELECT (@row_number1:=@row_number1 + 1) AS num1, quantity, itemledgerid, itemid FROM(
				
					SELECT (totalculls + totalmortality) as quantity,
					(SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                    itemid
					
					FROM breederdailymortality 
					WHERE breederdailytransactionid = p_breederdailytransactionid
					
				) as tbldaily1detail1;
				
				
				
				BEGIN
					DECLARE n1 INT DEFAULT 0;
					DECLARE j INT DEFAULT 0;
					SELECT COUNT(*) FROM tempmortality INTO n1;
					
						WHILE j<n1 DO 
                        
							 SET @quantity = null;
							 SET @itemledgerid1 = null;
                             SET @itemid1 = null;
						
							select quantity, itemledgerid, itemid into @quantity, @itemledgerid1, @itemid1 from tempmortality where num1 = j+1;
						
							-- insert JE detail
							 
							 -- Credit to culls and mortality item - Ledger
                             
                             -- male chick
							 IF(@itemid1 = @defaultmalechickid) THEN
								 SET @jedetailid3 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@WIPledgerid,
									0,
                                    NULL,
									@breederbatchid,
									NULL,
                                    NULL,
									NULL,
									NULL,
                                    NULL,
									0,
									(@quantity * @biredprice),
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid3
								 );
								 
								 -- Debit to COGS - Ledger
								
								 SET @jedetailid2 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@mortalityledgerid,
									0,
                                    NULL,
									@breederbatchid,
									NULL,
                                    NULL,
									NULL,
									NULL,
                                    NULL,
									(@quantity * @biredprice),
									0,
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid2
								 );
                                 
                                 END IF;
                                 
                                 -- female chick
                                 IF(@itemid1 = @defaultfemalechickid) THEN
								 SET @jedetailid3 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@WIPledgerid,
									0,
                                    NULL,
									@breederbatchid,
									NULL,
                                    NULL,
									NULL,
									NULL,
                                    NULL,
									0,
									(@quantity * @biredprice),
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid3
								 );
								 
								 -- Debit to COGS - Ledger
								
								 SET @jedetailid2 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@mortalityledgerid,
									0,
                                    NULL,
									@breederbatchid,
									NULL,
                                    NULL,
									NULL,
									NULL,
                                    NULL,
									(@quantity * @biredprice),
									0,
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid2
								 );
                                 
                                 END IF;
							
							SET j = j + 1;
						END WHILE;
					End;
		END;
        
   call spc_dailytransaction_birdratediff_saveje(p_breederdailytransactionid,p_companyid,p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_dailytransaction_birdratediff_saveje`(	
	IN p_breederdailytransactionid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN
    DROP TABLE IF EXISTS tempmortality;
     BEGIN 
        
        -- Journal entry detail for feed medicine vaccine ledgerid
		   SET @mortalityledgerid = null;
           SET @defaultmalechickid = null;
           SET @defaultfemalechickid = null;
           SET @breederbatchid = null;
		   SET @shedid = null;
           SET @newtransactiondate = null;
           SET @biredprice = null;
		   SET @WIPledgerid = null;
           SET @live_birdcost = null;
           SET @birdratediff = null;
           
		   SELECT WIPledgerid,mortalityledgerid
		   INTO @WIPledgerid, @mortalityledgerid
		   FROM breedersetting LIMIT 1;
           
            SELECT breederbatchid,shedid,transactiondate
                         INTO @breederbatchid, @shedid,@newtransactiondate
                         FROM breederdailytransaction WHERE id = p_breederdailytransactionid;
		
			SELECT maleitemid, femaleitemid
           INTO @defaultmalechickid, @defaultfemalechickid
           FROM breederbatch WHERE id = @breederbatchid;
                         
						-- calculate bired price
		  SELECT fnc_breederbatchwise_bird_cost(@breederbatchid,@newtransactiondate,p_companyid) INTO @live_birdcost;
          SELECT fun_purchse_biredcost (@breederbatchid,p_companyid,@newtransactiondate) INTO @biredprice;
          
           SET @jeid = null;
           
           
           CALL spc_journalentry_save(
				NULL,
                NULL,
                1300,
                NULL,
                @newtransactiondate,
                NULL,
				(SELECT branchid FROM location WHERE id = (SELECT locationid FROM breederdailytransaction WHERE id = p_breederdailytransactionid limit 1)),
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                341,
				NULL,
                'Breeder daily transaction JE after 24 week',
                NULL,
                NULL,
                NULL,
                p_breederdailytransactionid,
                'Breeder daily transaction JE after 24 week',
                p_companyid,
                p_userid,
                @jeid
           );
           
           
         
               -- JE for breeder daily mortality
                
                SET @row_number1 = 0;
   
				CREATE TEMPORARY TABLE tempmortality
				
				SELECT (@row_number1:=@row_number1 + 1) AS num1, quantity, itemledgerid, itemid FROM(
				
					SELECT (totalculls + totalmortality) as quantity,
					(SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                    itemid
					
					FROM breederdailymortality 
					WHERE breederdailytransactionid = p_breederdailytransactionid
					
				) as tbldaily1detail1;
				
				
				
				BEGIN
					DECLARE n1 INT DEFAULT 0;
					DECLARE j INT DEFAULT 0;
					SELECT COUNT(*) FROM tempmortality INTO n1;
					
						WHILE j<n1 DO 
                        
							 SET @quantity = null;
							 SET @itemledgerid1 = null;
                             SET @itemid1 = null;
						
							select quantity, itemid into @quantity, @itemid1 from tempmortality where num1 = j+1;
						
							-- insert JE detail
							 
							 -- Credit to culls and mortality item - Ledger
                             if(@live_birdcost>@biredprice) THEN 
							  SELECT (@live_birdcost - @biredprice) INTO @birdratediff ;
							  
							 
                             -- male chick
							 IF(@itemid1 = @defaultmalechickid) THEN
								 SET @jedetailid3 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@WIPledgerid,
									0,
                                    NULL,
									@breederbatchid,
									NULL,
                                    NULL,
									NULL,
									NULL,
                                    NULL,
									0,
									(@quantity * @birdratediff),
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid3
								 );
								 
								 -- Debit to COGS - Ledger
								
								 SET @jedetailid2 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@mortalityledgerid,
									0,
                                    NULL,
									@breederbatchid,
									NULL,
                                    NULL,
									NULL,
									NULL,
                                    NULL,
									(@quantity * @birdratediff),
									0,
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid2
								 );
                                 
                                 END IF;
                                 
                                 -- female chick
                                 IF(@itemid1 = @defaultfemalechickid) THEN
								 SET @jedetailid3 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@WIPledgerid,
									0,
                                    NULL,
									@breederbatchid,
									NULL,
                                    NULL,
									NULL,
									NULL,
                                    NULL,
									0,
									(@quantity * @birdratediff),
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid3
								 );
								 
								 -- Debit to COGS - Ledger
								
								 SET @jedetailid2 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@mortalityledgerid,
									0,
                                    NULL,
									@breederbatchid,
									NULL,
                                    NULL,
									NULL,
									NULL,
                                    NULL,
									(@quantity * @birdratediff),
									0,
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid2
								 );
                                 
                                 END IF;
                                 END IF;
                              
							 if(@biredprice>@live_birdcost) THEN 
							  SELECT (@biredprice-@live_birdcost) INTO @birdratediff ;
							  
							 
                             -- male chick
							 IF(@itemid1 = @defaultmalechickid) THEN
								 SET @jedetailid3 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@WIPledgerid,
									0,
                                    NULL,
									@breederbatchid,
									NULL,
                                    NULL,
									NULL,
									NULL,
                                    NULL,
                                    (@quantity * @birdratediff),
									0,
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid3
								 );
								 
								 -- Debit to COGS - Ledger
								
								 SET @jedetailid2 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@mortalityledgerid,
									0,
                                    NULL,
									@breederbatchid,
									NULL,
                                    NULL,
									NULL,
									NULL,
                                    NULL,
									0,
                                    (@quantity * @birdratediff),
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid2
								 );
                                 
                                 END IF;
                                 
                                 -- female chick
                                 IF(@itemid1 = @defaultfemalechickid) THEN
								 SET @jedetailid3 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@WIPledgerid,
									0,
                                    NULL,
									@breederbatchid,
									NULL,
                                    NULL,
									NULL,
									NULL,
                                    NULL,
                                    (@quantity * @birdratediff),
									0,
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid3
								 );
								 
								 -- Debit to COGS - Ledger
								
								 SET @jedetailid2 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@mortalityledgerid,
									0,
                                    NULL,
									@breederbatchid,
									NULL,
                                    NULL,
									NULL,
									NULL,
                                    NULL,
									0,
                                    (@quantity * @birdratediff),
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid2
								 );
                                 
                                 END IF;
                                 END IF;
							SET j = j + 1;
						END WHILE;
					End;
		END;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_daybook_report`(
IN p_date DATE,
IN p_companyid INT
)
BEGIN
   SELECT
   JE.id as vouchernumber,
   DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as date,
   JE.partyid,
   JE.narration,
   JED.acledgerid as particular,
   COA.coaname,
   COA.glcode,
   JE.vouchertypeid,
   JED.dramount as dramount,
   JED.cramount as cramount,
   R.refname as vouchertype,
   P.partyname,
   I.itemname
   
FROM
		journalentry JE
	
    LEFT JOIN journalentrydetail JED ON JE.id = JED.journalentryid
    LEFT JOIN item I ON I.id = JED.loadonitemid
	LEFT JOIN `reference` R ON  JE.vouchertypeid = R.id
    LEFT JOIN party P ON  JE.partyid = P.id
    LEFT JOIN chartofaccount COA ON COA.id = JED.acledgerid
   
	
	WHERE
		voucherdate = p_date AND
        JE.companyid = p_companyid
        
	 ORDER BY JE.id;
      

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_deduction_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM deduction WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'deduction', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_deduction_save`(
   IN p_id INT(11),
   IN p_coststructureid INT(11),
   IN p_fromdays INT(11),
   IN p_todays INT(11),
   IN p_perratebird DECIMAl(9,3),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO deduction 
				(coststructureid, fromdays, todays, perratebird, companyid)
			VALUES 
				(p_coststructureid, p_fromdays, p_todays, p_perratebird, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE deduction
				SET coststructureid = p_coststructureid,
					fromdays = p_fromdays,
                    todays = p_todays,
                    perratebird = p_perratebird,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'deduction', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_deduction_search`(
 IN p_coststructureid INT
)
BEGIN

	SELECT 
		 id,
         coststructureid,
         fromdays,
         todays,
         perratebird,
         companyid
         
	FROM
		deduction 
        
	WHERE
		 coststructureid = p_coststructureid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_deduction_select`(
  IN p_id INT
)
BEGIN

	SELECT 
		 id,
         coststructureid,
         fromdays,
         todays,
         perratebird,
         companyid
         
	FROM
		deduction 
        
	WHERE
		  (
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_density_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM density WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'density', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_density_save`(
 IN p_id INT(11),
 IN p_locationid INT(11),
 IN p_shedtypeid VARCHAR(200),
 IN p_densityperbird Decimal(9,3),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
 
	 IF EXISTS(
			SELECT id from density where densityperbird = p_densityperbird AND locationid = p_locationid AND shedtypeid = p_shedtypeid
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
			
			) THEN BEGIN
		
				SELECT -1 INTO out_id;

			END;
		
	 ELSE 
		BEGIN
	   
		   IF(NULLIF(p_id, '0') IS NULl) THEN
		   
			 INSERT INTO density
					  (locationid, shedtypeid, densityperbird, companyid)
			   VALUES
					(p_locationid, p_shedtypeid, p_densityperbird, p_companyid);
					
			SET @action = 'INSERT';
			
		   ELSE
		   
			UPDATE density 
		   
			SET 
				locationid = p_locationid,
				shedtypeid = p_shedtypeid,
				densityperbird = p_densityperbird,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
				
		   WHERE
				id = p_id AND
				companyid = p_companyid;
				
				SET @action = 'UPDATE';
				
		   END IF;
		   SELECT LAST_INSERT_ID() INTO out_id;
		 
		   SET @branchid = null;
		   SELECT branch_id INTO @branchid FROM cbf_farmerenquiry FE
		   LEFT JOIN location L ON L.branchid = FE.branch_id
		   WHERE L.id = p_locationid limit 1;
	   
		   UPDATE cbf_farmerenquiry
		   SET density = p_densityperbird,
		   chick_capacity = total_area/p_densityperbird
		   WHERE branch_id = @branchid;
		   
		
		   -- record log
			CALL spc_commonlog_save(p_companyid, 'density', out_id, @action, p_userid);
		END;
END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_density_search`( 

 IN p_companyid INT(11)
)
BEGIN

	SELECT
    D.id,
    D.locationid,
    D.shedtypeid,
    D.densityperbird,
    D.companyid,
    L.locationname,
    ST.shedtype
           
	FROM density D
     LEFT JOIN location L ON L.id = D.locationid
     LEFT JOIN cbfshedtype ST ON ST.id = D.shedtypeid
    
    WHERE D.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_density_select`(
 IN p_id INT(11)
)
BEGIN

	SELECT
    D.id,
    D.locationid,
    D.shedtypeid,
    D.densityperbird,
    D.companyid,
    L.locationname,
    ST.shedtype
           
	FROM density D
     LEFT JOIN location L ON L.id = D.locationid
     LEFT JOIN cbfshedtype ST ON ST.id = D.shedtypeid
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND D.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_diffbetweenactandstdfeedlayer_search`(
 IN p_layerbatchid INT,
 IN p_companyid INT
 )
BEGIN
SET @@sql_mode = '';

DROP TEMPORARY TABLE IF EXISTS templayerfeedconsumption;
CREATE TEMPORARY TABLE templayerfeedconsumption

	SELECT
		LB.id,
        LDT.transactiondate,
        (LDC.consumptionquantity) as feedconsumption,
        (LDC.standardconsumption) as standardconsumption,
        TRUNCATE((((DATEDIFF(LDT.transactiondate,fnc_getlayerplacementdate(LB.id,p_companyid)))+1)/7),0) as ageinweek
        
	FROM 
        layerbatch LB
			LEFT JOIN layerdailytransaction LDT ON LDT.layerbatchid = LB.id
			LEFT JOIN layerdailyconsumption LDC ON LDC.layerdailytransactionid = LDT.id AND LDC.consumptiontypeid = 1149
            
	Where
		LB.statusid = 982 AND LB.id = p_layerbatchid
	order by LB.id,LDT.transactiondate desc;
          
	SET @liveqty = null;
          
	SELECT SUM(quantity) INTO @liveqty  FROM layerbatchbalance WHERE layerbatchid = p_layerbatchid;
          
	SELECT 
	  BFC.ageinweek,
	  IFNULL((SUM(BFC.feedconsumption)/@liveqty),0) as avgfeed,ifnull(SUM(BFC.standardconsumption),0) as standardconsumption 
	FROM 
		templayerfeedconsumption BFC 
        
	where BFC.ageinweek is not null
	group by  BFC.ageinweek
    order by BFC.ageinweek;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_diffbetweenactandstdfeed_search`(
 IN p_breederbatchid INT,
 IN p_companyid INT
 )
BEGIN
DROP TEMPORARY TABLE IF EXISTS tempfeedconsumption;
CREATE TEMPORARY TABLE tempfeedconsumption

	SELECT
		BB.id,BDT.transactiondate,
        (BDC.quantity) as feedconsumption,
        (BDC.standardconsumption) as standardconsumption,
        TRUNCATE((((DATEDIFF(NOW(),fnc_getplacementdate(BB.id,p_companyid)))+1)/7),0) as ageinweek
        
	FROM 
        breederbatch BB
			LEFT JOIN breederdailytransaction BDT ON BDT.breederbatchid = BB.id
			LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id AND BDC.consumptiontypeid = 861
            
	Where
		BB.statusid = 222 AND BB.id = p_breederbatchid
          order by BB.id,BDT.transactiondate desc;
          
	SET @liveqty = null;
          
      SELECT SUM(quantity)  INTO @liveqty  FROM breederbatchbalance WHERE breederbatchid = p_breederbatchid;
          
          SELECT 
			  BFC.ageinweek,
			  ifnull((SUM(BFC.feedconsumption)/@liveqty),0) as avgfeed,ifnull(SUM(BFC.standardconsumption),0) as standardconsumption 
          FROM 
			tempfeedconsumption BFC 
           where BFC.ageinweek is not null
		  group by  BFC.ageinweek
          order by BFC.ageinweek;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_diffbwactandstabodyweightlayer_search`(
 IN p_layerbatchid INT,
 IN p_companyid INT
 )
BEGIN
	SET @@sql_mode = ' ';
	DROP TEMPORARY TABLE IF EXISTS tempbodyweightlayer;
	CREATE TEMPORARY TABLE tempbodyweightlayer

	SELECT 
		LB.id,
		LDM.itemid,
		LDM.avgweight,
		LDT.transactiondate,
		LB.batchname,
		TRUNCATE((((DATEDIFF(LDT.transactiondate,fnc_getlayerplacementdate(LB.id,p_companyid)))+1)/7),0) as ageinweek
	FROM
		layerbatch LB 
		LEFT JOIN layerdailytransaction LDT ON LDT.layerbatchid = LB.id
		LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id AND LDM.itemid = LB.itemid
	WHERE
		LB.companyid = p_companyid AND LB.id = p_layerbatchid AND LB.statusid = 982 AND LDT.transactiondate <= NOW() 
	ORDER BY LDT.transactiondate desc;
-- select * from tempbodyweightlayer;
			
	SELECT 
		TB.ageinweek,
        batchname,
        max(TB.avgweight) as avgweight,
        TB.id as layerbatchid,
        TB.itemid,
        IFNULL(LFSD.weeklybodyweight,0) as stbodyweight
		
	FROM tempbodyweightlayer TB
	LEFT JOIN layerfeedstandard LFS ON LFS.layeritemid = TB.itemid
	LEFT JOIN layerfeedstandarddetail LFSD ON LFSD.weeknumber = TB.ageinweek
	group by TB.ageinweek;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_diffbwactandstabodyweight_search`(
 IN p_breederbatchid INT,
 IN p_companyid INT
 )
BEGIN
SET @@sql_mode = ' ';
DROP TEMPORARY TABLE IF EXISTS tempbodyweight;
CREATE TEMPORARY TABLE tempbodyweight
SELECT BB.id, BDM.itemid,BDM.avgweight,BDT.transactiondate,BB.batchname,
TRUNCATE((((DATEDIFF(BDT.transactiondate,fnc_getplacementdate(BB.id,p_companyid)))+1)/7),0) as ageinweek
FROM
breederbatch BB 
        LEFT JOIN breederdailytransaction BDT ON BDT.breederbatchid = BB.id
		LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id AND BDM.itemid = BB.femaleitemid
		WHERE
		
		BB.companyid = p_companyid AND BB.id = p_breederbatchid AND BB.statusid = 222 AND BDT.transactiondate <= NOW() 
        order by BDT.transactiondate desc;

        
SELECT TB.ageinweek,batchname,TB.avgweight,TB.id as breederbatchid,TB.itemid,ifnull(BFSD.weeklybodyweight,0) as stbodyweight
	
    FROM tempbodyweight TB
    LEFT JOIN breederfeedstandard BFS ON BFS.breeditemid = TB.itemid
    LEFT JOIN breederfeedstandarddetail BFSD ON BFSD.weeknumber = TB.ageinweek
    group by TB.ageinweek;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_dimensionwisecostcenter_search`(
	IN p_dimensionid INT,
    IN p_companyid INT
)
BEGIN

	SELECT CC.id,
		   CC.dimenssioncode,
           CC.dimenssionname,
           CC.accounts_dimensionid,
           D.dimensioncode,
           D.dimensionname
           
	FROM costcenter CC
    LEFT JOIN accounts_dimension D ON D.id = CC.accounts_dimensionid
    
    WHERE CC.companyid = p_companyid
    AND D.id = p_dimensionid
    AND CC.isactive = 1;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_dimension_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM accounts_dimension WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_dimension_save`(
   IN p_id INT(11),
   IN p_dimensioncode VARCHAR(100),
   IN p_dimensionname VARCHAR(150),
   IN p_description VARCHAR(100),
   IN p_isactive TINYINT(4),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF EXISTS(
            SELECT id from accounts_dimension where LOWER(dimensionname) = LOWER(p_dimensionname) OR dimensioncode = p_dimensioncode
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE
		BEGIN
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO accounts_dimension 
						(id, dimensioncode,
						   dimensionname,
						   description,
						   isactive, companyid)
					VALUES 
						(p_id, p_dimensioncode,
						   p_dimensionname,
						   p_description,
						   p_isactive, p_companyid);
			  SET @action = 'INSERT';
			ELSE
			
				UPDATE accounts_dimension
						SET dimensioncode = p_dimensioncode,
							dimensionname = p_dimensionname,
							description = p_description,
							isactive = p_isactive,
							companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
				   SET @action = 'UPDATE';     
			END IF;
		
			SELECT LAST_INSERT_ID() INTO out_id; 
			
		   -- record log
		   CALL spc_commonlog_save(p_companyid, 'accounts_dimension', out_id, @action, p_userid);
   
		END;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_dimension_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
		   dimensioncode,
           dimensionname,
           description,
           isactive
           
    FROM accounts_dimension


	WHERE companyid = p_companyid;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_dimension_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT id,
		   dimensioncode,
           dimensionname,
           description,
           isactive
           
    FROM accounts_dimension


	WHERE id = p_id;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_diseasedetail_delete`(  
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM diseasedetail WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'diseasedetail', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_diseasedetail_save`(
 IN p_id INT(11),
 IN p_diseaseid INT(11),
 IN p_treatment VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO diseasedetail
              (diseaseid, treatment, companyid)
       VALUES
            (p_diseaseid, p_treatment, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE diseasedetail 
   
	SET diseaseid = p_diseaseid,
        treatment = p_treatment,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'diseasedetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_diseasedetail_search`(
IN p_diseaseid INT(11)
)
BEGIN

	SELECT id, treatment, companyid
           
	FROM diseasedetail
    
    WHERE diseaseid  = p_diseaseid ;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_disease_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM disease WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'disease', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_disease_save`(
 IN p_id INT(11),
 IN p_diseasename VARCHAR(200),
 IN p_diagnosis VARCHAR(200),
 IN p_organid INT(11),
 IN p_lesionid INT(11),
 IN p_symptomsid INT(11),
 IN p_remark varchar(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO disease
              (diseasename, diagnosis, organid, lesionid, symptomsid, remark, companyid)
       VALUES
            (p_diseasename, p_diagnosis, p_organid, p_lesionid, p_symptomsid, p_remark, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE disease 
   
	SET diseasename = p_diseasename,
		diagnosis = p_diagnosis,
        organid = p_organid,
        lesionid = p_lesionid,
        symptomsid = p_symptomsid,
        remark = p_remark,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'disease', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_disease_search`(
IN p_companyid INT(11)
)
BEGIN

	SELECT 
		D.id,
		diseasename,
		diagnosis,
		D.organid,
		D.lesionid,
		D.symptomsid,
		D.companyid,
		O.organname,
		LD.lesionname,
        D.remark,
		SD.symptomsname
           
	FROM disease D
    
    LEFT JOIN organ O ON O.id = D.organid
    LEFT JOIN lesiondetail LD ON LD.lesionid = D.lesionid
    LEFT JOIN symptomsdetail SD ON SD.symptomsid = D.symptomsid
    
    WHERE D.companyid = p_companyid
    
    order by SD.id DESC;
 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_disease_select`( 
IN p_id INT(11)
)
BEGIN

	SELECT id,
		   diseasename,
		   diagnosis,
		   organid,
		   lesionid,
		   symptomsid,
           remark,
		   companyid
				   
	FROM disease
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_document_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM document WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'document', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_document_save`(
 IN p_id INT(11),
 IN p_documentname VARCHAR(200),
 IN p_ismandatory TINYINT,
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
 
	IF EXISTS(
			SELECT id from document where documentname = p_documentname 
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
			
			) THEN BEGIN
		
				SELECT -1 INTO out_id;

			END;
		
	 ELSE 
		BEGIN
   
		   IF(NULLIF(p_id, '0') IS NULl) THEN
		   
			 INSERT INTO document
					  (documentname, ismandatory, companyid)
			   VALUES
					(p_documentname, p_ismandatory, p_companyid);
					
			SET @action = 'INSERT';
			
		   ELSE
		   
			UPDATE document 
		   
			SET documentname = p_documentname,
				ismandatory = p_ismandatory,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
				
		   WHERE
				id = p_id AND
				companyid = p_companyid;
				
				SET @action = 'UPDATE';
				
		   END IF;
			 SELECT LAST_INSERT_ID() INTO out_id; 
			
		   -- record log
		   CALL spc_commonlog_save(p_companyid, 'document', out_id, @action, p_userid);
		END;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_document_search`(
  IN p_companyid INT(11)
)
BEGIN

	SELECT id, documentname, ismandatory, companyid
           
	FROM document
    
    WHERE companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_document_select`( 
   IN p_id INT(11)
)
BEGIN

	SELECT id, documentname, ismandatory, companyid
           
	FROM document
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggcollectionvaluewithcontrolvalue_report`(
IN p_fromdate DATE,
IN p_todate DATE,
IN p_companyid INT(11)
)
BEGIN
select
HSD.id as sheduleid,
DATE_FORMAT(HSD.approveddate,'%d/%m/%Y') as batchdate,
HSD.sourceid as sourceid,
REF.refname,
SB.availablequantity as receivedqty,
SB.breederbatchid as  batchid,
BB.batchname as batchname,
I.itemname,
HSD.itemid,
I.id


from  hatcheryscheduledetail HSD
	  LEFT JOIN `reference` REF ON HSD.sourceid = REF.id
      LEFT JOIN setterbatch SB ON SB.scheduleid = HSD.hatcheryscheduleid
      LEFT JOIN item I ON I.id = HSD.itemid
      LEFT JOIN breederbatch BB ON BB.id = SB.breederbatchid
where   HSD.approveddate BETWEEN p_fromdate AND p_todate
		AND HSD.companyid = p_companyid;



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollectiondetail_save`(
	IN p_Id INT(11),
	IN p_eggscollectionid INT(11),
	IN p_shedid INT(11),
	IN p_shedlineid INT(11),
    IN p_quantity INT(11),
    IN p_stdquantity INT(11),
    IN p_time VARCHAR(50),
    IN p_companyid INT(11),
    IN p_userid INT,
	OUT out_id INT
)
BEGIN
SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO eggscollectiondetail 
				(eggscollectionid, shedid, shedlineid, quantity, stdquantity, time, companyid)
			VALUES 
				(p_eggscollectionid, p_shedid, p_shedlineid, p_quantity, p_stdquantity, p_time, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE eggscollectiondetail
        
			SET eggscollectionid = p_eggscollectionid,	
				shedid	= p_shedid,
				shedlineid	 = p_shedlineid,
				quantity = p_quantity,
                stdquantity = p_stdquantity,
                time = p_time,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
			
             
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
   -- record log
   CALL spc_commonlog_save(p_companyid, 'eggscollectiondetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollectiondetail_select`(
 IN p_eggscollectionid INT ,
 IN p_companyid INT)
BEGIN

	SELECT 
		EGD.id,
        EGD.eggscollectionid,
        shedid,
        shedlineid,
        quantity,
        stdquantity,
        time,
        SL.linename,
        EGD.companyid
        
        
	FROM
		eggscollectiondetail EGD
    
    LEFT JOIN breedershedline SL ON EGD.shedlineid = SL.id
    
	WHERE
		EGD.eggscollectionid = p_eggscollectionid AND
        EGD.companyid = p_companyid; 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollectionion_sum`(
 IN p_fromdate  DATE,
 IN p_todate DATE,
 IN p_breederbatchid INT,
 IN  p_shedid INT
 )
BEGIN
 SELECT
          EC.id,
          Ec.collectiondate,
		  ECD.quantity as collectionqty,
		  -- ED.itemid,
          --  case when itemid = '9' then ED.quantity  else NULL end as "Hatching Eggs",
          -- case when itemid = '10' then ED.quantity   else NULL end as "Commercial Eggs",
          -- case when itemid = '3' then ED.quantity   else NULL end as "Cracked Eggs",
           -- case when itemid = '11' then ED.quantity  else NULL end as "Double Yolk",
		   ED.quantity as itemquantity,
		  I.itemname
          
       
    FROM
		eggscollection EC
        
		 LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id
         LEFT JOIN eggsdistributiondetail ED ON ED.eggscollectionid = EC.id 
		 LEFT JOIN item I ON ED.itemid = I.id
	
	WHERE
		EC.breederbatchid = p_breederbatchid AND
        EC.shedid = p_shedid AND
		EC.collectiondate BETWEEN p_fromdate AND p_todate
		group by Ec.collectiondate ;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollection_approve_select`(
	p_breederbatchid INT,
	p_shedid INT,
	p_companyid int
 )
BEGIN

	SET @isapproved = 0;

 
	SELECT 
  
    CASE when ED.statusid = 842 then 
	 @isapproved := 1 else 
     @isapproved := 0 end as isapproved
  -- ED.statusid
  
	FROM
		
        eggscollection EC
        LEFT JOIN eggsdistributiondetail ED ON EC.id = ED.eggscollectionid
									AND EC.shedid = ED.shedid
        
	WHERE
        ED.shedid =  p_shedid
        AND EC.breederbatchid = p_breederbatchid
        AND ED.companyid = p_companyid
        order by ED.id DESC
         limit 1;
     
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollection_breederbatch_search`(
 IN p_companyid INT,
 IN p_locationid varchar(200)
 )
BEGIN 
SET @location = p_locationid;
SET @@sql_mode = ' ';
 SELECT
		  EC.id,
		  EC.breederbatchid,
		  BB.batchname,
		  L.locationcode,
		  L.locationname,
		  W.warehousecode,
		  W.warehousename,
		  BB.statusid,
		  REF.refname as batchstatus
          
       
    FROM
		eggscollection EC
        
		 LEFT JOIN breederbatch BB ON EC.breederbatchid =BB.id AND 
         FIND_IN_SET(BB.locationid,@location) 
		 LEFT JOIN location L ON BB.locationid = L.id 
		 LEFT JOIN warehouse W ON BB.warehouseid = W.id
		 INNER JOIN `reference`REF ON REF.id = BB.statusid
	
	WHERE
        EC.companyid = p_companyid 
        
        GROUP BY EC.breederbatchid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollection_byshed_select`(
IN p_shedid INT,
IN p_cpmapnyid INT
)
BEGIN

	SELECT 
		EG.id,
        EG.breederbatchid,
        EG.shedid,
        EG.createdby,
		DATE_FORMAT(BP.placementdate,'%d/%m/%Y') as batchplacementdate,
		DATE_FORMAT(EG.collectiondate,'%d/%m/%Y') as collectiondate,
        DATE_FORMAT(EG.productionstartdate,'%d/%m/%Y') as productionstartdate,
        EG.productionweek,
        EG.approvedby,
        EG.approvaldate,
        EG.statusid,
        EG.remark,
        EG.companyid,
        S.shedname,
        REF.refname as statusname,
        BB.batchname,
		(SELECT IF( EXISTS(
             SELECT id
             FROM eggsdistributiondetail
             WHERE eggscollectionid = EG.id AND statusid = 842), 'YES','NO') ) as isDistributiondone
        
        
	FROM
		eggscollection EG
		LEFT JOIN breedershed S ON EG.shedid = S.id
        LEFT JOIN `reference` REF ON EG.statusid = REF.id
        LEft JOIN breederbatch BB ON EG.breederbatchid = BB.id
        LEft JOIN breederbatchplacement BP ON EG.breederbatchid = BP.breederbatchid
		
	WHERE
		EG.shedid = p_shedid AND
        EG.companyid = p_cpmapnyid 
        ;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollection_forshed`(
 IN p_breederbatchid VARCHAR(200)
 )
BEGIN

SET @@sql_mode = ' ';
SET @breederbatch = p_breederbatchid;
 SELECT 
    EC.Shedid,
    S.shedname,
    REF.refname as statusname
    
    
    FROM
		eggscollection EC
        
		LEFT JOIN breedershed S ON EC.shedid = S.id
        LEFT JOIN `reference` REF ON EC.statusid = REF.id
	
	WHERE
		
        FIND_IN_SET(EC.breederbatchid,@breederbatch) 
        group by  EC.Shedid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollection_forshedwise_select`(
 IN p_companyid INT
)
BEGIN

	SET @defaultcommercialeggsitemid = null;
    SET @defaultcrackedeggsitemid = NULL;
	SET @defaultdoubleyolkeggsitemid = NULL;
    SET @hatchingitemgroupids = NULL;
    
    SELECT  
		defaultcommercialeggsitemid,defaultcrackedeggsitemid,defaultdoubleyolkeggsitemid,hatchingitemgroupids,wastageeggsitemid
		INTO @defaultcommercialeggsitemid,@defaultcrackedeggsitemid,@defaultdoubleyolkeggsitemid,@hatchingitemgroupids,@wastageeggsitemid
	FROM
		breedersetting
	WHERE companyid = p_companyid;

	DROP TEMPORARY TABLE IF EXISTS eggsitem;
	-- CREATE TEMPORARY TABLE tmppurregreport
    create temporary table eggsitem
		(	id INT(11) ,
			itemid INT(11),
            itemtypeid INT(11),
			quantity INT(11) ,
			avgweight INT(11),
            cummqty INT(11),
			remark VARCHAR(200)
		);
insert into eggsitem
(itemid, itemtypeid, quantity,avgweight,cummqty) VALUES
(@defaultcommercialeggsitemid,882, 0, 0,0);
insert into eggsitem
(itemid, itemtypeid, quantity,avgweight,cummqty) VALUES
(@defaultcrackedeggsitemid, 883, 0, 0,0);
insert into eggsitem
(itemid, itemtypeid, quantity,avgweight,cummqty) VALUES
(@defaultdoubleyolkeggsitemid, 884, 0, 0,0);
insert into eggsitem
(itemid, itemtypeid, quantity,avgweight,cummqty) VALUES
(@wastageeggsitemid, 885, 0, 0,0);


SELECT EI.id,itemid, itemtypeid, quantity, avgweight, remark,cummqty,I1.itemname from eggsitem EI
inner JOIN item I1 ON EI.itemid = I1.id AND EI.itemid IS NOT NULL



UNION all

SELECT
	 null as id,
	id as itemid,
    881 as itemtypeid,
	'0' as quantity,
	'0' as avgweight,
	null as remark,
    '0' as cummqty,
	itemname
FRom item
WHERE itemgroupid = @hatchingitemgroupids;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollection_groupbydate_search`(
IN p_companyid INT
)
BEGIN
SET @@sql_mode = ' ';
DROP TEMPORARY TABLE IF EXISTS tempegscollection;
CREATE TEMPORARY TABLE tempegscollection
	 SELECT
		EC.id as eggscollectionid,
		DATE_FORMAT( EC.collectiondate,'%d/%m/%Y') as collectiondate,
		EC.breederbatchid,
		EC.shedid,
		EC.statusid, 
		sum(ECD.quantity) AS totalquantity,
		R.refname as statusname,
		BR.batchname,
		BS.shedname
      --   EDD.statusid
     --    R1.refname as edstatusname
		
	FROM 
		eggscollection EC

		 INNER JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id
		 LEFT JOIN `reference` R ON EC.statusid = R.id
        --   LEFT JOIN eggsdistributiondetail EDD ON EDD.eggscollectionid = EC.id
		 LEFT JOIN breederbatch BR ON EC.breederbatchid= BR.id
		 LEFT JOIN breedershed BS ON EC.shedid= BS.id 
         -- LEFT JOIN `reference` R1 ON EDD.statusid = R1.id
	WHERE EC.statusid = 803 AND
		  EC.companyid = p_companyid
	GROUP BY EC.id,
		EC.collectiondate,
		EC.breederbatchid,
		EC.shedid,
		EC.statusid, 
		R.refname
		
	 ORDER by EC.id desc;
     
     SELECT TBC.eggscollectionid,TBC.collectiondate,TBC.breederbatchid,TBC.shedid,TBC.statusid,TBC.totalquantity,TBC.statusname,
			TBC.batchname,TBC.shedname,R1.refname as edstatusname

	FROM tempegscollection TBC 
		 LEFT JOIN eggsdistributiondetail EDD ON EDD.eggscollectionid = TBC.eggscollectionid
		 LEFT JOIN `reference` R1 ON R1.id = EDD.statusid
    GROUP BY TBC.eggscollectionid
    
    ORDER by TBC.eggscollectionid desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollection_report`(
IN p_breederbatchid VARCHAR(200),
IN p_shedid VARCHAR(200),
IN p_fromdate DATE,
IN p_todate DATE,
IN p_frequency VARCHAR(50),
IN p_companyid INT


)
BEGIN
SET @@sql_mode = ' ';

    SET @breederbatchid = p_breederbatchid;
    SET @shedid = p_shedid;
    SET @num = 0;
	SET @varience = 0;
    SET @hatchitemtypeid = 881;
	SET @hatchingitemgroupids = null;
	SET @defaultcommercialeggsitemid = null;
	SET @defaultcrackedeggsitemid = null;
	SET @defaultdoubleyolkeggsitemid = null;
    SET @hatchqty = NULL;
	SET @commerqty = NULL;
	SET @creackedqty = NULL;
	SET @doubleyolkqty = NULL;
	SET @hatchingeggsA = NULl;
    SET @itemid = null;
    
    
    SELECT  
		hatchingitemgroupids,defaultcommercialeggsitemid,
		defaultcrackedeggsitemid,defaultdoubleyolkeggsitemid
		INTO @hatchingitemgroupids,@defaultcommercialeggsitemid,
		@defaultcrackedeggsitemid, @defaultdoubleyolkeggsitemid
        
	FROM
		breedersetting
        
        WHERE 
			companyid = p_companyid limit 1;
            
          
if(p_frequency = 'day')then   

   SELECT
		 SUM(ECD.quantity) as Quantity,
         SUM(ECD.quantity) as Production,
         DATE_FORMAT( EC.collectiondate,'%d/%m/%Y') as collectiondate,
        fun_batch_ageinweek(EC.collectiondate,@breederbatchid,p_companyid) as Ageinweek,
        E.employeename as Employeename
        
        
		 
       
    FROM
		eggscollection EC
		 LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id 
         LEFT JOIN employee E ON E.id = EC.createdby
	
	WHERE
		 FIND_IN_SET(  EC.breederbatchid,@breederbatchid) AND
        FIND_IN_SET( EC.shedid,@shedid) AND
		EC.collectiondate BETWEEN p_fromdate AND p_todate AND
        EC.companyid = p_companyid AND
        EC.statusid = 803
		group by EC.collectiondate;

 

         
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(
num INT(11),
VariencePerDiff DECIMAL(9,3),
itemid INT(11),
itemgroupid INT(11),
itemname VARCHAR(200),
itemnameper VARCHAR(200),
eggscollectionid INT(11),
Collection_Date VARCHAR(200),
Ageinweek INT(11),
Ageindays INT(11),
Supervisiorname VARCHAR(200),
OpeningBird INT(11),
Production INT(11),
StdEggPro_Per decimal(9,3),
StdHEPro_Per decimal(9,3),
quantity VARCHAR(200),
ActProPer decimal(9,3),
ActHatchEgg VARCHAR(200),
ActHatchEggPer decimal(9,3),
variencePer decimal(9,3),
percentage VARCHAR(5000));

INSERT INTO tempmortality1 
 select 
	(@num:= @num+1) as num, 
    @varience as VariencePerDiff,
	ED.itemid,
    I.itemgroupid,
	REPLACE(I.itemname, ' ', '-')as itemname,
    CONCAT(REPLACE(I.itemname, ' ','-'),'Per')as itemnameper,
	ED.eggscollectionid,
	DATE_FORMAT(ED.collectiondate,'%d/%m/%Y') as Collection_Date,
	fun_batch_ageinweek(ED.collectiondate,@breederbatchid,p_companyid) as Ageinweek,
    fun_batch_ageindaysbreeder(ED.collectiondate,@breederbatchid,p_companyid) as Ageindays,
    E.employeename as Supervisiorname,
    fnc_transaction_date_wise_liveqty(@breederbatchid, @shedid, BB.femaleitemid,ED.collectiondate,p_companyid) as OpeningBird,
    ECD.quantity as Production, 
	ROUND((BPO.hdinpercent/7),2)as StdEggPro_Per,
    ROUND((BPO.heinpercent/7),2) as StdHEPro_Per,
    ED.quantity, -- dff
    ROUND(((ECD.quantity*100)/IFNULL(fnc_transaction_date_wise_liveqty(@breederbatchid, @shedid, BB.femaleitemid,ED.collectiondate,p_companyid),0)),2) as ActProPer,
    fun_batchshed_eggdistributionqtyitemtypewise(@breederbatchid,@shedid,@hatchitemtypeid,p_fromdate,ED.collectiondate,p_companyid) as ActHatchEgg,
    ROUND(((fun_batchshed_eggdistributionqtyitemtypewise(@breederbatchid,@shedid,@hatchitemtypeid,p_fromdate,ED.collectiondate,p_companyid)*100)/ECD.quantity),2) as ActHatchEggPer,
    ROUND((IFNULL((BPO.heinpercent/7),0)-
    ((IFNULL(fun_batchshed_eggdistributionqtyitemtypewise(@breederbatchid,@shedid,@hatchitemtypeid,p_fromdate,ED.collectiondate,p_companyid),0)/ECD.quantity
    )*100)),2)as variencePer,
   --  (select ED.quantity where (I.itemgroupid = @hatchingitemgroupids)) as  hatchingeggs,
	 IF(ED.itemtypeid = @hatchitemtypeid,ROUND(((ED.quantity/ (fun_batchshed_eggdistributionqtyitemtypewise(@breederbatchid,@shedid,@hatchitemtypeid,p_fromdate,ED.collectiondate,p_companyid)))*100),2) , ROUND(((ED.quantity/ ECD.quantity)*100),2)) as percentage
    -- ((ED.quantity/ ECD.quantity)*100) as percentage
   
   
    
	 
		FROM eggsdistributiondetail  ED
		LEFT JOIN item I ON ED.itemid = I.id
        LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
        LEFT JOIN eggscollection EC ON EC.id = ED.eggscollectionid
		LEFT JOIN breederbatch BB ON BB.id = EC.breederbatchid
        LEFT JOIN employee E ON E.id = EC.createdby
        LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid
        LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = ED.itemid
		
	WHERE ED.eggscollectionid in (select id from eggscollection  where  FIND_IN_SET(breederbatchid,@breederbatchid) and FIND_IN_SET(shedid,@shedid) AND statusid = 803)
	AND ED.collectiondate BETWEEN p_fromdate AND p_todate
	AND  ED.statusid = 842;


 SELECT * FROM tempmortality1;
 
DROP TEMPORARY TABLE IF EXISTS tempmortality2;
CREATE TEMPORARY TABLE tempmortality2

(
num INT(11),
VariencePerDiff DECIMAL(9,3),
itemid INT(11),
itemgroupid INT(11),
itemname VARCHAR(200),
itemnameper VARCHAR(200),
eggscollectionid INT(11),
Collection_Date VARCHAR(200),
Ageinweek INT(11),
Ageindays INT(11),
Supervisiorname VARCHAR(200),
OpeningBird INT(11),
Production INT(11),
StdEggPro_Per decimal(9,3),
StdHEPro_Per decimal(9,3),
quantity VARCHAR(200),
ActProPer decimal(9,3),
ActHatchEgg VARCHAR(200),
ActHatchEggPer decimal(9,3),
variencePer decimal(9,3),
percentage VARCHAR(5000));

INSERT INTO tempmortality2 select * from tempmortality1;
-- select * from tempmortality2;

DROP TEMPORARY TABLE IF EXISTS tempmortality3;
CREATE TEMPORARY TABLE tempmortality3
(
num INT(11),
VariencePerDiff DECIMAL(9,3),
itemid INT(11),
itemgroupid INT(11),
itemname VARCHAR(200),
itemnameper VARCHAR(200),
eggscollectionid INT(11),
Collection_Date VARCHAR(200),
Ageinweek INT(11),
Ageindays INT(11),
Supervisiorname VARCHAR(200),
OpeningBird INT(11),
Production INT(11),
StdEggPro_Per decimal(9,3),
StdHEPro_Per decimal(9,3),
quantity VARCHAR(200),
ActProPer decimal(9,3),
ActHatchEgg VARCHAR(200),
ActHatchEggPer decimal(9,3),
variencePer decimal(9,3),
percentage VARCHAR(5000));

INSERT INTO tempmortality3
select 
T1.num,
CASE T1.num 
WHEN 1 THEN 0
ELSE (select T1.variencePer - variencePer from tempmortality2 where num+1 = T1.num)  
END as VariencePerDiff,
T1.itemid,
T1.itemgroupid,
T1.itemname,
T1.itemnameper,
T1.eggscollectionid,
T1.Collection_Date,
T1.Ageinweek,
T1.Ageindays,
T1.Supervisiorname,
T1.OpeningBird,
T1.Production,
T1.StdEggPro_Per,
T1.StdHEPro_Per,
T1.quantity,
T1.ActProPer,
T1.ActHatchEgg,
T1.ActHatchEggPer,
T1.variencePer,
T1.percentage
from tempmortality1 T1
-- where T1.Collection_Date !=  'NULL';
where T1.variencePer IS NOT NULL;

 -- select * from tempmortality3;


SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality3;
  
 
  SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemnameper = ''',
      itemnameper,
      ''' then percentage end),0) AS `',
      itemnameper, '`'
    )
  ) INTO @sql1
FROM
  tempmortality3;
 
SET @sql = CONCAT('SELECT Collection_Date,Ageinweek,Ageindays,Supervisiorname,OpeningBird,Production,ActProPer,ActHatchEgg,ActHatchEggPer,StdEggPro_Per,StdHEPro_Per,variencePer,VariencePerDiff, ', @sql,',', @sql1,' 
                  FROM tempmortality3 
                   GROUP BY Collection_Date');
                  

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

END IF;
         
         
         
	 if(p_frequency = 'week') then
     	SELECT sum(collectionqty) as Quantity, DATE_FORMAT(week_start,'%d/%m/%Y') as week_start, DATE_FORMAT(week_end,'%d/%m/%Y') as week_end  from (
	SELECT
		 SUM(ECD.quantity) as collectionqty,
		   EC.collectiondate, FIRST_DAY_OF_WEEK(EC.collectiondate) AS week_start,
           fun_batch_ageinweek(EC.collectiondate,@breederbatchid,p_companyid) as ageinweek,
           
           DATE_ADD(FIRST_DAY_OF_WEEK(EC.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(EC.collectiondate))) DAY)
            AS week_end
         
    FROM
		eggscollection EC
        
		 LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id 
	
	WHERE
		FIND_IN_SET(  EC.breederbatchid,@breederbatchid) AND
        FIND_IN_SET( EC.shedid,@shedid) AND
		EC.collectiondate BETWEEN p_fromdate AND p_todate AND
        EC.companyid = p_companyid AND
        EC.statusid = 803
		group by EC.collectiondate, FIRST_DAY_OF_WEEK(EC.collectiondate) ,
        DATE_ADD(FIRST_DAY_OF_WEEK(EC.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(EC.collectiondate))) DAY)
        
	) as temp 
    group by week_start, week_end
    order by week_start;


        
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(
num INT(11),
VariencePerDiff DECIMAL(9,3),
itemid INT(11),
itemname VARCHAR(200),
itemnameper VARCHAR(200),
eggscollectionid INT(11),
Ageinweek INT(11),
OpeningBird INT(11),
week_start VARCHAR(200),
week_end varchar(200),
quantity VARCHAR(200),
percentage decimal(9,3),
Supervisiorname VARCHAR(200),
Production INT(11),
ActProPer  decimal(9,3),
ActHatchEgg INT(11),
ActHatchEggPer decimal(9,3),
StdEggPro_Per decimal(9,3),
StdHEPro_Per decimal(9,3),
variencePer decimal(9,3)
);

INSERT INTO tempmortality1 
select 
		(@num:= @num+1) as num, 
        @varience as VariencePerDiff,
        ED.itemid,
        REPLACE(I.itemname, ' ', '-')as itemname,
		CONCAT(REPLACE(I.itemname, ' ','-'),'Per')as itemnameper,
        ED.eggscollectionid,
        fun_batch_ageinweek(ED.collectiondate,@breederbatchid,p_companyid) as Ageinweek,
        fnc_transaction_date_wise_liveqty(@breederbatchid, @shedid, BB.femaleitemid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),p_companyid) as OpeningBird,
        DATE_FORMAT(FIRST_DAY_OF_WEEK(ED.collectiondate),'%d/%m/%Y') AS week_start,
        DATE_FORMAT(DATE_ADD(FIRST_DAY_OF_WEEK(ED.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(ED.collectiondate))) DAY),'%d/%m/%Y')
		AS week_end,
		ED.quantity,
      
        IF(ED.itemtypeid = @hatchitemtypeid,ROUND(((ED.quantity/ (fun_batchshed_eggdistributionqtyitemtypeweekwise(@breederbatchid,@shedid,@hatchitemtypeid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),(DATE_ADD(FIRST_DAY_OF_WEEK(ED.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK
		(ED.collectiondate))) DAY)),p_companyid)))*100),2) , ROUND(((ED.quantity/(fun_batchshed_eggdistributionqtytotal(@breederbatchid,@shedid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),(DATE_ADD(FIRST_DAY_OF_WEEK(ED.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK
		(ED.collectiondate))) DAY)),p_companyid)))*100),2)) as percentage,
        E.employeename as Supervisiorname,
		fun_batchshed_eggdistributionqtytotal(@breederbatchid,@shedid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),(DATE_ADD(FIRST_DAY_OF_WEEK(ED.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK
		(ED.collectiondate))) DAY)),p_companyid) as Production,
         ROUND(((
        ((fun_batchshed_eggdistributionqtytotal(@breederbatchid,@shedid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),(DATE_ADD(FIRST_DAY_OF_WEEK(ED.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK
		(ED.collectiondate))) DAY)),p_companyid))/
        (fnc_transaction_date_wise_liveqty(@breederbatchid, @shedid, BB.femaleitemid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),p_companyid))
        /7)*100)),2) as ActProPer,
        fun_batchshed_eggdistributionqtyitemtypeweekwise(@breederbatchid,@shedid,@hatchitemtypeid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),(DATE_ADD(FIRST_DAY_OF_WEEK(ED.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK
		(ED.collectiondate))) DAY)),p_companyid) as ActHatchEgg,
        
        ROUND((((fun_batchshed_eggdistributionqtyitemtypeweekwise(@breederbatchid,@shedid,@hatchitemtypeid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),(DATE_ADD(FIRST_DAY_OF_WEEK(ED.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK
		(ED.collectiondate))) DAY)),p_companyid))/
        (fun_batchshed_eggdistributionqtytotal(@breederbatchid,@shedid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),(DATE_ADD(FIRST_DAY_OF_WEEK(ED.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK
		(ED.collectiondate))) DAY)),p_companyid))
        )*100),2) as ActHatchEggPer,
		ROUND((BPO.hdinpercent),2)as StdEggPro_Per,
		ROUND((BPO.heinpercent),2) as StdHEPro_Per,
        ROUND((IFNULL(BPO.heinpercent,0)-
        ((
        (fun_batchshed_eggdistributionqtyitemtypeweekwise(@breederbatchid,@shedid,@hatchitemtypeid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),(DATE_ADD(FIRST_DAY_OF_WEEK(ED.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK
		(ED.collectiondate))) DAY)),p_companyid))/(fun_batchshed_eggdistributionqtytotal(@breederbatchid,@shedid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),(DATE_ADD(FIRST_DAY_OF_WEEK(ED.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK
		(ED.collectiondate))) DAY)),p_companyid)))
        )*100),2) as variencePer
		
       
		FROM eggsdistributiondetail  ED
		LEFT JOIN item I ON ED.itemid = I.id
        LEFT JOIN eggscollection EC ON EC.id = ED.eggscollectionid
        LEFT JOIN breederbatch BB ON BB.id = EC.breederbatchid
        LEFT JOIN employee E ON E.id = EC.createdby
        LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid
        LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = ED.itemid
		
	WHERE ED.eggscollectionid in (select id from eggscollection  where  FIND_IN_SET(breederbatchid,@breederbatchid) and FIND_IN_SET(shedid,@shedid) AND statusid = 803)
	AND ED.collectiondate BETWEEN p_fromdate AND p_todate
	AND  ED.statusid = 842;


SELECT * FROM tempmortality1;

DROP TEMPORARY TABLE IF EXISTS tempmortality2;
CREATE TEMPORARY TABLE tempmortality2
(
num INT(11),
VariencePerDiff DECIMAL(9,3),
itemid INT(11),
itemname VARCHAR(200),
itemnameper VARCHAR(200),
eggscollectionid INT(11),
Ageinweek INT(11),
OpeningBird INT(11),
week_start VARCHAR(200),
week_end varchar(200),
quantity VARCHAR(200),
percentage decimal(9,3),
Supervisiorname VARCHAR(200),
Production INT(11),
ActProPer  decimal(9,3),
ActHatchEgg INT(11),
ActHatchEggPer decimal(9,3),
StdEggPro_Per decimal(9,3),
StdHEPro_Per decimal(9,3),
variencePer decimal(9,3)
);

INSERT INTO tempmortality2 select * from tempmortality1;
-- select * from tempmortality2;

DROP TEMPORARY TABLE IF EXISTS tempmortality3;
CREATE TEMPORARY TABLE tempmortality3

(
num INT(11),
VariencePerDiff DECIMAL(9,3),
itemid INT(11),
itemname VARCHAR(200),
itemnameper VARCHAR(200),
eggscollectionid INT(11),
Ageinweek INT(11),
OpeningBird INT(11),
week_start VARCHAR(200),
week_end varchar(200),
quantity VARCHAR(200),
percentage decimal(9,3),
Supervisiorname VARCHAR(200),
Production INT(11),
ActProPer  decimal(9,3),
ActHatchEgg INT(11),
ActHatchEggPer decimal(9,3),
StdEggPro_Per decimal(9,3),
StdHEPro_Per decimal(9,3),
variencePer decimal(9,3)
);

INSERT INTO tempmortality3
select 
T1.num,
CASE T1.num 
WHEN 1 THEN 0
ELSE (select T1.variencePer - variencePer from tempmortality2 where num+1 = T1.num)  
END as VariencePerDiff,
T1.itemid,
T1.itemname,
T1.itemnameper,
T1.eggscollectionid,
T1.Ageinweek,
T1.OpeningBird,
T1.week_start,
T1.week_end,
T1.quantity,
T1.percentage,
T1.Supervisiorname,
T1.Production,
T1.ActProPer,
T1.ActHatchEgg,
T1.ActHatchEggPer,
T1.StdEggPro_Per,
T1.StdHEPro_Per,
T1.variencePer 


from tempmortality1 T1
-- where T1.Collection_Date !=  'NULL';
where T1.variencePer IS NOT NULL;

-- select * from tempmortality3;



SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality3;

SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemnameper = ''',
      itemnameper,
      ''' then percentage end),0) AS `',
      itemnameper, '`'
    )
  ) INTO @sql1
FROM
  tempmortality3;


SET @sql = CONCAT('SELECT week_start, week_end,Ageinweek,OpeningBird,Supervisiorname,Production,ActProPer,ActHatchEgg,ActHatchEggPer,StdEggPro_Per,StdHEPro_Per,variencePer,VariencePerDiff, ', @sql,',',@sql1, ' 
                  FROM tempmortality3 
                   GROUP BY week_start');

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
    
	  END IF;
  SET @Quantity = 0;
    SET @month = null;
    SET @ageinweek = null;
    
      
     if (p_frequency='month') then
    
       
    /* SELECT
		 -- SUM(ECD.quantity)  as Quantity,
    fun_batchshed_eggdistributionqtytotal(@breederbatchid,@shedid,MIN(EC.collectiondate),MAX(EC.collectiondate),p_companyid) as Quantity
			
		  ,MONTHNAME(EC.collectiondate) as  month,
           fun_batch_ageinweek(EC.collectiondate,@breederbatchid,p_companyid) as ageinweek 
           -- into @Quantity
           -- ,@month,@ageinweek
    FROM
		eggscollection EC
        
		 LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id 
	
	WHERE
		FIND_IN_SET(  EC.breederbatchid,@breederbatchid) AND
        FIND_IN_SET( EC.shedid,@shedid) AND
		EC.collectiondate BETWEEN p_fromdate AND p_todate AND
        EC.companyid = p_companyid AND
        EC.statusid = 803
		group by   MONTHNAME(EC.collectiondate) ;
        
        select @Quantity,@month,@ageinweek;*/
              
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(
itemid INT(11),
itemname VARCHAR(200),
eggscollectionid INT(11),
Month VARCHAR(200),
Production INT(11),
sample INT(11),
StdEggPro_Per decimal(9,3),
StdHEPro_Per decimal(9,3),
quantity VARCHAR(200));

INSERT INTO tempmortality1 
select 
	 ED.itemid,
	 REPLACE(I.itemname, ' ', '-')as itemname,
	 ED.eggscollectionid,
     MONTHNAME(ED.collectiondate) as Month,
     ECD.quantity as Production,
      ECD.quantity as sample,
	 (BPO.hdinpercent)as StdEggPro_Per,
	 (BPO.heinpercent) as StdHEPro_Per,
	 ED.quantity
      
		FROM eggsdistributiondetail  ED
		LEFT JOIN item I ON ED.itemid = I.id
        LEFT JOIN eggscollection EC ON EC.id = ED.eggscollectionid
        LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid
        LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = ED.itemid
		
	WHERE ED.eggscollectionid in (select id from eggscollection  where  FIND_IN_SET(breederbatchid,@breederbatchid) and FIND_IN_SET(shedid,@shedid) AND statusid = 803)
	AND ED.collectiondate BETWEEN p_fromdate AND p_todate
	AND  ED.statusid = 842;

SELECT * FROM tempmortality1;

DROP TEMPORARY TABLE IF EXISTS tempmortality2;
CREATE TEMPORARY TABLE tempmortality2
(
itemid INT(11),
itemname VARCHAR(200),
eggscollectionid INT(11),
Month VARCHAR(200),
Production INT(11),
sample INT(11),

-- Productionone INT(11),
StdEggPro_Per decimal(9,3),
StdHEPro_Per decimal(9,3),
quantity VARCHAR(200));

INSERT INTO tempmortality2 select * from tempmortality1;
select * from tempmortality2;


SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality1;
  
  
  
  
SET @sql = CONCAT('SELECT Month,  SUM(quantity) as Production, ', @sql,'
                  FROM tempmortality1 
                   GROUP BY Month');

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
        
        END IF;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollection_reportone`(
IN p_breederbatchid VARCHAR(200),
IN p_shedid VARCHAR(200),
IN p_fromdate DATE,
IN p_todate DATE,
IN p_frequency VARCHAR(50),
IN p_companyid INT


)
BEGIN

    SET @breederbatchid = p_breederbatchid;
    SET @shedid = p_shedid;
	SET @hatchingitemgroupids = null;
	SET @defaultcommercialeggsitemid = null;
	SET @defaultcrackedeggsitemid = null;
	SET @defaultdoubleyolkeggsitemid = null;
    SET @hatchqty = NULL;
	SET @commerqty = NULL;
	SET @creackedqty = NULL;
	SET @doubleyolkqty = NULL;
	SET @hatchingeggsA = NULl;
    SET @itemid = null;
    SET @defaultfemalechickid  = null;
    
   -- select  @breederbatchid,@shedid;
    SELECT  
		BS.hatchingitemgroupids,BS.defaultcommercialeggsitemid,
		BS.defaultdoubleyolkeggsitemid,BS.defaultfemalechickid,
        I.id as itemid
		INTO @hatchingitemgroupids,@defaultcommercialeggsitemid,
		-- @defaultcrackedeggsitemid,
        @defaultdoubleyolkeggsitemid,@defaultfemalechickid,
        @itemid
        
	FROM
		breedersetting BS
        LEFT JOIN itemgroup IG ON IG.id = BS.hatchingitemgroupids
        LEFT JOIN item I ON I.itemgroupid = IG.id
        
        WHERE 
			BS.companyid = p_companyid limit 1;
 select       
 @defaultcommercialeggsitemid,
@defaultcrackedeggsitemid, @defaultdoubleyolkeggsitemid,@itemid;
            
          
if(p_frequency = 'day')then   

   SELECT
		 SUM(ECD.quantity) as Quantity,
         ECD.quantity as Production,
         DATE_FORMAT( EC.collectiondate,'%d/%m/%Y') as collectiondate,
         fun_batch_ageinweek(EC.collectiondate,@breederbatchid,p_companyid) as Ageinweek,
         E.employeename as Employeename
        
        
		 
       
    FROM
		eggscollection EC
		 LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id 
         LEFT JOIN employee E ON E.id = EC.createdby
	
	WHERE
		FIND_IN_SET(  EC.breederbatchid,@breederbatchid) AND
        FIND_IN_SET( EC.shedid,@shedid) AND
		EC.collectiondate BETWEEN p_fromdate AND p_todate AND
        EC.companyid = p_companyid AND
        EC.statusid = 803
		group by EC.collectiondate;

 

         
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(itemid INT(11),
itemname VARCHAR(200),
eggscollectionid INT(11),
Collection_Date VARCHAR(200),
Ageinweek INT(11),
Employeename VARCHAR(200),
OpeningBird INT(11),
Production INT(11),
ActHatchEgg INT(11),
ActHatchEggPer decimal(9,3),
HBroken INT(11),
HGRA INT(11),
Jumbo INT(11),
Tableegg INT(11),
Wastage INT(11),
totalhatchegg INT(11),
ActProPer decimal(9,3),
-- finaledate DATE,
-- finalhatchingegg VARCHAR(200),
StdEggPro_Per decimal(9,3),
StdHEPro_Per decimal(9,3),
quantity VARCHAR(200));

INSERT INTO tempmortality1 
 select 
	ED.itemid,
	REPLACE(I.itemname, ' ', '-')as itemname,
	ED.eggscollectionid,
	DATE_FORMAT(ED.collectiondate,'%d/%m/%Y') as Collection_Date,
	fun_batch_ageinweek(ED.collectiondate,@breederbatchid,p_companyid) as Ageinweek,
    E.employeename as Employeename,
	fnc_transaction_date_wise_liveqty(@breederbatchid, @shedid, BB.femaleitemid,ED.collectiondate,p_companyid) as OpeningBird,
    ECD.quantity as Production, 
	ECD.quantity as ActHatchEgg, 
    ((ECD.quantity/ECD.quantity)*100) as ActHatchEggPer,
     fun_batchshed_eggdistributionqty(@breederbatchid,@shedid,172,ED.collectiondate,p_companyid) as HBroken,
     fun_batchshed_eggdistributionqty(@breederbatchid,@shedid,@itemid,ED.collectiondate,p_companyid) as HGRA,
     fun_batchshed_eggdistributionqty(@breederbatchid,@shedid,235,ED.collectiondate,p_companyid) as Jumbo,
     fun_batchshed_eggdistributionqty(@breederbatchid,@shedid,171,ED.collectiondate,p_companyid) as Tableegg,
     fun_batchshed_eggdistributionqty(@breederbatchid,@shedid,236,ED.collectiondate,p_companyid) as Wastage,
    (
      IFNULL(fun_batchshed_eggdistributionqty(@breederbatchid,@shedid,170,ED.collectiondate,p_companyid),0) 
     +IFNULL(fun_batchshed_eggdistributionqty(@breederbatchid,@shedid,169,ED.collectiondate,p_companyid),0) 
    ) as totalhatchegg,
     

    ((ECD.quantity/(fnc_transaction_date_wise_liveqty(@breederbatchid, @shedid, BB.femaleitemid,ED.collectiondate,p_companyid)))*100) as ActProPer,
    -- DATEDIFF(p_todate,ED.collectiondate) as finaledate,
    -- ED.quantity as finalhatchingegg,
	(BPO.hdinpercent/7)as StdEggPro_Per,
    (BPO.heinpercent/7) as StdHEPro_Per,
	ED.quantity
   
    
	 
		FROM eggsdistributiondetail  ED
		LEFT JOIN item I ON ED.itemid = I.id
        LEFT JOIN eggscollection EC ON EC.id = ED.eggscollectionid
        LEFT JOIN breederbatch BB ON BB.id = EC.breederbatchid
        LEFT JOIN employee E ON E.id = EC.createdby
        LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid
        LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = ED.itemid
		
	WHERE ED.eggscollectionid in (select id from eggscollection  where  FIND_IN_SET(breederbatchid,@breederbatchid) and FIND_IN_SET(shedid,@shedid) AND statusid = 803)
	AND ED.collectiondate BETWEEN p_fromdate AND p_todate
	AND  ED.statusid = 842;


 SELECT * FROM tempmortality1;

SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality1;
 
 
SET @sql = CONCAT('SELECT Collection_Date,Ageinweek,Employeename,OpeningBird,Production,ActHatchEgg,ActHatchEggPer,ActProPer,StdEggPro_Per,StdHEPro_Per, ', @sql, ' 
                  FROM tempmortality1 
                   GROUP BY Collection_Date');
-- select   @sql;                  

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
END IF;
         
         
         
	 if(p_frequency = 'week') then
     	SELECT sum(collectionqty) as Quantity, DATE_FORMAT(week_start,'%d/%m/%Y') as week_start, DATE_FORMAT(week_end,'%d/%m/%Y') as week_end  from (
	SELECT
		 SUM(ECD.quantity) as collectionqty,
		   EC.collectiondate, FIRST_DAY_OF_WEEK(EC.collectiondate) AS week_start,
           fun_batch_ageinweek(EC.collectiondate,@breederbatchid,p_companyid) as ageinweek,
           
           DATE_ADD(FIRST_DAY_OF_WEEK(EC.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(EC.collectiondate))) DAY)
            AS week_end
         
    FROM
		eggscollection EC
        
		 LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id 
	
	WHERE
		FIND_IN_SET(  EC.breederbatchid,@breederbatchid) AND
        FIND_IN_SET( EC.shedid,@shedid) AND
		EC.collectiondate BETWEEN p_fromdate AND p_todate AND
        EC.companyid = p_companyid AND
        EC.statusid = 803
		group by EC.collectiondate, FIRST_DAY_OF_WEEK(EC.collectiondate) ,
        DATE_ADD(FIRST_DAY_OF_WEEK(EC.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(EC.collectiondate))) DAY)
        
	) as temp 
    group by week_start, week_end
    order by week_start;


        
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(itemid INT(11),
itemname VARCHAR(200),
eggscollectionid INT(11),
Ageinweek INT(11),
week_start VARCHAR(200),
week_end varchar(200),
quantity VARCHAR(200),
Production INT(11),
StdEggPro_Per decimal(9,3),
StdHEPro_Per decimal(9,3)
);

INSERT INTO tempmortality1 
select 
        ED.itemid,
        REPLACE(I.itemname, ' ', '-')as itemname,
        ED.eggscollectionid,
        fun_batch_ageinweek(ED.collectiondate,@breederbatchid,p_companyid) as Ageinweek,
        DATE_FORMAT(FIRST_DAY_OF_WEEK(ED.collectiondate),'%d/%m/%Y') AS week_start,
        DATE_FORMAT(DATE_ADD(FIRST_DAY_OF_WEEK(ED.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(ED.collectiondate))) DAY),'%d/%m/%Y')
		AS week_end,
		ED.quantity,
        ECD.quantity as Production, 
		(BPO.hdinpercent)as StdEggPro_Per,
		(BPO.heinpercent) as StdHEPro_Per
		
       
		FROM eggsdistributiondetail  ED
		LEFT JOIN item I ON ED.itemid = I.id
        LEFT JOIN eggscollection EC ON EC.id = ED.eggscollectionid
        LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid
        LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = ED.itemid
		
	WHERE ED.eggscollectionid in (select id from eggscollection  where  FIND_IN_SET(breederbatchid,@breederbatchid) and FIND_IN_SET(shedid,@shedid) AND statusid = 803)
	AND ED.collectiondate BETWEEN p_fromdate AND p_todate
	AND  ED.statusid = 842;


SELECT * FROM tempmortality1;

SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality1;
SET @sql = CONCAT('SELECT week_start, week_end,Ageinweek,Production,StdEggPro_Per,StdHEPro_Per, ', @sql, ' 
                  FROM tempmortality1 
                   GROUP BY week_start');

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
    
	  END IF;
      
     if (p_frequency='month') then
       
     SELECT
		 SUM(ECD.quantity) as Quantity,
		   MONTHNAME(EC.collectiondate) as  month,
           fun_batch_ageinweek(EC.collectiondate,@breederbatchid,p_companyid) as ageinweek
         
          
       
    FROM
		eggscollection EC
        
		 LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id 
	
	WHERE
		 FIND_IN_SET(  EC.breederbatchid,@breederbatchid) AND
        FIND_IN_SET( EC.shedid,@shedid) AND
		EC.collectiondate BETWEEN p_fromdate AND p_todate AND
        EC.companyid = p_companyid AND
        EC.statusid = 803
		group by   MONTHNAME(EC.collectiondate) ;
               
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(itemid INT(11),
itemname VARCHAR(200),
eggscollectionid INT(11),
Month VARCHAR(200),
Ageinweek INT(11),
Production INT(11),
StdEggPro_Per decimal(9,3),
StdHEPro_Per decimal(9,3),
quantity VARCHAR(200));

INSERT INTO tempmortality1 
select 
	 ED.itemid,
	 REPLACE(I.itemname, ' ', '-')as itemname,
	 ED.eggscollectionid,
     MONTHNAME(ED.collectiondate) as Month,
     fun_batch_ageinweek(ED.collectiondate,@breederbatchid,p_companyid) as Ageinweek,
	ECD.quantity as Production, 
	(BPO.hdinpercent)as StdEggPro_Per,
	(BPO.heinpercent) as StdHEPro_Per,
	ED.quantity
    
      
           FROM eggsdistributiondetail  ED
		LEFT JOIN item I ON ED.itemid = I.id
        LEFT JOIN eggscollection EC ON EC.id = ED.eggscollectionid
        LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid
        LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = ED.itemid
		
	WHERE ED.eggscollectionid in (select id from eggscollection  where  FIND_IN_SET(breederbatchid,@breederbatchid) and FIND_IN_SET(shedid,@shedid) AND statusid = 803)
	AND ED.collectiondate BETWEEN p_fromdate AND p_todate
	AND  ED.statusid = 842;

SELECT * FROM tempmortality1;

SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality1;
SET @sql = CONCAT('SELECT Month,Ageinweek,Production,StdEggPro_Per,StdHEPro_Per, ', @sql, ' 
                  FROM tempmortality1 
                   GROUP BY Month');

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
        
        END IF;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollection_reportthree`(
IN p_breederbatchid VARCHAR(200),
IN p_shedid VARCHAR(200),
IN p_fromdate DATE,
IN p_todate DATE,
IN p_frequency VARCHAR(50),
IN p_companyid INT


)
BEGIN

    SET @breederbatchid = p_breederbatchid;
    SET @shedid = p_shedid;
	SET @hatchingitemgroupids = null;
	SET @defaultcommercialeggsitemid = null;
	SET @defaultcrackedeggsitemid = null;
	SET @defaultdoubleyolkeggsitemid = null;
    SET @hatchqty = NULL;
	SET @commerqty = NULL;
	SET @creackedqty = NULL;
	SET @doubleyolkqty = NULL;
	SET @hatchingeggsA = NULl;
    SET @itemid = null;
    SET @defaultfemalechickid  = null;
    
   -- select  @breederbatchid,@shedid;
    SELECT  
		hatchingitemgroupids,defaultcommercialeggsitemid,
		defaultcrackedeggsitemid,defaultdoubleyolkeggsitemid,defaultfemalechickid
		INTO @hatchingitemgroupids,@defaultcommercialeggsitemid,
		@defaultcrackedeggsitemid, @defaultdoubleyolkeggsitemid,@defaultfemalechickid
        
	FROM
		breedersetting
        
        WHERE 
			companyid = p_companyid limit 1;
            
          
if(p_frequency = 'day')then   

   SELECT
		 SUM(ECD.quantity) as Quantity,
         ECD.quantity as Production,
         DATE_FORMAT( EC.collectiondate,'%d/%m/%Y') as collectiondate,
         fun_batch_ageinweek(EC.collectiondate,@breederbatchid,p_companyid) as Ageinweek,
         E.employeename as Employeename
        
		 
       
    FROM
		eggscollection EC
		 LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id 
         LEFT JOIN employee E ON E.id = EC.createdby
	
	WHERE
		FIND_IN_SET(  EC.breederbatchid,30) AND
        FIND_IN_SET( EC.shedid,27) AND
		EC.collectiondate BETWEEN p_fromdate AND p_todate AND
        EC.companyid = p_companyid AND
        EC.statusid = 803
		group by EC.collectiondate;

 

         
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(itemid INT(11),
itemname VARCHAR(200),
eggscollectionid INT(11),
Collection_Date VARCHAR(200),
Ageinweek INT(11),
Employeename VARCHAR(200),
OpeningBird INT(11),
Production INT(11),
-- finaledate DATE,
StdEggPro_Per decimal(9,3),
StdHEPro_Per decimal(9,3),
quantity VARCHAR(200));

INSERT INTO tempmortality1 
 select 
	ED.itemid,
	REPLACE(I.itemname, ' ', '-')as itemname,
	ED.eggscollectionid,
	DATE_FORMAT(ED.collectiondate,'%d/%m/%Y') as Collection_Date,
	fun_batch_ageinweek(ED.collectiondate,@breederbatchid,p_companyid) as Ageinweek,
    E.employeename as Employeename,
	MIN(fnc_transaction_date_wise_liveqty(@breederbatchid,27, @defaultfemalechickid,ED.collectiondate,p_companyid)) as OpeningBird,
    -- ECD.quantity as Production, 
    -- DATEDIFF(p_todate,ED.collectiondate) as finaledate,
	(BPO.hdinpercent/7)as StdEggPro_Per,
    (BPO.heinpercent/7) as StdHEPro_Per,
	ED.quantity
   
    
	 
		FROM eggsdistributiondetail  ED
		LEFT JOIN item I ON ED.itemid = I.id
        LEFT JOIN eggscollection EC ON EC.id = ED.eggscollectionid
        LEFT JOIN employee E ON E.id = EC.createdby
        LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid
        LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = ED.itemid
		
	WHERE ED.eggscollectionid in (select id from eggscollection  where  FIND_IN_SET(breederbatchid,30) and FIND_IN_SET(shedid,27) AND statusid = 803)
	AND ED.collectiondate BETWEEN p_fromdate AND p_todate
	AND  ED.statusid = 842;


 SELECT * FROM tempmortality1;

SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality1;
 
 
SET @sql = CONCAT('SELECT Collection_Date,Ageinweek,Employeename,OpeningBird,Production,StdEggPro_Per,StdHEPro_Per, ', @sql, ' 
                  FROM tempmortality1 
                   GROUP BY Collection_Date');
-- select   @sql;                  

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
END IF;
         
         
         
	 if(p_frequency = 'week') then
     	SELECT sum(collectionqty) as Quantity, DATE_FORMAT(week_start,'%d/%m/%Y') as week_start, DATE_FORMAT(week_end,'%d/%m/%Y') as week_end  from (
	SELECT
		 SUM(ECD.quantity) as collectionqty,
		   EC.collectiondate, FIRST_DAY_OF_WEEK(EC.collectiondate) AS week_start,
           fun_batch_ageinweek(EC.collectiondate,@breederbatchid,p_companyid) as ageinweek,
           
           DATE_ADD(FIRST_DAY_OF_WEEK(EC.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(EC.collectiondate))) DAY)
            AS week_end
         
    FROM
		eggscollection EC
        
		 LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id 
	
	WHERE
		FIND_IN_SET(  EC.breederbatchid,@breederbatchid) AND
        FIND_IN_SET( EC.shedid,@shedid) AND
		EC.collectiondate BETWEEN p_fromdate AND p_todate AND
        EC.companyid = p_companyid AND
        EC.statusid = 803
		group by EC.collectiondate, FIRST_DAY_OF_WEEK(EC.collectiondate) ,
        DATE_ADD(FIRST_DAY_OF_WEEK(EC.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(EC.collectiondate))) DAY)
        
	) as temp 
    group by week_start, week_end
    order by week_start;


        
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(itemid INT(11),
itemname VARCHAR(200),
eggscollectionid INT(11),
Ageinweek INT(11),
week_start VARCHAR(200),
week_end varchar(200),
quantity VARCHAR(200),
Production INT(11),
StdEggPro_Per decimal(9,3),
StdHEPro_Per decimal(9,3)
);

INSERT INTO tempmortality1 
select 
        ED.itemid,
        REPLACE(I.itemname, ' ', '-')as itemname,
        ED.eggscollectionid,
        fun_batch_ageinweek(ED.collectiondate,@breederbatchid,p_companyid) as Ageinweek,
        DATE_FORMAT(FIRST_DAY_OF_WEEK(ED.collectiondate),'%d/%m/%Y') AS week_start,
        DATE_FORMAT(DATE_ADD(FIRST_DAY_OF_WEEK(ED.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(ED.collectiondate))) DAY),'%d/%m/%Y')
		AS week_end,
		ED.quantity,
        ECD.quantity as Production, 
		(BPO.hdinpercent)as StdEggPro_Per,
		(BPO.heinpercent) as StdHEPro_Per
		
       
		FROM eggsdistributiondetail  ED
		LEFT JOIN item I ON ED.itemid = I.id
        LEFT JOIN eggscollection EC ON EC.id = ED.eggscollectionid
        LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid
        LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = ED.itemid
		
	WHERE ED.eggscollectionid in (select id from eggscollection  where  FIND_IN_SET(breederbatchid,@breederbatchid) and FIND_IN_SET(shedid,@shedid) AND statusid = 803)
	AND ED.collectiondate BETWEEN p_fromdate AND p_todate
	AND  ED.statusid = 842;


SELECT * FROM tempmortality1;

SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality1;
SET @sql = CONCAT('SELECT week_start, week_end,Ageinweek,Production,StdEggPro_Per,StdHEPro_Per, ', @sql, ' 
                  FROM tempmortality1 
                   GROUP BY week_start');

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
    
	  END IF;
      
     if (p_frequency='month') then
       
     SELECT
		 SUM(ECD.quantity) as Quantity,
		   MONTHNAME(EC.collectiondate) as  month,
           fun_batch_ageinweek(EC.collectiondate,@breederbatchid,p_companyid) as ageinweek
         
          
       
    FROM
		eggscollection EC
        
		 LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id 
	
	WHERE
		 FIND_IN_SET(  EC.breederbatchid,@breederbatchid) AND
        FIND_IN_SET( EC.shedid,@shedid) AND
		EC.collectiondate BETWEEN p_fromdate AND p_todate AND
        EC.companyid = p_companyid AND
        EC.statusid = 803
		group by   MONTHNAME(EC.collectiondate) ;
               
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(itemid INT(11),
itemname VARCHAR(200),
eggscollectionid INT(11),
Month VARCHAR(200),
Ageinweek INT(11),
Production INT(11),
StdEggPro_Per decimal(9,3),
StdHEPro_Per decimal(9,3),
quantity VARCHAR(200));

INSERT INTO tempmortality1 
select 
	 ED.itemid,
	 REPLACE(I.itemname, ' ', '-')as itemname,
	 ED.eggscollectionid,
     MONTHNAME(ED.collectiondate) as Month,
     fun_batch_ageinweek(ED.collectiondate,@breederbatchid,p_companyid) as Ageinweek,
	ECD.quantity as Production, 
	(BPO.hdinpercent)as StdEggPro_Per,
	(BPO.heinpercent) as StdHEPro_Per,
	ED.quantity
    
      
           FROM eggsdistributiondetail  ED
		LEFT JOIN item I ON ED.itemid = I.id
        LEFT JOIN eggscollection EC ON EC.id = ED.eggscollectionid
        LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid
        LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = ED.itemid
		
	WHERE ED.eggscollectionid in (select id from eggscollection  where  FIND_IN_SET(breederbatchid,@breederbatchid) and FIND_IN_SET(shedid,@shedid) AND statusid = 803)
	AND ED.collectiondate BETWEEN p_fromdate AND p_todate
	AND  ED.statusid = 842;

SELECT * FROM tempmortality1;

SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality1;
SET @sql = CONCAT('SELECT Month,Ageinweek,Production,StdEggPro_Per,StdHEPro_Per, ', @sql, ' 
                  FROM tempmortality1 
                   GROUP BY Month');

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
        
        END IF;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollection_save`(

	IN p_id INT(11)	,
	IN p_breederbatchid INT(11),
	IN p_shedid INT(11),
	IN p_createdby INT(11),
	IN p_collectiondate DATE,	
	IN P_productionstartdate DATE,
	IN p_approvedby INT(11),
	IN p_approvaldate date,	
	IN p_statusid INT(11),	
	IN P_remark varchar(200),	
	IN p_companyid INT(11),
	IN p_userid INT,
	OUT out_id INT
    )
BEGIN
    SET @action = null;
    SET @defaultchickwarehouseid = null;
    
    -- Get default Male and Female chick item
    SELECT  
			defaultchickwarehouseid
			INTO @defaultchickwarehouseid
	FROM
		breedersetting BS
    WHERE 
		BS.companyid = p_companyid limit 1;
        
	IF EXISTS(SELECT id FROM amortization WHERE breederbatchid = p_breederbatchid) THEN
		IF(NULLIF(p_id, '0') IS NULL) THEN
			
			INSERT INTO eggscollection 
					(breederbatchid, shedid, createdby, collectiondate, productionstartdate, approvedby, 
					approvaldate, statusid, remark, companyid )
				VALUES 
					(p_breederbatchid, p_shedid, p_createdby, p_collectiondate, p_productionstartdate, p_approvedby, p_approvaldate, 
					p_statusid, p_remark, p_companyid );
			SET @action = 'INSERT';
            
		
      
		ELSE
		
			UPDATE eggscollection
			
				SET breederbatchid = p_breederbatchid, 
					shedid = p_shedid,
					createdby = p_createdby,
					collectiondate = p_collectiondate,
					productionstartdate = p_productionstartdate,
					approvedby = p_approvedby, 
					approvaldate = p_approvaldate,
					statusid = p_statusid, 
					remark = p_remark,  
					companyid  = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				
				 
			   SET @action = 'UPDATE';     
					
			-- update towarehouseid when statusid is 803 = 'transfer & approved
			UPDATE eggscollection SET towarehouseid = @defaultchickwarehouseid where statusid = 803;
					
		END IF;
    
		SELECT LAST_INSERT_ID() INTO out_id; 
		
		-- update livebatchdate of batchdetail table
		UPDATE batchdetail SET livebatchdate = p_collectiondate WHERE breederbatchid = p_breederbatchid;
		
	
	
	   -- record log
	   CALL spc_commonlog_save(p_companyid, 'eggscollection', out_id, @action, p_userid);
       
	ELSE
		SELECT -1 INTO out_id;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollection_search`(
IN p_companyid INT
)
BEGIN
  SELECT
		EG.id,
        DATE_FORMAT( EG.collectiondate,'%d/%m/%Y') as collectiondate,
        EG.statusid,
        EG.shedid,
        R.refname as statusname,
        BS.shedname,
        EG.companyid
	
    FROM
		eggscollection EG
        
        LEFT JOIN reference R ON EG.statusid = R.id
        LEFT JOIN breedershed BS ON EG.shedid = BS.id
	
	WHERE
		EG.companyid = p_companyid
		
        ORDER by EG.id desc;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollection_select`(
IN p_collectiondate date,
IN p_id INT,
IN p_cpmapnyid INT
)
BEGIN

	SELECT 
		EG.id,
        EG.breederbatchid,
        EG.shedid,
        EG.createdby,
		DATE_FORMAT(fnc_getplacementdate(EG.breederbatchid,EG.companyid),'%d/%m/%Y')as batchplacementdate,
		DATE_FORMAT(EG.collectiondate,'%d/%m/%Y') as collectiondate,
        DATE_FORMAT(EG.productionstartdate,'%d/%m/%Y') as productionstartdate,
        EG.productionweek,
        EG.approvedby,
        EG.approvaldate,
        EG.statusid,
        EG.remark,
        EG.companyid,
        S.shedname,
        REF.refname as statusname,
        BB.batchname
        
        
	FROM
		eggscollection EG
		LEFT JOIN breedershed S ON EG.shedid = S.id
        LEFT JOIN `reference` REF ON EG.statusid = REF.id
        LEft JOIN breederbatch BB ON EG.breederbatchid = BB.id
        LEft JOIN breederbatchplacement BP ON EG.breederbatchid = BP.breederbatchid
    
	WHERE
		EG.collectiondate = p_collectiondate AND
        EG.id = p_id AND
        EG.companyid = p_cpmapnyid 
        
         ORDER by EG.id desc;
	END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollection_selectbyid`(
IN p_id INT,
IN p_cpmapnyid INT
)
BEGIN

	SELECT 
		EG.id,
        EG.breederbatchid,
        EG.shedid,
        EG.createdby,
		DATE_FORMAT(fnc_getplacementdate(EG.breederbatchid,EG.companyid),'%d/%m/%Y')as batchplacementdate,
		DATE_FORMAT(EG.collectiondate,'%d/%m/%Y') as collectiondate,
        DATE_FORMAT(EG.productionstartdate,'%d/%m/%Y') as productionstartdate,
        EG.productionweek,
        EG.approvedby,
        EG.approvaldate,
        EG.statusid,
        EG.remark,
        EG.companyid,
        S.shedname,
        REF.refname as statusname,
        BB.batchname
        
        
	FROM
		eggscollection EG
		LEFT JOIN breedershed S ON EG.shedid = S.id
        LEFT JOIN `reference` REF ON EG.statusid = REF.id
        LEft JOIN breederbatch BB ON EG.breederbatchid = BB.id
        LEft JOIN breederbatchplacement BP ON EG.breederbatchid = BP.breederbatchid
    
	WHERE
        EG.id = p_id AND
        EG.companyid = p_cpmapnyid 
        
         ORDER by EG.id desc;
	END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggscollection_tilldate`(
    p_breederbatchid INT,
    p_shedid INT,
    p_collectiondate DATE,
    p_companyid INT
    )
BEGIN
	SET @eggscollectionQty = null;
	SET @hatchingQty = null;
    SET @placementdate = null;
    SET @DefaultFemaleChiksid = NULL;
	SET @liveqty = NULL;
    SET @weekno = null;
    
    
-- femaleid by batchid
SELECT 
   femaleitemid INTO @DefaultFemaleChiksid
   FROM breederbatch
   WHERE id = p_breederbatchid;
   
    -- shed,batchid itemwise live stock-- 
   SELECT fnc_batchwise_malefemaleopbalance(p_breederbatchid, p_shedid, @DefaultFemaleChiksid ,p_collectiondate,p_companyid) INTO @liveqty;
	
    -- get batch palcement date
  
  
       SELECT fnc_getplacementdate(p_breederbatchid,p_companyid)  INTO @placementdate;
    
    -- for eggscollection qty
	SELECT
       IFNULL(SUM(ECD.quantity), 0) INTO @eggscollectionQty
			From eggscollection EC
			LEFT JOIN eggscollectiondetail ECD ON EC.id = ECD.eggscollectionid
			WHERE EC.breederbatchid = p_breederbatchid AND
				  EC.shedid = p_shedid AND
				  EC.collectiondate <= p_collectiondate AND
				  EC.companyid = p_companyid ;
          
	 -- for distribution qty
	SELECT
	
       IFNULL(SUM(ED.quantity), 0) INTO @hatchingQty
			From eggscollection EC
			LEFT JOIN eggsdistributiondetail ED ON EC.id = ED.eggscollectionid 
			WHERE EC.breederbatchid = p_breederbatchid AND
				  EC.shedid = p_shedid AND
				  EC.collectiondate <= p_collectiondate AND
				  EC.companyid = p_companyid AND
				  ED.itemtypeid = 881 
				  group by ED.itemtypeid;
	
	SELECT TRUNCATE(((DATEDIFF(p_collectiondate,@placementdate)+1)/7),0) INTO  @weekno;
    SELECT ifnull((((DATEDIFF(p_collectiondate,@placementdate)+1)%7)),0) INTO  @days;
  
SELECT  @eggscollectionQty AS eggscollectionQty, 
		@hatchingQty as hatchingQty,DATE_FORMAT(@placementdate,'%d/%m/%Y') as placementdate,
		FORMAT(((@hatchingQty/@eggscollectionQty)*100),3) as hatchingeggsper,
        @weekno  as weekno,@days as days, concat(@weekno,'-Week,',@days,'-Days')as weeknowithdays,@liveqty as instock;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggsdistributiondetail_fortransfertohatchery`(
	IN p_breederbatchid INT(11),
     IN p_warehouse_id INT(11),
    IN p_companyid INT(11)
)
BEGIN
SELECT * FROM (
SELECT EDD.itembatchid,
			   EDD.itemid,
			   EDD.breederbatchid,
			   EDD.itemtypeid,
			   I.itemcode,
			   I.itemname,
               fnc_eggscollection_itembatchbalance(EDD.itembatchid,EDD.itemid,p_warehouse_id,p_companyid) as receivedquantity
FROM eggscollection E
Inner join eggsdistributiondetail EDD ON EDD.eggscollectionid = E.id  AND EDD.itemtypeid = 881 AND EDD.statusid = 842
LEFT JOIN item I ON I.id = EDD.itemid
WHERE E.breederbatchid = p_breederbatchid 
AND towarehouseid = p_warehouse_id 
AND E.statusid = 803
)as teamp WHERE receivedquantity>0;

		
	/*SELECT EDD.itembatchid,
    EDD.id,
			   EDD.itemid,
			   EDD.breederbatchid,
			   EDD.itemtypeid,
			   I.itemcode,
			   I.itemname,
			   fnc_eggsdistributiondetail_itembatch(EDD.itembatchid,p_companyid) as receivedquantity
			   
		FROM eggsdistributiondetail EDD
		
		LEFT JOIN item I ON I.id = EDD.itemid
		
		WHERE EDD.breederbatchid = p_breederbatchid
		AND EDD.itemtypeid = 881 -- hatching eggs
		AND EDD.statusid = 842
		AND EDD.companyid = p_companyid; 
    
  --  END IF;*/
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggsdistributiondetail_save`(
	IN p_id INT(11),
	IN p_eggscollectionid INT(11),
	IN p_shedid	INT(11),
    IN p_itemtypeid INT(11),
	IN p_itemid INT(11),
	IN p_quantity INT(11),
	IN p_avgweight DECIMAL(9,3),
    IN p_statusid INT(11),
    IN p_collectiondate DATE,
    IN p_breederbatchid INT(11),
    IN p_remark VARCHAR(200),
	IN p_companyid INT(11),
    IN p_userid INT,
	OUT out_id INT
	)
BEGIN
SET @action = null;
-- create itembatch for eggsdistributiondetail
    
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
       BEGIN
        -- IF(p_quantity !=0) THEN
	
		INSERT INTO eggsdistributiondetail 
				(eggscollectionid, shedid, itemtypeid, itemid, quantity, avgweight, statusid, collectiondate, breederbatchid, remark, companyid )
			VALUES 
				(p_eggscollectionid, p_shedid, p_itemtypeid, p_itemid, p_quantity, p_avgweight, p_statusid, p_collectiondate, p_breederbatchid,p_remark, p_companyid);
	  
       SELECT LAST_INSERT_ID() INTO out_id; 
    
    SET @action = 'INSERT';
   -- END IF;
      END;
	ELSE
        BEGIN
		   -- IF(p_quantity !=0) THEN
			UPDATE eggsdistributiondetail
			
				SET eggscollectionid = p_eggscollectionid,	
					shedid = p_shedid,
					itemtypeid = p_itemtypeid,
					itemid = p_itemid,
					quantity = p_quantity,
					avgweight = p_avgweight,
					statusid  = p_statusid ,
					collectiondate = p_collectiondate,
					breederbatchid = p_breederbatchid,
					remark = p_remark,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				 
			   SET @action = 'UPDATE';    
               
                SELECT LAST_INSERT_ID() INTO out_id; 
		-- END IF;
	   END;       
	
    END IF;
    SELECT 0 INTO out_id; 
    
    -- update breederbatch status = 223 'complete'
    /*IF (p_statusid = 842) THEN
		UPDATE breederbatch SET statusid = 223 WHERE id = p_breederbatchid;
    END IF;*/
    
    /*IF (p_statusid = 842) THEN
    IF(p_quantity !=0) THEN
		CALL spc_materialrecptdetail_byeggsdistribution_save(p_id, p_eggscollectionid,p_itemid,p_quantity,p_companyid,p_userid);
        END IF;
    END IF;*/
    
        
   -- record log
   
   IF(@action != null) then
   CALL spc_commonlog_save(p_companyid, 'eggsdistributiondetail', out_id, @action, p_userid);
    
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggsdistributiondetail_select`(
  IN p_eggscollectionid INT(11),
  IN p_collectiondate DATE,
  IN p_companyid INT(11)
  )
BEGIN

    SELECT
			ED.id,
            itemtypeid,
			itemid,
            quantity,
            avgweight,
            statusid,
            I.itemname,
			REF.refname,
            ED.remark,
			ED.companyid
         
    FROM
		eggsdistributiondetail ED
        
        LEFT JOIN item I ON ED.itemid =I.id
        LEFT JOIN `reference` REF ON ED.statusid = REF.id
   	
	WHERE
		ED.eggscollectionid = p_eggscollectionid AND
		ED.collectiondate = p_collectiondate AND
        ED.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggsgrade_delete`(
	IN p_id INT
   
)
BEGIN
	DELETE FROM eggsgrade WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggsgrade_save`(
	IN p_id INT,
    IN p_gradename VARCHAR(100),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

IF EXISTS(
            SELECT gradename from eggsgrade where gradename = p_gradename
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO eggsgrade 
				(gradename, companyid)
			VALUES 
				(p_gradename, p_companyid);
                
			SET @action = 'INSERT';

	ELSE
    
		UPDATE eggsgrade
			SET gradename = p_gradename, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
    
	  SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'eggsgrade', out_id, @action, p_userid);
     END;
END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggsgrade_search`(
  IN p_companyid INT 
)
BEGIN
	SELECT id ,
		   gradename
            
    FROM  eggsgrade 
    WHERE 
          companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggsgrade_select`(
  IN p_id INT 
)
BEGIN
	SELECT id ,
           gradename
            
    FROM  eggsgrade 
    WHERE 
          id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggstock_report`(
	IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_breederbatchids VARCHAR(200)
)
BEGIN
    SET @@sql_mode = '';
	SET @hatchingitemgroupids = null;
    SET @defaultchickwarehouseid = null;
    SELECT GROUP_CONCAT(hatchingitemgroupids), defaultchickwarehouseid
    INTO @hatchingitemgroupids, @defaultchickwarehouseid
    FROM breedersetting LIMIT 1;
    
    SET @warehousebinids = null;
	SELECT GROUP_CONCAT(DISTINCT id) INTO @warehousebinids
	FROM warehousebin
	WHERE warehouseid = @defaultchickwarehouseid;
	    
    -- SELECT @openingrate as openingrate;
	SET @itemids = null;
    SELECT GROUP_CONCAT(DISTINCT id) INTO @itemids 
    FROM item
    WHERE FIND_IN_SET(itemgroupid, @hatchingitemgroupids);
    
    SET @firsttransactiondate = null;
    SELECT ED.collectiondate INTO @firsttransactiondate FROM eggsdistributiondetail ED
    WHERE FIND_IN_SET(ED.breederbatchid ,@breederbatchids)
    AND FIND_IN_SET(ED.itemid, @itemids) LIMIT 1;
    
	-- production qty
    DROP TEMPORARY TABLE IF EXISTS productiontbl;
    CREATE TEMPORARY TABLE productiontbl
    SELECT IFNULL(SUM(EDD.quantity),0) as productionstock,
    IFNULL(SUM(MM.itemvalue)/SUM(MM.quantity),0) as productionrate,
    (IFNULL(SUM(EDD.quantity),0) * IFNULL(SUM(MM.itemvalue)/SUM(MM.quantity),0)) as productionamount,
    (IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(EDD.breederbatchid,(SELECT collectiondate FROM eggsdistributiondetail WHERE breederbatchid = B.id ORDER BY id DESC LIMIT 1),(SELECT collectiondate FROM eggsdistributiondetail WHERE breederbatchid = B.id ORDER BY id DESC LIMIT 1),861),0) + 
	IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(EDD.breederbatchid,(SELECT collectiondate FROM eggsdistributiondetail WHERE breederbatchid = B.id ORDER BY id DESC LIMIT 1),(SELECT collectiondate FROM eggsdistributiondetail WHERE breederbatchid = B.id ORDER BY id DESC LIMIT 1),862),0)+
	IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(EDD.breederbatchid,(SELECT collectiondate FROM eggsdistributiondetail WHERE breederbatchid = B.id ORDER BY id DESC LIMIT 1),(SELECT collectiondate FROM eggsdistributiondetail WHERE breederbatchid = B.id ORDER BY id DESC LIMIT 1),863),0)+
	IFNULL(fnc_calculate_consumptioncost_byconsumptiontype(EDD.breederbatchid,(SELECT collectiondate FROM eggsdistributiondetail WHERE breederbatchid = B.id ORDER BY id DESC LIMIT 1),(SELECT collectiondate FROM eggsdistributiondetail WHERE breederbatchid = B.id ORDER BY id DESC LIMIT 1),864),0) + 
    IFNULL(SUM(JA.dramount),0) + fun_birdcost(EDD.breederbatchid, 721)) as productionrate1,
    B.id as batchid,
    B.batchname
	FROM eggsdistributiondetail EDD
    LEFT JOIN journalentryfor_amortization JA ON JA.jedate = EDD.collectiondate
    INNER JOIN breederbatch B ON B.id = EDD.breederbatchid
	LEFT JOIN materialmovement MM ON MM.itembatch = EDD.itembatchid
	WHERE FIND_IN_SET(EDD.breederbatchid ,p_breederbatchids)
	AND EDD.itemtypeid = 881
	AND EDD.collectiondate between p_fromdate AND p_todate
    GROUP BY EDD.breederbatchid;
    
	-- transfered stock
    DROP TEMPORARY TABLE IF EXISTS transfertbl;
    CREATE TEMPORARY TABLE transfertbl
    SELECT IFNULL(SUM(MM.quantity),0) as transferstock, 
    IFNULL(SUM(MM.itemvalue)/SUM(MM.quantity),0) as transferrate,
    (IFNULL(SUM(MM.quantity),0) * IFNULL(SUM(MM.itemvalue)/SUM(MM.quantity),0)) as transferamount,
    B.id as batchid,
    B.batchname
	FROM eggsdistributiondetail ED
    LEFT JOIN materialmovement MM ON MM.itembatch = ED.itembatchid
    INNER JOIN breederbatch B ON B.id = ED.breederbatchid
	WHERE FIND_IN_SET(B.id, p_breederbatchids)
    AND MM.transactiontypeid = 682
    AND FIND_IN_SET(MM.fromwarehousebinid, @warehousebinids)
	AND MM.transactiondate between p_fromdate AND p_todate
    GROUP BY ED.breederbatchid;

	-- sold eggs
    DROP TEMPORARY TABLE IF EXISTS saletbl;
    CREATE TEMPORARY TABLE saletbl
    SELECT
    IFNULL(SUM(SDD.quantity),0) as soldstock,
    (IFNULL(SUM(SDD.quantity),0)/IFNULL(SUM(SDD.rate),0)) as salerate,
    (IFNULL(SUM(SDD.quantity),0) * (IFNULL(SUM(SDD.quantity),0)/IFNULL(SUM(SDD.rate),0))) as saleamount,
    EDD.breederbatchid as batchid,
    B.batchname
	FROM salesdeliverydetail SDD
    INNER JOIN eggsdistributiondetail EDD ON EDD.itembatchid = SDD.itembatchid
    INNER JOIN breederbatch B ON B.id = EDD.breederbatchid
	LEFT JOIN salesdelivery SD ON SD.id = SDD.salesdeliveryid
    WHERE SD.statusid = 1622
	AND FIND_IN_SET(SDD.itemid, @itemids)
    AND SD.deliverydate BETWEEN p_fromdate AND p_todate
    AND FIND_IN_SET(B.id, p_breederbatchids)
    GROUP BY EDD.breederbatchid;
    
    SELECT
    PT.batchname, 
    FORMAT(IFNULL(PT.productionstock, 0),2) as productionstock, 
    FORMAT(IFNULL(PT.productionrate,0),2) as productionrate, 
    FORMAT((IFNULL(PT.productionrate1,0)/IFNULL(PT.productionstock, 0)),2) as productionrate1, 
    FORMAT(IFNULL(PT.productionamount,0),2) as productionamount,
    FORMAT(IFNULL(TT.transferstock,0),2) as transferstock, 
    FORMAT(IFNULL(TT.transferrate,0),2) as transferrate, 
    FORMAT(IFNULL(TT.transferamount,0),2) as transferamount,
    FORMAT(IFNULL(ST.soldstock,0),2) as soldstock, 
    FORMAT(IFNULL(ST.salerate,0),2) as salerate, 
    FORMAT(IFNULL(ST.saleamount,0),2) as saleamount,
    FORMAT(IFNULL(PT.productionstock, 0) - (IFNULL(TT.transferstock,0) + IFNULL(ST.soldstock,0)),2) as closingstock,
    FORMAT(IFNULL(ST.salerate,0),2) as closingrate,
	FORMAT((IFNULL(PT.productionstock, 0) - (IFNULL(TT.transferstock,0) + IFNULL(ST.soldstock,0))) * IFNULL(ST.salerate,0),2) as closingamount

    FROM productiontbl PT
    LEFT JOIN transfertbl TT ON TT.batchid = PT.batchid
    LEFT JOIN saletbl ST ON ST.batchid = PT.batchid;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggtransfertohatcherydetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM eggtransfertohatcherydetail WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggtransfertohatcherydetail_save`(
	IN p_id INT(11),
    IN p_eggtransfertohatcheryid INT(11),
    IN p_itemid INT(11),
    IN p_itembatchid VARCHAR(45),
    IN p_receivedquantity INT(11),
    IN p_transferquantity INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
	
IF(p_transferquantity > 0) THEN

    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		INSERT INTO eggtransfertohatcherydetail (
				id, 
                eggtransfertohatcheryid,
                itemid,
                itembatchid,
                receivedquantity,
                transferquantity,
                companyid)
			
            VALUES (
				p_id, 
                p_eggtransfertohatcheryid,
                p_itemid,
                p_itembatchid,
                p_receivedquantity,
                p_transferquantity,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE eggtransfertohatcherydetail
			SET eggtransfertohatcheryid = p_eggtransfertohatcheryid,
				itemid = p_itemid,
                itembatchid = p_itembatchid,
                receivedquantity = p_receivedquantity,
                transferquantity = p_transferquantity,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- material transfer entry for egg transfer from breeder to hatchery if status is approved
    SET @transferdate = null;
    SET @fromwarehouseid = null;
    SET @towarehouseid = null;
    SET @parentstatusid = null;
    SET @breederbatchid = null;
    SET @out_transferid = null;
    SELECT transferdate, fromwarehouseid, towarehouseid, statusid, breederbatchid,material_transfer_id
    INTO @transferdate, @fromwarehouseid, @towarehouseid, @parentstatusid, @breederbatchid,@out_transferid
    FROM eggtransfertohatchery WHERE id = p_eggtransfertohatcheryid;
    
    IF(@parentstatusid = 902) THEN
    
        SET @eggs_cost = null;
		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_from_eggstrnsfer_tohatchery_save(
			NULL, @out_transferid, @towarehouseid, 
            (SELECT id FROM warehousebin WHERE warehouseid = @towarehouseid AND isdefault = 1),
            p_itemid, (SELECT itemname FROM item WHERE id = p_itemid),
			p_receivedquantity, p_transferquantity, 
			(SELECT refname FROM `reference` WHERE id = (SELECT itemunitid FROM item WHERE id = p_itemid)),
			p_itembatchid, p_userid, p_companyid, @out_transferdetailid
		);
        
        SELECT (itemvalue/quantity) INTO @eggs_cost FROM materialmovement WHERE itembatch = p_itembatchid AND transactiontypeid = 684;
	
		-- material movement entry for material transfer
		SET @out_movid1 = NULL;
		CALL spc_materialmovement_save(
			NULL, p_itemid, p_itembatchid, 682,
			@out_transferid, @transferdate, p_transferquantity,
			@fromwarehouseid, (SELECT id FROM warehousebin WHERE warehouseid = @fromwarehouseid AND isdefault = 1), 
            @towarehouseid, (SELECT id FROM warehousebin WHERE warehouseid = @towarehouseid AND isdefault = 1),
			(p_transferquantity * @eggs_cost),
			p_companyid, p_userid, @out_movid1
		);
        
      
        
         -- record log
		CALL spc_commonlog_save(p_companyid, 'eggtransfertohatcherydetail', out_id, @action, p_userid);
        
    END IF;
    ELSE 
		
		 SELECT 0 INTO out_id; 
    END IF;
    
   
	

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggtransfertohatcherydetail_search`(
     IN p_eggtransfertohatcheryid INT
)
BEGIN
    
    SELECT
			id, 
			eggtransfertohatcheryid,
			itemid,
			itembatchid,
            receivedquantity,
			transferquantity,
			companyid
            
         
	FROM
		eggtransfertohatcherydetail 
   	
	WHERE
		eggtransfertohatcheryid = p_eggtransfertohatcheryid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggtransfertohatcherydetail_select`(
    IN p_id INT
)
BEGIN
    
    SELECT
			id, 
			eggtransfertohatcheryid,
			itemid,
			itembatchid,
			transferquantity,
			companyid
            
         
	FROM
		eggtransfertohatcherydetail 
   	
	WHERE
		id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggtransfertohatcherylist_search`(
    IN p_locationid INT,
    IN p_breederbatchid INT,
    IN p_from_warehouse INT,
    IN p_from_date date,
	IN p_to_date date
)
BEGIN
    
    SELECT
			ETH.id, 
			ETH.locationid,
			ETH.fromwarehouseid,
            W1.warehousename as fromwarehousename,
			ETH.towarehouseid,
            W2.warehousename as towarehousename,
			ETH.breederbatchid,
            BB.batchname,
			ETH.totaltransferquantity,
			ETH.outtime,
			DATE_FORMAT(ETH.transferdate,'%d/%m/%Y') as transferdate,
			ETH.drivername,
			ETH.drivermobileno,
			ETH.vehicleno,
			ETH.isoutsidehatchery,
			ETH.statusid,
            REF.refname as statusname,
            ETH.servicepoid,
            SPO.servicepono,
			ETH.companyid
            
         
	FROM
		eggtransfertohatchery ETH
        LEFT JOIN breederbatch BB ON BB.id = ETH.breederbatchid
        LEFT JOIN warehouse W1 ON W1.id = ETH.fromwarehouseid
        LEFT JOIN warehouse W2 ON W2.id = ETH.towarehouseid
        LEFT JOIN `reference` REF ON REF.id = ETH.statusid
        LEFT JOIN servicepo SPO ON SPO.id = ETH.servicepoid
   	
	WHERE
		ETH.locationid = p_locationid AND
        ETH.breederbatchid = p_breederbatchid AND
        ETH.fromwarehouseid = p_from_warehouse AND
        (ETH.transferdate BETWEEN p_from_date AND p_to_date)
        
	  ORDER BY ETH.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggtransfertohatchery_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM eggtransfertohatcherydetail WHERE eggtransfertohatcheryid = p_id;
	DELETE FROM eggtransfertohatchery WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggtransfertohatchery_save`(
	IN p_id INT(11),
    IN p_locationid INT(11),
    IN p_fromwarehouseid INT(11),
    IN p_towarehouseid INT(11),
    IN p_breederbatchid INT(11),
    IN p_totaltransferquantity INT(11),
    IN p_outtime VARCHAR(45),
    IN p_transferdate DATE,
    IN p_drivername VARCHAR(100),
    IN p_drivermobileno VARCHAR(100),
    IN p_vehicleno VARCHAR(50),
    IN p_isoutsidehatchery TINYINT,
    IN p_statusid INT(11),
    IN p_remark VARCHAR(150),
    IN p_issueremark VARCHAR(150),
    IN p_receiptremark VARCHAR(150),
    IN p_servicepoid INT(11),
    IN p_userid INT(11),
    IN p_companyid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO eggtransfertohatchery (
				id, 
                locationid,
                fromwarehouseid,
                towarehouseid,
                breederbatchid,
                totaltransferquantity,
                outtime,
                transferdate,
                drivername,
				drivermobileno,
                vehicleno,
                isoutsidehatchery,
                statusid,
                remark,
                issueremark,
                receiptremark,
                servicepoid,
                companyid)
			
            VALUES (
				p_id, 
                p_locationid,
                p_fromwarehouseid,
                p_towarehouseid,
                p_breederbatchid,
                p_totaltransferquantity,
                p_outtime,
                p_transferdate,
                p_drivername,
				p_drivermobileno,
                p_vehicleno,
                p_isoutsidehatchery,
                p_statusid,
                p_remark,
                p_issueremark,
                p_receiptremark,
                p_servicepoid,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE eggtransfertohatchery
			SET locationid = p_locationid,
                fromwarehouseid = p_fromwarehouseid,
                towarehouseid = p_towarehouseid,
                breederbatchid = p_breederbatchid,
                totaltransferquantity = p_totaltransferquantity,
                outtime = p_outtime,
                transferdate = p_transferdate,
                drivername = p_drivername,
				drivermobileno = p_drivermobileno,
                vehicleno = p_vehicleno,
                isoutsidehatchery = p_isoutsidehatchery,
                statusid = p_statusid,
                remark = p_remark,
                issueremark = p_issueremark,
                receiptremark = p_receiptremark,
                servicepoid = p_servicepoid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    IF(p_statusid = 902) THEN 
		SET @out_transferid = NULL;
		CALL spc_materialtransfer_save(
			NULL, 501, 502, 582, 
            p_transferdate, p_transferdate, 'material transfer from egges transfer to hatchery',
			p_fromwarehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_fromwarehouseid AND isdefault = 1),
            621, p_breederbatchid, NULL, 
            NULL, p_companyid, p_userid, @out_transferid
		);
        update eggtransfertohatchery SET material_transfer_id = @out_transferid WHERE id = out_id;
	END IF;
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'eggtransfertohatchery', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggtransfertohatchery_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
			ETH.id, 
			ETH.locationid,
			ETH.fromwarehouseid,
            W1.warehousename as fromwarehousename,
			ETH.towarehouseid,
            W2.warehousename as towarehousename,
			ETH.breederbatchid,
            BB.batchname,
			ETH.totaltransferquantity,
			ETH.outtime,
			DATE_FORMAT(ETH.transferdate,'%d/%m/%Y') as transferdate,
			ETH.drivername,
			ETH.drivermobileno,
			ETH.vehicleno,
			ETH.isoutsidehatchery,
			ETH.statusid,
            REF.refname as statusname,
            ETH.servicepoid,
			ETH.companyid
            
         
	FROM
		eggtransfertohatchery ETH
        LEFT JOIN breederbatch BB ON BB.id = ETH.breederbatchid
        LEFT JOIN warehouse W1 ON W1.id = ETH.fromwarehouseid
        LEFT JOIN warehouse W2 ON W2.id = ETH.towarehouseid
        LEFT JOIN `reference` REF ON REF.id = ETH.statusid
   	
	WHERE
		ETH.companyid = p_companyid
        
	  ORDER BY ETH.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggtransfertohatchery_select`(
   IN p_id INT
)
BEGIN

	SELECT
			ETH.id, 
			ETH.locationid,
            L.locationname,
			ETH.fromwarehouseid,
            W1.warehousename as fromwarehousename,
			ETH.towarehouseid,
            W2.warehousename as towarehousename,
			ETH.breederbatchid,
            BB.batchname,
			ETH.totaltransferquantity,
			ETH.outtime,
			DATE_FORMAT(ETH.transferdate,'%d/%m/%Y') as transferdate,
			ETH.drivername,
			ETH.drivermobileno,
			ETH.vehicleno,
			ETH.isoutsidehatchery,
			ETH.statusid,
            REF.refname,
			ETH.companyid,
            ETH.remark,
			ETH.issueremark,
            ETH.receiptremark,
            ETH.servicepoid
            
         
	FROM
		eggtransfertohatchery ETH
        LEFT JOIN breederbatch BB ON BB.id = ETH.breederbatchid
		LEFT JOIN warehouse W1 ON W1.id = ETH.fromwarehouseid
        LEFT JOIN warehouse W2 ON W2.id = ETH.towarehouseid
		LEFT JOIN `reference` REF ON REF.id = ETH.statusid
        LEFT JOIN location L ON L.id = ETH.locationid
       
   	WHERE
		ETH.id = p_id
	    ORDER BY ETH.id DESC;
        
        
	  
    -- select transfer to hatchery detail
     SELECT
			ETDH.id, 
			ETDH.eggtransfertohatcheryid,
			ETDH.itemid,
			ETDH.itembatchid,
            ETDH.receivedquantity,
			ETDH.transferquantity,
			ETDH.companyid,
            I.itemname,
            I.itemcode
            
         
	FROM
		eggtransfertohatcherydetail  ETDH
        LEFT JOIN item I ON ETDH.itemid = I.id
   	
	WHERE
		ETDH.eggtransfertohatcheryid = p_id;
        
        
	-- select temprature detail
	SELECT
			ETV.id, 
			ETV.eggtransfertohatcheryid,
			TIME_FORMAT(ETV.transfertime, '%h:%i %p') as transfertime,
			ETV.temprature,
			ETV.companyid
         
	FROM
		eggtransfervehicletemprature ETV
   	
	WHERE
		ETV.eggtransfertohatcheryid = p_id;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggtransfervehicletemprature_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM eggtransfervehicletemprature WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggtransfervehicletemprature_save`(
	IN p_id INT(11),
    IN p_eggtransfertohatcheryid INT(11),
    IN p_transfertime VARCHAR(45),
    IN p_temprature DECIMAL(18,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO eggtransfervehicletemprature (
				id, 
                eggtransfertohatcheryid,
                transfertime,
                temprature,
                companyid)
			
            VALUES (
				p_id, 
                p_eggtransfertohatcheryid,
                 p_transfertime,
                p_temprature,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE eggtransfervehicletemprature
			SET eggtransfertohatcheryid = p_eggtransfertohatcheryid,
				transfertime =p_transfertime,
                temprature = p_temprature,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'eggtransfervehicletemprature', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggtransfervehicletemprature_search`(
    IN p_eggtransfertohatcheryid INT
)
BEGIN
    
    SELECT
			id, 
			eggtransfertohatcheryid,
			-- transfertime,
			TIME_FORMAT(transfertime, '%h:%i %p') as transfertime,
			temprature,
			companyid
            
         
	FROM
		eggtransfervehicletemprature 
   	
	WHERE
		eggtransfertohatcheryid = p_eggtransfertohatcheryid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_eggtransfervehicletemprature_select`(
    IN p_id INT
)
BEGIN
    
    SELECT
			id, 
			eggtransfertohatcheryid,
			itemid,
			itembatchid,
			transferquantity,
			companyid
            
         
	FROM
		eggtransfervehicletemprature 
   	
	WHERE
		id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_employee_byrole`(
	IN p_roleid VARCHAR(100),
    IN p_companyid INT
)
BEGIN

	SELECT id,
		   employeename
           
	FROM employee 
    
    WHERE FIND_IN_SET(emproleids,p_roleid)
	AND isactive = 1
    AND companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_employee_ddl`(
	IN p_typeid INT,
	IN p_companyid INT(11)
)
BEGIN

	SELECT id, employeename
           
	FROM employee
    
    WHERE isactive = 1 AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_employee_delete`(
	IN p_id INT(11),
    IN p_compayid INT(11),
    IN p_userid INt(11)
)
BEGIN

	DELETE FROM employee WHERE id = p_id;
      CALL spc_commonlog_save(p_companyid, 'employee', out_id, 'Delete', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_employee_save`(
   IN p_id INT(11),
   IN p_employeename VARCHAR(200),
   IN p_emailid VARCHAR(200),
   IN p_mobileno VARCHAR(15),
   IN p_isactive TINYINT(4),
   IN p_ledgerid INT(11),
   IN p_emproleids VARCHAR(45),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN
    SET @action = null;
    IF EXISTS(
            SELECT employeename,emailid,mobileno from employee where (LOWER(employeename) = LOWER(p_employeename) OR  emailid = p_emailid OR  mobileno = p_mobileno) 
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO employee 
				(employeename, emailid, mobileno, isactive,ledgerid,emproleids, companyid)
			VALUES 
				(p_employeename, p_emailid, p_mobileno, p_isactive,p_ledgerid,p_emproleids, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE employee
				SET employeename = p_employeename,
					emailid = p_emailid,
                    mobileno = p_mobileno,
                    isactive = p_isactive,
                    ledgerid = p_ledgerid,
                    emproleids = p_emproleids,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'employee', out_id, @action, p_userid);
END;
        
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_employee_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT EMP.id,EMP.employeename, EMP.emailid, EMP.mobileno, EMP.isactive,EMP.emproleids, EMP.companyid,
           COA.coaname as ledgername,COA.glcode,EMP.ledgerid
	FROM employee EMP
    left join chartofaccount COA ON COA.id = EMP.ledgerid
    
    WHERE EMP.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_employee_select`(
IN p_id INT(11)
)
BEGIN

	SELECT EMP.id,employeename,EMP.ledgerid,EMP.emailid, EMP.mobileno, EMP.isactive, EMP.emproleids, EMP.companyid,
    R.refname,COA.coaname as ledgername,COA.glcode
           
	FROM employee EMP
    left join `reference` R ON R.id = EMP.emproleids
    left join chartofaccount COA ON COA.id = EMP.ledgerid
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND EMP.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_entity_search`()
BEGIN

	SELECT 
		E.`id`,
		E.`entityname`,
		E.`displayname`,
		E.`entitytypeid`,
        REF1.`refname` AS entitytype,
		E.`pagekey`,
		E.`parentid`,
        E1.displayname as parent,
        E1.entityname as parentcode,
		E.`displayorder`,
		E.`description`,
		E.`additionaldesc`,
        'Unchecked' as checked,
        '' as permissions
	FROM 
		`entity` E
	LEFT JOIN `reference` REF1 ON REF1.id = E.entitytypeid
    LEFT JOIN `entity` E1 ON E.parentid = E1.id
	ORDER BY `id`;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_entity_searchbyrole`(
	IN p_roleid INT
)
BEGIN

	SELECT 
		E.`id`,
		E.`entityname`,
		E.`displayname`,
		E.`entitytypeid`,
        REF1.`refname` AS entitytype,
		E.`pagekey`,
		E.`parentid`,
        E1.displayname as parent,
        E1.entityname as parentcode,
		E.`displayorder`,
		E.`description`,
		E.`additionaldesc`,
        CASE WHEN NULLIF(RA.checked, '') IS NULL THEN 'Unchecked' ELSE RA.checked END as checked,
        CASE WHEN RA.permissions IS NULL THEN '' ELSE RA.permissions END as permissions,
        fnk_permission_byids(RA.permissions) AS permissionnames
	FROM 
		`entity` E
        
	LEFT JOIN `reference` REF1 ON REF1.id = E.entitytypeid
    LEFT JOIN `entity` E1 ON E.parentid = E1.id
    LEFT JOIN `roleaccess` RA ON RA.entityid = E.id AND RA.roleid = p_roleid
    
	ORDER BY E.`id`;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_entity_searchbyuserrole`(
	IN p_userid INT
)
BEGIN

	SELECT 
		E.`id`,
		E.`entityname`,
		E.`displayname`,
		E.`entitytypeid`,
        REF1.`refname` AS entitytype,
		E.`pagekey`,
		E.`parentid`,
        E1.displayname as parent,
        E1.entityname as parentcode,
		E.`displayorder`,
		E.`description`,
		E.`additionaldesc`,
        CASE WHEN NULLIF(RA.checked, '') IS NULL THEN 'Unchecked' ELSE RA.checked END as checked,
        CASE WHEN RA.permissions IS NULL THEN '' ELSE RA.permissions END as permissions,
        fnk_permission_byids(RA.permissions) AS permissionnames
	FROM 
		`entity` E
        
	LEFT JOIN `reference` REF1 ON REF1.id = E.entitytypeid
    LEFT JOIN `entity` E1 ON E.parentid = E1.id
    LEFT JOIN `roleaccess` RA ON RA.entityid = E.id
    INNER JOIN `userlicense` UL ON UL.roleid = RA.roleid AND UL.userid = p_userid
	ORDER BY E.`id`;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_ErrorLog`(
	p_ErrorProcedure varchar(200),
	p_ErrorMessage varchar(500),
	p_ErrorParams TEXT
)
BEGIN
	insert into DBErrors 
			(ErrorTime, ErrorProcedure, ErrorMessage, ErrorParams)
		values 
			(now(), p_ErrorProcedure, p_ErrorMessage, p_ErrorParams);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_factormaster_save`(
 IN p_id INT(11),
 IN p_convertedunitid INT(11),
 IN p_baseunitid INT(11),
 IN p_factor INT(11),
 IN p_companyid INT(11),
 IN p_userid INT(11),
 OUT out_id INT
 )
BEGIN
SET @action = null;

 IF EXISTS(
            SELECT convertedunitid,baseunitid,factor from factormaster where (convertedunitid = p_convertedunitid OR  baseunitid = p_baseunitid) 
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
BEGIN
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO factormaster(convertedunitid, baseunitid, factor,companyid)
        VALUES (p_convertedunitid, p_baseunitid, p_factor,p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE factormaster
        SET convertedunitid = p_convertedunitid,
			baseunitid = p_baseunitid,
            factor = p_factor,
            companyid = p_companyid,
            companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'factormaster', out_id, @action, p_userid);

END;
        
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_factormaster_search`(
IN p_companyid INT(11)
)
BEGIN
 SELECT 
 
 
	FM.id,FM.convertedunitid, FM.baseunitid, FM.factor,FM.companyid,R.refname as convertedunitname,R1.refname as baseunitname
    
	 FROM factormaster FM
     LEFT JOIN `reference` R ON R.id = FM.convertedunitid
      LEFT JOIN `reference` R1 ON R1.id = FM.baseunitid
		WHERE FM.companyid  = p_companyid ;
        

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_factormaster_select`(
IN p_id INT(11)
)
BEGIN
 SELECT 
		FM.id,FM.convertedunitid, FM.baseunitid, FM.factor,FM.companyid,R.refname as convertedunitname,R1.refname as baseunitname
    
	 FROM factormaster FM
     LEFT JOIN `reference` R ON R.id = FM.convertedunitid
      LEFT JOIN `reference` R1 ON R1.id = FM.baseunitid
     
		WHERE FM.id  = p_id ;
        

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_farmerenquirywise_cbfbatches`(
	IN p_farmerenquiryid INT(11),
    IN p_companyid INT(11)
)
BEGIN
	SET @@sql_mode = '';
	SELECT CBB.cbfbatchid as id,
           SDD.warehousebinid,
           WB.warehouseid,
           CBB.cbfshedid as shedid,
           SDD.shed_name,
           DATE_FORMAT(CB.batch_place_date,'%d/%m/%Y') as batch_place_date,
           CB.batch_number,
            DATE_FORMAT(fnc_getcbfdailytransactiondate(CBB.cbfbatchid,p_companyid),'%d/%m/%Y') as lasttransactoiondate
    
	FROM cbf_batchbalance CBB
    LEFT JOIN cbf_batch_details CB ON CB.id = CBB.cbfbatchid
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = CB.farmer_enquiry_id
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CBB.cbfshedid
    LEFT JOIN warehousebin WB ON WB.id = SDD.warehousebinid
    
    WHERE SDD.farmerenquiryid = p_farmerenquiryid
    AND CB.companyid = p_companyid
    AND  FIND_IN_SET(CB.statusid,'3022,3023')
    GROUP BY CBB.cbfbatchid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_farmername_bypartyname`(
IN p_customerid varchar(255),
IN p_companyid INT(11)
)
BEGIN
SELECT  
		SI.customerid,
        CFE.farmer_name,
        CFE.id
        
       
        
        
FROM salesinvoice SI   
LEFT JOIN cbf_birdsalesorder CBO ON SI.salesorderid = CBO.stdsalesorderid
LEFT JOIN cbf_birdsalesorderdetail CBOD ON  CBO.stdsalesorderid	= CBOD.cbfbirdsalesorderid
LEFT JOIN cbf_farmerenquiry CFE ON  CBOD.farmerenquiryid = CFE.id
 WHERE 	
		SI.companyid = p_companyid AND
		FIND_IN_SET( SI.customerid, p_customerid); 

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_farmerstock_report`(
 IN p_batch varchar(255),
 IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';

SET @shedid = null;
SET @warehousebinid = null;
SET @warehouseid = null;

SET @feeditemgroupids = null;
SET @medicineitemgroupids = null;
SET @vaccineitemgroupids = null;
SET @vitaminitemgroupids = null;
SET @allitemgroupids  = null;

select 
GROUP_CONCAT(cbfshedid) INTO @shedid
from cbf_batchbalance
where find_in_set(cbfbatchid,p_batch);
-- select @shedid;

select 
GROUP_CONCAT(Distinct CFESDD.warehousebinid),GROUP_CONCAT(DISTINCT WB.warehouseid)  INTO @warehousebinid,@warehouseid
from cbf_farmerenquiry_sheddimensiondetail CFESDD
LEFT JOIN warehousebin WB ON WB.id = CFESDD.warehousebinid
where 
find_in_set(CFESDD.id,@shedid);

-- select @warehousebinid,@warehouseid;

select 
CONCAT ( feeditemgroupids, ',', medicineitemgroupids, ',',vaccineitemgroupids,',',vitaminitemgroupids) INTO @allitemgroupids
from cbfsetting;

select *, (openingstock+inventorytransferin-inventorytransferout) As closingbal,

			 (
            (IFNULL(openingrate,0)+IFNULL(inwardrate,0)-IFNULL(outwardrate,0))/
            (openingstock+inventorytransferin-inventorytransferout))as closavgrate,
            (openingrate+inwardrate-outwardrate) as cloamt,
            IFNULL((openingrate/openingstock),0) as opeavgrate,
            IFNULL((inwardrate/inventorytransferin),0) as inwardavgrate,
			IFNULL((outwardrate/inventorytransferout),0) as outwardavgrate
          

from(
SELECT 
I.itemgroupid, 
SUM(MM.quantity),
R.refname as itemunitname,
MM.transactiondate,
I.itemname,
MM.itemid,
MM.towarehousebinid,
WB.binname,
@warehousebinid,
CFESDD.shed_name,
CFE.farmer_name,

CURDATE(),
fnc_itembatchbalancedate(MM.itemid,@warehouseid,MM.towarehousebinid,CURDATE(),p_companyid)as openingstock,
fun_inventorytransferintilldate(CURDATE(),MM.towarehousebinid,MM.itemid) As inventorytransferintilldate,
fun_inventorytransferin(CURDATE(),MM.towarehousebinid,MM.itemid) As inventorytransferin,
fun_inventorytransferoutissuue(CURDATE(),MM.towarehousebinid,MM.itemid) As inventorytransferout,
fun_inventorytransferouttilldate(CURDATE(),MM.towarehousebinid,MM.itemid) As cuminventorytransferout,
IF((fnc_itembatchbalancedate(MM.itemid,@warehouseid,MM.towarehousebinid,CURDATE(),p_companyid))!=0,(fnc_operate_forstock(MM.itemid,MM.towarehousebinid,CURDATE(),p_companyid)), 0)as openingrate,
fnc_inwardrate_forstock(MM.itemid,MM.towarehousebinid,CURDATE(),p_companyid) as inwardrate,
fnc_outardrate_forstock(MM.itemid,MM.towarehousebinid,CURDATE(),p_companyid) as outwardrate

FROM materialmovement MM
INNER JOIN item I ON   FIND_IN_SET(I.itemgroupid,@allitemgroupids) AND I.id = MM.itemid  
LEFT JOIN `reference` R ON R.id = I.itemunitid
LEFT JOIN warehousebin WB ON  WB.id = MM.towarehousebinid  
LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CFESDD ON CFESDD.warehousebinid = WB.id
LEFT JOIN cbf_batchbalance CBB ON  CBB.cbfshedid  = CFESDD.id
LEFT JOIN cbf_batch_details CBD ON CBD.id = CBB.cbfbatchid
LEFT JOIN cbf_farmerenquiry CFE ON CFE.id = CBD.farmer_enquiry_id


 WHERE 
	   FIND_IN_SET(MM.towarehousebinid,@warehousebinid)
       AND FIND_IN_SET(transactiontypeid,'681,682,685,684')  
       group by  MM.towarehousebinid,MM.itemid)as temp;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_farmerwise_cbfbatches`(
	IN p_farmerenquiryid INT(11),
    IN p_batchstatus VARCHAR(200)
)
BEGIN

	SELECT CBB.cbfbatchid as id,
		   CB.statusid,
           CB.batch_number,
           REF.refname,
           FE.farmer_name,
           FE.farm_name,
           FE.branch_id,
           BR.branchname,
           CBB.cbfshedid,
           SDD.shed_name
           
	FROM cbf_batchbalance CBB
    LEFT JOIN cbf_batch_details CB ON CB.id = CBB.cbfbatchid
    INNER JOIN cbf_farmerenquiry FE ON FE.id = CB.farmer_enquiry_id
    LEFT JOIN commonbranch B ON B.id = FE.branchid
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CBB.cbfshedid
    
	WHERE FE.id = p_farmerenquiryid
    AND FIND_IN_SET( CB.statusid, p_statusid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_farmgrade_delete`(  
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM farmgrade WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'farmgrade', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_farmgrade_save`( 
 IN p_id INT(11),
 IN p_categoryid INT(11),
 IN p_locationid INT(11),
 IN p_grade VARCHAR(200),
 IN p_fromeef INT(11),
 IN p_toeef INT(11),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO farmgrade
              (categoryid, locationid, grade, fromeef, toeef, companyid)
       VALUES
            (p_categoryid, p_locationid, p_grade, p_fromeef, p_toeef, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE farmgrade 
   
	SET categoryid = p_categoryid,
		locationid = p_locationid,
		grade = p_grade,
		fromeef = p_fromeef,
        toeef = p_toeef,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'farmgrade', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_farmgrade_search`(
  IN p_companyid INT(11)
)
BEGIN

	SELECT FG.id,
    categoryid,
    locationid, 
    grade,
    fromeef, 
    toeef,
    FG.companyid,
    L.locationname,
    FT.farmtype as categoryname

	FROM farmgrade FG
    
     LEFT JOIN farmtype FT ON FT.id = FG.categoryid
	 LEFT JOIN location L ON L.id = FG.locationid
    
    WHERE FG.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_farmgrade_select`( 
 IN p_id INT(11)
)
BEGIN

	SELECT FG.id, 
    FG.categoryid,
    FT.farmtype as categoryname,
    FG.locationid, 
    L.locationname,
    grade, 
    fromeef, 
    toeef, 
    FG.companyid
           
	FROM farmgrade FG
    
        LEFT JOIN farmtype FT ON FT.id = FG.categoryid
        LEFT JOIN location L ON L.id = FG.locationid
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND FG.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_farmperformance_byfarmerenquiryid`(
	IN p_farmerenquiryid INT
)
BEGIN
	SELECT FE.farmer_name,
		   DATE_FORMAT(GC.firstdaydate,'%d/%m/%Y') as batchstartdate,
		   DATE_FORMAT(GC.batchclosedate,'%d/%m/%Y') as batchclosedate,
		   IFNULL(GC.productionqty,0) as productionqty, 
		   IFNULL(GC.fcr,0) as fcr,
		   IFNULL(GC.actualrearingchargekg,0) as actualrearingchargekg, 
		   IFNULL(GC.totalrearingcharge,0) as totalrearingcharge
	FROM cbf_growingcharges GC
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = GC.farmerenquiryid
	WHERE GC.farmerenquiryid = p_farmerenquiryid
    
    ORDER BY GC.id DESC LIMIT 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_farmtype_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM farmtype WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'farmtype', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_farmtype_save`(
 IN p_id INT(11),
 IN p_farmtype VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO farmtype
              (farmtype, companyid)
       VALUES
            (p_farmtype, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE farmtype 
   
	SET farmtype = p_farmtype,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'farmtype', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_farmtype_search`(	
 IN p_companyid INT(11)
)
BEGIN

	SELECT id, farmtype, companyid
           
	FROM farmtype
    
    WHERE companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_farmtype_select`(
  IN p_id INT(11)
)
BEGIN

	SELECT id, farmtype, companyid
           
	FROM farmtype
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmilldailygodownstockfinal_report`(
-- IN p_fromdate DATE,
-- IN p_todate DATE,
 IN p_curdate DATE,
IN p_warehouseid varchar(255),
IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';
SELECT *, (openingbal+receivedstock-issuestock) As totalstock
FROM(
SELECT

MM.itemid,
MM.towarehousebinid,
I.itemname,
WB.binname,


  -- fun_liveinqty(MM.transactiondate,MM.towarehousebinid,MM.itemid) As receivedstock,
  -- fun_inventorytransferout(MM.transactiondate,MM.towarehousebinid,MM.itemid) As issuestock,
-- fun_liveopeningbalance(MM.transactiondate,MM.towarehousebinid,MM.itemid) As openingbal 
  fun_liveinqty(p_curdate,MM.towarehousebinid,MM.itemid) As receivedstock,
  fun_inventorytransferout(p_curdate,MM.towarehousebinid,MM.itemid) As issuestock,
  fun_liveopeningbalance(p_curdate,MM.towarehousebinid,MM.itemid) As openingbal 


        
FROM materialmovement MM
LEFT JOIN item I ON  MM.itemid = I.id
LEFT JOIN warehousebin WB ON  WB.id = MM.towarehousebinid
-- LEFT JOIN warehousebin WB ON MM.towarehousebinid= WB.id
-- LEFT JOIN accounts_itemopeningbalance AIOB ON  AIOB.itemid = MM.itemid AND WB.id  = AIOB.warehousebinid 
-- LEFT JOIN item I ON  MM.itemid = I.id

 WHERE 	
		-- MM.transactiondate BETWEEN p_fromdate AND p_todate AND
        MM.transactiondate<= p_curdate AND
        FIND_IN_SET( MM.towarehouseid, p_warehouseid)
        GROUP BY MM.itemid) as temp;
  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmilldailygodownstock_report`(
IN p_fromdate DATE,
IN p_todate DATE,
IN p_warehouseid varchar(255),
IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';

SELECT *, (openingbal+receipt+transferinstock-transferoutstock-issue) As totalstock,
           (transferinstock+receipt) as receivedstock,
           (transferoutstock+issue)as issuestock
FROM(
SELECT
MM.towarehouseid,
W.warehousename,
MM.towarehousebinid,
WB.binname,
MM.itemid,
I.itemname,
-- ROUND(SUM(fun_liveinqtystock(p_fromdate,p_todate,MM.towarehousebinid,MM.itemid)),3) As receivedstock,
-- ROUND((fun_liveinqtystock(p_fromdate,p_todate,MM.towarehousebinid,MM.itemid)),3) As receivedstock,

-- ROUND(SUM(fun_inventorytransferoutStock(p_fromdate,p_todate,MM.towarehousebinid,MM.itemid)),3) As issuestock,

		 ROUND(fun_inventorytransferissue_out_stock(p_fromdate,p_todate,p_warehouseid,MM.itemid,683),3) as issue,
		 ROUND(fun_inventorytransferissue_out_stock(p_fromdate,p_todate,p_warehouseid,MM.itemid,682),3)as transferoutstock, 
		 ROUND(fun_transfer_in_quntity(p_fromdate,p_todate,p_warehouseid,MM.itemid,p_companyid),3) as transferinstock,
		 ROUND(fun_inventorytransferreceipt(p_fromdate,p_todate,p_warehouseid,MM.itemid),3)as receipt,
         ROUND((fun_liveopeningbalancestock(p_fromdate,p_warehouseid,MM.itemid)),3) As openingbal 


        
FROM materialmovement MM
LEFT JOIN item I ON  MM.itemid = I.id
LEFT JOIN warehousebin WB ON  WB.id = MM.towarehousebinid
LEFT JOIN warehouse W ON W.id = MM.towarehouseid
 WHERE 	
		-- MM.transactiondate BETWEEN p_fromdate AND p_todate AND
       --  MM.transactiondate>= p_fromdate AND 
		-- MM.transactiondate<= p_todate AND 
        FIND_IN_SET( MM.towarehouseid, p_warehouseid)
        GROUP BY MM.itemid) as temp;
  

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmilldailygodownstock_reportcheck`(
IN p_fromdate DATE,
IN p_todate DATE,
IN p_warehouseid varchar(255),
IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';

DROP TEMPORARY TABLE IF EXISTS tempdailygodownstockreport;
CREATE TEMPORARY TABLE tempdailygodownstockreport
SELECT I.itemname, W.warehousename,IG.groupname,L.locationname,
fun_liveopeningbalancestock(p_fromdate,MM.towarehouseid, MM.itemid) as openingbal,
ROUND((fun_inventorytransferissue_out_stock(p_fromdate,p_todate,MM.towarehouseid,MM.itemid,683)),3) as issue,
ROUND((fun_inventorytransferissue_out_stock(p_fromdate,p_todate,MM.towarehouseid,MM.itemid,682)),3)as transferoutstock,
ROUND((fun_transfer_in_quntity(p_fromdate,p_todate,MM.towarehouseid,MM.itemid,p_companyid)),3) as transferinstock,
ROUND((fun_inventorytransferreceipt(p_fromdate,p_todate,MM.towarehouseid,MM.itemid)),3)as receipt


 FROM materialmovement MM
 LEFT JOIN item I ON I.id = MM.itemid
 LEFT JOIN warehouse W ON W.id = MM.towarehouseid
 LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
 LEFT JOIN location L ON W.locationid = L.id
 
 
WHERE -- MM.transactiondate between p_fromdate AND p_todate 
 find_in_set(MM.itemid,p_itemid)  AND find_in_set(towarehouseid,p_warehouseid) 
group by itemid,towarehouseid;


 SELECT itemname,warehousename,groupname,locationname,openingbal,transferoutstock,transferinstock,issue,receipt,
		((openingbal+receipt+transferinstock)-(issue+transferoutstock)) as closingbal
 FROM 
  tempdailygodownstockreport;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmillfeedformula_report`(
IN p_fromdate date,
IN p_todate date,
IN p_itemgroupid varchar(100),
IN p_itemid VARCHAR(1000),
IN p_companyid INT(11)
)
BEGIN
DROP TEMPORARY TABLE IF EXISTS tempfeedformula ;
CREATE TEMPORARY TABLE tempfeedformula 

SELECT 
		
		FPO.productionno,
        FPO.orderdate,
        FPOD.plannedqty,
        FPOD.itemid,
        I.itemname,
        I.id,
        IG.groupname,
        I1.itemname as materialname
       
		
		FROM feedmill_productionorder FPO
           LEFT JOIN feedmill_productionorderdetail FPOD ON FPO.id = FPOD.productionorderid
		   LEFT JOIN item I ON FPO.productionno = I.id
		   LEFT JOIN item I1 ON FPOD.itemid = I1.id
           LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
           
		  
	WHERE
      FPO.orderdate BETWEEN p_fromdate AND p_todate AND
      FIND_IN_SET(IG.id, p_itemgroupid) AND
      FIND_IN_SET(FPO.productionno, p_itemid) AND
	   FPO.companyid = p_companyid;
       
DROP TEMPORARY TABLE IF EXISTS tempfeedformula1;
	CREATE TEMPORARY TABLE tempfeedformula1   
    
select * from tempfeedformula;    

-- for sub total--
	DROP TEMPORARY TABLE IF EXISTS tempfeedformula2;
	CREATE TEMPORARY TABLE tempfeedformula2	
    SELECT * from (
    SELECT * from tempfeedformula1
    UNION ALL	
				SELECT 
				'' as productionno,
                '' as orderdate,
                 SUM(plannedqty),
                itemid as itemid,
                'Sub Total' as itemname,  
                '' as id,
                '' as groupname,
				materialname AS 'Sub Total'
				FROM
					tempfeedformula
                        GROUP BY materialname,itemid
                    
                        ) as tmpresult order by itemname,materialname ; 
	
SELECT * FROM tempfeedformula2;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmillfeedproduction_report`(
IN p_fromdate DATE,
IN p_todate DATE,
IN p_itemid varchar(255),
IN p_companyid INT(11)
)
BEGIN

DROP TEMPORARY TABLE IF EXISTS tempproduction;
CREATE TEMPORARY TABLE tempproduction 

SELECT 
 
 DATE_FORMAT(FRFP.receipt_date,'%d/%m/%Y') as productiondate,
 FRFP.itemid as feeditem,
 I.itemname,
 I.itemunitid,
 fnc_convertfeed_bagtokginrecept(FRFP.id,FRFP.itemid,FRFP.packingmaterial_id,p_companyid) as baginkg,
 FRFP.itembatch as batch,
 W.warehousename,
 BOM.bomno,
 FRFP.bag_qty as bag,
 FRFP.unit_cost as rateperbag,
 FPO.id as productionorederid,
 FPO.productionorderno,
 (FRFP.receipt_qty/1000) as totaltons,
 FRFP.receipt_qty as receivedqty,
 fun_calculate_iuuseqty(FPO.id,p_companyid) as issueqty,
 (((fun_calculate_receiptqty (FPO.id,p_companyid)-fun_calculate_iuuseqty(FPO.id,p_companyid))/fun_calculate_iuuseqty(FPO.id,p_companyid))*100)as loss,
 -- ((remaining_receiptqty/(fun_calculate_iuuseqty(FPO.id,p_companyid)))*100)as loss,
 FRFP.item_totalcost as totalcostperkg,
 FRFP.unit_cost as grossprodcost,
 FRFP.additionalcost as admincostperkg,
 (FRFP.unit_cost+ FRFP.additionalcost) as netprocostperkg

From feedmill_productionorder FPO
LEFT JOIN feedmill_productionorderdetail FPOD ON FPOD.productionorderid = FPO.id
LEFT JOIN feedmill_production_issue FPI ON FPI.productionorder_id = FPO.id
LEFT JOIN feedmill_production_issuedetail FPID ON FPID.production_issue_id = FPI.id
LEFT JOIN feedmill_receipt_from_production FRFP ON FPO.id = FRFP.productionorder_id
LEFT JOIN feedmill_billofmaterial BOM ON BOM.id = FPO.productionno
LEFT JOIN item I ON I.id = FRFP.itemid
LEFT JOIN feedmill_feedmillsetting FS ON FS.companyid = FRFP.companyid
LEFT JOIN item I1 ON I1.id = FPID.itemid
LEFT JOIN warehouse W ON W.id = FRFP.towarehouse_id

where 
    find_in_set(FRFP.itemid,p_itemid) AND 
	FRFP.receipt_date BETWEEN p_fromdate AND p_todate AND
    FRFP.status_id = 2022 AND
    FRFP.companyid= p_companyid
    group by FPO.id,FRFP.id;
    
DROP TEMPORARY TABLE IF EXISTS tempproduction1;            
CREATE TEMPORARY TABLE tempproduction1            
            
select * from tempproduction;     

DROP TEMPORARY TABLE IF EXISTS tempproduction2;
CREATE TEMPORARY TABLE tempproduction2  



select * from ( 
select * from  tempproduction1
UNION ALL

SELECT 
			
                'Sub Total' AS productiondate,
                '' AS feeditem,
                '' AS itemname,
				'' AS itemunitid,
                '' AS baginkg,
                '' AS batch,
                '' AS warehousename,
                '' AS bomno,
                '' AS bag,
                '' AS rateperbag,
                '' AS productionorederid,
                productionorderno AS 'Sub Total',
                SUM(totaltons) as totaltons,
                SUM(receivedqty) as receivedqty,
				'' AS issueqty,
               -- '' As receiptqty,
				'' as loss,
                SUM(totalcostperkg) as totalcostperkg,
                '' AS grossprodcost,
                '' AS admincostperkg,
                '' AS netprocostperkg
			
 
  FROM  tempproduction
GROUP BY productionorderno) as tmpresult; 
 
 SELECT * FROM tempproduction2;
 	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmillproductionissue_formom`(
  IN p_production_issue_id INT,
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DECLARE p_itemid INT;
	DECLARE p_itemname VARCHAR(200);
	DECLARE p_itemunitid INT;
	DECLARE p_unitcost DECIMAL(30,6);
    DECLARE p_quantity DECIMAL(20,3);
    DECLARE p_itemvalue DECIMAL(30,6);
	DECLARE p_itembatch VARCHAR(300);
    DECLARE p_warehouseid INT;
    DECLARE x INT;
    DECLARE j INT;
    DECLARE i INT;
    DECLARE material_itemid INT;
    DECLARE material_itembatch VARCHAR(300);
    DECLARE material_quantity DECIMAL(15,3);
    DECLARE p_transactiondate DATE;
	SET @row_number = 0;
    SET @row_number1 = 0;
	SET @reccount = 0;
    SET @movement_outid = null;
	SET @@sql_mode = ' ';
   -- select daily consumption for given daily transaction and issue them itembatch wise
   
   
   SELECT issue_date INTO p_transactiondate FROM feedmill_production_issue WHERE id = p_production_issue_id; 
   
   SET @reccount = 0;
   SET x = 1;
   SET @row_number = 0;
   SET @issuecount = null;
 
   
	DROP TEMPORARY TABLE IF EXISTS tempisssuedetail;
        
	CREATE TEMPORARY TABLE tempisssuedetail
	SELECT 
		
		FPID.itemid, 
		I.itemname, 
		I.itemunitid,
        FPID.warehouseid,
		FPID.batch_totalcost as itemvalue,
		FPID.issue_qty as quantity, 
		(@row_number := @row_number + 1) as `rank`
	FROM feedmill_production_issuedetail FPID
    
	LEFT JOIN item I ON FPID.itemid = I.id
	WHERE FPID.production_issue_id = p_production_issue_id;
	 
	SELECT COUNT(*) INTO @issuecount FROM tempisssuedetail;
    
    
	WHILE x  <= @issuecount DO
		SET p_itemid = null;
		SET p_itemname = null;
		SET p_itemunitid = null;
		SET p_unitcost = null;
		SET p_quantity = null;
        SET p_itemvalue = null;
        SET i = 0;
		SET @reccount = 0;
		SET @row_number1 = 0;
        SET p_warehouseid = null;
   
		SELECT itemid, itemname, itemunitid, quantity,itemvalue,warehouseid
		INTO  p_itemid, p_itemname, p_itemunitid, p_quantity,p_itemvalue,p_warehouseid
		FROM tempisssuedetail WHERE `rank` = x;
         
	
        -- select itembatch and quantity from material movement for current item
        DROP TEMPORARY TABLE IF EXISTS tempitembatch;
        
		CREATE TEMPORARY TABLE tempitembatch
        
        SELECT id as mom_id,itemid, itembatch,unitcost, transactiondate,
        (fnc_feedmill_itembatchbalance(IFNULL(itembatch,''),itemid,p_warehouseid,p_companyid)) as quantity,
        (@row_number1 := @row_number1 + 1) as recordrank2
       FROM(
    
			SELECT id,itemid, itembatch,(SUM(itemvalue)/SUM(quantity))as unitcost,transactiondate
			FROM materialmovement
			WHERE 
				itemid = p_itemid AND
				companyid = p_companyid AND
				towarehouseid = p_warehouseid AND
                transactiondate <= p_transactiondate AND
				transactiontypeid in (681,682,684,685) AND itembatch is not null
				GROUP BY itemid, itembatch
               
			) stocktable order by transactiondate asc,mom_id asc; 
      
        
		SELECT COUNT(*) INTO @reccount FROM  tempitembatch;
        
        WHILE i<@reccount DO
			
			SET @issuequantity = 0;
			SET @p_unitcost = null;
			SELECT itemid, itembatch,quantity,unitcost
			 INTO  material_itemid, material_itembatch, material_quantity,p_unitcost
			FROM  tempitembatch where recordrank2 = i+1;
            
          --  SELECT material_itemid, material_itembatch, material_quantity,@p_unitcost;
           
         --  WHERE recordrank = i;
			
             IF (p_quantity > 0 ) THEN
				
                IF(material_quantity > 0) THEN
					IF (material_quantity >= p_quantity) THEN
						SET @issuequantity = p_quantity;
						SET p_quantity = 0;
					ELSE 
                    
						SET @issuequantity = material_quantity;
                        SET p_quantity = p_quantity - material_quantity;
                    
					-- ELSE
						-- SET @issuequantity = p_quantity - material_quantity;
					END IF;
                    
				END IF;
				   if (@issuequantity >0) then
				  CALL spc_materialmovement_save(null, p_itemid, material_itembatch, 683, p_production_issue_id, p_transactiondate,
						@issuequantity, p_warehouseid,(SELECT id From warehousebin Where warehouseid = p_warehouseid AND isdefault = 1), null, null,(@issuequantity*p_unitcost), p_companyid, p_userid,@movement_outid);
				 
              END IF;
            
            END IF;
            
        	SET  i = i + 1; 
	    END WHILE;
            
			SET  x = x + 1; 
	END WHILE;
	 SELECT @movement_outid as movement_outid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmillsetting_delete`(
IN p_id INT(11))
BEGIN

DELETE
FROM feedmill_feedmillsetting
WHERE   id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmillsetting_save`(
IN p_id INT(11),
IN p_tolerencepercentage DECIMAL(9,3),
IN p_additionalcost DECIMAL(9,3),
IN p_warehouseid INT(11),
IN p_inventoryindrledgerid INT(11),
IN p_grpowithoutinvoiceledgerid INT(11),
IN p_discountledgerid INT(11),
IN p_isfifo tinyint(4),
IN p_overheadledgerid INT(11),
IN p_applyreciptloss tinyint(4),
IN p_lossledgerid INT(11),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT
)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_feedmillsetting(
        tolerencepercentage ,additionalcost,warehouseid,
        inventoryindrledgerid, grpowithoutinvoiceledgerid, discountledgerid, isfifo, overheadledgerid,applyreciptloss,lossledgerid, companyid)
        
        VALUES (p_tolerencepercentage,p_additionalcost,p_warehouseid,
        p_inventoryindrledgerid, p_grpowithoutinvoiceledgerid, p_discountledgerid, p_isfifo, p_overheadledgerid,p_applyreciptloss,p_lossledgerid, p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_feedmillsetting
        SET tolerencepercentage = p_tolerencepercentage,
			additionalcost = p_additionalcost,
            warehouseid = p_warehouseid,
            inventoryindrledgerid = p_inventoryindrledgerid,
            grpowithoutinvoiceledgerid = p_grpowithoutinvoiceledgerid,
            discountledgerid = p_discountledgerid,
            isfifo = p_isfifo,
            overheadledgerid = p_overheadledgerid,
            applyreciptloss = p_applyreciptloss,
            lossledgerid = p_lossledgerid,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_feedmillsetting', out_id, @action, p_userid);



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmillsetting_search`(
IN p_companyid INT(11)
)
BEGIN
SELECT 		FMS.id,
            FMS.tolerencepercentage,
			FMS.additionalcost,
            FMS.inventoryindrledgerid,
			COA.coaname as invindrname,
            COA.glcode as invindrcode,
            FMS.grpowithoutinvoiceledgerid,
            FMS.discountledgerid,
            COA1.coaname as grpowithoutinvoiceledgername,
            COA1.glcode as grpowithoutinvoiceledgercode,
            COA2.coaname as discountledgername,
            COA2.glcode as discountledgercode,
            FMS.isfifo,
			FMS.overheadledgerid,
			COA3.coaname as overheadledgername,
            COA3.glcode as overheadledgercode,
            FMS.applyreciptloss,
            FMS.lossledgerid,
            COA4.coaname as lossledgername,
            COA4.glcode as lossledgercode,
            FMS.warehouseid,
            W.warehousename
           
	FROM feedmill_feedmillsetting FMS
	LEFT JOIN chartofaccount COA ON COA.id = FMS.inventoryindrledgerid
    LEFT JOIN chartofaccount COA3 ON COA3.id = FMS.overheadledgerid
    LEFT JOIN chartofaccount COA1 ON COA1.id = FMS.grpowithoutinvoiceledgerid
    LEFT JOIN chartofaccount COA2 ON COA2.id = FMS.discountledgerid
	 LEFT JOIN chartofaccount COA4 ON COA4.id = FMS.lossledgerid
     LEFT JOIN warehouse W ON W.id = FMS.warehouseid
    
    WHERE FMS.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmillsetting_select`(
IN p_id INT(11),
IN p_companyid INT(11))
BEGIN

SELECT 		tolerencepercentage,
			additionalcost,
            inventoryindrledgerid,
            grpowithoutinvoiceledgerid,
            discountledgerid,
            companyid,
            isfifo,
            overheadledgerid,
            FMS.applyreciptloss,
            FMS.lossledgerid
           
	FROM  feedmill_feedmillsetting
    
    WHERE companyid = p_companyid
    AND id = p_id;



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_billofmaterial_byitemid`(
 IN p_itemid INT(11),
 IN p_bomcode VARCHAR(200),
  IN p_companyid INT(11)
  )
BEGIN
	SELECT id As bomid
    
		FROM feedmill_billofmaterial 
    
    WHERE 
		itemid = p_itemid AND
        bomcode = p_bomcode
        AND
		companyid = p_companyid ;
      
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_get_issue_cost_search`(
 IN p_production_issue_id INT(11),
 IN p_companyid INT(11)
 )
BEGIN

 
 SELECT SUM(dramount) as issue_value  FROM journalentry JE
       LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
 WHERE JE.narration = 'PRODUCTION ISSUE JE' AND JE.transactionid = p_production_issue_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_itemidbatch_byitemid`(
 IN p_itemid INT(11),
 IN p_warehouseid INT(11),
 IN p_companyid INT(11)
 )
BEGIN
DROP TEMPORARY TABLE IF EXISTS tempbatchtable;
CREATE TEMPORARY TABLE tempbatchtable
 SELECT 
		MOM.itembatch,
        MOM.itemid,
        DATE_FORMAT( MOM.transactiondate,'%d/%m/%Y') as collectiondate,
        fnc_feedmill_itembatchbalance(MOM.itembatch,p_itemid,p_warehouseid,p_companyid) as batch_qty,
        (MOM.itemvalue/MOM.quantity) as batch_unitcost
        
 
 FROM materialmovement MOM 
 
	LEFT JOIN item I ON MOM.itemid = I.id
    
  where MOM.towarehouseid = p_warehouseid AND
		MOM.itemid = p_itemid  AND
         FIND_IN_SET(MOM.transactiontypeid, '681,682,684,685') AND
         MOM.companyid = p_companyid 
       
   order by  MOM.transactiondate asc;
SELECT * FROM tempbatchtable WHERE batch_qty >0 ;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_item_stockqty`(
 IN p_itemid INT(11),
 IN p_warehouseid INT(11),
 IN p_companyid INT(11))
BEGIN

SELECT  MOM.itemid,SUM(quantity) as stockqty
 FROM materialmovement MOM 
  where MOM.towarehouseid = p_warehouseid AND
		MOM.itemid = p_itemid  AND
         FIND_IN_SET(MOM.transactiontypeid, '681,682,684,685') AND
         MOM.companyid = p_companyid 
         group by itemid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_production_issuedetail_delete`(
 
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM feedmill_production_issuedetail WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'feedmill_production_issuedetail', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_production_issuedetail_save`(
IN p_id INT(11),
IN p_production_issue_id INT(11),
IN p_itemid INT(11),
IN p_itembatch VARCHAR(200),
IN p_warehouseid INT(11),
IN p_issue_qty DECIMAl(20,3),
IN p_batch_totalcost DECIMAL(20,3),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_production_issuedetail
        (
			production_issue_id,
			itemid,	
			itembatch,	
			warehouseid,	
			issue_qty,
            batch_totalcost,
			companyid		
		)
        
        VALUES 
        (
			p_production_issue_id,
			p_itemid,	
			p_itembatch,	
			p_warehouseid,	
			p_issue_qty,
            p_batch_totalcost,
			p_companyid
		);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_production_issuedetail
        
        SET production_issue_id = p_production_issue_id,
			itemid = p_itemid,
			itembatch = p_itembatch,
			warehouseid = p_warehouseid,
            issue_qty= p_issue_qty,
            batch_totalcost  = p_batch_totalcost,
            companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
     SELECT LAST_INSERT_ID() INTO OUT_ID;
    
  if( p_issue_qty is not null) then
   SET @productionorderid = null; 
   SET @pendingplannedqty= null; 
   SET @status_id = null;
   -- select productionorederid from feedmill_production_issue
    select productionorder_id, pendingplannedqty, status_id  INTO @productionorderid ,@pendingplannedqty, @status_id
		 from feedmill_production_issue FPI
         LEFt JOIN feedmill_productionorderdetail FPD ON FPD.productionorderid = FPI.productionorder_id AND
			FPD.itemid = p_itemid
		 where FPI.id = p_production_issue_id ;
     
  
      -- update productionorrder Detail pending qty
     UPDATE feedmill_productionorderdetail FPOD
     SET pendingplannedqty = @pendingplannedqty - p_issue_qty
     WHERE FPOD.itemid = p_itemid AND FPOD.productionorderid = @productionorderid ;
     

     END IF;
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_production_issuedetail', out_id, @action, p_userid);



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_production_issuedetail_search`(
 IN p_production_issue_id INT(11),
 IN p_companyid INT(11) 
 )
BEGIN

SELECT 	    
			FDI.id,	
			production_issue_id,
			itemid,	
			FDI.itembatch,
            FDI.itembatch as itembatch1,
			warehouseid,		
			issue_qty,	
			FDI.companyid,
            I.itemname,
            batch_totalcost
	
           
	FROM feedmill_production_issuedetail FDI
    LEFT JOIN item I ON FDI.itemid = I.id
    
    
    WHERE 
		FDI.production_issue_id = p_production_issue_id 
		AND
		FDI.companyid = p_companyid;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_production_issuedetail_select`(
 IN id INT(11),
 IN p_companyid INT(11) 
 )
BEGIN

SELECT 	    
			id,	
			production_issue_id,
			itemid,	
			itembatch,
            itembatch as itembatch1,
			warehouseid,		
			issue_qty,
			companyid,
            batch_totalcost
			
	
           
	FROM feedmill_production_issuedetail
    
    
    WHERE 
		id = id 
		AND
		companyid = p_companyid;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_production_issuelist_search`(
    IN p_from_date date,
	IN p_to_date date
 )
BEGIN

SELECT 	    
			FPI.id,	
			production_issue_no,
			productionorder_id	,
			DATE_FORMAT(issue_date	,'%d/%m/%Y') as issue_date,
			FPI.status_id,
			R.refname as status,
            FPO.productionorderno,
			I.itemname as productname,
            FPI.unitcost
            
	FROM feedmill_production_issue FPI
    
     LEFT JOIN `reference` R ON FPI.status_id = R.id
     LEFT JOIN feedmill_productionorder FPO ON FPI.productionorder_id = FPO.id
     LEFT JOIN feedmill_billofmaterial BOM ON  FPO.productionno = BOM.id
      LEFT JOIN item I ON BOM.itemid = I.id
    
    WHERE 
        FPI.issue_date BETWEEN p_from_date AND p_to_date
    order by FPI.id desc ;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_production_issue_delete`(
 
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM feedmill_production_issue WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'feedmill_production_issue', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_production_issue_save`(
IN p_id INT(11),
IN p_production_issue_no varchar(45),
IN p_productionorder_id INT(11),
IN p_issue_date DATE,
IN p_status_id INT(11),
IN p_unitcost DECIMAL(30,6),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_production_issue
        (
			production_issue_no,
			productionorder_id,
			issue_date,	
			status_id,	
            unitcost,
			companyid	
		)
        
        VALUES 
        (
			p_production_issue_no,
			p_productionorder_id,
			p_issue_date,	
			p_status_id,
            p_unitcost,
			p_companyid
		);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_production_issue
        
        SET production_issue_no = p_production_issue_no,
			productionorder_id = p_productionorder_id,
			issue_date = p_issue_date,
			status_id = p_status_id,
            unitcost = p_unitcost,
            companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_production_issue', out_id, @action, p_userid);



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_production_issue_search`(
 IN p_companyid INT(11) 
 )
BEGIN

SELECT 	    
			FPI.id,	
			production_issue_no,
			productionorder_id	,
			DATE_FORMAT(issue_date	,'%d/%m/%Y') as issue_date,
			FPI.status_id,
			R.refname as status,
            FPO.productionorderno,
			I.itemname as productname,
            FPI.unitcost
			
	
           
	FROM feedmill_production_issue FPI
    
     LEFT JOIN `reference` R ON FPI.status_id = R.id
     LEFT JOIN feedmill_productionorder FPO ON FPI.productionorder_id = FPO.id
     LEFT JOIN feedmill_billofmaterial BOM ON  FPO.productionno = BOM.id
      LEFT JOIN item I ON BOM.itemid = I.id
    
    WHERE FPI.companyid = p_companyid
    order by FPI.id desc ;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_production_issue_select`(
 IN p_id INT(11),
 IN p_companyid INT(11) 
 )
BEGIN

SELECT 	    
			FPI.id,	
			production_issue_no,
			productionorder_id	,
			DATE_FORMAT(issue_date	,'%d/%m/%Y') as issue_date,
			FPI.status_id,
			R.refname as status	,
            FPI.unitcost
			
	
           
	FROM feedmill_production_issue FPI
    
     LEFT JOIN `reference` R ON FPI.status_id = R.id
    
    WHERE FPI.id = p_id AND
         FPI.companyid = p_companyid;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_receipt_from_production_delete`(
 IN p_id INT(11),
 IN p_companyid INT(11),
 IN p_userid INT(11)
)
BEGIN

	DELETE FROM feedmill_receipt_from_production WHERE id = p_id;
	CALL spc_commonlog_save(p_companyid, 'feedmill_receipt_from_production', p_id, 'delete', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_receipt_from_production_list_search`( 
    IN p_from_date date,
	IN p_to_date date
)
BEGIN
   SELECT DISTINCT FRFP.id,	
			FRFP.production_receipt_no,
			FRFP.productionorder_id,
            DATE_FORMAT(FRFP.receipt_date,'%d/%m/%Y') as receipt_date,
			FRFP.itemid,	
			receipt_qty,	
			FRFP.status_id,	
			FRFP.unit_cost,	
			FRFP.item_totalcost,	
			FRFP.itembatch,	
			FRFP.towarehouse_id,	
			FRFP.towarehousebin_id,	
			FRFP.remark,	
			FRFP.companyid,
            I.itemname,
            I.itemunitid,
            FRFP.packingmaterial_id,
            FRFP.bag_qty,
            FPO.productionorderno,
            R.refname as convertedunitname,
            FM.id as factorid,
            FRFP.remaining_receiptqty,
            FRFP.additionalcost,
			FRFP.applyreciptloss,
            FRFP.po_unit_cost
            
     FROM  feedmill_receipt_from_production  FRFP
     
     LEFT JOIN item I ON FRFP.itemid = I.id 
     LEFT JOIN feedmill_productionorder FPO ON FRFP.productionorder_id = FPO.id
	 Left JOIN `reference` R ON R.id = FRFP.packingmaterial_id
     Left JOIN factormaster FM ON FM.convertedunitid = FRFP.packingmaterial_id
     
     WHERE
        FRFP.receipt_date BETWEEN p_from_date AND p_to_date
     order by FRFP.id desc;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_receipt_from_production_save`(
	IN p_id	INT(11),
	IN p_production_receipt_no VARCHAR(45),
	IN p_productionorder_id INT(11),
	IN p_receipt_date DATE,
	IN p_itemid	INT(11),
	IN p_receipt_qty DECIMAL(15,3),
	IN p_status_id INT(11),
	IN p_unit_cost	DECIMAL(30,6),
	IN p_item_totalcost	DECIMAL(30,6),
	IN p_itembatch	VARCHAR(200),
	IN p_towarehouse_id INT(11),
	IN p_towarehousebin_id INT(11),
	IN p_remark	VARCHAR(200),
    IN p_balance_qty DECIMAL(15,3),
    IN p_packingmaterial_id INT(11),
    IN p_bag_qty INT(11),
    IN p_remaining_receiptqty DECIMAL(15,3),
    IN p_additionalcost DECIMAL(30,6),
    IN p_applyreciptloss TINYINT(4),
    IN p_po_unit_cost DECIMAL(30,6),
	IN p_companyid INT(11),
	IN p_userid INT(11),
	OUT out_id INT
)
BEGIN

	SET @action = null;
    SET @receiptid = null;
   
    IF(NULLIF(p_id, '0') IS NULL) THEN
     set @out_seriesid = '0';
		call spc_financialyeardocseries_newseries('FRP', p_companyid, @out_seriesid);
		INSERT INTO feedmill_receipt_from_production 
			   (	
					production_receipt_no,	
					productionorder_id,	
					receipt_date,	
					itemid,	
					receipt_qty,
					status_id,		
					unit_cost,	
					item_totalcost,	
					itembatch,	
					towarehouse_id,	
					towarehousebin_id,	
					remark,
                    balance_qty,
                    packingmaterial_id,
                    bag_qty,
                    remaining_receiptqty,
                    additionalcost,
                    applyreciptloss,
                    po_unit_cost,
					companyid
                )
			VALUES 
				 ( (SELECT @out_seriesid),	
					p_productionorder_id,	
					p_receipt_date,	
					p_itemid,	
					p_receipt_qty,
					p_status_id,		
					p_unit_cost,	
					p_item_totalcost,	
					@itembatch,	
					p_towarehouse_id,	
					p_towarehousebin_id,	
					p_remark,
                    p_balance_qty,
                    p_packingmaterial_id,
                    p_bag_qty,
                    p_remaining_receiptqty,
                    p_additionalcost,
                    p_applyreciptloss,
                    p_po_unit_cost,
					p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE feedmill_receipt_from_production
				SET production_receipt_no = p_production_receipt_no,	
					productionorder_id = p_productionorder_id,	
					receipt_date = p_receipt_date,	
					itemid = p_itemid,	
					receipt_qty = p_receipt_qty,
					status_id = p_status_id,		
					unit_cost = p_unit_cost,	
					item_totalcost = p_item_totalcost,	
					itembatch = p_itembatch,	
					towarehouse_id = p_towarehouse_id,	
					towarehousebin_id = p_towarehousebin_id,	
					remark = p_remark,	
                    balance_qty = p_balance_qty,
                    packingmaterial_id = p_packingmaterial_id,
                    bag_qty = p_bag_qty,
                    remaining_receiptqty = p_remaining_receiptqty,
                    additionalcost = p_additionalcost,
                    applyreciptloss = p_applyreciptloss,
                    po_unit_cost = p_po_unit_cost,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;

     SELECT LAST_INSERT_ID() INTO @receiptid; 
    
     -- update production order status closed when baance qty = 0
    SET @statusid = 1702;
		if(p_balance_qty = 0)then
        SET @statusid = 1703;
    END IF;
    
    
    UPDATE feedmill_productionorder FPO
    SET FPO.receipt_pendingqty = p_balance_qty,
		FPO.statusid = @statusid
    where FPO.id = p_productionorder_id;
    
 if(p_status_id = 2022)then
      
       SET @itembatch = null;
	  SET @itemgroup = null;
    -- create itembatch 
      select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch from item I
		INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

			WHERE I.id = p_itemid;
        
			UPDATE  feedmill_receipt_from_production RPO
			SET itembatch = @itembatch
				where RPO.id= @receiptid;
            
        
              -- get item group id from the item id and update itemgroup table
        SELECT itemgroupid INTO @itemgroup FROM item WHERE id = p_itemid;
        
        UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
        
        WHERE id = @itemgroup;
    
    
 -- material movment for receipt
  SET @out_movid = NULL;
			CALL spc_materialmovement_save(
				NULL, p_itemid,  @itembatch, 684,
				@receiptid, p_receipt_date, p_receipt_qty,NULL, NULL,
				 p_towarehouse_id, (select id FROM warehousebin where warehouseid = p_towarehouse_id AND isdefault = 1 limit 1),
				p_item_totalcost,p_companyid, p_userid, @out_movid
			);
	END IF;
    
   SELECT @receiptid INTO out_id; 
    
    
   -- record log
  --  CALL spc_commonlog_save(p_companyid, 'feedmill_receipt_from_production', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_receipt_from_production_search`( 
  IN p_companyid INT(11)
  )
BEGIN
   SELECT DISTINCT FRFP.id,	
			FRFP.production_receipt_no,
			FRFP.productionorder_id,
            DATE_FORMAT(FRFP.receipt_date,'%d/%m/%Y') as receipt_date,
			FRFP.itemid,	
			receipt_qty,	
			FRFP.status_id,	
			FRFP.unit_cost,	
			FRFP.item_totalcost,	
			FRFP.itembatch,	
			FRFP.towarehouse_id,	
			FRFP.towarehousebin_id,	
			FRFP.remark,	
			FRFP.companyid,
            I.itemname,
            I.itemunitid,
            FRFP.packingmaterial_id,
            FRFP.bag_qty,
            FPO.productionorderno,
            R.refname as convertedunitname,
            FM.id as factorid,
            FRFP.remaining_receiptqty,
            FRFP.additionalcost,
			FRFP.applyreciptloss,
            FRFP.po_unit_cost
            
     FROM  feedmill_receipt_from_production  FRFP
     
     LEFT JOIN item I ON FRFP.itemid = I.id 
     LEFT JOIN feedmill_productionorder FPO ON FRFP.productionorder_id = FPO.id
	 Left JOIN `reference` R ON R.id = FRFP.packingmaterial_id
     Left JOIN factormaster FM ON FM.convertedunitid = FRFP.packingmaterial_id
     
     WHERE FRFP.companyid = p_companyid
     order by FRFP.id desc;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedmill_receipt_from_production_select`( 
  IN p_id INT(11),
  IN p_companyid INT(11)
  )
BEGIN
   SELECT   FRFP.id,	
			FRFP.production_receipt_no,
			FRFP.productionorder_id,	
			FRFP.receipt_date,	
			FRFP.itemid,	
			receipt_qty,
            FRFP.status_id,
			FRFP.unit_cost,	
			FRFP.item_totalcost,	
			FRFP.itembatch,	
			FRFP.towarehouse_id,	
			FRFP.towarehousebin_id,	
			FRFP.remark,	
			FRFP.companyid,
             I.itemname,
             I.itemunitid,
            R.refname as itemunitname,
            FPO.plannedqty,
			FRFP.packingmaterial_id,
            FRFP.bag_qty,
            FPO.receipt_pendingqty as balance_qty,
			R1.refname as convertedunitname,
            FRFP.packingmaterial_id as factorid,
			-- FM.id as factorid, -- change by Pooja multiple lines displaye issue
            FRFP.remaining_receiptqty,
			FRFP.additionalcost,
			FRFP.applyreciptloss,
			FRFP.po_unit_cost
            
     FROM  feedmill_receipt_from_production  FRFP
     LEFT JOIN item I ON FRFP.itemid = I.id 
     LEFT JOIN `reference` R ON I.itemunitid = R.id
	 LEFT JOIN feedmill_productionorder FPO ON FRFP.productionorder_id = FPO.id
	-- Left JOIN factormaster FM ON FM.convertedunitid = FRFP.packingmaterial_id 
     Left JOIN `reference` R1 ON R1.id = FRFP.packingmaterial_id
     
     WHERE  FRFP.id = p_id AND
			FRFP.companyid = p_companyid;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_feedrequiredplan_report`(
 In p_warehouseid INT(11),
 IN p_breederbatchid varchar(200),
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_companyid INT (11)
 )
BEGIN
   SET @breederbtachid = p_breederbatchid;
   
   SELECT breederbatchid,scheduledate, itemid, quantity, 
   birdebalance, flockage, requiredage,secondwqeekno,firstweekno,
   firstremaingdays,weekdaysdiff,(weekdiff+firstweekno)as weekdiff,seconremaingdays,
   fun_feedstditemwise(itemid,firstweekno,firstremaingdays) as firesfeed,
   fun_feedstditemwise(itemid,secondwqeekno,seconremaingdays) as secfeed,
   fun_feedstditemwise(itemid,(weekdiff+firstweekno),weekdaysdiff) as tiredfeed,
   partyname,
   itemname,
   firstday,
   secondday,firstdaydiff,seconddaydiff,
   IFNULL(closingbalnce,0) as closingbalnce
  

   
   FROM(
   SELECT 
   BBP.breederbatchid as breederbatchid,
   DATE_FORMAT( BBP.placementdate,'%d/%m/%Y') as scheduledate,
   BBPD.itemid as itemid,
   BBPD.quantity as quantity,
   (BBPD.quantity-IFNULL(fnc_biredbalance(BBP.breederbatchid,BBPD.itemid, BBP.placementdate, p_fromdate),0)) as birdebalance,
   (FORMAT(FLOOR(datediff( p_fromdate,BBP.placementdate)/7 ),0))as flockage,
   (FORMAT(FLOOR(datediff( p_todate,BBP.placementdate)/7 ),0))as requiredage,
    MOD((datediff( p_fromdate,BBP.placementdate)),7) as firstday,
    MOD((datediff( p_todate,BBP.placementdate)),7) as secondday,
   datediff( p_todate,BBP.placementdate) as firstdaydiff,
   datediff( p_fromdate,BBP.placementdate) as seconddaydiff,
	(FORMAT(FLOOR(datediff( p_todate,BBP.placementdate)/7 ),0)+1)as secondwqeekno,
    (FORMAT(FLOOR(datediff( p_fromdate,BBP.placementdate)/7 ),0)+1)as firstweekno,
    (7-MOD((datediff( p_fromdate,BBP.placementdate)),7)) as firstremaingdays,
    (7-MOD((datediff( p_todate,BBP.placementdate)),7)) as seconremaingdays,
     (((FORMAT(FLOOR(datediff( p_todate,BBP.placementdate)/7 ),0)-FORMAT(FLOOR(datediff( p_fromdate,BBP.placementdate)/7 ),0)+1)*7)-1)as weekdaysdiff,
    -- (((FORMAT(FLOOR(datediff( p_todate,BBP.placementdate)/7 ),0)-FORMAT(FLOOR(datediff( p_fromdate,BBP.placementdate)/7 ),0)) -1)*7)as weekdaysdiff,)
   ((FORMAT(FLOOR(datediff( p_todate,BBP.placementdate)/7 ),0)-FORMAT(FLOOR(datediff( p_fromdate,BBP.placementdate)/7 ),0))-1)as weekdiff,
    PR.partyname as partyname,
	I.itemname as itemname,
	fun_feedreqclosingbalance(BBP.breederbatchid,BBPD.itemid,p_companyid) as closingbalnce
   
   FROM
   breederbatchplacement BBP
   LEFT JOIN breederbatchplacementdetail BBPD ON BBP.id = BBPD.breederbatchplacementid
   LEFT JOIN grpo GR ON GR.id = BBP.grpono
   LEFT JOIN party PR ON PR.id = GR.supplierid
    LEFT JOIN item I ON I.id = itemid
   
   
   WHERE 
			FIND_IN_SET(BBP.breederbatchid,@breederbtachid) AND
			-- BBP.placementdate BETWEEN p_fromdate AND p_todate AND
            BBP.companyid = p_companyid) as temp;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_financialyeardocseries_newseries`(
	IN p_doccode VARCHAR(200),
    IN p_companyid INT,
    OUT out_seriesid VARCHAR(50)
)
BEGIN

	SET @dbtableaffected = '', @seriescolumn = '', @typecolumn = '', @startwith = '';
    SET @endto = '', @prefix = '', @length = '', @companyid = 0;
    
    SELECT 
		DS.dbtableaffected, DS.seriescolumn, DS.typecolumn, startwith, endto, prefix, length
		INTO 
		@dbtableaffected, @seriescolumn, @typecolumn, @startwith, @endto, @prefix, @length
	FROM
		docseries DS
	LEFT JOIN financialyeardocseries FYS ON DS.id = FYS.docseriesid
	WHERE
		DS.doccode = p_doccode;
        
    SET @maxid = NULL;
    SET @seriesno = NULL;
    
    -- SET @qery = CONCAT("SELECT id, ", @seriescolumn ," INTO @maxid, @seriesno FROM ", @dbtableaffected, " WHERE companyid = ", p_companyid ," AND NULLIF(" , @seriescolumn , ", '') IS NOT NULL ORDER BY id DESC Limit 1;");
    SET @qery = CONCAT("SELECT id, ", @seriescolumn ," INTO @maxid, @seriesno FROM ", @dbtableaffected, " WHERE companyid = ", p_companyid ," ORDER BY id DESC Limit 1;");

	PREPARE stmt1 FROM @qery; 
	EXECUTE stmt1; 
	DEALLOCATE PREPARE stmt1; 
    
    SET @maxno = 0;
    SET @isno = 0;
    
     -- select @maxid, @seriesno;
    
    IF(@seriesno IS NOT NULL) THEN
    
		-- select '@seriesno IS NOT NULL';
    
		SELECT REPLACE(CAST(@seriesno as CHAR(100)), @prefix, '') INTO @maxno;
        
        -- select @maxno;
		
        -- Check value is number
		SELECT @maxno REGEXP '^[0-9]+$' INTO @isno;
        
        IF(@isno = 1) THEN -- check is number
        
			-- select '@isno check is number';
        
			SET @incno = (CONVERT(@maxno, UNSIGNED INTEGER) + 1);
           
			IF(@incno >= @startwith AND @incno <= @endto) THEN -- check number is between Start and End number
				
                -- select '@incno >= @startwith AND @incno <= @endto';
                
                -- Set Zeros in series
				SET @zerocount = @length - (CHAR_LENGTH(@prefix) + CHAR_LENGTH(@incno));
                SET @zerostr = '';
				SET @xcnt = 1;
				 WHILE @xcnt  <= @zerocount DO
					SET @zerostr = concat(@zerostr,'0');
				    SET @xcnt = @xcnt + 1; 
				 END WHILE;
                 
				-- select @length, CHAR_LENGTH(@prefix), CHAR_LENGTH(@incno), @incno, @zerostr;
            
				SELECT CONCAT(@prefix, @zerostr, @incno) INTO out_seriesid;
                
                -- select out_seriesid;
            
            END IF;
            
		END IF;

	ELSE
    
		SET @zerocount = @length - (CHAR_LENGTH(@prefix) + CHAR_LENGTH(@startwith));
                 SET @zerostr = '';
				 SET @xcnt = 1;
				 WHILE @xcnt  <= @zerocount DO
					SET @zerostr = concat(@zerostr,'0');
				    SET @xcnt = @xcnt + 1; 
				 END WHILE;
            
			SELECT CONCAT(@prefix, @zerostr, @startwith) INTO out_seriesid;
	
        
    END IF;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_financialyeardocseries_newseries_forJE`(
	IN p_doccode VARCHAR(200),
    IN p_companyid INT,
    OUT out_seriesid VARCHAR(50)
)
BEGIN

	SET @dbtableaffected = '', @seriescolumn = '', @typecolumn = '', @startwith = '';
    SET @endto = '', @prefix = '', @length = '', @companyid = 0;
    
    SELECT 
		DS.dbtableaffected, DS.seriescolumn, DS.typecolumn, startwith, endto, prefix, length
		INTO 
		@dbtableaffected, @seriescolumn, @typecolumn, @startwith, @endto, @prefix, @length
	FROM
		docseries DS
	LEFT JOIN financialyeardocseries FYS ON DS.id = FYS.docseriesid
	WHERE
		DS.doccode = p_doccode;
        
    SET @maxid = NULL;
    SET @seriesno = NULL;
    
    -- SET @qery = CONCAT("SELECT id, ", @seriescolumn ," INTO @maxid, @seriesno FROM ", @dbtableaffected, " WHERE companyid = ", p_companyid ," AND NULLIF(" , @seriescolumn , ", '') IS NOT NULL ORDER BY id DESC Limit 1;");
     SET @qery = CONCAT("SELECT id, ", @seriescolumn ," INTO @maxid, @seriesno FROM ", @dbtableaffected, " WHERE companyid = ", p_companyid ," AND vouchertypeid !=1296", " AND vouchertypeid !=1293"," ORDER BY id DESC Limit 1;");
    
	PREPARE stmt1 FROM @qery; 
	EXECUTE stmt1; 
	DEALLOCATE PREPARE stmt1; 
    
    SET @maxno = 0;
    SET @isno = 0;
    
    -- select @maxid, @seriesno;
    
    IF(@seriesno IS NOT NULL) THEN
    
		-- select '@seriesno IS NOT NULL';
    
		SELECT REPLACE(CAST(@seriesno as CHAR(100)), @prefix, '') INTO @maxno;
        
        -- select @maxno;
		
        -- Check value is number
		SELECT @maxno REGEXP '^[0-9]+$' INTO @isno;
        
        IF(@isno = 1) THEN -- check is number
        
			-- select '@isno check is number';
        
			SET @incno = (CONVERT(@maxno, UNSIGNED INTEGER) + 1);
           
			IF(@incno >= @startwith AND @incno <= @endto) THEN -- check number is between Start and End number
				
                -- select '@incno >= @startwith AND @incno <= @endto';
                
                -- Set Zeros in series
				SET @zerocount = @length - (CHAR_LENGTH(@prefix) + CHAR_LENGTH(@incno));
                SET @zerostr = '';
				SET @xcnt = 1;
				 WHILE @xcnt  <= @zerocount DO
					SET @zerostr = concat(@zerostr,'0');
				    SET @xcnt = @xcnt + 1; 
				 END WHILE;
                 
				-- select @length, CHAR_LENGTH(@prefix), CHAR_LENGTH(@incno), @incno, @zerostr;
            
				SELECT CONCAT(@prefix, @zerostr, @incno) INTO out_seriesid;
                
                -- select out_seriesid;
            
            END IF;
            
		END IF;

	ELSE
    
		SET @zerocount = @length - (CHAR_LENGTH(@prefix) + CHAR_LENGTH(@startwith));
                 SET @zerostr = '';
				 SET @xcnt = 1;
				 WHILE @xcnt  <= @zerocount DO
					SET @zerostr = concat(@zerostr,'0');
				    SET @xcnt = @xcnt + 1; 
				 END WHILE;
            
			SELECT CONCAT(@prefix, @zerostr, @startwith) INTO out_seriesid;
        
    END IF;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_financialyeardocseries_newseries_forparty`(
	IN p_doccode VARCHAR(200),
    IN p_companyid INT,
    IN p_roleid VARCHAR(50),
    OUT out_seriesid VARCHAR(50)
)
BEGIN

	SET @dbtableaffected = '', @seriescolumn = '', @typecolumn = '', @startwith = '';
    SET @endto = '', @prefix = '', @length = '', @companyid = 0;
    
    SELECT 
		DS.dbtableaffected, DS.seriescolumn, DS.typecolumn, startwith, endto, prefix, length
		INTO 
		@dbtableaffected, @seriescolumn, @typecolumn, @startwith, @endto, @prefix, @length
	FROM
		docseries DS
	LEFT JOIN financialyeardocseries FYS ON DS.id = FYS.docseriesid
	WHERE
		DS.doccode = p_doccode;
        
    SET @maxid = NULL;
    SET @seriesno = NULL;
    
    -- SET @qery = CONCAT("SELECT id, ", @seriescolumn ," INTO @maxid, @seriesno FROM ", @dbtableaffected, " WHERE companyid = ", p_companyid ," AND NULLIF(" , @seriescolumn , ", '') IS NOT NULL ORDER BY id DESC Limit 1;");
    SET @qery = CONCAT("SELECT id, ", @seriescolumn ," INTO @maxid, @seriesno FROM ", @dbtableaffected, " WHERE companyid = ", p_companyid ," AND FIND_IN_SET(partyroleids,", p_roleid,") ORDER BY id DESC Limit 1;");
    
	PREPARE stmt1 FROM @qery; 
	EXECUTE stmt1; 
	DEALLOCATE PREPARE stmt1; 
    
    SET @maxno = 0;
    SET @isno = 0;
    
    -- select @maxid, @seriesno;
    
    IF(@seriesno IS NOT NULL) THEN
    
		-- select '@seriesno IS NOT NULL';
    
		SELECT REPLACE(CAST(@seriesno as CHAR(100)), @prefix, '') INTO @maxno;
        
        -- select @maxno;
		
        -- Check value is number
		SELECT @maxno REGEXP '^[0-9]+$' INTO @isno;
        
        IF(@isno = 1) THEN -- check is number
        
			-- select '@isno check is number';
        
			SET @incno = (CONVERT(@maxno, UNSIGNED INTEGER) + 1);
           
			IF(@incno >= @startwith AND @incno <= @endto) THEN -- check number is between Start and End number
				
                -- select '@incno >= @startwith AND @incno <= @endto';
                
                -- Set Zeros in series
				SET @zerocount = @length - (CHAR_LENGTH(@prefix) + CHAR_LENGTH(@incno));
                SET @zerostr = '';
				SET @xcnt = 1;
				 WHILE @xcnt  <= @zerocount DO
					SET @zerostr = concat(@zerostr,'0');
				    SET @xcnt = @xcnt + 1; 
				 END WHILE;
                 
				-- select @length, CHAR_LENGTH(@prefix), CHAR_LENGTH(@incno), @incno, @zerostr;
            
				SELECT CONCAT(@prefix, @zerostr, @incno) INTO out_seriesid;
                
                -- select out_seriesid;
            
            END IF;
            
		END IF;

	ELSE
    
		SET @zerocount = @length - (CHAR_LENGTH(@prefix) + CHAR_LENGTH(@startwith));
                 SET @zerostr = '';
				 SET @xcnt = 1;
				 WHILE @xcnt  <= @zerocount DO
					SET @zerostr = concat(@zerostr,'0');
				    SET @xcnt = @xcnt + 1; 
				 END WHILE;
            
			SELECT CONCAT(@prefix, @zerostr, @startwith) INTO out_seriesid;
        
    END IF;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_financialyeardocseries_newseries_forvouchertypr`(
	IN p_doccode VARCHAR(200),
    IN p_companyid INT,
    IN p_vouchertypeid INT(11),
    OUT out_seriesid VARCHAR(50)
)
BEGIN

	SET @dbtableaffected = '', @seriescolumn = '', @typecolumn = '', @startwith = '';
    SET @endto = '', @prefix = '', @length = '', @companyid = 0;
    
    SELECT 
		DS.dbtableaffected, DS.seriescolumn, DS.typecolumn, startwith, endto, prefix, length
		INTO 
		@dbtableaffected, @seriescolumn, @typecolumn, @startwith, @endto, @prefix, @length
	FROM
		docseries DS
	LEFT JOIN financialyeardocseries FYS ON DS.id = FYS.docseriesid
	WHERE
		DS.doccode = p_doccode;
        
    SET @maxid = NULL;
    SET @seriesno = NULL;
    
    -- SET @qery = CONCAT("SELECT id, ", @seriescolumn ," INTO @maxid, @seriesno FROM ", @dbtableaffected, " WHERE companyid = ", p_companyid ," AND NULLIF(" , @seriescolumn , ", '') IS NOT NULL ORDER BY id DESC Limit 1;");
     SET @qery = CONCAT("SELECT id, ", @seriescolumn ," INTO @maxid, @seriesno FROM ", @dbtableaffected, " WHERE companyid = ", p_companyid ," AND FIND_IN_SET(vouchertypeid,", p_vouchertypeid,") ORDER BY id DESC Limit 1;");
    
	PREPARE stmt1 FROM @qery; 
	EXECUTE stmt1; 
	DEALLOCATE PREPARE stmt1; 
    
    SET @maxno = 0;
    SET @isno = 0;
    
    -- select @maxid, @seriesno;
    
    IF(@seriesno IS NOT NULL) THEN
    
		-- select '@seriesno IS NOT NULL';
    
		SELECT REPLACE(CAST(@seriesno as CHAR(100)), @prefix, '') INTO @maxno;
        
        -- select @maxno;
		
        -- Check value is number
		SELECT @maxno REGEXP '^[0-9]+$' INTO @isno;
        
        IF(@isno = 1) THEN -- check is number
        
			-- select '@isno check is number';
        
			SET @incno = (CONVERT(@maxno, UNSIGNED INTEGER) + 1);
           
			IF(@incno >= @startwith AND @incno <= @endto) THEN -- check number is between Start and End number
				
                -- select '@incno >= @startwith AND @incno <= @endto';
                
                -- Set Zeros in series
				SET @zerocount = @length - (CHAR_LENGTH(@prefix) + CHAR_LENGTH(@incno));
                SET @zerostr = '';
				SET @xcnt = 1;
				 WHILE @xcnt  <= @zerocount DO
					SET @zerostr = concat(@zerostr,'0');
				    SET @xcnt = @xcnt + 1; 
				 END WHILE;
                 
				-- select @length, CHAR_LENGTH(@prefix), CHAR_LENGTH(@incno), @incno, @zerostr;
            
				SELECT CONCAT(@prefix, @zerostr, @incno) INTO out_seriesid;
                
                -- select out_seriesid;
            
            END IF;
            
		END IF;

	ELSE
    
		SET @zerocount = @length - (CHAR_LENGTH(@prefix) + CHAR_LENGTH(@startwith));
                 SET @zerostr = '';
				 SET @xcnt = 1;
				 WHILE @xcnt  <= @zerocount DO
					SET @zerostr = concat(@zerostr,'0');
				    SET @xcnt = @xcnt + 1; 
				 END WHILE;
            
			SELECT CONCAT(@prefix, @zerostr, @startwith) INTO out_seriesid;
        
    END IF;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_financialyeardocseries_save`(
   IN p_id INT(11),
   IN p_docseriesid INT,
   IN p_docname VARCHAR(200),
   IN p_doccode VARCHAR(200),
   IN p_length INT,
   IN p_startwith INT,
   IN p_endto INT,
   IN p_prefix VARCHAR(20),
   IN p_financialyearsettingid INT,
   IN p_default INT,
   IN p_userid INT(11),
   IN p_companyid INT(11),
   OUT out_id INT
)
BEGIN

			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO financialyeardocseries
						(`id`,
						`docseriesid`,
						`docname`,
						`doccode`,
						`length`,
						`startwith`,
						`endto`,
						`prefix`,
						`financialyearsettingid`,
						`default`,
						`companyid`,
                        `createdby`,
                        `createddate`)
					VALUES 
							(
							p_id, p_docseriesid, p_docname, p_doccode, p_length, p_startwith,
							p_endto, p_prefix, p_financialyearsettingid, p_default, p_companyid,
                            p_userid, now());
						
			  SET @action = 'INSERT';
			ELSE
			
				UPDATE financialyeardocseries
						SET 
							docseriesid = p_docseriesid,
							docname = p_docname,
							doccode = p_doccode,
							length = p_length,
							startwith = p_startwith,
							endto = p_endto,
							prefix = p_prefix,
							financialyearsettingid = p_financialyearsettingid,
							`default` = p_default,
                            `modifiedby` = p_userid,
                            `modifieddate` = now(),
							companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
                        
                        
				   SET @action = 'UPDATE';     
						
						
			END IF;
			
			SELECT LAST_INSERT_ID() INTO out_id; 
			
		   -- record log
		   -- CALL spc_commonlog_save(p_companyid, 'financialyeardocseries', out_id, @action, p_userid);

	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_financialyeardocseries_search`(
	IN p_financialyearsettingid INT,
    IN p_companyid INT
)
BEGIN

	SELECT
		FDS.id,
        DS.id as docseriesid,
        DS.docname,
        DS.doccode,
        FDS.length,
        FDS.startwith,
        FDS.endto,
        FDS.prefix,
        FDS.financialyearsettingid,
        FDS.`default`,
        CASE WHEN FDS.id IS NULL THEN 'Navigation' ELSE 'Inactive' END AS Navigation
        
	FROM
		docseries DS
	LEFT JOIN financialyeardocseries FDS ON DS.id = docseriesid 
			AND FDS.companyid = p_companyid
			AND FDS.financialyearsettingid = p_financialyearsettingid
    LEFT JOIN financialyearsetting FYS ON FYS.id = FDS.financialyearsettingid;
    	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_financialyearsetting_save`(
   IN p_id INT(11),
   IN p_yearname NVARCHAR(50),
   IN p_yearcode NVARCHAR(20),
   IN p_startfrom DATE,
   IN p_endto DATE,
   IN p_active TINYINT,
   IN p_statusid INT,
   IN p_userid INT(11),
   IN p_companyid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
      SET @errorexists = 0;
    
     if (exists(SELECT id FROM financialyearsetting  where id != case when isnull(p_id) then 0 else p_id end and companyid = p_companyid and active = 1 limit 1) and p_active = 1) then
     SELECT -4 INTO out_id;
     else
    if(p_startfrom < p_endto) then
    if (EXISTS(SELECT * FROM financialyearsetting WHERE companyid = p_companyid AND
		((p_id IS NULL AND (yearname = p_yearname OR yearcode = p_yearcode OR startfrom = p_startfrom))
        OR
        (p_id IS NOT NULL AND (p_id != id AND (yearname = p_yearname OR yearcode = p_yearcode OR startfrom = p_startfrom)))

    ))) THEN
		SET @errorexists = -1;
    
    ELSEIF(EXISTS(SELECT * FROM financialyearsetting WHERE companyid = p_companyid AND
		(p_id IS NULL AND ((p_startfrom BETWEEN startfrom AND endto) OR (p_endto BETWEEN startfrom AND endto)))
       /* OR
        (p_id IS NOT NULL AND (p_id != id AND ((p_startfrom BETWEEN startfrom AND endto) OR (p_endto BETWEEN startfrom AND endto))))
         */
    )) THEN
    
		SET @errorexists = -2;
    
    END IF;
    
    
    IF(@errorexists = 0) THEN
    
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO financialyearsetting 
						(`id`,
						`yearname`,
						`yearcode`,
						`startfrom`,
						`endto`,
						`active`,
						`statusid`,
						`createdby`,
						`createddate`,
						`companyid`)
					VALUES 
						(p_id, p_yearname, p_yearcode, p_startfrom, p_endto, p_active,p_statusid,  p_userid, now(), p_companyid);
						
			  SET @action = 'INSERT';
			ELSE
			
				UPDATE financialyearsetting
						SET yearname = p_yearname,
							yearcode = p_yearcode,
							startfrom = p_startfrom,
							endto = p_endto,
							statusid = p_statusid,
							modifiedby = p_userid,
							modifieddate = now(),
							active = p_active,
							companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
				   SET @action = 'UPDATE';     
						
						
			END IF;
			
			SELECT LAST_INSERT_ID() INTO out_id; 
			
		   -- record log
		   CALL spc_commonlog_save(p_companyid, 'financialyearsetting', out_id, @action, p_userid);

	 ELSE
    
	 SELECT @errorexists INTO out_id;
	 END IF;
     ELSE
    SELECT -3 INTO out_id;
    END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_financialyearsetting_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
		FY.`id`,
		FY.`yearname`,
		FY.`yearcode`,
         DATE_FORMAT(startfrom,'%d/%m/%Y') as startfrom,
         DATE_FORMAT(endto,'%d/%m/%Y') as endto,
		FY.`statusid`,
         REF1.refname as `statusname`,
		FY.`createdby`,
		FY.`createddate`,
		FY.`modifiedby`,
		FY.`modifieddate`,
        FY.`active`,
        FY.`companyid`
	FROM
		financialyearsetting FY
	LEFT JOIN `reference` REF1 ON FY.statusid = REF1.id
	WHERE
		FY.companyid = p_companyid;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_financialyearsetting_select`(
	IN p_id INT
)
BEGIN

	SELECT
		`id`,
		`yearname`,
		`yearcode`,
		 DATE_FORMAT(startfrom,'%d/%m/%Y') as startfrom,
         DATE_FORMAT(endto,'%d/%m/%Y') as endto,
		`statusid`,
		`createdby`,
		`createddate`,
		`modifiedby`,
		`modifieddate`,
        `active`,
        `companyid`
	FROM
		financialyearsetting
	WHERE
		id = p_id;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_financialyearsetting_validyears`(
	IN p_companyid INT
)
BEGIN

	SELECT
		id,
		yearname,
        yearcode,
        DATE_FORMAT(startfrom,'%d/%m/%Y') as startfrom,
        DATE_FORMAT(endto,'%d/%m/%Y') as endto
	FROM
		financialyearsetting
	WHERE
		statusid = 6021; -- 6021 is Open

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_flockanalysislayer_report`(
IN p_fromdate DATE,
IN p_todate DATE,
In p_batchid varchar(100),
IN p_companyid INT)
BEGIN
SET @@sql_mode = '';

DROP TEMPORARY TABLE IF EXISTS tempfloackanalysis;
CREATE TEMPORARY TABLE tempfloackanalysis

select
LB.id as batchid,
LB.itemid as itemid,
LBB.itemid as layeritemid,
LB.batchname,
fnc_getlayerplacementdate(LB.id,p_companyid) as placementdate,
DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY) as lastdate,
fnc_chicks_purchasecost_layer(LB.id,p_companyid,LB.itemid) purcost,
fnc_layerchicks_placementqty(LB.id,p_companyid,LB.itemid)placeqty, 
fun_amortizatiobvalue_forlayer(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY))) as amotizationvalue,
fnc_consumption_wise_cost_before19week(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),1149,p_companyid) as beforefeedconcost,
fnc_consumption_wise_cost_before19week(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),1150,p_companyid)as beforemedcost,
fnc_consumption_wise_cost_before19week(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),1151,p_companyid)as beforevacccost,
fnc_consumption_wise_cost_before19week(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),1152,p_companyid)as beforevitcost,
fnc_consumption_wise_cost_After19week(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),1149,p_companyid) as afterfeedconcost,
fnc_consumption_wise_cost_After19week(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),1150,p_companyid)as aftermedcost,
fnc_consumption_wise_cost_After19week(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),1151,p_companyid)as aftervacccost,
fnc_consumption_wise_cost_After19week(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),1152,p_companyid)as aftervitcost,
fnc_layerbatchwise_salesvalue_after19week(LB.id,725,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),p_companyid)as aftersaleval,
fnc_layerbatchwise_salesvalue(LB.id,725,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),p_companyid)as beforesaleval,
fun_overhed_expbefore19week(LB.id,725,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),p_companyid)as beforeotercost,
fun_overhed_expafter19week(LB.id,725,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),p_companyid)as afterotercost


/*INTO @batchid,@itemid,@layeritemid,@batchname,@placementdate,@lastdate,@purcost,@placeqty,@amotizationvalue,
@beforefeedconcost,@beforemedcost,@beforevacccost,@beforevitcost,@afterfeedconcost,@aftermedcost,@aftervacccost,
@aftervitcost,@aftersaleval,@beforesaleval,@beforeotercost,@afterotercost*/

FROM layerbatchbalance LBB
LEFT JOIN layerbatch LB ON LB.id = LBB.layerbatchid

WHERE find_in_set(LB.id,p_batchid) AND
LB.companyid = p_companyid
group by LBB.id,LBB.itemid;
-- select * from tempfloackanalysis;
select

batchid,itemid,layeritemid,batchname,placementdate,lastdate,purcost,
placeqty,amotizationvalue,beforefeedconcost,beforemedcost,beforevacccost,beforevitcost,
afterfeedconcost,aftermedcost,aftervacccost,aftervitcost,aftersaleval,beforesaleval,beforeotercost,afterotercost,
(purcost*placeqty)as purvalue,
ROUND((((purcost*placeqty)+(beforefeedconcost+afterfeedconcost)+(beforemedcost+aftermedcost)+(beforevacccost+aftervacccost)+(beforevitcost+aftervitcost)+(beforeotercost+afterotercost))
-(amotizationvalue+(aftersaleval+beforesaleval))),3) as balancevalue


 FROM 
 tempfloackanalysis
 group by batchid,itemid;



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_flockanalysis_report`(
IN p_fromdate DATE,
IN p_todate DATE,
In p_batchid varchar(100),
IN p_companyid INT)
BEGIN
SET @@sql_mode = '';

DROP TEMPORARY TABLE IF EXISTS tempfloackanalysis;
CREATE TEMPORARY TABLE tempfloackanalysis

select
BB.id as batchid,
BB.batchname,
fnc_getplacementdate(BB.id,p_companyid) as placementdate,
-- DATE_ADD((fnc_getplacementdate(BB.id,1) as placementdate), INTERVAL 167 DAY) lastdate,
DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL 167 DAY) as lastdate,
fnc_chicks_purchasecost(BB.id,p_companyid,BB.maleitemid) malepurcost,
fnc_chicks_purchasecost(BB.id,p_companyid,BB.femaleitemid) femalepurcost,
fnc_chicks_placementqty(BB.id,p_companyid,BB.maleitemid)maleplaceqty ,
fnc_chicks_placementqty(BB.id,p_companyid,BB.femaleitemid)femaleplaceqty,
fun_amortizatiobvalue_forbreeder(BB.id,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL 167 DAY))) as amotizationvalue,
fnc_consumption_wise_cost_before24week(BB.id,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL 167 DAY)),861,p_companyid) as beforefeedconcost,
fnc_consumption_wise_cost_before24week(BB.id,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL 167 DAY)),862,p_companyid)as beforemedcost,
fnc_consumption_wise_cost_before24week(BB.id,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL 167 DAY)),863,p_companyid)as beforevacccost,
fnc_consumption_wise_cost_before24week(BB.id,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL 167 DAY)),864,p_companyid)as beforevitcost,
fnc_consumption_wise_cost_After24week(BB.id,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL 167 DAY)),861,p_companyid) as afterfeedconcost,
fnc_consumption_wise_cost_After24week(BB.id,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL 167 DAY)),862,p_companyid)as aftermedcost,
fnc_consumption_wise_cost_After24week(BB.id,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL 167 DAY)),863,p_companyid)as aftervacccost,
fnc_consumption_wise_cost_After24week(BB.id,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL 167 DAY)),864,p_companyid)as aftervitcost,
fnc_breederbatchwise_salesvalue_after24week(BB.id,721,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL 167 DAY)),p_companyid)as aftersaleval,
fnc_breederbatchwise_salesvalue(BB.id,721,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL 167 DAY)),p_companyid)as beforesaleval,
fun_overhed_expbefore24week(BB.id,721,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL 167 DAY)),p_companyid)as beforeotercost,
fun_overhed_expafter24week(BB.id,721,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL 167 DAY)),p_companyid)as afterotercost


INTO @batchid,@batchname,@placementdate,@lastdate,@malepurcost,@femalepurcost,
@maleplaceqty,@femaleplaceqty,@amotizationvalue,@beforefeedconcost,@beforemedcost,@beforevacccost,@beforevitcost,
@afterfeedconcost,@aftermedcost,@aftervacccost,@aftervitcost,@aftersaleval,@beforesaleval,@beforeotercost,@afterotercost

FROM breederbatchbalance BBB
 LEFT JOIN breederbatch BB ON BB.id = BBB.breederbatchid
 LEFT JOIN item I ON I.id = BBB.itemid

WHERE find_in_set(BB.id,p_batchid) AND
BB.companyid = p_companyid;

select

batchname,placementdate,lastdate,malepurcost,femalepurcost,
maleplaceqty,femaleplaceqty,amotizationvalue,beforefeedconcost,beforemedcost,beforevacccost,beforevitcost,
afterfeedconcost,aftermedcost,aftervacccost,aftervitcost,aftersaleval,beforesaleval,beforeotercost,afterotercost,
(malepurcost*maleplaceqty)as malepurvalue,(femalepurcost*femaleplaceqty)as femalepurvalue,
((malepurcost*maleplaceqty)+(femalepurcost*femaleplaceqty))as purvalue,
ROUND((((((malepurcost*maleplaceqty)+(femalepurcost*femaleplaceqty)))+(beforefeedconcost+afterfeedconcost)+(beforemedcost+aftermedcost)+(beforevacccost+aftervacccost)+(beforevitcost+aftervitcost)+(beforeotercost+afterotercost))
-(amotizationvalue+(aftersaleval+beforesaleval))),3) as balancevalue


 FROM 
 tempfloackanalysis;



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_flockanlysislayer_reportpartone`(
IN p_fromdate DATE,
IN p_todate DATE,
In p_batchid varchar(100),
IN p_companyid INT)
BEGIN

SET @@sql_mode = '';

	select LB.id as layerbatchid,
    LB.batchname,
    L.locationname,
    LB.locationid,
    (DATEDIFF(p_todate,(fnc_getlayerplacementdate(LB.id,p_companyid)))) as ageindays,
    DATE_FORMAT((fnc_layer_getlasttransactiondate(LB.id)) ,'%d/%m/%Y') as aslastdate, 
	DATE_FORMAT((fnc_getlayerplacementdate(LB.id,p_companyid)) ,'%d/%m/%Y') as pldate,
	ROUND(fnc_layerchicks_placementqty(LB.id,p_companyid,LB.itemid),3) as paqty ,
	ROUND(fnc_layerbatchwise_birdliveqty(LB.id,LB.itemid,(SELECT fnc_layer_getlasttransactiondate(LB.id)),p_companyid),3) as liveqty,
    
    ROUND(IFNULL(fnc_layer_batchwise_cullsandmortality(LB.id,LB.itemid,(SELECT fnc_layer_getlasttransactiondate(LB.id)),p_companyid),0),3) as mor
	FROM layerbatch LB
    LEFT JOIN location L ON L.id = LB.locationid
		
	WHERE find_in_set(LB.id,p_batchid) AND
    LB.companyid = p_companyid
    group by LB.id,LB.itemid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_flockanlysis_reportpartone`(
IN p_fromdate DATE,
IN p_todate DATE,
In p_batchid varchar(100),
IN p_companyid INT)
BEGIN

SET @@sql_mode = '';
	select BB.breederbatchid,
    BB.itemid,
    B.maleitemid,
    B.femaleitemid,
    B.batchname,
    L.locationname,
    B.locationid,
    (DATEDIFF(p_todate,(fnc_getplacementdate(BB.breederbatchid,p_companyid)))) as ageindays,
   -- DATE_ADD(DATEDIFF(p_todate,(fnc_getplacementdate(BB.breederbatchid,p_companyid))),INTERVAL 1 DAY) as ageindays
    -- fnc_breeder_getlasttransactiondate(BB.breederbatchid) aslastdate,
    DATE_FORMAT((fnc_breeder_getlasttransactiondate(BB.breederbatchid)) ,'%d/%m/%Y') as aslastdate, 
	DATE_FORMAT((fnc_getplacementdate(BB.breederbatchid,p_companyid)) ,'%d/%m/%Y') as pldate,
    -- fnc_getplacementdate(BB.breederbatchid,p_companyid) as pldate,
    
    
	fnc_chicks_placementqty(BB.breederbatchid,p_companyid,BB.itemid) as paqty ,
	fnc_breeder_batchwise_birdliveqty(BB.breederbatchid,BB.itemid,fnc_breeder_getlasttransactiondate(BB.breederbatchid),p_companyid) as liveqty,
    IFNULL(fnc_breeder_batchwise_cullsandmortality(BB.breederbatchid,BB.itemid,fnc_breeder_getlasttransactiondate(BB.breederbatchid),p_companyid),0) as mor
	FROM breederbatchbalance BB
    LEFT JOIN breederbatch B ON B.id = BB.breederbatchid
    LEFT JOIN location L ON L.id = B.locationid
		
	WHERE find_in_set(BB.breederbatchid,p_batchid) AND
    BB.companyid = p_companyid
    group by BB.breederbatchid,BB.itemid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_flockgatherlayer_report`(
 IN p_batchid varchar(255),
 IN p_companyid INT
 )
BEGIN
	SET @@sql_mode = ' ';
    SET @warehousebinids = null;
    
		SELECT 
		GROUP_CONCAT(LS.warehousebinid SEPARATOR ', ') INTO @warehousebinids
		FROM layerbatchbalance LBB
		LEFT JOIN layershed LS ON LS.id = LBB.layershedid
		WHERE find_in_set(layerbatchid ,p_batchid);
        
        SELECT  
		feeditemgroupids,medicineitemgroupids,
		vaccineitemgroupids,vitaminitemgroupids,
        chicksitemgroupids
		INTO @feeditemgroupids,@medicineitemgroupids,
		@vaccineitemgroupids, @vitaminitemgroupids,
        @chicksitemgroupids
        
	FROM
		layersetting
        
        WHERE 
			companyid = p_companyid limit 1;

DROP TEMPORARY TABLE IF EXISTS chicksdetail;
CREATE TEMPORARY TABLE chicksdetail
(
grpono VARCHAR(200),
suppliername VARCHAR(200),
purchasedate TEXT,
placementdate TEXT,
quantity INT(200),
freequantity INT(200),
placeqty INT(200),
unitprice INT(200),
amount INT(200),
itemid INT(200),
itemname VARCHAR(200)
);


drop table if exists t;
create table t( txt text );
insert into t values(p_batchid);
-- select * from t;
drop temporary table if exists temp;
create temporary table temp( val char(255) );
set @sql = concat("insert into temp (val) values ('", replace(( select group_concat(distinct txt) as data from t), ",", "'),('"),"');");
prepare stmt1 from @sql;
execute stmt1;
-- select * from t;
SET @counter= 1;
SET @noofitem = (select count(*) from temp); 
-- select @noofitem;
SET SQL_SAFE_UPDATES=0;
 WHILE @noofitem >  0 DO 
 SET @val = (select distinct(ltrim(rtrim(val))) from temp order by  val  limit 1);
IF EXISTS(SELECT breederbatchid FROM breederbatchplacement WHERE breederbatchid = @val)THEN

INSERT INTO chicksdetail 
SELECT 
		   GP.grpono,
           P.partyname as suppliername, 
		   DATE_FORMAT(GP.grpodate,'%d/%m/%Y') as purchasedate,
		   DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as placementdate,
		   GPD.quantity,
           GPD.freequantity,
		   LBPD.quantity as placeqty,
		   GPD.unitprice,
		   (GPD.quantity* GPD.unitprice)as amount,
           LBPD.itemid,
           I.itemname
	FROM layerbatchplacement LBP
    LEFT JOIN layerbatchplacementdetail LBPD ON LBPD.layerbatchplacementid = LBP.id
	LEFT JOIN grpo GP ON LBP.grpono = GP.id 
    LEFT JOIN grpodetail GPD ON GPD.grpoid = GP.id and GPD.itemid = LBPD.itemid
    LEFT JOIN party P ON P.id = GP.supplierid
    LEFT JOIN item I ON I.id = LBPD.itemid
    
    WHERE FIND_IN_SET(LBP.layerbatchid,p_batchid) 
    group by LBP.layerbatchid,LBPD.itemid;
    
  ELSE 

insert into chicksdetail
  select 
		
        '-' as grpono,
        '-' as suppliername,
		DATE_FORMAT(LBO.batchplacementdate,'%d/%m/%Y') as purchasedate,
		DATE_FORMAT(LBO.batchplacementdate,'%d/%m/%Y') as placementdate,
        LBOD.placeqty as quantity,
        0 as freequantity,
		LBOD.placeqty, 
        LBOD.rate as unitprice,
        LBOD.birdvalue as amount,
        LBOD.itemid,
        I.itemname

from layer_batchopening_balance LBO
LEFT JOIN layer_batchbridopeningbalance_detail LBOD ON LBOD.layerbatchopeningid = LBO.id
LEFT JOIN item I ON  I.id = LBOD.itemid
WHERE FIND_IN_SET(LBO.layerbatchid,p_batchid)
group by LBO.layerbatchid,LBOD.itemid;
END IF;
delete from temp where val = @val;
SET @noofitem = @noofitem-1;
END while;

select * from chicksdetail;  
SET @itemgroupid = concat(@medicineitemgroupids, ',',@vaccineitemgroupids, ',',@vitaminitemgroupids);
SET @allitemgroupid = concat(@feeditemgroupids,',',@medicineitemgroupids, ',',@vaccineitemgroupids, ',',@vitaminitemgroupids);

-- select @itemgroupid;
  
        
DROP TEMPORARY TABLE IF EXISTS feeddetail;
CREATE TEMPORARY TABLE feeddetail

select 
PI.purchaseinvoiceno,
DATE_FORMAT(PI.invoicedate,'%d/%m/%Y') as invoicedate,
P.partyname,
PI.towarehousebinid,
PID.itemname,
PID.quantity,
PID.freequantity,
PID.unitprice,
(PID.quantity*PID.unitprice)as amount

from  purchaseinvoice PI
LEFT JOIN purchaseinvoicedetail PID ON PID.purchaseinvoiceid = PI.id
LEFT JOIN party P ON P.id  = PI.vendorid
LEFT JOIN item I ON I.id = PID.itemid
where FIND_IN_SET(PI.towarehousebinid,@warehousebinids)
AND FIND_IN_SET(I.itemgroupid,@feeditemgroupids) 
Group By PI.id,PID.id;

select * from feeddetail;


DROP TEMPORARY TABLE IF EXISTS MedicineVaccine;
CREATE TEMPORARY TABLE MedicineVaccine

select 
PI.purchaseinvoiceno,
DATE_FORMAT(PI.invoicedate,'%d/%m/%Y') as invoicedate,
P.partyname,
PI.towarehousebinid,
PID.itemname,
PID.quantity,
PID.freequantity,
PID.unitprice,
(PID.quantity*PID.unitprice)as amount

from  purchaseinvoice PI
LEFT JOIN purchaseinvoicedetail PID ON PID.purchaseinvoiceid = PI.id
LEFT JOIN party P ON P.id  = PI.vendorid
LEFT JOIN item I ON I.id = PID.itemid
where FIND_IN_SET(PI.towarehousebinid,@warehousebinids)
AND FIND_IN_SET(I.itemgroupid,@itemgroupid) 
Group By PI.id,PID.id;

select * from MedicineVaccine;

DROP TEMPORARY TABLE IF EXISTS itemstable1;
CREATE TEMPORARY TABLE itemstable1

SELECT    -- MM.id,
          -- DATE_FORMAT(MM.transactiondate,'%d/%m/%Y') as date,
           MM.itemid,
           I.itemname,
           SUM(MM.quantity) as inquantity,
		   IFNUll(ROUND((SUM(MM.itemvalue)/SUM(MM.quantity)),2),0) as inunitcost,
           SUM(MM.itemvalue) as inamount
           
	FROM materialmovement MM
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    
    WHERE FIND_IN_SET(MM.towarehousebinid,@warehousebinids)
    AND FIND_IN_SET(I.itemgroupid,@allitemgroupid) 
    AND FIND_IN_SET(MM.transactiontypeid,'681,682')
	group by itemid;  
    
 --   select * from itemstable1;
    
DROP TEMPORARY TABLE IF EXISTS itemstable2;
CREATE TEMPORARY TABLE itemstable2

SELECT    -- MM.id,
          -- DATE_FORMAT(MM.transactiondate,'%d/%m/%Y') as date,
           MM.itemid,
         --  I.itemname,
           SUM(MM.quantity) as outquantity,
		   IFNUll(ROUND((SUM(MM.itemvalue)/SUM(MM.quantity)),2),0) as outunitcost,
           SUM(MM.itemvalue) as outamount
           
	FROM materialmovement MM
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    
    WHERE FIND_IN_SET(MM.fromwarehousebinid,@warehousebinids)
    AND FIND_IN_SET(I.itemgroupid,@allitemgroupid) 
    AND FIND_IN_SET(MM.transactiontypeid,'682')
	group by itemid;  
    
    
DROP TEMPORARY TABLE IF EXISTS itemstable3;
CREATE TEMPORARY TABLE itemstable3

SELECT     
           MM.itemid,
          -- I.itemname,
           SUM(MM.quantity) as consumedqty
		  -- IFNUll(ROUND((SUM(MM.itemvalue)/SUM(MM.quantity)),2),0) as outunitcost,
          -- SUM(MM.itemvalue) as outamount
           
	FROM materialmovement MM
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    
    WHERE FIND_IN_SET(MM.fromwarehousebinid,@warehousebinids)
    AND FIND_IN_SET(I.itemgroupid,@allitemgroupid) 
    AND FIND_IN_SET(MM.transactiontypeid,'683')
	group by itemid;  
    
    select * from itemstable1 T1
    LEFT JOIN itemstable2  T2  ON T2.itemid= T1.itemid
	LEFT JOIN itemstable3  T3  ON T3.itemid= T2.itemid and T3.itemid=T1.itemid;
    
    
DROP TEMPORARY TABLE IF EXISTS birdsale;
CREATE TEMPORARY TABLE birdsale

select 
SI.salesinvoiceno,
DATE_FORMAT(SI.salesinvoicedate,'%d/%m/%Y') as invoicedate,
P.partyname,
SID.warehousebinid,
I.itemname,
SID.itemid,
SID.quantity,
SID.weight,
SID.unitprice,
(SID.quantity*SID.unitprice)as amount

from  salesinvoice SI
LEFT JOIN salesinvoicedetail SID ON SID.salesinvoiceid = SI.id
LEFT JOIN party P ON P.id  = SI.customerid
LEFT JOIN item I ON I.id = SID.itemid
where FIND_IN_SET(SID.warehousebinid,@warehousebinids)
AND FIND_IN_SET(I.itemgroupid,@chicksitemgroupids) 
Group By SI.id,SID.id;

select * from birdsale;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_flockgather_report`(
 IN p_batchid varchar(255),
 IN p_companyid INT
 )
BEGIN
	SET @@sql_mode = ' ';
    SET @warehousebinids = null;
    
		SELECT 
		GROUP_CONCAT(BS.warehousebinid SEPARATOR ', ') INTO @warehousebinids
		FROM breederbatchbalance BBB
		LEFT JOIN breedershed BS ON BS.id = BBB.breedershedid
		WHERE find_in_set(breederbatchid ,p_batchid);
        
        SELECT  
		feeditemgroupids,medicineitemgroupids,
		vaccineitemgroupids,vitaminitemgroupids,
        chicksitemgroupids
		INTO @feeditemgroupids,@medicineitemgroupids,
		@vaccineitemgroupids, @vitaminitemgroupids,
        @chicksitemgroupids
        
	FROM
		breedersetting
        
        WHERE 
			companyid = p_companyid limit 1;

DROP TEMPORARY TABLE IF EXISTS chicksdetail;
CREATE TEMPORARY TABLE chicksdetail
(
grpono VARCHAR(200),
suppliername VARCHAR(200),
purchasedate TEXT,
placementdate TEXT,
quantity INT(200),
freequantity INT(200),
placeqty INT(200),
unitprice INT(200),
amount INT(200),
itemid INT(200),
itemname VARCHAR(200)
);


drop table if exists t;
create table t( txt text );
insert into t values(p_batchid);
-- select * from t;
drop temporary table if exists temp;
create temporary table temp( val char(255) );
set @sql = concat("insert into temp (val) values ('", replace(( select group_concat(distinct txt) as data from t), ",", "'),('"),"');");
prepare stmt1 from @sql;
execute stmt1;
-- select * from t;
SET @counter= 1;
SET @noofitem = (select count(*) from temp); 
-- select @noofitem;
SET SQL_SAFE_UPDATES=0;
 WHILE @noofitem >  0 DO 
 SET @val = (select distinct(ltrim(rtrim(val))) from temp order by  val  limit 1);
IF EXISTS(SELECT breederbatchid FROM breederbatchplacement WHERE breederbatchid = @val)THEN

INSERT INTO chicksdetail 
SELECT 
		   GP.grpono,
           P.partyname as suppliername, 
           -- GP.grpodate as  purchasedate,
           -- BBP.placementdate as placementdate,
		   DATE_FORMAT(GP.grpodate,'%d/%m/%Y') as purchasedate,
		   DATE_FORMAT(BBP.placementdate,'%d/%m/%Y') as placementdate,
		   GPD.quantity,
           GPD.freequantity,
		   BBPD.quantity as placeqty,
		   GPD.unitprice,
		   (GPD.quantity* GPD.unitprice)as amount,
           BBPD.itemid,
           I.itemname
	FROM breederbatchplacement BBP
    LEFT JOIN breederbatchplacementdetail BBPD ON BBPD.breederbatchplacementid = BBP.id
	LEFT JOIN grpo GP ON BBP.grpono = GP.id 
    LEFT JOIN grpodetail GPD ON GPD.grpoid = GP.id and GPD.itemid = BBPD.itemid
    LEFT JOIN party P ON P.id = GP.supplierid
    LEFT JOIN item I ON I.id = BBPD.itemid
    
    WHERE FIND_IN_SET(BBP.breederbatchid,p_batchid) 
    group by BBP.breederbatchid,BBPD.itemid;
    
  ELSE 

insert into chicksdetail
  select 
		
        '-' as grpono,
        '-' as suppliername,
		DATE_FORMAT(BBO.batchplacementdate,'%d/%m/%Y') as purchasedate,
		DATE_FORMAT(BBO.batchplacementdate,'%d/%m/%Y') as placementdate,
        BBOD.placeqty as quantity,
        0 as freequantity,
		BBOD.placeqty, 
        BBOD.rate as unitprice,
        BBOD.birdvalue as amount,
        BBOD.itemid,
        I.itemname

from breederbatchopening BBO
LEFT JOIN breederbatchmalefemaleopeningdetail BBOD ON BBOD.breederbatchopeningid = BBO.id
LEFT JOIN item I ON  I.id = BBOD.itemid
WHERE FIND_IN_SET(BBO.breederbatchid,p_batchid)
group by BBO.breederbatchid,BBOD.itemid;
END IF;
delete from temp where val = @val;
SET @noofitem = @noofitem-1;
END while;

select * from chicksdetail;  
SET @itemgroupid = concat(@medicineitemgroupids, ',',@vaccineitemgroupids, ',',@vitaminitemgroupids);
SET @allitemgroupid = concat(@feeditemgroupids,',',@medicineitemgroupids, ',',@vaccineitemgroupids, ',',@vitaminitemgroupids);

-- select @itemgroupid;
  
        
DROP TEMPORARY TABLE IF EXISTS feeddetail;
CREATE TEMPORARY TABLE feeddetail

select 
PI.purchaseinvoiceno,
DATE_FORMAT(PI.invoicedate,'%d/%m/%Y') as invoicedate,
P.partyname,
PI.towarehousebinid,
PID.itemname,
PID.quantity,
PID.freequantity,
PID.unitprice,
(PID.quantity*PID.unitprice)as amount

from  purchaseinvoice PI
LEFT JOIN purchaseinvoicedetail PID ON PID.purchaseinvoiceid = PI.id
LEFT JOIN party P ON P.id  = PI.vendorid
LEFT JOIN item I ON I.id = PID.itemid
where FIND_IN_SET(PI.towarehousebinid,@warehousebinids)
AND FIND_IN_SET(I.itemgroupid,@feeditemgroupids) 
Group By PI.id,PID.id;

select * from feeddetail;


DROP TEMPORARY TABLE IF EXISTS MedicineVaccine;
CREATE TEMPORARY TABLE MedicineVaccine

select 
PI.purchaseinvoiceno,
DATE_FORMAT(PI.invoicedate,'%d/%m/%Y') as invoicedate,
P.partyname,
PI.towarehousebinid,
PID.itemname,
PID.quantity,
PID.freequantity,
PID.unitprice,
(PID.quantity*PID.unitprice)as amount

from  purchaseinvoice PI
LEFT JOIN purchaseinvoicedetail PID ON PID.purchaseinvoiceid = PI.id
LEFT JOIN party P ON P.id  = PI.vendorid
LEFT JOIN item I ON I.id = PID.itemid
where FIND_IN_SET(PI.towarehousebinid,@warehousebinids)
AND FIND_IN_SET(I.itemgroupid,@itemgroupid) 
Group By PI.id,PID.id;

select * from MedicineVaccine;

DROP TEMPORARY TABLE IF EXISTS itemstable1;
CREATE TEMPORARY TABLE itemstable1

SELECT    -- MM.id,
          -- DATE_FORMAT(MM.transactiondate,'%d/%m/%Y') as date,
           MM.itemid,
           I.itemname,
           SUM(MM.quantity) as inquantity,
		   IFNUll(ROUND((SUM(MM.itemvalue)/SUM(MM.quantity)),2),0) as inunitcost,
           SUM(MM.itemvalue) as inamount
           
	FROM materialmovement MM
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    
    WHERE FIND_IN_SET(MM.towarehousebinid,@warehousebinids)
    AND FIND_IN_SET(I.itemgroupid,@allitemgroupid) 
    AND FIND_IN_SET(MM.transactiontypeid,'681,682')
	group by itemid;  
    
 --   select * from itemstable1;
    
DROP TEMPORARY TABLE IF EXISTS itemstable2;
CREATE TEMPORARY TABLE itemstable2

SELECT    -- MM.id,
          -- DATE_FORMAT(MM.transactiondate,'%d/%m/%Y') as date,
           MM.itemid,
         --  I.itemname,
           SUM(MM.quantity) as outquantity,
		   IFNUll(ROUND((SUM(MM.itemvalue)/SUM(MM.quantity)),2),0) as outunitcost,
           SUM(MM.itemvalue) as outamount
           
	FROM materialmovement MM
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    
    WHERE FIND_IN_SET(MM.fromwarehousebinid,@warehousebinids)
    AND FIND_IN_SET(I.itemgroupid,@allitemgroupid) 
    AND FIND_IN_SET(MM.transactiontypeid,'682')
	group by itemid;  
    
    
DROP TEMPORARY TABLE IF EXISTS itemstable3;
CREATE TEMPORARY TABLE itemstable3

SELECT     
           MM.itemid,
          -- I.itemname,
           SUM(MM.quantity) as consumedqty
		  -- IFNUll(ROUND((SUM(MM.itemvalue)/SUM(MM.quantity)),2),0) as outunitcost,
          -- SUM(MM.itemvalue) as outamount
           
	FROM materialmovement MM
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    
    WHERE FIND_IN_SET(MM.fromwarehousebinid,@warehousebinids)
    AND FIND_IN_SET(I.itemgroupid,@allitemgroupid) 
    AND FIND_IN_SET(MM.transactiontypeid,'683')
	group by itemid;  
    
    select * from itemstable1 T1
    LEFT JOIN itemstable2  T2  ON T2.itemid= T1.itemid
	LEFT JOIN itemstable3  T3  ON T3.itemid= T2.itemid and T3.itemid=T1.itemid;
    
    
DROP TEMPORARY TABLE IF EXISTS birdsale;
CREATE TEMPORARY TABLE birdsale

select 
SI.salesinvoiceno,
DATE_FORMAT(SI.salesinvoicedate,'%d/%m/%Y') as invoicedate,
P.partyname,
SID.warehousebinid,
I.itemname,
SID.itemid,
SID.quantity,
SID.weight,
SID.unitprice,
(SID.quantity*SID.unitprice)as amount

from  salesinvoice SI
LEFT JOIN salesinvoicedetail SID ON SID.salesinvoiceid = SI.id
LEFT JOIN party P ON P.id  = SI.customerid
LEFT JOIN item I ON I.id = SID.itemid
where FIND_IN_SET(SID.warehousebinid,@warehousebinids)
AND FIND_IN_SET(I.itemgroupid,@chicksitemgroupids) 
Group By SI.id,SID.id;

select * from birdsale;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_flockgather_reportne`(
 IN p_batchid INT,
 IN p_companyid INT
 )
BEGIN
	SET @@sql_mode = ' ';
	SET @feeditemgroupids = null;
	SET @medicineitemgroupids = null;
	SET @vaccineitemgroupids = null;
	SET @vitaminitemgroupids = null;
    SET @chicksitemgroupids = null;
    SET @warehousebinids = null;
    SELECT  
		feeditemgroupids,medicineitemgroupids,
		vaccineitemgroupids,vitaminitemgroupids,
        chicksitemgroupids
		INTO @feeditemgroupids,@medicineitemgroupids,
		@vaccineitemgroupids, @vitaminitemgroupids,
        @chicksitemgroupids
        
	FROM
		breedersetting
        
        WHERE 
			companyid = p_companyid limit 1;
            
		SELECT 
		GROUP_CONCAT(BS.warehousebinid SEPARATOR ', ') INTO @warehousebinids
		FROM breederbatchbalance BBB
		LEFT JOIN breedershed BS ON BS.id = BBB.breedershedid
		WHERE BBB.breederbatchid = p_batchid;
    	
	-- select @warehousebinids;
    SET @itemgroupid = concat(@feeditemgroupids,',',@medicineitemgroupids, ',',@vaccineitemgroupids, ',',@vitaminitemgroupids, ',',@chicksitemgroupids);
   -- select @itemgroupid;
 
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1

	SELECT MM.id,
		   GPD.itemid as itemid1,
           (GPD.quantity-GPD.freequantity) as grpoqty,
           GPD.freequantity,
           DATE_FORMAT(MM.transactiondate,'%d/%m/%Y') as date,
           MM.itemid,
          -- I.itemgroupid,
           I.itemname,
          -- I.id as itemid1,
           SUM(MM.quantity) as quantity,
           IFNULL(ROUND((SUM(MM.itemvalue)/SUM((GPD.quantity-GPD.freequantity))),2),0) as unitcost,
           MM.itemvalue as ammount
           -- CONCAT(IG.groupname ,' In') as groupname
           
	FROM grpo GP
	LEFT JOIN grpodetail GPD ON GPD.grpoid = GP.id  and FIND_IN_SET(GP.towarehousebinid,@warehousebinids)
    LEFT JOIN materialmovement MM ON GPD.itemid = MM.itemid 
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    
    WHERE FIND_IN_SET(MM.towarehousebinid,@warehousebinids)
    AND FIND_IN_SET(I.itemgroupid,@itemgroupid) 
    AND FIND_IN_SET(MM.transactiontypeid,'681,682')
    group by MM.itemid;     
   
  select * from tempmortality1;  
    -- out material
        
	SET @itemgroupid = concat(@feeditemgroupids,',',@medicineitemgroupids, ',',@vaccineitemgroupids, ',',@vitaminitemgroupids, ',',@chicksitemgroupids);
  
        
	SELECT MM.id,
           DATE_FORMAT(MM.transactiondate,'%d/%m/%Y') as date,
           MM.itemid,
           I.itemgroupid,
           I.itemname,
           SUM(MM.quantity) as quantity,
		    IFNUll(ROUND((SUM(MM.itemvalue)/SUM(MM.quantity)),2),0) as unitcost,
           ROUND(MM.itemvalue) as ammount,
           CONCAT(IG.groupname ,' Out') as groupname
           
	FROM materialmovement MM
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    
    WHERE FIND_IN_SET(MM.fromwarehousebinid,@warehousebinids)
    AND FIND_IN_SET(I.itemgroupid,@itemgroupid) AND
    FIND_IN_SET(transactiontypeid,'682')
    
   group by MM.transactiondate,itemid;  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_flockgather_reportrial`(
 IN p_batchid varchar(255),
 IN p_companyid INT
 )
BEGIN
	SET @@sql_mode = ' ';
    SET @warehousebinids = null;
    
		SELECT 
		GROUP_CONCAT(BS.warehousebinid SEPARATOR ', ') INTO @warehousebinids
		FROM breederbatchbalance BBB
		LEFT JOIN breedershed BS ON BS.id = BBB.breedershedid
		WHERE find_in_set(breederbatchid ,p_batchid);
        
        SELECT  
		feeditemgroupids,medicineitemgroupids,
		vaccineitemgroupids,vitaminitemgroupids,
        chicksitemgroupids
		INTO @feeditemgroupids,@medicineitemgroupids,
		@vaccineitemgroupids, @vitaminitemgroupids,
        @chicksitemgroupids
        
	FROM
		breedersetting
        
        WHERE 
			companyid = p_companyid limit 1;

DROP TEMPORARY TABLE IF EXISTS chicksdetail;
CREATE TEMPORARY TABLE chicksdetail
(
grpono VARCHAR(200),
suppliername VARCHAR(200),
purchasedate TEXT,
placementdate TEXT,
quantity INT(200),
freequantity INT(200),
placeqty INT(200),
unitprice INT(200),
amount INT(200),
itemid INT(200),
itemname VARCHAR(200)
);


drop table if exists t;
create table t( txt text );
insert into t values(p_batchid);
-- select * from t;
drop temporary table if exists temp;
create temporary table temp( val char(255) );
set @sql = concat("insert into temp (val) values ('", replace(( select group_concat(distinct txt) as data from t), ",", "'),('"),"');");
prepare stmt1 from @sql;
execute stmt1;
-- select * from t;
SET @counter= 1;
SET @noofitem = (select count(*) from temp); 
-- select @noofitem;
SET SQL_SAFE_UPDATES=0;
 WHILE @noofitem >  0 DO 
 SET @val = (select distinct(ltrim(rtrim(val))) from temp order by  val  limit 1);
IF EXISTS(SELECT breederbatchid FROM breederbatchplacement WHERE breederbatchid = @val)THEN

INSERT INTO chicksdetail 
SELECT 
		   GP.grpono,
           P.partyname as suppliername, 
           -- GP.grpodate as  purchasedate,
           -- BBP.placementdate as placementdate,
		   DATE_FORMAT(GP.grpodate,'%d/%m/%Y') as purchasedate,
		   DATE_FORMAT(BBP.placementdate,'%d/%m/%Y') as placementdate,
		   GPD.quantity,
           GPD.freequantity,
		   BBPD.quantity as placeqty,
		   GPD.unitprice,
		   (GPD.quantity* GPD.unitprice)as amount,
           BBPD.itemid,
           I.itemname
	FROM breederbatchplacement BBP
    LEFT JOIN breederbatchplacementdetail BBPD ON BBPD.breederbatchplacementid = BBP.id
	LEFT JOIN grpo GP ON BBP.grpono = GP.id 
    LEFT JOIN grpodetail GPD ON GPD.grpoid = GP.id and GPD.itemid = BBPD.itemid
    LEFT JOIN party P ON P.id = GP.supplierid
    LEFT JOIN item I ON I.id = BBPD.itemid
    
    WHERE FIND_IN_SET(BBP.breederbatchid,p_batchid) 
    group by BBP.breederbatchid,BBPD.itemid;
    
  ELSE 

insert into chicksdetail
  select 
		
        '-' as grpono,
        '-' as suppliername,
		DATE_FORMAT(BBO.batchplacementdate,'%d/%m/%Y') as purchasedate,
		DATE_FORMAT(BBO.batchplacementdate,'%d/%m/%Y') as placementdate,
        BBOD.placeqty as quantity,
        0 as freequantity,
		BBOD.placeqty, 
        BBOD.rate as unitprice,
        BBOD.birdvalue as amount,
        BBOD.itemid,
        I.itemname

from breederbatchopening BBO
LEFT JOIN breederbatchmalefemaleopeningdetail BBOD ON BBOD.breederbatchopeningid = BBO.id
LEFT JOIN item I ON  I.id = BBOD.itemid
WHERE FIND_IN_SET(BBO.breederbatchid,p_batchid)
group by BBO.breederbatchid,BBOD.itemid;
END IF;
delete from temp where val = @val;
SET @noofitem = @noofitem-1;
END while;

select * from chicksdetail;  
SET @itemgroupid = concat(@medicineitemgroupids, ',',@vaccineitemgroupids, ',',@vitaminitemgroupids);
SET @allitemgroupid = concat(@feeditemgroupids,',',@medicineitemgroupids, ',',@vaccineitemgroupids, ',',@vitaminitemgroupids);

-- select @itemgroupid;
  
        
DROP TEMPORARY TABLE IF EXISTS feeddetail;
CREATE TEMPORARY TABLE feeddetail

select 
PI.purchaseinvoiceno,
DATE_FORMAT(PI.invoicedate,'%d/%m/%Y') as invoicedate,
P.partyname,
PI.towarehousebinid,
PID.itemname,
PID.quantity,
PID.freequantity,
PID.unitprice,
(PID.quantity*PID.unitprice)as amount

from  purchaseinvoice PI
LEFT JOIN purchaseinvoicedetail PID ON PID.purchaseinvoiceid = PI.id
LEFT JOIN party P ON P.id  = PI.vendorid
LEFT JOIN item I ON I.id = PID.itemid
where FIND_IN_SET(PI.towarehousebinid,@warehousebinids)
AND FIND_IN_SET(I.itemgroupid,@feeditemgroupids) 
Group By PI.id,PID.id;

select * from feeddetail;


DROP TEMPORARY TABLE IF EXISTS MedicineVaccine;
CREATE TEMPORARY TABLE MedicineVaccine

select 
PI.purchaseinvoiceno,
DATE_FORMAT(PI.invoicedate,'%d/%m/%Y') as invoicedate,
P.partyname,
PI.towarehousebinid,
PID.itemname,
PID.quantity,
PID.freequantity,
PID.unitprice,
(PID.quantity*PID.unitprice)as amount

from  purchaseinvoice PI
LEFT JOIN purchaseinvoicedetail PID ON PID.purchaseinvoiceid = PI.id
LEFT JOIN party P ON P.id  = PI.vendorid
LEFT JOIN item I ON I.id = PID.itemid
where FIND_IN_SET(PI.towarehousebinid,@warehousebinids)
AND FIND_IN_SET(I.itemgroupid,@itemgroupid) 
Group By PI.id,PID.id;

select * from MedicineVaccine;

DROP TEMPORARY TABLE IF EXISTS itemstable1;
CREATE TEMPORARY TABLE itemstable1

SELECT    -- MM.id,
          -- DATE_FORMAT(MM.transactiondate,'%d/%m/%Y') as date,
           MM.itemid,
           I.itemname,
           SUM(MM.quantity) as inquantity,
		   IFNUll(ROUND((SUM(MM.itemvalue)/SUM(MM.quantity)),2),0) as inunitcost,
           SUM(MM.itemvalue) as inamount
           
	FROM materialmovement MM
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    
    WHERE FIND_IN_SET(MM.towarehousebinid,@warehousebinids)
    AND FIND_IN_SET(I.itemgroupid,@allitemgroupid) 
    AND FIND_IN_SET(MM.transactiontypeid,'681,682')
	group by itemid;  
    
 --   select * from itemstable1;
    
DROP TEMPORARY TABLE IF EXISTS itemstable2;
CREATE TEMPORARY TABLE itemstable2

SELECT    -- MM.id,
          -- DATE_FORMAT(MM.transactiondate,'%d/%m/%Y') as date,
           MM.itemid,
         --  I.itemname,
           SUM(MM.quantity) as outquantity,
		   IFNUll(ROUND((SUM(MM.itemvalue)/SUM(MM.quantity)),2),0) as outunitcost,
           SUM(MM.itemvalue) as outamount
           
	FROM materialmovement MM
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    
    WHERE FIND_IN_SET(MM.fromwarehousebinid,@warehousebinids)
    AND FIND_IN_SET(I.itemgroupid,@allitemgroupid) 
    AND FIND_IN_SET(MM.transactiontypeid,'682')
	group by itemid;  
    
    
DROP TEMPORARY TABLE IF EXISTS itemstable3;
CREATE TEMPORARY TABLE itemstable3

SELECT     
           MM.itemid,
          -- I.itemname,
           SUM(MM.quantity) as consumedqty
		  -- IFNUll(ROUND((SUM(MM.itemvalue)/SUM(MM.quantity)),2),0) as outunitcost,
          -- SUM(MM.itemvalue) as outamount
           
	FROM materialmovement MM
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    
    WHERE FIND_IN_SET(MM.fromwarehousebinid,@warehousebinids)
    AND FIND_IN_SET(I.itemgroupid,@allitemgroupid) 
    AND FIND_IN_SET(MM.transactiontypeid,'683')
	group by itemid;  
    
    select * from itemstable1 T1
    LEFT JOIN itemstable2  T2  ON T2.itemid= T1.itemid
	LEFT JOIN itemstable3  T3  ON T3.itemid= T2.itemid and T3.itemid=T1.itemid;
    
    
DROP TEMPORARY TABLE IF EXISTS birdsale;
CREATE TEMPORARY TABLE birdsale

select 
SI.salesinvoiceno,
DATE_FORMAT(SI.salesinvoicedate,'%d/%m/%Y') as invoicedate,
P.partyname,
SID.warehousebinid,
I.itemname,
SID.itemid,
SID.quantity,
SID.weight,
SID.unitprice,
(SID.quantity*SID.unitprice)as amount

from  salesinvoice SI
LEFT JOIN salesinvoicedetail SID ON SID.salesinvoiceid = SI.id
LEFT JOIN party P ON P.id  = SI.customerid
LEFT JOIN item I ON I.id = SID.itemid
where FIND_IN_SET(SID.warehousebinid,@warehousebinids)
AND FIND_IN_SET(I.itemgroupid,@chicksitemgroupids) 
Group By SI.id,SID.id;

select * from birdsale;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_flockgather_reportvh`(
 IN p_batchid INT,
 IN p_companyid INT
 )
BEGIN
	SET @@sql_mode = ' ';
	SET @feeditemgroupids = null;
	SET @medicineitemgroupids = null;
	SET @vaccineitemgroupids = null;
	SET @vitaminitemgroupids = null;
    SET @chicksitemgroupids = null;
    SET @warehousebinids = null;
    SELECT  
		feeditemgroupids,medicineitemgroupids,
		vaccineitemgroupids,vitaminitemgroupids,
        chicksitemgroupids
		INTO @feeditemgroupids,@medicineitemgroupids,
		@vaccineitemgroupids, @vitaminitemgroupids,
        @chicksitemgroupids
        
	FROM
		breedersetting
        
        WHERE 
			companyid = p_companyid limit 1;
            
		SELECT 
		GROUP_CONCAT(BS.warehousebinid SEPARATOR ', ') INTO @warehousebinids
		FROM breederbatchbalance BBB
		LEFT JOIN breedershed BS ON BS.id = BBB.breedershedid
		WHERE BBB.breederbatchid = p_batchid;
    	
	-- select @warehousebinids;
    SET @itemgroupid = concat(@feeditemgroupids,',',@medicineitemgroupids, ',',@vaccineitemgroupids, ',',@vitaminitemgroupids, ',',@chicksitemgroupids);
   -- select @itemgroupid;
 
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1

	SELECT MM.id,
		   GPD.itemid as itemid1,
           (GPD.quantity-GPD.freequantity) as grpoqty,
           GPD.freequantity,
           DATE_FORMAT(MM.transactiondate,'%d/%m/%Y') as date,
           MM.itemid,
          -- I.itemgroupid,
           I.itemname,
          -- I.id as itemid1,
           SUM(MM.quantity) as quantity,
           IFNULL(ROUND((SUM(MM.itemvalue)/SUM((GPD.quantity-GPD.freequantity))),2),0) as unitcost,
           MM.itemvalue as ammount
           -- CONCAT(IG.groupname ,' In') as groupname
           
	FROM grpo GP
	LEFT JOIN grpodetail GPD ON GPD.grpoid = GP.id  and FIND_IN_SET(GP.towarehousebinid,@warehousebinids)
    LEFT JOIN materialmovement MM ON GPD.itemid = MM.itemid 
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    
    WHERE FIND_IN_SET(MM.towarehousebinid,@warehousebinids)
    AND FIND_IN_SET(I.itemgroupid,@itemgroupid) 
    AND FIND_IN_SET(MM.transactiontypeid,'681,682')
    group by MM.itemid;     
   
  select * from tempmortality1;  
    -- out material
        
	SET @itemgroupid = concat(@feeditemgroupids,',',@medicineitemgroupids, ',',@vaccineitemgroupids, ',',@vitaminitemgroupids, ',',@chicksitemgroupids);
  
        
	SELECT MM.id,
           DATE_FORMAT(MM.transactiondate,'%d/%m/%Y') as date,
           MM.itemid,
           I.itemgroupid,
           I.itemname,
           SUM(MM.quantity) as quantity,
		    IFNUll(ROUND((SUM(MM.itemvalue)/SUM(MM.quantity)),2),0) as unitcost,
           ROUND(MM.itemvalue) as ammount,
           CONCAT(IG.groupname ,' Out') as groupname
           
	FROM materialmovement MM
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    
    WHERE FIND_IN_SET(MM.fromwarehousebinid,@warehousebinids)
    AND FIND_IN_SET(I.itemgroupid,@itemgroupid) AND
    FIND_IN_SET(transactiontypeid,'682')
    
   group by MM.transactiondate,itemid;  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_flockproduction_summary`(
IN p_breederbatchid VARCHAR(100),
IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';

SET @weekoflays = 0; 
SET @stdmortality = 0; 
SET @act = 0; 
SET @hatchingavgeggsizestd = 0; 
SET @hatchingact = 0; 
SET @cumhehenhoused = 0; 
SET @difference = 0; 
SET @eggmassstd = 0; 





DROP TEMPORARY TABLE IF EXISTS tempfloackproductionsummaryeport;
CREATE TEMPORARY TABLE tempfloackproductionsummaryeport

SELECT

BDT.id as dailytransactionid,
BDT.breederbatchid,
BB.batchname,
BB.maleitemid,
BB.femaleitemid,
-- EC.productionweek,
DATE_FORMAT(BDT.transactiondate ,'%d/%m/%Y') as transactiondate, 
fnc_getplacementdate(BB.id,p_companyid) as placementdate,
fun_batch_ageindays(BDT.transactiondate,(fnc_getplacementdate(BB.id,p_companyid)),BB.id)as ageindays,
fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid)as ageinweek,
DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY) as lastdate,
DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)as firstdate, 
BPO.hdinpercent,
BPO.heinpercent,
BPO.hatchinpercent,
BPO.cumchicks,
BPO.cumhhp,
BPO.cumhhhe,

fnc_batchwise_weekly_stdbodyweight(BB.maleitemid,(fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid)))as stdmalebodyweight,
fnc_batchwise_weekly_stdbodyweight(BB.femaleitemid,(fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid)))as stdfemalebodyweight,
fnc_batchwise_weekly_feedconsumed(BB.maleitemid,(fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid)))as stdmalefeedcon,
fnc_batchwise_weekly_feedconsumed(BB.femaleitemid,(fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid)))as stdfemalefeedcon,
fnc_breeder_batchwise_birdliveqtyofweek(BB.id,BB.maleitemid,(DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),p_companyid) as maleliveqty,
fnc_breeder_batchwise_birdliveqtyofweek(BB.id,BB.femaleitemid,(DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),p_companyid) as femaleliveqty,
fnc_batchwise_malefemalemortality_ongivenlastdate((DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),BB.id,BB.maleitemid) as malemortality,
fnc_batchwise_malefemalemortality_ongivenlastdate((DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),BB.id,BB.femaleitemid) as femalemortality,

fnc_calculate_cummalefemalemortalityuptolastdate(BDT.breederbatchid,(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),BB.femaleitemid,p_companyid) as cummalefemalemortality,
fnc_calculate_cummalefemalemortalityuptolastdate(BDT.breederbatchid,(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),BB.maleitemid,p_companyid) as cummalemalemortality,

fnc_calculate_weeklytotaleggs((DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),BDT.breederbatchid)as weeklytotaleggs,

fnc_calculate_weeklyHatchimgeggs((DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),BDT.breederbatchid)as weeklyhatchingeggs,

fnc_calculate_weeklyavgweiht((DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),BDT.breederbatchid)as hatchingavgeggsize,

fnc_calculate_consumedquantitymalefemale((DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),BDT.breederbatchid,BB.femaleitemid,p_companyid)as femalecon,

fnc_calculate_consumedquantitymalefemale((DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),BDT.breederbatchid,BB.maleitemid,p_companyid)as malecon,
fnc_calculate_weeklyitemwisebodyweight(BDT.id,(DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),BDT.breederbatchid,BB.maleitemid,p_companyid)as malebodyweight,
fnc_calculate_weeklyitemwisebodyweight(BDT.id,(DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_batch_ageinweek(BDT.transactiondate,BDT.breederbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),BDT.breederbatchid,BB.femaleitemid,p_companyid)as femalebodyweight


INTO
@dailytransactionid,@breederbatchid,@batchname,@maleitemid,@femaleitemid,@transactiondate,@placementdate,@ageindays,@ageinweek,@lastdate,@firstdate,
@hdinpercent,@heinpercent,@hatchinpercent,@cumchicks,@cumhhp,@cumhhhe,@stdmalebodyweight,@stdfemalebodyweight,
@stdmalefeedcon,@stdfemalefeedcon,@maleliveqty,@femaleliveqty,@malemortality,@femalemortality,@cummalefemalemortality,@cummalemalemortality,@weeklytotaleggs,
@weeklyhatchingeggs,@hatchingavgeggsize,@femalecon,@malecon,@malebodyweight,@femalebodyweight -- ,@hensdayproact

FROM breederdailytransaction BDT 
INNER JOIN breederbatch BB ON BB.id =BDT.breederbatchid
LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id -- AND EC.companyid= p_companyid
LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = BDM.itemid -- AND EC.companyid= p_companyid





Where
 FIND_IN_SET(BDT.breederbatchid,p_breederbatchid)  AND
 BDT.companyid = p_companyid;
--  group by ageinweek;
 
SELECT dailytransactionid,breederbatchid,batchname,maleitemid,femaleitemid,transactiondate,placementdate,ageindays,ageinweek,

DATE_FORMAT(lastdate ,'%d/%m/%Y') as lastdate, 
firstdate,
hdinpercent,heinpercent,hatchinpercent,cumchicks,cumhhp,cumhhhe,stdmalebodyweight,stdfemalebodyweight,
stdmalefeedcon,stdfemalefeedcon,maleliveqty,femaleliveqty,malemortality,femalemortality,
((femalemortality/femaleliveqty)*100)as femalemortalityper,
((malemortality/maleliveqty)*100)as malemortalityper,
SUM(((femalemortality/femaleliveqty)*100)) OVER(ORDER BY ageinweek) AS cummalefemalemortality,
SUM(((malemortality/maleliveqty)*100)) OVER(ORDER BY ageinweek) AS cummalemalemortality,
weeklytotaleggs, SUM(weeklytotaleggs) OVER(ORDER BY dailytransactionid) AS cumulativetotaleggs,
weeklyhatchingeggs,SUM(weeklyhatchingeggs) OVER(ORDER BY dailytransactionid) AS cumulativehatchingeggs,
((weeklyhatchingeggs/weeklytotaleggs)*100)as hatchper,
ROUND(IFNULL(((femaleliveqty/7)/weeklytotaleggs),0),3)as hensdayproact,
hatchingavgeggsize,((IFNULL(((femaleliveqty/7)/weeklytotaleggs),0))*hatchingavgeggsize)as eggmass,femalecon,malecon,(femalecon+malecon)as malefemalecon,
SUM(femalecon+malecon) OVER(ORDER BY dailytransactionid) AS cumulativemalefemalefeedcon,
ROUND(((SUM(femalecon+malecon) OVER(ORDER BY dailytransactionid))/(SUM(weeklyhatchingeggs) OVER(ORDER BY dailytransactionid))),3)as feedperHE,
ROUND((((femalecon/7)/femaleliveqty)*1000),3) as feed1female,
ROUND((((malecon/7)/maleliveqty)*1000),3) as feed1male,
malebodyweight,femalebodyweight,(femalebodyweight-stdfemalebodyweight)as femalebodyweightdifference,
@weekoflays as weekoflays,@stdmortality as stdmortality,@act as act,@hatchingavgeggsizestd as hatchingavgeggsizestd,
@hatchingact as hatchingact,@cumhehenhoused as cumhehenhoused,@difference as difference,@eggmassstd as eggmassstd 

 

 
 
  FROM 
  tempfloackproductionsummaryeport
  group by ageinweek;
 

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_freightdetail_save`(
		IN p_id INT,
        IN p_purchaseinvoiceid INT,
		IN p_freighttypeid INT,
        IN p_freightamount DECIMAL(9,3),
        IN p_taxid INT,
        IN p_taxpercent DECIMAL(9,3),
		IN p_cgstid INT(11),
		IN p_cgstpercent DECIMAL(9,3),
		IN p_cgstamount DECIMAL(9,3),
		IN p_sgstid INT(11),
		IN p_sgstpercent DECIMAL(9,3),
		IN p_sgstamount DECIMAL(9,3),
		IN p_igstid INT(11),
		IN p_igstpercent DECIMAL(9,3),
		IN p_igstamount DECIMAL(9,3),
		IN p_utgstid INT(11),
		IN p_utgstpercent DECIMAL(9,3),
		IN p_utgstamount DECIMAL(9,3),
        IN p_companyid INT,
		IN p_userid INT,
		OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO freightdetail 
				(purchaseinvoiceid, freighttypeid, freightamount,
               taxid,taxpercent,cgstid, cgstpercent,
               cgstamount,sgstid,sgstpercent,sgstamount,
               igstid,igstpercent,igstamount,utgstid,
               utgstpercent,utgstamount, companyid)
			VALUES 
				(p_purchaseinvoiceid, p_freighttypeid, p_freightamount,
                p_taxid,p_taxpercent,p_cgstid,p_cgstpercent, 
                p_cgstamount, p_sgstid,p_sgstpercent, p_sgstamount,
                p_igstid,p_igstpercent,p_igstamount,
                p_utgstid,p_utgstpercent, p_utgstamount, p_companyid);
                
            SET @action = 'INSERT';
	ELSE
    
		UPDATE freightdetail
				SET
                purchaseinvoiceid = p_purchaseinvoiceid, 
                freighttypeid = p_freighttypeid, 
                freightamount = p_freightamount,
				taxid = p_taxid,
                taxpercent= p_taxpercent,
                cgstid = p_cgstid,
                cgstpercent= p_cgstpercent,
                cgstamount = p_cgstamount,
                sgstid = p_sgstid,
                sgstpercent =p_sgstpercent,
                sgstamount =p_sgstamount,
                igstid = p_igstid,
                igstpercent =p_igstpercent,
                igstamount = p_igstamount,
                utgstid = p_utgstid,
                utgstpercent =p_utgstpercent,
                utgstamount = p_utgstamount,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
    CALL spc_commonlog_save(p_companyid, 'freightdetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_freightdetail_search`(
	IN p_purchaseinvoiceid INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
		FD.id as freightdetailid,
        FD.freighttypeid,
        purchaseinvoiceid,
        freightamount,
        taxpercent,
        taxid,
		FR.freightname as freighttype,
		FD.taxpercent,
	    FD.cgstpercent,
        FD.cgstamount,
        FD.sgstpercent,
        FD.sgstamount,
        FD.igstpercent,
		FD.igstamount,
        FD.utgstpercent,
        FD.utgstamount,
        FD.sgstid,
	    FD.cgstid,
	    FD.igstid,
	    FD.utgstid
        
        
	
	FROM 
		freightdetail FD
        
	 LEFT JOIN freight FR ON FD.freighttypeid = FR.id
    
    
	WHERE 
		 FD.purchaseinvoiceid = p_purchaseinvoiceid
         AND FD.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_freight_ddl`(
	IN p_companyid INT
)
BEGIN

	SELECT
		`id`,
		`freightname`,
		`companyid`
	FROM
		`freight` 
        
	WHERE
		companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_freight_delete`(
	IN p_id INT(11),
    IN p_compayid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DELETE FROM freight WHERE id = p_id;
      CALL spc_commonlog_save(p_companyid, 'freight', out_id, 'Delete', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_freight_save`(
   IN p_id INT(11),
   IN p_freightname VARCHAR(200),
   IN p_remark VARCHAR(500),
   IN p_inputledgerid INT(11),
   IN p_outputledgerid INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO freight 
				(id, freightname, remark, inputledgerid, outputledgerid, companyid)
			VALUES 
				(p_id,  p_freightname, p_remark, p_inputledgerid, p_outputledgerid, p_companyid);
                
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE freight
				SET freightname = p_freightname,
					remark = p_remark,
                    inputledgerid = p_inputledgerid,
                    outputledgerid = p_outputledgerid,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'freight', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_freight_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
		F.`id`,
		F.`freightname`,
		F.`remark`,
		F.inputledgerid, 
         COA1.coaname as inputledgername,
         F.outputledgerid,
         COA2.coaname as outputledgername,
		F.`companyid`
	FROM
		`freight` F
        
	LEFT JOIN `chartofaccount` COA1 ON COA1.id = F.inputledgerid
    LEFT JOIN `chartofaccount` COA2 ON COA2.id = F.outputledgerid
    
	WHERE
		F.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_freight_select`(
	IN p_id INT
)
BEGIN

	SELECT
		`id`,
		`freightname`,
		`remark`,
		`inputledgerid`,
		`outputledgerid`,
		`companyid`
	FROM
		`freight`
	WHERE
		id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_futureeggscollection_livestock`(
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_shedid INT,
 IN p_breederbatchid INT,
 IN p_companyid INT
 )
BEGIN

 SET @DefaultFemaleChiksid = NULL;
 SET @placementdate = null;
 SET @week_start = null;
 SET @weekend = null;
 SET @daydiff = null;
 SET @weekno = null;
 SET @endweekno = null;
 SET @liveqty  = null;

-- femaleid by batchid
DROP TEMPORARY TABLE IF EXISTS tempeggscollect;
CREATE TEMPORARY TABLE  tempeggscollect
		(	
            weekno INT(11),
			liveqty INT(11),
			hhheperweek DECIMAL(15,3),
            hhpperweek DECIMAL(15,3),
            expeggscollection INT(11),
            exphatchingeggs INT(11)
		);
SELECT 
   femaleitemid INTO @DefaultFemaleChiksid
   FROM breederbatch
   WHERE id = p_breederbatchid;
   
SELECT fnc_getplacementdate(p_breederbatchid,p_companyid)  INTO @placementdate;
 SELECT fnc_batchwise_malefemaleopbalance(p_breederbatchid, p_shedid, @DefaultFemaleChiksid ,p_fromdate,p_companyid) INTO @liveqty;

SELECT TRUNCATE((((DATEDIFF(p_fromdate,@placementdate))+1)/7),0)  INTO @weekno;
  SELECT ifnull(((DATEDIFF(p_fromdate,@placementdate)+1)%7),0) INTO  @weeknodays;
  IF(@weeknodays >0)then
	SET @weekno = @weekno+1;
  END IF;
  SELECT TRUNCATE((((DATEDIFF(p_todate,@placementdate))+1)/7),0)  INTO @endweekno;

  SELECT ifnull(((DATEDIFF(p_todate,@placementdate)+1)%7),0) INTO  @endweeknodays;
   /* IF(@endweeknodays >0)then
	SET @endweekno = @endweekno+1;
  END IF;*/
   SET @weekenddate = @endweekno;
SELECT FIRST_DAY_OF_WEEK(p_fromdate) INTO  @week_start;
SELECT  ifnull(DATEDIFF(p_fromdate,@week_start),0) INTO @daydiff;




       
if(@daydiff>0 )then 
 SET @ageinweek = null;
        SET @hhheperweek = null;
        SET @hhpperweek = null;
        SET @expeggscollection = null;
        SET @exphatchingeggs = null;
SELECT 
    BPO.ageinweek ,BPO.hhheperweek, BPO.hhpperweek,
    (@liveqty*IFNULL((((BPO.hhpperweek)/7)*(7-@daydiff)),0)) as expeggscollection,
    (@liveqty*IFNULL((((BPO.hhheperweek)/7)*(7-@daydiff)),0)) as exphatchingeggs
	
    INTO
    @ageinweek,@hhheperweek,@hhpperweek,@expeggscollection,@exphatchingeggs
    
   
    FROM breederperformanceobjective BPO
	WHERE BPO.ageinweek = @weekno AND BPO.itemid =@DefaultFemaleChiksid; 
    if(@ageinweek IS NOT null) THEN
   INSERT INTO tempeggscollect values(@ageinweek,@liveqty,@hhheperweek,@hhpperweek,@expeggscollection,@exphatchingeggs);
  END IF;
    SET @weekno =  @weekno+1;
END IF;


BEGIN
DECLARE i INT DEFAULT @weekno;
        SET @ageinweek = null;
        SET @hhheperweek = null;
        SET @hhpperweek = null;
        SET @expeggscollection = null;
        SET @exphatchingeggs = null;
  
  --  SELECT @weekenddate ,@endweekno; 

while(i<=@endweekno) DO

 SET @ageinweek = null;
 SET @hhheperweek = null;
 SET @hhpperweek = null;
 SET @expeggscollection = null;
 SET @exphatchingeggs = null;
 
SELECT BPO.ageinweek ,BPO.hhheperweek, BPO.hhpperweek,
    IFNULL((@liveqty*BPO.hhpperweek),0),
    IFNULL((@liveqty*BPO.hhheperweek),0)
     INTO
    @ageinweek,@hhheperweek,@hhpperweek,@expeggscollection,@exphatchingeggs
   
    FROM breederperformanceobjective BPO
    WHERE BPO.ageinweek = i AND BPO.itemid =@DefaultFemaleChiksid ;
   if(@ageinweek IS NOT null) THEN
  
   INSERT INTO tempeggscollect values(@ageinweek,@liveqty,@hhheperweek,@hhpperweek,@expeggscollection,@exphatchingeggs);
   
   END IF;
   
    SET i =  i+1;
END WHILE;

if(@endweeknodays>0 )then 
		SET @weekendt = @endweekno +1;
        SET @ageinweek = null;
        SET @hhheperweek = null;
        SET @hhpperweek = null;
        SET @expeggscollection = null;
        SET @exphatchingeggs = null;
SELECT 
    BPO.ageinweek ,BPO.hhheperweek, BPO.hhpperweek,
    (@liveqty*IFNULL((((BPO.hhpperweek)/7)* @endweeknodays),0)) as expeggscollection,
    (@liveqty*IFNULL((((BPO.hhheperweek)/7)* @endweeknodays),0)) as exphatchingeggs
	
    INTO
    @ageinweek,@hhheperweek,@hhpperweek,@expeggscollection,@exphatchingeggs
    
   
    FROM breederperformanceobjective BPO
	WHERE BPO.ageinweek = @weekendt AND BPO.itemid =@DefaultFemaleChiksid; 
    if(@ageinweek IS NOT null) THEN
   INSERT INTO tempeggscollect values(@ageinweek,@liveqty,@hhheperweek,@hhpperweek,@expeggscollection,@exphatchingeggs);
  END IF;
END IF;

END;
SELECT * ,FORMAT(((tb1.exphatchingeggs/tb1.expeggscollection)*100),3) as exphatchingeggsper FROM tempeggscollect tb1;

  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_genledgertb_report`(
	IN p_branchid INT(11),
	IN p_fromdate DATE,
	IN p_todate DATE,
    IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';

-- get date wise cr dr amount
	DROP TEMPORARY TABLE IF EXISTS openingbal;
    CREATE TEMPORARY TABLE openingbal
		SELECT COA.glcode,
			   JED.acledgerid,
			   COA.coaname as ledgername,
			   IFNULL(SUM(JED.dramount),0) as dramount,
			   IFNULL(SUM(JED.cramount),0) as cramount,
              '0' as openingdramount,
              '0' as openingcramount,
			   JE.voucherdate
			   
		FROM journalentry JE
		
			LEFT JOIN journalentrydetail JED ON JE.id = JED.journalentryid
			LEFT JOIN chartofaccount COA ON JED.acledgerid = COA.id
			
		WHERE JE.voucherdate BETWEEN p_fromdate AND p_todate
				AND JE.branchid = p_branchid
				AND JE.companyid = p_companyid
		 group by JED.acledgerid;
        
  
 -- get opning blance dr cr
 DROP TEMPORARY TABLE IF EXISTS openingbaldetail;
    CREATE TEMPORARY TABLE openingbaldetail
		select 
			COA.glcode,
			JED.acledgerid,	
            COA.coaname as ledgername,
            '0' as dramount,
            '0' as cramount,
             IFNULL(SUM(JED.dramount),0) as openingdramount,
			 IFNULL(SUM(JED.cramount),0) as openingcramount,
			 JE.voucherdate
		FROM journalentry JE
		
			LEFT JOIN journalentrydetail JED ON JE.id = JED.journalentryid
			LEFT JOIN chartofaccount COA ON JED.acledgerid = COA.id
			
		WHERE  JE.voucherdate < p_fromdate AND
				 JE.branchid = p_branchid
				AND JE.companyid = p_companyid
		group by JED.acledgerid order by COA.glcode;
	
    -- for combine result
	DROP TEMPORARY TABLE IF EXISTS openingbaldetail1;
    CREATE TEMPORARY TABLE openingbaldetail1
    
	SELECT * FROM openingbal
	UNION ALL
    SELECT * FROM openingbaldetail;
    
    DROP TEMPORARY TABLE IF EXISTS openingbaldetail2;
    CREATE TEMPORARY TABLE openingbaldetail2
    SELECT glcode,acledgerid,ledgername,
		ABS(SUM(dramount)) as dramount,ABS(SUM(cramount)) as cramount,
		ABS(SUM(openingdramount)) as openingdramount,ABS(SUM(openingcramount)) as openingcramount
		-- IFNULL((SUM(openingdramount)-SUM(dramount)),0) as closingdramount,
        -- IFNULL((SUM(openingcramount)-SUM(cramount)),0) as closingcramount
    FROM openingbaldetail1
    group by acledgerid order by glcode ;
    
    
    
	DROP TEMPORARY TABLE IF EXISTS openingbaldetail3;
    CREATE TEMPORARY TABLE openingbaldetail3
    select * from openingbaldetail2;
    
    -- for grand total
    SELECT * FROM (
    SELECT * FROM openingbaldetail3
    UNION ALL
    select 
		'' as glcode,
        '' as acledgerid,
        'Grand Total' as ledgername,
        ABS(SUM(dramount)) as dramount,
		ABS(SUM(cramount)) as cramount,
		ABS(SUM(openingdramount)) as openingdramount,
        ABS(SUM(openingcramount)) as openingcramount
       --  SUM(closingdramount) as closingdramount,
        -- SUM(closingcramount) as closingcramount
        FROM openingbaldetail2
        ) as temp;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getallopeningbalancedetailbatch`(
IN p_companyid INT(11)
)
BEGIN

select 
cbfbatchno,
companyid

from cbf_openingbalancedetail
where p_companyid =companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getalltestvaluename`(
IN p_testid INT(11),
IN p_companyid INT(11)
)
BEGIN
SELECT    TMD.id,
	      TMD.testmasterid,
		  TMD.testvalue
      
           
    FROM feedmill_testmasterdetail TMD
    LEFT JOIN `reference` REF ON REF.id = TMD.resultid
    
    WHERE  
		  TMD.companyid = p_companyid AND
		  TMD.testmasterid = p_testid ;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getall_eggscollection_warehouse`(
 IN p_company_id INT(11))
BEGIN
select 
	E.towarehouseid as fromwarehouseid,
	W.warehousename 
 FROM eggscollection E
 inner JOIN warehouse W ON W.id = E.towarehouseid 
WHERE E.companyid = p_company_id group by E.towarehouseid;
         
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getavailablesetters_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		SB.id as batchno,
        SB.setterid,
        S.settername,
        SB.slotid,
        SS.slotname,
		L.locationname,
        SB.actualquantity,
		BB.batchname as breederbatchname,
        DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as batchstartdate
	
    FROM
		setterbatch SB
	
    LEFT JOIN setter S ON SB.setterid = S.id
    LEFT JOIN setterslots SS ON SB.slotid = SS.id
    LEFT JOIN breederbatch BB on SB.breederbatchid = BB.id
	LEFT JOIN location L ON S.locationid = L.id
        
	WHERE
		SB.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getbirdsalesorderbylfschedule`(
 IN p_liftingscheduleid INT(11),
 IN p_companyid INT(11)
 )
BEGIN

	SELECT 
		breederbirdsalesorderid
	FROM 
		breeder_lifting_schedule_details 
	WHERE
		liftingscheduleid = p_liftingscheduleid AND 
        companyid = p_companyid 
        group BY breederbirdsalesorderid ;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getbirdsalesorder_byfarmerenquiry`(
	IN p_farmerenquryid INT,
    IN p_companyid INT
)
BEGIN
SET @@sql_mode = ' ';
	SELECT LSD.lifting_schedule_id,
		   DATE_FORMAT( BSO.orderdate,'%d/%m/%Y') as liftingdate,
		   LSD.farmerenquiryid,
		   LSD.cbfbirdsalesorderid,
           BSO.stdsalesorderid,
           BSO.vendorid,
           P.partyname,
           SO.salesorderno
    
    FROM cbf_lifting_schedule_details LSD
    LEFT JOIN cbf_birdsalesorder BSO ON BSO.id = LSD.cbfbirdsalesorderid
    LEFT JOIN salesorder SO ON SO.id = BSO.stdsalesorderid
    LEFT JOIN cbf_birdsalesorderdetail BSOD ON BSO.id = BSOD.cbfbirdsalesorderid
    LEFT JOIN party P ON P.id = BSO.vendorid
  --  LEFT JOIN cbf_delivery_weights CDW ON CDW.birdsalesorderid = BSO.id
    
    WHERE LSD.farmerenquiryid = p_farmerenquryid
    AND LSD.company_id = p_companyid
    AND BSOD.pendingweight > 0
    GROUP BY BSO.id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getbreederbatchbalance_instoke`(
    IN p_shedid INT,
    IN p_week INT,
    IN p_breederbatchid INT
)
BEGIN

 SET @DefaultFemaleChiksid = NULL;
 SET @instock = NULL;
 
/* SELECT 
   defaultfemalechickid INTO @DefaultFemaleChiksid
   FROM breedersetting
   WHERE companyid = 1 limit 1;*/
SELECT 
   femaleitemid INTO @DefaultFemaleChiksid
   FROM breederbatch
   WHERE id = p_breederbatchid;
    
   SELECT 
       hhpperweek
   
   FROM breederperformanceobjective
   
   WHERE ageinweek = p_week AND itemid =@DefaultFemaleChiksid;

	
     SELECT 
         CASE WHEN BBB.itemid =@DefaultFemaleChiksid THEN @instock:= BBB.quantity ELSE 0 END as instock,
            I.itemcode,
            I.itemname
			
    FROM
		breederbatchbalance BBB
       LEFT JOIN breedershedline BSL ON BBB.breedershedpenid = BSL.id
        LEFT JOIN item I ON BBB.itemid = I.id
   	
	WHERE
		BBB.breedershedid = p_shedid AND
        BBB.quantity != 0;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getbreederreasons`(
   IN p_typeid INT,
   IN p_companyid INT
)
BEGIN
    
    SELECT
		 id,
         reason
	
    FROM
		breederreasons

	WHERE
		companyid = p_companyid AND
        typeid = p_typeid;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getcandlingtest`(
	IN p_id INT
)
BEGIN

	SELECT CT.id,
		setterbatchid as settingno,
        DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
        L.locationname,
		CT.setterid,
        S.settername,
        BB.batchname as breederbatchname,
        CT.breederbatchid,
        W.warehousename,
		DATE_FORMAT(testdate,'%d/%m/%Y') as testdate,
		CT.actualquantity,
		samplequantity,
		trueinfertile,
		clears,
		bloodring,
		membrane,
		agemortality,
		fertility,
		fertilitypercentage,
        CT.actualquantity as settingquantity
        
	FROM
		candlingtest CT
        
		LEFT JOIN setterbatch SB ON CT.setterbatchid = SB.id
        LEFT JOIN setter S ON CT.setterid = S.id     
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN breederbatch BB on CT.breederbatchid = BB.id
		LEFT JOIN warehouse W ON S.warehouseid = W.id
        
	WHERE
		CT.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getcbfdailytransaction_byshedid`(
 In p_shedid INT,
 In p_companyid INT 
 )
begin
set @approved = "no";
 IF(EXISTS (SELECT id FROM cbf_dailytransaction WHERE shedid = p_shedid AND 
       statusid = 3061 AND 
       companyid = p_companyid )) then
        SET @approved = "yes";
   end if;
   select @approved as approved;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getCbfDocumentCollection_byenquiryid`(
	IN p_farmerenquiryid INT(11)
)
BEGIN

	SELECT DCD.document_id,
		   DCD.image_url,
           FE.farmer_name,
           FE.farm_name,
           D.documentname
	FROM cbf_documentcollectiondetails DCD
    LEFT JOIN cbf_documentcollection CD ON CD.id = DCD.document_collection_id
	LEFT JOIN document D ON D.id = DCD.document_id
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = CD.enquiry_id
    WHERE CD.enquiry_id = p_farmerenquiryid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getcbfreasons`(
   IN p_typeid INT,
   IN p_companyid INT
)
BEGIN
    
    SELECT
		 id,
         reason
	
    FROM
		cbf_reasons

	WHERE
		companyid = p_companyid AND
        typeid = p_typeid;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getcurrenthatcherysettings`(
    IN p_companyid INT,
    IN p_restperiod INT,
    IN p_locationid INT
)
BEGIN
     SELECT
		S.id as setterid,
        SS.id as setterslotid,
        S.settername,
        SS.slotname,
        S.capacity as settercapacity,
        SS.capacity as setterslotcapacity,
        CASE WHEN (SB.batchdate IS NULL) THEN NULL ELSE DATE_FORMAT(SB.batchdate,'%d/%m/%Y') END as batchstartdate,
        CASE WHEN (SB.batchdate IS NULL) THEN NULL ELSE DATE_FORMAT(DATE_ADD(SB.batchdate, INTERVAL 18 DAY),'%d/%m/%Y') END as batchenddate,
        CASE WHEN (SB.batchdate IS NULL) THEN NULL ELSE DATE_FORMAT(DATE_ADD(SB.batchdate, INTERVAL 18 + p_restperiod DAY),'%d/%m/%Y') END as setteravailabledate,
        SB.id as setterbatchid,
		fnc_checkissetterslotscheduled(SS.id, p_companyid) as isscheduled,
		-- DATE_FORMAT(fnc_getScheduleDate(SB.detailsid),'%d/%m/%Y') as scheduleddate
		CASE WHEN (SB.detailsid IS NULL) THEN NULL ELSE DATE_FORMAT(fnc_getScheduleDate(SS.id, IFNULL(SB.detailsid,0)),'%d/%m/%Y') END as scheduleddate
    FROM
		setter S
        LEFT JOIN setterslots SS ON SS.setterid = S.id
		LEFT JOIN setterbatch SB ON SS.id = SB.setterslotid
      
	WHERE
		S.companyid = p_companyid AND
        S.locationid = p_locationid
        order by S.id,SS.id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getdailytransaction_byshedid`(
 In p_shedid INT,
 In p_companyid INT 
 )
begin
set @approved = "no";
 IF(EXISTS (SELECT id FROM breederdailytransaction WHERE shedid = p_shedid AND 
       statusid = 821 AND 
       companyid = p_companyid )) then
        SET @approved = "yes";
   end if;
   select @approved as approved;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getfarmerenquiries_byliftingschedule`(
	IN p_liftingscheduleid INT,
    IN p_companyid INT
)
BEGIN
SET @@sql_mode = ' ';
	SELECT DISTINCT LSD.farmerenquiryid,
		   FE.farm_name,
           FE.farmer_name
    
    FROM cbf_lifting_schedule_details LSD
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = LSD.farmerenquiryid
    
    WHERE LSD.lifting_schedule_id = p_liftingscheduleid
    AND LSD.company_id = p_companyid
    
    GROUP BY LSD.cbfbirdsalesorderid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getfarmhistory_byfarmerenquiry`(
	IN p_cbfbatchid INT(11),
    IN p_farmerenquiryid INT(11),
    IN p_companyid INT(11)
)
BEGIN


	SET @row_number = 0;

	DROP TEMPORARY TABLE IF EXISTS historytbl;
    CREATE TEMPORARY TABLE historytbl
    SELECT (@row_number:=@row_number + 1) AS row_num, id,batch_place_qty, batch_number, totalfeedconsumed, totaldeliveredwt, fcr, liveqty, body_weight, eef from (
		SELECT DISTINCT CB.id,
			   CB.batch_place_qty,
			   FE.farm_name,
			   CB.batch_number,
			   fnc_calculate_cummactconcbf(CBB.cbfbatchid,CBB.cbfshedid,CB.live_batch_date,p_companyid) as totalfeedconsumed,
			   fnc_getdelivered_weight(CB.id) as totaldeliveredwt,
			   IFNULL(fnc_calculate_cummactconcbf(CBB.cbfbatchid,CBB.cbfshedid,CB.live_batch_date,p_companyid) / fnc_getdelivered_weight(CB.id),0) as fcr,
			   IFNULL((CB.batch_place_qty - CB.total_mortality),0) as liveqty,
			   CB.body_weight,
			   0 as eef
		FROM cbf_batch_details CB
		LEFT JOIN cbf_batchbalance CBB ON CBB.cbfbatchid = CB.id
        INNER JOIN cbf_delivery_weights_detail CDWD ON CDWD.cbf_batchid = CB.id
		INNER JOIN cbf_farmerenquiry FE ON FE.id = CB.farmer_enquiry_id
		WHERE CB.farmer_enquiry_id = p_farmerenquiryid
        AND CB.id <> p_cbfbatchid
		AND CB.companyid = p_companyid
    
		ORDER BY CB.id DESC LIMIT 3
	) as tblcbfage;

    
   BEGIN
		DECLARE n INT DEFAULT 0;
		DECLARE i INT DEFAULT 0;
		SELECT COUNT(*) FROM historytbl INTO n;
		 
		WHILE i<n DO 
			SET @meanage = 0;
            SET @id = null;
            SET @liveqty = 0;
            SET @batch_place_qty = 0;
            SET @fcr = 0;
            
            SELECT id, liveqty, batch_place_qty, fcr
            INTO @id, @liveqty, @batch_place_qty, @fcr
			FROM historytbl
            WHERE row_num = i+1;
            
            call spc_calculate_meanage(@id, p_companyid, @meanage);
			
            SET @eef = (((@liveqty / @batch_place_qty) * 100) / (@fcr * @meanage));
            
            UPDATE historytbl SET eef = @eef WHERE row_num = i+1;
            
            SET i = i + 1;
		END WHILE;
	END;
    
    SELECT *, (((2-body_weight)*0.25)+fcr) as cfcr FROM historytbl;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getgrowingchargesdetailreport_bycbfbatchid`(
	IN p_cbf_batchid varchar(1500),
    IN p_companyid INT
    -- out p_result INT(11)
)
BEGIN
	SET @@sql_mode = '';

	IF EXISTS(SELECT id FROM cbf_growingcharges WHERE find_in_set(cbf_batchid,p_cbf_batchid))THEN
		SELECT CGC.*,
			   CGC.id,
			   FE.farmer_name,
			   FE.farm_name,
			   DATE_FORMAT(CGC.firstdaydate,'%d/%m/%Y') as firstdaydate,
			   DATE_FORMAT(CGC.batchclosedate,'%d/%m/%Y') as batchclosedate,
               0 as vitmineconcost,
			   FE.address,
			   I.itemname as breeditem,
               B.branchname,
               CBD.batch_number,
               CBB.cbfshedid,
               FESDD.shed_name,
               CS.`name` ,
			   IFNULL(fnc_calculate_cummalefemalecullscbf(CBD.id,CBB.cbfshedid,CBD.live_batch_date,p_companyid),0) as culls,
			   ROUND((IFNULL(CGC.actualproductioncost,0)/fnc_getdelivered_weight_sales(CBD.id, 723)),2) as productioncostperkg,
               ROUND((IFNULL(CGC.actualproductioncost,0)/CBD.batch_place_qty),2) as productioncostperbird
               


               
        FROM cbf_growingcharges CGC 
        LEFT JOIN cbf_batch_details CBD ON CBD.id = CGC.cbf_batchid
        LEFT JOIN cbf_batchbalance CBB ON CBB.cbfbatchid = CBD.id
        LEFT JOIN cbf_farmerenquiry_sheddimensiondetail FESDD ON FESDD.id = CBB.cbfshedid
        LEFT JOIN cbf_farmerenquiry FE ON FE.id = CGC.farmerenquiryid
        LEFT JOIN item I ON I.id = CGC.breeditemid
        LEFT JOIN commonbranch B ON B.id = CGC.branchid
        LEFT JOIN coststructure CS ON CS.id = CGC.schemeid
        WHERE  find_in_set(CGC.cbf_batchid,p_cbf_batchid);
    
    ELSE 
		SET @totalfeedcost = null;
		SET @totalmedicinecost = null;
		SET @totalvaccinecost = null;
		SET @totalfeedconsumed = null;

		-- FOR FEED
        SET @cbfbatchid = null;
	   DROP TEMPORARY TABLE IF EXISTS temwarehousebin;
	   CREATE TEMPORARY TABLE temwarehousebin
		SELECT SDD.warehousebinid,CBB.cbfbatchid,SDD.id as shedid,CB.batch_close_date as batch_close_date-- INTO @warehousebinid,@cbfbatchid 
		
        FROM cbf_farmerenquiry_sheddimensiondetail SDD
		LEFT JOIN cbf_batchbalance CBB ON CBB.cbfshedid = SDD.id
        LEFT JOIN cbf_batch_details CB ON CB.id = CBB.cbfbatchid
		WHERE find_in_set( CBB.cbfbatchid,p_cbf_batchid);
        
        SET @issueids = null;
		SET @feeditemids = null;
		SELECT GROUP_CONCAT(CDT.issueid), GROUP_CONCAT(CDC.itemid) INTO @issueids, @feeditemids
		FROM cbf_dailytransaction CDT
		LEFT JOIN cbf_dailyconsumption CDC ON CDC.cbfdailytransactionid = CDT.id
		WHERE find_in_set(CDT.cbf_batchid,p_cbf_batchid)
		AND CDC.consumptiontypeid = 861;
       
        SET @feedtransferin = 0;
        SET @towarehousebinidtin = 0;
        DROP TEMPORARY TABLE IF EXISTS temptransferin;
	   CREATE TEMPORARY TABLE temptransferin
        SELECT IFNULL(SUM(MM.quantity), 0),MM.towarehousebinid 
		FROM materialmovement MM
        INNER JOIN temwarehousebin TEM ON TEM.warehousebinid = MM.towarehousebinid
        WHERE MM.companyid = p_companyid AND 
		MM.transactiontypeid in(681, 682, 684) AND
		FIND_IN_SET(MM.itemid, @feeditemids) AND MM.companyid = p_companyid;
      
	   DROP TEMPORARY TABLE IF EXISTS temptransferout;
	   CREATE TEMPORARY TABLE temptransferout
        SELECT IFNULL(SUM(MMM.quantity), 0),MMM.fromwarehousebinid 
		FROM materialmovement MMM
        INNER JOIN temwarehousebin TEM ON TEM.warehousebinid = MMM.fromwarehousebinid
        WHERE MMM.companyid = p_companyid AND
		MMM.transactiontypeid in(682) AND
		FIND_IN_SET(MMM.itemid, @feeditemids) AND MMM.companyid = p_companyid;
        
        DROP TEMPORARY TABLE IF EXISTS tempSchemeDetails;
	    CREATE TEMPORARY TABLE tempSchemeDetails
        SELECT cbf_batchid, applyschemefeedcost, applyschememedicinecost, applyschemevaccinecost, editdeductionvalues 
		FROM cbf_growingcharges
        WHERE FIND_IN_SET(cbf_batchid, p_cbf_batchid);
        
		-- IF(p_applyschemefeedcost = 1) THEN
			 DROP TEMPORARY TABLE IF EXISTS temptablefeeddetail;
	         CREATE TEMPORARY TABLE temptablefeeddetail	
			SELECT CASE WHEN tcd.applyschemefeedcost =1 THEN IFNULL(fnc_calculate_cummactconcbf(CB.id, CBB.cbfshedid, CB.live_batch_date, p_companyid),0)
            ELSE IFNULL(fnc_calculate_cummactconcbf(TEM.cbfbatchid,TEM.shedid,TEM.batch_close_date, p_companyid),0) 
            END as totalfeedconsumed,
            CASE WHEN tcd.applyschemefeedcost =1 THEN
			(IFNULL(fnc_calculate_cummactconcbf(CB.id, CBB.cbfshedid, CB.live_batch_date, p_companyid),0) * CS.feedcost)
			ELSE IFNULL(SUM(itemvalue),0) END as totalfeedcost,
            CBB.cbfbatchid 
			FROM cbf_batch_details CB 
			LEFT JOIN coststructure CS ON CS.id = CB.scheme_id
            LEFT JOIN cbf_batchbalance CBB ON CBB.cbfbatchid = CB.id
            LEFT JOIN tempSchemeDetails tcd ON tcd.cbf_batchid = CB.id
            LEFT JOIN temwarehousebin TEM ON TEM.cbfbatchid = CB.id
            LEFT JOIN materialmovement MM ON TEM.warehousebinid = MM.fromwarehousebinid
			WHERE (tcd.applyschemefeedcost = 1 AND FIND_IN_SET(CB.id,p_cbf_batchid) AND CB.companyid = p_companyid) 
            OR ((tcd.applyschemefeedcost = 0 OR tcd.applyschemefeedcost is null) AND MM.transactiontypeid = 683 AND FIND_IN_SET(MM.itemid,@feeditemids)
            AND FIND_IN_SET(MM.transactionid, @issueids) AND MM.transactiondate <= TEM.batch_close_date);
			
		/* ELSEIF(p_applyschemefeedcost = 0) THEN
        
             DROP TEMPORARY TABLE IF EXISTS temptablefeeddetail;
	         CREATE TEMPORARY TABLE temptablefeeddetail
            SELECT IFNULL(SUM(itemvalue),0) as feedcost,
			IFNULL(fnc_calculate_cummactconcbf(TEM.cbfbatchid,TEM.shedid,TEM.batch_close_date, p_companyid),0) as totalfeedconsumed,
            TEM.cbfbatchid as cbfbatchid
            FROM materialmovement MM
            INNER JOIN temwarehousebin TEM ON TEM.warehousebinid = MM.fromwarehousebinid
            WHERE MM.transactiontypeid = 683
            AND FIND_IN_SET(MM.itemid,@feeditemids)
            AND FIND_IN_SET(MM.transactionid, @issueids)
            AND MM.transactiondate <= TEM.batch_close_date;
		END IF;*/
     
        DROP TEMPORARY TABLE IF EXISTS temptablemedicineissue;
	    CREATE TEMPORARY TABLE temptablemedicineissue
        SELECT group_concat(DISTINCT CDT.issueid)as medissueids, group_concat(DISTINCT CDC.itemid)as meditemid,CDT.cbf_batchid as cbf_batchid  
		FROM cbf_dailytransaction CDT 
		LEFT JOIN cbf_dailyconsumption CDC ON CDC.cbfdailytransactionid = CDT.id
		where FIND_IN_SET(CDT.cbf_batchid,p_cbf_batchid)
		AND CDC.consumptiontypeid = 862
        group by CDT.cbf_batchid;
     
		
		-- IF(p_applyschememedicinecost = 1) THEN
			SET @schememedicinecost = 0;
            DROP TEMPORARY TABLE IF EXISTS temptablemedicinedetail;
			CREATE TEMPORARY TABLE temptablemedicinedetail
			SELECT CASE WHEN tcd.applyschememedicinecost = 1 THEN (CS.medicinecost * CB.batch_place_qty)  
            ELSE (SUM(MM.itemvalue)) END as totalmedicinecost ,CB.id as cbfbatchid
			FROM cbf_batch_details CB 
            LEFT JOIN tempSchemeDetails tcd ON tcd.cbf_batchid = CB.id
			LEFT JOIN coststructure CS ON CS.id = CB.scheme_id
            LEFT JOIN temwarehousebin TEM ON TEM.cbfbatchid = CB.id
            LEFT JOIN materialmovement MM ON TEM.warehousebinid = MM.fromwarehousebinid
            INNER JOIN temptablemedicineissue TM ON TM.cbf_batchid = TEM.cbfbatchid
			WHERE (tcd.applyschememedicinecost = 1 AND FIND_IN_SET(CB.id,p_cbf_batchid))
            OR ((tcd.applyschememedicinecost = 0 OR tcd.applyschememedicinecost is null)  AND FIND_IN_SET(MM.transactionid, TM.medissueids)
            AND MM.transactiontypeid=683
            AND FIND_IN_SET(MM.itemid, TM.meditemid));

		/*ELSEIF(p_applyschememedicinecost = 0) THEN
            
            DROP TEMPORARY TABLE IF EXISTS temptablemedicinedetail;
			CREATE TEMPORARY TABLE temptablemedicinedetail
            
			SELECT (SUM(MM.itemvalue)) as totalmedicinecost,
            TEM.cbfbatchid as cbfbatchid
            FROM materialmovement MM
            INNER JOIN temwarehousebin TEM ON TEM.warehousebinid = MM.fromwarehousebinid
            INNER JOIN temptablemedicineissue TM ON TM.cbf_batchid = TEM.cbfbatchid
			WHERE FIND_IN_SET(MM.transactionid, TM.medissueids)
            AND MM.transactiontypeid=683
            AND FIND_IN_SET(MM.itemid, TM.meditemid);
		END IF;*/
        
		-- FOR VACCINE
        DROP TEMPORARY TABLE IF EXISTS temptablevaccineissue;
	    CREATE TEMPORARY TABLE temptablevaccineissue
        SELECT group_concat(CDT.issueid)as vacissueids, group_concat(CDC.itemid)as vacitemids,CDT.cbf_batchid as cbf_batchid -- INTO @vacissueids, @vacitemids 
		FROM cbf_dailytransaction CDT 
		LEFT JOIN cbf_dailyconsumption CDC ON CDC.cbfdailytransactionid = CDT.id
		where FIND_IN_SET(CDT.cbf_batchid,p_cbf_batchid)
		AND CDC.consumptiontypeid = 863;
		
		-- IF(p_applyschemevaccinecost = 1) THEN
            DROP TEMPORARY TABLE IF EXISTS temptablevaccinedetail;
			CREATE TEMPORARY TABLE temptablevaccinedetail
			SELECT CASE WHEN tcd.applyschemevaccinecost = 1 THEN (CS.vaccinecost * CB.batch_place_qty) 
            ELSE (SUM(MM.itemvalue)) END as totalvaccinecost,
            CB.id as cbfbatchid
			FROM cbf_batch_details CB 
            LEFT JOIN tempSchemeDetails tcd ON tcd.cbf_batchid = CB.id
			LEFT JOIN coststructure CS ON CS.id = CB.scheme_id
			LEFT JOIN temwarehousebin TEM ON TEM.cbfbatchid = CB.id
			LEFT JOIN materialmovement MM ON TEM.warehousebinid = MM.fromwarehousebinid
			INNER JOIN temptablevaccineissue TV ON TV.cbf_batchid = TEM.cbfbatchid
			WHERE (tcd.applyschemevaccinecost = 1 AND FIND_IN_SET(CB.id,p_cbf_batchid))
            OR ((tcd.applyschememedicinecost = 0 OR tcd.applyschememedicinecost is null) AND FIND_IN_SET(MM.transactionid, TV.vacissueids)
            AND MM.transactiontypeid=683
            AND FIND_IN_SET(MM.itemid, TV.vacitemids));
		
			
		/*ELSEIF(p_applyschemevaccinecost = 0) THEN
		    
			DROP TEMPORARY TABLE IF EXISTS temptablevaccinedetail;
			CREATE TEMPORARY TABLE temptablevaccinedetail
			SELECT (SUM(MM.itemvalue)) as totalvaccinecost,TEM.cbfbatchid as cbfbatchid 
            FROM materialmovement MM
			INNER JOIN temwarehousebin TEM ON TEM.warehousebinid = MM.fromwarehousebinid
			INNER JOIN temptablevaccineissue TV ON TV.cbf_batchid = TEM.cbfbatchid
		    WHERE FIND_IN_SET(MM.transactionid, TV.vacissueids)
            AND MM.transactiontypeid=683
            AND FIND_IN_SET(MM.itemid, TV.vacitemids);
		
		END IF;*/
        
		DROP TEMPORARY TABLE IF EXISTS temptableforalldata;
	    CREATE TEMPORARY TABLE temptableforalldata
        
		SELECT CB.id as batchid,
                CB.batch_number as batch_number,
               ROUND(((100* (IFNULL(fnc_cbfbatchwise_malefemalemortality_uptodate(CB.id,CB.live_batch_date,p_companyid),0)))/CB.batch_place_qty),2)as totalmortalitypercent,
			
			   FORMAT(((100 * fuc_calculate_mortalityfirstweek(CB.batch_place_date,(DATE_ADD( CB.batch_place_date, INTERVAL 6 DAY )),CBB.cbfbatchid)) / CB.batch_place_qty),2)as FWmortalitypercent,
			   ((fnc_getdelivered_weight_sales(CB.id, 723) + fnc_getdelivered_weight_sales(CB.id, 724)) / (fnc_getdelivered_quantity_sales(CB.id, 723) + fnc_getdelivered_quantity_sales(CB.id, 724)))as avgweightofbird,
			   FORMAT((TFD.totalfeedconsumed / (fnc_getdelivered_weight(CB.id))),2)as fcr,
             
			 --  (IFNULL((CB.costperbird * CB.batch_place_qty),0) + IFNULL(TFD.totalfeedcost,0) + IFNULL(TMD.totalmedicinecost,0) + IFNULL(TVD.totalvaccinecost,0) + IFNULL((fnc_getdelivered_weight(CB.id) * CS.administrationcost),0))as actualproductioncost,
			  ((IFNULL(CS.chickcost,0) * IFNULL(CB.batch_place_qty,0)) + IFNULL(TFD.totalfeedcost,0)  + IFNULL(TMD.totalmedicinecost,0)  + IFNULL(TVD.totalvaccinecost,0) + (CB.batch_place_qty * CS.administrationcost))as actualproductioncost,
              FORMAT((CS.incentiveperkg * fnc_getdelivered_weight(CB.id)),2) as additionalincentive,
               fuc_calculate_mortalityfirstweek(CB.batch_place_date,(DATE_ADD( CB.batch_place_date, INTERVAL 6 DAY )),CBB.cbfbatchid) as FWmortality,
			   CSD.productioncost as schemeproductioncost,
               CS.totalmortality as totalmortality,
               CS.exbirdincentive as exbirdincentive,
               CS.productionincentive as productionincentive,
               CSD.rearingcharge as rearingcharge,
			   CSD.fcr as stdfcr,
               CB.batch_place_qty as batch_place_qty,
               CS.firstweekmortalityper as firstweekmortalityper,
               CS.feedcost as stdfeedcost,
               CS.id as coststructureid,
               CB.costperbird as costperbird,
               IFNULL(CB.sale_qty,0) as sale_qty,
               IFNULL(CB.processing_qty,0) as processing_qty,
               IFNULL(TFD.totalfeedconsumed,0) as totalfeedconsumed,
               IFNULL(TFD.totalfeedcost,0) as totalfeedcost,
               IFNULL(TMD.totalmedicinecost,0) as totalmedicinecost,
               IFNULL(TVD.totalvaccinecost,0)as totalvaccinecost,
               00000000.00 as actualrearingcharge,
               00000000.00 as FWmortalitydeduction,
               00000000.00 as rearingchrgebird,
			   00000000.00 as fcrdeduction,
		       00000000.00 as actualrearingchargekg,
               tcd.applyschemefeedcost, 
               tcd.applyschememedicinecost, 
               tcd.applyschemevaccinecost, 
               tcd.editdeductionvalues
             
              
		FROM cbf_batch_details CB
        LEFT JOIN tempSchemeDetails tcd ON tcd.cbf_batchid = CB.id
        LEFT JOIN cbf_batchbalance CBB ON CBB.cbfbatchid = CB.id
		LEFT JOIN temptablefeeddetail TFD ON TFD.cbfbatchid = CB.id
        LEFT JOIN temptablemedicinedetail TMD ON TMD.cbfbatchid = CB.id
        LEFT JOIN temptablevaccinedetail TVD ON TVD.cbfbatchid = CB.id
		LEFT JOIN coststructure CS ON CS.id = CB.scheme_id
		LEFT JOIN coststructuredetail CSD ON CSD.coststructureid = CS.id
		LEFT JOIN cbf_chick_placement CP ON CP.batch_id = CB.id 
		-- LEFT JOIN cbf_lifting_schedule_details CLS ON CLS.cbf_batchid = CB.id
		WHERE FIND_IN_SET(CB.id,p_cbf_batchid);
        
       select * from temptableforalldata;
        
        SET SQL_SAFE_UPDATES=0;
        update temptableforalldata 
        SET actualrearingcharge = FORMAT(IF((actualproductioncost/fnc_getdelivered_weight(batchid)) < schemeproductioncost,
        (rearingcharge + ((schemeproductioncost - (actualproductioncost/fnc_getdelivered_weight(batchid))) * productionincentive) / 100) ,
        (rearingcharge - (((actualproductioncost/fnc_getdelivered_weight(batchid)) - schemeproductioncost) * productionincentive) / 100)
        ),2),
        FWmortalitydeduction=ROUND(((FWmortality - (batch_place_qty * (IFNULL(firstweekmortalityper,0) / 100))) * costperbird),2)
        where FIND_IN_SET(batchid,p_cbf_batchid);
       
        SET SQL_SAFE_UPDATES=0;
        update temptableforalldata   
        SET rearingchrgebird  = IFNULL(FORMAT(((fnc_getdelivered_weight(batchid) * actualrearingcharge) / (IFNULL(sale_qty,0) + IFNULL(processing_qty,0))),3),0),
        -- FORMAT(IFNULL(FORMAT(((fnc_getdelivered_weight(batchid) * actualrearingcharge) / (IFNULL(sale_qty,0) + IFNULL(processing_qty,0))),2),0),2),
        fcrdeduction =FORMAT(IFNULL(FORMAT(fnc_fcrdeduction(totalfeedconsumed, fcr, (actualproductioncost / batch_place_qty), batchid, applyschemefeedcost, totalfeedcost),2),0),2) ,
		actualrearingchargekg = FORMAT(actualrearingcharge,2) 
        where FIND_IN_SET(batchid,p_cbf_batchid);
        
        
        
        select *,ROUND(((rearingchargepayableone+accessamt+saleincentive+fcrincentive)-(fcrdeduction+totalmortalitydeduction+shortageamt)),2)as rearingchargepayable
        from(
        select T.*,   ROUND(IFNULL((  ((fnc_getdelivered_weight(T.batchid)*T.actualrearingcharge)+(FORMAT(fnc_mortalityincentive(T.totalmortalitypercent, T.batchid),2)))),0),2) as rearingchargepayableone,
                   FORMAT(fnc_mortalityincentive(T.totalmortalitypercent, T.batchid),2) as mortalityincentive,
				   fnc_shortageamt((FORMAT((IFNULL(SUM(CLS.batchcost),0) / IFNULL(SUM(CLS.approvedweight),0)),2)),(ROUND((IFNULL((T.actualproductioncost),0)/fnc_getdelivered_weight_sales(T.batchid, 723)),2)),T.batchid,CDWD.birdshortage,T.avgweightofbird)as shortageamt,
			       fnc_eccesseamt((FORMAT((IFNULL(SUM(CLS.batchcost),0) / IFNULL(SUM(CLS.approvedweight),0)),2)),(ROUND((IFNULL((T.actualproductioncost),0)/fnc_getdelivered_weight_sales(T.batchid, 723)),2)),T.batchid,CDWD.excessbirds,T.avgweightofbird)as accessamt,
				   ROUND((((IFNULL(T.stdfcr,0)-T.fcr)*fnc_getdelivered_weight_sales(T.batchid, 723))*T.stdfeedcost),2)as fcrincentive,
                   ROUND((fnc_salwincentive((FORMAT((IFNULL(SUM(CLS.batchcost),0) / IFNULL(SUM(CLS.approvedweight),0)),2)),T.coststructureid)*fnc_getdelivered_weight_sales(T.batchid, 723)),2)as saleincentive,
				  FORMAT(fnc_mortalitydeduction(T.totalmortalitypercent, T.FWmortalitypercent, T.batchid),2) as totalmortalitydeduction
	       
        from temptableforalldata T
        LEFT JOIN cbf_lifting_schedule_details CLS ON CLS.cbf_batchid = T.batchid
        LEFT JOIN cbf_delivery_weights_detail CDWD  ON CDWD.cbf_batchid = T.batchid
        LEFT JOIN cbf_delivery_weights CD ON CD.id = CDWD.cbf_delivery_weightsid
		where FIND_IN_SET(T.batchid,p_cbf_batchid)
        GROUP BY T.batchid
        )as temp;
		END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getgrowingchargesdetail_bycbfbatchid`(
	IN p_cbf_batchid INT,
    IN p_applyschemefeedcost TINYINT,
	IN p_applyschememedicinecost TINYINT,
    IN p_applyschemevaccinecost TINYINT,
    IN p_editdeductionvalues TINYINT,
    IN p_companyid INT
)
BEGIN
	SET @@sql_mode = '';
	IF EXISTS(SELECT id FROM cbf_growingcharges WHERE cbf_batchid = p_cbf_batchid and statusid=2103)THEN -- Approved growing charges
    
		SELECT CGC.*,
			   CGC.id,
			   FE.farmer_name,
			   FE.farm_name,
			   DATE_FORMAT(CGC.firstdaydate,'%d/%m/%Y') as firstdaydate,
			   DATE_FORMAT(CGC.batchclosedate,'%d/%m/%Y') as batchclosedate,
			   FE.address,
			   I.itemname as breeditem,
               B.branchname
               
        FROM cbf_growingcharges CGC 
        LEFT JOIN cbf_farmerenquiry FE ON FE.id = CGC.farmerenquiryid
        LEFT JOIN item I ON I.id = CGC.breeditemid
        LEFT JOIN commonbranch B ON B.id = CGC.branchid
        
        WHERE CGC.cbf_batchid = p_cbf_batchid;
    
    ELSE
		SET @totalfeedcost = null;
		SET @totalmedicinecost = null;
		SET @totalvaccinecost = null;
		SET @totalfeedconsumed = null;

		-- FOR FEED
		SET @warehousebinid = null;
		SELECT SDD.warehousebinid INTO @warehousebinid
		FROM cbf_farmerenquiry_sheddimensiondetail SDD
		LEFT JOIN cbf_batchbalance CBB ON CBB.cbfshedid = SDD.id
		WHERE CBB.cbfbatchid = p_cbf_batchid;
        
        SET @issueids = null;
		SET @feeditemids = null;
		SELECT GROUP_CONCAT(CDT.issueid), GROUP_CONCAT(CDC.itemid) INTO @issueids, @feeditemids
		FROM cbf_dailytransaction CDT
		LEFT JOIN cbf_dailyconsumption CDC ON CDC.cbfdailytransactionid = CDT.id
		WHERE CDT.cbf_batchid = p_cbf_batchid
		AND CDC.consumptiontypeid = 861;
        
        SET @feedtransferin = 0;
        SELECT IFNULL(SUM(quantity), 0) into @feedtransferin
		FROM materialmovement
        WHERE companyid = p_companyid AND
		transactiontypeid in(681, 682, 684) AND
		towarehousebinid = @warehousebinid AND
		FIND_IN_SET(itemid, @feeditemids) AND companyid = p_companyid;
        
        SET @feedtransferout = 0;
        SELECT IFNULL(SUM(quantity), 0) into @feedtransferout
		FROM materialmovement
        WHERE companyid = p_companyid AND
		transactiontypeid in(682) AND
		fromwarehousebinid = @warehousebinid AND
		FIND_IN_SET(itemid, @feeditemids) AND companyid = p_companyid;
		
		IF(p_applyschemefeedcost = 1) THEN
				
			SELECT IFNULL(fnc_calculate_cummactconcbf(p_cbf_batchid, CBB.cbfshedid, CB.live_batch_date, p_companyid),0),
				   (IFNULL(fnc_calculate_cummactconcbf(p_cbf_batchid, CBB.cbfshedid, CB.live_batch_date, p_companyid),0) * CS.feedcost)
			INTO @totalfeedconsumed, @totalfeedcost
				   
			FROM cbf_batch_details CB 
			LEFT JOIN coststructure CS ON CS.id = CB.scheme_id
            LEFT JOIN cbf_batchbalance CBB ON CBB.cbfbatchid = CB.id
			
			WHERE CB.id = p_cbf_batchid
			AND CB.companyid = p_companyid;
			
		ELSEIF(p_applyschemefeedcost = 0) THEN
		
			-- SELECT SUM(MD.issuequantity),
				  -- SUM(MD.totalcost) 
			
            SET @feedcost = 0;
            
            SELECT IFNULL(SUM(itemvalue),0) INTO @feedcost
            FROM materialmovement MM
            -- LEFT JOIN materialissuedetail MID ON MID.id = MM.transactionid
            WHERE MM.transactiontypeid = 683
            AND FIND_IN_SET(MM.itemid,@feeditemids)
            AND FIND_IN_SET(MM.transactionid, @issueids)
            AND MM.transactiondate <= (SELECT batch_close_date FROM cbf_batch_details WHERE id = p_cbf_batchid);
				 
			SELECT IFNULL(fnc_calculate_cummactconcbf(p_cbf_batchid, CBB.cbfshedid, CB.batch_close_date, p_companyid),0),
						@feedcost
			INTO @totalfeedconsumed, @totalfeedcost
				   
			FROM cbf_batch_details CB 
            LEFT JOIN cbf_batchbalance CBB ON CB.id = CBB.cbfbatchid
		   -- AND CDC.itemid = MD.itemid
			
			WHERE CB.id = p_cbf_batchid
			AND CB.companyid = p_companyid;
		
		END IF;
		
		-- FOR MEDICINE
        SET @medissueids = null;
        SET @meditemid = null;
        SELECT group_concat(DISTINCT CDT.issueid), group_concat(DISTINCT CDC.itemid) INTO @medissueids, @meditemid
		FROM cbf_dailytransaction CDT 
		LEFT JOIN cbf_dailyconsumption CDC ON CDC.cbfdailytransactionid = CDT.id
		where CDT.cbf_batchid = p_cbf_batchid
		AND CDC.consumptiontypeid = 862;
		
		IF(p_applyschememedicinecost = 1) THEN
            
            SET @schememedicinecost = 0;
			SELECT (CS.medicinecost * CB.batch_place_qty) INTO @totalmedicinecost
			FROM cbf_batch_details CB 
			LEFT JOIN coststructure CS ON CS.id = CB.scheme_id
			WHERE CB.id = p_cbf_batchid;
            
		ELSEIF(p_applyschememedicinecost = 0) THEN
			SELECT (SUM(MM.itemvalue)) INTO @totalmedicinecost 
            FROM materialmovement MM
			WHERE FIND_IN_SET(MM.transactionid, @medissueids)
            AND MM.transactiontypeid=683
            AND FIND_IN_SET(MM.itemid, @meditemid);
		END IF;
		
		-- FOR VACCINE
        
        SET @vacissueids = null;
        SET @vacitemids = null;
        SELECT group_concat(CDT.issueid), group_concat(CDC.itemid) INTO @vacissueids, @vacitemids 
		FROM cbf_dailytransaction CDT 
		LEFT JOIN cbf_dailyconsumption CDC ON CDC.cbfdailytransactionid = CDT.id
		where CDT.cbf_batchid = p_cbf_batchid
		AND CDC.consumptiontypeid = 863;
		
		IF(p_applyschemevaccinecost = 1) THEN
			SET @schemevaccinecost = 0;
			SELECT (CS.vaccinecost * CB.batch_place_qty) INTO @totalvaccinecost
			FROM cbf_batch_details CB 
			LEFT JOIN coststructure CS ON CS.id = CB.scheme_id
			WHERE CB.id = p_cbf_batchid;
			
		ELSEIF(p_applyschemevaccinecost = 0) THEN
			SELECT (SUM(MM.itemvalue)) INTO @totalvaccinecost 
            FROM materialmovement MM
		    WHERE FIND_IN_SET(MM.transactionid, @vacissueids)
            AND MM.transactiontypeid=683
            AND FIND_IN_SET(MM.itemid, @vacitemids);
		END IF;
		
        SET @batchid = null;
		SET @actualrearingcharge = null;
		SET @totalmortalitypercent = null;
		SET @FWmortalitypercent = null;
		SET @avgweightofbird = null;
		SET @fcr = null;
		SET @actualproductioncost = null;
		SET @additionalincentive = null;
		SET @FWmortality = null;
		SET @schemeproductioncost = null;
        SET @schemetotalmortality = 0;
        SET @exbirdincentive = 0;
        SET @productionincentive = 0;
        SET @rearingcharge = 0;
        SET @firstdaydate = null;
        
		SELECT CB.id,
              ROUND(((100* (IFNULL(fnc_cbfbatchwise_malefemalemortality_uptodate(CB.id,CB.live_batch_date,p_companyid),0)))/CB.batch_place_qty),2),
			 
			   FORMAT(((100 * fuc_calculate_mortalityfirstweek(CB.batch_place_date,(DATE_ADD( CB.batch_place_date, INTERVAL 6 DAY )),CBB.cbfbatchid)) / CB.batch_place_qty),2),
			   ((fnc_getdelivered_weight_sales(CB.id, 723) + fnc_getdelivered_weight_sales(CB.id, 724)) / (fnc_getdelivered_quantity_sales(CB.id, 723) + fnc_getdelivered_quantity_sales(CB.id, 724))),
			   FORMAT((@totalfeedconsumed / (fnc_getdelivered_weight(CB.id))),2),
			   ((CS.chickcost * CB.batch_place_qty) + @totalfeedcost + @totalmedicinecost + @totalvaccinecost + (CB.batch_place_qty * CS.administrationcost)),
              FORMAT((CS.incentiveperkg * fnc_getdelivered_weight(CB.id)),2),
               fuc_calculate_mortalityfirstweek(CB.batch_place_date,(DATE_ADD( CB.batch_place_date, INTERVAL 6 DAY )),CBB.cbfbatchid),
			   CSD.productioncost,
               CS.totalmortality,
               CS.exbirdincentive,
               CS.productionincentive,
               CSD.rearingcharge
			   
		INTO @batchid, @totalmortalitypercent, 
			 @FWmortalitypercent, @avgweightofbird, @fcr,
			 @actualproductioncost, @additionalincentive,
			 @FWmortality, @schemeproductioncost,
             @schemetotalmortality, @exbirdincentive, 
             @productionincentive, @rearingcharge
		FROM cbf_batch_details CB
        LEFT JOIN cbf_batchbalance CBB ON CBB.cbfbatchid = CB.id
		LEFT JOIN coststructure CS ON CS.id = CB.scheme_id
		LEFT JOIN coststructuredetail CSD ON CSD.coststructureid = CS.id
		LEFT JOIN cbf_chick_placement CP ON CP.batch_id = CB.id 
		WHERE CB.id = p_cbf_batchid LIMIT 1;
        
        IF((@actualproductioncost/fnc_getdelivered_weight(@batchid)) < @schemeproductioncost)THEN
			SELECT (@rearingcharge + ((@schemeproductioncost - (@actualproductioncost/fnc_getdelivered_weight(@batchid))) * @productionincentive) / 100) INTO @actualrearingcharge;
        ELSE
			SELECT (@rearingcharge - (((@actualproductioncost/fnc_getdelivered_weight(@batchid)) - @schemeproductioncost) * @productionincentive) / 100) INTO @actualrearingcharge;
        END IF;
     
        SET @firstweekmortalityper = 0;
        SET @fwdeduction = 0;
        SELECT
        IFNULL(FORMAT(((@FWmortality - (CB.batch_place_qty * (IFNULL(CS.mortalitypercentage,0) / 100))) * CS.chickcost),2),0),
        IFNULL(CS.firstweekmortalityper,0)
        INTO @fwdeduction,@firstweekmortalityper
        FROM cbf_batch_details CB
		LEFT JOIN coststructure CS ON CS.id = CB.scheme_id
		LEFT JOIN coststructuredetail CSD ON CSD.coststructureid = CS.id 
		WHERE CB.id = p_cbf_batchid LIMIT 1;
        
        SET @rearingchrgebird = 0;
        SET @fcrdeduction = 0;
        SELECT 
        IFNULL(FORMAT(((fnc_getdelivered_weight(CB.id) * ROUND(@actualrearingcharge,2)) / (IFNULL(CB.sale_qty,0) + IFNULL(CB.processing_qty,0))),2),0),
	
        IFNULL(FORMAT(fnc_fcrdeduction(@totalfeedconsumed, @fcr, (@actualproductioncost / CB.batch_place_qty), CB.id, p_applyschemefeedcost, @totalfeedcost),2),0)
        INTO @rearingchrgebird, @fcrdeduction
        FROM cbf_batch_details CB
        WHERE CB.id = p_cbf_batchid;
        
       
        IF EXISTS(SELECT id from cbf_chick_placement where batch_id = p_cbf_batchid) then
			select first_day_date 
            INTO @firstdaydate
            from cbf_chick_placement
            where batch_id = p_cbf_batchid;
        else
			select firstdaydate
            INTO @firstdaydate
            from cbf_openingbalancedetail
            where cbfbatchid = p_cbf_batchid;
        end if;
        
        -- get excess birds or bird shortage from last delivery
        SET @excessbirds = 0;
        SET @birdshortage = 0;
        SELECT IFNULL(CDD.excessbirds,0), IFNULL(CDD.birdshortage,0)
        INTO @excessbirds, @birdshortage
        FROM cbf_delivery_weights_detail CDD
        LEFT JOIN cbf_delivery_weights CD ON CD.id = CDD.cbf_delivery_weightsid
        WHERE CDD.cbf_batchid = p_cbf_batchid
        AND CD.islastdelivery = 1
        LIMIT 1;
        
		SET @avgliftingage = 0;
        select   
			    ROUND((sum((DATEDIFF(CDW.liftingdate,CBD.batch_place_date))*CDW.totaldeliveredqty)/sum(CDW.totaldeliveredqty)),0) INTO @avgliftingage 
				from cbf_batch_details CBD
				LEFT JOIN cbf_delivery_weights_detail CDWD ON CDWD.cbf_batchid = CBD.id
				LEFT JOIN cbf_delivery_weights CDW ON CDW.id = CDWD.cbf_delivery_weightsid
				Where CBD.id=p_cbf_batchid group by CBD.id; 
        
        select *, ROUND((((((fnc_getdelivered_weight(cbf_batchid) * ROUND(@actualrearingcharge,2))))+mortalityincentive+excessbirdincentive+fcrincentive+saleincentive)-
        (totalmortalitydeduction+fcrdeduction+shortageamt)),2)as rearingchargepayable, -- Rearingchargepayable Amount
        
        (( ROUND((((((fnc_getdelivered_weight(cbf_batchid) * ROUND(@actualrearingcharge,2))))+mortalityincentive+excessbirdincentive+fcrincentive+saleincentive)-
        (totalmortalitydeduction+fcrdeduction+shortageamt)),2)*tdsrate)/100)as tds, -- TDS Amount is calculated
        tdsrate as tdsrateone,
        ROUND((ROUND((((fnc_getdelivered_weight(cbf_batchid)*ROUND(@actualrearingcharge,2))+mortalityincentive+excessbirdincentive+fcrincentive+saleincentive)-
        (totalmortalitydeduction+fcrdeduction+shortageamt)),2)-
        (( ROUND((((((fnc_getdelivered_weight(cbf_batchid) * ROUND(@actualrearingcharge,2))))+mortalityincentive+excessbirdincentive+fcrincentive+saleincentive)-
        (totalmortalitydeduction+fcrdeduction+shortageamt)),2)*tdsrate)/100)),2)as netpayableamt -- Netpayableamt is calculated by considering TDS 
        
        FROM(
		SELECT CB.id as cbf_batchid,
					CB.batch_number,
				   CB.farmer_enquiry_id as farmerenquiryid,
				   FE.farmer_name,
				   FE.farm_name,
				   CB.scheme_id as schemeid,
                   CS.`name` as schemename, 
				   DATE_FORMAT(CB.batch_place_date,'%d/%m/%Y') as batchplacedate,
				   DATE_FORMAT(@firstdaydate,'%d/%m/%Y') as firstdaydate,
				   DATE_FORMAT(CB.batch_close_date,'%d/%m/%Y') as batchclosedate,
				   FE.address,
				   CB.breed_id as breeditemid,
				   I.itemname as breeditem,
				   CB.batch_place_qty as batchplaceqty,
				   IFNULL(FORMAT(((CB.culls * 100) / CB.live_batch_qty),2),0) as cullspercent,
                  IFNULL(fnc_cbfbatchwise_malefemalemortality_uptodate(CB.id,CB.live_batch_date,p_companyid),0)as totalmortality,
				   IFNULL(@totalmortalitypercent,0) as totalmortalitypercent,
				   CB.live_batch_qty as birdsavailable,
				   FE.branch_id as branchid,
				   B.branchname,
				   IFNULL(CB.costperbird,0) as chickrate,
                   IFNULL(( CB.batch_place_qty* CS.administrationcost),0) as administrationcost,
				   IFNULL(@totalfeedcost,0) as totalfeedcost,
				   IFNULL(@totalmedicinecost,0) as totalmedicinecost,
				   IFNULL(@totalvaccinecost,0) as totalvaccinecost,
				   IFNULL(@totalfeedconsumed,0) as totalfeedconsumed,
				   IFNULL(p_applyschemefeedcost,0) as applyschemefeedcost,
				   IFNULL(p_applyschememedicinecost,0) as applyschememedicinecost,
				   IFNULL(p_applyschemevaccinecost,0) as applyschemevaccinecost,
				   IFNULL(p_editdeductionvalues,0) as editdeductionvalues,
				   IFNULL(CSD.productioncost,0) as stdproductioncost,
				   IFNULL(CSD.rearingcharge,0) as stdrearingchargekg,
				   IFNULL(CSD.fcr,0) as stdfcr,
				   -- fnc_cbffirstweekmortality(CB.batch_place_date, CB.id) as FWmortality,
				   IFNULL(@FWmortality,0) as FWmortality,
				   IFNULL(@FWmortalitypercent,0) as FWmortalitypercent,
				   IFNULL(@actualproductioncost,0) as actualproductioncost,
                   ROUND((IFNULL(@actualproductioncost,0)/fnc_getdelivered_weight_sales(CB.id, 723)),2) as productioncostperkg,
                   ROUND((((2-IFNULL(@avgweightofbird,0))*0.25)+@fcr),2) as cfcr,
				   @feedtransferin as feedtransferin,
				   @feedtransferout as feedtransferout,
				   IFNULL(@fcr,0) as fcr,
				   fnc_getdelivered_weight_sales(CB.id, 723) as totalsaleweight,
				   fnc_getdelivered_weight_sales(CB.id, 724) as totalprocessingweight,
				   -- fnc_getdelivered_quantity_sales(CB.id, 723) as totalsaleqty,
				   IFNULL(CB.sale_qty,0) as totalsaleqty,
                   -- fnc_getdelivered_quantity_sales(CB.id, 724) as totalprocessingqty,
				   IFNULL(CB.processing_qty,0) as totalprocessingqty,
                   (fnc_getdelivered_quantity_sales(CB.id, 723) + fnc_getdelivered_quantity_sales(CB.id, 724)) as totalbirdssold,
				   fnc_getdelivered_weight(CB.id) as totalweightofbird,
				   -- ((fnc_getdelivered_weight_sales(CB.id, 723) + fnc_getdelivered_weight_sales(CB.id, 724)) / (fnc_getdelivered_quantity_sales(CB.id, 723) + fnc_getdelivered_quantity_sales(CB.id, 724))) as avgweightofbird,
				   IFNULL(@avgweightofbird,0) as avgweightofbird,
				   FORMAT((IFNULL(SUM(CLS.batchcost),0) / IFNULL(SUM(CLS.approvedweight),0)),2) as avgsellingrate,
				   FORMAT(@actualrearingcharge,2) as actualrearingchargekg,
                   fnc_getdelivered_weight(CB.id) as abc,
				   (ROUND(fnc_getdelivered_weight(CB.id),2) * ROUND(@actualrearingcharge,2)) as totalrearingcharge,
				   @rearingchrgebird as rearingchrgebird,
                   0 as additionalincentive,
				   FORMAT(fnc_mortalityincentive(@totalmortalitypercent, CB.id),2) as mortalityincentive,
				   FORMAT(fnc_mortalitydeduction(@totalmortalitypercent, @FWmortalitypercent, CB.id),2) as totalmortalitydeduction,
                   @avgliftingage as avgliftingage,
				   FORMAT(((@avgweightofbird * 1000) / @avgliftingage ),2) as perdaygrowthgrm,
				   FORMAT(((((100 - @totalmortalitypercent) * @avgweightofbird) / (@fcr * @avgliftingage)) * 100),2) as eefvalue,
                   @avgweightofbird,
                   @totalmortalitypercent,
                   @fcr,
                   @avgliftingage,
				   fnc_geteefgrade(((((100 - @totalmortalitypercent) * @avgweightofbird) / (@fcr * @avgliftingage )) * 100)) as eefgradeid,
				
                  @fcrdeduction as fcrdeduction,
				  @firstweekmortalityper as firstweekmortalityper,
				  @fwdeduction as fwdeduction,
                  fnc_getdelivered_weight(CB.id) as dweight,
                  @rearingchrgebird as rearingchrgebird1,
				   0 as vehicleincentive,
				   -- fnc_excessbirdincentive(@excessbirds, @totalmortalitypercent, @schemetotalmortality, @exbirdincentive, @avgweightofbird) as excessbirdincentive,
				   0 as birdshortageamt,
				   0 as compensateamt,
				   IFNULL(@birdshortage,0) as birdshortage,
				   IFNULL(@excessbirds,0) as excessbirds,
				   IFNULL(ATD.rate,0) as tdsrate,
				   0 as tds,
				   0 as netpayableamt, 
				   0 as freightamt,
				   0 as totaldownpayment,
				   0 as total,
				   IFNULL(CGC.statusid, 2101) as statusid,
				   IFNULL(@schemeproductioncost,0) as schemeproductioncost,
				   fnc_shortageamt((FORMAT((IFNULL(SUM(CLS.batchcost),0) / IFNULL(SUM(CLS.approvedweight),0)),2)),(ROUND((IFNULL(@actualproductioncost,0)/fnc_getdelivered_weight_sales(CB.id, 723)),2)),CB.id,@birdshortage,@avgweightofbird)as shortageamt,
				   fnc_eccesseamt((FORMAT((IFNULL(SUM(CLS.batchcost),0) / IFNULL(SUM(CLS.approvedweight),0)),2)),(ROUND((IFNULL(@actualproductioncost,0)/fnc_getdelivered_weight_sales(CB.id, 723)),2)),CB.id,@excessbirds,@avgweightofbird)as excessbirdincentive,
                   ROUND((((IFNULL(CSD.fcr,0)-@fcr)*fnc_getdelivered_weight_sales(CB.id, 723))*CS.feedcost),2)as fcrincentive,
                   ROUND((fnc_salwincentive((FORMAT((IFNULL(SUM(CLS.batchcost),0) / IFNULL(SUM(CLS.approvedweight),0)),2)),CS.id)*fnc_getdelivered_weight_sales(CB.id, 723)),2)as saleincentive
                 
				   
			FROM cbf_batch_details CB 
			LEFT JOIN cbf_lifting_schedule_details CLS ON CLS.cbf_batchid = CB.id
			LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = CB.id 
			LEFT JOIN cbf_dailyconsumption CDC ON CDT.id = CDC.cbfdailytransactionid 
			LEFT JOIN cbf_farmerenquiry FE ON FE.id = CB.farmer_enquiry_id
			LEFT JOIN cbf_farmeragreement FA ON FA.farmerenquiryid = FE.id
			LEFT JOIN party P ON P.id = FA.partyid
			LEFT JOIN account_tds ATD ON ATD.id = P.tdsid -- Added for TDS calculation.
			LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.farmerenquiryid = FE.id
			LEFT JOIN cbf_chick_placement CP ON CP.batch_id = CB.id
			LEFT JOIN item I ON I.id = CB.breed_id
			LEFT JOIN commonbranch B ON B.id = FE.branch_id
			LEFT JOIN coststructure CS ON CS.id = CB.scheme_id
			LEFT JOIN coststructuredetail CSD ON CS.id = CSD.coststructureid
			LEFT JOIN cbf_growingcharges CGC ON CGC.cbf_batchid = CB.id
			
			WHERE CB.id = p_cbf_batchid
			AND CB.companyid = p_companyid
			GROUP BY CB.id)as temp;
            
		END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getGrpodetails_Bygrpoids`(
	IN p_grpoid VARCHAR(200)
)
BEGIN
SET @@sql_mode = '';
	SELECT 
		group_concat(GD.id) as grpodetailid,
		group_concat(GD.grpoid) as grpoid,
        SUM(GD.quantity) as quantity,
		GD.itemid,
        IG.groupname,
		GD.itemname,
        GD.unitprice,
        GD.itemdiscount,
        GD.taxpercent,
        GD.taxid,
        SUM(GD.freequantity) as freequantity,
		GD.itemunitid,
		REF1.refname as itemunitname,
		GD.remark,
        GROUP_CONCAT(GD.itembatch) as itembatch,
        POD.quantity as requiredquantity,
        POD.purchaseorderid,
        POD.pendinggrpoquantity,
        POD.id as purchaseorderdetailid,
        POD.taxpercent,
	    POD.cgstpercent,
        POD.cgstamount,
        POD.sgstpercent,
        POD.sgstamount,
        POD.igstpercent,
		POD.igstamount,
        POD.utgstpercent,
        POD.utgstamount,
        POD.sgstid,
	    POD.cgstid,
	    POD.igstid,
	    POD.utgstid,
        REF2.refname as taxtype,
        T.combinedtaxes,
		 T.taxname,
		 fnc_taxes_byids(combinedtaxes) as taxesname,
		 fnc_taxpercents_byids(combinedtaxes) as taxpercents,
		 fnc_taxtypes_byids(combinedtaxes) as taxtypes
	FROM 
		grpodetail GD
        
		 LEFT JOIN `reference` REF1 ON GD.itemunitid = REF1.id
         LEFT JOIN grpo G ON G.id = GD.grpoid
         LEFT JOIN purchaseorderdetail POD ON POD.purchaseorderid = G.purchaseorderid
         AND POD.itemid = GD.itemid
         LEFT JOIN itemgroup IG ON IG.id = GD.itemid
          LEFT JOIN tax T ON T.id = POD.taxid
		 LEFT JOIN `reference` REF2 ON T.taxtypeid = REF2.id
        
	WHERE
		FIND_IN_SET(GD.grpoid, p_grpoid)
        GROUP BY GD.itemid;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_gethatcherbatch_bylocationid`(
p_locationid VARCHAR(400),
p_companyid INT(11)
)
BEGIN
select 
HB.id as hatchbatchid,
HB.hatcherid,
H.locationid
from hatcherbatch HB
LEFT JOIN hatcher H ON H.id = HB.hatcherid

where
find_in_set(H.locationid,p_locationid) AND
HB.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getitembyitemgroup_report`(
IN p_itemgroupid varchar(100),
 IN p_companyid INT(11)
)
BEGIN

	SELECT 
		I.id,
		I.itemcode,
        I.itemgroupid,
		I.itemname,
        I.materialtypeid, 
        R1.refname as materialtypename
		
		FROM item I
		   LEFT JOIN `reference` R1 ON R1.id = I.materialtypeid
		  
	WHERE
	   FIND_IN_SET(I.itemgroupid, p_itemgroupid) AND
	   I.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getitembywarehousebin_report`(
IN p_warehousebinid varchar(255),
IN p_companyid INT(11)
)
BEGIN
SELECT 
     
        MM.itemid,
        I.itemname,
        I.id as itemidfromitem
        
FROM materialmovement MM    
LEFT JOIN item I ON I.id = MM.itemid

 WHERE 	
		MM.companyid = p_companyid AND
		FIND_IN_SET( MM.towarehousebinid, p_warehousebinid)
        group by MM.itemid; 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getlayerbatchbalance_instoke`(
    IN p_shedid INT,
    IN p_week INT
)
BEGIN
    
   SELECT 
       curhhp
   
   FROM layerperformanceobjective
   
   WHERE ageinweek = p_week;

	
     SELECT
			LBB.itemid,
            I.itemcode,
            I.itemname,
			LBB.quantity as instock
			
    FROM
		layerbatchbalance LBB
        LEFT JOIN layershedline LSL ON LBB.layershedlineid = LSL.id
        LEFT JOIN item I ON LBB.itemid = I.id
   	
	WHERE
		LBB.layershedid = p_shedid AND
        LBB.quantity != 0;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getlayerdailytransaction_byshedid`(
 In p_shedid INT,
 In p_companyid INT 
 )
begin
set @approved = "no";
 IF(EXISTS (SELECT id FROM layerdailytransaction WHERE shedid = p_shedid AND 
       statusid = 1169 AND 
       companyid = p_companyid )) then
        SET @approved = "yes";
   end if;
   select @approved as approved;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getlayereggs_bylayersetting`(
 IN p_companyid INT
)
BEGIN

	SET @defaulttableeggsitemid = null;
    SET @defaultcrackedeggsitemid = NULL;
	SET @defaultdamageeggsitemid = NULL;
    SET @defaultpulleteggsitemid = NULL;
    
    SELECT  
		defaulttableeggsitemid,defaultcrackedeggsitemid,defaultdamageeggsitemid,defaultpulleteggsitemid
		INTO @defaulttableeggsitemid,@defaultcrackedeggsitemid,@defaultdamageeggsitemid,@defaultpulleteggsitemid
	FROM
	layersetting
	WHERE companyid = p_companyid;

	-- CREATE TEMPORARY TABLE tmppurregreport
    create temporary table layereggsitem
		(	id INT(11) ,
			itemid INT(11) not null,
            itemtypeid INT(11),
			quantity INT(11) ,
			avgweight INT(11),
			remark VARCHAR(200)
		);
insert into layereggsitem
(itemid, itemtypeid, quantity,avgweight) VALUES
(@defaulttableeggsitemid,1129, 0, 0);
insert into layereggsitem
(itemid, itemtypeid, quantity,avgweight) VALUES
(@defaultcrackedeggsitemid, 1130, 0, 0);
insert into layereggsitem
(itemid, itemtypeid, quantity,avgweight) VALUES
(@defaultdamageeggsitemid, 1131, 0, 0);
insert into layereggsitem
(itemid, itemtypeid, quantity,avgweight) VALUES
(@defaultpulleteggsitemid, 1132, 0, 0);

SELECT EI.id,itemid, itemtypeid, quantity, avgweight, remark, I1.itemname from layereggsitem EI
LEFT JOIN item I1 ON EI.itemid = I1.id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getlayerreasons`(
   IN p_typeid INT,
   IN p_companyid INT
)
BEGIN
    
    SELECT
		 id,
         reason
	
    FROM
		layerreasons

	WHERE
		companyid = p_companyid AND
        typeid = p_typeid;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getlayerShedWisePlacementDetails`(
    IN p_shedid INT,
    IN p_transactiondate DATE
)
BEGIN
    SET @@sql_mode = '' ;
     SELECT
			LBB.layershedid,
			LBB.layershedlineid as shedlineid,
            LSL.linename,
			LBB.itemid,
            I.itemcode,
            I.itemname,
			SUM(LBB.quantity) as instock,
            IFNULL(fnc_layerbatchwise_birdliveqty(LBB.layerbatchid, LBB.itemid, p_transactiondate, LBB.companyid),0) as openingbalance
			
    FROM
		layerbatchbalance LBB
        LEFT JOIN layershedline LSL ON LBB.layershedlineid = LSL.id
        LEFT JOIN item I ON LBB.itemid = I.id
   	
	WHERE
		LBB.layershedid = p_shedid
        -- AND
        -- LBB.quantity != 0 
        group by LBB.layershedlineid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getPurchaserequestdetails_byrequestids`(
	IN p_purchaserequestids VARCHAR(200),
    IN p_taxcategoryid VARCHAR(50)
)
BEGIN

	SET @taxcategoryid = p_taxcategoryid ;
	SELECT 
		PRD.id as purchaserequestdetailid,
		PRD.purchaserequestid,
		PRD.itemid,
		PRD.itemname,
		SUM(PRD.quantity) as quantity,
		PRD.unitid as itemunitid,
        REF1.refname as itemunitname,
        I.unitcost,
        (SUM(PRD.quantity)*I.unitcost) as itemtotalcost,
        PRD.companyid,
        IG.groupname,
        IG.id as itemgroupid,
        I.taxcategoryid,
		REF2.refname AS taxcategoryname,
        POD.itemid as availableitemid
	FROM 
		purchaserequestdetail PRD
	
    LEFT JOIN `reference` REF1 ON PRD.unitid = REF1.id
	LEFT JOIN item I ON I.id = PRD.itemid
    LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
    LEFT JOIN `reference` REF2 ON I.taxcategoryid = REF2.id
	LEFT JOIN purchaseorder PO ON PO.purchaserequestid = PRD.purchaserequestid
	LEFT JOIN purchaseorderdetail POD ON POD.purchaseorderid = PO.id AND POD.itemid = PRD.itemid
    
    WHERE
		FIND_IN_SET(PRD.purchaserequestid, p_purchaserequestids) AND
		FIND_IN_SET( I.taxcategoryid ,@taxcategoryid) -- (p_taxcategoryid is null OR I.taxcategoryid = p_taxcategoryid)
		AND POD.itemid IS NULL 
        GROUP BY PRD.itemid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getreceipt_for_production_by_productionorderid`(
IN p_productionorder_id INT
)
BEGIN
	SELECT production_receipt_no,productionorder_id 
    FROM feedmill_receipt_from_production 
    
	WHERE productionorder_id = p_productionorder_id AND
	status_id != 2022 limit 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getsalesorder_bybatchid`(
	IN p_breederbirdsalesorderid INT,
	IN p_batchid INT,
    IN p_warehouseid INT,
    IN p_companyid INT
)
BEGIN 
IF((SELECT moduleid FROM breeder_birdsalesorder WHERE id = p_breederbirdsalesorderid) = 721) THEN
	SELECT BSOD.*, 
           I.itemname,
           BB.batchname,
           BBB.quantity as liveqty,
		    BSOD.avgweight as avgweight,
		   ((BBB.quantity)*(BSOD.avgweight)) as totalbatchsaleweight,
           ((BSOD.pendingweight)*(BSOD.avgweight)) as pendingqty,
           (BSOD.batchsaleweight / BSOD.avgweight) as batchsaleqty,
           BSO.rateperkg,
           BSOD.shedid,
           BS.warehousebinid,
           BS.warhouseid as warehouseid,
           BS.shedname,
           W.warehousename
           
           
    FROM breeder_birdsalesorderdetail BSOD
		LEFT JOIN breedershed BS ON BS.id = BSOD.shedid AND BS.warhouseid = p_warehouseid
		LEFT JOIN item I ON I.id = BSOD.itemid
        LEFT JOIN breeder_birdsalesorder BSO ON BSO.id = BSOD.breederbirdsalesorderid
		LEFT JOIN breederbatchbalance BBB ON BBB.breederbatchid = BSOD.batchid AND  BBB.breedershedid = BSOD.shedid AND BBB.itemid = BSOD.itemid
		LEFT JOIN breederbatch BB ON BB.id = BSOD.batchid
        LEFT JOIN warehouse W ON W.id = BS.warhouseid
   
    WHERE BSOD.batchid = p_batchid  AND 
    breederbirdsalesorderid = p_breederbirdsalesorderid AND BSOD.companyid = p_companyid;
   
  END IF; 
  
  IF((SELECT moduleid FROM breeder_birdsalesorder WHERE id = p_breederbirdsalesorderid) = 725) THEN
	SELECT BSOD.*, 
           I.itemname,
           LB.batchname,
           LBB.quantity as liveqty,
		    BSOD.avgweight as avgweight,
		   ((LBB.quantity)*(BSOD.avgweight)) as totalbatchsaleweight,
           ((BSOD.pendingweight)*(BSOD.avgweight)) as pendingqty,
           (BSOD.batchsaleweight / BSOD.avgweight) as batchsaleqty,
           BSO.rateperkg,
           BSOD.shedid,
           LS.warehousebinid,
           LS.warehouseid as warehouseid,
           LS.shedname,
           W.warehousename
           
           
    FROM breeder_birdsalesorderdetail BSOD
		LEFT JOIN layershed LS ON LS.id = BSOD.shedid AND LS.warehouseid = p_warehouseid
		LEFT JOIN item I ON I.id = BSOD.itemid
        LEFT JOIN breeder_birdsalesorder BSO ON BSO.id = BSOD.breederbirdsalesorderid
		LEFT JOIN layerbatchbalance LBB ON LBB.layerbatchid = BSOD.batchid AND  LBB.layershedid = BSOD.shedid AND LBB.itemid = BSOD.itemid
		LEFT JOIN layerbatch LB ON LB.id = BSOD.batchid
        LEFT JOIN warehouse W ON W.id = LS.warehouseid
   
    WHERE BSOD.batchid = p_batchid  AND 
    breederbirdsalesorderid = p_breederbirdsalesorderid AND BSOD.companyid = p_companyid;
   
  END IF; 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getsetterbatches_byscheduleid`(
	IN p_hatcheryscheduleid INT,
    IN p_companyid INT
)
BEGIN

	SELECT
		SB.id as settingno,
        SB.setterid,
        L.id as locationid,
		L.locationname,
		BB.batchname as breederbatchname,
		S.settername,
        DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
        SB.scheduleid,
        SB.status,
        R.refname,
        SB.itembatchid
	
    FROM
		setterbatch SB
	
    LEFT JOIN setter S ON SB.setterid = S.id
    LEFT JOIN breederbatch BB on SB.breederbatchid = BB.id
	LEFT JOIN location L ON S.locationid = L.id
    LEFT JOIN reference R ON R.id = SB.status    
        
	WHERE
		SB.companyid = p_companyid
        and SB.scheduleid = p_hatcheryscheduleid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getSetter_bylocation`(
IN p_compayid INT(11),
IN p_loation_id INT(11))
BEGIN
  SELECT S.id as setterid,S.settername,
  S.locationid,S.capacity,S.warehouseid,
  L.locationcode,L.locationname,W.warehousename
  FROM setter S
  LEFT JOIN location L ON L.id = locationid
  LEFT JOIN warehouse W ON W.id = S.warehouseid
  WHERE S.companyid  =p_compayid AND S.locationid =p_loation_id  ;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getShedWiseCbfPlacementDetails`(
    IN p_shedid INT,
    IN p_transactiondate DATE
)
BEGIN
SET @@sql_mode = '';
	
     SELECT
			CBB.cbfshedid,
			CBB.itemid,
            I.itemcode,
            I.itemname,
			-- (CBB.quantity) as instock,
            -- (CBB.quantity) as instockforref,
            fnc_iteminstock(CBB.itemid, SDD.warehousebinid, p_transactiondate, CBB.companyid) as instock,
            fnc_iteminstock(CBB.itemid, SDD.warehousebinid, p_transactiondate, CBB.companyid) as instockforref,
            IFNULL(fnc_cbf_batchwise_birdliveqty(CBB.cbfbatchid, p_transactiondate, CBD.batch_place_date, CBB.companyid),0) as openingbalance,
            fnc_getcbfplacementdate(CBB.cbfbatchid, CBB.companyid) as placementdate,
			IFNULL(fnc_calculate_cummamortalitycbf(CBB.cbfbatchid, CBB.cbfshedid,CBB.updateddate, CBB.companyid),0) as cummortality,
            IFNULL(fnc_calculate_cummalefemalecullscbf(CBB.cbfbatchid, CBB.cbfshedid,CBB.updateddate, CBB.companyid),0) as cumculls
    FROM
		cbf_batchbalance CBB
        LEFT JOIN cbf_batch_details CBD ON CBD.id = CBB.cbfbatchid
        LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CBB.cbfshedid
        LEFT JOIN item I ON CBB.itemid = I.id
   	
	WHERE
		CBB.cbfshedid = p_shedid
        AND CBB.quantity != 0
	    AND CBD.statusid !=3024
    GROUP BY CBB.itemid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getShedWisePlacementDetails`(
    IN p_shedid INT,
    IN p_transactiondate DATE
)
BEGIN
 SET @@sql_mode = '';
DROP TEMPORARY TABLE IF EXISTS tempdivation ;
CREATE TEMPORARY TABLE tempdivation 
	
     SELECT
			BBB.breedershedid,
			BBB.breedershedpenid as shedlineid,
            BSL.linename,
			BBB.itemid,
            I.itemcode,
            I.itemname,
			(BBB.quantity) as instock,
            IFNULL(fnc_breeder_batchwise_birdliveqty(BBB.breederbatchid, BBB.itemid, p_transactiondate, BBB.companyid),0) as openingbalance
			
    FROM
		breederbatchbalance BBB
        LEFT JOIN breedershedline BSL ON BBB.breedershedpenid = BSL.id
        LEFT JOIN item I ON BBB.itemid = I.id
   	
	WHERE
		BBB.breedershedid = p_shedid; -- AND
       -- BBB.quantity != 0
       
	SELECT *,SUM(instock) as instock FROM tempdivation P1
    GROUP BY P1.itemid, P1.shedlineid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getstdcon_onparticularday`(
In p_breeditemid varchar(255),
In p_day INT
)
BEGIN
select 
CSCD.feedconsumption,
CSC.breednameid,
I.itemname,
CSCD.age


from cbfstandardchart CSC
LEFT JOIN item I ON I.id = CSC.breednameid
LEFT JOIN cbfstandardchartdetail CSCD ON CSCD.cbfstandardchartid = CSC.id

where 
CSC.breednameid = p_breeditemid AND
CSCD.age = p_day
limit 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getsupervisorkmdetail_bybranchid`(
IN p_branchid INT(11),
IN p_supervisorid INT(11),
IN p_fromdate DATE,
IN p_todate DATE,
IN p_companyid INT(11)

)
BEGIN
 SET @deductedkm = 0;
SELECT 
id as supervisorkmid,
employeeid,
DATE_FORMAT(travalingdate, '%d/%m/%Y') as travalingdate,
totalkm,
@deductedkm as deductedkm


from supervisorkm
where branchid = p_branchid AND
p_supervisorid = employeeid AND
travalingdate BETWEEN  p_fromdate AND p_todate;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_gettreedata`()
BEGIN


select  id,
        name,
        type,
        parentid 
from    (select * from temp1
         order by parentid, id) products_sorted,
        (select @pv := '1') initialisation
where   find_in_set(parentid, @pv)
and     length(@pv := concat(@pv, ',', id));


SELECT GROUP_CONCAT(lv SEPARATOR ',') FROM (
	SELECT @pv:=(SELECT GROUP_CONCAT(id SEPARATOR ',') FROM temp1 
    WHERE parentid IN (@pv)) AS lv FROM temp1 
JOIN
	(SELECT @pv:=1)tmp
	WHERE parentid IN (@pv)) a;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getUser_bymobileno`(
	IN p_mobileno VARCHAR(200),
    IN p_companycode VARCHAR(200),
    IN p_companyid INT(11)
)
BEGIN

	SELECT U.id,
		   U.mobile as mobileno,
           C.companycode
	FROM user1 U
    LEFT JOIN company C ON C.id = U.companyid
    
    WHERE U.mobile = p_mobileno
    AND U.companyid = p_companyid
    AND C.companycode = p_companycode;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getwarehousebinbywarehouse_report`(
IN p_warehouseid varchar(255),
IN p_companyid INT(11)

)
BEGIN

SELECT 
        W.warehousename,
        W.id,
        WB.binname,
		WB.id
       
       
        
        
FROM warehouse W    
LEFT JOIN warehousebin WB ON WB.warehouseid  = W.id

 WHERE 	
		W.companyid = p_companyid AND
        -- W.id = p_warehouseid AND
		FIND_IN_SET( W.id, p_warehouseid); 
       


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getwarehousebybranchname_report`(
IN p_branchid varchar(255),
IN p_companyid INT(11)

)
BEGIN

SELECT  L.branchid,
        W.warehousename,
        W.id
       
       
        
        
FROM warehouse W    
LEFT JOIN location L ON W.locationid  = L.id

 WHERE 	
		W.companyid = p_companyid AND
        W.locationid = L.id AND
		FIND_IN_SET( L.branchid, p_branchid); 
       


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getweeklyeggscollection`(
 IN p_batchid INT,
 IN p_companyid INT
 )
BEGIN
SET @@sql_mode = ' ';
DROP TEMPORARY TABLE IF EXISTS tempeggscollection;
CREATE TEMPORARY TABLE tempeggscollection
SElECT
	IFNULL(ED.quantity,0) as quantity, EC.collectiondate ,
     TRUNCATE((((DATEDIFF(EC.collectiondate,fnc_getplacementdate( EC.breederbatchid ,p_companyid)))+1)/7),0) as ageinweek
FROM 
	eggscollection EC
	LEFT JOIN eggscollectiondetail ED ON ED.eggscollectionid = EC.id
 WHERE EC.breederbatchid = p_batchid;

SELECT IFNULL(SUM(TE.quantity),0) as eggscollection,TE.ageinweek,hhpperweek
	FROM 
	tempeggscollection TE 
	LEFT JOIN breederperformanceobjective BPO ON BPO.ageinweek = TE.ageinweek
    group by ageinweek;
 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_getweeklyeggscollectionlayer`(
 IN p_batchid INT,
 IN p_companyid INT
 )
BEGIN
	SET @@sql_mode = ' ';
	DROP TEMPORARY TABLE IF EXISTS templayereggscollection;
	CREATE TEMPORARY TABLE templayereggscollection
    
	SElECT
		LED.quantity, LEC.collectiondate,
		TRUNCATE((((DATEDIFF(LEC.collectiondate,fnc_getlayerplacementdate( LEC.layerbatchid ,p_companyid)))+1)/7),0) as ageinweek
	FROM 
		layereggscollection LEC
		LEFT JOIN layereggscollectiondetail LED ON LED.eggscollectionid = LEC.id
	WHERE LEC.layerbatchid = p_batchid;

	SELECT SUM(TE.quantity) as eggscollection,TE.ageinweek,IFnull(cumhhp,0) as hhpperweek
	FROM 
		templayereggscollection TE 
		LEFT JOIN layerperformanceobjective LPO ON LPO.ageinweek = TE.ageinweek
	group by ageinweek;
 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_get_itemlivestock`(
   IN p_itemid INT,
	IN p_warehousebinid INT,
   IN p_companyid INT
)
BEGIN
    
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    SET @unitcost = 0;
    SET @unitname = null;
	SET @p_openingbalance = 0;
    SELECT IFNULL(SUM(MM.quantity), 0), IFNULL(IFNULL(SUM(MM.itemvalue), 0)/IFNULL(SUM(MM.quantity), 0),0), REF.refname into @p_inwardquantity, @unitcost, @unitname
    FROM materialmovement MM
    LEFT JOIN item I ON I.id = p_itemid
    LEFT JOIN `reference` REF ON REF.id = I.itemunitid
    WHERE MM.itemid = p_itemid AND
	MM.companyid = p_companyid AND
    MM.transactiontypeid = 681 AND
    MM.towarehousebinid = p_warehousebinid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    towarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    fromwarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
    fromwarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    towarehousebinid = p_warehousebinid;
    
     SELECT IFNULL(SUM(quantity), 0) into @p_openingbalance
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 685 AND
    towarehousebinid = p_warehousebinid;
    
   
   SELECT cast((@p_inwardquantity + @p_transferinquantity + @p_receiptquantity +@p_openingbalance) - (@p_issuequantity + @p_transferoutquantity) as decimal(10,2)) as instock,
   @unitcost as unitcost,
   @unitname as unitname;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_get_setting_no_for_hatchery_opening`(
 IN p_company_id INT(11)
 )
BEGIN
    SET @settingno = null;
    SELECT settingno INTO @settingno  FROM hatchery_opningbalance WHERE companyid=p_company_id
    order by id desc limit 1;
    if(@settingno IS NOT NULL) THEN 
    SELECT (@settingno +1) as settingno;
    ELSE
    SELECT 1 as settingno;
    END IF;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_glregisterforsingleledger_report`(
	IN p_ledgerid VARCHAR(2000),
    IN p_fromdate DATE,
	IN p_todate DATE,
    IN p_companyid INT(11)
)
BEGIN
	SET @@sql_mode = '';
    
DROP TEMPORARY TABLE IF EXISTS tempbatchstatus ;
CREATE TEMPORARY TABLE tempbatchstatus

	select
         JED.acledgerid,
         JE.id as jeid,
         JE.jeno as jeno,
		 JE.vouchertypeid,
		 REF.refname as transactiontype,
		 DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate,
		 ROUND(SUM(IFNULL((JED.dramount),0)),3) as dramount,
		 ROUND(SUM(IFNULL((JED.cramount),0)),3) as cramount,
        ROUND(IFNULL(fnc_openingcreditdebitbalforledger(JED.acledgerid, p_fromdate, 'credit'),0),3) as op_cr,
		ROUND(IFNULL(fnc_openingcreditdebitbalforledger(JED.acledgerid, p_fromdate, 'debit'),0),3) as op_dr,
        ROUND(((IFNULL(fnc_openingcreditdebitbalforledger(JED.acledgerid, p_fromdate, 'debit'),0))-(IFNULL(fnc_openingcreditdebitbalforledger(JED.acledgerid, p_fromdate, 'credit'),0))),3)as Ob,
		JE.`journalentrysubject` as narration,
		COA.glcode,
		COA.coaname
        
	FROM  journalentry JE 
		LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
		LEFT JOIN chartofaccount COA ON JED.acledgerid = COA.id
		LEFT JOIN `reference` REF ON JE.vouchertypeid = REF.id
	
	     WHERE  JE.voucherdate 
		 BETWEEN p_fromdate AND p_todate AND
		 FIND_IN_SET(JED.acledgerid,p_ledgerid)
		 group by voucherdate,JED.acledgerid;
         
   DROP TEMPORARY TABLE IF EXISTS tempbatchstatus1;
	CREATE TEMPORARY TABLE tempbatchstatus1
    
    select *, 'item' as entity from tempbatchstatus;      
    
 DROP TEMPORARY TABLE IF EXISTS tempbatchstatus2;
	CREATE TEMPORARY TABLE tempbatchstatus2	
    SELECT * from (
    SELECT * from tempbatchstatus1
    UNION ALL	
				SELECT 
                
			   '' as acledgerid,
               '' as jeid,
               ''  as jeno,
               '' as vouchertypeid,
               '' as transactiontype,
               '' as voucherdate,
                '' as dramount,
			   '' as cramount,
			   '' as op_cr,
			   '' as op_dr,
			   Ob as Ob,
               '' as narration,
			   '' as glcode,
			   'A.Ope Bal' as coaname,
			   ' ' as entity
				
				FROM
					tempbatchstatus  group by Ob
                        ) as tmpresult ;
	
SELECT * FROM tempbatchstatus2;   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_glregister_report`(
	IN p_ledgerid VARCHAR(2000),
    IN p_fromdate DATE,
	IN p_todate DATE,
    IN p_companyid INT(11)
)
BEGIN
	SET @@sql_mode = '';

	select
		 DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate,
        JED.acledgerid,COA.coaname,
		SUM(IFNULL((JED.dramount),0)) as dramount,
		SUM(IFNULL((JED.cramount),0)) as cramount,
        IFNULL(fnc_openingcreditdebitbal(JED.partyid,JED.acledgerid, p_fromdate, 'credit'),0) as op_cr,
		IFNULL(fnc_openingcreditdebitbal(JED.partyid,JED.acledgerid, p_fromdate, 'debit'),0) as op_dr,
		PI.purchaseinvoiceno,
		JE.jeno,
		JE.inouno,
		JE.`journalentrysubject` as narration,
		REF.refname,
		COA.glcode
	FROM  journalentry JE 
		LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
		LEFT JOIN chartofaccount COA ON JED.acledgerid = COA.id
		LEFT JOIN `reference` REF ON JE.vouchertypeid = REF.id
		LEFT JOIN branch BR ON BR.id = JE.branchid
		LEFT JOIN purchaseinvoice PI ON PI.id = JE.transactionid   AND JE.narration = 'Purchase invoice JE'
	WHERE  JE.voucherdate 
		 BETWEEN p_fromdate AND p_todate -- AND
		-- FIND_IN_SET(JED.acledgerid,p_ledgerid)
		 group by voucherdate,JED.acledgerid;
/*SET @from_date = DATE_SUB(p_fromdate, INTERVAL 1 DAY);

DROP TEMPORARY TABLE IF EXISTS subledgertb;
CREATE TEMPORARY TABLE subledgertb

	SELECT DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate,
		   JE.id as jeid,
           JE.vouchertypeid,
           REF.refname,
           JE.`journalentrysubject` as narration,
           JE.jeno,
           JE.inouno,
           IFNULL(fnc_openingcreditdebitbal(JED.acledgerid, p_fromdate, 'credit'),0) as op_cr,
           IFNULL(fnc_openingcreditdebitbal(JED.acledgerid, p_fromdate, 'debit'),0) as op_dr,
           IFNULL((JED.dramount),0) as dramount,
           IFNULL((JED.cramount),0) as cramount,
           JE.chequeno,
		   DATE_FORMAT(JE.chequedate,'%d/%m/%Y') as chequedate,
           JE.branchid,
           BR.branchcode,
           BR.branchname,
           JED.acledgerid,
           COA.glcode,
           CONCAT(COA.glcode,' ' ,COA.coaname) as ledger1,
           JED.partyid,
           PI.purchaseinvoiceno,
           JE.branchid,
           BR.branchcode,
           BR.branchname,
           
	FROM journalentry JE
    
    LEFT JOIN `reference` REF ON JE.vouchertypeid = REF.id
    LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    LEFT JOIN chartofaccount COA ON JED.acledgerid = COA.id
    LEFT JOIN branch BR ON BR.id = JE.branchid
   LEFT JOIN purchaseinvoice PI ON PI.id = JE.transactionid   AND JE.narration = 'Purchase invoice JE'
    
    WHERE 
    FIND_IN_SET(JED.acledgerid, p_ledgerid)
    AND JE.companyid = p_companyid
    AND JE.voucherdate BETWEEN p_fromdate AND p_todate
    AND COA.id IS NOT NULL
   -- GROUP BY JE.id
    
    ORDER BY JE.voucherdate;
    SELECT * , CONCAT('',ledger1,' Opening Balance DR',op_dr,'Opening Balance CR',op_cr ) as ledger 
    
	FROM subledgertb;
    
   /* DROP TEMPORARY TABLE IF EXISTS subledgertb1;
    CREATE TEMPORARY TABLE subledgertb1
   SELECT *,'item' as item  FROM subledgertb;
   
  DROP TEMPORARY TABLE IF EXISTS subledgertb2;
   CREATE TEMPORARY TABLE subledgertb2
SELECT * FROM(  
SELECT * FROM subledgertb1
    UNION ALL
    
    SELECT '' as voucherdate,
		   '' as jeid,
           '' as vouchertypeid,
           'Sub Total' as refname,
           '' as narration,
           SUM(tb1.op_cr) as op_cr,
           SUM(tb1.op_dr) as op_dr,
           SUM(tb1.dramount) as dramount,
           SUM(tb1.cramount) as cramount,
           (SUM(tb1.dramount) - SUM(tb1.cramount)) as chequeno,
		   '' as chequedate,
           '' as branchid,
           '' as branchcode,
           '' as branchname,
           '' as acledgerid,
           '' as glcode,
           ledger,
           '' as partyid,
           'subtotal' as item
           
	FROM subledgertb tb1
    
    group by ledger
    ) as tempsub
    ORDER BY ledger,item;
    
    SELECT *  FROM subledgertb2
    
    UNION ALL
    
    SELECT '' as voucherdate,
		   '' as jeid,
           '' as vouchertypeid,
           'Grand Total' as refname,
           '' as narration,
           SUM(tb1.op_cr) as op_cr,
           SUM(tb1.op_dr) as op_dr,
           SUM(tb1.dramount) as dramount,
           SUM(tb1.cramount) as cramount,
           (SUM(tb1.dramount) - SUM(tb1.cramount)) as chequeno,
		   '' as chequedate,
           '' as branchid,
           '' as branchcode,
           '' as branchname,
           '' as acledgerid,
           '' as glcode,
           ledger,
           '' as partyid,
           'grandtotal' as item
           
	FROM subledgertb tb1 ;*/

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_grndetails_bygrpoid`(
	IN p_id VARCHAR(200),
    IN p_isservice TINYINT(4)
)
BEGIN
	
    IF(p_isservice = 1) THEN
		SELECT 
			SPO.partnerid,
			PT.partyname as suppliername,
			SPO.id as id,
			DATE_FORMAT(SPO.servicedate,'%d/%m/%Y') as purchaseorderdate,
			SPO.deliveryfromaddressid,
			SPO.deliverytowarehouseid,
			WH1.warehousename,
			SPO.deliveryfromstatecode,
			SPO.deliverytostatecode,
			PA.address as delfromfulladdress,
			WH1.address as warehousefulladdress,
			ST.isunionterritory as warehouseisunionterritory,
			ST1.isunionterritory as deliveryfromisunionterritory,
			SPO.servicepono as purchaseorderno

		FROM 
			servicepo SPO
		
		LEFT JOIN party PT ON SPO.partnerid  = PT.id
		LEFT JOIN partyaddress PA ON SPO.deliveryfromaddressid = PA.id
		LEFT JOIN warehouse WH1 ON SPO.deliverytowarehouseid = WH1.id
		LEFT JOIN `state` ST ON WH1.stateid = ST.id
		LEFT JOIN `state` ST1 ON PA.stateid = ST1.id
		
		WHERE
			-- GR.statusid = p_statusid
			SPO.id = p_id;
    ELSE
    
			SELECT 
			group_concat(GR.id) as id,
			DATE_FORMAT(grpodate,'%d/%m/%Y') as grpodate,
			GR.supplierid,
			PT.partyname as suppliername,
			GR.referenceno,
			DATE_FORMAT(GR.referencedate,'%d/%m/%Y') as referencedate,
			GR.purchaseorderid,
			DATE_FORMAT(purchaseorderdate,'%d/%m/%Y') as purchaseorderdate,
			GR.modeoftransfer,
			GR.vehiclenumber,
			GR.subject,
			GR.remark,
			GR.statusid,
			GR.discount,
			REF1.refname as statusname,
			GR.companyid,
			GR.towarehouseid,
			W.warehousename,
			PO.purchaserequestid,
			PO.transactiontypeid,
			PO.deliveryfromaddressid,
			GR.towarehouseid,
			PO.deliveryfromstatecode,
			PO.deliverytostatecode,
			PA.address as delfromfulladdress,
			WH1.address as warehousefulladdress,
			ST.isunionterritory as warehouseisunionterritory,
			ST1.isunionterritory as deliveryfromisunionterritory,
			GR.towarehousebinid,
			WB.binname as towarehousebinname,
			group_concat(GR.grpono) as grpono,
			PO.purchaseorderno,
            PT.tdsid,
            T.rate as tds

		FROM 
			grpo GR
		
		LEFT JOIN party PT ON GR.supplierid  = PT.id
        INNER JOIN account_tds T ON T.id = PT.tdsid
		LEFT JOIN `reference` REF1 ON REF1.id = GR.statusid
		LEFT JOIN warehouse W ON W.id = GR.towarehouseid
		LEFT JOIN warehousebin WB ON WB.id = GR.towarehousebinid
		LEFT JOIN purchaseorder PO ON PO.id = GR.purchaseorderid
		LEFT JOIN partyaddress PA ON PO.deliveryfromaddressid = PA.id
		LEFT JOIN warehouse WH1 ON GR.towarehouseid = WH1.id
		LEFT JOIN `state` ST ON WH1.stateid = ST.id
		LEFT JOIN `state` ST1 ON PA.stateid = ST1.id
		LEFT JOIN purchaseinvoice PI ON PI.grpono = GR.id 
		
		WHERE
			-- GR.statusid = p_statusid
			GR.id = p_id AND PI.id is null;
    
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_grpodetail_byservicepo_search`(
IN p_grpoid INT
)
BEGIN

	SELECT 
		GD.id as grpodetailid,
		GD.grpoid,
        GD.quantity,
		GD.itemid,
		GD.itemname,
        GD.unitprice,
        GD.itemdiscount,
        GD.taxpercent,
        GD.taxid,
        GD.freequantity,
		GD.itemunitid,
		REF1.refname,
        GD.quantity requiredquantity,
		GD.remark,
        GD.itembatch
	FROM 
		grpodetail GD
        
		 LEFT JOIN reference REF1 ON GD.itemunitid = REF1.id
         LEFT JOIN grpo G ON G.id = GD.grpoid
         
        
	WHERE
		GD.grpoid = p_grpoid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_grpodetail_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN


	-- SourceNo 262  ==> 'Purchased'

	DELETE FROM grpodetail
		WHERE 
			id = p_id
			AND NOT EXISTS (
				SELECT id FROM setterbatch SB
					INNER JOIN grpo GR ON GR.id = SB.sourcedeliveryid
                    INNER JOIN grpodetail GD ON GR.id = GD.grpoid
					WHERE SB.sourcedeliveryid = GR.id AND sourceid = 262
            );
    
    
	IF NOT EXISTS(SELECT * FROM grpodetail WHERE id = p_id) THEN
    
		-- record log
		CALL spc_commonlog_save(p_companyid, 'grpodetail', p_id, 'delete', p_userid);
        
        SET out_id = p_id;
	else
		SET out_id = -1;
        
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_grpodetail_save`(
	IN p_id INT,
	IN p_grpoid INT,
    IN p_purchaseorderdetailid INT,
    IN p_itemid INT,
    IN p_itemname VARCHAR(200),
    IN p_quantity DECIMAL(15,3),
    IN p_freequantity DECIMAL(15,3),
    IN p_itemunitid INT,
    IN p_unitprice DECIMAL(9,3),
    IN p_itemdiscount DECIMAL(9,3),
    IN p_taxpercent INT,
    IN p_taxid INT,
    IN p_remark VARCHAR(100),
    In p_companyid INT,
    IN p_userid INT,
    OUT out_id VARCHAR(200)
)
BEGIN
	
	SET @grpodate = null;
	SET @action = null;
	
	SET @servicepoid = null;
	select servicepoid,grpodate INTO @servicepoid,@grpodate from grpo where id = p_grpoid;

	IF(NULLIF(p_id, '0') IS NULL)  THEN
		
		INSERT INTO grpodetail 
				(grpoid, itemid, itemname, quantity, freequantity, 
                itemunitid, remark, unitprice, itemdiscount, taxpercent, taxid, companyid)
			VALUES 
				(p_grpoid, p_itemid, p_itemname, p_quantity, p_freequantity, 
                p_itemunitid, p_remark, p_unitprice, p_itemdiscount, p_taxpercent, 
                p_taxid, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
		IF((SELECT id FROM purchaseinvoice WHERE FIND_IN_SET(p_grpoid, grpono)) IS NULL) THEN
			SET SQL_SAFE_UPDATES = 0;
			SET @previousqty = 0;
			SET @usedqty = 0;
			SELECT (quantity+freequantity) INTO @previousqty FROM grpodetail 
            WHERE id = p_id AND itemid = p_itemid;

			SET @itembatch = null;
			SET @livestock = 0;
            
			SELECT itembatch INTO @itembatch from grpodetail where id = p_id AND itemid = p_itemid;
			
            SELECT fnc_itembatchlivestock(p_itemid, @itembatch, (SELECT towarehousebinid FROM grpo WHERE id = p_grpoid), p_companyid) INTO @livestock;
			
            if(@livestock < @previousqty AND (SELECT statusid FROM grpo WHERE id = p_grpoid) = 642) then
				SELECT -1 as result;
			ELSE
				UPDATE grpodetail
				SET grpoid = p_grpoid, 
					itemid = p_itemid, 
					itemname = p_itemname, 
					quantity = p_quantity, 
					freequantity = p_freequantity,
					itemunitid = p_itemunitid, 
					remark = p_remark,
					unitprice = p_unitprice,
					itemdiscount = p_itemdiscount,
					taxpercent = p_taxpercent,
					taxid = p_taxid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
					
					SET @action = 'UPDATE';
					
				UPDATE materialmovement
				SET quantity = (p_quantity+p_freequantity),
				itemvalue = (((p_quantity+p_freequantity)*p_unitprice)-((p_quantity+p_freequantity)*p_unitprice)*(p_itemdiscount)/100)
				WHERE transactiontypeid = 681
				AND itembatch = (SELECT itembatch from grpodetail where id = p_id AND itemid = p_itemid);
			
				SELECT "Updated" as result;
			
			END IF;
		ELSE
			SELECT "In Purchase Invoice" as result;
		END IF;
        
	END IF;
    
     -- create itembatch for GRPO
		SET @itembatch = null;
		SET @itemgroup = null;
		IF((SELECT statusid FROM grpo WHERE id = p_grpoid) = 642) THEN
			 
             -- create itembatch for material receipt
				
			select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch from item I
			INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

			WHERE I.id = p_itemid;

			-- material movement entry for grpo
			SET @out_movid = NULL;
			SET @totalvaluewithdiscount = 0;
			SET @grpoquantity = (p_quantity + (IFNULL((p_freequantity),0)));
			SELECT ((p_quantity * p_unitprice)-((p_quantity * p_unitprice)*p_itemdiscount/100)) INTO @totalvaluewithdiscount;
					
			-- SELECT ((p_quantity * p_unitprice)-((p_quantity * p_unitprice)*p_itemdiscount/100)) INTO @totalcostwithdiscount;
			CALL spc_materialmovement_save(
				NULL, p_itemid, @itembatch, 681,
				p_grpoid, @grpodate, @grpoquantity,
				NULL, NULL, (SELECT towarehouseid FROM grpo WHERE id = p_grpoid),
				(SELECT towarehousebinid FROM grpo WHERE id = p_grpoid),
				@totalvaluewithdiscount,
				p_companyid, p_userid, @out_movid
			);
			
			-- get item group id from the item id and update itemgroup table
			SELECT itemgroupid INTO @itemgroup FROM item WHERE id = p_itemid;
			
			UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
			
			WHERE id = @itemgroup;
            
            UPDATE grpodetail 
            SET itembatch = @itembatch
            WHERE grpoid = p_grpoid
            AND itemid = p_itemid;
            
		END IF;
   -- material recpt entry for servicepo
   
   
    if(@servicepoid IS NOT NULL) THEN
		
		SET @out_recid = NULL;
		CALL spc_materialreceipt_save(
			NULL, (SELECT grpodate FROM grpo WHERE id = p_grpoid),
            341, null, 322, NULL, p_userid,
            p_userid,(SELECT grpodate FROM grpo WHERE id = p_grpoid),
            p_companyid, p_userid, @out_recid
		);
        
         -- Material receipt Detail entry for servicepo
         SET @out_recdetailid = NULL;
         
		 CALL spc_materialreceiptdetail_save(
			NULL, @out_recid, p_itemid, p_itemname, p_quantity, P_unitprice,
            (p_quantity * p_unitprice), p_itemunitid, @itembatch,
			(SELECT towarehouseid FROM grpo WHERE id = p_grpoid)
            , p_companyid, p_userid, NULL, @out_recdetailid
		);
        
	
         SET @totalvaluewithdiscount = 0;
		SELECT ((p_quantity * p_unitprice)-((p_quantity * p_unitprice)*p_itemdiscount/100)) INTO @totalvaluewithdiscount;
    -- material movement entry for material receipt
		SET @out_movid1 = NULL;
		CALL spc_materialmovement_save(
			NULL, p_itemid, @itembatch, 684,
			@out_recid, @grpodate, p_quantity,
			NULL, NULL, (SELECT towarehouseid FROM grpo WHERE id = p_grpoid), NULL,
			@totalvaluewithdiscount,
			p_companyid, p_userid, @out_movid1
		);
    
	 END IF;
     
	
	SELECT LAST_INSERT_ID() INTO out_id; 
    
	
	-- update pending grpo  quantity
	 SET @podQty = NULL;
	 SET @mortalityqty = null;
	 
	 SELECT pendinggrpoquantity INTO @podQty FROM purchaseorderdetail WHERE id = p_purchaseorderdetailid;
	 
	 SET @totalshortage = 0;
	 
	 if exists(select id from chicksmortality where grpono = p_grpoid limit 1) THEN
		 
		 SELECT IFNULL((culls + mortality + shortage),0) INTO @totalshortage
		 FROM chicksmortality 
		 WHERE grpono = p_grpoid
		 AND itemid = p_itemid;
		 
	else	
		select 0 into @totalshortage;
	end if;
		 
	 UPDATE purchaseorderdetail 
	 SET pendinggrpoquantity = (@podQty - (p_quantity+@totalshortage))
	 WHERE id = p_purchaseorderdetailid;
	 
		
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_grpodetail_search`(
	IN p_grpoid INT
)
BEGIN
SET @@sql_mode = ' ';

	SELECT 
		GD.id as grpodetailid,
		GD.grpoid,
        GD.quantity,
		GD.itemid,
        IG.id as itemgroupid,
        IG.groupname,
		GD.itemname,
        GD.unitprice,
        GD.itemdiscount,
        GD.taxpercent,
        GD.taxid,
        CASE
			WHEN GD.freequantity > 0 THEN ((GD.quantity * GD.freequantity) / 100)
			ELSE 0
		END as freequantitypercent,
        GD.freequantity,
		GD.itemunitid,
		REF1.refname,
		GD.remark,
        GD.itembatch,
        POD.quantity as requiredquantity,
        POD.purchaseorderid,
        POD.pendinggrpoquantity,
        POD.id as purchaseorderdetailid,
        GD.taxpercent,
	    POD.cgstpercent,
        POD.cgstamount,
        POD.sgstpercent,
        POD.sgstamount,
        POD.igstpercent,
		POD.igstamount,
        POD.utgstpercent,
        POD.utgstamount,
        POD.sgstid,
	    POD.cgstid,
	    POD.igstid,
	    POD.utgstid,
        REF2.refname as taxtype,
        T.combinedtaxes,
		 T.taxname,
		 fnc_taxes_byids(combinedtaxes) as taxesname,
		 fnc_taxpercents_byids(combinedtaxes) as taxpercents,
		 fnc_taxtypes_byids(combinedtaxes) as taxtypes,
         G.towarehouseid,
         W.warehousename,
         G.towarehousebinid,
         WB.binname
	FROM 
		grpodetail GD
        
		 LEFT JOIN `reference` REF1 ON GD.itemunitid = REF1.id
         LEFT JOIN grpo G ON G.id = GD.grpoid
         LEFT JOIN warehouse W ON W.id = G.towarehouseid
         LEFT JOIN warehousebin WB ON WB.id = G.towarehousebinid
         LEFT JOIN purchaseorderdetail POD ON POD.purchaseorderid = G.purchaseorderid
         LEFT JOIN itemgroup IG ON IG.id = GD.itemid
          LEFT JOIN tax T ON T.id = GD.taxid
		 LEFT JOIN `reference` REF2 ON T.taxtypeid = REF2.id
        
	WHERE
		GD.grpoid = p_grpoid
        group by GD.id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_grpodetail_select`(
	IN p_id INT
)
BEGIN

	SELECT 
		id,
		grpoid,
		itemid,
		itemname,
		quantity,
		itemunitid,
		remark,
        itembatch
	FROM 
		grpodetail
        
	WHERE
		id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_grpoids_bylayerplacementschedule`(
	 IN p_placementscheduleid INT,
     IN p_companyid INT
     
)
BEGIN

SELECT LPD.id as placementscheduledetailid,
		LPD.placementscheduleid, -- Changed by Pooja
        G.grpono,
        G.id as grpoid,
        G.purchaseorderid,
		DATE_FORMAT(G.grpodate,'%d/%m/%Y') as grpodate,
        G.statusid,
        REF.refname as statusname,
        G.remark,
        PO.purchaserequestid,
        PO.purchaseorderno,
        PT.partyname as suppliername,
        G.remark
        
	FROM 
		layerplacementscheduledetail LPD
    
       INNER JOIN layerplacementschedule LPS ON LPS.id = LPD.placementscheduleid
       INNER JOIN purchaseorder PO ON PO.purchaserequestid = LPS.requestid
       INNER JOIN grpo G ON G.purchaseorderid = PO.id
       LEFT JOIN party PT ON G.supplierid = PT.id
       INNER JOIN grpodetail GD ON GD.grpoid = G.id
       INNER JOIN `reference` REF ON REF.id = G.statusid
	   INNER JOIN purchaseinvoice PI ON PI.grpono = G.id

	
	WHERE
		LPD.placementscheduleid = p_placementscheduleid
        AND LPD.companyid = p_companyid
		
        GROUP BY G.id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_grpoids_byplacementschedule`(
	 IN p_placementscheduleid INT,
     IN p_companyid INT
     
)
BEGIN
SET @@sql_mode = '';
SELECT BPD.id as placementscheduledetailid,
		BPD.placementscheduleid,
        G.grpono,
        G.id as grpoid,
        G.purchaseorderid,
		DATE_FORMAT(G.grpodate,'%d/%m/%Y') as grpodate,
        G.statusid,
        REF.refname as statusname,
        G.remark,
        PO.purchaserequestid,
        PO.purchaseorderno,
        PT.partyname as suppliername,
        G.remark
        
	FROM 
		breederplacementscheduledetail BPD
    
       INNER JOIN breederplacementschedule BPS ON BPS.id = BPD.placementscheduleid
       INNER JOIN purchaseorder PO ON PO.purchaserequestid = BPS.requestid
       INNER JOIN grpo G ON G.purchaseorderid = PO.id
       LEFT JOIN party PT ON G.supplierid = PT.id
       INNER JOIN grpodetail GD ON GD.grpoid = G.id
       INNER JOIN `reference` REF ON REF.id = G.statusid
	   INNER JOIN purchaseinvoice PI ON PI.grpono = G.id

	
	WHERE
		BPD.placementscheduleid = p_placementscheduleid
        AND BPD.companyid = p_companyid
		
        GROUP BY G.id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_grpolist_search`(
	IN p_from_date date,
	IN p_to_date date
)
BEGIN
SET @@sql_mode = '';
SELECT 
		GR.id,
		DATE_FORMAT(grpodate,'%d/%m/%Y') as grpodate,
		GR.supplierid,
        PT.partyname as suppliername,
		GR.referenceno,
		DATE_FORMAT(referencedate,'%d/%m/%Y') as referencedate,
		GR.purchaseorderid,
		DATE_FORMAT(purchaseorderdate,'%d/%m/%Y') as purchaseorderdate,
		GR.modeoftransfer,
		GR.vehiclenumber,
		GR.subject,
		GR.remark,
		GR.statusid,
        GR.discount,
        REF1.refname as statusname,
		GR.companyid,
        GR.towarehouseid,
        W.warehousename,
        W.warehousename as deliverytowarehousename,
        GR.servicepoid,
        GR.isservice,
        PO.purchaserequestid,
        PO.purchaseorderno,
        PO.moduleid,
        W.locationid,
        L.locationname,
        WB.binname as towarehousebinname,
        GR.towarehousebinid,
        GR.grpono,
        GR.ackid,
        fnc_isinvoicedone(GR.id, 'Purchase') as isinvoicedone,
        CASE
			WHEN I.taxcategoryid = 1522 OR I.taxcategoryid = 1523 THEN 1562
			ELSE 1561
		END as transactiontypeid
	FROM 
		grpo GR
	
    LEFT JOIN party PT ON GR.supplierid = PT.id
    LEFT JOIN `reference` REF1 ON REF1.id = GR.statusid
    LEFT JOIN warehouse W ON W.id = GR.towarehouseid
    LEFT JOIN warehousebin WB ON WB.id = GR.towarehousebinid
    LEFT JOIN purchaseorder PO ON PO.id = GR.purchaseorderid
    LEFT JOIN location L ON L.id = W.locationid
    INNER JOIN grpodetail GRD ON GRD.grpoid = GR.id
    INNER JOIN item I ON I.id = GRD.itemid
    WHERE
	(GR.grpodate BETWEEN p_from_date AND p_to_date)
	
	GROUP BY
		GR.id
	ORDER BY 
		GR.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_grpo_bypurchaserequestid`(
	IN p_purchaserequestid INT,
    IN p_companyid INT
)
BEGIN

SET @@sql_mode = '';

	SELECT  GR.id,
			GR.supplierid,
            PT.partyname as suppliername,
            GR.companyid,
            PR.tobatchid,
            PRD.quantity,
            GRD.itembatch,
            GR.towarehousebinid
            
            
	FROM grpo GR
    
    LEFT JOIN party PT ON PT.id = GR.supplierid
    LEFT JOIN purchaseorder PO ON PO.id = GR.purchaseorderid
    INNER JOIN purchaserequest PR ON PR.id = PO.purchaserequestid        
	LEFT JOIN purchaserequestdetail PRD ON PRD.purchaserequestid = PR.id
    LEFT JOIN grpodetail GRD ON GRD.grpoid = GR.id
    
    WHERE
		GR.companyid = p_companyid
        and FIND_IN_SET(p_purchaserequestid, PO.purchaserequestid)
        
	 GROUP BY GR.id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_grpo_delete`(
	IN p_id INT
)
BEGIN
	IF((SELECT id FROM purchaseinvoice WHERE FIND_IN_SET(p_id, grpono)) IS NULL) THEN
		SET @companyid = null;
        SELECT companyid INTO @companyid FROM grpo WHERE id = p_id;
        
		SET @row_number = 0;
   
		DROP TEMPORARY TABLE IF EXISTS tempgrpo;
		CREATE TEMPORARY TABLE tempgrpo
		
		SELECT (@row_number:=@row_number + 1) AS num, id, itembatch, itemid, grpoid, grpoqty from (
			SELECT 
				id, 
				itembatch, 
				itemid,
				grpoid,
                (quantity + freequantity) as grpoqty
			FROM grpodetail 
			where grpoid = p_id
		) 
		as tblgrpodetail;
		
		BEGIN
			DECLARE n INT DEFAULT 0;
			DECLARE i INT DEFAULT 0;
			DECLARE j INT DEFAULT 0;
			SELECT COUNT(*) FROM tempgrpo INTO n;
			 
			WHILE i<n DO 
			
				SET @tid = null;
				SET @grpoid = null;
				SET @itembatch = null;
				SET @itemid = null;
                SET @grpoqty = null;
                SET @batchliveqty = null;
				
				select id, grpoid, itembatch, itemid, grpoqty
                into @tid, @grpoid, @itembatch, @itemid, @grpoqty
                from tempgrpo where num = i+1;
				
                SELECT fnc_itembatchlivestock(@itemid, @itembatch, (SELECT towarehousebinid FROM grpo WHERE id = p_id), @companyid) INTO @batchliveqty;
				IF(@batchliveqty < @grpoqty) THEN
					SET j = j+1;
				END IF;
				
				SET i = i + 1;
			END WHILE;
			
			IF(j > 0) THEN
				SELECT -1 as result;
			ELSE
				SET SQL_SAFE_UPDATES = 0;
				
				BEGIN
					DECLARE n INT DEFAULT 0;
					DECLARE i INT DEFAULT 0;
					SELECT COUNT(*) INTO n FROM grpodetail where grpoid = p_id;
					 
					WHILE i<n DO 
					
						SET @tid = null;
						SET @itembatch = null;
						SET @itemid = null;
						
						select id, itembatch, itemid into @tid, @itembatch, @itemid from grpodetail where grpoid = p_id;
						
						-- Delete itembatch
						DELETE FROM materialmovement 
						WHERE itembatch = @itembatch
						AND transactiontypeid = 681;
						
						SET i = i + 1;
					END WHILE;
				END;
				
				SELECT id INTO @jeid FROM journalentry WHERE transactionid = p_id AND narration = 'GRPO JE';
				DELETE FROM journalentry WHERE id = @jeid;
				DELETE FROM journalentrydetail WHERE journalentryid = @jeid;
				
				DELETE FROM grpodetail WHERE grpoid = p_id;
				
				DELETE FROM grpo WHERE id = p_id;

				SELECT 'Deleted' as result;
			END IF;
		End;
    ELSE 
		SELECT "In Purchase Invoice" as result;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_grpo_save`(
		IN p_id INT,
        IN p_grpono VARCHAR(30),
		IN p_grpodate DATE,
		IN p_supplierid INT,
		IN p_referenceno VARCHAR(30),
		IN p_referencedate DATE,
		IN p_purchaseorderid INT,
		IN p_purchaseorderdate DATE,
		IN p_modeoftransfer INT(11),
		IN p_vehiclenumber VARCHAR(15),
		IN p_subject VARCHAR(200),
		IN p_remark VARCHAR(500),
        IN p_towarehouseid INT,
        IN p_towarehousebinid INT,
        IN p_discount DECIMAL(8,3),
		IN p_statusid INT,
        IN p_servicepoid INT(11),
        IN p_isservice TINYINT,
        IN p_ackid INT(11),
		IN p_companyid INT,
        IN p_userid INT,
		OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		-- if grpo no is already exists in table then create new docseries no. and insert that in table(Savita)
		SET @grpono = null;
        IF EXISTS(SELECT id FROM grpo WHERE grpono = p_grpono LIMIT 1) THEN
			CALL spc_financialyeardocseries_newseries(
				'GRN', p_companyid, @grpono
			);
		ELSE
			SET @grpono = p_grpono;
		END IF;
    
		INSERT INTO grpo 
                (grpono, grpodate, supplierid, referenceno, referencedate, 
                purchaseorderid, purchaseorderdate, modeoftransfer, 
                vehiclenumber, subject, remark, statusid, towarehouseid, 
                towarehousebinid, discount, servicepoid, isservice, ackid, companyid)                
			VALUES 
				(@grpono, p_grpodate, p_supplierid, p_referenceno, p_referencedate, 
                p_purchaseorderid, p_purchaseorderdate, p_modeoftransfer, 
                p_vehiclenumber, p_subject, p_remark, p_statusid, p_towarehouseid, 
                -- (SELECT id FROM warehousebin WHERE warehouseid = p_towarehouseid AND isdefault = 1 LIMIT 1),
                p_towarehousebinid, p_discount, p_servicepoid, p_isservice, p_ackid, p_companyid);
                
		SET @action = 'INSERT';
        
		SELECT LAST_INSERT_ID() INTO out_id; 

	ELSE
		IF(((SELECT id FROM purchaseinvoice WHERE FIND_IN_SET(p_id, grpono)) IS NULL) OR
        (SELECT id FROM purchase_return WHERE transactionid = p_id IS NULL)) THEN
			SET @jeid = null;
			SELECT id INTO @jeid FROM journalentry WHERE transactionid = p_id AND narration = 'GRPO JE';
			DELETE FROM journalentry WHERE id = @jeid;
			DELETE FROM journalentrydetail WHERE journalentryid = @jeid;
		
			UPDATE grpo
				SET 
					grpono = p_grpono,
					grpodate = p_grpodate,
					supplierid = p_supplierid,
					referenceno = p_referenceno,
					referencedate = p_referencedate,
					purchaseorderid = p_purchaseorderid,
					purchaseorderdate = p_purchaseorderdate,
					modeoftransfer = p_modeoftransfer,
					vehiclenumber = p_vehiclenumber,
					subject = p_subject,
					remark = p_remark,
					towarehouseid = p_towarehouseid,
					towarehousebinid = p_towarehousebinid,
					discount = p_discount,
					statusid = p_statusid,
					servicepoid = p_servicepoid,
					isservice = p_isservice,
					ackid = p_ackid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
						   
				SET @action = 'UPDATE';
                
                SELECT LAST_INSERT_ID() INTO out_id;
                
		ELSE
			SELECT "In Purchase Invoice" as result;
        END IF;
	END IF;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_grpo_search`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		GR.id,
		DATE_FORMAT(grpodate,'%d/%m/%Y') as grpodate,
		GR.supplierid,
        PT.partyname as suppliername,
		GR.referenceno,
		DATE_FORMAT(referencedate,'%d/%m/%Y') as referencedate,
		GR.purchaseorderid,
		DATE_FORMAT(purchaseorderdate,'%d/%m/%Y') as purchaseorderdate,
		GR.modeoftransfer,
		GR.vehiclenumber,
		GR.subject,
		GR.remark,
		GR.statusid,
        GR.discount,
        REF1.refname as statusname,
		GR.companyid,
        GR.towarehouseid,
        W.warehousename,
        GR.servicepoid,
        GR.isservice,
        PO.purchaserequestid,
        PO.purchaseorderno,
        PO.moduleid,
        W.locationid,
        L.locationname,
        WB.binname as towarehousebinname,
        GR.towarehousebinid,
        GR.grpono,
        GR.ackid,
        fnc_isinvoicedone(GR.id, 'Purchase') as isinvoicedone
	FROM 
		grpo GR
	
    LEFT JOIN party PT ON GR.supplierid = PT.id
    LEFT JOIN `reference` REF1 ON REF1.id = GR.statusid
    LEFT JOIN warehouse W ON W.id = GR.towarehouseid
    LEFT JOIN warehousebin WB ON WB.id = GR.towarehousebinid
    LEFT JOIN purchaseorder PO ON PO.id = GR.purchaseorderid
    LEFT JOIN location L ON L.id = W.locationid
    
    WHERE
		GR.companyid = p_companyid
        
	ORDER BY 
		GR.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_grpo_searchbystatus`(
 --  IN p_statusid INT,
  IN p_companyid INT
)
BEGIN

	SELECT 
		GR.id,
		DATE_FORMAT(grpodate,'%d/%m/%Y') as grpodate,
		GR.supplierid,
        PT.partyname as suppliername,
		GR.referenceno,
		DATE_FORMAT(GR.referencedate,'%d/%m/%Y') as referencedate,
		GR.purchaseorderid,
		DATE_FORMAT(purchaseorderdate,'%d/%m/%Y') as purchaseorderdate,
		GR.modeoftransfer,
		GR.vehiclenumber,
		GR.subject,
		GR.remark,
		GR.statusid,
        GR.discount,
        REF1.refname as statusname,
		GR.companyid,
        GR.towarehouseid,
        W.warehousename,
        PO.purchaserequestid,
		PO.transactiontypeid,
        PO.deliveryfromaddressid,
        PO.deliverytowarehouseid,
		PO.deliveryfromstatecode,
        PO.deliverytostatecode,
        PA.address as delfromfulladdress,
        WH1.address as warehousefulladdress,
        ST.isunionterritory as warehouseisunionterritory,
        ST1.isunionterritory as deliveryfromisunionterritory,
        GR.towarehousebinid,
        WB.binname as towarehousebinname,
		GR.grpono,
        PO.purchaseorderno

	FROM 
		grpo GR
	
    LEFT JOIN party PT ON GR.supplierid  = PT.id
    LEFT JOIN `reference` REF1 ON REF1.id = GR.statusid
    LEFT JOIN warehouse W ON W.id = GR.towarehouseid
    LEFT JOIN warehousebin WB ON WB.id = GR.towarehousebinid
    LEFT JOIN purchaseorder PO ON PO.id = GR.purchaseorderid
    LEFT JOIN partyaddress PA ON PO.deliveryfromaddressid = PA.id
	LEFT JOIN warehouse WH1 ON PO.deliverytowarehouseid = WH1.id
    LEFT JOIN `state` ST ON WH1.stateid = ST.id
	LEFT JOIN `state` ST1 ON PA.stateid = ST1.id
    LEFT JOIN purchaseinvoice PI ON PI.grpono = GR.id 
    
    WHERE
		-- GR.statusid = p_statusid
		GR.companyid = p_companyid  AND
        PI.id is null
        
	ORDER BY 
		GR.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_grpo_select`(
	IN p_id INT
)
BEGIN

	SELECT 
		G.id,
		DATE_FORMAT(G.grpodate,'%d/%m/%Y') as grpodate,
		G.supplierid,
		G.referenceno,
        DATE_FORMAT(G.referencedate,'%d/%m/%Y') as referencedate,
		G.purchaseorderid,
        DATE_FORMAT(G.purchaseorderdate,'%d/%m/%Y') as purchaseorderdate,
		G.modeoftransfer,
		G.vehiclenumber,
		G.subject,
		G.remark,
		G.statusid,
        PO.purchaserequestid,
		G.companyid,
        G.towarehouseid,
        W.locationid,
        L.locationname,
        G.towarehousebinid
	FROM 
		grpo G
        LEFT JOIN purchaseorder PO ON PO.id = G.purchaseorderid
        LEFT JOIN warehouse W ON W.id = G.towarehouseid
        LEFT JOIN location L ON L.id = W.locationid
    WHERE
		G.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherbatchforcurrentlocation_search`(
    IN p_companyid INT,
    IN p_locationid INT
)
BEGIN
    SET @defaulteggsitemid = null;
	SET	@defaultdocitemid = null;
	SET	@ddefaulthatcherywhfordoc = null;
    SET @overheadcostperegg = null;
    SET @docstandardcost = null;
	SET @defaulthatcherywhforeggs = null;
	SET @loadchargeperegg = null;
    
    
   SELECT @defaulteggsitemid:= defaulteggsitemid,
		  @defaultdocitemid:= defaultdocitemid,
		  @defaulthatcherywhfordoc:= defaulthatcherywhfordoc,
		  @defaulthatcherywhforeggs:= defaulthatcherywhforeggs,
          @docstandardcost:= docstandardcost,
          @overheadcostperegg:= overheadcostperegg,
          @loadchargeperegg := IFNULL(loadchargeperegg,0)
          
	FROM
		hatcherysettings 
	
    WHERE 
		companyid = p_companyid;
		
    
    SELECT
		HB.id as hatcherbatchno,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as hatcherbatchdate,
        HB.hatcherid,
        H.hatchername,
        HB.setterbatchid,
        HB.actualquantity,
        H.capacity,
        W.warehousename,
        W1.warehousename,
		H.locationid,
        S.breederbatchid,
        S.sourceid,
        S.actualquantity as setterqty,
        B.batchname as breederbatchname,
        @defaulteggsitemid AS eggsitemid,
        @defaultdocitemid as docitemid,
        @defaulthatcherywhfordoc as wharehouseid,
		@defaulthatcherywhforeggs as eggswharehouseid,
        @docstandardcost as defaultdoccost,
        @overheadcostperegg as defaulteggscost,
        @loadchargeperegg as loadchargeperegg,
        I.itemname as docitemname,
        I1.itemname as eggsitemname,
        I.unitcost,
        I.itemunitid,
        I1.unitcost as eggsunitcost,
        I.itemunitid as eggsitemunitid,
        I1.itemunitid as eggsitemunitid,
        R2.refname as itemunitname,
        S.itembatch as itembatchidformatissue,
        DATE_FORMAT(DATE_ADD(S.batchdate, INTERVAL 21 DAY),'%d/%m/%Y') as settingbatchdate,
         DATE_FORMAT(DATE_ADD(S.batchdate, INTERVAL 20 DAY),'%d/%m/%Y') as settingbatchdateone
        
	
    FROM
		hatcherbatch HB
	
    LEFT JOIN hatcher H ON HB.hatcherid = H.id
	LEFT JOIN warehouse W ON W.id = @defaulthatcherywhfordoc
    LEFT JOIN warehouse W1 ON W1.id = @defaulthatcherywhforeggs
    LEFT JOIN `reference` R1 ON R1.id = HB.statusid
	LEFT JOIN setterbatch S ON S.id = HB.setterbatchid
    LEFT JOIN breederbatch B ON  S.breederbatchid = B.id 
    LEFT JOIN item I ON  I.id =  @defaultdocitemid
    LEFT JOIN item I1 ON  I1.id =  @defaulteggsitemid
    LEFT JOIN `reference` R2 ON R2.id = I.itemunitid
    
    
        
	WHERE
		HB.companyid = p_companyid
        AND H.locationid = p_locationid
        -- 302 = In Progress
        AND  HB.statusid = 302
        
	ORDER BY HB.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherbatchlist_search`(
	IN p_location INT,
    IN p_from_date date,
	IN p_to_date date
)
BEGIN
    
      SELECT
		HB.id as hatcherbatchno,
        HB.hatcherid,
        L.id as locationid,
		L.locationname,
		H.hatchername,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as hatchingbatchdate,
        HB.setterbatchid as settingno,
        HB.statusid,
        R.refname,
        HB.setterid,
        HB.hatchercapacity,
        HB.wasteeggs,
        HB.actualquantity,
        SB.actualquantity as setterbatchqty
	
    FROM
		hatcherbatch HB
	
    LEFT JOIN hatcher H ON HB.hatcherid = H.id
    -- LEFT JOIN breederbatch BB on HB.breederbatchid = BB.id
	LEFT JOIN location L ON H.locationid = L.id
    LEFT JOIN `reference` R ON R.id = HB.statusid
    LEFT JOIN setterbatch SB ON SB.id = HB.setterbatchid
        
	WHERE
		H.locationid = p_location AND
        (HB.batchdate BETWEEN p_from_date AND p_to_date)
        AND HB.statusid = 302
        
    ORDER BY HB.id DESC;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherbatch_availablesetters_search`(
    IN p_companyid INT,
    IN p_locationid INT
)
BEGIN

	SELECT 
		id,
        locationid,
        settername
        
	FROM
		setter
    
	WHERE
		active = 1 and
        locationid = p_locationid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherbatch_bylocation`(
p_locationid VARCHAR(255)

)
BEGIN

select
      CPO.locationid,
      CPO.hatchbatchid
      
FROM chickspullout CPO
-- LEFT JOIN hatcherbatch HB ON HB.id = CPO.hatchbatchid
WHERE
 CPO.locationid= p_locationid; 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherbatch_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM hatcherbatch WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherbatch_remainingcapacity`(
	IN p_setterbatchid INT,
	IN p_hatcherid INT
)
BEGIN

	SET @setterbatchusedquantity = NULL;
    SET @setterbatchactualquantity = NULL;
    SET @hatcherusedquantity = NULL;
    SET @hatchercapacity = NULL;
    
    
           
	       
	SELECT
        SB.actualquantity, sum(IFNULL(HB.actualquantity,0)) 
        INTO @setterbatchactualquantity, @setterbatchusedquantity
	FROM
		setterbatch SB
	
    LEFT JOIN hatcherbatch HB ON SB.id = HB.setterbatchid
    
	WHERE
		SB.id =  p_setterbatchid
        
	GROUP BY 
		SB.actualquantity;
		
	
    -- hatcher used quantity
     
	
	SELECT IFNULL(capacity, 0) INTO @hatchercapacity FROM hatcher  WHERE id = p_hatcherid;

	SELECT IFNULL(SUM(HB.actualquantity), 0) INTO @hatcherusedquantity
		FROM hatcherbatch HB
		inner join hatcher H ON HB.hatcherid = H.id
		WHERE 
				 HB.hatcherid = p_hatcherid
                 AND HB.statusid = 302; 
			   -- AND HB.setterbatchid = p_setterbatchid;
    
    
	SELECT 
		IFNULL(@setterbatchactualquantity, 0) AS setterbatchactualquantity,
		IFNULL(@setterbatchusedquantity, 0) AS setterbatchusedquantity,
		IFNULL(@hatchercapacity,0) AS hatchercapacity,
		@hatcherusedquantity AS hatcherusedquantity;
	
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherbatch_save`(
	IN p_id INT,
    IN p_hatcherid INT,
    IN p_setterid INT,
    IN p_setterslotid INT,
    IN p_setterbatchid INT,
    IN p_hatchercapacity INT,
    IN p_wasteeggs INT,
    IN p_actualquantity INT,
    IN p_batchdate DATE,
    IN p_statusid INT,
    IN p_completiondate DATE,
    IN p_itembatch VARCHAR(100),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	-- Get hatchery setting default values
    
	SELECT  @defaulteggsitemid:= defaulteggsitemid,
			@defaulthatcherywhforeggs:= defaulthatcherywhforeggs,
			@overheadcostperegg:= IFNULL(overheadcostperegg, 0),
            @eggsitemname:=I.itemname,
            @itemunitid:=IFNULL(I.itemunitid,0),
            @WIPeggledgerid := WIPeggledgerid
	FROM
		hatcherysettings HS
        
        LEFT JOIN item I ON I.id = @defaulteggsitemid
    WHERE 
		HS.companyid = p_companyid;

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		-- Do material transfer from setter warehouse to particular hatcher warehouse
        SET @out_transferid = NULL;
		CALL spc_materialtransfer_save(
			NULL, 502, 502, 582, p_batchdate, p_batchdate,NULL,
			(SELECT warehouseid FROM setter WHERE id = p_setterid), NULL,
             621, p_setterbatchid,
			NULL, NULL, p_companyid, p_userid, @out_transferid
		);
        
		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, @out_transferid,
            (SELECT warehouseid FROM hatcher WHERE id = p_hatcherid), NULL,
            @defaulteggsitemid, @eggsitemname,
			p_actualquantity, p_actualquantity, 
			(SELECT refname FROM `reference` WHERE id = @itemunitid),
			p_itembatch, p_userid, p_companyid, @out_transferdetailid
		);
	
		-- Material Issue from setter warehouse to hatcher warehouse
		/*SET @out_issueid1 = NULL;
		CALL spc_materialissue_save(
			NULL, p_batchdate, 382, p_setterbatchid, 362, NULL,
			p_userid, (SELECT warehouseid FROM setter WHERE id = p_setterid),
            p_userid, p_batchdate, p_companyid, p_userid, @out_issueid1
		);
                            
		-- Itembatch details
		SET @out_issuedetailid1 = NULL;
		CALL spc_materialissuedetail_save(
			NULL, @out_issueid1, @defaulteggsitemid, (SELECT itemname FROM item WHERE id = @defaulteggsitemid),
			p_actualquantity, (SELECT unitcost FROM item WHERE id = @defaulteggsitemid), 
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			NULL, p_itembatch,
			p_companyid, p_userid, @out_issuedetailid1
		);

		-- material movement entry for material issue
		SET @out_movid2 = NULL;
		CALL spc_materialmovement_save(
			NULL, @defaulteggsitemid, p_itembatch, 683,
			@out_issueid1, p_batchdate, p_actualquantity,
			(SELECT warehouseid FROM setter WHERE id = p_setterid), NULL,
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			p_companyid, p_userid, @out_movid2
		);
        
        -- Make material receipt entry for Transfered eggs
		SET @out_recid = NULL;
		CALL spc_materialreceipt_save(
			NULL, p_batchdate, 342, NULL, 322, NULL,
			p_userid, p_userid, p_batchdate, p_companyid,
			p_userid, @out_recid
		);
        
        SET @out_recdetailid = NULL;
        CALL spc_materialreceiptdetail_save(
			NULL, @out_recid, @defaulteggsitemid, (SELECT itemname FROM item WHERE id = @defaulteggsitemid), 
			p_actualquantity, (SELECT unitcost FROM item WHERE id = @defaulteggsitemid), 
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			(SELECT itemunitid FROM item WHERE id = @defaulteggsitemid), NULL,
			(SELECT warehouseid FROM hatcher WHERE id = p_hatcherid), p_companyid,
			p_userid, NULL, @out_recdetailid
		);
        
        -- material movement entry for material receipt
		SET @out_movid3 = NULL;
		CALL spc_materialmovement_save(
			NULL, @defaulteggsitemid, NULL, 684,
			@out_recid, p_batchdate, p_actualquantity,
			(SELECT warehouseid FROM setter WHERE id = p_setterid), (SELECT warehouseid FROM hatcher WHERE id = p_hatcherid),
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			p_companyid, p_userid, @out_movid3
		);*/
    
		-- Create hatcher batch
	
		INSERT INTO hatcherbatch 
				(id, hatcherid, setterid, setterslotid, setterbatchid, hatchercapacity,wasteeggs, actualquantity, batchdate, statusid, completiondate, companyid)
			VALUES 
				(p_id, p_hatcherid, p_setterid, p_setterslotid, p_setterbatchid, p_hatchercapacity,p_wasteeggs, p_actualquantity, p_batchdate, p_statusid, p_completiondate, p_companyid);
                
                
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE hatcherbatch
				SET hatcherid = p_hatcherid, 
                setterid = p_setterid,
                setterslotid = p_setterslotid,
                setterbatchid = p_setterbatchid, 
                hatchercapacity = p_hatchercapacity,
                wasteeggs = p_wasteeggs,
                actualquantity = p_actualquantity,
                batchdate = p_batchdate,
                statusid = p_statusid,
                completiondate = p_completiondate,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    -- update usedcapacity in hatcher table
    SET @usedcapacity = 0;
    SELECT usedcapacity INTO @usedcapacity FROM hatcher WHERE id = p_hatcherid;
    UPDATE hatcher
    SET usedcapacity = (@usedcapacity + p_actualquantity)
    WHERE id = p_hatcherid;
    
    -- update setter slot status as available
    UPDATE setterslots 
    SET statusid = 6191
    WHERE id = p_setterslotid;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- JE for WIP egg ledger to cracked egg ledger
        SET @jeid = null;
		CALL spc_journalentry_save(
			NULL,
			NULL,
			1297,
			NULL,
			p_batchdate,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
            NULL,
            342,
			NULL,
			'Transfer WIP eggs to hatcher',
			NULL,
			NULL,
			NULL,
			out_id,
			'Transfer WIP eggs to hatcher',
			p_companyid,
			p_userid,
			@jeid
		);
        
        -- credit WIP eggs item - ledger
        SET @jedetailid = null;
        CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			@WIPeggledgerid,
            0,
            NULL,
            p_setterbatchid,
			NULL,
            NULL,
            NULL,
			NULL,
			NULL,
			0,
			(p_wasteeggs * @overheadcostperegg), -- JE on cracked eggs
			NULL,
			NULL,
			NULL,
			@itemid,
			NULL,
			'Hatcher batch',
			p_companyid,
			p_userid,
			@jedetailid
		 );
		 
		 -- Debit to cracked egg - Ledger
		
		 SET @jedetailid1 = null;
		 CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
            @WIPeggledgerid,
            0,
            NULL,
            p_setterbatchid,
			NULL,
            NULL,
            NULL,
			NULL,
			NULL,
			(p_wasteeggs * @overheadcostperegg),  -- JE on cracked eggs
			0,
			NULL,
			NULL,
			NULL,
			@itemid,
			NULL,
			'Hatcher batch',
			p_companyid,
			p_userid,
			@jedetailid1
		 );
    
    UPDATE materialreceipt SET batchid = out_id WHERE id = @out_recid;
    
    -- Setter batch completed only when setterusedquantity is Zero (0)
    
    SET @setterbatchactualquantity = NULL;
    SET @setterbatchusedquantity = NULL;
    
    SELECT 
		@setterbatchactualquantity:= SB.actualquantity,
		@setterbatchusedquantity := sum(IFNULL(HB.actualquantity, 0))
	FROM
		setterbatch SB 
	
	LEFT JOIN hatcherbatch HB ON SB.id = HB.setterbatchid
	WHERE
		SB.id = p_setterbatchid
	GROUP BY
		SB.actualquantity;
        
	
    
    -- Update setter batch status to 'completed'
    if(@setterbatchactualquantity = @setterbatchusedquantity) THEN
		UPDATE setterbatch set status = 283 where id = p_setterbatchid;         	
    END IF;
    
    
   -- record log
  --  CALL spc_commonlog_save(p_companyid, 'hatcherbatch', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherbatch_save_byhatcherbatchopening`(
	IN p_id INT,
    IN p_hatcherid INT,
    IN p_setterid INT,
    IN p_setterbatchid INT,
    IN p_hatchercapacity INT,
    IN p_wasteeggs INT,
    IN p_actualquantity INT,
    IN p_batchdate DATE,
    IN p_statusid INT,
    IN p_itembatch VARCHAR(100),
    IN p_itemid INT,
    IN p_hatcheryopeningid INT,
    IN p_hatchingeggscost DECIMAl(15,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @defaulteggsitemid = p_itemid;
    SET  @overheadcostperegg=p_hatchingeggscost;
     select hatchingwhs INTO @defaulthatcherywhforeggs FROM hatchery_opningbalance where id =  p_hatcheryopeningid;
     
    
	SELECT I.id,I.itemunitid,I.itemname INTO @defaulteggsitemid,@itemunitid,@WIPeggledgerid
		FROM item I
        WHERE I.id = p_itemid;
        SELECT
            @WIPeggledgerid := WIPeggledgerid
	FROM
		hatcherysettings HS
    WHERE 
		HS.companyid = p_companyid;

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		-- Do material transfer from setter warehouse to particular hatcher warehouse
        SET @out_transferid = NULL;
		CALL spc_materialtransfer_save(
			NULL, 502, 502, 582, p_batchdate, p_batchdate,NULL,
			(SELECT warehouseid FROM setter WHERE id = p_setterid), NULL,
             621, p_setterbatchid,
			NULL, NULL, p_companyid, p_userid, @out_transferid
		);
        
		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, @out_transferid,
            (SELECT warehouseid FROM hatcher WHERE id = p_hatcherid), NULL,
            @defaulteggsitemid, @eggsitemname,
			p_actualquantity, p_actualquantity, 
			(SELECT refname FROM `reference` WHERE id = @itemunitid),
			p_itembatch, p_userid, p_companyid, @out_transferdetailid
		);
	
		
    
		-- Create hatcher batch
	
		INSERT INTO hatcherbatch 
				(id, hatcherid, setterid, setterbatchid, hatchercapacity,wasteeggs, actualquantity, batchdate, statusid, completiondate, companyid)
			VALUES 
				(p_id, p_hatcherid, p_setterid, p_setterbatchid, p_hatchercapacity,p_wasteeggs, p_actualquantity, p_batchdate, p_statusid, p_batchdate, p_companyid);
                
	 
	  SET @action = 'INSERT';
       SELECT LAST_INSERT_ID() INTO out_id;
	END IF;
    
   
    
    -- JE for WIP egg ledger to cracked egg ledger
        SET @jeid = null;
		CALL spc_journalentry_save(
			NULL,
			NULL,
			1297,
			NULL,
			p_batchdate,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
            NULL,
            722,
			NULL,
			'Transfer WIP eggs to hatcher',
			NULL,
			NULL,
			NULL,
			out_id,
			'Transfer WIP eggs to hatcher',
			p_companyid,
			p_userid,
			@jeid
		);
        
        -- credit WIP eggs item - ledger
        SET @jedetailid = null;
        CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			@WIPeggledgerid,
            0,
            NULL,
            p_setterbatchid,
			NULL,
            NULL,
            NULL,
			NULL,
			NULL,
			0,
			(p_actualquantity * @overheadcostperegg),
			NULL,
			NULL,
			NULL,
			@itemid,
			NULL,
			'Hatcher Opening JE',
			p_companyid,
			p_userid,
			@jedetailid
		 );
		 
		 -- Debit to cracked egg - Ledger
		
		 SET @jedetailid1 = null;
		 CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
            @WIPeggledgerid,
            0,
            NULL,
            p_setterbatchid,
			NULL,
            NULL,
            NULL,
			NULL,
			NULL,
			(p_actualquantity * @overheadcostperegg),
			0,
			NULL,
			NULL,
			NULL,
			@itemid,
			NULL,
			'Hatcher Opening JE',
			p_companyid,
			p_userid,
			@jedetailid1
		 );
    
    UPDATE materialreceipt SET batchid = out_id WHERE id = @out_recid;
    -- Update setter batch status to 'completed'
    
	UPDATE setterbatch set status = 283 where id = p_setterbatchid;  
  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherbatch_search`(
    IN p_companyid INT
)
BEGIN
    
   -- SELECT
	-- HB.id as hatchingno,
	-- hatcherid,
	-- setterid,
	-- setterbatchid,
	-- setterquantity,
	-- hatchercapacity,
	-- cracked,
	-- burst,
	-- clears,
    --    actual,
	-- DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as batchdate,
	-- HB.statusid,
    --    R.refname,
    --    DATE_FORMAT(HB.completiondate,'%d/%m/%Y') as completiondate,
     --   HB.companyid
	
    -- FROM
	-- hatcherbatch HB
     --   LEFT JOIN reference R ON R.id = HB.statusid
	
	-- WHERE
	-- HB.companyid = p_companyid;
    
      SELECT
		HB.id as hatcherbatchno,
        HB.hatcherid,
        L.id as locationid,
		L.locationname,
		H.hatchername,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as hatchingbatchdate,
        HB.setterbatchid as settingno,
        HB.statusid,
        R.refname,
        HB.setterid,
        HB.hatchercapacity,
        HB.wasteeggs,
        HB.actualquantity,
        SB.actualquantity as setterbatchqty
	
    FROM
		hatcherbatch HB
	
    LEFT JOIN hatcher H ON HB.hatcherid = H.id
    -- LEFT JOIN breederbatch BB on HB.breederbatchid = BB.id
	LEFT JOIN location L ON H.locationid = L.id
    LEFT JOIN `reference` R ON R.id = HB.statusid
    LEFT JOIN setterbatch SB ON SB.id = HB.setterbatchid
        
	WHERE
		HB.companyid = p_companyid
        and HB.statusid = 302
	
    GROUP BY HB.setterbatchid
    
    ORDER BY HB.id DESC;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherbatch_search_completehatcherbatch`(
IN p_companyid INT)
BEGIN
   SET 	@defaulteggsitemid = null,
		@defaultdocitemid = null,
		@ddefaulthatcherywhfordoc = null,
        @overheadcostperegg = null,
        @docstandardcost = null,
        @defaulthatcherywhforeggs = null;
        
SELECT @defaulteggsitemid:= defaulteggsitemid,
		  @defaultdocitemid:= defaultdocitemid,
		  @defaulthatcherywhfordoc:= defaulthatcherywhfordoc,
		  @defaulthatcherywhforeggs:= defaulthatcherywhforeggs,
          @docstandardcost:= docstandardcost,
          @overheadcostperegg:= overheadcostperegg
          
	FROM
		hatcherysettings 
	
    WHERE 
		companyid = p_companyid;
		
   
 SELECT
		HB.id as hatcherbatchno,
        HB.hatcherid,
		L.locationname,
        H.locationid,
		H.hatchername,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as hatcherbatchdate,
        HB.setterbatchid as settingno,
        HB.statusid,
        R1.refname,
        HB.setterid,
        HB.hatchercapacity,
		HB.actualquantity,
        S.breederbatchid,
		B.batchname as breederbatchname,
        R1.refname as status,
		@defaulteggsitemid AS eggsitemid,
        @defaultdocitemid as docitemid,
        @defaulthatcherywhfordoc as wharehouseid,
		@defaulthatcherywhforeggs as eggswharehouseid,
        @docstandardcost as defaultdoccost,
        @overheadcostperegg as defaulteggscost,
        I.itemname as docitemname,
        I1.itemname as eggsitemname,
        I.unitcost,
        I.itemunitid,
        I1.unitcost as eggsunitcost,
        I.itemunitid as eggsitemunitid,
        I1.itemunitid as eggsitemunitid,
        W.warehousename,
        W1.warehousename,
        R2.refname as itemunitname,
		S.itembatch as itembatchidformatissue
        
	
    FROM
		hatcherbatch HB
	
    LEFT JOIN hatcher H ON HB.hatcherid = H.id
    LEFT JOIN setterbatch S ON S.id = HB.setterbatchid
    LEFT JOIN breederbatch B ON  S.breederbatchid = B.id 
	LEFT JOIN location L ON H.locationid = L.id
    LEFT JOIN `reference` R1 ON R1.id = HB.statusid
    LEFT JOIN warehouse W ON W.id = @defaulthatcherywhfordoc
    LEFT JOIN warehouse W1 ON W1.id = @defaulthatcherywhforeggs
	LEFT JOIN item I ON  I.id =  @defaultdocitemid
    LEFT JOIN item I1 ON  I1.id =  @defaulteggsitemid
    LEFT JOIN `reference` R2 ON R2.id = I.itemunitid
    
        
	WHERE
		HB.companyid = p_companyid
        -- 302 = In Progress
        AND  HB.statusid = 303
        
	ORDER BY HB.id DESC;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherbatch_select`(
	-- IN p_setterid INT
    IN p_setterbatchid INT
)
BEGIN

    SELECT
		HB.id as hatcherbatchno,
		HB.hatcherid,
		HB.setterid,
        S.settername,
        H.hatchername,
		HB.setterbatchid as settingno,
		HB.hatchercapacity,
        HB.actualquantity,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as hatchingbatchdate,
		HB.statusid,
        R.refname,
        DATE_FORMAT(HB.completiondate,'%d/%m/%Y') as completiondate
        
	
    FROM
		hatcherbatch HB
        
		LEFT JOIN setter S ON S.id = HB.setterid
        LEFT JOIN reference R ON R.id = HB.statusid
		LEFT JOIN setterbatch SB ON SB.id = HB.setterbatchid
        LEFT JOIN hatcher H ON H.id = HB.hatcherid
	
	WHERE
		-- (
			-- NULLIF(p_id, '') IS NOT NULL AND HB.id = p_id 
            -- OR NULLIF(p_id, '') IS NULL
		-- );
        
        HB.setterbatchid = p_setterbatchid
        
	 ORDER BY HB.batchdate DESC;
		
	

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherdailytransaction_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN
	DELETE FROM hatcherdailytransaction WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'hatcherdailytransaction', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherdailytransaction_save`(
	IN p_id INT,
    IN p_hatcherid INT,
    IN p_hatcherbatchid INT,
    IN p_date DATE,
    IN p_time VARCHAR(50),
    IN p_temperature DECIMAL(18,3),
    IN p_humidity DECIMAL(18,3),
    IN p_remark VARCHAR(500),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
SET @action = null;
    
	IF EXISTS(
            SELECT id from hatcherdailytransaction 
            where date > p_date AND hatcherbatchid = p_hatcherbatchid
			AND (
				  (NULLIF(p_id, 0) IS NULL)
				 -- OR 
				 -- (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id)
                )
            
            ) THEN  
            BEGIN
        
				SELECT -1 INTO out_id;
	
			 END;
            
	ELSEIF EXISTS(
            SELECT id from hatcherdailytransaction where date = p_date AND time = p_time
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN  BEGIN
        
				SELECT -2 INTO out_id;
	
			 END;
             
    ELSE 
    
BEGIN
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO hatcherdailytransaction 
				(hatcherid, hatcherbatchid, date, time, temperature, humidity, remark, companyid)
			VALUES 
				(p_hatcherid, p_hatcherbatchid, p_date, p_time, p_temperature, p_humidity, p_remark, p_companyid);
	  
      SET @action = 'INSERT';
	
    ELSE
    
		UPDATE hatcherdailytransaction
				SET hatcherid = p_hatcherid, 
                hatcherbatchid = p_hatcherbatchid,
                date = p_date, 
                time = p_time,
                temperature = p_temperature,
                humidity = p_humidity,
                remark = p_remark,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'hatcherdailytransaction', out_id, @action, p_userid);
   END;
   
   END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherdailytransaction_search`(
	IN p_hatcherbatchid INT,
    IN p_companyid INT
)
BEGIN
    
    SELECT
			HT.id,
            HT.hatcherid,
            H.hatchername,
            H.locationid,
			L.locationname,
            HT.hatcherbatchid,
			DATE_FORMAT(HT.date,'%d/%m/%Y') as date,
            time,
            temperature,
            humidity,
            remark
			
    FROM
		hatcherdailytransaction HT
	
    LEFT JOIN hatcher H ON HT.hatcherid = H.id
	LEFT JOIN location L ON H.locationid = L.id
          
	WHERE
		HT.companyid = p_companyid AND 
        HT.hatcherbatchid = p_hatcherbatchid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherdailytransaction_select`(
	IN p_id INT
)
BEGIN
	SELECT 	id,
			hatcherid,
			hatcherbatchid,
            DATE_FORMAT(date,'%d/%m/%Y') as date,
			time,
			temperature,
			humidity,
			remark
        
	
    FROM  hatcherdailytransaction 
	
    WHERE 
          id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherforcurrentlocation_search`(
    IN p_companyid INT,
    IN p_locationid INT
)
BEGIN

	SELECT 
		id,
        locationid,
        hatchername,
        capacity,
        (capacity - usedcapacity) as remainingcapacity
        
	FROM
		hatcher
    
	WHERE
		isActive = 1 and
        companyid = p_companyid and
        locationid = p_locationid AND
        capacity > usedcapacity
        
	ORDER BY id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryaccountsettings_save`(
	IN p_id INT,
	IN p_locationid INT,
    IN p_arinvoicegl INT,
    IN p_arinvoicetaxid INT,
    IN p_outsidehatcheryprocessinggl INT,
    IN p_inventoryrevaluationgl INT,
    IN p_fumigationglforowneggs INT,
    IN p_fumigationglforoutsideeggs INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO hatcheryaccountsettings
				 (id, locationid, arinvoicegl, arinvoicetaxid, outsidehatcheryprocessinggl, inventoryrevaluationgl, fumigationglforowneggs, fumigationglforoutsideeggs, companyid)
                VALUES 
				(p_id, p_locationid, p_arinvoicegl, p_arinvoicetaxid, p_outsidehatcheryprocessinggl, p_inventoryrevaluationgl, p_fumigationglforowneggs, p_fumigationglforoutsideeggs, p_companyid);
		
        SET @action = 'INSERT';
          
	ELSE
	
		UPDATE hatcheryaccountsettings
				SET locationid = p_locationid, 
                arinvoicegl = p_arinvoicegl, 
                arinvoicetaxid = p_arinvoicetaxid,
                outsidehatcheryprocessinggl = p_outsidehatcheryprocessinggl,
                inventoryrevaluationgl = p_inventoryrevaluationgl,
                fumigationglforowneggs = p_fumigationglforowneggs,
                fumigationglforoutsideeggs = p_fumigationglforoutsideeggs,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';     
			
	END IF;
    
     SELECT LAST_INSERT_ID() INTO out_id;
     
     -- record log
    CALL spc_commonlog_save(p_companyid, 'hatcheryaccountsettings', out_id, @action, p_userid);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryaccountsettings_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		HS.id,
        L.locationname,
        LD1.ledgercode as arinvoicegl,
        T.taxcode as arinvoicetax,
        LD2.ledgercode as outsidehatcheryprocessinggl,
        LD3.ledgercode as inventoryrevaluationgl,
        LD4.ledgercode as fumigationglforowneggs,
        LD5.ledgercode as fumigationglforoutsideeggs
       
    FROM
		hatcheryaccountsettings HS
	
    INNER JOIN location L ON HS.locationid = L.id
    INNER JOIN ledgers LD1 ON HS.arinvoicegl = LD1.id
     INNER JOIN tax T ON HS.arinvoicetaxid = T.id
    INNER JOIN ledgers LD2 ON HS.outsidehatcheryprocessinggl = LD2.id
    INNER JOIN ledgers LD3 ON HS.inventoryrevaluationgl = LD3.id
    INNER JOIN ledgers LD4 ON HS.fumigationglforowneggs = LD4.id
    INNER JOIN ledgers LD5 ON HS.fumigationglforoutsideeggs = LD5.id
   
  
	WHERE
		HS.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryaccountsetting_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN
	DELETE FROM hatcheryaccountsettings WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'hatcheryaccountsettings', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryaccountsetting_select`(
	IN p_id INT
)
BEGIN
    
    SELECT
		  HS.id,
          HS.locationid,
          L.locationname,
          HS.arinvoicegl,
          LD1.ledgercode as arinvoiceglcode,
		  HS.arinvoicetaxid,
          T.taxcode,
          HS.outsidehatcheryprocessinggl,
          LD2.ledgercode as outsidehatcheryprocessingglcode,
          HS.inventoryrevaluationgl,
          LD3.ledgercode as inventoryrevaluationglcode,
          HS.fumigationglforowneggs,
          LD4.ledgercode as fumigationglforowneggscode,
          HS.fumigationglforoutsideeggs,
          LD5.ledgercode as fumigationglforoutsideeggscode
	
    FROM
		hatcheryaccountsettings HS
	
        INNER JOIN location L ON HS.locationid = L.id
        INNER JOIN ledgers LD1 ON HS.arinvoicegl = LD1.id
        INNER JOIN tax T ON HS.arinvoicetaxid = T.id
        INNER JOIN ledgers LD2 ON HS.outsidehatcheryprocessinggl = LD2.id
        INNER JOIN ledgers LD3 ON HS.inventoryrevaluationgl = LD3.id
        INNER JOIN ledgers LD4 ON HS.fumigationglforowneggs = LD4.id
        INNER JOIN ledgers LD5 ON HS.fumigationglforoutsideeggs = LD5.id

	WHERE
		HS.id = p_id;
      

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherydashboard_availablesettercapacity`(
	IN p_companyid INT
)
BEGIN

	SELECT
        IFNULL(SUM(S.capacity), 0) AS availablesettercapacity
    FROM
		setter S
		LEFT JOIN setterbatch SB ON S.id = SB.setterid
	WHERE
		DATE_ADD(SB.batchdate, INTERVAL 18 DAY) = curdate()
		AND S.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherydashboard_expecteddoc`(
    IN p_hatcherdays INT,
    IN p_companyid INT
)
BEGIN

	SELECT IFNULL(sum(actualquantity), 0) AS expecteddoc
    FROM 
		hatcherbatch HB
	LEFT JOIN chickspullout CPO ON HB.id = CPO.hatchbatchid
	WHERE
		-- hatcherbatches whose chickspullout not done yet
		CPO.id IS NULL 
        -- Current date must be greater than batchdate + 3 days
		AND batchdate <= DATE_ADD(curdate(), INTERVAL -p_hatcherdays DAY)
		AND HB.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherydashboard_expectedeggs`(
    IN p_companyid INT
)
BEGIN

	SELECT IFNULL(sum(HSD.plannedquantity), 0) AS expectedeggs
    FROM 
		hatcheryschedule HS
	INNER JOIN hatcheryscheduledetail HSD ON HS.id = HSD.hatcheryscheduleid
	WHERE
		scheduledfordate = curdate()
		AND HS.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherydashboard_hatchability`(
	IN p_fromDate DATE,
    IN p_toDate DATE,
    IN p_companyid INT
)
BEGIN

	SELECT hc.*, 
    
    CASE WHEN hc.totalhatchpercent < 60 THEN 'Error'
			WHEN hc.totalhatchpercent between 60 and 70 THEN 'Neutral'
			WHEN hc.totalhatchpercent between 70 and 85 THEN 'Critical'
			WHEN hc.totalhatchpercent between 85 and 100 THEN 'Good'
		ELSE 'Neutral'
			END AS valuecolor
    FROM (


		SELECT hatchability.*, 
			ROUND(((totalhatch * 100) / actualquantity),2) AS totalhatchpercent,
			ROUND(((sellable * 100) / totalhatch),2) AS sellablepercent
		FROM
		(
			SELECT 
				SUM(capacity) AS capacity, 
				SUM(actualquantity) AS actualquantity,  
				SUM(totalhatch) AS totalhatch,
				SUM(sellable) AS sellable
			FROM
				setterbatch SB
			INNER JOIN setter S ON S.id = SB.setterid
			INNER JOIN chickspullout CPO ON SB.id = CPO.setterbatchid
			WHERE
				SB.status = 283
				AND (pulloutdate BETWEEN p_fromDate AND p_toDate)
				AND SB.companyid = p_companyid
		 )   
		 
		AS hatchability
    )
    AS hc;
    
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherydashboard_lastdayproduction`(
	IN p_companyid INT	
)
BEGIN

	SELECT 
		IFNULL(SUM(sellable), 0) AS lastdayproduction 
    FROM 
		chickspullout 
    
    WHERE pulloutdate = DATE_ADD(curdate(), INTERVAL -1 DAY)
		AND companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherydashboard_Tiles`(
    IN p_hatcherdays INT,
    IN p_companyid INT
)
BEGIN

	SET @currDate = curdate();
    
    SET @currYear = YEAR(curdate());
    SET @fincStartDate = NULL;
    SET @fincEndDate = NULL;
    SET @monStartDate = DATE_ADD(DATE_ADD(LAST_DAY(curdate()), INTERVAL 1 DAY), INTERVAL - 1 MONTH);
    SET @monEndDate = LAST_DAY(curdate());
    
    IF(MONTH(curdate()) <= 3) THEN
		
        SET @fincStartDate = concat((YEAR(curdate()) - 1), '-04-01');
        SET @fincEndDate = concat(YEAR(curdate()) , '-03-31');
        
    ELSE
		SET @fincStartDate = concat(YEAR(curdate()) , '-04-01');
        SET @fincEndDate = concat((YEAR(curdate()) + 1) , '-03-31');
    END IF;
    
    

	-- Hatchability % (yearly)
    CALL spc_hatcherydashboard_hatchability(@fincStartDate, @fincEndDate, p_companyid);
    
    -- Hatchability % (current Month)
    CALL spc_hatcherydashboard_hatchability(@monStartDate, @monEndDate, p_companyid);
    
    -- Expected Eggs for current date
    CALL spc_hatcherydashboard_expectedeggs(p_companyid);
    
    -- Expected DOC for current date
	CALL spc_hatcherydashboard_expecteddoc(p_hatcherdays, p_companyid);
    
    -- Total setter capacity available for current date
    CALL spc_hatcherydashboard_availablesettercapacity(p_companyid);
    
    -- Last day production for chickspullout
    CALL spc_hatcherydashboard_lastdayproduction(p_companyid);
    
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryproduction_report`(
IN p_locationid  varchar(300),
IN p_btchid varchar(300), 
IN p_partyid varchar(300),
IN p_companyid INt(11)
)
BEGIN
SET @@sql_mode = '';

-- IF( p_btchid != '' ) THEN

DROP TEMPORARY TABLE IF EXISTS tempprduction1;
CREATE TEMPORARY TABLE tempprduction1 

select
IFNULL(SB.breederbatchid,'-')as breederbatchid,
IFNULL(BB.batchname,'-') as breederbatchname,
HS.locationid as locationid,
SB.id as setterbatchid,
DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as setterbatchdate,
HB.id as hatcherbatchid,
DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as hatcherbatchdate,
SB.actualquantity as totalhatcheggreceived,
HSD.itemid,
I.itemname,
I.unitcost as rate,
ROUND((SB.actualquantity*I.unitcost),2)as totalamt,
CP.totalhatch as totalchicks,
ROUND(((SB.actualquantity*I.unitcost)/CP.totalhatch),2) as grosstotal,
ROUND(CP.sellableper,2) as sellableper,
ROUND(((CP.culls/CP.totalhatch)*100),2)as cullsper,
IFNULL(G.supplierid,'-') as partyid,
IFNULL(P.partyname,'-')  as partyname,
ROUND(((CP.totalhatch/SB.actualquantity)*100),2) as hatchper,
CP.itemid as cpitem,
I1.itemname as cpitemname,
HSS.overheadcostperegg,
ROUND((((SB.actualquantity*I.unitcost)/CP.totalhatch)+IFNULL(HSS.overheadcostperegg,0)),2)as nettotal
FROM setterbatch SB 
            LEFT JOIN hatcheryschedule HS ON HS.id = SB.scheduleid
            LEFT JOIN hatcheryscheduledetail HSD ON HSD.hatcheryscheduleid=HS.id
			LEFT JOIN grpo G ON G.id  = SB.sourcedeliveryid and  SB.sourceid=262
            LEFT JOIN party P ON P.id= G.supplierid
            LEFT JOIN item I ON I.id = HSD.itemid
            LEFT JOIN location L ON L.id = HS.locationid
			LEFT JOIN breederbatch BB ON BB.id =  SB.breederbatchid
			LEFT JOIN hatcherbatch HB ON HB.setterbatchid = SB.id
            LEFT JOIN chickspullout CP ON CP.hatchbatchid = HB.id
			LEFT JOIN item I1 ON I1.id = CP.itemid
            LEFT JOIN hatcherysettings HSS ON HSS.companyid = SB.companyid
            
             WHERE
                 (p_btchid != ''
				 AND find_in_set(HS.locationid,p_locationid)
                 AND find_in_set(SB.breederbatchid,p_btchid)) or
                 (p_partyid!=''
                 AND find_in_set(HS.locationid,p_locationid)
				 AND SB.sourceid=262
                 AND  find_in_set(P.id ,p_partyid))group by HB.id order by SB.breederbatchid;
                 
                 
  -- END IF;   
  select * from tempprduction1;
 
 /*
 IF( p_partyid != '' ) THEN                
 DROP TEMPORARY TABLE IF EXISTS tempprduction2;
 CREATE TEMPORARY TABLE tempprduction2         
 
 select
'-' as breederbatchid,
'-' as breederbatchname,
HS.locationid as locationid,
SB.id as setterbatchid,
DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as setterbatchdate,
HB.id as hatcherbatchid,
DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as hatcherbatchdate,
SB.actualquantity as totalhatcheggreceived,
HSD.itemid,
I.itemname,
I.unitcost as rate,
ROUND((SB.actualquantity*I.unitcost),2)as totalamt,
CP.totalhatch as totalchicks,
ROUND(((SB.actualquantity*I.unitcost)/CP.totalhatch),2) as grosstotal,
ROUND(CP.sellableper,2) as sellableper,
ROUND(((CP.culls/CP.totalhatch)*100),2)as cullsper,
-- G.id as grpoid,
G.supplierid as partyid,
P.partyname,
ROUND(((CP.totalhatch/SB.actualquantity)*100),2) as hatchper,
CP.itemid as cpitem,
I1.itemname as cpitemname,
HSS.overheadcostperegg,
ROUND((((SB.actualquantity*I.unitcost)/CP.totalhatch)+IFNULL(HSS.overheadcostperegg,0)),2)as nettotal
FROM setterbatch SB
            LEFT JOIN hatcheryschedule HS ON HS.id = SB.scheduleid
            LEFT JOIN hatcheryscheduledetail HSD ON HSD.hatcheryscheduleid=HS.id and HSD.sourceid=262
            LEFT JOIN grpo G ON G.id  = SB.sourcedeliveryid and  SB.sourceid=262
            LEFT JOIN party P ON P.id= G.supplierid
            LEFT JOIN item I ON I.id = HSD.itemid
            LEFT JOIN location L ON L.id = HS.locationid
            LEFT JOIN hatcherbatch HB ON HB.setterbatchid = SB.id
            LEFT JOIN chickspullout CP ON CP.hatchbatchid = HB.id
			LEFT JOIN item I1 ON I1.id = CP.itemid
            LEFT JOIN hatcherysettings HSS ON HSS.companyid = SB.companyid
            
             WHERE
				 find_in_set(HS.locationid,'1')
				 AND SB.sourceid=262
                 AND  find_in_set(P.id ,p_partyid)
                 group by HB.id;

 END IF;
 select * from tempprduction2
 UNION ALL
 select * from tempprduction1;
 */
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryscheduledetail_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN

    DELETE FROM hatcheryscheduledetail WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'hatcheryscheduledetail', p_id, 'delete', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryscheduledetail_ismaterialreceived`(
	IN p_sourceid INT,
    IN p_requestid INT,
    OUT out_id INT
)
BEGIN

SET @returnid = null;
SET @isPO = null;
SET @@sql_mode = '';
if(p_sourceid = 261) THEN -- OWN

	SELECT 
		id INTO @returnid
	FROM 
		materialtransfer
	WHERE
		requestid = p_requestid;
        
	-- GROUP BY requestid;
   
elseif(p_sourceid = 262) THEN -- PURCHASED
	
    SELECT id INTO @isPO FROM purchaseorder 
		WHERE 
			purchaserequestid = p_requestid
            
		GROUP BY purchaserequestid;
    
	SELECT GR.id INTO @returnid FROM purchaseorder PO
		INNER JOIN grpo GR ON GR.purchaseorderid = PO.id
		WHERE
			PO.purchaserequestid = p_requestid
            
		GROUP BY PO.purchaserequestid;
END IF;


	IF @returnid IS NOT NULL THEN
		SET out_id = @returnid;
	ELSEIF @isPO IS NOT NULL THEN
		SET out_id = -2;
    ELSE
		SET out_id = -1;
    END IF;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryscheduledetail_ismaterialreceived1`(
	IN p_sourceid INT,
    IN p_requestid INT,
    OUT out_id INT
)
BEGIN

SET @returnid = null;
SET @isPO = null;

if(p_sourceid = 261) THEN -- OWN

	SELECT 
		id INTO @returnid
	FROM 
		materialtransfer
	WHERE
		requestid = p_requestid;
   
elseif(p_sourceid = 262) THEN -- PURCHASED
	
    SELECT id INTO @isPO FROM purchaseorder 
		WHERE 
			purchaserequestid = p_requestid;
    
	SELECT GR.id INTO @returnid FROM purchaseorder PO
		INNER JOIN grpo GR ON GR.purchaseorderid = PO.id
		WHERE
			PO.purchaserequestid = p_requestid;
END IF;


	IF @returnid IS NOT NULL THEN
		SET out_id = @returnid;
	ELSEIF @isPO IS NOT NULL THEN
		SET out_id = -2;
    ELSE
		SET out_id = -1;
    END IF;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryscheduledetail_save`(
		IN p_id INT,
		IN p_hatcheryscheduleid INT,
		IN p_setterid INT,
        IN p_setterslotid INT(11),
		IN p_capacity INT,
		IN p_planned INT,
		IN p_sourceid INT,
        IN p_statusid INT,
        IN p_approvedby INT,
        IN p_approveddate DATE,
        IN p_itemid INT,
		IN p_companyid INT,
        In p_userid INT,
		OUT out_id INT
)
BEGIN

	SET @action = null;
  
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO hatcheryscheduledetail 
				(hatcheryscheduleid, setterid, setterslotcapacity, plannedquantity, sourceid, statusid, approvedby, approveddate,itemid, setterslotid, companyid)
			VALUES 
				(p_hatcheryscheduleid, p_setterid, p_capacity, p_planned, p_sourceid, p_statusid, p_approvedby, p_approveddate,p_itemid, p_setterslotid, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE hatcheryscheduledetail
			SET 
				hatcheryscheduleid = p_hatcheryscheduleid, 
				setterid = p_setterid, 
				setterslotcapacity = p_capacity, 
				plannedquantity = p_planned, 
				sourceid = p_sourceid, 
                statusid = p_statusid,
                approvedby = p_approvedby,
                approveddate = p_approveddate,
                itemid = p_itemid,
                setterslotid = p_setterslotid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 


    -- if existing record has 'New' status but not 'Approved'/'Cancelled'
    IF p_statusid = 242 THEN  -- AND EXISTS(SELECT id FROM hatcheryscheduledetail WHERE statusid NOT IN(242,243) AND id = out_id) THEN
		UPDATE setterslots 
        SET statusid = 6192
        WHERE id = p_setterslotid;
        -- if source is Own, generate material transfer request
		IF (out_id > 0 AND p_statusid = 242 AND p_sourceid = 261) THEN
		
          SET @out_materialRequestId = null;
          SET @out_materialrequestdetailid = null;
          
		    CALL spc_materialrequest_save(
				null, 502, 501, 444, 
                (SELECT scheduledfordate FROM hatcheryschedule WHERE id = p_hatcheryscheduleid),
				(SELECT scheduledfordate FROM hatcheryschedule WHERE id = p_hatcheryscheduleid),
				'Eggs request from system',
				(SELECT warehouseid FROM setter WHERE id = p_setterid), 
                (SELECT warehousebinid FROM setter WHERE id = p_setterid),
                null, null,
				null,
				p_companyid ,
				p_userid,
                @out_materialRequestId
			);
		
            CALL spc_materialrequestdetail_save(
				null, 
                @out_materialRequestId,
                p_itemid,
               (select itemname from item where id = p_itemid),
                p_planned,
               (select itemunitid from item where id = p_itemid),
                p_companyid,
				p_userid,
                @out_materialrequestdetailid
			);
            
            IF(@out_materialRequestId > 0) THEN
				UPDATE hatcheryscheduledetail
                SET requestid = @out_materialRequestId
                WHERE id = out_id;
            END IF;
            
        -- If source is Purchase, generate purchase request
		 SET @out_purchaseRequestId = null;
		SET @out_purchaserequestdetailid = null;
          
        ELSE IF(out_id > 0 AND p_statusid = 242 AND p_sourceid = 262) THEN
			 CALL spc_purchaserequest_save(
				null,
                null,
                542,
				(SELECT scheduledfordate FROM hatcheryschedule WHERE id = p_hatcheryscheduleid),
                p_userid,
                null,
                'Eggs purchase request',
                92,
                null,
                null,
                 p_approveddate,
                p_companyid,
                p_userid,
                @out_purchaseRequestId
             );
             
             CALL spc_purchaserequestdetail_save(
				null,
                @out_purchaseRequestId,
                p_itemid,
                (select itemname from item where id = p_itemid),
                p_planned,
                (select itemunitid from item where id = p_itemid),
                1641,
                p_companyid,
                p_userid,
                @out_purchaserequestdetailid
             );
             
			IF(@out_purchaseRequestId > 0) THEN
				UPDATE hatcheryscheduledetail
                SET requestid =@out_purchaseRequestId
                WHERE id = out_id;
            END IF;
            
		END IF;
        
     END IF;
     
   END IF;
    
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'hatcheryscheduledetail', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryscheduledetail_search`(
	IN p_hatcheryscheduleid INT
)
BEGIN

	SELECT HSD.id,
		HSD.hatcheryscheduleid,
		HSD.setterid,
        S.settername,
        HSD.setterslotid,
        SS.slotname,
        HSD.setterslotcapacity,
        HSD.plannedquantity,
		HSD.sourceid,
        REF1.refname as `source`,
        HSD.statusid,
        REF2.refname as `status`,
        HSD.approvedby,
        U.fullname as approvedbyname,
        HSD.approveddate,
		HSD.companyid,
        HSD.requestid,
        MT.tobatchid as breederbatchid,
        MT.id as transferid,
        HSD.itemid,
        I.itemname
        
	FROM 
		hatcheryscheduledetail HSD
	
    LEFT JOIN setter S ON HSD.setterid = S.id
    LEFT JOIN setterslots SS ON HSD.setterslotid = SS.id
    LEFT JOIN `reference` REF1 ON HSD.sourceid = REF1.id
	LEFT JOIN `reference` REF2 ON HSD.statusid = REF2.id
    LEFT JOIN `user` U ON HSD.approvedby = U.id
	LEFT JOIN item I ON I.id = HSD.itemid
    LEFT JOIN materialtransfer MT ON MT.requestid = HSD.requestid 
	WHERE
		HSD.hatcheryscheduleid = p_hatcheryscheduleid; 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryscheduledetail_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
        id as detailsid,
		hatcheryscheduleid,
		setterid,
		capacity,
		planned,
		sourceid,
        statusid,
		companyid,
        itemid
	FROM 
		hatcheryscheduledetail
	WHERE
		id = p_id AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryschedulelist_search`(
	IN p_location INT,
    IN p_from_date date,
	IN p_to_date date
)
BEGIN

	SELECT 
		HS.id,
		DATE_FORMAT(scheduledate,'%d/%m/%Y') as scheduledate,
        DATE_FORMAT(scheduledfordate,'%d/%m/%Y') as scheduledfordate,
        L.locationname,
		restperiod,
        CASE WHEN (fnc_hatchery_status(HS.id) = 1) THEN 'Pending For Approval'
        ELSE 'Processed' END  as schedulestatus
	
	FROM 
		hatcheryschedule HS
    
        LEFT JOIN location L ON HS.locationid = L.id
 
	WHERE
		HS.locationid = p_location AND
        (HS.scheduledate BETWEEN p_from_date AND p_to_date)
	ORDER BY
		HS.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryschedule_availableforsetterbatch`(
	IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';
select 
		HS.id,
		DATE_FORMAT(scheduledate,'%d/%m/%Y') as scheduledate,
        DATE_FORMAT(scheduledfordate,'%d/%m/%Y') as scheduledfordate,
		HS.locationid,
        L.locationname,
		restperiod,
        R.refname as sourcename
        
	from hatcheryschedule HS
    
		INNER JOIN hatcheryscheduledetail HSD ON HSD.hatcheryscheduleid = HS.id
        LEFT JOIN `reference` R ON HSD.sourceid = R.id
		LEFT JOIN setterbatch SB ON HSD.id = SB.detailsid 
        LEFT JOIN location L ON L.id = HS.locationid
    
    WHERE SB.id is NULL 
		  and HS.companyid = p_companyid
		  and HSD.statusid = 242 
          -- status 242 is 'approved'
          
	GROUP BY HS.id
    
    ORDER BY HS.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryschedule_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT,
	OUT out_id INT
)
BEGIN

	-- DELETE FROM hatcheryschedule WHERE id = p_id;
    -- DELETE FROM hatcheryscheduledetail WHERE hatcheryscheduleid = p_id;
    
    -- record log
    -- CALL spc_commonlog_save(p_companyid, 'hatcheryschedule', p_id, 'delete', p_userid);


    IF EXISTS(
				SELECT id from hatcheryscheduledetail where hatcheryscheduleid = p_id and statusid IN (242, 243)
             ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    
		BEGIN
			DELETE FROM hatcheryscheduledetail WHERE hatcheryscheduleid = p_id;
			DELETE FROM hatcheryschedule WHERE id = p_id;
             
	    	 SELECT p_id INTO out_id;
			 
		END;
     
   END IF;
   
   	-- record log
	CALL spc_commonlog_save(p_companyid, 'hatcheryschedule', p_id, 'delete', p_userid);	
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryschedule_save`(
	IN p_id INT,
    IN p_scheduledate DATE,
    IN p_scheduledfordate DATE,
    IN p_locationid INT,
    IN p_restperiod INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO hatcheryschedule 
				(id, scheduledate, scheduledfordate, locationid, restperiod, companyid)
			VALUES 
				(p_id, p_scheduledate, p_scheduledfordate, p_locationid, p_restperiod, p_companyid);
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE hatcheryschedule
				SET scheduledate = p_scheduledate, 
                scheduledfordate = p_scheduledfordate,
                locationid = p_locationid, 
                restperiod = p_restperiod,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'hatcheryschedule', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryschedule_search`(
	IN p_companyid INT
)
BEGIN

	SELECT 
		HS.id,
		DATE_FORMAT(scheduledate,'%d/%m/%Y') as scheduledate,
        DATE_FORMAT(scheduledfordate,'%d/%m/%Y') as scheduledfordate,
        L.locationname,
		restperiod,
        CASE WHEN (fnc_hatchery_status(HS.id) = 1) THEN 'Pending For Approval'
        ELSE 'Processed' END  as schedulestatus
	
	FROM 
		hatcheryschedule HS
    
        LEFT JOIN location L ON HS.locationid = L.id
 
	WHERE
		HS.companyid = p_companyid
	ORDER BY
		HS.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryschedule_select`(
	IN p_id INT
)
BEGIN
        SELECT 
		HS.id,
		DATE_FORMAT(scheduledate,'%d/%m/%Y') as scheduledate,
        DATE_FORMAT(scheduledfordate,'%d/%m/%Y') as scheduledfordate,
		HS.locationid,
        L.locationname,
		restperiod
		-- HS.statusid,
       -- REF.refname as status,
	FROM 
		hatcheryschedule HS
    
    LEFT JOIN location L ON HS.locationid = L.id
   -- LEFT JOIN reference REF ON REF.id = HS.statusid
  
    
	WHERE
		HS.id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherysettings_save`(
	IN p_id INT,
	IN p_servicecharges DECIMAL(8,3),
	IN p_gapinsetting INT,
    IN p_fertilityinpercent DECIMAL(8,3),
    IN p_settingdaysperiod INT,
    IN p_hatchingdaysperiod INT,
    IN p_biproductrequiredid INT,
    IN p_warehouselocationid INT,
    IN p_candlingdaysperiod INT,
    IN p_overheadcostperegg DECIMAL(8,3),
    IN p_docstandardcost DECIMAL(8,3),
    IN p_overheadexpenseglid INT,
    IN p_defaulteggsitemid INT,
    IN p_defaultdocitemid INT,
    IN p_defaultcrackedeggsitemid INT,
    IN p_defaultbursteggsitemid INT, 
    IN p_defaultcleareggsitemid INT,
    IN p_defaulthatcherywhforeggs INT,
    IN p_defaulthatcherywhfordoc INT,
    IN p_companyid INT,
    IN p_crackedeggscost DECIMAL(8,3),
	IN p_loadchargeperegg DECIMAL(8,3),
	IN p_vaccinateddoccost DECIMAL(8,3),
    IN p_costofgoodsoldledgerid INT(11),
    IN p_WIPledgerid INT(11),
    IN p_grpowithoutinvoiceledgerid INT(11),
    IN p_cashledgerid INT(11),
    IN p_freightledgerid INT(11),
    IN p_discountledgerid INT(11),
    IN p_docledgerid INT(11),
    IN p_vaccineitemgroupids VARCHAR(200),
    IN p_coldroom INT,
    IN p_gradingwhid INT,
    IN p_settingwhid INT,
    IN p_hatchingwhid INT,
    IN p_openareawhid INT,
    IN p_fumigationwhid INT,
    IN p_vendorwhid INT,
    IN p_broilerChicksGroupIds VARCHAR(200),
    IN p_medicineGroupIds VARCHAR(200),
    IN p_fumigationGroupIds VARCHAR(200),
    IN p_hatchingEggsGroupIds VARCHAR(200),
    IN p_medicineconsumptionledgerid INT(11),
	IN p_ctrlaccledgerid INT(11),
	IN p_outsidehatchingprocessledgerid INT(11),
	IN p_fumigationledgeridforownsetting INT(11),
	IN p_fumigationledgeridforcustomesetting INT(11),
	IN p_ARinvoiceledgerid INT(11),
	IN p_ARtaxid INT(11),
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO hatcherysettings
				(id, 
                 servicecharges, 
                 gapinsetting, 
                 fertilityinpercent, 
                 settingdaysperiod, 
                 hatchingdaysperiod, 
                 biproductrequiredid,
                 warehouselocationid,
                 candlingdaysperiod, 
                 overheadcostperegg, 
                 docstandardcost,
                 overheadexpenseglid, 
                 defaulteggsitemid,
                 defaultdocitemid,
                 defaultcrackedeggsitemid,
                 defaultbursteggsitemid,
                 defaultcleareggsitemid,
                 defaulthatcherywhforeggs,
                 defaulthatcherywhfordoc,
                 companyid,
                 crackedeggscost,
				 loadchargeperegg,
				 vaccinateddoccost,
                 costofgoodsoldledgerid,
                 WIPeggledgerid,
                 grpowithoutinvoiceledgerid,
				 cashledgerid,
				 freightledgerid,
				 discountledgerid,
                 docledgerid,
                 vaccineitemgroupids,
                 coldroom,
				 gradingwhid,
				 settingwhid,
				 hatchingwhid,
				 openareawhid,
				 fumigationwhid,
				 vendorwhid,
				 broilerChicksGroupIds,
				 medicineGroupIds,
				 fumigationGroupIds,
				 hatchingEggsGroupIds,
                 medicineconsumptionledgerid,
				 ctrlaccledgerid,
				 outsidehatchingprocessledgerid,
				 fumigationledgeridforownsetting,
				 fumigationledgeridforcustomesetting,
				 ARinvoiceledgerid,
				 ARtaxid
                 )
			VALUES 
				(p_id, 
                 p_servicecharges, 
                 p_gapinsetting, 
                 p_fertilityinpercent, 
                 p_settingdaysperiod, 
                 p_hatchingdaysperiod, 
                 p_biproductrequiredid, 
                 p_warehouselocationid, 
                 p_candlingdaysperiod, 
                 p_overheadcostperegg, 
                 p_docstandardcost,
                 p_overheadexpenseglid, 
                 p_defaulteggsitemid,
				 p_defaultdocitemid,
                 p_defaultcrackedeggsitemid,
				 p_defaultbursteggsitemid, 
				 p_defaultcleareggsitemid,
				 p_defaulthatcherywhforeggs,
				 p_defaulthatcherywhfordoc,
                 p_companyid,
                 p_crackedeggscost,
				 p_loadchargeperegg,
				 p_vaccinateddoccost,
                 p_costofgoodsoldledgerid,
                 p_WIPledgerid,
                 p_grpowithoutinvoiceledgerid,
				 p_cashledgerid,
				 p_freightledgerid,
				 p_discountledgerid,
                 p_docledgerid,
                 p_vaccineitemgroupids,
                 p_coldroom,
				 p_gradingwhid,
				 p_settingwhid,
				 p_hatchingwhid,
				 p_openareawhid,
				 p_fumigationwhid,
				 p_vendorwhid,
				 p_broilerChicksGroupIds,
				 p_medicineGroupIds,
				 p_fumigationGroupIds,
				 p_hatchingEggsGroupIds,
                 p_medicineconsumptionledgerid,
				 p_ctrlaccledgerid,
				 p_outsidehatchingprocessledgerid,
				 p_fumigationledgeridforownsetting,
				 p_fumigationledgeridforcustomesetting,
				 p_ARinvoiceledgerid,
				 p_ARtaxid);
		
        SET @action = 'INSERT';
          
	ELSE
    
		UPDATE hatcherysettings
				SET servicecharges = p_servicecharges, 
                gapinsetting = p_gapinsetting, 
                fertilityinpercent = p_fertilityinpercent,
                settingdaysperiod = p_settingdaysperiod,
                hatchingdaysperiod = p_hatchingdaysperiod,
                biproductrequiredid = p_biproductrequiredid,
                warehouselocationid = p_warehouselocationid,
                candlingdaysperiod = p_candlingdaysperiod,
                overheadcostperegg = p_overheadcostperegg,
				docstandardcost = p_docstandardcost,
                overheadexpenseglid = p_overheadexpenseglid,
				defaulteggsitemid = p_defaulteggsitemid,
				defaultdocitemid = p_defaultdocitemid,
				defaultcrackedeggsitemid = p_defaultcrackedeggsitemid,
				defaultbursteggsitemid = p_defaultbursteggsitemid, 
				defaultcleareggsitemid = p_defaultcleareggsitemid,
				defaulthatcherywhforeggs = p_defaulthatcherywhforeggs,
				defaulthatcherywhfordoc = p_defaulthatcherywhfordoc,
                companyid = p_companyid,
                crackedeggscost = p_crackedeggscost,
				loadchargeperegg = p_loadchargeperegg,
				vaccinateddoccost = p_vaccinateddoccost,
                costofgoodsoldledgerid = p_costofgoodsoldledgerid,
				WIPeggledgerid = p_WIPledgerid,
                grpowithoutinvoiceledgerid = p_grpowithoutinvoiceledgerid,
				cashledgerid = p_cashledgerid,
				freightledgerid = p_freightledgerid,
				discountledgerid = p_discountledgerid,
                docledgerid = p_docledgerid,
                vaccineitemgroupids = p_vaccineitemgroupids,
                coldroom = p_coldroom,
				gradingwhid = p_gradingwhid,
				settingwhid = p_settingwhid,
				hatchingwhid = p_hatchingwhid,
				openareawhid = p_openareawhid,
				fumigationwhid = p_fumigationwhid,
				vendorwhid = p_vendorwhid,
				broilerChicksGroupIds = p_broilerChicksGroupIds,
				medicineGroupIds = p_medicineGroupIds,
				fumigationGroupIds = p_fumigationGroupIds,
				hatchingEggsGroupIds = p_hatchingEggsGroupIds,
                medicineconsumptionledgerid = p_medicineconsumptionledgerid,
				ctrlaccledgerid = p_ctrlaccledgerid,
				outsidehatchingprocessledgerid = p_outsidehatchingprocessledgerid,
				fumigationledgeridforownsetting = p_fumigationledgeridforownsetting,
				fumigationledgeridforcustomesetting = p_fumigationledgeridforcustomesetting,
				ARinvoiceledgerid = p_ARinvoiceledgerid,
				ARtaxid = p_ARtaxid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';     
         
	END IF;
    
      SELECT LAST_INSERT_ID() INTO out_id;
      
      -- record log
      -- CALL spc_commonlog_save(p_companyid, 'hatcherysettings', out_id, @action, p_userid);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcherysettings_select`(
	IN p_companyid INT
)
BEGIN

	SELECT 
			HS.id,
		    servicecharges,
		    gapinsetting,
            fertilityinpercent,
			settingdaysperiod,
            hatchingdaysperiod,
            biproductrequiredid,
			warehouselocationid,
            L.locationname,
            candlingdaysperiod,
			overheadcostperegg,
            docstandardcost,
            overheadexpenseglid,
            defaulteggsitemid,
            costofgoodsoldledgerid,
			 WIPeggledgerid,
			 grpowithoutinvoiceledgerid,
			 cashledgerid,
			 freightledgerid,
			 discountledgerid,
			 docledgerid,
            I1.itemname as defaulteggsitemname,
            defaultdocitemid,
            I2.itemname as defaultdocitemname,
            defaultcrackedeggsitemid,
            I3.itemname as defaultcrackedeggsitemname,
            defaultbursteggsitemid,
            I4.itemname as defaultbursteggsitemname,
            defaultcleareggsitemid,
            I5.itemname as defaultcleareggsitemname,
            defaulthatcherywhforeggs,
            WS1.warehousename as defaulthatcherywhforeggsname,
            WS1.warehousecode as defaulthatcherywhforeggscode,
            defaulthatcherywhfordoc,
            WS2.warehousename as defaulthatcherywhfordocname,
            WS2.warehousename as defaulthatcherywhfordoccode,
            HS.crackedeggscost,
            HS.loadchargeperegg,
            HS.vaccinateddoccost,
            HS.costofgoodsoldledgerid,
			HS.cashledgerid,
			HS.freightledgerid,
			COA1.coaname as goodledgername,
			COA1.glcode as goodglcode,
			COA2.coaname as eggledgername,
			COA2.glcode as eggglcode,
			COA3.coaname as grpowithoutinvoiceledgername,
			COA3.glcode as grpowithoutinvoiceglcode,
			COA4.coaname as cashledgername,
			COA4.glcode as cashglcode,
			COA5.coaname as freightledgername,
			COA5.glcode as freightglcode,
			COA6.coaname as discountledgername,
			COA6.glcode as discountglcode,
            COA7.coaname as expenseledgername,
			COA7.glcode as expenseglcode,
            COA8.coaname as docledgername,
			COA8.glcode as docglcode,
            HS.vaccineitemgroupids,
            HS.coldroom,
            WS3.warehousename as coldroomname,
			HS.gradingwhid,
            WS4.warehousename as gradingwhname,
			HS.settingwhid,
            WS5.warehousename as settingwhname,
			HS.hatchingwhid,
            WS6.warehousename as hatchingwhname,
			HS.openareawhid,
            WS7.warehousename as openareawhname,
			HS.fumigationwhid,
            WS8.warehousename as fumigationwhname,
			HS.vendorwhid,
            WS9.warehousename as vendorwhname,
			HS.broilerChicksGroupIds,
			HS.medicineGroupIds,
			HS.fumigationGroupIds,
			HS.hatchingEggsGroupIds,
            HS.medicineconsumptionledgerid,
            COA9.coaname as medicineconsumptionledger,
            COA9.glcode as medicineconsumptionglcode,
			HS.ctrlaccledgerid,
            COA10.coaname as ctrlaccledger,
            COA10.glcode as ctrlaccglcode,
			HS.outsidehatchingprocessledgerid,
            COA11.coaname as outsidehatchingprocessledger,
            COA11.glcode as outsidehatchingprocessglcode,
			HS.fumigationledgeridforownsetting,
            COA12.coaname as fumigationownsettingledger,
            COA12.glcode as fumigationownsettingglcode,
			HS.fumigationledgeridforcustomesetting,
            COA13.coaname as fumigationcustomesettingledger,
            COA13.glcode as fumigationcustomesettingglcode,
			HS.ARinvoiceledgerid,
            COA14.coaname as ARinvoiceledger,
            COA14.glcode as ARinvoiceglcode,
			HS.ARtaxid,
            T.taxcode,
            T.taxname
			
	FROM
			hatcherysettings HS
            LEFT JOIN location L ON HS.warehouselocationid = L.id
		    LEFT JOIN ledgers LD ON HS.overheadexpenseglid = LD.id
            LEFT JOIN item I1 ON HS.defaulteggsitemid = I1.id
            LEFT JOIN item I2 ON HS.defaultdocitemid = I2.id
			LEFT JOIN item I3 ON HS.defaultcrackedeggsitemid = I3.id
            LEFT JOIN item I4 ON HS.defaultbursteggsitemid = I4.id
            LEFT JOIN item I5 ON HS.defaultcleareggsitemid = I5.id
           LEFT JOIN warehouse WS1 ON HS.defaulthatcherywhforeggs = WS1.id
            LEFT JOIN warehouse WS2 ON HS.defaulthatcherywhfordoc = WS2.id
            LEFT JOIN warehouse WS3 ON HS.coldroom = WS3.id
            LEFT JOIN warehouse WS4 ON HS.gradingwhid = WS4.id
            LEFT JOIN warehouse WS5 ON HS.settingwhid = WS5.id
            LEFT JOIN warehouse WS6 ON HS.hatchingwhid = WS6.id
            LEFT JOIN warehouse WS7 ON HS.openareawhid = WS7.id
            LEFT JOIN warehouse WS8 ON HS.fumigationwhid = WS8.id
            LEFT JOIN warehouse WS9 ON HS.vendorwhid = WS9.id
            
            LEFT JOIN chartofaccount COA1 ON COA1.id = HS.costofgoodsoldledgerid
			LEFT JOIN chartofaccount COA2 ON COA2.id = HS.WIPeggledgerid
			LEFT JOIN chartofaccount COA3 ON COA3.id = HS.grpowithoutinvoiceledgerid
			LEFT JOIN chartofaccount COA4 ON COA4.id = HS.cashledgerid
			LEFT JOIN chartofaccount COA5 ON COA5.id = HS.freightledgerid
			LEFT JOIN chartofaccount COA6 ON COA6.id = HS.discountledgerid
			LEFT JOIN chartofaccount COA7 ON COA7.id = HS.overheadexpenseglid
			LEFT JOIN chartofaccount COA8 ON COA8.id = HS.docledgerid
            LEFT JOIN chartofaccount COA9 ON COA9.id = HS.medicineconsumptionledgerid
            LEFT JOIN chartofaccount COA10 ON COA10.id = HS.ctrlaccledgerid
            LEFT JOIN chartofaccount COA11 ON COA11.id = HS.outsidehatchingprocessledgerid
            LEFT JOIN chartofaccount COA12 ON COA12.id = HS.fumigationledgeridforownsetting
            LEFT JOIN chartofaccount COA13 ON COA13.id = HS.fumigationledgeridforcustomesetting
            LEFT JOIN chartofaccount COA14 ON COA14.id = HS.ARinvoiceledgerid
            
            LEFT JOIN tax T ON T.id = HS.ARtaxid
    WHERE
			HS.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcheryvaccination_report`(
p_locationid VARCHAR(400),
p_hatcherbatch varchar(400),
p_companyid INT(11)
)
BEGIN
SET @vaccinatedqty = 0;
/* temptable for store only bird record from issue table with all data (Issue: Here we get bird and vaccine item qty in same column) 
we need to diplay this item qty in two different columns thats why we using following logic */
DROP TEMPORARY TABLE IF EXISTS tempvaccineparent;
CREATE TEMPORARY TABLE tempvaccineparent
select
CP.locationid,
CP.hatchbatchid,
DATE_FORMAT(CP.pulloutdate,'%d/%m/%Y') as pulloutdate,
DATE_FORMAT(MI.issuedate,'%d/%m/%Y') as issuedate,
CP.breederbatchid,
CP.itemid,
CP.itembatchid,
CP.totalhatch,
MIDD.itembatch as issuebatch,
MIDD.issuequantity,
MIDD.itemunitid,
MIDD.itemname,
L.locationname

from  chickspullout CP
LEFT JOIN materialissuedetail MIDD ON MIDD.itembatch = CP.itembatchid
LEFT JOIN materialissue MI ON MI.id = MIDD.materialissueid 
LEFT JOIN location L ON L.id = CP.locationid
LEFT JOIN item I ON I.id =  MIDD.itemid 
LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid and IG.groupname ='DOC'

where 
find_in_set( CP.locationid,p_locationid)and
find_in_set(CP.hatchbatchid,p_hatcherbatch) and
IG.groupname ='DOC';
-- select * from tempvaccineparent;

/*temptable for store only vaccine record from issue table create extra column vaccineqty seprately to display*/
DROP TEMPORARY TABLE IF EXISTS temptablevaccine;
CREATE TEMPORARY TABLE temptablevaccine
(
vaccinatedqty INT(11),
locationid INT(11),
hatchbatchid VARCHAR(400),
pulloutdate VARCHAR(200),
breederbatchid INT(11),
itemid INT(11),
itembatchid VARCHAR(255),
totalhatch INT(255),
issuebatch VARCHAR(500),
issuequantity INT(11),
itemunitid INT(11),
itemname VARCHAR(500),
itemidforunit INT (11));

INSERT INTO temptablevaccine 
select
@vaccinatedqty as vaccinatedqty,
CP.locationid,
CP.hatchbatchid,
CP.pulloutdate,
CP.breederbatchid,
CP.itemid,
CP.itembatchid,
CP.totalhatch,
MIDD.itembatch as issuebatch,
MIDD.issuequantity,
MIDD.itemunitid,
MIDD.itemname,
I.id as itemidforunit

from  chickspullout CP
LEFT JOIN materialissuedetail MIDD ON MIDD.itembatch = CP.itembatchid
LEFT JOIN item I ON I.id =  MIDD.itemid 
LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid and IG.groupname!='DOC'

where 
find_in_set( CP.locationid,p_locationid)and
find_in_set(CP.hatchbatchid,p_hatcherbatch) and
IG.groupname !='DOC';

-- Update vaccinatedqty in vaccine temptable from issue table in seprate newely added column vaccinatedqty
SET SQL_SAFE_UPDATES=0;
update temptablevaccine
SET vaccinatedqty = issuequantity
where 
find_in_set(locationid,p_locationid) and
find_in_set(hatchbatchid,p_hatcherbatch) and 
find_in_set(itembatchid,issuebatch);

-- select * from temptablevaccine 

-- Now here you can get all data in single row to display on report (display vaccine qty in seprate column)
select 
TVP.locationid,
TVP.hatchbatchid,
TVP.pulloutdate,
IFNULL(TVP.breederbatchid,'-') as breederbatchid,
TVP.itemid,
TVP.itembatchid,
TVP.totalhatch,
TVP.issuebatch,
TVP.issuequantity,
TVP.itemunitid,
TVP.itemname,
TV.itemname as vaccineitemname,
TV.vaccinatedqty,
TV.itemidforunit,
I1.itemunitid,
REF.refname,
TVP.issuedate,
TVP.locationname

from tempvaccineparent TVP
LEFT JOIN temptablevaccine TV ON TV.itembatchid = TVP.issuebatch
LEFT JOIN item I1 ON I1.id = TV.itemidforunit
LEFT JOIN `reference` REF ON REF.id = I1.itemunitid; 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchery_openingcandlingdatail_save`(
     IN p_id INT(11),
     IN p_setterbatchid INT(11),
     IN p_setterid INT(11),
     IN p_hatcheryopeningid INT(11),
     IN p_testdate DATE,
     IN p_actualquantity INT(45),
     IN p_samplequantity INT(45),
     IN p_trueinfertile INT(11),
     IN p_clears INT(11),
     IN p_bloodring INT(11),
     IN p_membrane INT(11),
	 IN p_agemortality INT(11),
	 IN p_fertility DECIMAL(9,3),
	 IN p_fertilitypercentage DECIMAL(9,3),
     IN p_companyid INT(11),
     IN p_userid INT(11),
     OUT out_id INT
)
BEGIN

SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO hatcher_openingcandlingdetail(id,setterbatchid,setterid,hatcheryopeningid,testdate,actualquantity,samplequantity,trueinfertile,clears,bloodring,membrane,agemortality,fertility,fertilitypercentage,companyid)
        VALUES (p_id, p_setterbatchid,p_setterid,p_hatcheryopeningid,p_testdate,p_actualquantity,p_samplequantity,p_trueinfertile,p_clears,p_bloodring,p_membrane,p_agemortality,p_fertility,p_fertilitypercentage,p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE hatcher_openingcandlingdetail
        SET setterbatchid = p_setterbatchid,
            setterid = p_setterid,
            hatcheryopeningid = p_hatcheryopeningid,
            testdate = p_testdate,
            actualquantity = p_actualquantity,
            samplequantity = p_samplequantity,
            trueinfertile = p_trueinfertile,
            clears = p_clears,
            bloodring = p_bloodring,
            membrane = p_membrane,
            agemortality = p_agemortality,
            fertility = p_fertility,
            fertilitypercentage = p_fertilitypercentage,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    SET @out_candle = NULL;
   call`spc_candlingtest_save`(
	NULL,
	p_setterbatchid,
    p_setterid,
    NULL,
    p_testdate,
    p_actualquantity,
	p_samplequantity,
    p_trueinfertile,
    p_clears,
    p_bloodring,
    p_membrane,
    p_agemortality,
    p_fertility,
    p_fertilitypercentage,
	p_companyid,
    p_userid,
   @out_candle
);
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'hatcher_openingcandlingdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchery_openingcandlingdatail_search`(
IN p_companyid INT(11) 

)
BEGIN
SELECT id,
		   setterbatchid,
           setterid,
           hatcheryopeningid,
           testdate,
		   actualquantity,
           samplequantity,
           trueinfertile,
           clears,
           bloodring,
           membrane,
           agemortality,
           fertility,
           fertilitypercentage,
           companyid
           
	FROM hatcher_openingcandlingdetail
    
    WHERE companyid = p_companyid
    order by id desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchery_openingcandlingdatail_select`(
IN p_hatcheryopeningid INT(11),
IN p_companyid INT(11)
)
BEGIN
SELECT     HOC.id,
		   HOC.setterbatchid,
           HOC.setterid,
           HOS.settername,
           HOC.hatcheryopeningid,
		   DATE_FORMAT(HOC.testdate,'%d/%m/%Y') as testdate,
		   HOC.actualquantity,
           HOC.samplequantity,
           HOC.trueinfertile,
           HOC.clears,
           HOC.bloodring,
           HOC.membrane,
           HOC.agemortality,
           HOC.fertility,
           HOC.fertilitypercentage,
           HOC.companyid,
           HOS.itemid,
           DATE_FORMAT(HOS.setterbatchdate,'%d/%m/%Y') as setterbatchdate,
           I.itemname
           
	FROM  hatcher_openingcandlingdetail HOC
     LEFT JOIN hatchery_opening_setterdetail HOS ON HOS.setterid = HOC.setterid AND HOS.hatcheryopeningid = HOC.hatcheryopeningid
      LEFT JOIN item I ON I.id =HOS.itemid 
    WHERE HOC.companyid = p_companyid
    AND HOC.hatcheryopeningid = p_hatcheryopeningid
    group by HOC.id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchery_openinghatcherdatail_save`(
     IN p_id INT(11),
     IN p_setterid INT(11),
     IN p_settername VARCHAR(200),
     IN p_hatcherid INT(11),
     IN p_hatchername VARCHAR(200),
     IN p_hatchercapacity INT(45),
     IN p_setterbatchquantity INT(45),
     IN p_hatcherbatchquantity INT(45),
     IN p_itemid INT(11),
     IN p_hatcheryopeningid INT(11),
     IN p_setteropeningid INT(11),
     IN p_hatcherbatchdate DATE,
     IN p_companyid INT(11),
     IN p_userid INT(11),
     OUT out_id INT
)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO hatchery_openinghatcherdetail(id, setterid,settername,hatcherid,hatchername,hatchercapacity,setterbatchquantity,hatcherbatchquantity,itemid,hatcheryopeningid,setteropeningid,hatcherbatchdate,companyid)
        VALUES (p_id, p_setterid,p_settername,p_hatcherid,p_hatchername,p_hatchercapacity,p_setterbatchquantity,p_hatcherbatchquantity,p_itemid,p_hatcheryopeningid,p_setteropeningid,p_hatcherbatchdate,p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE hatchery_openinghatcherdetail
        SET setterid = p_setterid,
            settername = p_settername,
			hatcherid = p_hatcherid,
            hatchername = p_hatchername,
            hatchercapacity = p_hatchercapacity,
            setterbatchquantity = p_setterbatchquantity,
            hatcherbatchquantity = p_hatcherbatchquantity,
            itemid = p_itemid,
            hatcheryopeningid = p_hatcheryopeningid,
            setteropeningid = p_setteropeningid,
            hatcherbatchdate = p_hatcherbatchdate,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    SELECT setterbatchid,hatchingeggscost,itembatch INTO @setterbatchid,@hatchingeggscost,@itembatch FROM hatchery_opening_setterdetail 
    WHERE id = p_setteropeningid AND hatcheryopeningid = p_hatcheryopeningid;
    call spc_hatcherbatch_save_byhatcherbatchopening(
	NULL,
    p_hatcherid,
    p_setterid,
	@setterbatchid,
    p_hatchercapacity,
    p_hatcherbatchquantity,
    p_hatcherbatchdate,
    302,
    @itembatch,
    p_itemid,
    p_hatcheryopeningid,
    @hatchingeggscost,
    p_companyid,
    p_userid,
    @out_id
);
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'hatchery_openinghatcherdetail', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchery_openinghatcherdatail_search`(
IN p_companyid INT(11) 

)
BEGIN
SELECT id,
		   setterid,
           settername,
		   hatcherid,
           hatchername,
           hatchercapacity,
		   setterbatchquantity,
           hatcherbatchquantity,
           itemid,
           hatcheryopeningid,
           setteropeningid,
           hatcherbatchdate,
           companyid
           
	FROM hatchery_openinghatcherdetail
    
    WHERE companyid = p_companyid
    order by id desc;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchery_openinghatcherdatail_select`(
IN p_hatcheryopeningid INT(11),
IN p_companyid INT(11)
)
BEGIN
SELECT 	   HOHD.id,
		   HOHD.setterid,
           HOHD.settername,
           HOHD.hatcherid,
           HOHD.hatchername,
           HOHD.hatchercapacity,
		   HOHD.setterbatchquantity,
           HOHD.hatcherbatchquantity,
           HOHD.itemid,
           HOHD.hatcheryopeningid,
           HOHD.setteropeningid,
           DATE_FORMAT(HOHD.hatcherbatchdate,'%d/%m/%Y') as hatcherbatchdate,
           DATE_FORMAT(HOS.setterbatchdate,'%d/%m/%Y') as setterbatchdate,
           I.itemname
           
	FROM  hatchery_openinghatcherdetail HOHD
	JOIN hatchery_opening_setterdetail HOS ON HOS.setterid = HOHD.setterid AND HOS.hatcheryopeningid = HOHD.hatcheryopeningid
    LEFT JOIN item I ON I.id = HOHD.itemid
    WHERE HOHD.companyid = p_companyid
    AND HOHD.hatcheryopeningid = p_hatcheryopeningid
    group by HOHD.id ;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchery_opening_setterdetail_save`(
 IN p_id INT,
 IN p_hatcheryopeningid INT,
 IN p_setterid INT,
 IN p_settername VARCHAR(200),
 IN p_itemid INT,
 IN p_sourceid INT,
 IN p_plannedqty INT,
 IN p_transferqty INT,
 IN p_batchqty INT,
 IN p_crackedqty INT,
 IN p_actualqty INT,
 IN p_crackedeggscost DECIMAL(15,3),
 IN p_hatchingeggscost DECIMAL(15,3),
 IN p_setterbatchdate DATE,
 IN p_companyid INT,
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN
IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO hatchery_opening_setterdetail(
				hatcheryopeningid, setterid, settername, itemid, sourceid,
				plannedqty, transferqty, batchqty, crackedqty,actualqty,crackedeggscost,hatchingeggscost,setterbatchdate, companyid)
        VALUES (p_hatcheryopeningid, p_setterid, p_settername, p_itemid, p_sourceid,
				p_plannedqty, p_transferqty, p_batchqty, p_crackedqty,p_actualqty,p_crackedeggscost,p_hatchingeggscost,p_setterbatchdate,p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE hatchery_opening_setterdetail
        SET hatcheryopeningid = p_hatcheryopeningid,
			setterid = p_setterid,
            settername = p_settername,
            itemid = p_itemid,
            sourceid = p_sourceid,
			plannedqty = p_plannedqty,
            transferqty = p_transferqty,
            batchqty = p_batchqty, 
            crackedqty = p_crackedqty,
            actualqty = p_actualqty,
            crackedeggscost = p_crackedeggscost,
            hatchingeggscost = p_hatchingeggscost,
            setterbatchdate = p_setterbatchdate,
            companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
     -- create itembatch for for setterbatch
        SET @itembatch = null;
	select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch from item I
	INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

	WHERE I.id = p_itemid;
	
	SELECT @itembatch;
    
    	SELECT itemgroupid INTO @itemgroup FROM item WHERE id = p_itemid;
			
		UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
			
		WHERE id = @itemgroup;
    
  call spc_setterbatch_save_fromhatcheryopening(
	NULL,
	 p_setterid,
	NULL,
	NULl,
	NUll,
	p_sourceid,
	NULL,
	p_batchqty,
	p_crackedqty,
	p_actualqty,
	p_setterbatchdate,
	NULL, 
	282,
	@itembatch,
    NUll,
    p_itemid,
    p_crackedeggscost,
    p_hatchingeggscost,
    (select hatchingwhs FROM hatchery_opningbalance where id =  p_hatcheryopeningid),
    p_hatcheryopeningid,
    out_id,
	p_companyid,
	p_userid,
    @out_id
);
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'hatchery_opening_setterdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchery_opening_setterdetail_select`(
 IN p_hatcheryopeningid INT,
 IN p_companyid INT
 )
BEGIN
SELECT HOD.id,HOD.hatcheryopeningid,HOD.setterid,
	  HOD.settername,HOD.itemid,HOD.sourceid, 
      HOD.actualqty,HOD.plannedqty,HOD.transferqty, 
      HOD.batchqty,HOD.crackedqty,HOD.actualqty,
      R.refname as source,
      I.itemname,
      DATE_FORMAT(HOD.setterbatchdate,'%d/%m/%Y') as setterbatchdate,
      HOD.crackedeggscost,HOD.hatchingeggscost,HOD.companyid,
      HOD.setterbatchid
	FROM hatchery_opening_setterdetail HOD
     LEFT JOIN `reference` R ON HOD.sourceid = R.id
	 LEFT JOIN item I ON I.id = HOD.itemid
	 -- LEFT JOIN hatchery_openinghatcherdetail HBOD ON HBOD.setteropeningid = HOD.id
     -- AND HBOD.setterid = HOD.setterid
    WHERE 
		HOD.hatcheryopeningid =p_hatcheryopeningid AND HOD.companyid = p_companyid;		
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchery_opningbalance_save`(
 IN p_id INT,
 IN p_settingno INT,
 IN p_stageid INT,
 IN p_profilename VARCHAR(200),
 IN p_settingwhs INT,
 IN p_openingdate DATE,
 IN p_eggsage INT,
 IN p_locationid INT,
 IN p_fromwhs INT,
 IN p_hatchingwhs INT,
 IN p_statusid INT,
 IN p_companyid INT,
 IN p_userid INT,
  OUT out_id INT)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO hatchery_opningbalance(
        settingno, stageid, profilename, settingwhs, openingdate, eggsage, locationid, fromwhs,hatchingwhs,statusid, companyid)
        VALUES (p_settingno, p_stageid, p_profilename, p_settingwhs, p_openingdate, p_eggsage, p_locationid, p_fromwhs,p_hatchingwhs, p_statusid,p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE hatchery_opningbalance
        SET settingno = p_settingno,
			stageid = p_stageid,
			profilename = p_profilename,
            settingwhs = p_settingwhs,
            openingdate = p_openingdate,
            eggsage = p_eggsage,
            locationid = p_locationid, 
            fromwhs = p_fromwhs,
            hatchingwhs = p_hatchingwhs,
            statusid = p_statusid,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'hatchery_opningbalance', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchery_opningbalance_search`(
IN p_companyid INT)
BEGIN
 select HOB.id,
		HOB.settingno, 
		HOB.stageid,
        HOB.profilename,
        HOB.settingwhs,
		DATE_FORMAT( HOB.openingdate,'%d/%m/%Y') as openingdate,
        HOB.eggsage,
        HOB.locationid,
        L.locationname,
        HOB.fromwhs,
        HOB.hatchingwhs,
        HOB.statusid,
        HOB.companyid,
	   R1.refname as stage,
       R.refname as status,
       W.warehousename as fromwhsname,
       W1.warehousename as hatchingwhsname,
	   W2.warehousename as settingwhsname
 FROM hatchery_opningbalance HOB
  LEFT JOIN location L ON L.id = HOB.locationid
  LEFT JOIN `reference` R ON HOB.statusid = R.id
  LEFT JOIN `reference` R1 ON HOB.stageid = R1.id
  LEFT JOIN warehouse W ON W.id = HOB.fromwhs
  LEFT JOIN warehouse W1 ON W1.id = HOB.hatchingwhs
  LEFT JOIN warehouse W2 ON W2.id = HOB.settingwhs
	WHERE HOB.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchery_opningbalance_select`(
IN p_id INT,
IN p_companyid INT)
BEGIN
 select id
		settingno, 
		stageid,
        profilename,
        eggsage, 
        settingwhs,
        openingdate,
        eggsage,
        locationid,
        fromwhs,
        hatchingwhs,
        statusid,
        companyid
 FROM hatchery_opningbalance
	WHERE   id = p_id AND 
			companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcher_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN
	DELETE FROM hatcher WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'hatcher', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcher_save`(
	IN p_id INT,
    IN p_hatchername VARCHAR(150),
    IN p_capacity INT,
    IN p_locationid INT,
    IN p_warehouseid INT,
	IN p_isactive INT,
    IN p_details VARCHAR(500),
    IN p_typeid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
     
	IF EXISTS(
            SELECT hatchername from hatcher where LOWER(hatchername) = LOWER(p_hatchername)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 

      BEGIN 
      
	      IF(NULLIF(p_id, '0') IS NULL) THEN

		     INSERT INTO hatcher
				   (id, hatchername, capacity, usedcapacity, locationid, warehouseid, isactive, details, typeid, companyid)
			   VALUES 
				   (p_id, p_hatchername, p_capacity, 0, p_locationid, p_warehouseid, p_isactive, p_details, p_typeid, p_companyid);
		
             SET @action = 'INSERT';
 
	      ELSE
    
			 UPDATE hatcher
				SET hatchername = p_hatchername, 
					capacity = p_capacity, 
					locationid = p_locationid,
					warehouseid = p_warehouseid,
					isactive = p_isactive,
					details = p_details,
					typeid = p_typeid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
                
				WHERE
					id = p_id
					AND companyid = p_companyid;
                
				SET @action = 'UPDATE'; 
         
			END IF;
    
			SELECT LAST_INSERT_ID() INTO out_id;
            
            -- Create default warehousebin
            SET @out_warehousebinid = NULL;
			CALL spc_warehousebin_save(
				NULL, p_warehouseid, CONCAT(p_hatchername,'-BIN'), p_hatchername,
				p_companyid, 0, p_userid, @out_warehousebinid
			);
            
            -- update warehouse bin id 
    
			UPDATE hatcher SET warehousebinid = @out_warehousebinid WHERE id = out_id;
            
			-- record log
			-- CALL spc_commonlog_save(p_companyid, 'hatcher', out_id, @action, p_userid);
		END;
        
   END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcher_search`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		   H.id,
           hatchername,
           capacity,
           L.locationname,
           W.warehousename,
           R.refname as machinetype,
           isactive
           
	FROM
		 hatcher H
         
         INNER JOIN location L on H.locationid = L.id
         INNER JOIN warehouse W on H.warehouseid = W.id
         INNER JOIN reference R on H.typeid = R.id
         
	WHERE
		 H.companyid = p_companyid;
         
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatcher_select`(
	IN p_id INT
)
BEGIN

	SELECT 
		    H.id,
		    hatchername,
            capacity,
			H.locationid,
            L.locationname,
			H.warehouseid,
            W.warehousename,
			isactive,
            details,
            typeid
			
	FROM
			hatcher H
            INNER JOIN location L ON H.locationid = L.id
            INNER JOIN warehouse W ON H.warehouseid = W.id
    
	WHERE
		    H.id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchingeggscategory_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM hatchingeggscategory WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchingeggscategory_save`(
    IN p_id INT,
    IN p_categoryname VARCHAR(200),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO hatchingeggscategory 
				(categoryname, companyid)
			VALUES 
				(p_categoryname, p_companyid);
			
            SET @action = 'INSERT';

	ELSE
    
		UPDATE hatchingeggscategory
			SET categoryname = p_categoryname, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
	
			SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'hatchingeggscategory', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchingeggscategory_search`(
    IN p_companyid INT
)
BEGIN

	SELECT
		id,
		categoryname
    FROM
		hatchingeggscategory
	WHERE
		companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchingeggscategory_select`(
	IN p_id INT
)
BEGIN

	SELECT
		id,
		categoryname,
        companyid
	
    FROM
		hatchingeggscategory
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchreport_select`(
	IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT
)
BEGIN
    
    SELECT
		HB.id,
		HB.hatcherid,
        H.hatchername,
		HB.setterid,
        S.settername,
		HB.setterbatchid,
		setterquantity,
		hatchercapacity,
		cracked,
		burst,
		clears,
        actual,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as batchdate,
		HB.statusid,
        R.refname,
        DATE_FORMAT(HB.completiondate,'%d/%m/%Y') as completiondate
	
    FROM
		hatcherbatch HB
        
        LEFT JOIN hatcher H ON H.id = HB.hatcherid
		LEFT JOIN setter S ON S.id = HB.setterid
        LEFT JOIN reference R ON R.id = HB.statusid
		LEFT JOIN setterbatch SB ON SB.id = HB.setterbatchid
	
	WHERE
		companyid = HB.p_companyid AND
		HB.batchdate BETWEEN p_fromdate AND p_todate;
      

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hatchreport_select1`(
	IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT
)
BEGIN

	SET @row_number = 0;
	SELECT
		(@row_number:=@row_number + 1) AS sqno,
		HB.id as hatcherbatchid,
		HB.hatcherid,
        H.hatchername,
		HB.setterid,
        IFNULL(HB.setterslotid,'-') as setterslotid,
        S.settername,
        IFNULL(SS.slotname,'-') as slotname,
		HB.setterbatchid,
        DATE_FORMAT(CPO.pulloutdate,'%d/%m/%Y') as hatcherbatchdate,
        HB.statusid,
        REF.refname AS statusname,
        REF1.refname AS sourcenameone,
        SB.sourceid,
		IF(SB.sourceid=262, P.partyname, CPO.breederbatchid) as sourcename,
        DATE_FORMAT(HB.completiondate,'%d/%m/%Y') as hatchercompletiondate,
        SB.actualquantity as noofeggsset,
        CPO.totalhatch as noofchicksreceived,
        CPO.culls,
        CPO.infertile,
        CPO.deadingerm,
	    CPO.earlymortality,
        CPO.middlemortality,
        CPO.deadinshell,
        CPO.LCM,
        CPO.burst,
        ROUND(((IFNULL(CPO.totalhatch, 1) * 100) / IFNULL(SB.actualquantity, 1)),2) noofchicksreceivedpercent,
        CPO.culls,
        ROUND(((IFNULL(CPO.culls, 1) * 100) / IFNULL(CPO.totalhatch, 1)), 2) cullspercent,	
        ROUND(((IFNULL(CPO.infertile, 1) * 100) / IFNULL(CPO.totalhatch, 1)), 2) infertilepercent,
        ROUND(((IFNULL(CPO.deadingerm, 1) * 100) / IFNULL(CPO.totalhatch, 1)), 2) deadingrampercent,
        ROUND(((IFNULL(CPO.earlymortality, 1) * 100) / IFNULL(CPO.totalhatch, 1)), 2) earlymortalitypercent,
        ROUND(((IFNULL(CPO.middlemortality, 1) * 100) / IFNULL(CPO.totalhatch, 1)), 2) middlemortalitypercent,
        ROUND(((IFNULL(CPO.deadinshell, 1) * 100) / IFNULL(CPO.totalhatch, 1)), 2) deadinshellpercent,
        ROUND(((IFNULL(CPO.LCM, 1) * 100) / IFNULL(CPO.totalhatch, 1)), 2) lcmpercent,
		ROUND(((IFNULL(CPO.burst, 1) * 100) / IFNULL(CPO.totalhatch, 1)), 2) burstpercent,
        CPO.sellable,
        L.locationname,
        ROUND((((IFNULL(CPO.totalhatch, 1) - IFNULL(CPO.culls, 0)) * 100) / IFNULL(SB.actualquantity, 1)), 2) sellablepercent,
        HSD.setterslotid,
        HSD.requestid
        
        -- (IFNULL(CPO.hatcherquantity,0) - (IFNULL(CPO.infertile, 0) + IFNULL(CPO.deadingerm,0) + IFNULL(CPO.earlymortality,0) + IFNULL(CPO.middleemortality,0) + IFNULL(CPO.deadinshell,0) + IFNULL(CPO.LCM,0) + IFNULL(CPO.burst,0)) AS totalhatch,
        
	
    FROM
		hatcherbatch HB
		INNER JOIN hatcher H ON H.id = HB.hatcherid
		INNER JOIN setter S ON S.id = HB.setterid
        LEFT JOIN setterslots SS ON SS.id = HB.setterslotid
        LEFT JOIN hatcheryscheduledetail HSD ON HSD.setterslotid = SS.id AND HB.setterslotid
        LEFT JOIN purchaserequest PR ON PR.id = HSD.requestid and requestsourceid= 542
        LEFT JOIN purchaseorder PO ON PO.purchaserequestid = HSD.requestid and PR.id
        LEFT JOIN grpo GRPO ON GRPO.purchaseorderid = PO.id
        LEFT JOIN party P ON P.id = GRPO.supplierid
		INNER JOIN `reference` REF ON REF.id = HB.statusid
		INNER JOIN setterbatch SB ON SB.id = HB.setterbatchid
        LEFT JOIN `reference` REF1 ON REF1.id = SB.sourceid
		INNER JOIN chickspullout CPO ON HB.id = CPO.hatchbatchid
        LEFT JOIN location L ON L.id = CPO.locationid
    
	WHERE
		HB.companyid = p_companyid 
        AND HB.batchdate BETWEEN p_fromdate AND p_todate
		ORDER BY HB.batchdate, @row_number;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hsnmaster_ddl`(
	IN p_companyid INT
)
BEGIN

	SELECT
		`id`,
		`chapterid`,
        `description`
	FROM
		`hsnmaster`
	WHERE
		companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hsnmaster_save`(
   IN p_id INT(11),
   IN p_chapter VARCHAR(10),
   IN p_heading VARCHAR(10),
   IN p_subheading VARCHAR(10),
   IN p_description VARCHAR(200),
   IN p_chapterid VARCHAR(40),
   IN p_chapterformatted VARCHAR(40),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

IF EXISTS(
            SELECT chapterid from hsnmaster where chapterid = p_chapterid
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
BEGIN

	SET @action = null;

    
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO hsnmaster 
						(`id`,
						`chapter`,
						`heading`,
						`subheading`,
						`description`,
						`chapterid`,
						`chapterformatted`,
						`companyid`)
					VALUES 
						(p_id, p_chapter, p_heading, p_subheading, p_description, p_chapterid,p_chapterformatted, p_companyid);
						
			  SET @action = 'INSERT';
			ELSE
			
				UPDATE hsnmaster
						SET chapter = p_chapter,
							heading = p_heading,
							subheading = p_subheading,
							description = p_description,
							chapterid = p_chapterid,
							chapterformatted = p_chapterformatted,
							companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
				   
                   SET @action = 'UPDATE';     
						
			END IF;
			
			SELECT LAST_INSERT_ID() INTO out_id; 
			
		   -- record log
		   CALL spc_commonlog_save(p_companyid, 'hsnmaster', out_id, @action, p_userid);

	END;
END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hsnmaster_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
		`id`,
		`chapter`,
		`heading`,
		`subheading`,
		`description`,
		`chapterid`,
		`chapterformatted`,
		`companyid`
	FROM
		`hsnmaster`
	WHERE
		companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_hsnmaster_select`(
	IN p_id INT
)
BEGIN

	SELECT
		`id`,
		`chapter`,
		`heading`,
		`subheading`,
		`description`,
		`chapterid`,
		`chapterformatted`,
		`companyid`
	FROM
		`hsnmaster`
	WHERE
		id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_importdata`(
	IN p_jsondata json,
    IN p_table VARCHAR(100),
    IN p_companyid INT(11),
    IN p_user_id INT(11),
    OUT out_id INT
)
BEGIN

	SET @tid = null;
    SET @out_id = null;
    
    -- Item Master
    
    IF(p_table = 'item')THEN
		
        SET @i = 0;
    
		WHILE @i < JSON_LENGTH(p_jsondata) DO
		
			SET @str = NULL;
			SELECT JSON_EXTRACT(p_jsondata,CONCAT('$[',@i,']')) INTO @str;
			
			SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
			
			CALL spc_item_save(
				@tid,
				(SELECT JSON_EXTRACT(@str, CONCAT('$.itemgroupid'))),
                JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.itemcode')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.itemname')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.description')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.manufacturer')))),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.itemunitid'))),
				if(json_type(json_extract(@str, CONCAT('$.active'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.active'))),
                (SELECT JSON_EXTRACT(@str, CONCAT('$.unitcost'))),
                (SELECT JSON_EXTRACT(@str, CONCAT('$.ledgerid'))),
                if(json_type(json_extract(@str, CONCAT('$.isgst'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isgst'))),
                (SELECT JSON_EXTRACT(@str, CONCAT('$.materialtypeid'))),
                (SELECT JSON_EXTRACT(@str, CONCAT('$.hsnid'))),
                (SELECT JSON_EXTRACT(@str, CONCAT('$.taxcategoryid'))),
				p_companyid,
                (SELECT JSON_EXTRACT(@str, CONCAT('$.issalable'))),
                (SELECT JSON_EXTRACT(@str, CONCAT('$.revenueledgerid'))),
				p_user_id,
				@out_id
			);
			SELECT @i + 1 INTO @i;
			
			 
		END WHILE;
        
    END IF;
    
    -- Party opening balance
    
    IF(p_table = 'partyopeningbalance')THEN
		-- TRUNCATE partyopeningbalance;
        SET @i = 0;
    
		WHILE @i < JSON_LENGTH(p_jsondata) DO
		
			SET @str = NULL;
			SELECT JSON_EXTRACT(p_jsondata,CONCAT('$[',@i,']')) INTO @str;
			
			SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
			SET @postingdate = SUBSTR(JSON_EXTRACT(@str, CONCAT('$.postingdate')),2,10);
			CALL spc_partyopeningbalance_save(
				null,
				-- (SELECT SUBSTR(JSON_EXTRACT(@str, CONCAT('$.postingdate')),2,10)),
                DATE_ADD(@postingdate, INTERVAL 1 DAY),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.acledgerid'))),
                (SELECT JSON_EXTRACT(@str, CONCAT('$.branchid'))),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.subledgerid'))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.subledgertypeids')))),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.openingbalance'))),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.transactiontypeid'))),
				p_companyid,
				p_user_id,
				@out_id
			);
			SELECT @i + 1 INTO @i;
			
			 
		END WHILE;
        
    END IF;
    
    -- Item opening balance
    
    IF(p_table = 'accounts_itemopeningbalance')THEN
		-- TRUNCATE accounts_itemopeningbalance;
        SET @i = 0;
    
		WHILE @i < JSON_LENGTH(p_jsondata) DO
		
			SET @str = NULL;
			SELECT JSON_EXTRACT(p_jsondata,CONCAT('$[',@i,']')) INTO @str;
			
			SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
			SET @postingdate = SUBSTR(JSON_EXTRACT(@str, CONCAT('$.postingdate')),2,10);
			CALL spc_accountsitemopeningbalance_save(
				null,
                DATE_ADD(@postingdate, INTERVAL 1 DAY),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.warehousebinid'))),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.openingbalance'))),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.unitprice'))),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.total'))),
                (SELECT JSON_EXTRACT(@str, CONCAT('$.ledgerid'))),
				p_companyid,
				p_user_id,
				@out_id
			);
			SELECT @i + 1 INTO @i;
			
			 
		END WHILE;
	   select 1 INTO out_id;
        
    END IF;
    
    -- Ledger opening balance
    
    IF(p_table = 'ledgeropeningbalance')THEN
        SET @i = 0;
    
		WHILE @i < JSON_LENGTH(p_jsondata) DO
		
			SET @str = NULL;
			SELECT JSON_EXTRACT(p_jsondata,CONCAT('$[',@i,']')) INTO @str;
			
			SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
			SET @openingbalancedate = SUBSTR(JSON_EXTRACT(@str, CONCAT('$.openingbalancedate')),2,10);
			CALL spc_ledgeropeningbalance_save(
				@tid,
				-- (SELECT SUBSTR(JSON_EXTRACT(@str, CONCAT('$.openingbalancedate')),2,10)),
                DATE_ADD(@openingbalancedate, INTERVAL 1 DAY),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.branchid'))),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.ledgerid'))),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.openingbalance'))),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.openingbalancetype'))),
			    p_companyid,
				p_user_id,
				(SELECT JSON_EXTRACT(@str, CONCAT('$.transactiontypeid'))),
				@out_id
			);
			SELECT @i + 1 INTO @i;
			
			 
		END WHILE;
        
    END IF;
    
    -- Party Master
    
    IF(p_table = 'party')THEN
        SET @i = 0;
		WHILE @i < JSON_LENGTH(p_jsondata) DO
		
			SET @str = NULL;
			SELECT JSON_EXTRACT(p_jsondata,CONCAT('$[',@i,']')) INTO @str;
			
			-- SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
			
			CALL spc_party_save(
				null,
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.partyname')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.partyroleids')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.phoneno')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.contactperson')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.cstno')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.gstin')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.panno')))),
                JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.postalcode')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.emailid')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.shippingcontactperson')))),
                JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.shippingcontactno')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.creditlimit')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.creditperiod')))),
                JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.servicetaxno')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.partygroupid')))),
                JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.partycode')))),
                JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.tdsid')))),
                JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.moduleid')))),
                JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.bankname')))),
                JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.accounttype')))),
				 JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.bankbranch')))),
                 JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.ifsccode')))),
                 JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.accountno')))),
				 p_companyid,
				 p_user_id,
				 @out_id
			);
			SELECT @i + 1 INTO @i;
			
			 
		END WHILE;
        
    END IF;
    
    -- State master
    
    IF(p_table = 'state')THEN
		TRUNCATE `state`;
        
        SET @i = 0;
    
		WHILE @i < JSON_LENGTH(p_jsondata) DO
		
			SET @str = NULL;
			SELECT JSON_EXTRACT(p_jsondata,CONCAT('$[',@i,']')) INTO @str;
			
			SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
			
			CALL spc_state_save(
				@tid,
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.countryid')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.statecode')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.statename')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.companyid')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.stategstcode')))),
                JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.isunionterritory')))),
				@out_id
			);
			
			SELECT @i + 1 INTO @i;
			
			 
		END WHILE;
        
    END IF;
    
    -- country master
    
    IF(p_table = 'country')THEN
		TRUNCATE `country`;
        
        SET @i = 0;
    
		WHILE @i < JSON_LENGTH(p_jsondata) DO
		
			SET @str = NULL;
			SELECT JSON_EXTRACT(p_jsondata,CONCAT('$[',@i,']')) INTO @str;
			
			SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
			
			CALL spc_country_save(
				@tid,
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.countrycode')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.countryname')))),
				@out_id
			);
			
			SELECT @i + 1 INTO @i;
			
			 
		END WHILE;
        
    END IF;
    
    -- City Master
    
    IF(p_table = 'city')THEN
		TRUNCATE `city`;
        
        SET @i = 0;
    
		WHILE @i < JSON_LENGTH(p_jsondata) DO
		
			SET @str = NULL;
			SELECT JSON_EXTRACT(p_jsondata,CONCAT('$[',@i,']')) INTO @str;
			
			SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
			
			CALL spc_city_save(
				@tid,
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.stateid')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.citycode')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.cityname')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.companyid')))),
				@out_id
			);
			
			SELECT @i + 1 INTO @i;
			
			 
		END WHILE;
        
    END IF;
    
    -- Chart of Account Master
    
    IF(p_table = 'chartofaccount')THEN
        
        SET @i = 0;
    
		WHILE @i < JSON_LENGTH(p_jsondata) DO
		
			SET @str = NULL;
			SELECT JSON_EXTRACT(p_jsondata,CONCAT('$[',@i,']')) INTO @str;
			CALL spc_sa_chartofaccount_save1(
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.id')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.categoryid')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.coaname')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.glcode')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.coatypeid')))),
                if(json_type(json_extract(@str, CONCAT('$.isparent'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isparent'))),
                JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.groupid')))),
                if(json_type(json_extract(@str, CONCAT('$.iscontrolacc'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.iscontrolacc'))),
                if(json_type(json_extract(@str, CONCAT('$.isblockmanualposting'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isblockmanualposting'))),
                if(json_type(json_extract(@str, CONCAT('$.iscashacc'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.iscashacc'))),
                if(json_type(json_extract(@str, CONCAT('$.isproject'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isproject'))),
                JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.projectid')))),
                if(json_type(json_extract(@str, CONCAT('$.isactive'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isactive'))),
                if(json_type(json_extract(@str, CONCAT('$.iscostcenterapplicable'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.iscostcenterapplicable'))),
               p_companyid,
               p_user_id,
				@out_id
			);
			
			SELECT @i + 1 INTO @i;
			
			 
		END WHILE;
         truncate chartof_accout_update;
    END IF;
    
    -- Docseries
    
    IF(p_table = 'docseries')THEN
		TRUNCATE `docseries`;
        
        SET @i = 0;
    
		WHILE @i < JSON_LENGTH(p_jsondata) DO
		
			SET @str = NULL;
			SELECT JSON_EXTRACT(p_jsondata,CONCAT('$[',@i,']')) INTO @str;
			
			SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
			
			CALL spc_docseries_save(
				@tid,
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.docname')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.doccode')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.dbtableaffected')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.seriescolumn')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.typecolumn')))),
				@out_id
			);
			
			SELECT @i + 1 INTO @i;
			
			 
		END WHILE;
        
    END IF;
    
        -- import tds master
    IF(p_table = 'tds')THEN
        
        SET @i = 0;
    
		WHILE @i < JSON_LENGTH(p_jsondata) DO
		
			SET @str = NULL;
			SELECT JSON_EXTRACT(p_jsondata,CONCAT('$[',@i,']')) INTO @str;
			CALL spc_account_tds_save(
				@tid,
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.section')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.description')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.rate')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.ledgerid')))),
				p_companyid,
				p_user_id,
				@out_id
			);
			
			SELECT @i + 1 INTO @i;
			
			 
		END WHILE;
        
    END IF;
    
        IF(p_table = 'partyaddress')THEN
        
        SET @i = 0;
    
		WHILE @i < JSON_LENGTH(p_jsondata) DO
		
			SET @str = NULL;
			SELECT JSON_EXTRACT(p_jsondata,CONCAT('$[',@i,']')) INTO @str;
			
			SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
			
			CALL spc_partyaddress_save(
				@tid,
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.partyid')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.addresstypeid')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.address')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.cityid')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.stateid')))),
                JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.countryid')))),
                JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.locationcontactno')))),
				JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.pincode')))),
                JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.gstno')))),
                JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.gsttypeid')))),
				p_companyid,
				p_user_id,
				@out_id
			);
			
			SELECT @i + 1 INTO @i;
			
			 
		END WHILE;
        
    END IF;
    
    -- Breeder performance objective
    
    IF(p_table = 'breederperformanceobjective')THEN
		-- TRUNCATE breederperformanceobjective;
        SET @i = 0;
    
		WHILE @i < JSON_LENGTH(p_jsondata) DO
		
			SET @str = NULL;
			SELECT JSON_EXTRACT(p_jsondata,CONCAT('$[',@i,']')) INTO @str;
			
			SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;

			CALL spc_breederperformanceobjective_save(
				null,
				(SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
                (SELECT JSON_EXTRACT(@str, CONCAT('$.ageinweek'))),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.livability'))),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.hdinpercent'))),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.heinpercent'))),
                (SELECT JSON_EXTRACT(@str, CONCAT('$.hhpperweek'))),
                (SELECT JSON_EXTRACT(@str, CONCAT('$.cumhhp'))),
                (SELECT JSON_EXTRACT(@str, CONCAT('$.hhheperweek'))),
                (SELECT JSON_EXTRACT(@str, CONCAT('$.cumhhhe'))),
                (SELECT JSON_EXTRACT(@str, CONCAT('$.hatchinpercent'))),
                (SELECT JSON_EXTRACT(@str, CONCAT('$.chicksperweek'))),
                (SELECT JSON_EXTRACT(@str, CONCAT('$.cumchicks'))),
				p_companyid,
				p_user_id,
				@out_id
			);
			SELECT @i + 1 INTO @i;
			
			 
		END WHILE;
        
    END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_incomingoutgoingjournalentrydetail_save`(
	IN p_id INT(11),
    IN p_journalentryid INT(11),
    IN p_paymentreferenceid INT(11),
    IN p_acledgerid INT(11),
    IN p_iscostcenter TINYINT(4),
    IN p_costcenterid INT(11),
    IN p_projectid INT(11),
    IN p_parenttype VARCHAR(45),
    IN p_parentno VARCHAR(45),
    IN p_billno VARCHAR(200),
    IN p_billamount DECIMAL(50,4),
    IN p_dramount DECIMAL(30,6),
    IN p_cramount DECIMAL(30,6),
    IN p_entrycode VARCHAR(45),
    IN p_entrytype VARCHAR(45),
    IN p_loadonitemid INT(11),
    IN p_subledgertypeid INT(11),
    IN p_narration VARCHAR(100),
    IN p_companyid INT(11),
    IN p_acledgerid2 INT(11),
    IN p_transactionname VARCHAR(200),
    IN p_ispartyopening INT(11),
    IN p_payeebank VARCHAR(200),
    IN p_istds TINYINT(4),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	DECLARE invoice_id INT;
	DECLARE invoice_invoicedate DATE;
	DECLARE invoice_vendorid INT;
	DECLARE invoice_subtotal DECIMAL(30,6); 
	DECLARE invoice_customerid INT;
	DECLARE j INT;

	SET @controlaccountledgerid = null;
	SELECT controlaccountledgerid INTO @controlaccountledgerid
	FROM common_setting WHERE companyid = p_companyid;

	SET j = 0;
	SET @reccount = 0;
	SET @row_number1 = 0;
	SET @transactionamt = 0;

	IF(p_dramount > 0) THEN
		SELECT p_dramount INTO @transactionamt;
	ELSE
		SELECT p_cramount INTO @transactionamt;
	END IF;

	SET @action = null;
    
    UPDATE journalentry 
    SET istds = p_istds,
    payeebank = p_payeebank
    WHERE id = p_journalentryid;
    
    SET @pendingtdsamount = 0;
    IF(p_istds = 1) THEN
			SELECT pendingtdsamount INTO @pendingtdsamount FROM purchaseinvoice WHERE id = p_billno;
            
			UPDATE purchaseinvoice
            SET pendingtdsamount = @pendingtdsamount - p_dramount
            WHERE id = p_billno;
	END IF;
    
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
  
		IF(p_istds = 1) THEN
			SET @tdsledgerid = null;
            SELECT TDS.ledgerid INTO @tdsledgerid FROM account_tds TDS
            LEFT JOIN purchaseinvoice PI ON PI.tdsid = TDS.id
            WHERE PI.id = p_billno;
            
            INSERT INTO journalentrydetail 
			(id,
			journalentryid,
			acledgerid,
			iscostcenter,
			costcenterid,
			projectid,
			parenttype,
			parentno,
			billno,
			billdate,
			billamount,
			dramount,
			cramount,
			entrycode,
			partyid,
			entrytype,
			loadonitemid,
			subledgertypeid,
			narration,
			companyid,
			paymentreferenceid)
		VALUES 
			(p_id,
			p_journalentryid,
			@tdsledgerid,
			p_iscostcenter,
			p_costcenterid,
			p_projectid,
			p_parenttype,
			p_parentno,
			p_billno,
			(SELECT voucherdate FROM journalentry WHERE id = p_journalentryid),
			p_billamount,
			p_dramount,
			p_cramount,
			p_entrycode,
			invoice_customerid,
			p_entrytype,
			p_loadonitemid,
			p_subledgertypeid,
			p_narration,
			p_companyid,
			p_paymentreferenceid),
            
			(p_id,
			p_journalentryid,
			@controlaccountledgerid,
			p_iscostcenter,
			p_costcenterid,
			p_projectid,
			p_parenttype,
			p_parentno,
			p_billno,
			(SELECT voucherdate FROM journalentry WHERE id = p_journalentryid),
			p_billamount,
			p_cramount,
			p_dramount,
			p_entrycode,
			invoice_customerid,
			p_entrytype,
			p_loadonitemid,
			p_subledgertypeid,
			p_narration,
			p_companyid,
			p_paymentreferenceid);
		ELSE
        
			IF(p_transactionname = 'purchaseinvoice') THEN
				IF(p_billno IS NOT NULL) THEN
					DROP TEMPORARY TABLE IF EXISTS invoivetbl;
			
					CREATE TEMPORARY TABLE invoivetbl
					
					SELECT id, invoicedate, vendorid, pendingtotal,
					(@row_number1 := @row_number1 + 1) as recordrank 
				   FROM(
				
						SELECT id, invoicedate, vendorid, pendingtotal
						FROM purchaseinvoice
						WHERE 
							FIND_IN_SET(id, p_billno)               
						) stocktable order by invoicedate asc; 
				  
					SELECT COUNT(*) INTO @reccount FROM  invoivetbl;
					
					WHILE j < @reccount DO
					
						SET invoice_id = null;
						SET invoice_invoicedate = null;
						SET invoice_vendorid = null;
						SET invoice_subtotal = 0; 
					
						SET @issuequantity = 0;
						SET @billamount = 0;
						
						SELECT id, invoicedate, vendorid, pendingtotal
						INTO  invoice_id, invoice_invoicedate, invoice_vendorid, invoice_subtotal
						FROM  invoivetbl where recordrank = j+1 ;
						
						 IF (@transactionamt > 0 ) THEN
							
							IF(invoice_subtotal > 0) THEN
								IF (invoice_subtotal >= @transactionamt) THEN
									SET @billamount = @transactionamt;
									SET @transactionamt = 0;
								   
								ELSE 
								
									SET @billamount = invoice_subtotal;
									SET @transactionamt = @transactionamt - invoice_subtotal;
									
								END IF;
								
							END IF;
							 if (@billamount >0) then
							
								  INSERT INTO journalentrydetail 
									(id,
									journalentryid,
									acledgerid,
									iscostcenter,
									costcenterid,
									projectid,
									parenttype,
									parentno,
									billno,
									billdate,
									billamount,
									dramount,
									cramount,
									entrycode,
									partyid,
									entrytype,
									loadonitemid,
									subledgertypeid,
									narration,
									companyid,
									paymentreferenceid)
								VALUES 
									(p_id,
									p_journalentryid,
									p_acledgerid,
									p_iscostcenter,
									p_costcenterid,
									p_projectid,
									p_parenttype,
									p_parentno,
									invoice_id,
									invoice_invoicedate,
									@billamount,
									@billamount,
									0,
									p_entrycode,
									invoice_vendorid,
									p_entrytype,
									p_loadonitemid,
									p_subledgertypeid,
									p_narration,
									p_companyid,
									p_paymentreferenceid),
									(p_id,
									p_journalentryid,
									p_acledgerid2,
									p_iscostcenter,
									p_costcenterid,
									p_projectid,
									p_parenttype,
									p_parentno,
									invoice_id,
									invoice_invoicedate,
									@billamount,
									0,
									@billamount,
									p_entrycode,
									invoice_vendorid,
									p_entrytype,
									p_loadonitemid,
									p_subledgertypeid,
									p_narration,
									p_companyid,
									p_paymentreferenceid);
									
								  SET @action = 'INSERT';
								  
								  IF(p_ispartyopening = 1)THEN
									 UPDATE partyopeningbalance SET pendingbalance = (pendingbalance - @billamount) WHERE id = invoice_id;
								  ELSE
									 UPDATE purchaseinvoice SET pendingtotal = (pendingtotal - @billamount) WHERE id = invoice_id;
								  END IF;
							  
							  END IF;
						
						END IF;
					
						SET  j = j + 1; 
					END WHILE;
				   
				   DROP TEMPORARY TABLE invoivetbl;
                ELSE
					INSERT INTO journalentrydetail 
					(id,
					journalentryid,
					acledgerid,
					iscostcenter,
					costcenterid,
					projectid,
					parenttype,
					parentno,
					billno,
					billdate,
					billamount,
					dramount,
					cramount,
					entrycode,
					partyid,
					entrytype,
					loadonitemid,
					subledgertypeid,
					narration,
					companyid,
					paymentreferenceid)
				VALUES 
					(p_id,
						p_journalentryid,
						p_acledgerid,
						p_iscostcenter,
						p_costcenterid,
						p_projectid,
						p_parenttype,
						p_parentno,
						p_billno,
						(SELECT voucherdate FROM journalentry WHERE id = p_journalentryid),
						p_billamount,
						p_dramount,
						p_cramount,
						p_entrycode,
						invoice_customerid,
						p_entrytype,
						p_loadonitemid,
						p_subledgertypeid,
						p_narration,
						p_companyid,
						p_paymentreferenceid),
					(p_id,
						p_journalentryid,
						@controlaccountledgerid,
						p_iscostcenter,
						p_costcenterid,
						p_projectid,
						p_parenttype,
						p_parentno,
						p_billno,
						(SELECT voucherdate FROM journalentry WHERE id = p_journalentryid),
						p_billamount,
						p_cramount,
						p_dramount,
						p_entrycode,
						invoice_customerid,
						p_entrytype,
						p_loadonitemid,
						p_subledgertypeid,
						p_narration,
						p_companyid,
						p_paymentreferenceid);
					
				  SET @action = 'INSERT';
                END IF;
            ELSEIF(p_transactionname = 'salesinvoice') THEN
				IF(p_billno IS NOT NULL) THEN
					DROP TEMPORARY TABLE IF EXISTS invoivetbl1;
				
					CREATE TEMPORARY TABLE invoivetbl1
					
					SELECT id, salesinvoicedate, customerid, pendingtotal,
					(@row_number1 := @row_number1 + 1) as recordrank 
				   FROM(
				
						SELECT id, salesinvoicedate, customerid, pendingtotal
						FROM salesinvoice
						WHERE 
							FIND_IN_SET(id, p_billno)             
						) stocktable order by salesinvoicedate asc; 
				  
					SELECT COUNT(*) INTO @reccount FROM  invoivetbl1;
				
					WHILE j < @reccount DO
					
						SET invoice_id = null;
						SET invoice_invoicedate = null;
						SET invoice_customerid = null;
						SET invoice_subtotal = 0; 
						SET @billamount = 0;
						SET @issuequantity = 0;
						
						SELECT id, salesinvoicedate, customerid, pendingtotal
						INTO  invoice_id, invoice_invoicedate, invoice_customerid, invoice_subtotal
						FROM  invoivetbl1 where recordrank = j+1 ;
						
						 IF (@transactionamt > 0 ) THEN
							IF(invoice_subtotal > 0) THEN
								IF (invoice_subtotal >= @transactionamt) THEN
									SET @billamount = @transactionamt;
									SET @transactionamt = 0;
								ELSE 
								
									SET @billamount = invoice_subtotal;
									SET @transactionamt = @transactionamt - invoice_subtotal;
								END IF;
								
							END IF;
							 
							IF (@billamount >0) THEN
							
							  INSERT INTO journalentrydetail 
								(id,
								journalentryid,
								acledgerid,
								iscostcenter,
								costcenterid,
								projectid,
								parenttype,
								parentno,
								billno,
								billdate,
								billamount,
								dramount,
								cramount,
								entrycode,
								partyid,
								entrytype,
								loadonitemid,
								subledgertypeid,
								narration,
								companyid,
								paymentreferenceid)
							VALUES 
								(p_id,
									p_journalentryid,
									p_acledgerid,
									p_iscostcenter,
									p_costcenterid,
									p_projectid,
									p_parenttype,
									p_parentno,
									invoice_id,
									invoice_invoicedate,
									@billamount,
									0,
									@billamount,
									p_entrycode,
									invoice_customerid,
									p_entrytype,
									p_loadonitemid,
									p_subledgertypeid,
									p_narration,
									p_companyid,
									p_paymentreferenceid),
								(p_id,
									p_journalentryid,
									p_acledgerid2,
									p_iscostcenter,
									p_costcenterid,
									p_projectid,
									p_parenttype,
									p_parentno,
									invoice_id,
									invoice_invoicedate,
									@billamount,
									@billamount,
									0,
									p_entrycode,
									invoice_customerid,
									p_entrytype,
									p_loadonitemid,
									p_subledgertypeid,
									p_narration,
									p_companyid,
									p_paymentreferenceid);
								
							  SET @action = 'INSERT';
							  
							  /*UPDATE salesinvoice 
							  SET pendingtotal = pendingtotal - @billamount
							  WHERE id = invoice_id;*/
							  
							  IF(p_ispartyopening = 1)THEN
								 UPDATE partyopeningbalance SET pendingbalance = (pendingbalance - @billamount) WHERE id = invoice_id;
							  ELSE
								UPDATE salesinvoice SET pendingtotal = (pendingtotal - @billamount) WHERE id = invoice_id;
							  END IF;
						  
						   END IF;
						
						END IF;
					
						SET  j = j + 1; 
					END WHILE;
				   
				   DROP TEMPORARY TABLE invoivetbl1;
				ELSE
					 INSERT INTO journalentrydetail 
						(id,
						journalentryid,
						acledgerid,
						iscostcenter,
						costcenterid,
						projectid,
						parenttype,
						parentno,
						billno,
						billdate,
						billamount,
						dramount,
						cramount,
						entrycode,
						partyid,
						entrytype,
						loadonitemid,
						subledgertypeid,
						narration,
						companyid,
						paymentreferenceid)
					VALUES 
						(p_id,
							p_journalentryid,
							p_acledgerid,
							p_iscostcenter,
							p_costcenterid,
							p_projectid,
							p_parenttype,
							p_parentno,
							p_billno,
							(SELECT voucherdate FROM journalentry WHERE id = p_journalentryid),
							p_billamount,
							p_dramount,
							p_cramount,
							p_entrycode,
							invoice_customerid,
							p_entrytype,
							p_loadonitemid,
							p_subledgertypeid,
							p_narration,
							p_companyid,
							p_paymentreferenceid),
						(p_id,
							p_journalentryid,
							p_acledgeid2,
							p_iscostcenter,
							p_costcenterid,
							p_projectid,
							p_parenttype,
							p_parentno,
							p_billno,
							(SELECT voucherdate FROM journalentry WHERE id = p_journalentryid),
							p_billamount,
							p_cramount,
							p_dramount,
							p_entrycode,
							invoice_customerid,
							p_entrytype,
							p_loadonitemid,
							p_subledgertypeid,
							p_narration,
							p_companyid,
							p_paymentreferenceid);
						
					  SET @action = 'INSERT';
				
				END IF;
			ELSE
				INSERT INTO journalentrydetail 
				(id,
				journalentryid,
				acledgerid,
				iscostcenter,
				costcenterid,
				projectid,
				parenttype,
				parentno,
				billno,
				billdate,
				billamount,
				dramount,
				cramount,
				entrycode,
				partyid,
				entrytype,
				loadonitemid,
				subledgertypeid,
				narration,
				companyid,
				paymentreferenceid)
			VALUES 
				(p_id,
				p_journalentryid,
				p_acledgerid,
				p_iscostcenter,
				p_costcenterid,
				p_projectid,
				p_parenttype,
				p_parentno,
				p_billno,
				(SELECT voucherdate FROM journalentry WHERE id = p_journalentryid),
				p_billamount,
				p_dramount,
				p_cramount,
				p_entrycode,
				invoice_customerid,
				p_entrytype,
				p_loadonitemid,
				p_subledgertypeid,
				p_narration,
				p_companyid,
				p_paymentreferenceid),
				(p_id,
				p_journalentryid,
				p_acledgerid2,
				p_iscostcenter,
				p_costcenterid,
				p_projectid,
				p_parenttype,
				p_parentno,
				p_billno,
				(SELECT voucherdate FROM journalentry WHERE id = p_journalentryid),
				p_billamount,
				p_cramount,
				p_dramount,
				p_entrycode,
				invoice_customerid,
				p_entrytype,
				p_loadonitemid,
				p_subledgertypeid,
				p_narration,
				p_companyid,
				p_paymentreferenceid);
            END IF;

		END IF;
    ELSE
    
		UPDATE journalentrydetail
			SET journalentryid = p_journalentryid,
			acledgerid = p_acledgerid,
			iscostcenter = p_iscostcenter,
			costcenterid = p_costcenterid,
			projectid = p_projectid,
			parenttype = p_parenttype,
			parentno = p_parentno,
			billno = p_billno,
			billdate = p_billdate,
			billamount = p_billamount,
			dramount = p_dramount,
			cramount = p_cramount,
			entrycode = p_entrycode,
			partyid = p_partyid,
			entrytype = p_entrytype,
			loadonitemid = p_loadonitemid,
			subledgertypeid = p_subledgertypeid,
			narration = p_narration,
			companyid = p_companyid,
			paymentreferenceid = p_paymentreferenceid,
			id = LAST_INSERT_ID(id)
		WHERE
			id = p_id
			AND companyid = p_companyid;
		SET @action = 'UPDATE';     
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_incomingoutgoingpaymentdetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM incomingoutgoingpaymentdetail WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_incomingoutgoingpaymentdetail_save`(
    IN p_journalentryid INT(11),
    IN p_paymentreferenceid INT(11),
    IN p_subledgertypeid INT(11),
    IN p_billno VARCHAR(200),
    IN p_billamount DECIMAL(9,3),
    IN p_dramount DECIMAL(9,3),
    IN p_ispartyopening INT,
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN
    -- update pending invoice quantity
    IF(p_billno = null) THEN
		UPDATE journalentry SET paymentreferenceid = p_paymentreferenceid WHERE id = p_journalentryid;
    ELSE
		if(p_subledgertypeid = 1251) THEN
			
			IF(p_ispartyopening = 1)THEN
				UPDATE partyopeningbalance SET pendingbalance = (p_billamount - p_dramount) WHERE FIND_IN_SET(id, p_billno);
			ELSE
				UPDATE purchaseinvoice SET pendingtotal = (p_billamount - p_dramount) WHERE FIND_IN_SET(id, p_billno);
			END IF;
			
		
		END IF;
		
		if(p_subledgertypeid = 1252) THEN
		
			IF(p_ispartyopening = 1)THEN
				UPDATE partyopeningbalance SET pendingbalance = (p_billamount - p_dramount) WHERE FIND_IN_SET(id, p_billno);
			ELSE
				UPDATE salesinvoice SET pendingtotal = (p_billamount - p_dramount) WHERE FIND_IN_SET(id, p_billno);
			END IF;
		
		END IF;
	END IF;
    -- SELECT p_billno INTO out_id;
    
    
   -- record log
   --  CALL spc_commonlog_save(p_companyid, 'incomingoutgoingpaymentdetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_incomingoutgoingpaymentdetail_search`(
	IN p_incomingoutgoingpaymentid INT(11)
)
BEGIN

	SELECT id,
		   incomingoutgoingpaymentid,
           billno,
           DATE_FORMAT(billdate,'%d/%m/%Y') as billdate,
           orderno,
           chequeno,
           bankid,
           billamount,
           receiptorpaidamount,
           pendingamount,
           voucheramount,
           companyid
           
    
    FROM incomingoutgoingpaymentdetail
    
    WHERE incomingoutgoingpaymentid = p_incomingoutgoingpaymentid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_incomingoutgoingpaymentdetail_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT * FROM incomingoutgoingpaymentdetail WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_incomingoutgoingpayment_bypaymenttypeid`(
	IN p_paymenttypeid INT(11),
    IN p_companyid INT(11)
)
BEGIN
    SELECT IOP.id,
		   IOP.vouchermodeid,
           REF1.refname as vouchermode,
		   DATE_FORMAT(IOP.voucherdate,'%d/%m/%Y') as voucherdate,
           IOP.paymentsubject,
           IOP.paymenttypeid,
           IOP.partyid,
           P.partyname,
           IOP.ledgerid,
           COA.coaname as ledgername,
           COA.glcode,
           IOP.paymentamount,
           IOP.byhand,
           IOP.narration
           
    FROM incomingoutgoingpayment IOP
    LEFT JOIN chartofaccount COA ON COA.id = IOP.ledgerid
    LEFT JOIN `reference` REF1 ON REF1.id = IOP.vouchermodeid
    -- LEFT JOIN `reference` REF2 ON REF2.id = IOP.paymenttypeid
    LEFT JOIN party P ON P.id = IOP.partyid
    
    WHERE IOP.paymenttypeid = p_paymenttypeid
    AND IOP.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_incomingoutgoingpayment_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM incomingoutgoingpaymentdetail WHERE incomingoutgoingpaymentid = p_id;
	DELETE FROM incomingoutgoingpayment WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_incomingoutgoingpayment_save`(
	IN p_id INT(11),
    IN p_vouchermodeid INT(11),
    IN p_voucherdate DATE,
    IN p_paymentsubject VARCHAR(100),
    IN p_paymenttypeid INT(11),
    IN p_partyid INT(11),
    IN p_ledgerid INT(11),
    IN p_paymentamount DECIMAL(9,3),
    IN p_byhand TINYINT(4),
    IN p_narration VARCHAR(100),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO incomingoutgoingpayment 
				(id, vouchermodeid, voucherdate, paymentsubject, paymenttypeid,
                partyid, ledgerid, paymentamount, byhand,
                narration, companyid)
			VALUES 
				(p_id, p_vouchermodeid, p_voucherdate, p_paymentsubject, p_paymenttypeid,
                p_partyid, p_ledgerid, p_paymentamount, p_byhand,
                p_narration, p_companyid);
                
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE incomingoutgoingpayment
				SET vouchermodeid = p_vouchermodeid,
                voucherdate = p_voucherdate,
                paymentsubject = p_paymentsubject,
                paymenttypeid = p_paymenttypeid,
                partyid = p_partyid,
                ledgerid = pledgerid,
                paymentamount = p_paymentamount,
                byhand = p_byhand,
                narration = p_narration,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'incomingoutgoingpayment', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_incomingoutgoingpayment_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT * FROM incomingoutgoingpayment WHERE companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_incomingoutgoingpayment_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT * FROM incomingoutgoingpayment WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_indirectcostheads_delete`(
IN p_id INT(11)
)
BEGIN
DELETE 
FROM feedmill_indirectcostheads
WhERE

		id = p_id;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_indirectcostheads_save`(
IN p_id INT(11),
IN p_resourcename VARCHAR(45),
IN p_ledgerid INT(11),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT
     )
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_indirectcostheads(id, resourcename,ledgerid, companyid)
        VALUES (p_id, p_resourcename,p_ledgerid, p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_indirectcostheads
        SET resourcename = p_resourcename,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_indirectcostheads', out_id, @action, p_userid);




END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_indirectcostheads_search`(
IN p_companyid INT(11)
)
BEGIN
SELECT ICH.id,
		ICH.resourcename,
        ICH.ledgerid,
        ICH.companyid,
        COA.coaname as ledgername,
        COA.glcode
        
FROM feedmill_indirectcostheads ICH
LEFT JOIN chartofaccount COA ON COA.id = ICH.ledgerid      
WHERE
		ICH.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_indirectcostheads_select`(
IN p_id INt(11),
IN p_companyid INT(11)
)
BEGIN
SELECT ICH.id,
		ICH.resourcename,
        ICH.ledgerid,
        ICH.companyid,
        COA.coaname as ledgername,
        COA.glcode
        
FROM feedmill_indirectcostheads ICH
LEFT JOIN chartofaccount COA ON COA.id = ICH.ledgerid  
WHERE 
			ICH.id = p_id
           AND ICH.companyid = p_companyid; 

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_invoice_byvendorid`(
	IN p_vendorid INT(11),
    IN p_type VARCHAR(50),
    IN p_companyid INT(11)
)
BEGIN

	IF(p_type = 'Supplier') THEN
		SELECT * FROM(SELECT PI.id, 
			   DATE_FORMAT(PI.invoicedate,'%d/%m/%Y') as invoicedate,
			   PI.vendorid,
               P.partyname,
			   PI.grpono,
			   PI.pendingtotal,
			   PI.remark,
               PI.purchaseinvoiceno as billno,
			   G.purchaseorderid,
               0 as ispartyopening,
               PI.pendingtdsamount
		
		FROM purchaseinvoice PI
		LEFT JOIN grpo G ON G.id = PI.grpono
        LEFT JOIN party P ON P.id = PI.vendorid
		
		WHERE PI.vendorid = p_vendorid
		AND PI.companyid = p_companyid
        AND PI.pendingtotal > 0
        
        UNION ALL
        
        SELECT POB.id,
			   DATE_FORMAT(POB.postingdate,'%d/%m/%Y') as invoicedate,
               POB.subledgerid as vendorid,
               P.partyname,
               '' as grpono,
               POB.pendingbalance as pendingtotal,
               'Party Opening Balance' as remark,
               '' as billno,
               '' as purchaseorderid,
               1 as ispartyopening,
               '' as pendingtdsamount
               
		FROM partyopeningbalance POB
		LEFT JOIN party P ON P.id = POB.subledgerid
        WHERE POB.subledgerid = p_vendorid
        AND POB.companyid = p_companyid
        AND POB.pendingbalance > 0) as invoice
        
        ORDER BY invoicedate ASC;
	END IF;
    
    IF(p_type = 'Customer') THEN
    SELECT * FROM(
		SELECT SI.id,
			   DATE_FORMAT(SI.salesinvoicedate,'%d/%m/%Y') as salesinvoicedate,
               SI.customerid as vendorid,
               SI.remark,
               SI.pendingtotal,
               SI.salesorderid,
               P.partyname,
               0 as ispartyopening,
               SI.salesinvoiceno as billno
               
		FROM salesinvoice SI
        LEFT JOIN party P ON P.id = SI.customerid
        
        WHERE SI.customerid = p_vendorid
        AND SI.companyid = p_companyid
        AND SI.pendingtotal > 0
        AND SI.statusid = 1362
        UNION ALL
        
        SELECT POB.id,
			   DATE_FORMAT(POB.postingdate,'%d/%m/%Y') as salesinvoicedate,
               POB.subledgerid as vendorid,
               'Party Opening Balance' as remark,
               POB.pendingbalance as pendingtotal,
               '' as salesorderid,
               P.partyname,
               1 as ispartyopening,
               '' as billno
               
		FROM partyopeningbalance POB
        LEFT JOIN party P ON P.id = POB.subledgerid
        WHERE POB.subledgerid = p_vendorid
        AND POB.companyid = p_companyid
        AND POB.pendingbalance > 0) as invoice
        
        ORDER BY salesinvoicedate ASC;
               
    
    END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_issuetypehatcherbatches_search`( 
	IN p_companyid INT
)
BEGIN
   
    SELECT
		HB.id as hatcherbatchno,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as settingdate,
        HB.hatcherid,
        H.hatchername,
        HB.setterbatchid,
        HB.actualquantity
	
    FROM
		Hatcherbatch HB
	
    LEFT JOIN hatcher H ON HB.hatcherid = H.id
	LEFT JOIN warehouse W ON H.warehouseid = W.id
    LEFT JOIN reference R ON R.id = HB.statusid
	
    
        
	WHERE
		HB.companyid = p_companyid
        -- 302 = In Progress
        AND  R.id = 302;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itembatch_byitemid`(
 IN p_itemid INT(11),
 IN p_warehouseid INT(11),
 IN p_warehousebinid INT(11),
 IN p_companyid INT(11)
 )
BEGIN
SET @@sql_mode = '';
 SELECT
		 MOM.itembatch,
         MOM.itemid,
		 DATE_FORMAT( MOM.transactiondate,'%d/%m/%Y') as collectiondate,
        fnc_itembatchbalance(MOM.itembatch,p_itemid,p_warehouseid,p_warehousebinid,p_companyid) as batch_qty,
         (MOM.itemvalue/MOM.quantity) as batch_unitcost,
         REF.refname as unitname
        
        
 FROM materialmovement MOM 
 
	LEFT JOIN item I ON MOM.itemid = I.id
    LEFT JOIN `reference` REF ON REF.id = I.itemunitid
    
  where MOM.towarehouseid = p_warehouseid AND
		MOM.towarehousebinid = p_warehousebinid AND
		MOM.itemid = p_itemid  AND
         FIND_IN_SET(MOM.transactiontypeid, '681,682,684,685') AND
         MOM.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itembatch_modulewise_byitemid`(
 IN p_moduleid INT(11),
 IN p_shedid VARCHAR(45),
 IN p_itemid INT(11),
 IN p_warehouseid INT(11),
 IN p_companyid INT(11)
 )
BEGIN
SET @warehousebinid = null;

if(p_moduleid = 721 and p_shedid IS NOT null) then
	select warehousebinid INTO @warehousebinid FROM breedershed WHERE id = p_shedid;
END IF ;
if(p_moduleid = 725 and p_shedid IS NOT null) then
	select warehousebinid INTO @warehousebinid FROM layershed WHERE id = p_shedid;
END IF ;
if(p_moduleid = 723 and p_shedid IS NOT null) then
	select warehousebinid INTO @warehousebinid FROM cbf_farmerenquiry_sheddimensiondetail where id = p_shedid;
END IF ;
if(p_moduleid IS NOT NULL and p_shedid IS NULL) then
	select id INTO @warehousebinid FROM warehousebin where warehouseid = p_warehouseid AND isdefault = 1;
END IF ;
DROP TEMPORARY TABLE IF EXISTS tempbatchtable;
CREATE TEMPORARY TABLE tempbatchtable
 SELECT 
		MOM.itembatch,
        MOM.itemid,
        DATE_FORMAT( MOM.transactiondate,'%d/%m/%Y') as collectiondate,
        fnc_itembatchbalance(MOM.itembatch,p_itemid,p_warehouseid,@warehousebinid,p_companyid) as batch_qty,
        (MOM.itemvalue/MOM.quantity) as batch_unitcost
        
        
 FROM materialmovement MOM 
 
	LEFT JOIN item I ON MOM.itemid = I.id
    
  where MOM.towarehouseid = p_warehouseid AND
		MOM.towarehousebinid = @warehousebinid AND
		MOM.itemid = p_itemid  AND
         FIND_IN_SET(MOM.transactiontypeid, '681,682,684,685') AND
         MOM.companyid = p_companyid 
       
   order by  MOM.transactiondate asc;
SELECT * FROM tempbatchtable WHERE batch_qty >0 ;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itembtch_instock`(
IN P_itembatch varchar(200),
IN p_itemid INT,
IN p_warehouseid INT,
 IN p_companyid INT )
BEGIN

	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    SET @p_itemopningbalquantity = 0;
    

  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE  
    FIND_IN_SET(itembatch,p_itembatch) AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    itemid = p_itemid AND
    towarehouseid= p_warehouseid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE FIND_IN_SET(itembatch,p_itembatch) AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    towarehouseid = p_warehouseid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE  FIND_IN_SET(itembatch,p_itembatch) AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    fromwarehouseid = p_warehouseid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE  FIND_IN_SET(itembatch,p_itembatch) AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
    fromwarehouseid = p_warehouseid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE  FIND_IN_SET(itembatch,p_itembatch) AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
     itemid = p_itemid AND
    towarehouseid = p_warehouseid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_itemopningbalquantity
    FROM materialmovement
    WHERE FIND_IN_SET(itembatch,p_itembatch) AND
	 companyid = p_companyid AND
     transactiontypeid = 684 AND
     itemid = p_itemid AND
     towarehouseid = p_warehouseid;
    
   SELECT @p_inwardquantity as jhfkdd;
   SELECT (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity+ @p_itemopningbalquantity) - (@p_issuequantity + @p_transferoutquantity) as batch_unitcost;
   

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itembyinvoicetype_search`(
 IN p_itemgroupid varchar(100),
 IN p_invoicetypeid varchar(100),
 IN p_companyid INT(11)
)
BEGIN

	SELECT 
		I.id,
		itemcode,
		itemname,
		itemunitid,
		unitcost,
		R.refname as itemunitname,
         isgst, 
        case when isgst = 1 then true else false END as isgstbool,
        case when active = 1 then true else false END as activebool,
        materialtypeid, 
        R1.refname as materialtypename,
        hsnid, 
        H.chapterid,
        H.description as hsndescription,
        taxcategoryid,
        R2.refname as taxcategoryname
        
		
		FROM
		  item I
		   LEFT JOIN `reference` R ON R.id = I.itemunitid
		   LEFT JOIN `reference` R1 ON R1.id = I.materialtypeid
		   LEFT JOIN `reference` R2 ON R2.id = I.taxcategoryid
		   LEFT JOIN `hsnmaster` H ON H.id = I.hsnid
	WHERE
	   FIND_IN_SET(itemgroupid, p_itemgroupid) 
       AND ((p_invoicetypeid = 'null' OR p_invoicetypeid = null) OR (p_invoicetypeid = 1562 AND FIND_IN_SET(I.taxcategoryid, '1523'))
        OR (p_invoicetypeid = 1561 AND FIND_IN_SET(I.taxcategoryid, '1521,1522' )))
       
        AND I.companyid = p_companyid;
        select p_invoicetypeid;
  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itembyitemgroups_search`(
 IN p_itemgroupid varchar(100),
 IN p_companyid INT(11)
)
BEGIN

	SELECT 
		I.id,
		itemcode,
		itemname,
		itemunitid,
		unitcost,
		R.refname as itemunitname,
         isgst, 
        case when isgst = 1 then true else false END as isgstbool,
        case when active = 1 then true else false END as activebool,
        materialtypeid, 
        R1.refname as materialtypename,
        hsnid, 
        H.chapterid,
        H.description as hsndescription,
        taxcategoryid,
        R2.refname as taxcategoryname
        
		
		FROM
		  item I
		   LEFT JOIN `reference` R ON R.id = I.itemunitid
		   LEFT JOIN `reference` R1 ON R1.id = I.materialtypeid
		   LEFT JOIN `reference` R2 ON R2.id = I.taxcategoryid
		   LEFT JOIN `hsnmaster` H ON H.id = I.hsnid
	WHERE
	   FIND_IN_SET(itemgroupid, p_itemgroupid) AND
	   I.companyid = p_companyid;
  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itembytexcategory_search`(
 IN p_itemgroupid varchar(100),
 IN p_taxcategoryid INT(11),
 IN p_companyid INT(11)
)
BEGIN

	SELECT 
		I.id,
		itemcode,
		itemname,
		itemunitid,
		unitcost,
		R.refname as itemunitname,
         isgst, 
        case when isgst = 1 then true else false END as isgstbool,
        case when active = 1 then true else false END as activebool,
        materialtypeid, 
        R1.refname as materialtypename,
        hsnid, 
        H.chapterid,
        H.description as hsndescription,
        taxcategoryid,
        R2.refname as taxcategoryname
        
		
		FROM
		  item I
		   LEFT JOIN `reference` R ON R.id = I.itemunitid
		   LEFT JOIN `reference` R1 ON R1.id = I.materialtypeid
		   LEFT JOIN `reference` R2 ON R2.id = I.taxcategoryid
		   LEFT JOIN `hsnmaster` H ON H.id = I.hsnid
	WHERE
	   FIND_IN_SET(itemgroupid, p_itemgroupid) AND
       ( p_taxcategoryid is null OR I.taxcategoryid = p_taxcategoryid) AND
	   I.companyid = p_companyid;
  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itemgroup_ddl`(
  IN p_companyid INT 
)
BEGIN
	SELECT id ,
		   groupname
                  
    FROM  itemgroup 
    WHERE 
          companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itemgroup_delete`(
IN p_id INT
)
BEGIN
	DELETE FROM itemgroup WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itemgroup_save`(
	IN p_id INT,
    IN p_groupname VARCHAR(100),
    IN p_seriesstartwith INT(11),
    IN p_seriesprefix VARCHAR(20),
    IN p_seriesseparator VARCHAR(5),
	IN p_moduleid VARCHAR(200),
    IN p_grouptypeid INT(11),
    IN p_groupledgerid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

IF EXISTS(
            SELECT groupname from itemgroup where groupname = p_groupname
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
BEGIN
	
    SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO itemgroup 
				(id, groupname, seriesstartwith, seriesprefix, seriesseparator,moduleid,grouptypeid, groupledgerid, companyid)
			VALUES 
				(p_id, p_groupname, p_seriesstartwith, p_seriesprefix, p_seriesseparator,p_moduleid,p_grouptypeid, p_groupledgerid, p_companyid);
			
            SET @action = 'INSERT';
	ELSE
    
		UPDATE itemgroup
			SET groupname = p_groupname,  
				seriesstartwith = p_seriesstartwith,
                seriesprefix = p_seriesprefix,
                seriesseparator = p_seriesseparator,
                moduleid = p_moduleid,
                grouptypeid = p_grouptypeid,
                groupledgerid = p_groupledgerid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';
    
	END IF;
    
	SELECT LAST_INSERT_ID() INTO out_id;
    
     -- record log
   CALL spc_commonlog_save(p_companyid, 'itemgroup', out_id, @action, p_userid);
  END;
END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itemgroup_search`(
  IN p_companyid INT 
)
BEGIN
		SELECT IG.id ,
		   IG.groupname,
		   seriesstartwith,
		   seriesprefix,
		   seriesseparator,
           moduleid,
		   groupledgerid,
           COA.coaname as ledgername,
           grouptypeid,
          CASE WHEN(select itemgroupid from item I  where I.itemgroupid = IG.id limit 1) IS NULL THEN 'Navigation' ELSE 'Inactive' END AS navigation
		   --  CASE WHEN  I.itemgroupid IS NULL THEN 'Navigation' ELSE 'Inactive' END AS navigation
            
    FROM  itemgroup IG
	LEFT JOIN chartofaccount COA ON  COA.id = IG.groupledgerid 
    WHERE 
          IG.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itemgroup_search_bymoduleid`(
  IN p_companyid INT ,
  IN p_moduleid VARCHAR(200)
)
BEGIN
		SELECT IG.id ,
		   IG.groupname,
		   seriesstartwith,
		   seriesprefix,
		   seriesseparator,
           moduleid,
           grouptypeid,
          CASE WHEN(select itemgroupid from item I  where I.itemgroupid = IG.id limit 1) IS NULL THEN 'Navigation' ELSE 'Inactive' END AS navigation
		 
            
    FROM  itemgroup IG
    WHERE 
          IG.companyid = p_companyid AND 
		 FIND_IN_SET(p_moduleid, IG.moduleid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itemgroup_select`(
IN p_id INT
)
BEGIN
	SELECT IG.id,
		groupname,
        seriesstartwith,
		seriesprefix,
		seriesseparator,
        moduleid,
        groupledgerid,
		COA.coaname as ledgername,
        grouptypeid
	
    FROM  itemgroup IG
    LEFT JOIN chartofaccount COA ON  COA.id = IG.groupledgerid 
	
    WHERE 
          IG.id = p_id;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_iteminstock`(
	IN p_itemid INT(11),
    IN p_warehousebinid INT(11),
    IN p_transactiondate DATE,
    IN p_companyid INT(11)
)
BEGIN
	SELECT fnc_iteminstock(p_itemid, p_warehousebinid, p_transactiondate, p_companyid) as instock,
    (SUM(MM.itemvalue)/SUM(MM.quantity)) as unitcost,
    REF.refname as unitname
    
    FROM materialmovement MM
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN reference REF ON REF.id = I.itemunitid
    
    WHERE MM.transactiondate < p_transactiondate;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itemsubgroup_report`(
 IN p_warehouseids TEXT,
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_companyid INT(11)
 )
BEGIN

SELECT *, (openingbal + closingbal) as closingstock
FROM (
 SELECT 
     M.itemid,
	 DATE_FORMAT(M.transactiondate,'%d/%m/%Y') as date,
     I.itemname,
     I.itemcode,
     I.manufacturer,
     I.itemgroupid,
     IG.groupname,
     M.itembatch as  batchno,
   --  fun_itembatchclosingbalance(M.itemid,M.itembatch,@warehouseids, transactiondate, p_companyid) as closingstock,
     IFNULL(fun_itemwiseopeningbalanceforpurchase(M.itembatch,p_warehouseids, p_fromdate, p_companyid),0) as openingbal,
	 /*fun_iteminquntity(M.itembatch,p_warehouseids, p_fromdate,p_todate, p_companyid) as inqty,
     fun_itemwiseOunt(M.itembatch,p_warehouseids, p_fromdate,p_todate, p_companyid) as outqty,
     */
     IFNULL(fnc_itembatchbalanceongivendate(M.itembatch, p_warehouseids, p_fromdate, p_todate, p_companyid),0) as closingbal,
     ROUND(IFNULL((M.itemvalue/M.quantity),0),2) as unitcost,
     IFNULL(M.itemvalue,0) as cummulativecost
    
  FROM materialmovement M
  LEFT JOIN item I ON M.itemid = I.id
  LEFT JOIN itemgroup IG ON IG.id= I.itemgroupid
WHERE
	 transactiondate BETWEEN p_fromdate AND p_todate
     GROUP BY M.itembatch
       
       order by I.itemgroupid,M.itemid)as temp;
       
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itemwisesalereport_report`(
IN p_fromdate DATE,
IN p_todate DATE,
IN p_itemid varchar(5000),
IN p_companyid INT(11)
)
BEGIN

SET @@sql_mode = ' ';
select * ,((grosstotal-discount)+cgstamount+sgstamount+igstamount+utgstamount)as nettotal

from(
select SID.itemid,
       SI. salesinvoiceno,
	   DATE_FORMAT(SI.salesinvoicedate,'%d/%m/%Y') as salesinvoicedate,
	   I.itemname,
       SI.customerid,
       P.partyname,
       SID.quantity,
       SID.unitprice,
       SID.weight,
       SID.discount as discount,
       SI.discount as invoicediscount,
       SID.unitprice as rate,
       IFNULL((SID.cgstamount),0) as cgstamount,
       IFNULL((SID.sgstamount),0) as sgstamount,
	   IFNULL((SID.igstamount),0) as igstamount,
       IFNULL((SID.utgstamount),0) as utgstamount,
       SI.grandtotal as nettotal,
        CASE
			WHEN isbird = 0 THEN (SID.quantity* SID.unitprice)
			ELSE (SID.weight* SID.unitprice)
		END as grosstotal,
       P.partygroupid,
       PG.partygroupname

from salesinvoice SI
LEFT JOIN salesinvoicedetail SID ON SID.salesinvoiceid = SI.id
LEFT JOIN item I ON I.id = SID.itemid
LEFT JOIN party P ON P.id = SI.customerid
LEFT JOIN partygroup PG ON PG.id = P.partygroupid

 Where 
 SI.salesinvoicedate BETWEEN p_fromdate AND p_todate
 AND find_in_set(I.id,p_itemid)
 )as temp; 
 
  END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itemwisesalesummary_report`(
IN p_fromdate DATE,
IN p_todate DATE,
IN p_companyid INT(11)
)
BEGIN

SET @@sql_mode = ' ';
select * ,((grosstotal-discount)+cgstamount+sgstamount+igstamount+utgstamount)as nettotal

from(
select SID.itemid,
	   SI.id as invoiceid,
       SI.referenceno as referenceno,
	   I.itemname,
       I.itemcode as itemcode,
       I.description as des,
       SI.customerid,
       P.partyname,
       SID.quantity,
       SID.unitprice,
       IFNULL(SID.weight,0) as weight,
       SID.discount as discount,
       DATE_FORMAT( SI.salesinvoicedate,'%d/%m/%Y') as salesinvoicedate,
       SI.discount as invoicediscount,
       SID.unitprice as rate,
       IFNULL((SID.cgstamount),0) as cgstamount,
       IFNULL((SID.sgstamount),0) as sgstamount,
	   IFNULL((SID.igstamount),0) as igstamount,
       IFNULL((SID.utgstamount),0) as utgstamount,
        CASE
			WHEN SID.isbird = 1  THEN (SID.weight* SID.unitprice)
			ELSE (SID.quantity* SID.unitprice)
		END as grosstotal,
       P.partygroupid,
       PG.partygroupname,
       IG.groupname as itemgroupname

from salesinvoice SI
LEFT JOIN salesinvoicedetail SID ON SID.salesinvoiceid = SI.id
LEFT JOIN item I ON I.id = SID.itemid
LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
LEFT JOIN party P ON P.id = SI.customerid
LEFT JOIN partygroup PG ON PG.id = P.partygroupid

 Where 
 SI.salesinvoicedate BETWEEN p_fromdate AND p_todate
 AND P.partyroleids = 32
 and   find_in_set(SI.statusid,'1362,1363,1364'))as temp; 
 
  END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itemwisestock_report`(
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_itemid VARCHAR(16383),
 IN p_warehouseid VARCHAR(16383),
 IN p_companyid INT(11)
 )
BEGIN
SET @@sql_mode = '';

SELECT  I.id as itemidone,I.itemname, W.warehousename,IG.groupname,L.locationname,
MM.towarehouseid
    
 FROM materialmovement MM
 LEFT JOIN item I ON I.id = MM.itemid
 LEFT JOIN warehouse W ON W.id = MM.towarehouseid
 LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
 LEFT JOIN location L ON W.locationid = L.id
 
WHERE 
find_in_set(MM.itemid,p_itemid)
group by itemid;

call spc_itemwisestock_reportsampleone(p_fromdate,p_todate,p_itemid,p_warehouseid,p_companyid,@result);
select @result;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itemwisestock_reportsampleone`(
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_itemid VARCHAR(16383),
 IN p_warehouseid VARCHAR(16383),
 IN p_companyid INT(11),
 out p_result INT(11)
 
 )
BEGIN
SET @@sql_mode = '';
SET @p_transferoutquantity = 0;
SET @p_transferissuequantity = 0;

drop table if exists t;
create table t( txt text );
insert into t values(p_itemid);
drop temporary table if exists onpeningBalDetails;
create temporary table onpeningBalDetails(openingbal nvarchar(255),
issue nvarchar(255),transferoutstock nvarchar(255),transferinstock nvarchar(255),
receipt nvarchar(255),closingbal nvarchar(255),itemid varchar(10));

drop temporary table if exists temp;
create temporary table temp( val char(255) );
set @sql = concat("insert into temp (val) values ('", replace(( select group_concat(distinct txt) as data from t), ",", "'),('"),"');");
prepare stmt1 from @sql;
execute stmt1;

   SET @counter= 1;
   SET @noofitem = (select count(*) from temp); 
   SET SQL_SAFE_UPDATES=0;
   
   WHILE  @noofitem>0 DO
        SET @val = (select distinct(ltrim(rtrim(val))) from temp order by  val  limit 1);
		SET @openingBal= fun_liveopeningbalancestock(p_fromdate,p_warehouseid, @val ) ;
		SET @issue= fun_inventorytransferissue_out_stock(p_fromdate,p_todate,p_warehouseid,@val,683);
		SET @transferoutstock= fun_inventorytransferissue_out_stock(p_fromdate,p_todate,p_warehouseid,@val,682);
		SET @transferinstock= fun_transfer_in_quntity(p_fromdate,p_todate,p_warehouseid,@val,p_companyid);
		SET @receipt= fun_inventorytransferreceipt(p_fromdate,p_todate,p_warehouseid,@val);
        SET @closingbal= (@openingBal+@transferinstock+@receipt-@issue-@transferoutstock);
         
        Insert into onpeningBalDetails values(@openingbal,@issue,@transferoutstock,@transferinstock,@receipt,@closingbal,@val);
        delete from temp where val = @val; 
         SET @noofitem = @noofitem-1;
    END WHILE;
    
    select * from onpeningBalDetails order by cast(itemid as unsigned);
  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itemwise_dailyconsumption_report`(
 IN p_batchid INT,
 IN p_fromdate Date,
 IN p_todate Date,
 IN p_itemid VARCHAR(20),
 IN p_companyid INT)
BEGIN

SET @@sql_mode = ' ';

SET @maleitemid = null;
SET @femaleitemid = null;

SELECT femaleitemid,maleitemid INTO @femaleitemid,@maleitemid
	FROM breederbatch
    WHERE id =  p_batchid;
    

SET @warehousebinid=null;
select BS.warehousebinid  INTO @warehousebinid
from breederbatchbalance BBB
LEFT JOIN breedershed BS ON BS.id = BBB.breedershedid
where BBB.breederbatchid = p_batchid  group by BBB.breederbatchid;
-- select @warehousebinid;




   IF(p_itemid IS NULL)then
   
   select *, (issueqty*rate)as issueamount
   from(
	SELECT 
		BDT.id as dailytransactionno,
		BC.itemid,
		I.itemname,
        I.itemcode,
        fun_batch_ageinweek(BDT.transactiondate,p_batchid,p_companyid) as weekno,
		DATE_FORMAT(BDT.transactiondate,'%d/%m/%Y')  as transactiondate,
		SUM(BC.quantity) as issueqty,
        -- ROUND((ifnull(MOM.itemvalue,0)),3) as issueamount,
        ROUND(SUM(ifnull(MOM.itemvalue,0))/SUM(ifnull(MOM.quantity,0)),3) as rate
        
        -- (ROUND(SUM(ifnull(MOM.itemvalue,0))/SUM(ifnull(MOM.quantity,0)),3)*(SUM(BC.quantity)))as issueamount
	FROM breederdailyconsumption BC
		 LEFT JOIN breederdailytransaction BDT ON BC.breederdailytransactionid = BDT.id
         LEFT JOIN item I ON I.id = BC.itemid
         LEFT JOIN materialmovement MOM ON BC.itemid = MOM.itemid AND MOM.towarehousebinid = @warehousebinid
         AND BDT.transactiondate = MOM.transactiondate and find_in_set(MOM.transactiontypeid,'681,682,685')   
 
	WHERE
		BDT.breederbatchid = p_batchid AND
		BDT.transactiondate BETWEEN  p_fromdate AND p_todate AND
        BDT.companyid = p_companyid 

    group by BDT.transactiondate
	ORDER BY 
         BDT.transactiondate)as temp;
ELSE
select *, (issueqty*rate)as issueamount
   from(
SELECT 
		BDT.id as dailytransactionno,
		BC.itemid,
		I.itemname,
        I.itemcode,
        fun_batch_ageinweek(BDT.transactiondate,p_batchid,p_companyid) as weekno,
		DATE_FORMAT(BDT.transactiondate,'%d/%m/%Y')  as transactiondate,
		-- SUM(BC.quantity) as issueqty,
	   ( fnc_calculate_malefemale_feedconsumption(BDT.id,@maleitemid,BC.itemid)+
       fnc_calculate_malefemale_feedconsumption(BDT.id,@femaleitemid,BC.itemid))as issueqty,
        -- ROUND((ifnull(MOM.itemvalue,0)),3) as issueamount,
       ROUND(SUM(ifnull(MOM.itemvalue,0))/SUM(ifnull(MOM.quantity,0)),3) as rate
	FROM breederdailyconsumption BC
		 LEFT JOIN breederdailytransaction BDT ON BC.breederdailytransactionid = BDT.id
         LEFT JOIN item I ON I.id = BC.itemid
         -- LEFT JOIN materialmovement MOM ON p_todate >= MOM.transactiondate AND BC.itemid = MOM.itemid
         LEFT JOIN materialmovement MOM ON BC.itemid = MOM.itemid AND MOM.towarehousebinid = @warehousebinid
          AND find_in_set(MOM.transactiontypeid,'681,682,685')   
 
	WHERE

		BDT.breederbatchid = p_batchid AND
		BDT.transactiondate >= MOM.transactiondate
		AND BDT.transactiondate BETWEEN  p_fromdate AND p_todate AND
        BDT.companyid = p_companyid AND
        BC.itemid = p_itemid
        

    group by BDT.transactiondate
	ORDER BY 
         BDT.transactiondate)as temp;
END IF;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_itemwise_lyr_dailyconsumption_report`(
 IN p_batchid INT,
 IN p_fromdate Date,
 IN p_todate Date,
 IN p_itemid VARCHAR(20),
 IN p_companyid INT)
BEGIN
SET @@sql_mode = '';
   IF(p_itemid IS NULL)then
	SELECT 
		LDT.id as dailytransactionno,
		LC.itemid,
		I.itemname,
        I.itemcode,
        fun_layerbatch_ageinweek(LDT.transactiondate,p_batchid,p_companyid) as weekno,
		DATE_FORMAT(LDT.transactiondate,'%d/%m/%Y')  as transactiondate,
		SUM(LC.consumptionquantity) as issueqty,
        ROUND(MOM.itemvalue,3) as issueamount,
        ROUND((MOM.itemvalue/SUM(LC.consumptionquantity)),3) as rate
	FROM layerdailyconsumption LC
		 LEFT JOIN layerdailytransaction LDT ON LC.layerdailytransactionid = LDT.id
         LEFT JOIN item I ON I.id = LC.itemid
         LEFT JOIN materialmovement MOM ON LDT.transactiondate = MOM.transactiondate AND LC.itemid = MOM.itemid  AND transactiontypeid = 683
 
	WHERE

		LDT.layerbatchid = p_batchid AND
		LDT.transactiondate BETWEEN  p_fromdate AND p_todate AND
        LDT.companyid = p_companyid 

    group by LDT.transactiondate
	ORDER BY 
         LDT.transactiondate;
ELSE

SELECT 
		LDT.id as dailytransactionno,
		LC.itemid,
		I.itemname,
        I.itemcode,
		fun_layerbatch_ageinweek(LDT.transactiondate,p_batchid,p_companyid) as weekno,
		DATE_FORMAT(LDT.transactiondate,'%d/%m/%Y')  as transactiondate,
		SUM(LC.consumptionquantity) as issueqty,
       ROUND(MOM.itemvalue,3) as issueamount,
        ROUND((MOM.itemvalue/SUM(LC.consumptionquantity)),3) as rate
	FROM layerdailyconsumption LC
		 LEFT JOIN layerdailytransaction LDT ON LC.layerdailytransactionid = LDT.id
         LEFT JOIN item I ON I.id = LC.itemid
         LEFT JOIN materialmovement MOM ON LDT.transactiondate = MOM.transactiondate AND LC.itemid = MOM.itemid  AND transactiontypeid = 683
 
	WHERE

		LDT.layerbatchid = p_batchid AND
		LDT.transactiondate BETWEEN  p_fromdate AND p_todate AND
        LDT.companyid = p_companyid AND
        LC.itemid = p_itemid
        

    group by LDT.transactiondate
	ORDER BY 
         LDT.transactiondate;
END IF;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_item_bymaterialtype`(
 IN p_materialtypeid varchar(100),
 IN p_companyid INT(11)
)
BEGIN

	SELECT 
		I.id,
		itemcode,
		itemname,
		itemunitid,
		unitcost,
		R.refname as itemunitname,
        materialtypeid, 
        R1.refname as materialtypename
        
		
		FROM
		  item I
		   LEFT JOIN `reference` R ON R.id = I.itemunitid
		   LEFT JOIN `reference` R1 ON R1.id = I.materialtypeid
	WHERE
	   FIND_IN_SET(materialtypeid, p_materialtypeid) AND
	   I.companyid = p_companyid;
  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_item_ddl`(
IN p_companyid INT
)
BEGIN
	SELECT I.id ,
		itemcode,
        itemname,
        unitcost,
        I.itemunitid,
        R.refname as unitname
        
	FROM item I
    
		LEFT JOIN reference R ON I.itemunitid = R.id
    
    WHERE
    I.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_item_delete`(
IN p_id INT
)
BEGIN
	DELETE FROM item WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_item_getavgweight`(
	IN p_itemid INT,
    IN p_companyid INT
)
BEGIN

	SELECT avgweight FROM breederdailymortality 
    WHERE 
		itemid = p_itemid 
		AND companyid = p_companyid 
    ORDER BY itemid desc LIMIT 1;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_item_lastpurchasecost`(
 IN p_itemid INT(11),
 IN p_companyid INT(11)
)
BEGIN
select (itemvalue/quantity) as lastpurchaseprice 
FROM materialmovement 
 WHERE itemid = p_itemid  AND  find_in_set(transactiontypeid,'681,685') 
AND companyid = p_companyid AND towarehouseid IS NOT NUll order by id desc limit 1 ;
	
	
  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_item_livestock`(
	IN p_itemid INT,
	IN p_warehouseid INT,
    IN p_companyid INT
)
BEGIN

	SELECT fnc_consumptionlivestock(p_itemid, p_warehouseid, p_companyid) as stockquantity;
		        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_item_save`(
	IN p_id INT,
    IN p_itemgroupid INT,
    IN p_itemcode VARCHAR(20),
    IN p_itemname VARCHAR(200),
    IN p_description VARCHAR(500),
    IN p_manufacturer VARCHAR(200),
    IN p_itemunitid INT,
    IN p_active TINYINT,
    IN p_unitcost DECIMAL(9,3),
    IN p_ledgerid INT(11),
    IN p_isgst TINYINT,
    IN p_materialtypeid INT(11),
    IN p_hsnid INT(11),
    IN p_taxcategoryid INT(11),
    IN p_companyid INT,
    IN p_issalable TINYINT(4),
    IN p_revenueledgerid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

IF EXISTS(
            SELECT itemname from item where itemname = p_itemname
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
		
		INSERT INTO item 
				(id, itemgroupid, itemcode, itemname, description, manufacturer, itemunitid, active, unitcost, ledgerid, isgst, materialtypeid, hsnid, taxcategoryid, issalable, revenueledgerid, companyid)
			VALUES 
				(p_id, p_itemgroupid, null, p_itemname, p_description, p_manufacturer, p_itemunitid, p_active, p_unitcost, p_ledgerid, p_isgst, p_materialtypeid, p_hsnid, p_taxcategoryid, p_issalable, p_revenueledgerid, p_companyid);
	
			SET @action = 'INSERT';
    
    ELSE
    
		UPDATE item
			SET itemgroupid = p_itemgroupid,
				itemcode = p_itemcode, 
                itemname = p_itemname, 
                description = p_description,
                manufacturer = p_manufacturer,
                itemunitid = p_itemunitid,
                active = p_active,
                unitcost = p_unitcost,
                ledgerid = p_ledgerid,
                isgst = p_isgst,
                materialtypeid = p_materialtypeid,
                hsnid = p_hsnid,
                taxcategoryid = p_taxcategoryid,
                issalable = p_issalable, 
                revenueledgerid = p_revenueledgerid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';
    
	END IF;
    
	SELECT LAST_INSERT_ID() INTO out_id;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		SET @seriesstartwith = null;
        SET @itemcode = null;
        
		IF EXISTS(SELECT seriesstartwith FROM item WHERE itemgroupid = p_itemgroupid AND seriesstartwith IS NOT NULL) THEN
        
			 SELECT seriesstartwith INTO @seriesstartwith FROM item WHERE itemgroupid = p_itemgroupid AND seriesstartwith IS NOT NULL
			 ORDER BY id DESC LIMIT 1;
            
            select CONCAT(IG.seriesprefix,@seriesstartwith) INTO @itemcode from item I
			INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

			WHERE I.id = out_id;
            
			UPDATE item SET itemcode = @itemcode, seriesstartwith = @seriesstartwith +1 WHERE id = out_id;

            
		ELSE
        
			UPDATE item SET seriesstartwith = 1 WHERE id = out_id;
            
            select CONCAT(IG.seriesprefix,1) INTO @itemcode from item I
			INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

			WHERE I.id = out_id;
            
			UPDATE item SET itemcode = @itemcode, seriesstartwith = 1 +1 WHERE id = out_id;
        
        END IF;
    
    END IF;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'item', out_id, @action, p_userid);
END;
END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_item_search`(
IN p_companyid INT
)
BEGIN
	SELECT I.id ,
		itemgroupid,
        IG.groupname,
		itemcode,
        itemname,
        I.description,
        manufacturer,
        active,
        itemunitid,
        unitcost,
        R.refname as itemunitname,
        isgst, 
        case when isgst = 1 then true else false END as isgstbool,
        case when active = 1 then true else false END as activebool,
        materialtypeid, 
        R1.refname as materialtypename,
        hsnid, 
        H.chapterid,
        H.description as hsndescription,
        taxcategoryid,
        R2.refname as taxcategoryname,
        I.issalable, 
        I.revenueledgerid
        
	FROM item I
    
    LEFT JOIN `reference` R ON R.id = I.itemunitid
    LEFT JOIN `reference` R1 ON R1.id = I.materialtypeid
    LEFT JOIN `reference` R2 ON R2.id = I.taxcategoryid
    LEFT JOIN `hsnmaster` H ON H.id = I.hsnid
    LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
    WHERE
    I.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_item_select`(
IN p_id INT
)
BEGIN
	SELECT I.id,
		I.itemgroupid,
		I.itemcode,	
		I.itemname,
        I.description,
        I.manufacturer,
        I.active,
        I.itemunitid,
        I.unitcost,
        IG.groupname,
        I.isgst, 
        I.materialtypeid, 
        I.hsnid, 
        I.taxcategoryid,
        I.ledgerid,
        CC.category,
        I.issalable, 
        I.revenueledgerid,
        I.issalable
        
	
    FROM  item I
    LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
    LEFT JOIN chartofaccount COA ON COA.id = I.ledgerid
    LEFT JOIN coacategory CC ON CC.id = COA.categoryid
	
    WHERE 
          I.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_item_warehouseaddresses`(
	IN p_moduleid INT,
	IN p_companyid INT
)
BEGIN

	SELECT 
		WH.id,
		WH.warehousecode,
        WH.warehousename,
        WH.shiptoname,
        WH.address,
        WH.cityid,
		CT.`cityname`,
        WH.stateid,
        S.statename,
		S.statecode,
        S.isunionterritory,
        WH.countryid,
        C.countryname,
        WH.zipcode,
        WH.companyid
	FROM
		warehouse WH
        
	LEFT JOIN city CT ON WH.cityid = CT.id
    LEFT JOIN state S ON WH.stateid = S.id
    LEFT JOIN country C ON WH.countryid = C.id
	WHERE
		(p_moduleid is null OR find_in_set(p_moduleid,moduleid)) AND active = 1 AND WH.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentry1_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM journalentry1 WHERE id = p_id;
    DELETE FROM journalentrydetail1 WHERE journalentryid = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentry1_save`(
	IN p_id INT(11),
    IN p_journalentrydate DATE,
    IN p_vouchertypeid INT(11),
    IN p_narration VARCHAR(100),
    IN p_referenceid INT(11),
    IN p_moduleid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
    
)
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO journalentry1 
				(id, journalentrydate, vouchertypeid, narration, referenceid, moduleid, companyid)
			VALUES 
				(p_id, p_journalentrydate, p_vouchertypeid, p_narration, p_referenceid, p_moduleid, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE journalentry1
				SET journalentrydate = p_journalentrydate,
                    vouchertypeid = p_vouchertypeid,
                    narration = p_narration,
                    referenceid = p_referenceid,
                    moduleid = p_moduleid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'journalentry1', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentry1_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT JE.id,
		   DATE_FORMAT(JE.journalentrydate,'%d/%m/%Y') as journalentrydate,
           JE.vouchertypeid,
           REF.refname as vouchertype,
           JE.narration,
           JE.referenceid,
           JE.moduleid,
           REF1.refname as module
           
	FROM journalentry1 JE 
    LEFT JOIN `reference` REF ON REF.id = JE.vouchertypeid
    LEFT JOIN `reference` REF1 ON REF1.id = JE.moduleid
    
    WHERE JE.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentry1_select`(
	 IN p_id INT(11)
)
BEGIN

	SELECT id,
           DATE_FORMAT(journalentrydate,'%d/%m/%Y') as journalentrydate,
           vouchertypeid,
           narration,
           referenceid,
           moduleid
	FROM journalentry1 
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentrydetail1_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM journalentrydetail1 WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentrydetail1_save`(
	IN p_id INT(11),
    IN p_journalentryid INT(11),
    IN p_batchid INT(11),
    IN p_locationid INT(11),
    IN p_shedid INT(11),
    IN p_partyroleid INT(11),
    IN p_partyid INT(11),
    IN p_ledgerid INT(11),
    IN p_creditamount DECIMAL(12,3),
    IN p_debitamount DECIMAL(12,3),
    IN p_narration VARCHAR(100),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO journalentrydetail1 
				(id, journalentryid, batchid, locationid, shedid,
                partyroleid, partyid, ledgerid,
                creditamount, debitamount, narration, companyid)
			VALUES 
				(p_id, p_journalentryid, p_batchid, p_locationid, p_shedid,
                p_partyroleid, p_partyid, p_ledgerid,
                p_creditamount, p_debitamount, p_narration, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE journalentrydetail1
				SET journalentryid = p_journalentryid,
					batchid = p_batchid,
                    locationid = p_locationid,
                    shedid = p_shedid,
                    partyroleid = p_partyroleid,
                    partyid = p_partyid,
                    ledgerid = p_ledgerid,
                    creditamount = p_creditamount,
                    debitamount = p_debitamount,
                    narration = p_narration,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'journalentrydetail1', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentrydetail1_search`(
	IN p_journalentryid INT(11)
)
BEGIN

	SELECT JED.id,
		   JED.journalentryid, 
           JED.partyroleid, 
           JED.partyid, 
           P.partyname,
           JED.ledgerid,
           COA.coaname as ledgername,
           COA.glcode,
		   JED.creditamount, 
           JED.debitamount, 
           JED.narration
                
	FROM journalentrydetail1 JED
    LEFT JOIN party P ON P.id = JED.partyid
    LEFT JOIN chartofaccount COA ON COA.id = JED.ledgerid
    
    WHERE JED.journalentryid = p_journalentryid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentrydetail1_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT id, journalentryid, partyroleid, partyid, ledgerid,
                creditamount, debitamount, narration
                
	FROM journalentrydetail1
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentrydetail_delete`(
	IN p_id INT
)
BEGIN

	DELETE FROM journalentrydetail WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentrydetail_save`(
	IN p_id INT(11),
    IN p_journalentryid INT(11),
    IN p_acledgerid INT(11),
    IN p_iscostcenter TINYINT(4),
    IN p_costcenterid INT(11),
    IN p_projectid INT(11),
    IN p_parenttype VARCHAR(45),
    IN p_parentno VARCHAR(45),
    IN p_billno INT(11),
    IN p_billdate DATE,
    IN p_billamount DECIMAL(30,6),
    IN p_dramount DECIMAL(30,6),
    IN p_cramount DECIMAL(30,6),
    IN p_entrycode VARCHAR(45),
    IN p_partyid INT(11),
    IN p_entrytype VARCHAR(45),
    IN p_loadonitemid INT(11),
    IN p_subledgertypeid INT(11),
    IN p_narration VARCHAR(100),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO journalentrydetail 
				(id,
                journalentryid,
                acledgerid,
                iscostcenter,
                costcenterid,
                projectid,
                parenttype,
                parentno,
                billno,
                billdate,
                billamount,
                dramount,
                cramount,
                entrycode,
                partyid,
                entrytype,
                loadonitemid,
                subledgertypeid,
                narration,
                companyid)
			VALUES 
				(p_id,
                p_journalentryid,
                p_acledgerid,
                p_iscostcenter,
                p_costcenterid,
                p_projectid,
                p_parenttype,
                p_parentno,
                p_billno,
                p_billdate,
                p_billamount,
                p_dramount,
                p_cramount,
                p_entrycode,
                p_partyid,
                p_entrytype,
                p_loadonitemid,
                p_subledgertypeid,
                p_narration,
                p_companyid);
                
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE journalentrydetail
				SET journalentryid = p_journalentryid,
                acledgerid = p_acledgerid,
                iscostcenter = p_iscostcenter,
                costcenterid = p_costcenterid,
                projectid = p_projectid,
                parenttype = p_parenttype,
                parentno = p_parentno,
                billno = p_billno,
                billdate = p_billdate,
                billamount = p_billamount,
                dramount = p_dramount,
                cramount = p_cramount,
                entrycode = p_entrycode,
                partyid = p_partyid,
                entrytype = p_entrytype,
                loadonitemid = p_loadonitemid,
                subledgertypeid = p_subledgertypeid,
                narration = p_narration,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
   -- IF(p_subledgertypeid = 1251 && ) THEN
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'journalentrydetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentrydetail_search`(
	IN p_journalentryid INT(11)
)
BEGIN

	SELECT JED.id,
		   JED.acledgerid,
           COA.coaname as ledgername,
           COA.glcode,
           JED.cramount,
           JED.dramount,
           P.partyname,
           I.itemname
    
    FROM journalentrydetail JED
    LEFT JOIN party P ON P.id = JED.partyid
    LEFT JOIN item I ON I.id = JED.loadonitemid
    LEFT JOIN chartofaccount COA ON COA.id = JED.acledgerid
    
    WHERE journalentryid = p_journalentryid
    
    UNION ALL
    
    SELECT '' as id,
		   '' as acledgerid,
           'Total' as ledgername,
           '' as glcode,
           FORMAT(SUM(JED.cramount),2) as cramount,
           FORMAT(SUM(JED.dramount),2) as dramount,
           '' as partyname,
           '' as itemname
           
	FROM journalentrydetail JED
    
    WHERE journalentryid = p_journalentryid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentrydetail_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT * FROM journalentrydetail WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentryfor_amortization_save`(
IN p_id INT,
IN p_journalentryid INT,
IN p_jedate DATE,
In p_projectid INT(11),
IN p_moduleid INT,
IN p_dramount DECIMAL(15,3),
In p_cramount DECIMAL(15,3),
In p_acledgerid INT(11),
IN p_weekno INT(11),
In p_companyid INT
  )
BEGIN

    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO journalentryfor_amortization 
				(
                journalentryid,
                jedate,
                batchid,
                moduleid,
                dramount,
                cramount,
                acledgerid,
                weekno,
                companyid)
			VALUES 
				(
					p_journalentryid,
                    p_jedate,
                    p_projectid,
                    p_moduleid,
                    p_dramount,
                    p_cramount,
                    p_acledgerid,
                    p_weekno,
					p_companyid);
                
	
	END IF;
    END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentry_delete`(
	IN p_id INT
)
BEGIN

	DELETE FROM journalentrydetail WHERE journalentryid = p_id;
	DELETE FROM journalentry WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentry_forwipbird`(
IN p_id INT,
IN p_journalentryid INT,
In p_voucherdate DATE,
In p_projectid INT,
IN p_moduleid INT,
IN p_dramount DECIMAl(15,3),
In p_cramount DECIMAL(15,3),
IN p_companyid INT
)
BEGIN

	SET @ctrlaccledgerid = null;
	SET @WIPledgerid = null;
	

	SELECT ctrlaccledgerid,WIPledgerid
	INTO @ctrlaccledgerid,@WIPledgerid
	FROM breedersetting LIMIT 1;
	
	SET @weekno = 0;
	SET @placementdate = null;
	

            
		if(p_moduleid = 721)then
			SELECT fnc_getplacementdate(p_projectid,p_companyid)  INTO @placementdate;
			SELECT TRUNCATE((((DATEDIFF(p_voucherdate,@placementdate))+1)/7),0)  INTO @weekno;
			
		else
			SELECT fnc_getlayerplacementdate(p_projectid,p_companyid)  INTO @placementdate;
			SELECT TRUNCATE((((DATEDIFF(p_voucherdate,@placementdate))+1)/7),0)  INTO @weekno;
		END IF;

	-- insert JE detail
	if(p_moduleid = 721 and @weekno <=24) then
    
	-- Credit to item - Ledger
	if(p_cramount>0) Then
	
		CALL spc_journalentryfor_amortization_save( 
		 NUll,p_journalentryid,p_voucherdate,p_projectid,p_moduleid,0,p_cramount,@ctrlaccledgerid,@weekno,p_companyid
		 
		);
    END IF;
	IF(p_dramount>0) THEN
	-- Debit to WIP - Ledger
	
		CALL spc_journalentryfor_amortization_save( 
		 NUll,p_journalentryid,p_voucherdate,p_projectid,p_moduleid,p_dramount,0,@WIPledgerid,@weekno,p_companyid
		 
		);
	END IF;
    END IF;
    
    	if(p_moduleid = 725 and @weekno <=19) then
	-- Credit to item - Ledger
	if(@cramount>0) Then
		CALL spc_journalentryfor_amortization_save( 
		NUll,p_journalentryid,p_voucherdate,p_projectid,p_moduleid,0,p_cramount,@ctrlaccledgerid,@weekno,p_companyid
		 
		);
    END IF;
	IF(@dramount>0) THEN
	-- Debit to WIP - Ledger
	
		CALL spc_journalentryfor_amortization_save( 
		 NUll,p_journalentryid,p_voucherdate,p_projectid,p_moduleid,p_dramount,0,@WIPledgerid,@weekno,p_companyid
		 
		);
	END IF;
    END IF;

	
-- END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentry_save`(
	IN p_id INT(11),
    IN p_disp_bucketid INT(11),
    IN p_vouchertypeid INT(11),
    IN p_vouchermodeid INT(11),
    IN p_voucherdate DATE,
    IN p_bankdate DATE,
    IN p_branchid INT(11),
    IN p_uservoucherno VARCHAR(100),
    IN p_chequeno VARCHAR(100),
    IN p_chequedate DATE,
    IN p_byhand VARCHAR(100),
    IN p_deletestatusid INT(11),
    IN p_partyid INT(11),
    IN p_partycode VARCHAR(100),
    IN p_subledgertypeid INT(11),
    IN p_dimensionid INT(11),
    IN p_moduleid INT(11),
    IN p_approvestatusid INT(11),
    IN p_journalentrysubject VARCHAR(100),
    IN p_addressto VARCHAR(100),
    IN p_financialyear VARCHAR(100),
    IN p_bankid INT(11),
    IN p_transactionid INT(11),
    IN p_narration VARCHAR(100),
    IN p_companyid INT(11),
    IN p_userid INT(11),
	OUT out_id INT
)
BEGIN

SET @action = null;
SET @jeno = null;
SET @inouno =  null;

	if(p_vouchertypeid !=1293 AND p_vouchertypeid != 1296) THEN
	call spc_financialyeardocseries_newseries_forJE('JE',p_companyid,@newseries);
		select @newseries INTO  @jeno;
  END IF;
   if(p_vouchertypeid = 1293) THEN 
     call spc_financialyeardocseries_newseries_forvouchertypr('IP',p_companyid,1293,@newseries);
			select @newseries INTO  @jeno;
   END IF;
   
 if(p_vouchertypeid = 1296) THEN 
     call spc_financialyeardocseries_newseries_forvouchertypr('OP',p_companyid,1296,@newseries);
     select @newseries INTO  @jeno;
   END IF;
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO journalentry 
				(id,
                disp_bucketid,
                vouchertypeid,
                vouchermodeid,
                voucherdate,
                bankdate,
                branchid,
                uservoucherno,
                chequeno,
                chequedate,
                byhand, 
                deletestatusid,
                partyid,
                partycode,
                subledgertypeid,
                dimensionid,
                moduleid,
                approvestatusid,
                journalentrysubject,
                addressto, 
                financialyear,
                bankid,
                transactionid,
                narration,
                companyid)
			VALUES 
				(p_id,
                p_disp_bucketid,
                p_vouchertypeid,
                p_vouchermodeid,
                p_voucherdate,
                p_bankdate,
                p_branchid,
                p_uservoucherno,
                p_chequeno,
                p_chequedate,
                p_byhand, 
                p_deletestatusid,
                p_partyid,
                p_partycode,
                p_subledgertypeid,
                p_dimensionid,
                p_moduleid,
                p_approvestatusid,
                p_journalentrysubject,
                p_addressto, 
                p_financialyear,
                p_bankid,
                p_transactionid,
                p_narration,
                p_companyid);
                
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE journalentry
				SET disp_bucketid = p_disp_bucketid,
                vouchertypeid = p_vouchertypeid,
                vouchermodeid = p_vouchermodeid,
                voucherdate = p_voucherdate,
                bankdate = p_bankdate,
                branchid = p_branchid,
                uservoucherno = p_uservoucherno,
                chequeno = p_chequeno,
                chequedate = p_chequedate,
                byhand = p_byhand, 
                deletestatusid = p_deletestatusid,
                partyid = p_partyid,
                partycode = p_partycode,
                subledgertypeid = p_subledgertypeid, 
				dimensionid = p_dimensionid, 
                moduleid = p_moduleid,
                approvestatusid = p_approvestatusid,
                journalentrysubject = p_journalentrysubject,
                addressto = p_addressto, 
                financialyear = p_financialyear,
                bankid = p_bankid,
                transactionid = p_transactionid,
                narration = p_narration,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
  
    -- update je no
            update journalentry SET jeno = @jeno
            WHERE id =out_id;
            if(p_vouchertypeid = 1293) THEN
			update journalentry SET inouno = @jeno
            WHERE id =out_id;
            END IF;
             if(p_vouchertypeid = 1296) THEN
			update journalentry SET inouno = @jeno
            WHERE id =out_id;
            END IF;
           
    
   -- record log
  -- CALL spc_commonlog_save(p_companyid, 'journalentry', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentry_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT JE.vouchertypeid,
		   REF.refname,
		   JE.id,
		   JE.vouchermodeid, 
           DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate, 
           DATE_FORMAT(JE.bankdate,'%d/%m/%Y') as bankdate,
           JE.chequeno, 
           DATE_FORMAT(JE.chequedate,'%d/%m/%Y') as chequedate, 
           JE.byhand, 
           JE.partyid, 
           JE.partycode, 
           JE.subledgertypeid, 
		   JE.approvestatusid, 
           JE.journalentrysubject, 
           JE.addressto, 
		   JE.financialyear, 
           JE.bankid, 
           JE.narration,
           B.bankname,
           CB.branchname,
           AD.dimensionname,
           P.partyname,
           JE.moduleid,
           JE.jeno
           
    FROM journalentry JE 
    LEFT JOIN `reference` REF ON JE.vouchertypeid = REF.id
    LEFT JOIN bank B ON B.id = JE.bankid
    LEFT JOIN commonbranch CB ON CB.id = JE.branchid
    LEFT JOIN party P ON P.id = JE.partyid
    LEFT JOIN accounts_dimension AD ON AD.id = JE.dimensionid
    
    WHERE JE.companyid = p_companyid
    
    ORDER BY JE.id desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_journalentry_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT JE.*,
		   B.bankname,
           CB.branchname,
           AD.dimensionname,
           P.partyname
    
    FROM journalentry JE
    LEFT JOIN bank B ON B.id = JE.bankid
    LEFT JOIN commonbranch CB ON CB.id = JE.branchid
    LEFT JOIN party P ON P.id = JE.partyid
    LEFT JOIN accounts_dimension AD ON AD.id = JE.dimensionid
    WHERE JE.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_jsontest`(
	-- IN p_consumptiondetail json,
)
BEGIN


	-- SELECT p_consumptiondetail;
	-- SELECT JSON_EXTRACT(p_consumptiondetail);

	-- SELECT p_consumptiondetail->'$.test';

	-- SELECT JSON_EXTRACT(p_consumptiondetail, CONCAT('$.test')) AS fishes;



	SET @jsonstring = '[{ "test" : null, "test1" : "test 13"}, { "test" : 2, "test1" : "test 12"}]';

	-- SELECT p_consumptiondetail->'$.test';

	set @i = 0;

	WHILE @i < JSON_LENGTH(@jsonstring) DO
		
        SET @ival = NULL;
        
        SELECT JSON_EXTRACT(@jsonstring,CONCAT('$[',@i,']')) INTO @ival;
        
        SELECT @ival AS TEST;
        
		SELECT 
			  case when JSON_EXTRACT(@ival,CONCAT('$.test')) is null then 1111 else 2222 end as test,
			   JSON_EXTRACT(@ival,CONCAT('$.test1')) as test1,
               JSON_EXTRACT(@ival,CONCAT('$.test')) as test,
               JSON_EXTRACT(@ival,CONCAT('$.test')) as test;
		
		SELECT @i + 1 INTO @i;
	END WHILE;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layeramortization_save`(
	IN p_id INT,
    IN p_amortizationdate DATE,
	IN p_layerbatchid INT,
    IN p_liveqty INT,
	IN p_eggsprediction INT,
	IN p_totaleggs INT,
    IN p_wipvalue DECIMAL(20,3),
    IN p_ageinweeks INT,
    IN p_ageindays INT,
    IN p_requiredbirdprice DECIMAL(20,3),
	IN p_requiredbirdvalue DECIMAL(20,3),
    IN p_amortizationvalueofbird DECIMAL(20,3),
    IN p_amortizationno VARCHAR(200),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
	IF NOT EXISTS(SELECT * FROM layeramortization WHERE layerbatchid = p_layerbatchid) THEN
    
		INSERT INTO layeramortization (
						amortizationdate,
						layerbatchid,
						liveqty,
						eggsprediction,
                        totaleggs,
						wipvalue,
						ageinweeks,
                        ageindays,
                        requiredbirdprice,
						requiredbirdvalue,
						amortizationvalueofbird,
                        amortizationno,
						companyid
					)
			VALUE 	(
						
						p_amortizationdate,
						p_layerbatchid,
						p_liveqty,
						p_eggsprediction,
                        p_totaleggs,
						p_wipvalue,
						p_ageinweeks,
                        p_ageindays,
                        P_requiredbirdprice,
						p_requiredbirdvalue,
                        p_amortizationvalueofbird,
                        p_amortizationno,
						p_companyid
					);
    	    
            SET @action = 'INSERT';
    END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'layeramortization', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layeramortization_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
			A.id,
            DATE_FORMAT(A.amortizationdate,'%d/%m/%Y') as amortizationdate,
			A.layerbatchid,
            LB.batchname,
			A.liveqty,
			A.eggsprediction,
            A.totaleggs,
			A.wipvalue,
			A.ageinweeks,
            A.ageindays,
			A.requiredbirdprice,
			A.requiredbirdvalue,
			A.amortizationvalueofbird,
            A.amortizationno
			
	FROM layeramortization A
    LEFT JOIN layerbatch LB ON LB.id = A.layerbatchid


	WHERE A.companyid = p_companyid
	ORDER BY A.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layeramortization_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

    SET @labourcharge = null;
    SET @overheadcost = null;
    
    SELECT labourcharge, overheadcost
    INTO @labourcharge, @overheadcost
    FROM layersetting
    WHERE companyid = p_companyid;
    
	SELECT
			A.id,
            DATE_FORMAT(A.amortizationdate,'%d/%m/%Y') as amortizationdate,
			A.layerbatchid,
            LB.batchname,
			A.liveqty,
			A.eggsprediction,
            A.totaleggs,
			A.wipvalue,
			A.ageinweeks,
            A.ageindays,
			A.requiredbirdprice,
			A.requiredbirdvalue,
            A.amortizationvalueofbird,
            @labourcharge as labourcharge,
            @overheadcost as overheadcost,
            DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as placementdate,
            A.amortizationno
			
	FROM layeramortization A
    LEFT JOIN layerbatch LB ON LB.id = A.layerbatchid
    LEFT JOIN layerbatchplacement LBP ON A.layerbatchid = LBP.layerbatchid


	WHERE A.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layeramortization_wipdetail`(
	IN p_layerbatchid INT,
    IN p_transactiondate DATE,
    IN p_companyid INT
)
BEGIN
     SET @@sql_mode = '';
     SET @femaleitemid = NULL;
     SET @labourcharge = null;
     SET @overheadcost = null;
     SET @femalebirdcost = NULL;
     
     -- Default  Female itemids
     
		/*SELECT 
			labourcharge, overheadcost INTO @labourcharge, @overheadcost 
		FROM 
			layersetting LIMIT 1;*/
            
	SELECT itemid INTO @femaleitemid FROM layerbatch WHERE id = p_layerbatchid;
            
	IF EXISTS(SELECT id FROM layerbatchplacement WHERE layerbatchid = p_layerbatchid AND id IS NOT NULL) THEN
		DROP TEMPORARY TABLE IF EXISTS temwipdetail;
		CREATE TEMPORARY TABLE temwipdetail
		
		SELECT LBP.layerbatchid,
			   LBP.placementdate, 
			   LBPD.itemid, 
			   IFNULL(@labourcharge,0) as labourcharge,
			   IFNULL(@overheadcost,0) as overheadcost  ,
			   fnc_layerbatchwise_birdliveqty(p_layerbatchid,LBPD.itemid,p_transactiondate,p_companyid) as liveqty,
			   fun_layerlive_biredcost(p_layerbatchid,p_companyid,p_transactiondate) as birdcost 
			   
		FROM layerbatchplacement LBP
		LEFT JOIN layerbatchplacementdetail LBPD ON LBPD.layerbatchplacementid = LBP.id 
		
		WHERE layerbatchid = p_layerbatchid;
					
	ELSE
		SET @labourcharge = 0; 
        DROP TEMPORARY TABLE IF EXISTS temwipdetail;
        CREATE TEMPORARY TABLE temwipdetail
        
		SELECT
			 LBO.layerbatchid,
			 LLO.itemid,
			 LBO.batchplacementdate,
			 IFNULL(LFD.overheadexp,0) as overheadcost,
			 @labourcharge as labourcharge,
			 fnc_layerbatchwise_birdliveqty(p_layerbatchid,LLO.itemid,p_transactiondate,p_companyid) as liveqty,
			 fun_layerlive_biredcost(p_layerbatchid,p_companyid,p_transactiondate) as birdcost 
			
		FROM layer_batchlocationwiseopening_detail LLO
			INNER JOIN layer_batchopening_balance LBO ON LBO.id = LLO.layerbatchopeningid
			INNER JOIN layer_batchfinancialopening_detail LFD ON LBO.id = LFD.layerbatchopeningid
            
		WHERE  LBO.layerbatchid = p_layerbatchid  
	    AND LBO.companyid = p_companyid;
                          
	END IF;
        
        
	SELECT  
		layerbatchid,
		itemid as femaleitemid,
		(liveqty) as liveqty,
		(liveqty*birdcost)/(liveqty) as birdcost,
		@labourcharge as labourcharge,
		(overheadcost +fun_overhed_exp(layerbatchid,725,p_transactiondate,p_companyid)) as overheadcost
	from temwipdetail;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchbalance_save`(
    IN p_id INT(11),
    IN p_updateddate DATE,
    IN p_layerbatchid INT(11),
    IN p_layershedid INT(11),
    IN p_layershedlineid INT(11),
    IN p_itemid INT(11),
    IN p_quantity INT(11),
    -- IN p_mortality INT(11),
    -- IN p_culls INT(11),
    IN p_transactionname VARCHAR(45),
    IN p_companyid INT(11),
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerbatchbalance 
				(id, updateddate, layerbatchid, layershedid, layershedlineid, itemid, quantity, transactionname, companyid)
			VALUES 
				(p_id, p_updateddate, p_layerbatchid, p_layershedid, p_layershedlineid, p_itemid, p_quantity, p_transactionname, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE layerbatchbalance
				SET  updateddate = p_updateddate,
                layerbatchid = p_layerbatchid,
                layershedid = p_layershedid,
                layershedlineid = p_layershedlineid,
                itemid = p_itemid,
                quantity = p_quantity,
                transactionname = p_transactionname,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layerbatchbalance', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchdetail_weekwise`(
	IN p_batchid INT,
	IN p_fromweek INT,
	IN p_toweek INT,
	IN p_companyid INT
)
BEGIN

SET @@sql_mode = '';
	DROP TEMPORARY TABLE IF EXISTS weekwiselayerdetail;
	CREATE TEMPORARY TABLE weekwiselayerdetail

        
	SELECT
			LB.id as breederbatchid,
            LDM.avgweight,
            LB.batchname,
            LDT.transactiondate,
            ((LDM.todaymortality + LDM.todayculls)) as mortality,
            LDC.consumptionquantity as feedconsumtion,
            TRUNCATE((((DATEDIFF(LDT.transactiondate,fnc_getlayerplacementdate(LB.id,p_companyid)))+1)/7),0) as ageinweek,
            (layerbatch_liveqty_ongivendate(LB.id,LDT.transactiondate,LDT.id,LDM.itemid,p_companyid)) as liveqty,
            fun_layerlive_biredcost(LB.id,p_companyid,LDT.transactiondate) as birdcost,
			IFNULL(LECD.quantity,0) as totaleggscollection,
			IFNULL(LEDD.quantity,0) as TableEggs,
            fnc_layer_biologicalvalue(LB.id,NOW(),fnc_getlayerplacementdate(LB.id,p_companyid),p_companyid) as biologicalvalue
             
	FROM layerbatch LB 
		LEFT JOIN layerdailytransaction LDT ON LDT.layerbatchid = LB.id
        LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id
		LEFT JOIN layerdailyconsumption LDC ON LDC.layerdailytransactionid = LDT.id AND LDC.consumptiontypeid = 1149
        LEFT JOIN layereggscollection LEC ON LEC.layerbatchid = LB.id AND LEC.collectiondate = now()
		LEFT JOIN layereggscollectiondetail LECD ON LECD.eggscollectionid = LEC.id
		LEFT JOIN layereggsdistributiondetail LEDD ON LEDD.eggscollectionid = LEC.id AND LEDD.itemtypeid = 1129
            
	WHERE LB.id = p_batchid AND
		  LB.statusid = 982 	
	order by LDT.transactiondate desc;
        
        
        /*SELECT * FROM  weekwisedetail;*/
        
	DROP TEMPORARY TABLE IF EXISTS layerbatchdetail;
	CREATE TEMPORARY TABLE layerbatchdetail
		(Age_In_WEEk INT(11),
		Avg_Weight DECIMAL(15,3),
		Live_Qty INT(11),
		Mortality INT(11),
		Bird_Cost Decimal(15,3),
		Avg_Feed Decimal(15,3),
		Biological_Value Decimal(15,3),
		Eggs_collection INT(11),
		Table_Eggs INT(11));

	INSERT INTO layerbatchdetail 
			
	SELECT LD.ageinweek,
		   avgweight,
           MIN(liveqty) as liveqty,
		   IFNULL(SUM(LD.mortality),0) as mortality,
		   format(MAX(birdcost),3) as birdcost,
		   IFNULL(SUM((LD.feedconsumtion/liveqty)),0) as avgfeed,
		   MAX(biologicalvalue),
		   IFNULL(SUM(totaleggscollection),0) as totaleggscollection,
		   IFNULL(SUM(TableEggs),0) as tulleteggs

	FROM weekwiselayerdetail LD
    
    WHERE LD.ageinweek BETWEEN p_fromweek AND p_toweek 
    
    group by LD.ageinweek;
    
	SELECT * FROM layerbatchdetail order by Age_In_WEEk;

    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchdetail_weekwisedata`(
IN p_layerbatchid INT,
IN p_fromweek INT,
IN p_toweek INT,
IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';
DROP TEMPORARY TABLE IF EXISTS weekwisedetail;
CREATE TEMPORARY TABLE weekwisedetail

        
SELECT 

LB.id as layerbatchid,LB.batchname,LDT.transactiondate,LDM.avgweight,(LDM.todaymortality + LDM.todayculls) as mortality,
LDC.consumptionquantity as feedconsumtion,LDC.consumptiontypeid,
TRUNCATE((((DATEDIFF(LDT.transactiondate,fnc_getplacementdate_layer(LB.id,p_companyid)))+1)/7),0) as ageinweek,
(batch_liveqty_ongivendatelayer(LB.id,LDT.transactiondate,LDT.id,LDM.itemid,p_companyid)) as liveqty,
fun_layerlive_biredcost(LB.id,p_companyid,LDT.transactiondate) as birdcost,
fnc_geteggscollectionlayer(LB.id,LDT.transactiondate) as totaleggscollection, -- Egg collection statusid 803 eggs are transfered and approved 
fnc_gethatchingeggslayer(LB.id,LDT.transactiondate) as hatchingeggs, -- 842 Approve and 881 Hatching Eggs 
fnc_layer_biologicalvalue(LB.id,NOW(),fnc_getplacementdate_layer(LB.id,p_companyid),p_companyid) as biologicalvalue




FROM layerbatch LB 
LEFT JOIN layerdailytransaction LDT ON LDT.layerbatchid = LB.id
LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id
LEFT JOIN layerdailyconsumption LDC ON LDC.layerdailytransactionid = LDT.id  AND LDC.consumptiontypeid = 861

where LB.id= p_layerbatchid
and   LB.statusid = 982 
and   LB.companyid= p_companyid 
order by LDT.transactiondate desc;
        
        -- SELECT * FROM  weekwisedetail;
        
DROP TEMPORARY TABLE IF EXISTS batchdetail;
CREATE TEMPORARY TABLE batchdetail
	(Age_In_WEEk INT(11),
	Avg_Weight DECIMAL(15,3),
	Live_Qty INT(11),
	Mortality INT(11),
	Bird_Cost Decimal(15,3),
	Avg_Feed Decimal(15,3),
	Biological_Value Decimal(15,3),
	Eggs_collection INT(11),
	Hatching_Eggs INT(11));

INSERT INTO batchdetail 
        
SELECT BD.ageinweek,IFNULL(avgweight,0),MAX(liveqty) as liveqty,
		IFNULL(SUM(BD.mortality),0) as mortality,
        format(MAX(birdcost),3) as birdcost,
		IFNULL(SUM((BD.feedconsumtion/liveqty)),0) as avgfeed,
        MAX(biologicalvalue),
		IFNULL(SUM(totaleggscollection),0) as totaleggscollection,
		IFNULL(SUM( hatchingeggs),0) as hatchingeggs

	FROM 
    weekwisedetail BD
   WHERE 
    BD.ageinweek BETWEEN p_fromweek AND p_toweek 
    group by BD.ageinweek;
    
 SELECT * FROM  batchdetail order by Age_In_WEEk;

    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchmergedetail_save`(
	IN p_id INT,
    IN p_layerbatchmergeid INT(11),
    IN p_fromshedid INT(11),
    IN p_toshedid INT(11),
    IN p_modeid INT(11),
    IN p_transferqty INT,
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    SET @sourcebatchid = null;
	SET @targetbatchid = null;
    SET @mergedate = null;
	SET @itemid = null;
	SET @fromwarehouseid = null;
	SET @fromwarehousebinid = null;
        
	if(p_modeid = 6153) then
		SELECT LB.itemid INTO @itemid
        from layer_batchmerge LBM
		LEFT JOIN layerbatch LB ON LBM.sourcebatchid = LB.id
		where LBM.id = p_layerbatchmergeid;
        
        SELECT warehouseid, warehousebinid INTO @fromwarehouseid, @fromwarehousebinid FROM layershed
        WHERE id = p_fromshedid;
    
	ELSE
		SELECT itemid INTO @itemid
        FROM grpodetail
        WHERE grpoid = (select grpoid from layer_batchmerge where id = p_layerbatchmergeid)
        AND itemid = (select defaultfemalechickid from layersetting LIMIT 1);
        
        SELECT towarehouseid, towarehousebinid INTO @fromwarehouseid, @fromwarehousebinid
        FROM grpo
        WHERE id = (select grpoid from layer_batchmerge where id = p_layerbatchmergeid);
	END IF;
    
    SELECT LBM.mergedate, LBM.sourcebatchid, LBM.targetbatchid
    INTO @mergedate, @sourcebatchid, @targetbatchid
	from layer_batchmerge LBM
    where LBM.id = p_layerbatchmergeid;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN

     -- to warehousebinid
		SET @towarehouseid = null;
        SET @towarehousebinid = null;
        SELECT warehouseid, warehousebinid INTO @towarehouseid, @towarehousebinid FROM layershed
        WHERE id = p_toshedid;
        
    IF(p_transferqty > 0)THEN
		SET @out_transferid = null;
        CALL spc_materialtransfer_save(
			NULL, 505, 505, 582, @mergedate,@mergedate,NULL,
			@fromwarehouseid, @fromwarehousebinid, 624, 
            @sourcebatchid, @targetbatchid, 
            NULL, p_companyid, p_userid, @out_transferid
		);
        
		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, @out_transferid,
            @towarhouseid, @towarehousebinid,
            @itemid, (SELECT itemname FROM item WHERE id = @itemid),
			p_transferqty, p_transferqty, 
			(SELECT refname FROM `reference` WHERE id = (SELECT itemunitid FROM item WHERE id = @itemid)),
			(SELECT targetbatchid FROM layer_batchmerge WHERE id = p_layerbatchmergeid),
            p_userid, p_companyid, @out_transferdetailid
		);
    
		INSERT INTO layer_batchmergedetail (
				id,
				layerbatchmergeid,
                fromshedid,
                toshedid,
				transferqty,
                transferid,
				companyid)
                
			VALUES (
				p_id,
                p_layerbatchmergeid,
                p_fromshedid,
                p_toshedid,
				p_transferqty,
                @out_transferid,
                p_companyid);
        
        -- update source batch 
        
        if(p_modeid = 6153) THEN
			UPDATE layerbatchbalance
			SET 
				updateddate = @mergedate,
				quantity = (quantity - p_transferqty)
			WHERE
				layerbatchid = @sourcebatchid AND
				layershedid = p_fromshedid AND
				quantity != 0;
		else
			UPDATE grpodetail
            SET quantity = (quantity - p_transferqty)
            WHERE grpoid = (select grpoid from layer_batchmerge where id = p_layerbatchmergeid)
            AND itemid = @itemid;
        END IF;
		-- update target batch qty 
        UPDATE layerbatchbalance
        SET 
			updateddate = @mergedate,
            quantity = (quantity + p_transferqty)
		WHERE
			layerbatchid = @targetbatchid AND
            layershedid = p_toshedid;
                
	END IF;
        
	SET @action = 'INSERT';

	ELSE
    
		IF(p_transferqty > 0) THEN
			UPDATE layer_batchmergedetail
				SET
					layerbatchmergeid = p_layerbatchmergeid,
                    fromshedid = p_fromshedid,
                    toshedid = p_toshedid,
					transferqty = p_transferqty,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				SET @action = 'UPDATE'; 
                
		-- update breederbatchbalance table to reflect live batch quantity
		if(p_modeid = 6153) THEN
			UPDATE layerbatchbalance
			SET 
				updateddate = @mergedate,
				quantity = (quantity - p_transferqty)
			WHERE
				layerbatchid = @sourcebatchid AND
				layershedid = p_fromshedid AND
				quantity != 0;
		else
			UPDATE grpodetail
            SET quantity = (quantity - p_transferqty)
            WHERE grpoid = (select grpoid from layer_batchmerge where id = p_layerbatchmergeid)
            AND itemid = @itemid;
        END IF;
            
		-- update target batch qty 
        UPDATE layerbatchbalance
        SET 
			updateddate = @mergedate,
            quantity = (quantity + p_transferqty)
		WHERE
			layerbatchid = @targetbatchid AND
            layershedid = toshedid;
            
	END IF;
		
	END IF;
	-- record log
  -- CALL spc_commonlog_save(p_companyid, 'breederbatchtransferdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchmergedetail_search`(
	IN p_layerbatchmergeid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	select LBMD.id,
			LBMD.layerbatchmergeid,
            LBMD.fromshedid,
            LS.shedname as sourceshedname,
            LBMD.toshedid,
            LS1.shedname as targetshedname,
            LBMD.transferqty,
            SUM(LBB.quantity) as shedquantity
            
	from layer_batchmergedetail LBMD
    LEFT JOIN layershed LS ON LS.id = LBMD.fromshedid
    LEFT JOIN layershed LS1 ON LS1.id = LBMD.toshedid
    LEFT JOIN layerbatchbalance LBB ON LBB.layershedid = LBMD.fromshedid
    WHERE LBMD.layerbatchmergeid = p_layerbatchmergeid AND LBMD.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchmergedetail_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN
	select LBMD.id,
			LBMD.layerbatchmergeid,
            LBMD.fromshedid,
            LS.sourceshedname,
            LBMD.toshedid,
            LS1.targetshedname,
            LBMD.transferqty,
            SUM(LBB.quantity) as remainingqty
            
	from layer_batchmergedetail LBMD
    LEFT JOIN layershed LS ON LS.id = LBMD.fromshedid
    LEFT JOIN layershed LS1 ON LS1.id = LBMD.toshedid
    LEFT JOIN layerbatchbalance LBB ON LBB.layershedid = LBMD.fromshedid
    WHERE LBMD.id = p_id AND LBMD.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchmerge_delete`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN
	DELETE FROM layer_batchmerge WHERE id = p_id AND companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchmerge_save`(
	IN p_id INT,
	IN p_mergedate DATE,
    IN p_sourcebatchid INT(11),
    IN p_targetbatchid INT(11),
    IN p_grpoid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		INSERT INTO layer_batchmerge (
				id, 
                mergedate,
                sourcebatchid,
                targetbatchid,
                grpoid,
                companyid)
			
            VALUES (
				p_id, 
                p_mergedate,
                p_sourcebatchid,
                p_targetbatchid,
                p_grpoid,
                p_companyid);
                
		SET @action = 'INSERT';
	ELSE
    
		UPDATE layer_batchmerge
			SET 
                mergedate = p_mergedate,
                sourcebatchid = p_sourcebatchid,
                targetbatchid = p_targetbatchid,
                grpoid = p_grpoid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id;
    
    
	 -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederbatchtransfer', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchmerge_search`(
	IN p_companyid INT(11)
)
BEGIN
	SELECT DATE_FORMAT(LBM.mergedate,'%d/%m/%Y') as mergedate,
           LBM.sourcebatchid,
			S.batchname as frombatch,
            LBM.targetbatchid,
            T.batchname as tobatch,
            LBM.id
	FROM layer_batchmerge LBM
    LEFT JOIN layerbatch S ON S.id = LBM.sourcebatchid
    LEFT JOIN layerbatch T ON T.id = LBM.targetbatchid
    WHERE LBM.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchmerge_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT mergedate,
           LBM.sourcebatchid,
			S.batchname,
            LBM.targetbatchid,
            T.batchname
	FROM layer_batchmerge LBM
    LEFT JOIN layerbatch S ON S.id = LBM.sourcebatchid
    LEFT JOIN layerbatch T ON T.id = LBM.targetbatchid
    WHERE LBM.id = p_id AND LBM.companyid = p_companyid;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchplacementdetail_bybreederbatchid`(
 IN p_companyid INT,
 IN p_layerbatchid INT
)
BEGIN


SELECT  LB.layershedid,
		LB.layershedid as id,
		LS.shedname,
        L.locationcode,
	    L.locationname,
        LS.warehouseid,
		LS.warehousebinid,
        LB.layerbatchid,
		DATE_FORMAT(DATE_ADD((SELECT collectiondate FROM layereggscollection WHERE layerbatchid =  LB.layerbatchid AND shedid = LB.layershedid  ORDER BY collectiondate DESC LIMIT 1), INTERVAL 1 DAY),'%d/%m/%Y') AS collectiondate

FROM layerbatchbalance LB

    LEFT JOIN layershed LS ON LB.layershedid =  LS.id 
	LEFT JOIN location L ON LS.locationid = L.id

	WHERE LB.layerbatchid = p_layerbatchid

	GROUP BY  LB.layershedid;
		
    
  /*  SELECT
	LBP.id,
    LBPD.layershedid,
    LBP.layerbatchid,
    LS.shedname,
    L.locationcode,
	L.locationname
    
    FROM
		layerbatchplacement LBP
        
	LEFT JOIN layerbatchplacementdetail LBPD ON LBPD.layerbatchplacementid = LBP.id
    LEFT JOIN layershed LS ON LBPD.layershedid =  LS.id 
	LEFT JOIN location L ON LS.locationid = L.id
    /*AND BP.breederbatchid = p_breederbatchid
    
   
    
	WHERE
    LBPD.companyid = p_companyid
    AND LBP.layerbatchid = p_layerbatchid
    
    GROUP BY LBPD.layershedid;*/
    
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchplacementdetail_save`(
	IN p_id INT,
    IN p_layerbatchplacementid INT(11),
    IN p_layershedid INT(11),
    IN p_layershedlineid INT(11),
    IN p_itemid INT(11),
    IN p_placedquantity DECIMAL(9,3),
    IN p_placementscheduledetailid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	SET @out_transferid = null;
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
   
	 -- to warehousebinid
	 -- to warehousebinid
		SET @towarehouseid = null;
        SET @towarehousebinid = null;
        SELECT warehouseid,warehousebinid INTO @towarehouseid,@towarehousebinid FROM layershed LS
        WHERE LS.id = p_layershedid;
        
         -- get placement detail
        SET @layerbatchid = null;
        SET @placementdate = null;
        SET @grpono = null;
        SELECT layerbatchid,placementdate,grpono INTO @layerbatchid,@placementdate,@grpono FROM layerbatchplacement WHERE id = p_layerbatchplacementid;
        
         -- from warehouseid
        SET @fromwarehouseid = null;
        SET @fromwarehousebinid = null;
        SELECT towarehouseid,towarehousebinid INTO @fromwarehouseid,@fromwarehousebinid FROM grpo
        WHERE id = @grpono;
        
                -- get itembatch 
        SET @itembatch = null;
        SELECT itembatch INTO @itembatch from grpodetail WHERE grpoid = @grpono AND itemid = p_itemid ;
        
		CALL spc_materialtransfer_save(
			NULL, 505, 505, 582, @placementdate, @placementdate,NULL,
			@fromwarehouseid, @fromwarehousebinid, 624, 
            @layerbatchid,
            @layerbatchid,
            NULL, p_companyid, p_userid, @out_transferid
		);
        
      
    -- Do material transfer from cold room default bin(default hatchery warehouse) to particular setter warehouse
		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, @out_transferid, @towarehouseid, @towarehousebinid, 
            p_itemid, (SELECT itemname FROM item WHERE id = p_itemid),
			p_placedquantity, p_placedquantity, 
			(SELECT refname FROM `reference` WHERE id = p_itemid),
			@itembatch,
            p_userid, p_companyid, @out_transferdetailid
		);
        
        
    
		INSERT INTO layerbatchplacementdetail (
				id,
				layerbatchplacementid,
				layertypeid,
				layershedid,
				layershedlineid,
                itemid,
				quantity,
                placementscheduledetailid,
				companyid)
                
			VALUES (
				p_id,
                p_layerbatchplacementid,
                762,
                p_layershedid,
                p_layershedlineid,
                p_itemid,
                p_placedquantity,
                p_placementscheduledetailid,
                p_companyid);
                

    
        SET @action = 'INSERT';

	ELSE
    
		
			UPDATE layerbatchplacementdetail
				SET layerbatchplacementid = p_layerbatchplacementid, 
					layertypeid = 762,
					layershedid = p_layershedid,
					layershedlineid = p_layershedlineid,
                    itemid = p_itemid,
					quantity = p_placedquantity,
                    placementscheduledetailid = p_placementscheduledetailid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				SET @action = 'UPDATE'; 
		 
		
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- change the status of layer shed as 924 = 'batch satrted'
    UPDATE layershed SET statusid = 924 WHERE id = p_layershedid;    
    
     -- update layerbatchbalance table
  
    -- Update male and female itemid layerbatch table
  
  UPDATE layerbatch SET itemid = p_itemid
  WHERE id = (SELECT layerbatchid FROM layerbatchplacement WHERE id = p_layerbatchplacementid);

  
	SET @out_balanceid1 = NULL;
	CALL spc_layerbatchbalance_save(
		NULL, (SELECT placementdate FROM layerbatchplacement WHERE id = p_layerbatchplacementid),
        (SELECT layerbatchid FROM layerbatchplacement WHERE id = p_layerbatchplacementid),
		p_layershedid, p_layershedlineid,  p_itemid, p_placedquantity, 'placement', p_companyid, 
		p_userid, @out_balanceid1
	);
  

	-- record log
   CALL spc_commonlog_save(p_companyid, 'layerbatchplacementdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchplacementdetail_search`(
 IN p_layerbatchplacementid INT
)
BEGIN
    
    SELECT
			LBPD.id,
			LBPD.layerbatchplacementid,
			LBPD.layertypeid,
			LBPD.layershedid,
            LS.shedname,
			LBPD.layershedlineid,
            LSL.linename,
            LBPD.itemid,
			LBPD.quantity as placedquantity,
			LBPD.companyid,
            LBPD.placementscheduledetailid,
            LSL.capacity as linecapacity
         
    FROM
		layerbatchplacementdetail LBPD
        LEFT JOIN layershed LS ON LS.id = LBPD.layershedid
        LEFT JOIN layershedline LSL ON LSL.id = LBPD.layershedlineid
   	
	WHERE
		LBPD.layerbatchplacementid = p_layerbatchplacementid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchplacementlist_search`(
	IN p_batch INT,
    IN p_from_date date,
	IN p_to_date date
)
BEGIN
    
    SELECT
			LBP.id, 
			LBP.locationid,
            L.locationname,
			LBP.layerbatchid,
            LB.batchname,
			DATE_FORMAT(LBP.firstdaydate,'%d/%m/%Y') as firstdaydate,
			LBP.grpono,
			DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as placementdate,
			-- BBP.ageinweek,
			LBP.phasestatusid,
            LP.phasename as phasestatus,
			LBP.companyid,
            LBP.placementscheduleid
            
         
	FROM
		layerbatchplacement LBP
        LEFT JOIN layerphase LP ON LBP.phasestatusid = LP.id
        LEFT JOIN location L ON LBP.locationid = L.id
        LEFT JOIN layerbatch LB ON LBP.layerbatchid = LB.id
   	
	WHERE
		LBP.layerbatchid = p_batch AND
        (LBP.placementdate BETWEEN p_from_date AND p_to_date)
        
	ORDER BY LBP.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchplacementshed_bylayerbatchid`(
	IN p_layerbatchid INT
)
BEGIN

SELECT LB.layershedid,
		LS.locationid as fromlocationid,
        L.locationname as fromlocationname,
		LS.shedname,
        LS.warehouseid,
		LS.warehousebinid

FROM layerbatchbalance LB

	LEFT JOIN layershed LS ON LS.id = LB.layershedid
	LEFT JOIN location L ON L.id = LS.locationid

	WHERE LB.layerbatchid = p_layerbatchid

		GROUP BY LB.layershedid;

/*SELECT transferid, fromlocationid, placementdate, fromlocationname, layershedid,shedname, phasestatusid, warehouseid, warehousebinid

FROM (
SELECT 
		   LBP.id as transferid,
           LBP.locationid as fromlocationid,
           DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as placementdate,
           L.locationname as fromlocationname,
           LBPD.layershedid,
		   LS.shedname,
           LS.warehouseid,
           LS.warehousebinid,
           LBP.phasestatusid
           
			FROM layerbatchplacement LBP
			LEFT JOIN location L ON L.id = LBP.locationid
    LEFT JOIN layerbatchplacementdetail LBPD ON LBP.id = LBPD.layerbatchplacementid
    LEFT JOIN layershed LS ON LS.id = LBPD.layershedid
    
    WHERE LBP.layerbatchid = p_layerbatchid
    AND LS.statusid = 924
    
    -- GROUP BY LBPD.breedershedid
            
            
  UNION ALL
  
   SELECT
			 LBT.id as transferid,
			 LBT.tolocationid as fromlocationid,
			 DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as placementdate,
			 L.locationname as fromlocationname,
             LBTD.toshedid as layershedid,
             LS.shedname,
             LS.warehouseid,
			 LS.warehousebinid,
             LBT.phasestatusid
            
	FROM layerbatchtransfer LBT
     LEFT JOIN location L ON L.id = LBT.tolocationid
     LEFT JOIN layerbatchtransferdetail LBTD ON LBT.id = LBTD.layerbatchtransferid
     LEFT JOIN layershed LS ON LS.id = LBTD.toshedid
     LEFT JOIN layerbatchplacement LBP ON LBP.layerbatchid = LBT.layerbatchid
    
    WHERE LBT.layerbatchid = p_layerbatchid
    AND LS.statusid = 924
    
   --  GROUP BY LBTD.toshedid
       
      ) as temp
      
      GROUP BY layershedid;*/
       
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchplacement_delete`(	IN p_id INT
)
BEGIN
	DELETE FROM layerbatchplacementdetail WHERE layerbatchplacementid = p_id;
	DELETE FROM layerbatchplacement WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchplacement_save`(
    IN p_id INT,
    IN p_locationid INT(11),
    IN p_layerbatchid INT(11),
    IN p_placementscheduleid INT(11),
    IN p_firstdaydate DATE,
    IN p_grpono INT(11),
    IN p_placementdate DATE,
    IN p_phasestatusid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerbatchplacement (
				id, 
                locationid,
                layerbatchid,
                placementscheduleid,
                firstdaydate,
                grpono,
                placementdate,
               -- ageinweek,
                phasestatusid,
                companyid)
			
            VALUES (
				p_id,
                p_locationid,
                p_layerbatchid,
                p_placementscheduleid,
                p_firstdaydate,
                p_grpono,
                p_placementdate,
               -- p_ageinweek,
                p_phasestatusid,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE layerbatchplacement
			SET locationid = p_locationid, 
				layerbatchid = p_layerbatchid,
                placementscheduleid = p_placementscheduleid,
                firstdaydate = p_firstdaydate,
                grpono = p_grpono,
                placementdate = p_placementdate,
               -- ageinweek = p_ageinweek,
                phasestatusid = p_phasestatusid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- change the status of layerplacementschedule shed as 1045 = 'processed'
    UPDATE layerplacementschedule SET statusid = 1045 WHERE id = p_placementscheduleid;
    

    UPDATE layerbatch SET statusid = 982 WHERE id = p_layerbatchid;
    
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'layerbatchplacement', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchplacement_search`(
 IN p_companyid INT
)
BEGIN
    
    SELECT
			LBP.id, 
			LBP.locationid,
            L.locationname,
			LBP.layerbatchid,
            LB.batchname,
			DATE_FORMAT(LBP.firstdaydate,'%d/%m/%Y') as firstdaydate,
			LBP.grpono,
			DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as placementdate,
			-- BBP.ageinweek,
			LBP.phasestatusid,
            LP.phasename as phasestatus,
			LBP.companyid,
            LBP.placementscheduleid
            
         
	FROM
		layerbatchplacement LBP
        LEFT JOIN layerphase LP ON LBP.phasestatusid = LP.id
        LEFT JOIN location L ON LBP.locationid = L.id
        LEFT JOIN layerbatch LB ON LBP.layerbatchid = LB.id
   	
	WHERE
		LBP.companyid = p_companyid
        
	ORDER BY LBP.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchplacement_select`(IN p_id INT
)
BEGIN

	SELECT
			LBP.id, 
			LBP.locationid,
            L.locationname,
			LBP.layerbatchid,
			LB.batchname,
			DATE_FORMAT(LBP.firstdaydate,'%d/%m/%Y') as firstdaydate,
			LBP.grpono,
			DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as placementdate,
			-- BBP.ageinweek,
			LBP.phasestatusid,
            R.refname,
			LBP.companyid,
            LBP.placementscheduleid
            
         
	FROM
		layerbatchplacement LBP
        LEFT JOIN `reference` R ON LBP.phasestatusid = R.id
        LEFT JOIN location L ON LBP.locationid = L.id
        LEFT JOIN layerbatch LB ON LBP.breederbatchid =  LB.id
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND LBP.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchtransferdetails_bylayerbatchtransferid`(
    IN p_shedid INT(11),
    IN p_layerbatchid INT
)
BEGIN

	SET @shedqty = 0;
	SET @transferedqty = 0;
    SET @flag1 = NULL;
    
    SELECT SUM(quantity) INTO @shedqty FROM layerbatchtransferdetail WHERE toshedid = p_shedid;

	
	SELECT
		LBB.id,
		LBB.layershedid,
		LS.shedname,
		LBB.layershedlineid,
		LSL.linename,
		LBB.itemid,
		LBB.quantity,
		@shedqty AS totalshedqty
   
	FROM
		layerbatchbalance LBB
		LEFT JOIN layershed LS ON LS.id = LBB.layershedid
		LEFT JOIN layershedline LSL ON LSL.id = LBB.layershedlineid
	
	WHERE
		LBB.layerbatchid = p_layerbatchid
		 AND  LBB.layershedid = p_shedid 
         AND LBB.quantity != 0;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchtransferdetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM layerbatchtransferdetail WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchtransferdetail_save`(
    IN p_id INT,
    IN p_layerbatchtransferid INT(11),
    IN p_toshedid INT(11),
    IN p_fromlineid INT(11),
    IN p_tolineid INT(11),
    IN p_itemid INT(11),
	IN p_quantity INT,
    IN p_companyid INT,
    In p_userid INT,
    IN p_layerbatchid INT,
    IN p_fromshedid INT,
	IN p_nonproductivebird TINYINT(4),
    OUT out_id INT
)
BEGIN

	SET SQL_SAFE_UPDATES=0;
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
    IF(p_quantity > 0)THEN
        
		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL,(SELECT transferid FROM layerbatchtransfer WHERE id = p_layerbatchtransferid),
            (SELECT warehouseid FROM layershed WHERE id = p_toshedid), 
            (SELECT warehousebinid FROM layershed WHERE id = p_toshedid),
            p_itemid, (SELECT itemname FROM item WHERE id = p_itemid),
			p_quantity, p_quantity, 
			(SELECT refname FROM `reference` WHERE id = (SELECT itemunitid FROM item WHERE id = p_itemid)),
			(SELECT layerbatchid FROM layerbatchtransfer WHERE id = p_layerbatchtransferid),
            p_userid, p_companyid, @out_transferdetailid
		);
    
		INSERT INTO layerbatchtransferdetail (
				id,
				layerbatchtransferid,
                toshedid,
				fromlineid,
                tolineid,
                itemid,
				quantity,
                nonproductivebird,
				companyid)
                
			VALUES (
				p_id,
                p_layerbatchtransferid,
                p_toshedid,
                p_fromlineid,
                p_tolineid,
                p_itemid,
                p_quantity,
                p_nonproductivebird,
                p_companyid);
        
        -- update layerbatchbalance table to reflect live batch quantity
		UPDATE layerbatchbalance
        SET 
			updateddate = now(),
            quantity = (quantity - p_quantity)
		WHERE
			layerbatchid = p_layerbatchid AND
            layershedid = p_fromshedid AND
            layershedlineid = p_fromlineid AND
            itemid = p_itemid AND
            quantity != 0;
                
	END IF;
    ELSE
		IF(p_quantity > 0) THEN
			UPDATE layerbatchtransferdetail
				SET
					layerbatchtransferid = p_layerbatchtransferid,
                    toshedid = p_toshedid,
					fromlineid = p_fromlineid,
					tolineid = p_tolineid,
					itemid = p_itemid,
					quantity = p_quantity,
					nonproductivebird = p_nonproductivebird,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				SET @action = 'UPDATE'; 
                
		-- update layerbatchbalance table to reflect live batch quantity
		UPDATE layerbatchbalance
        SET 
			updateddate = (SELECT transferdate FROM layerbatchtransfer WHERE id = p_layerbatchtransferid),
            quantity = (quantity - p_quantity)
		WHERE
			layerbatchid = p_layerbatchid AND
            layershedid = p_fromshedid AND
            layershedlineid = p_fromlineid AND
            itemid = p_itemid AND
			quantity != 0;
            
		END IF;
        
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
 
	-- update toshed status as 924 = 'Batch Started'
    UPDATE layershed SET statusid = 924 WHERE id = p_toshedid;
  
   IF (p_quantity > 0) THEN
	  SET @out_balanceid = NULL;
	  CALL spc_layerbatchbalance_save(
		NULL, (SELECT transferdate FROM layerbatchtransfer WHERE id = p_layerbatchtransferid),
        p_layerbatchid, p_toshedid, p_tolineid, p_itemid,
		 p_quantity,'transfer', p_companyid, 
		p_userid, @out_balanceid
	  );
      
	END IF; 
 
   
   SET @qty = 0;
   SET @transferqty = 0;
   select SUM(quantity) INTO @qty
    FROM layerbatchbalance
    WHERE 
    layershedid = (SELECT fromshedid FROM layerbatchtransfer WHERE id = p_layerbatchtransferid);
    
    IF(@qty = 0) THEN
		UPDATE layershed SET statusid = 921 WHERE id = (SELECT fromshedid FROM layerbatchtransfer WHERE id = p_layerbatchtransferid);
    END IF;

	-- record log
   CALL spc_commonlog_save(p_companyid, 'layerbatchtransferdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchtransferdetail_search`(
    IN p_layerbatchtransferid INT
)
BEGIN
    
    SELECT
			LBTD.id,
			LBTD.layerbatchtransferid,
			LBT.fromshedid,
            LBTD.toshedid,
            LS2.shedname as toshedname,
			LBTD.fromlineid,
            LBTD.tolineid,
            LSL1.linename,
            LSL2.linename as tolinename,
            LBTD.itemid,
			LBTD.quantity,
			LBTD.companyid
         
    FROM
		layerbatchtransferdetail LBTD
        LEFT JOIN layerbatchtransfer LBT ON LBT.id = LBTD.layerbatchtransferid
        LEFT JOIN layershedline LSL1 ON LSL1.id = LBTD.fromlineid
        LEFT JOIN layershedline LSL2 ON LSL2.id = LBTD.tolineid
     --   LEFT JOIN breedershed BS1 ON BS1.id = BBTD.fromshedid
        LEFT JOIN layershed LS2 ON LS2.id = LBTD.toshedid
   	
	WHERE
		LBTD.layerbatchtransferid = p_layerbatchtransferid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchtransferdetail_select`(
    IN p_id INT
)
BEGIN
    
    SELECT
			LBTD.id,
			LBTD.layerbatchtransferid,
			LBTD.fromshedid,
            LS1.shedname,
			LBTD.fromlineid,
            LBTD.tolineid,
            LSL1.linename,
            LSL2.linename,
            LBTD.itemid,
			LBTD.quantity,
			LBTD.companyid
         
    FROM
		layerbatchtransferdetail LBTD
        LEFT JOIN layershed LS1 ON LS1.id = LBTD.fromshedid
        LEFT JOIN layershedline LSL1 ON LSL1.id = LBTD.fromlineid
        LEFT JOIN layershedline LSL2 ON LSL2.id = LBTD.tolineid
   	
	WHERE
		LBTD.id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchtransferlist_search`(
	IN p_locationid INT,
    IN p_batchid INT,
    IN p_from_date date,
	IN p_to_date date
)
BEGIN
    
    SELECT         
            LBT.id, 
			LBT.fromlocationid,
            L1.locationname as fromlocationname,
			LBT.tolocationid,
            L2.locationname as tolocationname,
			DATE_FORMAT(LBT.transferdate,'%d/%m/%Y') as transferdate,
			LBT.layerbatchid,
            LB.batchname,
			LBT.phasestatusid,
			LBT.isshedtransfer,
			LBT.companyid,
            LBT.fromshedid,
            LS.shedname as fromshedname,
            LBT.isshedtransfer
            
         
	FROM
		layerbatchtransfer LBT
        LEFT JOIN layerbatch LB ON LB.id = LBT.layerbatchid
        LEFT JOIN layershed LS ON LS.id = LBT.fromshedid
        LEFT JOIN location L1 ON L1.id = LBT.fromlocationid
        LEFT JOIN location L2 ON L2.id = LBT.fromlocationid
   	
	WHERE
		(LBT.fromlocationid = p_locationid OR LBT.tolocationid = p_locationid) AND
        LBT.layerbatchid = p_batchid AND
        (LBT.transferdate BETWEEN p_from_date AND p_to_date)
        
	ORDER BY LBT.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchtransfer_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM layerbatchtransferdetail WHERE layerbatchtransferid = p_id;
	DELETE FROM layerbatchtransfer WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchtransfer_save`(
    IN p_id INT(11),
    IN p_fromlocationid INT(11),
    IN p_tolocationid INT(11),
    IN p_fromshedid INT(11),
	IN p_transferdate DATE,
    IN p_layerbatchid INT(11),
    IN p_phasestatusid INT(11),
    IN p_isshedtransfer TINYINT,
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT,
    OUT out_transferid INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerbatchtransfer (
				id, 
                fromlocationid,
                tolocationid,
                fromshedid,
                transferdate,
                layerbatchid,
                phasestatusid,
                isshedtransfer,
                companyid)
			
            VALUES (
				p_id, 
                p_fromlocationid,
                p_tolocationid,
                p_fromshedid,
                p_transferdate,
                p_layerbatchid,
                p_phasestatusid,
                p_isshedtransfer,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE layerbatchtransfer
			SET 
                fromlocationid = p_fromlocationid,
                tolocationid = p_tolocationid,
                fromshedid = p_fromshedid,
                transferdate = p_transferdate,
                layerbatchid = p_layerbatchid,
                phasestatusid = p_phasestatusid,
                isshedtransfer = p_isshedtransfer,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    	CALL spc_materialtransfer_save(
			NULL, 505, 505, 582,p_transferdate, p_transferdate,NULL,
			(SELECT warehouseid FROM layershed WHERE id = p_fromshedid),
            (SELECT warehousebinid FROM layershed WHERE id = p_fromshedid), 624, 
            p_layerbatchid, p_layerbatchid, 
            NULL, p_companyid, p_userid, out_transferid
		);
    update layerbatchtransfer 
        SET transferid = out_transferid WHERE id = out_id;
    
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'layerbatchtransfer', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchtransfer_search`(

    IN p_companyid INT
)
BEGIN
    
    SELECT         
            LBT.id, 
			LBT.fromlocationid,
            L1.locationname as fromlocationname,
			LBT.tolocationid,
            L2.locationname as tolocationname,
			DATE_FORMAT(LBT.transferdate,'%d/%m/%Y') as transferdate,
			LBT.layerbatchid,
            LB.batchname,
			LBT.phasestatusid,
			LBT.isshedtransfer,
			LBT.companyid,
            LBT.fromshedid,
            LS.shedname as fromshedname,
            LBT.isshedtransfer
            
         
	FROM
		layerbatchtransfer LBT
        LEFT JOIN layerbatch LB ON LB.id = LBT.layerbatchid
        LEFT JOIN layershed LS ON LS.id = LBT.fromshedid
        LEFT JOIN location L1 ON L1.id = LBT.fromlocationid
        LEFT JOIN location L2 ON L2.id = LBT.fromlocationid
   	
	WHERE
		LBT.companyid = p_companyid
        
	ORDER BY LBT.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchtransfer_select`(
    IN p_id INT
)
BEGIN
    
    SELECT         
            LBT.id, 
			LBT.fromlocationid,
			LBT.tolocationid,
            LBT.fromshedid,
            LS1.shedname,
			DATE_FORMAT(LBT.transferdate,'%d/%m/%Y') as transferdate,
			LBT.layerbatchid,
			LBT.phasestatusid,
			LBT.isshedtransfer,
			LBT.companyid
            
         
	FROM
		layerbatchtransfer LBT
        LEFT JOIN layershed LS1 ON LS1.id = LBT.fromshedid
   	
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND LBT.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchvaluation_report`(
	IN p_layerbatchid INT(11),
    IN p_companyid INT(11)
)
BEGIN
	
	SET @@sql_mode = ' ';
	
    SET @amortizationdate = null;
	SELECT amortizationdate INTO @amortizationdate
    FROM layeramortization
    WHERE layerbatchid = p_layerbatchid;
    
    SET @placementdate = null;
    SELECT fnc_getplacementdate_layer(p_layerbatchid,p_companyid) INTO @placementdate;
    
    SET @maleitemid = null;
    SET @femaleitemid = null;
    
    SELECT itemid
    INTO @femaleitemid
    FROM layerbatch
    WHERE id = p_layerbatchid;
    
    SET @femaleopeningbalance = 0;
    
	SELECT IFNULL(fnc_layerbatchwise_birdliveqty(p_layerbatchid, @femaleitemid, @placementdate, p_companyid),0) INTO @femaleopeningbalance;
    
    SET @birdcost = 0;
	IF EXISTS(SELECT id FROM layerbatchplacement WHERE layerbatchid = p_layerbatchid) THEN
		SELECT (IFNULL(PID.unitprice,0) * IFNULL(PID.quantity,0)) INTO @birdcost FROM
		layerbatchplacement LBP
		INNER JOIN layerbatchplacementdetail LBPD ON LBPD.layerbatchplacementid = LBP.id 
		INNER JOIN purchaseinvoice PI ON PI.grpono = LBP.grpono
		INNER JOIN purchaseinvoicedetail PID ON PI.id = PID.purchaseinvoiceid AND PID.itemid = @femaleitemid
		WHERE LBP.layerbatchid = p_layerbatchid 
		AND LBP.companyid = p_companyid
        GROUP BY LBP.id;
	ELSE
		SELECT (IFNULL(LMF.rate,0) * IFNULL(LMF.placeqty,0)) INTO @birdcost
		FROM layer_batchopening_balance LBO
		INNER JOIN layer_batchbirdopeningbalance_detail LMF ON LBO.id = LMF.layerbatchopeningid AND LMF.itemid = @femaleitemid
		WHERE LBO.layerbatchid = p_layerbatchid AND LBO.companyid = p_companyid;
	END IF;
    
    SET @firsttransactiondate = null;
    SET @lasttransactiondate = null;
    
    SELECT transactiondate INTO @firsttransactiondate FROM layerdailytransaction WHERE layerbatchid = p_layerbatchid LIMIT 1;
    
    SELECT transactiondate INTO @lasttransactiondate FROM layerdailytransaction WHERE layerbatchid = p_layerbatchid ORDER BY id DESC LIMIT 1;
    
    DROP TEMPORARY TABLE IF EXISTS openingvaluation;
    CREATE TEMPORARY TABLE openingvaluation
    SELECT LDT.transactiondate,
			(IFNULL(fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,@firsttransactiondate,DATE_SUB(LDT.transactiondate, INTERVAL 1 DAY),1149),0) + 
			IFNULL(fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,@firsttransactiondate,DATE_SUB(LDT.transactiondate, INTERVAL 1 DAY),1150),0)+
			IFNULL(fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,@firsttransactiondate,DATE_SUB(LDT.transactiondate, INTERVAL 1 DAY),1151),0)+
			IFNULL(fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,@firsttransactiondate,DATE_SUB(LDT.transactiondate, INTERVAL 1 DAY),1152),0) + 
            IFNULL(fun_overhed_exp(p_layerbatchid,725,LDT.transactiondate,p_companyid),0) + @birdcost) as openingval,
            (IFNULL(fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,LDT.transactiondate,LDT.transactiondate,1149),0) + 
			IFNULL(fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,LDT.transactiondate,LDT.transactiondate,1150),0)+
			IFNULL(fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,LDT.transactiondate,LDT.transactiondate,1151),0)+
			IFNULL(fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,LDT.transactiondate,LDT.transactiondate,1152),0)+
            IFNULL(fun_overhed_exp(p_layerbatchid,725,LDT.transactiondate,p_companyid),0)) as todaysval
	FROM layerdailytransaction LDT
    WHERE LDT.layerbatchid = p_layerbatchid;
           
	SET @amortizationcost = 0;
	SELECT IFNULL(AM.amortizationvalueofbird,0) INTO @amortizationcost
    FROM layeramortization AM WHERE AM.layerbatchid = p_layerbatchid;
    
    DROP TEMPORARY TABLE IF EXISTS pulleteggstbl;
    CREATE TEMPORARY TABLE pulleteggstbl
    SELECT collectiondate, IFNULL(quantity,0) as pulleteggs
    FROM layereggsdistributiondetail
    WHERE layerbatchid = p_layerbatchid AND itemtypeid = 1132;
    
    SELECT DATE_FORMAT(LDT.transactiondate,'%d/%m/%Y') as transactiondate, FORMAT(@birdcost,2) as birdcost,
		   IFNULL(fnc_layerbatchwise_birdliveqty(p_layerbatchid, (select itemid from layerbatch WHERE id = p_layerbatchid), LDT.transactiondate, p_companyid),0) as femaleopeningbalance,
		   TRUNCATE(((DATEDIFF(LDT.transactiondate,@placementdate))/7),0) as ageinweek,
           TRUNCATE(((DATEDIFF(LDT.transactiondate,@placementdate))%7),0) as ageindays,
           FORMAT(IFNULL(fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,LDT.transactiondate,LDT.transactiondate,1149),0),2) as feedcost,
		   FORMAT((fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,LDT.transactiondate,LDT.transactiondate,1150) +
           fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,LDT.transactiondate,LDT.transactiondate,1151)
		   + fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,LDT.transactiondate,LDT.transactiondate,1152)),2) as medicinecost,
		   FORMAT(IFNULL(fun_overhed_exp(p_layerbatchid,725,LDT.transactiondate,p_companyid),0),2) as overheadexp,
           IFNULL(PE.pulleteggs,0) as totalcollectedPE,
           FORMAT(OP.openingval,2) as openingvaluation,
           FORMAT((OP.openingval+OP.todaysval),2) as todaysvaluation,
		   FORMAT(IFNULL((OP.todaysval / IFNULL(PE.pulleteggs,0)),0),2) as costperegg,
		   FORMAT(@amortizationcost,2) as amortizationcostperegg,
		   FORMAT(IFNULL(((OP.todaysval / IFNULL(PE.pulleteggs,0)) + IFNULL(@amortizationcost,0)),0),2) as productioncostperegg,
           FORMAT(IFNULL((((OP.todaysval / IFNULL(PE.pulleteggs,0)) + IFNULL(@amortizationcost,0)) * IFNULL(PE.pulleteggs,0)),0),2) as eggsvaluation,
		   FORMAT(((OP.todaysval+OP.openingval) - IFNULL((((OP.todaysval / IFNULL(PE.pulleteggs,0)) + IFNULL(@amortizationcost,0)) * IFNULL(PE.pulleteggs,0)),0)),2) as currentvaluation,
           FORMAT((((OP.todaysval+OP.openingval) - IFNULL((((OP.todaysval / IFNULL(PE.pulleteggs,0)) + IFNULL(@amortizationcost,0)) * IFNULL(PE.pulleteggs,0)),0)) / (IFNULL(fnc_layerbatchwise_birdliveqty(p_layerbatchid, (select itemid from layerbatch WHERE id = p_layerbatchid), LDT.transactiondate, p_companyid),0))),2) as costperbird,
		  -- IFNULL(BLW.totaldeliveredqty,0) as birdsold,
          -- FORMAT(IFNULL(BLW.totaldeliverycost,0),2) as birdsoldamount,   
          0 as birdsold,
          0 as birdsoldamount,
		   FORMAT((((OP.todaysval+OP.openingval) - IFNULL((((OP.todaysval / IFNULL(PE.pulleteggs,0)) + IFNULL(@amortizationcost,0)) * IFNULL(PE.pulleteggs,0)),0))),2) as finalflockvaluation
    FROM layerdailytransaction LDT
    LEFT JOIN openingvaluation OP ON OP.transactiondate = LDT.transactiondate
    LEFT JOIN pulleteggstbl PE ON PE.collectiondate = LDT.transactiondate
   -- LEFT JOIN breeder_liftingweight BLW ON BLW.batchid = LDT.layerbatchid
    WHERE LDT.layerbatchid = p_layerbatchid
    
    ORDER BY LDT.transactiondate;
         
         
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchwise_productiondate`(
 In p_layerbatchid INT,
  IN p_shedid INT
  )
BEGIN
  
  	SELECT DATE_FORMAT(productionstartdate,'%d/%m/%Y') as productionstartdate
        from layereggscollection 
        
        where
           layerbatchid =  p_layerbatchid
           AND shedid = p_shedid
	order by id ASC limit 1;
  -- DATE_FORMAT(IFNULL(fnc_productionstartdate(p_breederbatchid),noW()),'%d/%m/%Y') as productionstartdate;
  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatchwise_profitandloss`(
	IN p_layerbatchid INT(11),
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT
)
BEGIN

	SET @@sql_mode = ' ';
	SET @productionstock = 0;
	-- collected eggs
	SELECT IFNULL(SUM(quantity),0) INTO @productionstock
	FROM layereggsdistributiondetail
	WHERE layerbatchid = p_layerbatchid
	AND collectiondate between p_fromdate AND p_todate;
    
    SET @eggrate = 0;
    select 
	((fnc_calculate_consumptioncost(IFNULL(group_concat(DISTINCT LDT.issueid),0), IFNULL(group_concat(DISTINCT LDC.itemid),0), LDT.transactiondate)
	+ IFNULL(LAM.requiredbirdvalue,0)) / IFNULL(SUM(LED.quantity),0)) INTO @eggrate
    FROM layerdailyconsumption LDC
	LEFT JOIN layerdailytransaction LDT ON LDT.id = LDC.layerdailytransactionid
	LEFT JOIN layershed LS ON LS.id = LDT.shedid
	LEFT JOIN layereggscollection LEC ON LEC.layerbatchid = LDT.layerbatchid
    LEFT JOIN layereggsdistributiondetail LED ON LED.layerbatchid = LEC.layerbatchid
    LEFT JOIN layeramortization LAM ON LAM.layerbatchid = LED.layerbatchid
	WHERE LDT.transactiondate >= LEC.productionstartdate
	AND LDT.transactiondate BETWEEN p_fromdate AND p_todate
	AND LDT.layerbatchid = p_layerbatchid;
    
    SET @eggsitemgroupids = null;
    SET @labourcharge = 0;
    SET @overheadcost = 0;
    SELECT CONCAT(IFNULL(eggsitemgroupids,0),",", IFNULL(defaultpulleteggsitemid,0),",", IFNULL(defaultcrackedeggsitemid,0),",", IFNULL(defaulttableeggsitemid,0),",", IFNULL(defaultdamageeggsitemid,0)),
    IFNULL(labourcharge,0), IFNULL(overheadcost,0)
    INTO @eggsitemgroupids, @labourcharge, @overheadcost
    FROM layersetting;
    
    
	SET @warehousebinids = null;
	SELECT GROUP_CONCAT(DISTINCT LS.warehousebinid) INTO @warehousebinids
	FROM layerbatchbalance LBB
	LEFT JOIN layershed LS ON LS.id = LBB.layershedid
	WHERE LBB.layerbatchid = p_layerbatchid;
    
    -- sold eggs
    SET @soldeggstock = 0;
    SET @soldeggamount = 0;
	SELECT SUM(quantity), (SUM(quantity) * rate) 
    INTO @soldeggstock, @soldeggamount
	FROM salesdeliverydetail SDD
	LEFT JOIN salesdelivery SD ON SD.id = SDD.salesdeliveryid
	LEFT JOIN item I ON I.id = SDD.itemid 
	WHERE isbird = 0
	AND FIND_IN_SET(I.itemgroupid, @eggsitemgroupids)
    AND deliverydate BETWEEN p_fromdate AND p_todate
    AND FIND_IN_SET(warehousebinid,@warehousebinids);

	-- bird sold
	SET @soldbirdstock = 0;
    SET @soldbirdamount = 0;
	SELECT SUM(quantity), (SUM(quantity) * rate) 
    INTO @soldbirdstock, @soldbirdamount
	FROM salesdeliverydetail SDD
	LEFT JOIN salesdelivery SD ON SD.id = SDD.salesdeliveryid 
	WHERE isbird = 1
    AND deliverydate BETWEEN p_fromdate AND p_todate
    AND FIND_IN_SET(warehousebinid,@warehousebinids);

	SET @birdplaceqty = 0;
    SET @itemid = null;
	SELECT IFNULL(fnc_layerchicks_placementqty(LB.id,p_companyid,LB.itemid),0),
		   LB.itemid
    INTO @birdplaceqty, @itemid
    FROM layerbatch LB
	WHERE LB.id = p_layerbatchid;

	DROP TEMPORARY TABLE IF EXISTS expenses;
    CREATE TEMPORARY TABLE expenses(particulars VARCHAR(200), amount VARCHAR(200));
    
    INSERT INTO expenses VALUES("Chicks Placement Date", DATE_FORMAT(fnc_getplacementdate_layer(p_layerbatchid, p_companyid),'%d/%m/%Y'));
    INSERT INTO expenses VALUES("Feed Cost", FORMAT(fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,p_fromdate,p_todate,1149),2));
    INSERT INTO expenses VALUES("Medicine Cost", FORMAT((fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,p_fromdate,p_todate,1150) + 
		   fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,p_fromdate,p_todate,1151) +
           fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,p_fromdate,p_todate,1152)),2));
    INSERT INTO expenses VALUES("Chicks Cost", FORMAT((IFNULL(fnc_layerchicks_placementqty(p_layerbatchid,p_companyid,@itemid),0) * IFNULL(fnc_layerchicks_purchasecost(p_layerbatchid,p_companyid,@itemid),0)),2));
    INSERT INTO expenses VALUES("Administration Cost",FORMAT(((@birdplaceqty * @labourcharge) + (@birdplaceqty * @overheadcost)),2));
    INSERT INTO expenses VALUES("Destroyed Eggs Cost",0);
    INSERT INTO expenses VALUES("","");
    INSERT INTO expenses VALUES("","");
    INSERT INTO expenses VALUES("","");
    INSERT INTO expenses VALUES("","");
    INSERT INTO expenses VALUES("","");
    
    SELECT * FROM expenses;
    
    SET @totalexpenses = 0;
    SELECT 
		   (fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,p_fromdate,p_todate,1149) +
		   (fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,p_fromdate,p_todate,1150) + 
		   fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,p_fromdate,p_todate,1151) +
           fnc_calculate_layerconsumptioncost_byconsumptiontype(p_layerbatchid,p_fromdate,p_todate,1152)) +
           (IFNULL(fnc_layerchicks_placementqty(LB.id,p_companyid,LB.itemid),0) * IFNULL(fnc_layerchicks_purchasecost(LB.id,p_companyid,LB.itemid),0)) +
		   ((@birdplaceqty * @labourcharge) + (@birdplaceqty * @overheadcost))) INTO @totalexpenses
	FROM layerbatch LB
	WHERE LB.id = p_layerbatchid;
    
    DROP TEMPORARY TABLE IF EXISTS income;
    CREATE TEMPORARY TABLE income(particulars VARCHAR(200), amount VARCHAR(200));
    
    INSERT INTO income VALUES("Flock cull's Date",DATE_FORMAT(fnc_getplacementdate(p_layerbatchid, p_companyid),'%d/%m/%Y'));
    INSERT INTO income VALUES("Total Eggs Collected",@productionstock);
    INSERT INTO income VALUES("Total Eggs Sold",IFNULL(@soldeggstock,0));
    INSERT INTO income VALUES("Total Eggs Sold Amount",IFNULL(FORMAT(@soldeggamount,2),0));
	INSERT INTO income VALUES("Avg. Selling Rate/Egg",IFNULL(FORMAT((@soldeggamount/@soldeggstock),2),0));
    INSERT INTO income VALUES("Prod. Cost/Egg",FORMAT(IFNULL(@eggrate,0),2));
    INSERT INTO income VALUES("Total Eggs Module Out",0);
    INSERT INTO income VALUES("Avg. Module Out Rate/Egg",0);
	INSERT INTO income VALUES("Total Bird Sold",IFNULL(@soldbirdstock,0));
    INSERT INTO income VALUES("Avg. Sale Rate/Bird",IFNULL(FORMAT(@soldbirdamount,2),0));
    INSERT INTO income VALUES("Total Bird Sold Amount",IFNULL(FORMAT((@soldbirdamount/@soldbirdstock),2),0));
    
    SELECT * FROM income;
    
    SET @totalincome = 0;
    SELECT
           IFNULL((@soldeggamount + 
           @soldbirdamount),0) INTO @totalincome;

	SELECT FORMAT(@totalincome,2) as totalincome,
		   FORMAT(@totalexpenses,2) as totalexpenses,
           FORMAT(ABS((IFNULL(@totalincome, 0) - IFNULL(@totalexpenses, 0))),2) as netporl;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatch_birdcost`(
	IN p_layerbatchid INT,
	IN p_transactiondate Date,
	IN p_companyid INT)
BEGIN
SET @@sql_mode = ' ';

SET @sql = null;
SET @femaleitemid = null;
SET @purvalue = null;
SET @femaleliveqty = null;
SET @ohexp = null;
SET @otexp = null;
SET @amortizationvalue = null;
SET @feedcost= null;
SET @medicost = null;
SET @vaccost = null;
SET @vitmcost = null;
SET @salesvalue= null;
SET @nonprodbird = null;
SET @p_placementdate = null;
SET @femalepurchasecost= null;
SET @femaleplacedqty = null;
SET  @birdcoststd = null;
SET @birdcostnonprodbird = null;
SET @applynonproductive = null;
SET @ageindays = 0;
SET @p_transactiondate = date_add(p_transactiondate, INTERVAL 1 DAY);
 SELECT birdcoststd,birdcostnonprodbird INTO @birdcoststd,@birdcostnonprodbird FROM layersetting WHERE companyid = p_companyid limit 1;
 SELECT fnc_getlayerplacementdate(p_layerbatchid,p_companyid) INTO @placementdate;
 SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@placementdate)/7)),0) INTO @ageinweek;
 SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@placementdate)%7)),0) INTO @ageindays;
   if(@birdcoststd = 1) then
			SET @applynonproductive = 0;
	END IF;
	if(@birdcostnonprodbird = 1 and @ageinweek>=19 and @ageindays>0) then
			SET @applynonproductive = 1;
		ELSE
			SET @applynonproductive = 0;
		END IF;

SELECT  itemid INTO @femaleitemid FROM layerbatch WHERE id = p_layerbatchid;
SELECT  
		fnc_chicks_purchasecost_layer(p_layerbatchid,p_companyid,@femaleitemid),
	    fnc_layerchicks_placementqty(p_layerbatchid,p_companyid,@femaleitemid),
		fnc_layerbatchwise_birdliveqty(p_layerbatchid,@femaleitemid,@p_transactiondate,p_companyid),
		fun_overhed_exp(p_layerbatchid,725,p_transactiondate,p_companyid),
		fnc_getgoodsissue(p_layerbatchid,725,p_transactiondate),
		fun_amortizatiobvalue_forlayer(p_layerbatchid,p_transactiondate),
		fnc_consumption_wise_cost_layer(p_layerbatchid,p_transactiondate,1149,p_companyid),
		fnc_consumption_wise_cost_layer(p_layerbatchid,p_transactiondate,1150,p_companyid),
		fnc_consumption_wise_cost_layer(p_layerbatchid,p_transactiondate,1151,p_companyid),
		fnc_consumption_wise_cost_layer(p_layerbatchid,p_transactiondate,1152,p_companyid),
		fnc_layerbatchwise_salesvalue(p_layerbatchid,725,p_transactiondate,p_companyid)
	INTO 
	@femalepurchasecost,@femaleplacedqty,@femaleliveqty,@ohexp,@otexp,@amortizationvalue,@feedcost,@medicost,@vaccost,@vitmcost,@salesvalue;
    

 SELECT 
 -- Need to ask 
  spc_getbatchwise_nonproductive_bird_layer(p_layerbatchid,p_companyid,p_transactiondate,@femaleitemid) INTO @nonprodbird; -- This Sp iS not exist
  SELECT (@femalepurchasecost*@femaleplacedqty) INTO @purvalue;
  if(@applynonproductive = 1)THEN
  SELECT ROUND(@purvalue,3) as purvalue ,(@femaleliveqty) as liveqty,((@femaleliveqty)-(@nonprodbird)) as productivebird,(@nonprodbird)as nonprobird,
		 ROUND(@ohexp,3) as ohexp, ROUND(@otexp,3) as otexp, ROUND(@amortizationvalue,3) as amortizationvalue, ROUND(@feedcost,3) as feedcost, ROUND(@medicost,3) as medicost, ROUND(@vaccost,3) as vaccost, ROUND(@vitmcost,3) as vitmcost, ROUND(@salesvalue,3) as salesvalue,
		 ROUND((@purvalue+@feedcost+@medicost+@vaccost+@vitmcost+@ohexp+@otexp),3) as totalvalue, ROUND(((@purvalue+@feedcost+@medicost+@vaccost+@vitmcost+@ohexp+@otexp)-(@amortizationvalue+@salesvalue)),3) as balancevalue,ROUND((@amortizationvalue+@salesvalue),3) as income;
        
	END IF;
    IF(@applynonproductive = 0)THEN
     SELECT  ROUND(@purvalue,3) as purvalue ,(@femaleliveqty) as liveqty,(@femaleliveqty) as productivebird,(@nonprodbird)as nonprobird,
		  ROUND(@ohexp,3) as ohexp, ROUND(@otexp,3) as otexp, ROUND(@amortizationvalue,3) as amortizationvalue, ROUND(@feedcost,3) as feedcost, ROUND(@medicost,3) as medicost, ROUND(@vaccost,3) as vaccost, ROUND(@vitmcost,3) as vitmcost, ROUND(@salesvalue,3) as salesvalue,
		 ROUND((@purvalue+@feedcost+@medicost+@vaccost+@vitmcost+@ohexp+@otexp),3) as totalvalue, ROUND(((@purvalue+@feedcost+@medicost+@vaccost+@vitmcost+@ohexp+@otexp)-(@amortizationvalue+@salesvalue)),3) as balancevalue,ROUND((@amortizationvalue+@salesvalue),3) as income;
END IF;
            
         
            --  eggscolection
         
SELECT fnc_getlayerplacementdate(p_layerbatchid,p_companyid) INTO @p_placementdate;
 
DROP TEMPORARY TABLE IF EXISTS tepmeggscollection;
CREATE TEMPORARY TABLE tepmeggscollection
(itemid INT(11),
itemname VARCHAR(200),
Production_Week INT,
Week_No INT,
quantity VARCHAR(200));

INSERT INTO tepmeggscollection 
SELECT LED.itemid,REPLACE(I.itemname, ' ', '-')as itemname,
TRUNCATE (((DATEDIFF(LEC.productionstartdate,@p_placementdate)/7)+1),0)  as proageinweeks,
TRUNCATE (((DATEDIFF(LEC.collectiondate,@p_placementdate)/7)+1),0)  as ageinweeks,
LED.quantity
 FROM layereggscollection LEC
 Inner JOIN layereggsdistributiondetail LED ON LED.eggscollectionid = LEC.id 
 LEFT JOIN item I ON I.id = LED.itemid
 WHERE LEC.layerbatchid = p_layerbatchid
 AND LEC.collectiondate between @p_placementdate AND p_transactiondate;
 
  -- select * from tepmeggscollection;
 
 
  
  SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tepmeggscollection;
  -- select * from tepmeggscollection;

SET @sql = CONCAT('SELECT Production_Week,Week_No,', @sql, ' 
                  FROM tepmeggscollection 
                   GROUP BY Week_No');
                   
-- select   @sql;  
               
if(@sql != null OR @sql != '') then
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
 end if;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatch_bylocation`(
    IN p_companyid INT(11),
	IN p_locationid VARCHAR(100)
    
)
BEGIN

SET @fromwarehouseid = null;
SET @fromwarehousename = null;


	SELECT LS.defaultwarehouseid, W1.warehousename 
    INTO 
    @fromwarehouseid, @fromwarehousename
    FROM layersetting LS
    LEFT JOIN warehouse W1 ON W1.id = LS.defaultwarehouseid
    WHERE LS.companyid = p_companyid;
    
    

	SELECT LB.id,
		   LB.batchname,
           LB.locationid,
           L.locationname,
           LB.statusid,
           LP.phasename as batchstatus,
           LB.warehouseid,
           W.warehousename,
           @fromwarehouseid as fromwarehouseid,
		   @fromwarehousename as fromwarehousename,
		   fnc_getlayerplacementdate(LB.id,p_companyid) as placementdate,
           R.refname as batchstatus
           
	FROM layerbatch LB
    LEFT JOIN location L ON L.id = LB.locationid
    LEFT JOIN layerphase LP ON LP.id = LB.statusid
    LEFT JOIN warehouse W ON W.id = LB.warehouseid
    LEFT JOIN layerbatchplacement LBP ON LB.id = LBP.layerbatchid
	LEFT JOIN `reference` R ON R.id =  LB.statusid
    
    WHERE FIND_IN_SET(LB.locationid,p_locationid)
    AND LB.companyid = p_companyid
    GROUP BY LB.id
    ORDER BY LB.id DESC;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatch_bystatusid`( 
    IN p_companyid INT,
    IN p_statusid INT
)
BEGIN
    
    SELECT
		LB.id,
        LB.locationid,
        L.locationcode,
        L.locationname,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        fnc_getlayerplacementdate(LB.id,p_companyid) as batchplacementdate,
        WB.bincode,
        WB.binname,
        LB.statusid,
        REF.refname as batchstatus
	
    FROM
		layerbatch LB
	
    LEFT JOIN location L ON LB.locationid = L.id
    LEFT JOIN warehouse W ON LB.warehouseid = W.id
    LEFT JOIN warehousebin WB on LB.binid = WB.id
    LEFT JOIN layerbatchplacement LP on LB.id = LP.layerbatchid
    INNER JOIN `reference` REF ON REF.id = LB.statusid
	
	WHERE
		LB.companyid = p_companyid AND
        LB.statusid = p_statusid
        
    GROUP BY LB.id
    ORDER BY LB.id DESC;
	END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatch_bywarehouseid`(
 IN p_companyid INT,
 IN p_warehouseid varchar(200)
 )
BEGIN 
SET @@sql_mode = ' ';

select  
LB.warehouseid,
LB.id as layerbatchid,
LB.batchname,
W.id,
W.warehousename 
from layerbatch LB
LEFT JOIN warehouse W ON LB.warehouseid = W.id
Where FIND_IN_SET(LB.warehouseid,p_warehouseid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatch_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM layerbatch WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatch_foramortization`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		LB.id,
        L.locationcode,
        L.locationname,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        WB.bincode,
        WB.binname,
        LB.statusid,
        REF.refname as batchstatus,
        DATE_FORMAT(fnc_getlayerplacementdate(LB.id, p_companyid),'%d/%m/%Y') as placementdate
	
    FROM
		layerbatch LB
	
    LEFT JOIN location L ON LB.locationid = L.id
    LEFT JOIN warehouse W ON LB.warehouseid = W.id
    LEFT JOIN warehousebin WB on LB.binid = WB.id
    LEFT JOIN `reference` REF ON REF.id = LB.statusid
	LEFT JOIN layeramortization LA ON LB.id = LA.layerbatchid
	
	WHERE
		LB.companyid = p_companyid
         AND LA.id is null 
		AND LB.statusid = 982
		-- AND CAST(BBP.placementdate AS DATE) >= CAST(DATE_ADD(now(), INTERVAL 168 DAY) AS DATE);
        
	ORDER BY LB.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatch_forbatchdetail`(
	IN p_companyid INT(11),
    IN p_layerbatchid INT(11)
    
	
)
BEGIN
	 SET @@sql_mode = '';
     SET @femaleitemid = NULL;
     SET @femaleitemname = NULL;
	 SET @femalebirdquantity = 0;
     SET @eggscollectionquantity = 0;
     SET @tableeggquantity = 0;
     SET @placementdate = NULL;
	 SET @livebatchdate = NULL;
     SET @phaseid = NULL;
     SET @batchstatusid = NULL;
     SET @batchname = NULL;
    
		SELECT 
			LB.itemid, I.itemname
			INTO 
             @femaleitemid, @femaleitemname
		FROM 
			layerbatch LB 
            INNER JOIN item I ON I.id = LB.itemid
		where LB.id = p_layerbatchid
		LIMIT 1;
        
        SELECT 
			LT.transactiondate
			INTO 
            @transactiondate
		FROM 
			layerdailytransaction LT
		WHERE LT.layerbatchid = p_layerbatchid
        ORDER BY LT.id DESC
		LIMIT 1;
        
        SELECT 
			LEC.collectiondate
			INTO 
            @collectiondate
		FROM 
			layereggscollection LEC
		WHERE LEC.layerbatchid = p_layerbatchid
        ORDER BY LEC.id DESC
		LIMIT 1;
       
       IF(@collectiondate IS NOT null) then
		   IF(@transactiondate>@collectiondate)THEN
			
				SELECT @transactiondate INTO @livebatchdate;
				
			ELSE
				SELECT @collectiondate INTO @livebatchdate;
				
			END IF;
			ELSE
			SELECT @transactiondate INTO @livebatchdate;
              if(@livebatchdate IS NULL)then
				SET @livebatchdate = now();
                end if;
        END IF;
       
    
     IF EXISTS(SELECT id FROM layerbatchplacement WHERE layerbatchid = p_layerbatchid AND id IS NOT NULL) THEN
		SELECT
				LBP.placementdate,
                LBP.firstdaydate,
                LBP.phasestatusid,
				SUM(LBPD.quantity),
                LB.statusid,
				REF.refname,
				LB.batchname 
			   INTO @placementdate,@firstdaydate,@phaseid,@femalebirdquantity,@batchstatusid,@batchstatus,@batchname
               FROM layerbatchplacement LBP
						
				INNER JOIN layerbatchplacementdetail LBPD ON LBP.id = LBPD.layerbatchplacementid
                INNER JOIN layerbatch LB ON LB.id = LBP.layerbatchid
                LEFT JOIN `reference` REF ON REF.id = LB.statusid
				WHERE LBP.layerbatchid = p_layerbatchid AND LBP.companyid = p_companyid AND
				LBPD.itemid = @femaleitemid  group by LBP.layerbatchid;
					
		ELSE
			SELECT
		    LBO.batchplacementdate,
            LBO.firstdaydate,
			LBO.phasestatusid,
		    SUM(LLO.lineqty),
			LB.statusid,
            REF.refname,
            LB.batchname INTO
			@placementdate,@firstdaydate,@phaseid, @femalebirdquantity,@batchstatusid,@batchstatus,@batchname
                    
			FROM layer_batchlocationwiseopening_detail LLO
				INNER JOIN layer_batchopening_balance LBO ON LBO.id = LLO.layerbatchopeningid
				INNER JOIN layerbatch LB ON LB.id = LBO.layerbatchid
				LEFT JOIN `reference` REF ON REF.id = LB.statusid
				WHERE  LBO.layerbatchid = p_layerbatchid AND LLO.itemid = @femaleitemid  
			    group by LBO.layerbatchid;
		END IF;
		
		select sum(LECD.quantity) INTO @eggscollectionquantity from layereggscollection LEC 
		LEFT JOIN layereggscollectiondetail LECD ON LECD.eggscollectionid = LEC.id
        WHERE layerbatchid= p_layerbatchid;
        
        SELECT SUM(LEDD.quantity) INTO @tableeggquantity from layereggsdistributiondetail LEDD
        WHERE layerbatchid= p_layerbatchid AND LEDD.itemtypeid = 1129;
        
      SELECT fnc_layer_biologicalvalue(p_layerbatchid,@livebatchdate, @placementdate,p_companyid) INTO @biologicalvalue;
        
        select
			 
			   @femaleitemid as femaleitemid, 
               @femaleitemname as femaleitemname ,
               @femalebirdquantity as femalequantity,
               @eggscollectionquantity as eggscollectionquantity, 
               @tableeggquantity as tableeggquantity,
			   DATE_FORMAT(@placementdate,'%d/%m/%Y') as placementdate,
			   DATE_FORMAT(@firstdaydate,'%d/%m/%Y') as firstdaydate,
               @batchstatusid as batchstatusid,
               @batchname as batchname,
			   @phaseid as phaseid,
			  DATE_FORMAT(@livebatchdate,'%d/%m/%Y') as livebatchdate,
              DATE_FORMAT(@livebatchdate,'%d/%m/%Y') as tempdate,
               @batchstatus as batchstatus,
               @billogicalvalue as billogicalvalue;
          
	-- select @transactiondate,@collectiondate,@livebatchdate; 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatch_inprogresslocationwise`(
	IN p_locationid INT,
    IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';

	SELECT
		LB.id,
        L.locationname,
        W.warehousename,
        batchname,
        R.refname as `status`,
        DATE_FORMAT( LBP.placementdate,'%d/%m/%Y') as formattedplacementdate,
        LBP.placementdate as placementdate,
        LP.phasename as phasestatusname,
        DATE_FORMAT(fnc_getmodulewisedailytransactiondate(725, LB.id, p_companyid),'%d/%m/%Y') as lasttransactoiondate
		-- DATE_FORMAT(DATE_ADD((SELECT transactiondate FROM layerdailytransaction WHERE layerbatchid = LB.id ORDER BY transactiondate DESC LIMIT 1), INTERVAL 1 DAY),'%d/%m/%Y') as lasttransactiondate
      
		
    FROM
		layerbatch LB
	
    LEFT JOIN location L ON LB.locationid = L.id
    LEFT JOIN warehouse W ON LB.warehouseid = W.id
    LEFT JOIN `reference` R ON LB.statusid = R.id
    LEFT JOIN layerbatchplacement LBP ON LB.id = LBP.layerbatchid
	LEFT JOIN layerphase LP ON LBP.phasestatusid = LP.id
	
	WHERE
		LB.companyid = p_companyid
        AND LB.statusid = 982
        AND LB.locationid = p_locationid
        group by LB.id
        ORDER BY LB.id DESC;
/*-- select from batch palacement
DROP TEMPORARY TABLE IF EXISTS tempbatch;
CREATE TEMPORARY TABLE tempbatch 
	SELECT
		LB.id,
        L.locationname,
        W.warehousename,
        batchname,
        R.refname as `status`,
        DATE_FORMAT( LBP.placementdate,'%d/%m/%Y') as formattedplacementdate,
        LBP.placementdate as placementdate,
        LP.phasename as phasestatusname,
        DATE_FORMAT(fnc_getmodulewisedailytransactiondate(725, LB.id, p_companyid),'%d/%m/%Y') as lasttransactoiondate
		-- DATE_FORMAT(DATE_ADD((SELECT transactiondate FROM layerdailytransaction WHERE layerbatchid = LB.id ORDER BY transactiondate DESC LIMIT 1), INTERVAL 1 DAY),'%d/%m/%Y') as lasttransactiondate
      
		
    FROM
		layerbatch LB
	
    LEFT JOIN location L ON LB.locationid = L.id
    LEFT JOIN warehouse W ON LB.warehouseid = W.id
    LEFT JOIN `reference` R ON LB.statusid = R.id
    LEFT JOIN layerbatchplacement LBP ON LB.id = LBP.layerbatchid
	LEFT JOIN layerphase LP ON LBP.phasestatusid = LP.id
	
	WHERE
		LB.companyid = p_companyid
        AND LB.statusid = 982
        AND LB.locationid = p_locationid
        group by LB.id
        ORDER BY LB.id DESC;
        
-- select from batchbalance
DROP TEMPORARY TABLE IF EXISTS tempbatch2;
CREATE TEMPORARY TABLE tempbatch2 

SELECT LBO.layerbatchid, DATE_FORMAT(LBO.batchplacementdate,'%d/%m/%Y') as formattedplacementdate1, LBO.batchplacementdate as batchplacementdate1 ,
DATE_FORMAT(DATE_ADD((LBO.batchplacementdate), INTERVAL 1 DAY),'%d/%m/%Y') as lasttransactiondate1
        
        FROM layer_batchlocationwiseopening_detail LBL
		LEFT JOIN layer_batchopening_balance LBO ON LBO.id = LBL.layerbatchopeningid 
        
		WHERE LBL.locationid = p_locationid;
        
DROP TEMPORARY TABLE IF EXISTS tempbatch3;
CREATE TEMPORARY TABLE tempbatch3   

-- both table combine for placemet date   
SELECT * FROM tempbatch TB1
left join tempbatch2 TB2 ON TB1.id = TB2.layerbatchid;

select id,
        locationname,
        warehousename,
        batchname,
        status,
        phasestatusname,
        (CASE WHEN placementdate IS NULL THEN batchplacementdate1
		ELSE placementdate END) AS placementdate,
        (CASE   WHEN formattedplacementdate IS NULL THEN formattedplacementdate1
            ELSE formattedplacementdate END) AS formattedplacementdate,
	   (CASE WHEN lasttransactiondate IS NULL THEN lasttransactiondate1
            ELSE lasttransactiondate END) AS lasttransactiondate
            
        from tempbatch3;*/
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatch_save`(
	IN p_id INT,
    IN p_locationid VARCHAR(100),
    IN p_warehouseid INT,
    IN p_batchname VARCHAR(200),
    IN p_binid INT,
    IN p_statusid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerbatch 
				(locationid, warehouseid, batchname, statusid, binid, companyid)
			VALUES 
				( p_locationid, p_warehouseid, p_batchname, p_statusid, p_binid, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE layerbatch
				SET locationid = p_locationid, 
                warehouseid = p_warehouseid,
                batchname = p_batchname, 
                statusid = p_statusid,
                binid = p_binid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layerbatch', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatch_search`(
  IN p_companyid INT
)
BEGIN
    
    SELECT
		LB.id,
		LB.locationid,
        L.locationcode,
        L.locationname,
        LB.warehouseid,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        WB.bincode,
        WB.binname,
        LB.statusid,
        REF.refname as batchstatus
	
    FROM
		layerbatch LB
	
    LEFT JOIN location L ON LB.locationid = L.id
    LEFT JOIN warehouse W ON LB.warehouseid = W.id
    LEFT JOIN warehousebin WB on LB.binid = WB.id
     LEFT JOIN `reference` REF ON REF.id = LB.statusid
	
	WHERE
		LB.companyid = p_companyid;
      

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerbatch_select`(
  IN p_id INT
)
BEGIN
    
    SELECT
		LB.id,
		LB.locationid,
        L.locationcode,
        L.locationname,
        LB.warehouseid,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        WB.bincode,
        WB.binname,
        LB.statusid
	
    FROM
		layerbatch LB
	
    LEFT JOIN location L ON LB.locationid = L.id
    LEFT JOIN warehouse W ON LB.warehouseid = W.id
    LEFT JOIN warehousebin WB on LB.binid = WB.id
	
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND LB.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
      

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerchicksmortality_bygrpo`(
	IN p_companyid INT,
    IN p_grpono INT
)
BEGIN
	 SELECT  LCM.id,
	         LCM.culls,
             LCM.mortality,
             LCM.shortage,
             LCM.grpono,
             LCM.freeqty,
            -- GD.quantity,
            (SELECT SUM(quantity) from grpodetail where grpoid = p_grpono ) as quantity,
             LCM.itemid
            
	 FROM layerchicksmortality LCM
   --  LEFT JOIN grpodetail GD ON GD.grpoid = CM.grpono
    
     WHERE LCM.companyid = p_companyid
	  AND LCM.grpono = p_grpono;
		
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerchicksmortality_save`(
	IN p_id INT,
    IN p_grpono INT(11),
    IN p_itemid INT(11),
    IN p_culls INT(11),
    IN p_mortality INT(11),
    IN p_shortage INT(11),
    IN p_freeqty INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerchicksmortality 
				(grpono, itemid, culls, mortality, shortage, freeqty, companyid)
			VALUES 
				(p_grpono, p_itemid, p_culls, p_mortality, p_shortage, p_freeqty, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE layerchicksmortality
				SET grpono = p_grpono, 
                itemid = p_itemid,
                culls = p_culls,
                mortality = p_mortality, 
                shortage = p_shortage,
                freeqty = p_freeqty,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layerchicksmortality', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerconsumptionissue_save`(
	IN p_id INT,
	IN p_itemid INT,
    IN p_consumptionid INT,
    IN p_issuedetailid INT,
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerconsumptionissue
				(itemid, 
				 consumptionid, 
                 issuedetailid)
			VALUES 
				(p_itemid, 
                 p_consumptionid, 
                 p_issuedetailid);
      
    ELSE
    
		UPDATE  layerconsumptionissue
				SET itemid = p_itemid, 
                consumptionid = p_consumptionid,
                issuedetailid = p_issuedetailid, 
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id;
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailybrodGrowReport_search`(
 IN p_layerbatchid INT,
 IN p_shedids varchar(300), 
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_frequency VARCHAR(50),
 IN p_companyid INT)
BEGIN
SET @@sql_mode = '';

	SET @defaultfemalechickid = null;
    
	  SELECT  
		itemid
		INTO @defaultfemalechickid
	FROM
		layerbatch
        WHERE 
            id = p_layerbatchid AND
			companyid = p_companyid limit 1;
            
 SELECT  
		 femalestandardweight
	FROM
		layersetting
        WHERE 
			companyid = p_companyid limit 1;
      
IF(p_frequency = 'daily')then
	SELECT  
			DATE_FORMAT(LDT.transactiondate, '%d/%m/%Y') as transactiondate,
            LDM.itemid,
            LDT.layerbatchid, 
			LDT.shedid, 
			LS.shedname,
			fun_lyr_transaction_date_waise_liveqtyope(LDT.layerbatchid, LDT.shedid,@defaultfemalechickid, LDT.transactiondate,p_companyid)as  femaleopeningbalancefinal,
			fun_lyr_transaction_date_waise_liveqty(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid,LDT.transactiondate,p_companyid) as femaleclosingbalancefinal,
            fun_lyr_transaction_date_waise_liveqty(p_layerbatchid, LDT.shedid, @defaultfemalechickid ,LDT.transactiondate,p_companyid) as femaleclosingbalance,
            (fnc_batchshedwise_malefemale_transferedquantity_layer(LDT.layerbatchid, LDT.shedid,@defaultfemalechickid, LDT.transactiondate,p_companyid)
            -IFnull(LDM.todayculls,0))as femaletransferedquantity,
		    fnc_batchshedwise_malefemale_transferedinquantity_layer(LDT.layerbatchid, LDT.shedid,@defaultfemalechickid, LDT.transactiondate,p_companyid)as femaletransferedinquantity,
            IFnull(LDM.todaymortality,0) as femalemortality,
			IFnull(LDM.todayculls,0) as femaleculls,
            IFnull(LDM.sexingerrorquantity,0) as sexingerrorquantity,
			IFnull(LDM.avgweight,0) as femaleactualweightingram,
			IFnull(fnc_calculate_layer_received_feed(LDT.shedid,LDC.itemid,LDT.transactiondate, p_companyid),0) as receivedfeed,
			IFnull(fnc_layerfeedopeningbalance(LDT.transactiondate,LDT.shedid,LDC.itemid , p_companyid),0) as totalreceivedfeed,
			fun_lyr_transaction_date_waise_liveqtyope(LDT.layerbatchid, LDT.shedid, LDC.itemid, LDT.transactiondate,p_companyid) as  femalefeedopeningbalancefinal,
			fun_lyr_transaction_date_waise_liveqty(LDT.layerbatchid, LDT.shedid, LDC.itemid, LDT.transactiondate,p_companyid) as feedclosingbalance,
			IFnull(fnc_calculate_layer_transfered_feed(LDT.shedid,LDC.itemid, LDT.transactiondate,  p_companyid),0) as transferedfeedfemale,
			IFnull(fnc_lyr_cummulative_femalemortality(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid ,LDT.transactiondate),0) as cumulativefemalemortality,
			IFnull(fnc_lyr_cummulative_femaleculls(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid ,LDT.transactiondate),0) as cumulativefemaleculls,
            IFnull(fnc_lyr_cummulative_femalesexingerror(p_layerbatchid, LDT.shedid, @defaultfemalechickid,LDT.transactiondate),0) as cumsexingerrorquantity,
			IFnull(fnc_calculate_layerfemale_feedconsumption(LDT.id, LDC.itemid),0) as femalefeedconsumption,
			IFnull(fnc_lyr_cummulativefeed(p_layerbatchid, LDC.itemid,LDT.shedid,LDT.transactiondate,p_companyid ),0) as cummulativefeedconsumption
	   
 FROM layerdailytransaction LDT
        LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id  AND LDM.itemid = @defaultfemalechickid
		LEFT JOIN layerdailyconsumption LDC ON LDC.layerdailytransactionid = LDT.id AND LDC.consumptiontypeid = 1149 -- AND LDC.layeritemid = LDM.itemid
		LEFT JOIN layershed LS ON LDT.shedid = LS.id
        WHERE
				LDT.layerbatchid = p_layerbatchid
                AND FIND_IN_SET(LDT.shedid, p_shedids)
				AND LDT.transactiondate between p_fromdate AND p_todate
                order by LDT.layerbatchid,LDT.transactiondate, LDT.shedid, LDM.itemid;
    
    
                
  END IF;
  
IF( p_frequency = 'weekly') THEN

DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
		SELECT  
				LDT.shedid, 
				DATE_FORMAT(LDT.transactiondate, '%d/%m/%Y') as transactiondate,
				LDM.itemid,
                LS.shedname,
				fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid) as weekno,
                MIN(DATE_FORMAT(LDT.transactiondate,'%d/%m/%Y')) as odate,
                MAX(DATE_FORMAT(LDT.transactiondate,'%d/%m/%Y')) as clodate,
                MIN(LDT.transactiondate) as week_start,
                MAX(LDT.transactiondate) as week_end,
                fun_lyr_transaction_date_waise_liveqtyope(LDT.layerbatchid, LDT.shedid,@defaultfemalechickid, (MIN(LDT.transactiondate)),p_companyid)as  femaleopeningbalancefinal,
				fun_lyr_transaction_date_waise_liveqty(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid,(MAX(LDT.transactiondate)),p_companyid) as femaleclosingbalancefinal,
                -- MIN(fun_lyr_transaction_date_waise_liveqty(p_layerbatchid, LDT.shedid, @defaultfemalechickid ,LDT.transactiondate,p_companyid))as femaleclosingbalance,
                (fnc_batchshedwise_malefemale_transferedquantityuptodate_layer(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid, (MIN(LDT.transactiondate)),(MAX(LDT.transactiondate)),p_companyid)
                - IFNULL(SUM(LDM.todayculls),0))as femaletransferedquantity,-- 682 feculls also need to minus from femaletransferedquantity
				fnc_batchshedwise_malefemale_transfeinquantityuptodate_layer(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid, (MIN(LDT.transactiondate)),(MAX(LDT.transactiondate)),p_companyid)as femaletransferedinquantity,
                SUM(LDM.todaymortality) as femalemortality,
				SUM(LDM.todayculls) as femaleculls,
				SUM(LDM.sexingerrorquantity) as sexingerrorquantity,
				SUM(LDM.avgweight) as femaleactualweightingram,
                MAX(fnc_lyr_cummulative_femalemortality(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid ,LDT.transactiondate))as cumulativefemalemortality,
                MAX(fnc_lyr_cummulative_femaleculls(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid ,LDT.transactiondate))as cumulativefemaleculls,
				MAX(fnc_lyr_cummulative_femalesexingerror(p_layerbatchid, LDT.shedid, @defaultfemalechickid ,LDT.transactiondate)) as cumsexingerrorquantity,
                fun_lyr_transaction_date_waise_liveqtyope(LDT.layerbatchid, LDT.shedid, LDC.itemid, (MIN(LDT.transactiondate)),p_companyid) as  femalefeedopeningbalancefinal,
				fnc_calculate_malefemale_feedconsumptionuptodatelyr((MIN(LDT.transactiondate)),(MAX(LDT.transactiondate)),LDT.shedid,LDC.itemid,p_companyid) as femalefeedconsumption,

                -- SUM(fnc_calculate_layerfemale_feedconsumption(LDT.id, LDC.itemid)) as femalefeedconsumption,
				fun_lyr_transaction_date_waise_liveqty(LDT.layerbatchid, LDT.shedid, LDC.itemid,(MAX(LDT.transactiondate)),p_companyid) as feedclosingbalance

        
         FROM layerdailytransaction LDT
          LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id  AND LDM.itemid = @defaultfemalechickid
		  LEFT JOIN layerdailyconsumption LDC ON LDC.layerdailytransactionid = LDT.id AND LDC.consumptiontypeid = 1149 AND LDC.layeritemid = LDM.itemid
		  LEFT JOIN layershed LS ON LDT.shedid = LS.id
        WHERE
        
				LDT.layerbatchid = p_layerbatchid
                AND FIND_IN_SET(LDT.shedid, p_shedids)
				AND LDT.transactiondate between p_fromdate AND p_todate
                group by weekno
                order by LDT.layerbatchid,LDT.transactiondate, LDT.shedid, LDM.itemid;
                
                
DROP TEMPORARY TABLE IF EXISTS tempmortality2;
CREATE TEMPORARY TABLE tempmortality2 

	
 SELECT shedid,transactiondate, weekno,  -- week_start,week_end,
 receivedfeed,transferedfeedfemale,cummulativefeedconsumption,
		fnc_layerfeedopeningbalance(transactiondate,shedid,itemid,p_companyid) as totalreceivedfeed FROM(
    SELECT 	    LDT.shedid as shedid, 
				LDC.itemid as itemid,
				MAX(LDT.transactiondate) as transactiondate,
               -- MAX(DATE_FORMAT(LDT.transactiondate, '%d/%m/%Y')) as week_end,
               -- MIN(DATE_FORMAT(LDT.transactiondate, '%d/%m/%Y')) as week_start,
				fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid) as weekno,
                SUM(fnc_calculate_layer_received_feed(LDT.shedid,LDC.itemid,LDT.transactiondate, p_companyid)) as receivedfeed,
				SUM(fnc_calculate_layer_transfered_feed(LDT.shedid,LDC.itemid, LDT.transactiondate,  p_companyid)) as transferedfeedfemale,
            	MAX(fnc_lyr_cummulativefeed(p_layerbatchid, LDC.itemid,LDT.shedid,LDT.transactiondate,p_companyid )) as cummulativefeedconsumption
                
                
	    FROM layerdailytransaction LDT
        LEFT JOIN layerdailyconsumption LDC ON LDC.layerdailytransactionid = LDT.id AND LDC.consumptiontypeid = 1149 
        
        WHERE
				LDT.layerbatchid = p_layerbatchid
                AND FIND_IN_SET(LDT.shedid, p_shedids)
				AND LDT.transactiondate between p_fromdate AND p_todate
                group by weekno
                order by LDT.shedid, LDT.transactiondate) as temp ;
	
		
		SELECT * FROM tempmortality1 TB1
         LEFT JOIN tempmortality2 TB2 ON TB2.weekno=TB1.weekno AND TB2.shedid=TB1.shedid;
        
   END IF;
     
IF( p_frequency = 'monthly') THEN

DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
		SELECT  
				LDT.shedid, 
				DATE_FORMAT(LDT.transactiondate, '%d/%m/%Y') as transactiondate,
				LDM.itemid,
                LS.shedname,
				fun_layerbatch_ageinmonth(LDT.transactiondate,LDT.layerbatchid) as monthno,
                 date_format(LDT.transactiondate, "%m-%y")as monthno1,
                 MIN(LDT.transactiondate) as  month_start,
				MAX(LDT.transactiondate) as month_end,
               
				fun_lyr_transaction_date_waise_liveqtyope(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid, (MIN(LDT.transactiondate)),p_companyid)as  femaleopeningbalancefinal,
				fun_lyr_transaction_date_waise_liveqty(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid,(MAX(LDT.transactiondate)),p_companyid) as femaleclosingbalancefinal,
				(fnc_batchshedwise_malefemale_transferedquantityuptodate_layer(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid, (MIN(LDT.transactiondate)),(MAX(LDT.transactiondate)),p_companyid)
                 -IFNULL(SUM(LDM.todayculls),0))as femaletransferedquantity,
				fnc_batchshedwise_malefemale_transfeinquantityuptodate_layer(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid, (MIN(LDT.transactiondate)),(MAX(LDT.transactiondate)),p_companyid)as femaletransferedinquantity,
                -- MIN(fun_lyr_transaction_date_waise_liveqty(p_layerbatchid, LDT.shedid, @defaultfemalechickid ,LDT.transactiondate,p_companyid))as femaleclosingbalance,
				SUM(LDM.todaymortality) as femalemortality,
				SUM(LDM.todayculls) as femaleculls,
				SUM(LDM.sexingerrorquantity) as sexingerrorquantity,
				SUM(LDM.avgweight) as femaleactualweightingram,
                MAX(fnc_lyr_cummulative_femalemortality(LDT.layerbatchid, LDT.shedid,@defaultfemalechickid ,LDT.transactiondate))as cumulativefemalemortality,
                
             /*  (( MAX(fnc_lyr_cummulative_femalemortality(LDT.layerbatchid, LDT.shedid, LDM.itemid ,LDT.transactiondate))/
               fun_lyr_transaction_date_waise_liveqtyope(LDT.layerbatchid, LDT.shedid, LDC.itemid, (MIN(LDT.transactiondate)),p_companyid))*100) as cumufemalemortalityper,
               */
                MAX(fnc_lyr_cummulative_femaleculls(LDT.layerbatchid, LDT.shedid,@defaultfemalechickid ,LDT.transactiondate))as cumulativefemaleculls,
				MAX(fnc_lyr_cummulative_femalesexingerror(p_layerbatchid, LDT.shedid, @defaultfemalechickid ,LDT.transactiondate)) as cumsexingerrorquantity,
				fun_lyr_transaction_date_waise_liveqtyope(LDT.layerbatchid, LDT.shedid, LDC.itemid, (MIN(LDT.transactiondate)),p_companyid) as  femalefeedopeningbalancefinal,
				fnc_calculate_malefemale_feedconsumptionuptodatelyr((MIN(LDT.transactiondate)),(MAX(LDT.transactiondate)),LDT.shedid,LDC.itemid,p_companyid) as femalefeedconsumption,

                -- SUM(fnc_calculate_layerfemale_feedconsumption(LDT.id, LDC.itemid)) as femalefeedconsumption,
				fun_lyr_transaction_date_waise_liveqty(LDT.layerbatchid, LDT.shedid, LDC.itemid,(MAX(LDT.transactiondate)),p_companyid) as feedclosingbalance

                -- SUM(fnc_calculate_layerfemale_feedconsumption(LDT.id, LDM.itemid)) as femalefeedconsumption
        
         FROM layerdailytransaction LDT
          LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id  AND LDM.itemid = @defaultfemalechickid
		  LEFT JOIN layerdailyconsumption LDC ON LDC.layerdailytransactionid = LDT.id AND LDC.consumptiontypeid = 1149 AND LDC.layeritemid = LDM.itemid
		  LEFT JOIN layershed LS ON LDT.shedid = LS.id
        WHERE
        
				LDT.layerbatchid = p_layerbatchid
                AND FIND_IN_SET(LDT.shedid, p_shedids)
				AND LDT.transactiondate between p_fromdate AND p_todate
                group by monthno1
                order by LDT.layerbatchid,LDT.transactiondate, LDT.shedid, LDM.itemid;
                
                
DROP TEMPORARY TABLE IF EXISTS tempmortality2;
CREATE TEMPORARY TABLE tempmortality2 

	
 SELECT shedid,transactiondate, monthno, month_start1,month_end1,
 receivedfeed,transferedfeedfemale,cummulativefeedconsumption,
		fnc_layerfeedopeningbalance(transactiondate,shedid,itemid,p_companyid) as totalreceivedfeed FROM(
    SELECT 	    LDT.shedid as shedid, 
				LDC.itemid as itemid,
				MAX(LDT.transactiondate) as transactiondate,
                MIN(LDT.transactiondate) as  month_start1,
			   MAX(LDT.transactiondate) as month_end1,

				fun_layerbatch_ageinmonth(LDT.transactiondate,LDT.layerbatchid) as monthno,
				date_format(LDT.transactiondate, "%m-%y")as monthno1,
                SUM(fnc_calculate_layer_received_feed(LDT.shedid,LDC.itemid,LDT.transactiondate, p_companyid)) as receivedfeed,
				SUM(fnc_calculate_layer_transfered_feed(LDT.shedid,LDC.itemid, LDT.transactiondate,  p_companyid)) as transferedfeedfemale,
            	MAX(fnc_lyr_cummulativefeed(p_layerbatchid, LDC.itemid,LDT.shedid,LDT.transactiondate,p_companyid )) as cummulativefeedconsumption
                
                
	    FROM layerdailytransaction LDT
        LEFT JOIN layerdailyconsumption LDC ON LDC.layerdailytransactionid = LDT.id AND LDC.consumptiontypeid = 1149 
        
        WHERE
				LDT.layerbatchid = p_layerbatchid
                AND FIND_IN_SET(LDT.shedid, p_shedids)
				AND LDT.transactiondate between p_fromdate AND p_todate
                group by monthno1
                order by LDT.shedid, LDT.transactiondate) as temp ;
	
		
		SELECT * FROM tempmortality1 TB1
         LEFT JOIN tempmortality2 TB2 ON TB2.monthno=TB1.monthno AND TB2.shedid=TB1.shedid;


        
   END IF;

  END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailyconsumption_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DELETE FROM layerdailyconsumption WHERE id = p_id;
    
	-- record log
	CALL spc_commonlog_save(p_companyid, 'layerdailyconsumption', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailyconsumption_layerbatchwise`(
	IN p_companyid INT,
    IN p_layerbatchid INT
)
BEGIN
 
    SELECT
        LDC.id,
        LDC.layerdailytransactionid,
        LDC.consumptiontypeid,
        LDC.itemid,
        I.itemname,
        LDC.layeritemid,
        LDC.shedlineid,
        LDC.consumptionquantity,
        LB.locationid,
        L.locationname,
        L.locationcode,
		DATE_FORMAT(LDT.transactiondate,'%d/%m/%Y') as transactiondate
    FROM
		layerdailyconsumption LDC
	LEFT JOIN layerdailytransaction LDT ON LDC.layerdailytransactionid = LDT.id
    INNER JOIN item I ON I.id = LDC.itemid
    INNER JOIN layerbatch LB ON LB.id = p_layerbatchid
    INNER JOIN location L ON L.id = LB.locationid
    
	WHERE
		LDC.companyid = p_companyid
        AND LDT.layerbatchid = p_layerbatchid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailyconsumption_report`(
 IN p_batchid VARCHAR(200),
 IN p_fromdate Date,
 IN p_todate Date,
 IN p_companyid INT)
BEGIN

SET @@sql_mode = '';
        
		SELECT 
		LC.itemid,
		IG.id as itemgroupid,
		IG.groupname,
		I.itemname,
        LDT.layerbatchid,
        LB.batchname,
		DATE_FORMAT(LDT.transactiondate,'%d/%m/%Y')  as `date`,
		SUM(fnc_layerfeedopeningbalance(LDT.transactiondate,LDT.shedid,LC.itemid , p_companyid)) as openingbalance,
		SUM(fnc_calculate_layer_received_feed(LDT.shedid,LC.itemid,LDT.transactiondate, p_companyid)) as receivedquantity,
		SUM(fnc_calculate_layer_transfered_feed(LDT.shedid,LC.itemid, LDT.transactiondate,  p_companyid)) as outquantity,
		SUM(LC.consumptionquantity) as consumedquantity,
        fnc_calculate_layercumconsumedquantity( LDT.layerbatchid, LC.itemid, LDT.transactiondate, p_companyid) as cumconsumedquantity

	FROM layerdailyconsumption LC
		 LEFT JOIN layerdailytransaction LDT ON LC.layerdailytransactionid = LDT.id
		 LEFT JOIN layerbatch LB ON LB.id = LDT.layerbatchid  
         LEFT JOIN item I ON I.id = LC.itemid
         LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
 
        WHERE
         FIND_IN_SET(LDT.layerbatchid,p_batchid)  AND
		LDT.transactiondate BETWEEN  p_fromdate AND p_todate AND
        LDT.companyid = p_companyid
        
          group by LDT.shedid, LDT.transactiondate, LC.itemid
	ORDER BY  
        LDT.transactiondate;
		
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailyconsumption_save`(
	IN p_id INT,
    IN p_layerdailytransactionid INT,
    IN p_consumptiontypeid INT,
    IN p_itemid INT,
    IN p_shedlineid INT,
    IN p_standardconsumption DECIMAL(20,3),
    IN p_consumptionquantity DECIMAL(20,3),
	IN p_warehouseid INT,
	IN p_issuedetailid INT,
	IN p_isherbal INT,
    IN p_layeritemid INT(11),
    IN p_itemvalue decimal(30,6),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerdailyconsumption
				(layerdailytransactionid, 
				 consumptiontypeid, 
                 itemid,  
                 shedlineid, 
                 standardconsumption,
                 consumptionquantity, 
                 issuedetailid,
                 isherbal,
                 layeritemid,
                 itemvalue,
                 companyid)
			VALUES 
				(p_layerdailytransactionid, 
                 p_consumptiontypeid, 
                 p_itemid,  
                 p_shedlineid,
                 p_standardconsumption,
                 p_consumptionquantity,
                 p_issuedetailid,
                 p_isherbal,
                 p_layeritemid,
                 p_itemvalue,
                 p_companyid);
      
      SET @action = 'INSERT';
      
	 
    ELSE
    
		UPDATE  layerdailyconsumption
				SET consumptiontypeid = p_consumptiontypeid, 
                itemid = p_itemid, 
                shedlineid = p_shedlineid,
                standardconsumption = p_standardconsumption,
                consumptionquantity = p_consumptionquantity,
                issuedetailid = p_issuedetailid,
                isherbal = p_isherbal,
                layeritemid = p_layeritemid,
                itemvalue = p_itemvalue,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   
    -- record log
    -- CALL spc_commonlog_save(p_companyid, 'layerdailyconsumption', out_id, @action, p_userid);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailyconsumption_savejson`(
	  IN p_layerdailytransactionid INT,
      IN p_dailyMortality json,
	  IN p_feedConsumption json,
      IN p_medicineConsumption json,
      IN p_vaccineConsumption json,
	  IN p_vitaminConsumption json,
      IN p_otherDetails json,
      OUT out_id INT
)
BEGIN

	-- save other details 
    
    SET @i = 0;
    
    SET @p_id = CASE WHEN JSON_EXTRACT(p_otherDetails, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.id'))) AS SIGNED) end;
	SET @out_id = null;
        
	CALL spc_layerdailyotherdetails_save(
        
	     @p_id,
		 p_layerdailytransactionid,
         JSON_UNQUOTE((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.lighton')))),
         JSON_UNQUOTE((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.lightoff')))),
		 IF(json_type(json_extract(p_otherDetails, CONCAT('$.duration'))) = 'NULL', null, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.duration'))) AS DECIMAL(9,3))),
	     IF(json_type(json_extract(p_otherDetails, CONCAT('$.temperature'))) = 'NULL', null, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.temperature'))) AS DECIMAL(9,3))),
		 IF(json_type(json_extract(p_otherDetails, CONCAT('$.humidity'))) = 'NULL', null, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.humidity'))) AS DECIMAL(9,3))),
		 IF(json_type(json_extract(p_otherDetails, CONCAT('$.waterconsumption'))) = 'NULL', null, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.waterconsumption'))) AS DECIMAL(9,2))),
         CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.companyid'))) AS UNSIGNED INTEGER),
		 CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.userid'))) AS UNSIGNED INTEGER),
		 @out_id
	 );
     
    --  save daily mortality
    
	 SET @i = 0;
    
	 WHILE @i < JSON_LENGTH(p_dailyMortality) DO
    
		 SET @str = NULL;
         SELECT JSON_EXTRACT(p_dailyMortality,CONCAT('$[',@i,']')) INTO @str;
        
		 SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
		 SET @out_id = null;
        
		 CALL spc_layerdailymortality_save(
        
			 @p_id,
             p_layerdailytransactionid,
             (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.avgweight'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.todaymortality'))),
			  if(json_type(json_extract(@str, CONCAT('$.mortalityreasonid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.mortalityreasonid'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.todayculls'))),
              if(json_type(json_extract(@str, CONCAT('$.cullsreasonid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.cullsreasonid'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.sexingerrorquantity'))),
			 (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
		     (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			 @out_id
         );

		 SELECT @i + 1 INTO @i;
        
	  END WHILE;
    
    
    -- save daily feed consumption 
    
    SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_feedConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_feedConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_layerdailyconsumption_save(
        
			@p_id,
            p_layerdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
            if(json_type(json_extract(@str, CONCAT('$.shedlineid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            -- if(json_type(json_extract(@str, CONCAT('$.standardconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptionquantity'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
			if(json_type(json_extract(@str, CONCAT('$.layeritemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.layeritemid'))),
			if(json_type(json_extract(@str, CONCAT('$.itemvalue'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.itemvalue'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    -- save daily medicine consumption
    
	SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_medicineConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_medicineConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_layerdailyconsumption_save(
        
			@p_id,
            p_layerdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
            if(json_type(json_extract(@str, CONCAT('$.shedlineid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
            if(json_type(json_extract(@str, CONCAT('$.standardconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptionquantity'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.layeritemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.layeritemid'))),
            if(json_type(json_extract(@str, CONCAT('$.itemvalue'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.itemvalue'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    -- save daily vaccine consumption
    
	SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_vaccineConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_vaccineConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_layerdailyconsumption_save(
        
			@p_id,
            p_layerdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
            if(json_type(json_extract(@str, CONCAT('$.shedlineid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
            if(json_type(json_extract(@str, CONCAT('$.standardconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptionquantity'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.layeritemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.layeritemid'))),
            if(json_type(json_extract(@str, CONCAT('$.itemvalue'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.itemvalue'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    
    -- save daily vitamin comsumtion
    
     SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_vitaminConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_vitaminConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_layerdailyconsumption_save(
        
			@p_id,
            p_layerdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
            if(json_type(json_extract(@str, CONCAT('$.shedlineid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.standardconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
            if(json_type(json_extract(@str, CONCAT('$.layeritemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.layeritemid'))),
            if(json_type(json_extract(@str, CONCAT('$.itemvalue'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.itemvalue'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailyconsumption_select`(
	IN p_layerdailytransactionid INT
)
BEGIN
   
   SET @warehousebinid = null;
   SET @warehouseid = null;
   
   -- SELECT @warehousebinid:=LS.warehousebinid
   SELECT LS.warehouseid,LS.warehousebinid INTO @warehouseid,@warehousebinid
   FROM layerdailytransaction LDT
   LEFT JOIN layershed LS ON LDT.shedid = LS.id
   WHERE LDT.id = p_layerdailytransactionid;
   
   -- select feed consumption
   SELECT 
			LDC.id,
            LDC.layerdailytransactionid,
            LDC.consumptiontypeid,
            LDC.itemid,
            I.itemcode,
            I.itemname,
            LDC.shedlineid,
            LSL.linename,
            LDC.isherbal,
            LDC.layeritemid,
            I1.itemname as layeritemname,
            LDC.standardconsumption,
            LDC.consumptionquantity,
            R2.refname as unitname,
            LDC.companyid,
            fnc_consumptionlivestock(LDC.itemid, @warehouseid,@warehousebinid, LDC.companyid) as instock,
            fnc_consumptionlivestock(LDC.itemid, @warehouseid,@warehousebinid, LDC.companyid) as instockforref
     
    FROM 
		layerdailyconsumption LDC
        LEFT JOIN item I On LDC.itemid = I.id
        LEFT JOIN item I1 On LDC.layeritemid = I1.id
        LEFT JOIN layershedline LSL ON LDC.shedlineid = LSL.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		layerdailytransactionid = p_layerdailytransactionid AND
        consumptiontypeid = 1149;
        
	
    -- select medicine consumption
   SELECT 
			LDC.id,
            LDC.layerdailytransactionid,
            LDC.consumptiontypeid,
            LDC.itemid,
            I.itemcode,
            I.itemname,
            LDC.shedlineid,
            LSL.linename,
            LDC.isherbal,
             LDC.layeritemid,
             I1.itemname as layeritemname,
            LDC.standardconsumption,
            LDC.consumptionquantity,
            R2.refname as unitname,
            LDC.companyid,
            fnc_consumptionlivestock(LDC.itemid, @warehouseid,@warehousebinid, LDC.companyid) as instock,
            fnc_consumptionlivestock(LDC.itemid, @warehouseid,@warehousebinid, LDC.companyid) as instockforref
	
    FROM 
		layerdailyconsumption LDC
        LEFT JOIN item I On LDC.itemid = I.id
        LEFT JOIN item I1 On LDC.layeritemid = I1.id
        LEFT JOIN layershedline LSL ON LDC.shedlineid = LSL.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		layerdailytransactionid = p_layerdailytransactionid AND
        consumptiontypeid = 1150;
        
	-- select vaccine consumption
   SELECT 
			LDC.id,
            LDC.layerdailytransactionid,
            LDC.consumptiontypeid,
            LDC.itemid,
            I.itemcode,
            I.itemname,
            LDC.shedlineid,
            LSL.linename,
            LDC.isherbal,
			LDC.layeritemid,
             I1.itemname as layeritemname,
            LDC.standardconsumption,
            LDC.consumptionquantity,
            R2.refname as unitname,
            LDC.companyid,
            fnc_consumptionlivestock(LDC.itemid, @warehouseid,@warehousebinid, LDC.companyid) as instock,
            fnc_consumptionlivestock(LDC.itemid, @warehouseid,@warehousebinid, LDC.companyid) as instockforref
  
  FROM 
		layerdailyconsumption LDC
        LEFT JOIN item I On LDC.itemid = I.id
        LEFT JOIN item I1 On LDC.layeritemid = I1.id
        LEFT JOIN layershedline LSL ON LDC.shedlineid = LSL.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		layerdailytransactionid = p_layerdailytransactionid AND
        consumptiontypeid = 1151;
        
	-- select vitamin consumption
   SELECT 
			LDC.id,
            LDC.layerdailytransactionid,
            LDC.consumptiontypeid,
            LDC.itemid,
            I.itemcode,
            I.itemname,
            LDC.shedlineid,
            LSL.linename,
            LDC.isherbal,
			LDC.layeritemid,
            I1.itemname as layeritemname,
            LDC.standardconsumption,
            LDC.consumptionquantity,
            R2.refname as unitname,
            LDC.companyid,
           fnc_consumptionlivestock(LDC.itemid, @warehouseid,@warehousebinid, LDC.companyid) as instock,
            fnc_consumptionlivestock(LDC.itemid, @warehouseid,@warehousebinid, LDC.companyid) as instockforref
	
    FROM 
		layerdailyconsumption LDC
        LEFT JOIN item I On LDC.itemid = I.id
        LEFT JOIN item I1 On LDC.layeritemid = I1.id
        LEFT JOIN layershedline LSL ON LDC.shedlineid = LSL.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		layerdailytransactionid = p_layerdailytransactionid AND
        consumptiontypeid = 1152;
            
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailymortality_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN
    DELETE FROM layerdailymortality WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'layerdailymortality', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailymortality_save`(
	IN p_id INT,
    IN p_layerdailytransactionid INT,
    IN p_itemid INT,
    IN p_shedlineid INT,
    IN p_avgweight DECIMAL(9,3),
    IN p_todaymortality INT,
    IN p_mortalityreasonid INT,
    IN p_todayculls INT,
    IN p_cullsreasonid INT,
    IN p_sexingerrorquantity INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerdailymortality
				(layerdailytransactionid, 
				 itemid, 
                 shedlineid, 
                 avgweight, 
                 todaymortality, 
                 mortalityreasonid, 
                 todayculls, 
                 cullsreasonid,
                 sexingerrorquantity,
                 companyid)
			VALUES 
				(p_layerdailytransactionid, 
                 p_itemid, 
                 p_shedlineid, 
                 p_avgweight, 
                 p_todaymortality, 
                 p_mortalityreasonid,
                 p_todayculls, 
                 p_cullsreasonid,
                 p_sexingerrorquantity,
                 p_companyid);
	  
      SET @action = 'INSERT';
	
    ELSE
    
		UPDATE  layerdailymortality
				SET layerdailytransactionid = p_layerdailytransactionid, 
                itemid = p_itemid,
                shedlineid = p_shedlineid, 
                avgweight = p_avgweight,
                todaymortality = p_todaymortality,
                mortalityreasonid = p_mortalityreasonid,
                todayculls = p_todayculls,
                cullsreasonid = p_cullsreasonid,
                sexingerrorquantity = p_sexingerrorquantity,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederdailymortality', out_id, @action, p_userid);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailyotherdetails_save`(
	IN p_id INT,
    IN p_layerdailytransactionid INT,
    IN p_lighton VARCHAR(30),
    IN p_lightoff VARCHAR(30),
    IN p_duration DECIMAL(9,2),
    IN p_temperature DECIMAL(9,3),
    IN p_humidity DECIMAL(9,3),
    IN p_waterconsumption DECIMAL(9,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
     
     
    --  SET p_lighton = TIME(STR_TO_DATE(p_lighton, '%h:%i %p' ));
	 -- SET p_lightoff = TIME(STR_TO_DATE(p_lightoff, '%h:%i %p' ));
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerdailyotherdetail
				(layerdailytransactionid, 
				 lighton, 
                 lightoff, 
                 duration, 
                 temperature, 
                 humidity, 
                 waterconsumption, 
                 companyid)
			VALUES 
				(p_layerdailytransactionid, 
				 p_lighton,
                 p_lightoff,
                 p_duration, 
                 p_temperature, 
                 p_humidity, 
                 p_waterconsumption,
                 p_companyid);
	  
      SET @action = 'INSERT';
	
    ELSE
    
		UPDATE  layerdailyotherdetail
				SET layerdailytransactionid = p_layerdailytransactionid, 
                lighton = p_lighton,
                lightoff = p_lightoff, 
                duration = p_duration,
                temperature = p_temperature,
                humidity = p_humidity,
                waterconsumption = p_waterconsumption,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederdailyotherdetails', out_id, @action, p_userid);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailytransactionlist_search`(
	IN p_locationid INT,
    IN p_breederbatchid INT,
    IN p_from_date date,
	IN p_to_date date
)
BEGIN
    
    SELECT
			LT.id,
            LT.shedid,
            LS.shedname,
            LT.layerbatchid,
            LB.batchname,
            DATE_FORMAT( LT.transactiondate,'%d/%m/%Y') as transactiondate,
            R.refname as `status`
		
    FROM
		layerdailytransaction LT
		LEFT JOIN layershed LS ON LT.shedid = LS.id
        LEFT JOIN layerbatch LB ON LT.layerbatchid = LB.id
        LEFT JOIN `reference` R ON LT.statusid = R.id
    
	WHERE
		LT.locationid = p_locationid AND
        LT.layerbatchid = p_breederbatchid AND
        (LT.transactiondate BETWEEN p_from_date AND p_to_date)
        ORDER BY LT.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailytransaction_birdratediff_save_je`(
    IN p_layerdailytransactionid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS templayerconsumption;
    DROP TABLE IF EXISTS templayermortality;
    
    BEGIN 
        
        -- Journal entry detail for WIP bird
		   SET @WIPledgerid = null;
		   SET @mortalityledgerid = null;
           SET @femalechickscost = null;
		   SET @layerbatchid = null;
		   SET @transactiondate = null;
           SET @defaultfemalechickid = null;
		   SET @shedid = null;
		   SET @live_birdcost = null;
           SET @birdratediff = null;
		   
		   SELECT WIPledgerid, mortalityledgerid
		   INTO @WIPledgerid, @mortalityledgerid 
		   FROM layersetting LIMIT 1;
           
           SELECT LDT.layerbatchid,LDT.transactiondate,LDT.shedid INTO @layerbatchid,@transactiondate,@shedid
           FROM layerdailytransaction LDT
           WHERE id = p_layerdailytransactionid;
           
           SELECT itemid
           INTO @defaultfemalechickid
           FROM layerbatch WHERE id = @layerbatchid;
           
            SELECT fun_layer_bird_purchasecost(@layerbatchid,p_companyid,@transactiondate) INTO @biredprice;
			SELECT fun_layerlive_biredcost_after19Week(@layerbatchid,p_companyid,@transactiondate) INTO @live_birdcost;
            
            SELECT (IFNULL(@live_birdcost,0)- IFNULL(@biredprice,0)) INTO @birdratediff;
            
           
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
                NULL,
                1300,
                NULL,
                @transactiondate,
                NULL,
				(SELECT branchid FROM location WHERE id = (SELECT locationid FROM layerdailytransaction WHERE id = p_layerdailytransactionid limit 1)),
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                345,
				NULL,
                'Layer daily transaction JE JE after 19 week',
                NULL,
                NULL,
                NULL,
                p_layerdailytransactionid,
                'Layer daily transaction JE JE after 19 week',
                p_companyid,
                p_userid,
                @jeid
           );
   
                -- JE for layerbatchid daily mortality
                
                SET @row_number1 = 0;
   
				CREATE TEMPORARY TABLE templayermortality
				
				SELECT (@row_number1:=@row_number1 + 1) AS num1, quantity, itemledgerid, itemid FROM(
				
					SELECT (todayculls + todaymortality + sexingerrorquantity) as quantity,
					(SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
					itemid
					FROM layerdailymortality 
					WHERE layerdailytransactionid = p_layerdailytransactionid
					
				) as tbllayerdaily1detail1;
				
				
				
				BEGIN
					DECLARE n1 INT DEFAULT 0;
					DECLARE j INT DEFAULT 0;
					SELECT COUNT(*) FROM templayermortality INTO n1;
					
						WHILE j<n1 DO 
						
							SET @quantity = null;
							SET @itemledgerid1 = null;
							SET @itemid1 = null;
							select quantity, itemledgerid, itemid into @quantity, @itemledgerid1, @itemid1 from templayermortality where num1 = j+1;
						
							-- insert JE detail
							 
							 -- Credit to culls and mortality item - Ledger
							 
							 SET @jedetailid3 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
                                NULL,
								@layerbatchid,
								NULL,
                                NULL,
								NULL,
								NULL,
                                NULL,
								0,
								(@quantity * @birdratediff),
								NULL,
								NULL,
								NULL,
								@itemid1,
								NULL,
								'Layer daily mortality and culls',
								p_companyid,
								p_userid,
								@jedetailid3
							 );
                             
                             -- Debit to COGS - Ledger
							
							 SET @jedetailid2 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@mortalityledgerid,
								0,
                                NULL,
								@layerbatchid,
								NULL,
                                NULL,
								NULL,
								NULL,
                                NULL,
								(@quantity * @birdratediff),
								0,
								NULL,
								NULL,
								NULL,
								@itemid1,
								NULL,
								'Layer daily mortality and culls',
								p_companyid,
								p_userid,
								@jedetailid2
							 );
							
							SET j = j + 1;
						END WHILE;
					End;
		END;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailytransaction_bylayerbatchid`(
	IN p_layerbatchid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	
SET @femaleitemid = NULL;
SET @femalemortality = 0;
SET @femaleculls = 0;
SET @sexingerrorquantity = 0;
SELECT  
			defaultfemalechickid INTO @femaleitemid
			
		FROM 
			layersetting LIMIT 1;
            
            SELECT 
			
				
				CASE WHEN itemid = @femaleitemid THEN @femalemortality:= todaymortality ELSE NULL END as femalemortality
                
				FROM( SELECT
					  itemid, SUM(todaymortality) as todaymortality   
            
					  FROM layerdailytransaction LDT
					  LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id
    
					  WHERE layerbatchid = p_layerbatchid
    
				GROUP BY itemid) as todaymortality;
                
                
                SELECT 
			
				
				CASE WHEN itemid = @femaleitemid THEN @femaleculls:= todayculls ELSE NULL END as femaleculls
                
				FROM( SELECT
					  itemid, SUM(todayculls) as todayculls    
            
					  FROM layerdailytransaction LDT
					  LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id
    
					  WHERE layerbatchid = p_layerbatchid
    
				GROUP BY itemid) as totalculls;
                
                 SELECT 
			
				
				CASE WHEN itemid = @femaleitemid THEN @sexingerrorquantity:= sexingerrorquantity ELSE NULL END as sexingerrorquantity
                
				FROM( SELECT
					  itemid, SUM(sexingerrorquantity) as sexingerrorquantity    
            
					  FROM layerdailytransaction LDT
					  LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id
    
					  WHERE layerbatchid = p_layerbatchid
    
				GROUP BY itemid) as totalsexingerrorquantity;
    
    SELECT 
             IFNULL(@femalemortality,0) AS femalemortality,
			 IFNULL(@femaleculls,0) AS femaleculls,
             IFNULL(@sexingerrorquantity,0) AS sexingerrorquantity;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailytransaction_issueconsumeditems`(
  IN p_dailytransactionid INT,
  IN p_outid INT
)
BEGIN
    DECLARE p_transactiondate DATE;
	DECLARE p_itemid INT;
	DECLARE p_itemname VARCHAR(200);
	DECLARE p_itemunitid INT;
	DECLARE p_unitcost DECIMAL(30,6);
    DECLARE p_itemvalue DECIMAL(30,6);
	DECLARE p_todaymortality INT;
	DECLARE p_todayculls INT;
    DECLARE p_sexingerrorquantity INT;
    DECLARE p_quantity DECIMAL(20,3);
    DECLARE p_companyid INT;
    DECLARE p_userid INT;
    DECLARE p_layerbatchid INT;
    DECLARE p_shedwarehousebinid INT;
    DECLARE p_warehouseid INT;
    DECLARE p_consumptionid INT;
    DECLARE p_grpoid INT;
	DECLARE p_itembatch VARCHAR(300);
    DECLARE p_shedid INT;
    DECLARE x INT;
	DECLARE i INT;
    DECLARE j INT;
    DECLARE p_mortalityid INT;
    DECLARE material_itemid INT;
    DECLARE material_itembatch VARCHAR(300);
    DECLARE material_quantity INT;
	SET @row_number = 0;
    SET @row_number1 = 0;
	SET @reccount = 0;
    SET @consumptionreccount = 0;
	SET x = 1;
    SET i = 1;
    SET j = 1;
    SET @materialissue_outid = null;
    SET @materialissuedetail_outid = null;
    SET @movement_outid = null;
    SET @consumptionissue_outid = null;
	SET @birdvalue = null;
    SET @livebirdcost = null;
	SET @materialtransfer_outid = null;
    SET @tocullswarehouseid = null;
    SET @tocullswarehousebinid = null;
	SET @@sql_mode = '';
    
    SELECT LDT.layerbatchid, LS.warehousebinid, LDT.companyid, LDT.approvedby, LS.warehouseid, LBP.grpono,LDT.transactiondate, LDT.shedid 
    INTO p_layerbatchid, p_shedwarehousebinid, p_companyid, p_userid, p_warehouseid, p_grpoid,p_transactiondate,p_shedid
    FROM layerdailytransaction LDT
    LEFT JOIN layershed LS ON LDT.shedid = LS.id
    LEFT JOIN layerbatchplacement LBP ON LDT.layerbatchid = LBP.layerbatchid
    WHERE LDT.id = p_dailytransactionid;
    -- live bird cost
    SELECT fun_layerlive_biredcost(p_layerbatchid,p_companyid,p_transactiondate) INTO @livebirdcost;
    
    -- getdefault warehouse for culls transfer
    SELECT LS.defaultcullswhid,WB.id  INTO @tocullswarehouseid,@tocullswarehousebinid 
		FROM layersetting LS
		LEFT JOIN warehousebin WB ON WB.warehouseid = LS.defaultcullswhid AND WB.isdefault = 1
		WHERE LS.companyid = p_companyid; 
	-- save issue parent record
	 CALL spc_materialissue_save(
			null, 
			p_transactiondate, 
			385, 
			p_layerbatchid, 
			362, 
			'layer daily culls and mortality', 
			p_userid, 
            p_warehouseid,
            p_shedwarehousebinid,
            null, 
			null, 
            p_companyid, 
            p_userid, 
            @materialissue_outid
		);
        
        -- inventory transfer for culls
        call `spc_materialtransfer_save`(
		NULL, 505,505,582,p_transactiondate, p_transactiondate,'layer daily culls',
		p_warehouseid,p_shedwarehousebinid,624,
		p_layerbatchid,p_layerbatchid,NULL,p_companyid,p_userid,
		@materialtransfer_outid
		);
 
	UPDATE layerdailytransaction SET issueid = @materialissue_outid
	WHERE id = p_dailytransactionid;
        
	-- select mortality and culls detail for given daily transaction and issue them
 SET @reccount1 = 0;
   SET x = 1;
   SET @row_number = 0;
 
	DROP TEMPORARY TABLE IF EXISTS tempmortality;
		CREATE TEMPORARY TABLE tempmortality
		SELECT 
			LDM.id,
			LDM.itemid, 
			I.itemname, 
			I.itemunitid,
			todaymortality, 
			todayculls, 
            sexingerrorquantity,
			(@row_number := @row_number + 1) as `rank`
            
		FROM layerdailymortality LDM
		LEFT JOIN item I ON LDM.itemid = I.id
		WHERE LDM.layerdailytransactionid = p_dailytransactionid;
    
	 
		SELECT COUNT(*) INTO @reccount1 FROM tempmortality;
    
	WHILE x  <= @reccount1 DO
			
		SET p_mortalityid = null;
		SET p_itemid = null;
		SET p_itemname = null;
		SET p_itemunitid = null;
		SET p_todaymortality = null;
		SET p_quantity = null;
        SET p_todayculls = null;
        SET p_sexingerrorquantity = null;
        SET j = 0;
		SET @reccount = 0;
   
            SELECT id, itemid, itemname, itemunitid, todaymortality, todayculls, sexingerrorquantity,(IFNULL(todaymortality,0)+IFNULL(sexingerrorquantity,0))
            INTO p_mortalityid, p_itemid, p_itemname, p_itemunitid, p_todaymortality, p_todayculls, p_sexingerrorquantity,p_quantity
            FROM tempmortality WHERE `rank` = x;
        
        -- select itembatch and quantity from material movement for current item
        DROP TEMPORARY TABLE IF EXISTS mortempitembatch;
        
		CREATE TEMPORARY TABLE mortempitembatch
        
        SELECT itemid, itembatch, stockin, transactiondate,
        fnc_itembatchstockout(itemid, IFNULL(itembatch,''), p_warehouseid, p_shedwarehousebinid) as stockout,
        (@row_number1 := @row_number1 + 1) as recordrank 
       FROM(
    
			SELECT itemid, itembatch,SUM(quantity) as stockin,transactiondate
			FROM materialmovement
			WHERE 
				itemid = p_itemid AND
				companyid = p_companyid AND
                towarehouseid = p_warehouseid AND
				towarehousebinid = p_shedwarehousebinid AND
				transactiontypeid in (681,682,684,685) AND itembatch IS NOT NULL
				GROUP BY itemid, itembatch
               
			) stocktable order by transactiondate asc; 
      
		SELECT COUNT(*) INTO @reccount FROM  mortempitembatch;
        
        WHILE j  < @reccount DO
        
			SET @issuequantity = 0;
			
			SELECT itemid, itembatch, (stockin - stockout) as quantity
			INTO  material_itemid, material_itembatch, material_quantity
			FROM  mortempitembatch 
            WHERE recordrank =j+1;
			
             IF (p_quantity > 0 || p_todayculls > 0) THEN
				
                IF(material_quantity > 0) THEN
					IF (material_quantity >= p_quantity) THEN
						SET @issuequantity = p_quantity;
						SET p_quantity = 0;
					ELSE 
                    
						SET @issuequantity = material_quantity;
                        SET p_quantity = p_quantity - material_quantity;
                    
					-- ELSE
						-- SET @issuequantity = p_quantity - material_quantity;
					END IF;
                    
				END IF;
                if (@issuequantity >0) then
					SELECT fun_layer_bird_purchasecost(p_layerbatchid,p_companyid,p_transactiondate) INTO @birdvalue;
					CALL spc_materialissuedetail_save(
					null, @materialissue_outid, p_itemid, p_itemname, @issuequantity,@birdvalue, (@issuequantity * @birdvalue), p_itemunitid, material_itembatch, p_companyid, p_userid, @materialissuedetail_outid);
				
					CALL spc_materialmovement_save(
							null, p_itemid, material_itembatch, 683, @materialissue_outid,p_transactiondate, @issuequantity, p_warehouseid, p_shedwarehousebinid, null, null, (@issuequantity * @birdvalue), p_companyid, p_userid, @movement_outid
					);
					SET @out_transferdetailid = NULL;
					if(p_todayculls > 0) THEN
						CALL spc_materialtransferdetail_save(
							NULL, @materialtransfer_outid, @tocullswarehouseid,@tocullswarehousebinid,p_itemid, (SELECT itemname FROM item WHERE id = p_itemid),
							0, p_todayculls,(SELECT refname FROM `reference` WHERE id = p_itemid),material_itembatch,
							p_userid, p_companyid, @out_transferdetailid
						);
					end if;
					CALL spc_layer_birdcost_save(null,p_itemid,@issuequantity,p_transactiondate,@livebirdcost,(@issuequantity * @livebirdcost),material_itembatch,p_layerbatchid,p_shedid,p_dailytransactionid,p_companyid);
  
					UPDATE layerdailymortality SET issuedetailid = @materialissuedetail_outid
					WHERE id = p_mortalityid;
              ELSE IF(@issuequantity = 0 && p_todayculls > 0)
              THEN
				CALL spc_materialtransferdetail_save(
					NULL, @materialtransfer_outid, @tocullswarehouseid,@tocullswarehousebinid,p_itemid, (SELECT itemname FROM item WHERE id = p_itemid),
					0, p_todayculls,(SELECT refname FROM `reference` WHERE id = p_itemid),material_itembatch,
					p_userid, p_companyid, @out_transferdetailid
				);
			  END IF;
              END IF;
			END IF;
            
       
        	SET  j = j + 1; 
	    END WHILE;
       
       DROP TEMPORARY TABLE mortempitembatch;
		-- UPDATE breederdailyconsumption SET issuedetailid = @materialissuedetail_outid
        -- WHERE id = p_consumptionid;
            
		SET  x = x + 1; 
	END WHILE;
	
   -- select daily consumption for given daily transaction and issue them itembatch wise
   
  SET @reccount = 0;
   SET x = 1;
   SET @row_number = 0;
 
   
	DROP TEMPORARY TABLE IF EXISTS tempconsumption;
        
	CREATE TEMPORARY TABLE tempconsumption
	SELECT 
		LDC.id,
		LDC.itemid, 
		I.itemname, 
		I.itemunitid,
        SUM(itemvalue) as itemvalue,
		SUM(consumptionquantity) as consumptionquantity,
		(@row_number := @row_number + 1) as `rank`
	FROM layerdailyconsumption LDC
	LEFT JOIN item I ON LDC.itemid = I.id
	WHERE LDC.layerdailytransactionid = p_dailytransactionid  group by LDC.itemid;
	 
	SELECT COUNT(*) INTO @consumptionreccount FROM tempconsumption;
    
    
	WHILE x  <= @consumptionreccount DO
			
		SET p_consumptionid = null;
		SET p_itemid = null;
		SET p_itemname = null;
		SET p_itemunitid = null;
		SET p_unitcost = null;
		SET p_itemvalue = null;
		SET p_quantity = null;
        SET i = 0;
		SET @reccount = 0;
        SET @row_number1 = 0;
   
		SELECT id, itemid, itemname, itemunitid, consumptionquantity,itemvalue
		INTO p_consumptionid, p_itemid, p_itemname, p_itemunitid, p_quantity,p_itemvalue
		FROM tempconsumption WHERE `rank` = x;
	
        -- select itembatch and quantity from material movement for current item
        DROP TEMPORARY TABLE IF EXISTS tempitembatch;
		CREATE TEMPORARY TABLE tempitembatch
        
        SELECT itemid, itembatch, stockin, unitcost,
        fnc_itembatchstockout(itemid, IFNULL(itembatch,''), p_warehouseid,p_shedwarehousebinid) as stockout,
        (@row_number1 := @row_number1 + 1) as recordrank 
       FROM(
    
			SELECT itemid, itembatch, SUM(quantity) as stockin,(SUM(itemvalue)/SUM(quantity))as unitcost,transactiondate
			FROM materialmovement
			WHERE 
				itemid = p_itemid AND
				companyid = p_companyid AND
                towarehouseid = p_warehouseid AND
				towarehousebinid = p_shedwarehousebinid AND
				transactiontypeid in (681,682,684,685) AND itembatch IS NOT NULL
				GROUP BY itemid, itembatch
			) stocktable order by transactiondate asc; 
        
		SELECT COUNT(*) INTO @reccount FROM  tempitembatch;
        WHILE i  < @reccount DO
			SET @issuequantity = 0;
			
			SELECT itemid, itembatch, (stockin - stockout) as quantity,unitcost
			INTO  material_itemid, material_itembatch, material_quantity,p_unitcost
			FROM  tempitembatch 
			 WHERE recordrank = i+1;
			
             IF (p_quantity > 0 ) THEN
				
                IF(material_quantity > 0) THEN
					IF (material_quantity >= p_quantity) THEN
						SET @issuequantity = p_quantity;
						SET p_quantity = 0;
					ELSE 
                    
						SET @issuequantity = material_quantity;
                        SET p_quantity = p_quantity - material_quantity;
                    
					-- ELSE
						-- SET @issuequantity = p_quantity - material_quantity;
					END IF;
				END IF;
                
                 if (@issuequantity >0) then
                  CALL spc_materialissuedetail_save(null, @materialissue_outid, p_itemid, p_itemname, @issuequantity, p_unitcost,(@issuequantity*p_unitcost), p_itemunitid, material_itembatch, p_companyid, p_userid, @materialissuedetail_outid);
				  CALL spc_materialmovement_save(null, p_itemid, material_itembatch, 683, @materialissuedetail_outid, p_transactiondate, @issuequantity, p_warehouseid, p_shedwarehousebinid, null, null,(@issuequantity*p_unitcost), p_companyid, p_userid,@movement_outid);
				  CALL spc_layer_birdcost_save(null,p_itemid,@issuequantity ,p_transactiondate,p_unitcost,(@issuequantity * p_unitcost),p_itembatch,p_layerbatchid,p_shedid,p_dailytransactionid,p_companyid);
				 -- CALL spc_consumptionissue_save(null, p_itemid, p_consumptionid, @materialissuedetail_outid, @consumptionissue_outid);
						 
				 UPDATE layerdailyconsumption SET issuedetailid = @materialissuedetail_outid
				WHERE id = p_consumptionid;
					
              END IF;
            END IF;
            
        	SET  i = i + 1; 
	    END WHILE;
       
		DROP TEMPORARY TABLE tempitembatch;
       
			SET  x = x + 1; 
	END WHILE;
	DROP TEMPORARY TABLE tempconsumption;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailytransaction_laying_save_je`(
IN p_layerdailytransactionid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS templayerconsumption;
    DROP TABLE IF EXISTS templayermortality;
    
    BEGIN 
        
        -- Journal entry detail for WIP bird
		   SET @WIPledgerid = null;
		   SET @mortalityledgerid = null;
           SET @feedledgerid = null;
           SET @vaccineledgerid = null;
           SET @vitaminledgerid = null;
           SET @medicineledgerid = null;
           SET @cogsledgerid = null;
           SET @femalechickscost = null;
		   SET @layerbatchid = null;
		   SET @transactiondate = null;
           SET @defaultfemalechickid = null;
		   SET @shedid = null;
		   
		   SELECT WIPledgerid,medicineledgerid,feedledgerid,vaccineledgerid, vitaminledgerid, mortalityledgerid
		   INTO @WIPledgerid, @medicineledgerid, @feedledgerid, @vaccineledgerid, @vitaminledgerid, @mortalityledgerid 
		   FROM layersetting LIMIT 1;
           
           SELECT LDT.layerbatchid,LDT.transactiondate,LDT.shedid INTO @layerbatchid,@transactiondate,@shedid
           FROM layerdailytransaction LDT
           WHERE id = p_layerdailytransactionid;
           
           SELECT itemid
           INTO @defaultfemalechickid
           FROM layerbatch WHERE id = @layerbatchid;
           
            SELECT fun_layer_bird_purchasecost(@layerbatchid,p_companyid,@transactiondate) INTO @biredprice;
           
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
                NULL,
                1300,
                NULL,
                @transactiondate,
                NULL,
				(SELECT branchid FROM location WHERE id = (SELECT locationid FROM layerdailytransaction WHERE id = p_layerdailytransactionid limit 1)),
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                725,
				NULL,
                'Layer daily transaction JE',
                NULL,
                NULL,
                NULL,
                p_layerdailytransactionid,
                'Layer daily transaction JE',
                p_companyid,
                p_userid,
                @jeid
           );
   
   
			-- JE for layer daily consumption
			SET @row_number = 0;
   
			CREATE TEMPORARY TABLE templayerconsumption
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemledgerid, itemid FROM(
            
				SELECT itemvalue as totalcost,
                (SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                itemid
                FROM layerdailyconsumption 
                WHERE layerdailytransactionid = p_layerdailytransactionid
                
			) as tbllayerdailydetail;
            
            
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM templayerconsumption INTO n;
				
					WHILE i<n DO 
                    
						SET @totalcost = null;
                        SET @itemledgerid = null;
						SET @itemid = null;
						select totalcost, itemledgerid, itemid into @totalcost, @itemledgerid, @itemid from templayerconsumption where num = i+1;
                    
                         -- Credit to consumed item - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@itemledgerid,
							0,
                            NULL,
							@layerbatchid,
                            NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							0,
							@totalcost,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Layer daily transaction',
							p_companyid,
							p_userid,
							@jedetailid1
						 );
						
						SET i = i + 1;
					END WHILE;
				End;
                
                -- JE for layer daily consumption for feed
			SET @row_number = 0;
			DROP TABLE IF EXISTS tempfeedconsumption;
			CREATE TEMPORARY TABLE tempfeedconsumption
			
            SELECT (@row_number :=@row_number + 1) AS num, totalcost, itemid FROM(
            
				SELECT itemvalue as totalcost,
                itemid
                FROM layerdailyconsumption 
                WHERE layerdailytransactionid = p_layerdailytransactionid
                AND consumptiontypeid = 1149
                
			) as tblfeeddailydetail;
            
            
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempfeedconsumption INTO n;
				
					WHILE i<n DO 
                    
						SET @totalcost = null;
						SET @itemid = null;
						select totalcost, itemid into @totalcost, @itemid from tempfeedconsumption where num = i+1;
                    
                         
                         
                         -- Debit to feedledgerid - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@feedledgerid,
							0,
                            NULL,
							@layerbatchid,
							NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
							@totalcost,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Layer feed daily transaction ',
							p_companyid,
							p_userid,
							@jedetailid
						 );
						
						SET i = i + 1;
					END WHILE;
				End;
                
                
                      -- JE for layer daily consumption for medicine
			SET @row_number = 0;
			DROP TABLE IF EXISTS tempmedconsumption;
			CREATE TEMPORARY TABLE tempmedconsumption
			
            SELECT (@row_number :=@row_number + 1) AS num, totalcost, itemid FROM(
            
				SELECT itemvalue as totalcost,
                itemid
                FROM layerdailyconsumption 
                WHERE layerdailytransactionid = p_layerdailytransactionid
                AND consumptiontypeid = 1150
                
			) as tblmeddailydetail;
            
            
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempmedconsumption INTO n;
				
					WHILE i<n DO 
                    
						SET @totalcost = null;
						SET @itemid = null;
						select totalcost, itemid into @totalcost, @itemid from tempmedconsumption where num = i+1;
                    
                         
                         
                         -- Debit to feedledgerid - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@medicineledgerid,
							0,
                            NULL,
							@layerbatchid,
							NULL,
                            NULL,
                            NULL,
                            NULL,
                            NUll,
							@totalcost,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Layer feed daily transaction ',
							p_companyid,
							p_userid,
							@jedetailid
						 );
						
						SET i = i + 1;
					END WHILE;
				End;
                
                                -- JE for layer daily consumption for vaccine
			SET @row_number = 0;
			DROP TABLE IF EXISTS tempvacconsumption;
			CREATE TEMPORARY TABLE tempvacconsumption
			
            SELECT (@row_number :=@row_number + 1) AS num, totalcost, itemid FROM(
            
				SELECT itemvalue as totalcost,
                itemid
                FROM layerdailyconsumption 
                WHERE layerdailytransactionid = p_layerdailytransactionid
                AND consumptiontypeid = 1151
                
			) as tblvacdailydetail;
            
            
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempvacconsumption INTO n;
				
					WHILE i<n DO 
                    
						SET @totalcost = null;
						SET @itemid = null;
						select totalcost, itemid into @totalcost, @itemid from tempvacconsumption where num = i+1;
                    
                         
                         
                         -- Debit to feedledgerid - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@vaccineledgerid,
							0,
                            NULL,
							@layerbatchid,
							NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
							@totalcost,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Layer feed daily transaction ',
							p_companyid,
							p_userid,
							@jedetailid
						 );
						
						SET i = i + 1;
					END WHILE;
				End;
                                      -- JE for layer daily consumption for vitamin
			SET @row_number = 0;
			DROP TABLE IF EXISTS tempvitaconsumption;
			CREATE TEMPORARY TABLE tempvitaconsumption
			
            SELECT (@row_number :=@row_number + 1) AS num, totalcost, itemid FROM(
            
				SELECT itemvalue as totalcost,
                itemid
                FROM layerdailyconsumption 
                WHERE layerdailytransactionid = p_layerdailytransactionid
                AND consumptiontypeid = 1152
                
			) as tblvitdailydetail;
            
            
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempvitaconsumption INTO n;
				
					WHILE i<n DO 
                    
						SET @totalcost = null;
						SET @itemid = null;
						select totalcost, itemid into @totalcost, @itemid from tempvitaconsumption where num = i+1;
                    
                         
                         
                         -- Debit to feedledgerid - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@vitaminledgerid,
							0,
                            NULL,
							@layerbatchid,
							NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
							@totalcost,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Layer feed daily transaction ',
							p_companyid,
							p_userid,
							@jedetailid
						 );
						
						SET i = i + 1;
					END WHILE;
				End;
                
                
                
                
                -- JE for layerbatchid daily mortality
                
                SET @row_number1 = 0;
   
				CREATE TEMPORARY TABLE templayermortality
				
				SELECT (@row_number1:=@row_number1 + 1) AS num1, quantity, itemledgerid, itemid FROM(
				
					SELECT (todayculls + todaymortality + sexingerrorquantity) as quantity,
					(SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
					itemid
					FROM layerdailymortality 
					WHERE layerdailytransactionid = p_layerdailytransactionid
					
				) as tbllayerdaily1detail1;
				
				
				
				BEGIN
					DECLARE n1 INT DEFAULT 0;
					DECLARE j INT DEFAULT 0;
					SELECT COUNT(*) FROM templayermortality INTO n1;
					
						WHILE j<n1 DO 
						
							SET @quantity = null;
							SET @itemledgerid1 = null;
							SET @itemid1 = null;
							select quantity, itemledgerid, itemid into @quantity, @itemledgerid1, @itemid1 from templayermortality where num1 = j+1;
						
							-- insert JE detail
							 
							 -- Credit to culls and mortality item - Ledger
							 
							 SET @jedetailid3 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
                                NULL,
								@layerbatchid,
								NULL,
                                NULL,
								NULL,
								NULL,
                                NULL,
								0,
								(@quantity * @biredprice),
								NULL,
								NULL,
								NULL,
								@itemid1,
								NULL,
								'Layer daily mortality and culls',
								p_companyid,
								p_userid,
								@jedetailid3
							 );
                             
                             -- Debit to COGS - Ledger
							
							 SET @jedetailid2 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@mortalityledgerid,
								0,
                                NULL,
								@layerbatchid,
								NULL,
                                NULL,
								NULL,
								NULL,
                                NUll,
								(@quantity * @biredprice),
								0,
								NULL,
								NULL,
								NULL,
								@itemid1,
								NULL,
								'Layer daily mortality and culls',
								p_companyid,
								p_userid,
								@jedetailid2
							 );
							
							SET j = j + 1;
						END WHILE;
					End;
		END;
   --  call spc_layerdailytransaction_birdratediff_save_je(p_layerdailytransactionid,p_companyid,p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailytransaction_save`(
	IN p_id INT,
    IN p_locationid INT(11),
    IN p_shedid INT,
    IN p_layerbatchid INT,
    IN p_createdby INT,
    IN p_transactiondate DATE,
    IN p_approvedby INT,
    IN p_approvaldate DATE,
    IN p_statusid INT,
    IN p_remark VARCHAR(500),
    IN p_placementdate DATE,
    IN p_issueid INT,
	IN p_userid INT,
    IN p_companyid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;
     
	IF EXISTS(
		SELECT id from layerdailytransaction where layerbatchid = p_layerbatchid AND transactiondate = p_transactiondate AND shedid = p_shedid
				AND (
						(NULLIF(p_id, 0) IS NULL)
						-- OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id)
                    )
            
		) THEN BEGIN
        
		SELECT -1 INTO out_id;
	
	END;
            
    ELSEIF EXISTS(
		 SELECT id from layerdailytransaction where statusid = 821
			 AND (
				 (NULLIF(p_id, 0) IS NULL)
				    -- OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id)
				 )
            
		 ) THEN  BEGIN
        
	 SELECT -2 INTO out_id;
	
	 END;
    
    ELSE
    
    BEGIN
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
		
        IF (p_statusid = 822) THEN
			SET p_approvaldate = NOW();
        END IF;
        
        INSERT INTO layerdailytransaction 
				(locationid,
                 shedid, 
				 layerbatchid, 
                 createdby, 
                 transactiondate, 
                 approvedby, 
                 approvaldate, 
                 statusid, 
                 remark, 
                 placementdate,
                 issueid,
                 companyid)
			VALUES 
				(p_locationid,
                 p_shedid, 
                 p_layerbatchid, 
                 p_createdby, 
                 p_transactiondate, 
                 p_approvedby, 
                 p_approvaldate, 
                 p_statusid,
                 p_remark, 
                 p_placementdate,
                 @materialissue_outid,
                 p_companyid);
	  
      SET @action = 'INSERT';
        
    ELSE
    
		UPDATE  layerdailytransaction
				SET locationid = p_locationid,
                shedid = p_shedid, 
                layerbatchid = p_layerbatchid,
                transactiondate = p_transactiondate,
                approvedby = p_approvedby,
                approvaldate = p_approvaldate,
                statusid = p_statusid,
                remark = p_remark,
                issueid = p_issueid,
                placementdate = p_placementdate,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
             
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
     CALL spc_commonlog_save(p_companyid, 'layerdailytransaction', out_id, @action, p_userid);
  
  END;
   
   END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailytransaction_search`(
	IN p_companyid INT
)
BEGIN
    
    SELECT
			LT.id,
            LT.shedid,
            LS.shedname,
            LT.layerbatchid,
            LB.batchname,
            DATE_FORMAT( LT.transactiondate,'%d/%m/%Y') as transactiondate,
            R.refname as `status`
		
    FROM
		layerdailytransaction LT
		LEFT JOIN layershed LS ON LT.shedid = LS.id
        LEFT JOIN layerbatch LB ON LT.layerbatchid = LB.id
        LEFT JOIN `reference` R ON LT.statusid = R.id
    
	WHERE
		LT.companyid = p_companyid
        ORDER BY LT.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailytransaction_select`(
	IN p_id INT
)
BEGIN
    
    -- select layer daily transaction details
    SELECT
		  LDT.id,
          shedid,
          LS.warehouseid as warehouseid,
          LS.warehousebinid,
          LS.shedname,
          LDT.layerbatchid,
          L.locationcode,
          L.locationname,
          LB.batchname,
		  DATE_FORMAT(LDT.transactiondate,'%d/%m/%Y') as transactiondate,
		  LDT.statusid,
          R.refname as `status`,
          U.fullname as createdbyname,
          LDT.remark,
          LDT.companyid,
          LDT.createdby,
		  LDT.createdby as userid,
          LDT.issueid,
          LDT.placementdate,
          LB.locationid,
          LF.phasename as phasestatusname
          
    FROM
		layerdailytransaction LDT
		LEFT JOIN layershed LS ON LDT.shedid = LS.id
        LEFT JOIN layerbatch LB ON LDT.layerbatchid = LB.id
        LEFT JOIN `reference` R ON LDT.statusid = R.id
        LEFT JOIN `user` U ON LDT.createdby = U.id
        LEFT JOIN location L ON LB.locationid = L.id
        LEFT JOIN layerbatchplacement LBP ON LDT.layerbatchid = LBP.layerbatchid
        LEFT JOIN layerphase LF on LBP.phasestatusid = LF.id

	WHERE
		 LDT.id = p_id;
         
         
	-- select breeder daily transaction other details
    
    SELECT
			id,
            layerdailytransactionid,
            lighton,
            lightoff,
            duration,
            temperature,
            humidity,
            waterconsumption,
            companyid,
            (SELECT createdby FROM layerdailytransaction WHERE id = p_id) as userid 
    
    FROM
		layerdailyotherdetail 
        
	WHERE
		layerdailytransactionid = p_id;
        
	
	-- select layer daily culls-mortality details
  
    SELECT
			LDM.id,
            LDM.layerdailytransactionid,
            LDM.itemid,
            I.itemcode,
            I.itemname,
            LDM.shedlineid,
            LSL.linename,
            LDM.avgweight,
            LDM.todaymortality,
            LDM.mortalityreasonid,
            LR1.reason as mortalityreason,
            LDM.todayculls,
            LDM.cullsreasonid,
            LDM.sexingerrorquantity,
            LR2.reason as cullsreason,
            LDM.companyid,
         
           fnc_linewise_layer_chickslivestock(LDM.shedlineid, LDM.itemid, LDM.layerdailytransactionid) as instock,
           
         
          fnc_linewise_layer_chickslivestock(LDM.shedlineid, LDM.itemid, LDM.layerdailytransactionid) as instockforref,
            LDM.issuedetailid
            
	FROM layerdailymortality LDM
    LEFT JOIN layerreasons LR1 ON LDM.mortalityreasonid = LR1.id
    LEFT JOIN layerreasons LR2 ON LDM.cullsreasonid = LR2.id
    LEFT JOIN item I ON LDM.itemid = I.id
    LEFT JOIN layershedline LSL ON LDM.shedlineid = LSL.id
    
    WHERE
		LDM.layerdailytransactionid = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerdailytransaction_updatebatchbalance`(
	IN p_layerdailytransactionid INT(11),
    OUT out_id INT
)
BEGIN
    
    DECLARE p_layerbatchid INT;
    DECLARE p_shedid INT;
    DECLARE p_shedlineid INT;
	DECLARE p_itemid INT;
	DECLARE p_todaymortality INT;
	DECLARE p_todayculls INT;
    DECLARE p_sexingerrorquantity INT;
    DECLARE p_quantity INT;
	DECLARE x INT;
	SET @reccount = 0;
    SET @row_number = 0;
	SET x = 1;
    
    
	 DROP TEMPORARY TABLE IF EXISTS tempdailymortality;
        
		CREATE TEMPORARY TABLE tempdailymortality
        
		SELECT 
			LDT.layerbatchid,
            LDT.shedid,
            LDM.shedlineid,
			LDM.itemid, 
			todaymortality, 
			todayculls, 
            sexingerrorquantity,
			(@row_number := @row_number + 1) as `rank`
            
		FROM layerdailymortality LDM
		LEFT JOIN item I ON LDM.itemid = I.id
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
		WHERE LDM.layerdailytransactionid = p_layerdailytransactionid;
	 
		SELECT COUNT(*) INTO @reccount FROM tempdailymortality;
	 
		WHILE x  <= @reccount DO
    
			SET p_layerbatchid = null;
            SET p_shedid = null;
            SET p_shedlineid = null;
            SET p_itemid = null;
            SET p_todaymortality = null;
            SET p_todayculls = null;
            SET p_sexingerrorquantity = null;
            SET p_quantity = 0;
            
			SELECT layerbatchid, shedid, shedlineid, itemid, todaymortality, todayculls, sexingerrorquantity
            INTO p_layerbatchid, p_shedid, p_shedlineid, p_itemid, p_todaymortality, p_todayculls, p_sexingerrorquantity
            FROM tempdailymortality WHERE `rank` = x;
            
            SET p_quantity = (p_todaymortality + p_todayculls+ p_sexingerrorquantity);
		
			UPDATE layerbatchbalance 
            SET 
				quantity = (quantity - p_quantity),
                updateddate = NOW()
                
            WHERE 
                layerbatchid = p_layerbatchid AND
                layershedid = p_shedid AND
                layershedlineid = p_shedlineid AND
                itemid = p_itemid AND
                quantity != 0;
                
			IF((SELECT SUM(quantity) FROM layerbatchbalance WHERE layerbatchid = p_layerbatchid AND
                layershedid = p_shedid AND
                itemid = p_itemid) = 0) THEN
                
                UPDATE layershed SET statusid = 921 WHERE id = p_shedid;
            
            END IF;
            
            SELECT LAST_INSERT_ID() INTO out_id; 
            
			SET  x = x + 1; 
            
		END WHILE;
	 
		DROP TEMPORARY TABLE tempdailymortality;
    
    
   -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederbatchbalance', out_id, 'update', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggscategory_delete`(	
IN p_id INT
)
BEGIN
	DELETE FROM layereggscategory WHERE id = p_id;
    
     CALL spc_commonlog_save(p_companyid, 'layereggscategory', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggscategory_save`(
    IN p_id INT,
    IN p_categoryname VARCHAR(200),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layereggscategory 
				(categoryname, companyid)
			VALUES 
				(p_categoryname, p_companyid);
			
            SET @action = 'INSERT';

	ELSE
    
		UPDATE layereggscategory
			SET categoryname = p_categoryname, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
	
			SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layereggscategory', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggscategory_search`(   
 IN p_companyid INT
)
BEGIN

	SELECT
		id,
		categoryname
    FROM
		layereggscategory
	WHERE
		companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggscategory_select`(	
IN p_id INT
)
BEGIN

	SELECT
		id,
		categoryname,
        companyid
	
    FROM
		layereggscategory
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggscollectiondetail_save`(IN p_Id INT(11),
	IN p_eggscollectionid INT(11),
	IN p_shedid INT(11),
	IN p_shedlineid INT(11),
    IN p_quantity INT(11),
    IN p_time VARCHAR(50),
    IN p_stdquantity INT(11),
    IN p_companyid INT(11),
    IN p_userid INT,
	OUT out_id INT
)
BEGIN
SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layereggscollectiondetail 
				(eggscollectionid, shedid, shedlineid, quantity, time, stdquantity, companyid)
			VALUES 
				(p_eggscollectionid, p_shedid, p_shedlineid, p_quantity, p_time, p_stdquantity, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE layereggscollectiondetail
        
			SET eggscollectionid = p_eggscollectionid,	
				shedid	= p_shedid,
				shedlineid	 = p_shedlineid,
				quantity = p_quantity,
                time = p_time,
                stdquantity = p_stdquantity,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
			
             
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layereggscollectiondetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggscollectiondetail_select`( 
 IN p_eggscollectionid INT ,
 IN p_companyid INT)
BEGIN

	SELECT 
		EGD.id,
        EGD.eggscollectionid,
        shedid,
        shedlineid,
        quantity,
        time,
        EGD.stdquantity,
        SL.linename,
        EGD.companyid
        
        
	FROM
		layereggscollectiondetail EGD
    
    LEFT JOIN layershedline SL ON EGD.shedlineid = SL.id
    
	WHERE
		EGD.eggscollectionid = p_eggscollectionid AND
        EGD.companyid = p_companyid; 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggscollection_batch_search`(
 IN p_companyid INT,
 IN p_locationid varchar(50)
 )
BEGIN 
SET @@sql_mode = '';
SET @location = p_locationid;

 SELECT
		  LEC.id,
		  LEC.layerbatchid,
		  LB.batchname,
		  L.locationcode,
		  L.locationname,
		  W.warehousecode,
		  W.warehousename,
		  LB.statusid,
		  REF.refname as batchstatus
          
       
    FROM
		layereggscollection LEC
        
		 LEFT JOIN layerbatch LB ON LEC.layerbatchid =LB.id AND 
         FIND_IN_SET(LB.locationid,@location) 
		 LEFT JOIN location L ON LB.locationid = L.id 
		 LEFT JOIN warehouse W ON LB.warehouseid = W.id
		 INNER JOIN `reference` REF ON REF.id = LB.statusid
	
	WHERE
        LEC.companyid = p_companyid 
        
        GROUP BY LEC.layerbatchid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggscollection_byshed_select`(IN p_shedid INT,
IN p_cpmapnyid INT
)
BEGIN

	SELECT 
		EG.id,
        EG.layerbatchid,
        EG.shedid,
        EG.createdby,
		DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as batchplacementdate,
		DATE_FORMAT(EG.collectiondate,'%d/%m/%Y') as collectiondate,
        DATE_FORMAT(EG.productionstartdate,'%d/%m/%Y') as productionstartdate,
        EG.productionweek,
        EG.approvedby,
        EG.approvaldate,
        EG.statusid,
        EG.remark,
        EG.companyid,
        S.shedname,
        REF.refname as statusname,
        LB.batchname,
		(SELECT IF( EXISTS(
             SELECT id
             FROM layereggsdistributiondetail
             WHERE eggscollectionid = EG.id AND statusid = 1110), 'YES','NO') ) as isDistributiondone
        
        
	FROM
		layereggscollection EG
		LEFT JOIN layershed S ON EG.shedid = S.id
        LEFT JOIN `reference` REF ON EG.statusid = REF.id
        LEft JOIN layerbatch LB ON EG.layerbatchid = LB.id
        LEft JOIN layerbatchplacement LBP ON EG.layerbatchid = LBP.layerbatchid
		
	WHERE
		EG.shedid = p_shedid AND
        EG.companyid = p_cpmapnyid 
        ;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggscollection_forshed`(
 IN p_layerbatchid VARCHAR(50)
 )
BEGIN
SET @@sql_mode = '';
SET @layerbatch = p_layerbatchid;
 SELECT 
    LEC.Shedid,
    LS.shedname,
    REF.refname as statusname
    
    
    FROM
		layereggscollection LEC
        
		LEFT JOIN layershed LS ON LEC.shedid = LS.id
        LEFT JOIN `reference` REF ON LEC.statusid = REF.id
	
	WHERE
        FIND_IN_SET(LEC.layerbatchid,@layerbatch) 
        group by  LEC.Shedid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggscollection_groupbydate`(
 IN p_companyid INT
)
BEGIN
SET @@sql_mode = ' ';
DROP TEMPORARY TABLE IF EXISTS tempegscollection;
CREATE TEMPORARY TABLE tempegscollection
 SELECT
	EC.id as eggscollectionid,
    DATE_FORMAT( EC.collectiondate,'%d/%m/%Y') as collectiondate,
    EC.layerbatchid,
    EC.shedid,
    EC.statusid, 
    SUM(ECD.quantity) AS totalquantity,
    R.refname as statusname,
    LB.batchname,
    LS.shedname
  --  R1.refname as ledstatusname
    
FROM 
	layereggscollection EC

INNER JOIN layereggscollectiondetail ECD ON ECD.eggscollectionid = EC.id
 LEFT JOIN `reference` R ON EC.statusid = R.id
 LEFT JOIN layerbatch LB ON EC.layerbatchid= LB.id
 LEFT JOIN layershed LS ON EC.shedid= LS.id 
-- LEFT JOIN layereggsdistributiondetail LECD ON LECD.eggscollectionid =  EC.id
 -- LEFT JOIN `reference` R1 ON R1.id = LECD.statusid
 
WHERE EC.statusid = 1091 AND
EC.companyid = p_companyid
GROUP BY EC.id,
    EC.collectiondate,
    EC.layerbatchid,
    EC.shedid,
    EC.statusid, 
    R.refname
    
 ORDER by EC.id desc;
 

SELECT TBC.eggscollectionid,TBC.collectiondate,TBC.layerbatchid,TBC.shedid,TBC.statusid,TBC.totalquantity,TBC.statusname,
	TBC.batchname,TBC.shedname,R1.refname as ledstatusname FROM tempegscollection TBC 
    
	LEFT JOIN layereggsdistributiondetail LECD ON LECD.eggscollectionid =  TBC.eggscollectionid
	LEFT JOIN `reference` R1 ON R1.id = LECD.statusid
    GROUP BY TBC.eggscollectionid
    
    ORDER by TBC.eggscollectionid desc;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggscollection_report`(
IN p_layerbatchid VARCHAR(200),
IN p_shedid VARCHAR(200),
IN p_fromdate DATE,
IN p_todate DATE,
IN p_frequency VARCHAR(50),
IN p_companyid INT


)
BEGIN
SET @@sql_mode = ' ';
    SET @layerbatchid = p_layerbatchid;
    SET @shedid = p_shedid;
	SET @defaulttableeggsitemid = null;
	SET @defaultcrackedeggsitemid = null;
	SET @defaultdamageeggsitemid = null;
	SET @defaultpulleteggsitemid = null;
    SET @defaultpulleteggsitemtype = 1132;
    SET @tableqty = NULL;
	SET @crackedqty = NULL;
	SET @damageqty = NULL;
	SET @pulletqty = NULL;
    
    SELECT  
		defaulttableeggsitemid,defaultcrackedeggsitemid,
		defaultdamageeggsitemid,defaultpulleteggsitemid
		INTO @defaulttableeggsitemid,@defaultcrackedeggsitemid,
		@defaultdamageeggsitemid, @defaultpulleteggsitemid
        
	FROM
		layersetting
        
        WHERE 
			companyid = p_companyid limit 1;
            
         
          
          
if(p_frequency = 'day')then   

 SELECT
		 SUM(LECD.quantity) as collectionqty,
		 SUM(LECD.quantity) as Production,
         DATE_FORMAT( LEC.collectiondate,'%d/%m/%Y') as collectiondate,
		E.employeename as Employeename
		 
       
    FROM
		layereggscollection LEC
        
		 LEFT JOIN layereggscollectiondetail LECD ON LECD.eggscollectionid = LEC.id 
		 LEFT JOIN employee E ON E.id = LEC.createdby
	
		WHERE
		FIND_IN_SET(  LEC.layerbatchid,@layerbatchid) AND
        FIND_IN_SET( LEC.shedid,@shedid) AND
		LEC.collectiondate BETWEEN p_fromdate AND p_todate AND
        LEC.companyid = p_companyid AND
        LEC.statusid = 1091
		group by LEC.collectiondate ;

 

         
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(
num INT(11),
VariencePerDiff DECIMAL(9,3),
itemid INT(11),
itemgroupid INT(11),
itemname VARCHAR(200),
itemnameper VARCHAR(200),
eggscollectionid INT(11),
Collection_Date VARCHAR(200),
Ageinweek INT(11),
Ageindays INT(11),
Supervisiorname VARCHAR(200),
OpeningBird INT(11),
Production INT(11),
StdEggPro_Per decimal(9,3),
quantity VARCHAR(200),
ActProPer decimal(9,3),
/*ActPullateEgg VARCHAR(200),
ActPullateEggPer decimal(9,3),*/
variencePer decimal(9,3),
percentage VARCHAR(5000)
);



INSERT INTO tempmortality1 
 select 
    (@num:= @num+1) as num, 
    @varience as VariencePerDiff,
    -- (@num:= @num+1) as VariencePerDiff,
	ED.itemid,
    I.itemgroupid,
	-- itemid,
	REPLACE(I.itemname, ' ', '-')as itemname,
	CONCAT(REPLACE(I.itemname, ' ','-'),'Per')as itemnameper,
	ED.eggscollectionid,
	DATE_FORMAT(ED.collectiondate,'%d/%m/%Y') as Collection_Date,
    fun_batch_ageinweek_layer(ED.collectiondate,@layerbatchid) as Ageinweek,
    fun_batch_ageindayslayer(ED.collectiondate,@layerbatchid,p_companyid) as Ageindays,
	E.employeename as Supervisiorname,
	fun_lyr_transaction_date_waise_liveqty(@layerbatchid, @shedid, LB.itemid,ED.collectiondate,p_companyid) as OpeningBird,
    LCD.quantity as Production, 
	IFNULL(ROUND((LPO.hdppercent/7),2),0)as StdEggPro_Per,
	ED.quantity,
	ROUND(((LCD.quantity*100)/IFNULL(fun_lyr_transaction_date_waise_liveqty(@layerbatchid, @shedid, LB.itemid,ED.collectiondate,p_companyid),0)),2) as ActProPer,
    
	/*fun_batchshed_eggdistributionqtyitemtypewise_layer(@layerbatchid,@shedid,@defaultpulleteggsitemtype,p_fromdate,ED.collectiondate,p_companyid) as ActPullateEgg,
    ROUND(((fun_batchshed_eggdistributionqtyitemtypewise_layer(@layerbatchid,@shedid,@defaultpulleteggsitemtype,p_fromdate,ED.collectiondate,p_companyid)*100)/LCD.quantity),2) as ActPullateEggPer,*/
   
    IFNULL((IFNULL((LPO.hdppercent/7),0)-(ROUND(((LCD.quantity*100)/IFNULL(fun_lyr_transaction_date_waise_liveqty(@layerbatchid, @shedid, LB.itemid,ED.collectiondate,p_companyid),0)),2))),0)as variencePer,
	-- IF(ED.itemtypeid = @defaultpulleteggsitemtype,ROUND(((ED.quantity/ (fun_batchshed_eggdistributionqtyitemtypewise(@layerbatchid,@shedid,@defaultpulleteggsitemtype,p_fromdate,ED.collectiondate,p_companyid)))*100),2) , ROUND(((ED.quantity/ LCD.quantity)*100),2)) as percentage
    ROUND(((ED.quantity/ LCD.quantity)*100),2) as percentage
   
   

	 
	FROM layereggsdistributiondetail ED
    LEFT JOIN item I ON ED.itemid = I.id
	LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
	LEFT JOIN layereggscollection EC ON EC.id = ED.eggscollectionid
    LEFT JOIN layereggscollectiondetail LCD ON LCD.eggscollectionid = EC.id and ED.eggscollectionid
	LEFT JOIN layerbatch LB ON LB.id = EC.layerbatchid
	LEFT JOIN employee E ON E.id = EC.createdby
	LEFT JOIN layerperformanceobjective LPO ON LPO.itemid = ED.itemid
	
		
	WHERE ED.eggscollectionid in (select id from layereggscollection where  FIND_IN_SET(layerbatchid,@layerbatchid) and FIND_IN_SET(shedid,@shedid) AND statusid = 1091)
	AND ED.collectiondate BETWEEN p_fromdate AND p_todate 
	AND  ED.statusid = 1110;
    
    -- select * from tempmortality1;

 DROP TEMPORARY TABLE IF EXISTS tempmortality2;
CREATE TEMPORARY TABLE tempmortality2

(
num INT(11),
VariencePerDiff DECIMAL(9,3),
itemid INT(11),
itemgroupid INT(11),
itemname VARCHAR(200),
itemnameper VARCHAR(200),
eggscollectionid INT(11),
Collection_Date VARCHAR(200),
Ageinweek INT(11),
Ageindays INT(11),
Supervisiorname VARCHAR(200),
OpeningBird INT(11),
Production INT(11),
StdEggPro_Per decimal(9,3),
-- StdHEPro_Per decimal(9,3),
quantity VARCHAR(200),
ActProPer decimal(9,3),
-- ActHatchEgg VARCHAR(200),
-- ActHatchEggPer decimal(9,3),
variencePer decimal(9,3),
percentage VARCHAR(5000)
);

INSERT INTO tempmortality2 select * from tempmortality1;
-- select * from tempmortality2;

DROP TEMPORARY TABLE IF EXISTS tempmortality3;
CREATE TEMPORARY TABLE tempmortality3
(
num INT(11),
VariencePerDiff DECIMAL(9,3),
itemid INT(11),
itemgroupid INT(11),
itemname VARCHAR(200),
itemnameper VARCHAR(200),
eggscollectionid INT(11),
Collection_Date VARCHAR(200),
Ageinweek INT(11),
Ageindays INT(11),
Supervisiorname VARCHAR(200),
OpeningBird INT(11),
Production INT(11),
StdEggPro_Per decimal(9,3),
-- StdHEPro_Per decimal(9,3),
quantity VARCHAR(200),
ActProPer decimal(9,3),
-- ActHatchEgg VARCHAR(200),
-- ActHatchEggPer decimal(9,3),
variencePer decimal(9,3),
percentage VARCHAR(5000)
);

INSERT INTO tempmortality3
select 
T1.num,
CASE T1.num 
WHEN 1 THEN 0
ELSE (select T1.variencePer - variencePer from tempmortality2 where num+1 = T1.num)  
END as VariencePerDiff,
T1.itemid,
T1.itemgroupid,
T1.itemname,
T1.itemnameper,
T1.eggscollectionid,
T1.Collection_Date,
T1.Ageinweek,
T1.Ageindays,
T1.Supervisiorname,
T1.OpeningBird,
T1.Production,
T1.StdEggPro_Per,
-- T1.StdHEPro_Per,
T1.quantity,
T1.ActProPer,
-- T1.ActHatchEgg,
-- T1.ActHatchEggPer,
T1.variencePer,
T1.percentage
from tempmortality1 T1
-- where T1.Collection_Date !=  'NULL';
where T1.variencePer IS NOT NULL;

-- select * from tempmortality3;
SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality3;
  
 
  SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemnameper = ''',
      itemnameper,
      ''' then percentage end),0) AS `',
      itemnameper, '`'
    )
  ) INTO @sql1
FROM
  tempmortality3;
 
SET @sql = CONCAT('SELECT Collection_Date,Ageinweek,Ageindays,Supervisiorname,OpeningBird,Production,ActProPer,StdEggPro_Per,variencePer,VariencePerDiff, ', @sql,',', @sql1,' 
                  FROM tempmortality3 
                   GROUP BY Collection_Date');
                  

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

END IF;
         
         
         
		 if(p_frequency = 'week') then
     	SELECT sum(collectionqty) as collectionqty, DATE_FORMAT(week_start,'%d/%m/%Y') as week_start, DATE_FORMAT(week_end,'%d/%m/%Y') as week_end  from (
	SELECT
		 SUM(LECD.quantity) as collectionqty,
		   LEC.collectiondate, FIRST_DAY_OF_WEEK(LEC.collectiondate) AS week_start,
            fun_batch_ageinweek_layer(LEC.collectiondate,@layerbatchid) as ageinweek,
           
           DATE_ADD(FIRST_DAY_OF_WEEK(LEC.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(LEC.collectiondate))) DAY)
            AS week_end
         
    FROM
		layereggscollection LEC
        
		 LEFT JOIN layereggscollectiondetail LECD ON LECD.eggscollectionid = LEC.id 
	
	WHERE
		FIND_IN_SET(  LEC.layerbatchid,@layerbatchid) AND
        FIND_IN_SET( LEC.shedid,@shedid) AND
		LEC.collectiondate BETWEEN p_fromdate AND p_todate AND
        LEC.companyid = p_companyid AND
        LEC.statusid = 1091
		group by LEC.collectiondate, FIRST_DAY_OF_WEEK(LEC.collectiondate) ,
        DATE_ADD(FIRST_DAY_OF_WEEK(LEC.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(LEC.collectiondate))) DAY)
        
	) as temp
    group by week_start, week_end
    order by week_start;


        
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(
num INT(11),
VariencePerDiff DECIMAL(9,3),
itemid INT(11),
itemname VARCHAR(200),
itemnameper VARCHAR(200),
eggscollectionid INT(11),
Ageinweek INT(11),
OpeningBird INT(11),
week_start VARCHAR(200),
week_end varchar(200),
quantity VARCHAR(200),
percentage decimal(9,3),
Supervisiorname VARCHAR(200),
Production INT(11),
ActProPer  decimal(9,3),
-- ActHatchEgg INT(11),
-- ActHatchEggPer decimal(9,3),
StdEggPro_Per decimal(9,3),
-- StdHEPro_Per decimal(9,3),
variencePer decimal(9,3)
);

INSERT INTO tempmortality1 
select   
		(@num:= @num+1) as num, 
        -- (@num:= @num+1)as VariencePerDiff,
        @varience as VariencePerDiff,
        ED.itemid,
        REPLACE(I.itemname, ' ', '-')as itemname,
        CONCAT(REPLACE(I.itemname, ' ','-'),'Per')as itemnameper,
        ED.eggscollectionid,
		fun_batch_ageinweek_layer(LEC.collectiondate,@layerbatchid) as ageinweek,
        fun_lyr_transaction_date_waise_liveqty(@layerbatchid, @shedid, LB.itemid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),p_companyid) as OpeningBird,
       
        DATE_FORMAT(FIRST_DAY_OF_WEEK(LEC.collectiondate),'%d/%m/%Y') AS week_start,
        DATE_FORMAT(DATE_ADD(FIRST_DAY_OF_WEEK(LEC.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(LEC.collectiondate))) DAY),'%d/%m/%Y')
            AS week_end,
            ED.quantity,
	    ROUND(((ED.quantity/(fun_batchshed_eggdistributionqtytotal_lyr(@layerbatchid,@shedid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),(DATE_ADD(FIRST_DAY_OF_WEEK(ED.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK
		(ED.collectiondate))) DAY)),p_companyid)))*100),2) as percentage,
            E.employeename as Supervisiorname,
            
		fun_batchshed_eggdistributionqtytotal_lyr(@layerbatchid,@shedid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),(DATE_ADD(FIRST_DAY_OF_WEEK(ED.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK
		(ED.collectiondate))) DAY)),p_companyid) as Production,
        
		ROUND(((
        ((fun_batchshed_eggdistributionqtytotal_lyr(@layerbatchid,@shedid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),(DATE_ADD(FIRST_DAY_OF_WEEK(ED.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK
		(ED.collectiondate))) DAY)),p_companyid))/
        (fun_lyr_transaction_date_waise_liveqty(@layerbatchid, @shedid, LB.itemid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),p_companyid))
        /7)*100)),2) as ActProPer,
        IFNULL(ROUND((LPO.hdppercent/7),2),0)as StdEggPro_Per,
        (IFNULL(ROUND((LPO.hdppercent/7),2),0)-(ROUND(((
        ((fun_batchshed_eggdistributionqtytotal_lyr(@layerbatchid,@shedid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),(DATE_ADD(FIRST_DAY_OF_WEEK(ED.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK
		(ED.collectiondate))) DAY)),p_companyid))/
        (fun_lyr_transaction_date_waise_liveqty(@layerbatchid, @shedid, LB.itemid,(FIRST_DAY_OF_WEEK(ED.collectiondate)),p_companyid))
        /7)*100)),2)))as variencePer
       
		FROM layereggsdistributiondetail ED
		LEFT JOIN item I ON ED.itemid = I.id
		LEFT JOIN layereggscollection LEC ON LEC.id = ED.eggscollectionid
        LEFT JOIN layerbatch LB ON LB.id = LEC.layerbatchid
        LEFT JOIN employee E ON E.id = LEC.createdby
        LEFT JOIN layereggscollectiondetail ECD ON ECD.eggscollectionid = LEC.id -- AND ECD.shedid = ED.shedid
        LEFT JOIN layerperformanceobjective LPO ON LPO.itemid = ED.itemid
        
		WHERE ED.eggscollectionid in (select id from layereggscollection where FIND_IN_SET(layerbatchid,@layerbatchid) and FIND_IN_SET(shedid,@shedid) and statusid=1091)
		AND ED.collectiondate  BETWEEN p_fromdate AND p_todate AND  ED.statusid = 1110;
      

-- SELECT * FROM tempmortality1;

DROP TEMPORARY TABLE IF EXISTS tempmortality2;
CREATE TEMPORARY TABLE tempmortality2
(
num INT(11),
VariencePerDiff DECIMAL(9,3),
itemid INT(11),
itemname VARCHAR(200),
itemnameper VARCHAR(200),
eggscollectionid INT(11),
Ageinweek INT(11),
OpeningBird INT(11),
week_start VARCHAR(200),
week_end varchar(200),
quantity VARCHAR(200),
percentage decimal(9,3),
Supervisiorname VARCHAR(200),
Production INT(11),
ActProPer  decimal(9,3),
-- ActHatchEgg INT(11),
-- ActHatchEggPer decimal(9,3),
StdEggPro_Per decimal(9,3),
-- StdHEPro_Per decimal(9,3),
variencePer decimal(9,3)
);

INSERT INTO tempmortality2 select * from tempmortality1;
-- select * from tempmortality2;

DROP TEMPORARY TABLE IF EXISTS tempmortality3;
CREATE TEMPORARY TABLE tempmortality3

(
num INT(11),
VariencePerDiff DECIMAL(9,3),
itemid INT(11),
itemname VARCHAR(200),
itemnameper VARCHAR(200),
eggscollectionid INT(11),
Ageinweek INT(11),
OpeningBird INT(11),
week_start VARCHAR(200),
week_end varchar(200),
quantity VARCHAR(200),
percentage decimal(9,3),
Supervisiorname VARCHAR(200),
Production INT(11),
ActProPer  decimal(9,3),
-- ActHatchEgg INT(11),
-- ActHatchEggPer decimal(9,3),
StdEggPro_Per decimal(9,3),
-- StdHEPro_Per decimal(9,3),
variencePer decimal(9,3)
);

INSERT INTO tempmortality3
select 
T1.num,
CASE T1.num 
WHEN 1 THEN 0
ELSE (select T1.variencePer - variencePer from tempmortality2 where num+1 = T1.num)  
END as VariencePerDiff,
T1.itemid,
T1.itemname,
T1.itemnameper,
T1.eggscollectionid,
T1.Ageinweek,
T1.OpeningBird,
T1.week_start,
T1.week_end,
T1.quantity,
T1.percentage,
T1.Supervisiorname,
T1.Production,
T1.ActProPer,
-- T1.ActHatchEgg,
-- T1.ActHatchEggPer,
T1.StdEggPro_Per,
-- T1.StdHEPro_Per,
T1.variencePer 


from tempmortality1 T1
where T1.variencePer IS NOT NULL;

-- select * from tempmortality3;



SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality3;

SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemnameper = ''',
      itemnameper,
      ''' then percentage end),0) AS `',
      itemnameper, '`'
    )
  ) INTO @sql1
FROM
  tempmortality3;


SET @sql = CONCAT('SELECT week_start, week_end,Ageinweek,OpeningBird,Supervisiorname,Production,ActProPer,StdEggPro_Per,variencePer,VariencePerDiff, ', @sql,',',@sql1, ' 
                  FROM tempmortality3 
                   GROUP BY week_start');

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
    
	  END IF;
      
      if (p_frequency='month') then
       
     SELECT
           fun_batchshed_eggdistributionqtytotal_lyr(@layerbatchid,@shedid,MIN(LEC.collectiondate),MAX(LEC.collectiondate),p_companyid) as Quantity,
		   MONTHNAME(LEC.collectiondate) as  month,
           fun_batch_ageinweek_layer(LEC.collectiondate,@layerbatchid) as ageinweek 
           into @Quantity,@month,@ageinweek
       
    FROM
		layereggscollection LEC
        
		 LEFT JOIN layereggscollectiondetail LECD ON LECD.eggscollectionid = LEC.id 
	
	WHERE
		 FIND_IN_SET(LEC.layerbatchid,@layerbatchid) AND
        FIND_IN_SET( LEC.shedid,@shedid) AND
		LEC.collectiondate BETWEEN p_fromdate AND p_todate AND
        LEC.companyid = p_companyid AND
        LEC.statusid = 1091
		group by   MONTHNAME(LEC.collectiondate) ;
        
               
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(itemid INT(11),
itemname VARCHAR(200),
eggscollectionid INT(11),
Month VARCHAR(200),
Production INT(11),
sample INT(11),
StdEggPro_Per decimal(9,3),
-- StdHEPro_Per decimal(9,3),
quantity VARCHAR(200));

INSERT INTO tempmortality1 
select 
	 ED.itemid,
	 REPLACE(I.itemname, ' ', '-')as itemname,
	 ED.eggscollectionid,
     MONTHNAME(ED.collectiondate) as Month,
	 ECD.quantity as Production,
     @Quantity as sample,
	 (LPO.hdppercent)as StdEggPro_Per,
	 ED.quantity
      
		 FROM layereggsdistributiondetail ED
         LEFT JOIN item I ON ED.itemid = I.id
         LEFT JOIN layereggscollection EC ON EC.id = ED.eggscollectionid
         LEFT JOIN layereggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid
         LEFT JOIN layerperformanceobjective LPO ON LPO.itemid = ED.itemid
         
        
		WHERE ED.eggscollectionid in (select id from layereggscollection  where FIND_IN_SET(layerbatchid,@layerbatchid) and FIND_IN_SET(shedid,@shedid) AND  statusid = 1091)
		AND ED.collectiondate BETWEEN p_fromdate AND p_todate
		AND  ED.statusid = 1110 ;
        
      select * from tempmortality1;

DROP TEMPORARY TABLE IF EXISTS tempmortality2;
CREATE TEMPORARY TABLE tempmortality2
(
itemid INT(11),
itemname VARCHAR(200),
eggscollectionid INT(11),
Month VARCHAR(200),
Production INT(11),
sample INT(11),

-- Productionone INT(11),
StdEggPro_Per decimal(9,3),
-- StdHEPro_Per decimal(9,3),
quantity VARCHAR(200));

INSERT INTO tempmortality2 select * from tempmortality1;
-- select * from tempmortality2;


SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality1;
  
  
  
  
SET @sql = CONCAT('SELECT Month,sample as Production, ', @sql,'
                  FROM tempmortality1 
                   GROUP BY Month');

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
        
        END IF;        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggscollection_save`(
    IN p_id INT(11)	,
	IN p_layerbatchid INT(11),
	IN p_shedid INT(11),
	IN p_createdby INT(11),
	IN p_collectiondate DATE,	
	IN P_productionstartdate DATE,
	IN p_approvedby INT(11),
	IN p_approvaldate date,	
	IN p_statusid INT(11),	
	IN P_remark varchar(200),	
	IN p_companyid INT(11),
	IN p_userid INT,
	OUT out_id INT
    )
BEGIN
    SET @action = null;
    SET @defaultcoldroomwarehouseid = null;
    
    SELECT  
			defaultcoldroomwarehouseid
			INTO @defaultcoldroomwarehouseid
	FROM
		layersetting LS
    WHERE 
		LS.companyid = p_companyid limit 1;
    IF EXISTS(SELECT id FROM layeramortization WHERE layerbatchid = p_layerbatchid) THEN
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layereggscollection 
				(layerbatchid, shedid, createdby, collectiondate, productionstartdate, approvedby, 
                approvaldate, statusid, remark, companyid )
			VALUES 
				(p_layerbatchid, p_shedid, p_createdby, p_collectiondate, p_productionstartdate, p_approvedby, p_approvaldate, 
                p_statusid, p_remark, p_companyid );
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE layereggscollection
        
			SET layerbatchid = p_layerbatchid, 
				shedid = p_shedid,
                createdby = p_createdby,
				collectiondate = p_collectiondate,
				productionstartdate = p_productionstartdate,
				approvedby = p_approvedby, 
				approvaldate = p_approvaldate,
				statusid = p_statusid, 
				remark = p_remark,  
				companyid  = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
			
             
           SET @action = 'UPDATE';     
                
		-- update towarehouseid when statusid is 1091 = 'transfer & approved
        UPDATE layereggscollection SET towarehouseid = @defaultcoldroomwarehouseid where statusid = 1091;
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
   -- record log
   CALL spc_commonlog_save(p_companyid, 'eggscollection', out_id, @action, p_userid);
   ELSE
		SELECT -1 INTO out_id;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggscollection_search`(
 IN p_companyid INT
)
BEGIN
  SELECT
		EG.id,
        DATE_FORMAT( EG.collectiondate,'%d/%m/%Y') as collectiondate,
        EG.statusid,
        EG.shedid,
        R.refname as statusname,
        LS.shedname,
        EG.companyid
	
    FROM
		layereggscollection EG
        
        LEFT JOIN `reference` R ON EG.statusid = R.id
        LEFT JOIN layershed LS ON EG.shedid = LS.id
	
	WHERE
		EG.companyid = p_companyid
		
        ORDER by EG.id desc;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggscollection_select`(
IN p_collectiondate date,
IN p_id INT,
IN p_cpmapnyid INT
)
BEGIN

	SELECT 
		EG.id,
        EG.layerbatchid,
        EG.shedid,
        EG.createdby,
       fnc_getlayerplacementdate(EG.layerbatchid,p_cpmapnyid) as batchplacementdate,
		DATE_FORMAT(EG.collectiondate,'%d/%m/%Y') as collectiondate,
        DATE_FORMAT(EG.productionstartdate,'%d/%m/%Y') as productionstartdate,
        EG.productionweek,
        EG.approvedby,
        EG.approvaldate,
        EG.statusid,
        EG.remark,
        EG.companyid,
        S.shedname,
        REF.refname as statusname,
        LB.batchname
        
        
	FROM
		layereggscollection EG
		LEFT JOIN layershed S ON EG.shedid = S.id
        LEFT JOIN `reference` REF ON EG.statusid = REF.id
        LEft JOIN layerbatch LB ON EG.layerbatchid = LB.id
        LEft JOIN layerbatchplacement LBP ON EG.layerbatchid = LBP.layerbatchid
    
	WHERE
		EG.collectiondate = p_collectiondate AND
        EG.id = p_id AND
        EG.companyid = p_cpmapnyid 
        
         ORDER by EG.id desc;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggsdistributiondetail_save`(
	
    IN p_id INT(11),
	IN p_eggscollectionid INT(11),
	IN p_shedid	INT(11),
    IN p_itemtypeid INT(11),
	IN p_itemid INT(11),
	IN p_quantity INT(11),
	IN p_avgweight DECIMAL(9,3),
    IN p_statusid INT(11),
    IN p_collectiondate DATE,
    IN p_layerbatchid INT(11),
    IN p_remark VARCHAR(200),
	IN p_companyid INT(11),
    IN p_userid INT,
	OUT out_id INT
	)
BEGIN
SET @action = null;
-- create itembatch for eggsdistributiondetail
    
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
       BEGIN
        IF(p_quantity !=0) THEN
	
		INSERT INTO layereggsdistributiondetail 
				(eggscollectionid, shedid, itemtypeid, itemid, quantity, avgweight, statusid, collectiondate, layerbatchid, remark, companyid )
			VALUES 
				(p_eggscollectionid, p_shedid, p_itemtypeid, p_itemid, p_quantity, p_avgweight, p_statusid, p_collectiondate, p_layerbatchid,p_remark, p_companyid);
	  
       SELECT LAST_INSERT_ID() INTO out_id; 
    
    SET @action = 'INSERT';
    END IF;
      END;
	ELSE
        BEGIN
		   IF(p_quantity !=0) THEN
			UPDATE layereggsdistributiondetail
			
				SET eggscollectionid = p_eggscollectionid,	
					shedid = p_shedid,
					itemtypeid = p_itemtypeid,
					itemid = p_itemid,
					quantity = p_quantity,
					avgweight = p_avgweight,
					statusid  = p_statusid ,
					collectiondate = p_collectiondate,
					layerbatchid = p_layerbatchid,
					remark = p_remark,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				 
			   SET @action = 'UPDATE';    
               
                SELECT LAST_INSERT_ID() INTO out_id; 
		END IF;
	   END;       
	
    END IF;
    SELECT 0 INTO out_id; 
    
    -- update breederbatch status = 223 'complete'
    /*IF (p_statusid = 842) THEN
		UPDATE breederbatch SET statusid = 223 WHERE id = p_breederbatchid;
    END IF;*/
        
   -- record log
   
   IF(@action != null) then
   CALL spc_commonlog_save(p_companyid, 'layereggsdistributiondetail', out_id, @action, p_userid);
    
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggsdistributiondetail_select`(
  IN p_eggscollectionid INT(11),
  IN p_collectiondate DATE,
  IN p_companyid INT(11)
  )
BEGIN

    SELECT
			ED.id,
            itemtypeid,
			itemid,
            quantity,
            avgweight,
            statusid,
            I.itemname,
			REF.refname,
            ED.remark,
			ED.companyid
         
    FROM
		layereggsdistributiondetail ED
        
        LEFT JOIN item I ON ED.itemid =I.id
        LEFT JOIN `reference` REF ON ED.statusid = REF.id
   	
	WHERE
		ED.eggscollectionid = p_eggscollectionid AND
		ED.collectiondate = p_collectiondate AND
        ED.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggstandardweightandratedetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM layereggstandardweightandratedetail WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggstandardweightandratedetail_save`(
	IN p_id INT(11),
    IN p_eggstandardweightandrateid INT(11),
    IN p_weekno SMALLINT,
    IN p_standardprice DECIMAL(9,3),
    IN p_weight DECIMAL(9,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
    
		INSERT INTO layereggstandardweightandratedetail
			(eggstandardweightandrateid, weekno, standardprice,
			 weight, companyid)
		VALUES
			(p_eggstandardweightandrateid, p_weekno, p_standardprice,
			 p_weight, p_companyid);
            
		SET @action = 'INSERT';
    
    ELSE
    
		UPDATE layereggstandardweightandratedetail
        SET 
			eggstandardweightandrateid = p_eggstandardweightandrateid,
            weekno = p_weekno,
            standardprice = p_standardprice,
			weight = p_weight
            
		WHERE
			id = p_id 
			AND companyid = p_companyid;
                
		SET @action = 'UPDATE';  
    
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    -- CALL spc_commonlog_save(p_companyid, 'layereggstandardweightandratedetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggstandardweightandratedetail_search`(
	IN p_eggstandardweightandrateid INT(11)
)
BEGIN

	SELECT id,
		   eggstandardweightandrateid,
           weekno,
           standardprice,
           weight
           
	FROM layereggstandardweightandratedetail
    
    WHERE eggstandardweightandrateid = p_eggstandardweightandrateid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggstandardweightandratedetail_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT id
		   eggstandardweightandrateid,
           weekno,
           standardprice,
           weight
           
	FROM layereggstandardweightandratedetail
    
    WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggstandardweightandrate_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM layereggstandardweightandrate WHERE id = p_id;
    DELETE FROM layereggstandardweightandratedetail WHERE eggstandardweightandrateid = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggstandardweightandrate_save`(
	IN p_id INT(11),
    IN p_itemid INT(11),
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
    
		INSERT INTO layereggstandardweightandrate
			( itemid, fromdate, todate, companyid)
		VALUES
			( p_itemid, p_fromdate, p_todate, p_companyid);
            
		SET @action = 'INSERT';
    
    ELSE
    
		UPDATE layereggstandardweightandrate
        SET
			itemid = p_itemid,
            fromdate = p_fromdate,
            todate = p_todate,
			id = LAST_INSERT_ID(id)
            
		WHERE
			id = p_id 
			AND companyid = p_companyid;
                
		SET @action = 'UPDATE';  
    
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'layereggstandardweightandrate', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggstandardweightandrate_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT LESW.id,
		   LESW.itemid,
	       DATE_FORMAT(LESW.fromdate,'%d/%m/%Y') as fromdate,
           DATE_FORMAT(LESW.todate,'%d/%m/%Y') as todate,
           LESW.companyid,
           I.itemname
           
	FROM layereggstandardweightandrate LESW
    LEFT JOIN item I ON I.id = LESW.itemid
    
    WHERE LESW.companyid = p_companyid
    
    ORDER BY LESW.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layereggstandardweightandrate_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT LESW.id,
		   LESW.itemid,
           DATE_FORMAT(LESW.fromdate,'%d/%m/%Y') as fromdate,
          DATE_FORMAT(LESW.todate,'%d/%m/%Y') as todate,
           LESW.companyid,
           I.itemname,
           I.itemcode
           
	FROM layereggstandardweightandrate LESW
    LEFT JOIN item I ON I.id = LESW.itemid
    
    WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND LESW.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerfeedstandarddetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM layerfeedstandarddetail WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerfeedstandarddetail_feedconsumed_search`(
 IN p_week INT(11),
 IN p_itemid INT(11),
 IN p_layeritemid INT(11),
 IN p_companyid INT(11)
 )
BEGIN 

	SELECT LFS.id,
           feedconsumed
           
	FROM layerfeedstandard LFS
     LEFT JOIN layerfeedstandarddetail LFSD ON LFSD.layerfeedstandardid =  LFS.id
  
    WHERE 
    LFS.layeritemid = p_layeritemid AND
    LFSD.weeknumber = p_week
    AND LFSD.itemid = p_itemid AND
    LFS.companyid = p_companyid ;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerfeedstandarddetail_save`(
    IN p_id INT,
    IN p_layerfeedstandardid INT(11),
    IN p_weeknumber TINYINT(4),
    IN p_itemid INT(11),
    IN p_feedconsumed DECIMAL(9,3),
	IN p_cumulativefeed DECIMAL(9,3),
    IN p_weeklybodyweight DECIMAL(9,3),
	IN p_weeklygain DECIMAL(9,3),
    IN p_phaseid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerfeedstandarddetail 
				(layerfeedstandardid, weeknumber, itemid, feedconsumed, cumulativefeed, weeklybodyweight, weeklygain, phaseid, companyid)
			VALUES 
				(p_layerfeedstandardid, p_weeknumber, p_itemid, p_feedconsumed, p_cumulativefeed, p_weeklybodyweight, p_weeklygain, p_phaseid, p_companyid);
		
        SET @action = 'INSERT';

	ELSE
    
		UPDATE layerfeedstandarddetail
			SET layerfeedstandardid = p_layerfeedstandardid, 
				weeknumber = p_weeknumber,
				itemid = p_itemid,
                feedconsumed = p_feedconsumed,
                cumulativefeed = p_cumulativefeed,
                weeklybodyweight = p_weeklybodyweight,
                weeklygain = p_weeklygain,
                phaseid = p_phaseid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
             SET @action = 'UPDATE';   
                
	END IF;
  SELECT LAST_INSERT_ID() INTO out_id; 

	-- record log
    CALL spc_commonlog_save(p_companyid, 'layerfeedstandarddetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerfeedstandarddetail_select`(
	IN p_layerfeedstandardid INT
)
BEGIN

	SELECT
		 LFS.id,
         layerfeedstandardid,
         weeknumber,
		 itemid,
         feedconsumed,
         cumulativefeed,
         weeklybodyweight,
         weeklygain,
         phaseid,
         I.itemname,
         I.itemcode
        
	FROM
		layerfeedstandarddetail LFS
        LEFT JOIN item I ON LFS.itemid = I.id
        
	WHERE
		layerfeedstandardid = p_layerfeedstandardid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerfeedstandard_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM layerfeedstandarddetail WHERE layerfeedstandardid = p_id;
	DELETE FROM layerfeedstandard WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerfeedstandard_save`(
    IN p_id INT,
    IN p_standardname VARCHAR(200),
    IN p_layernametypeid INT(11),
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_layeritemid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerfeedstandard 
				(standardname, layernametypeid, fromdate, todate, layeritemid, companyid)
			VALUES 
				(p_standardname, p_layernametypeid, p_fromdate, p_todate, p_layeritemid, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE layerfeedstandard
			SET standardname = p_standardname, 
				layernametypeid = p_layernametypeid,
                fromdate = p_fromdate,
                todate = p_todate,
                layeritemid = p_layeritemid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'layerfeedstandard', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerfeedstandard_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 LS.id,
         LS.standardname,
		 LS.layernametypeid,
         LS.layeritemid,
         I.itemname as layeritemname,
         DATE_FORMAT(fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(todate,'%d/%m/%Y') as todate,
         LS.layeritemid
         
	FROM
		layerfeedstandard LS
        
        INNER JOIN item I ON LS.layeritemid = I.id
   	
	WHERE
		LS.companyid = p_companyid
        
	ORDER BY LS.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerfeedstandard_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 LS.id,
         LS.standardname,
		 LS.layernametypeid,
         I.itemname as layeritemname,
         LS.layeritemid,
         DATE_FORMAT(fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(todate,'%d/%m/%Y') as todate
        
	FROM
		layerfeedstandard LS
        INNER JOIN item I ON LS.layeritemid = I.id
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND LS.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerflockdetaildatareport`(
IN p_fromdate DATE,
IN p_todate DATE,
IN p_layerbatchid VARCHAR(100),
IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';

SELECT 
LB.itemid,
LB.id,
DATE_FORMAT(LDT.transactiondate ,'%d/%m/%Y') as transactiondate, 
fnc_getlayerplacementdate(LB.id,p_companyid) as placementdate,
IFNULL(fnc_calculate_totaleggslayeruptoday(LDT.transactiondate,LB.id),0) as cummuegg,
IFNULL(fnc_calculate_totaleggslayeronparticularday(LDT.transactiondate,LB.id),0),
IFNULL(fnc_batchwise_birdliveqtyondate(LB.id,LB.itemid,LDT.transactiondate,p_companyid),0)as liveqty,
((IFNULL(fnc_calculate_totaleggslayeronparticularday(LDT.transactiondate,LB.id),0)/
IFNULL(fnc_batchwise_birdliveqtyondate(LB.id,LB.itemid,LDT.transactiondate,p_companyid),0))*100) as eggper,
IFNULL(fnc_calculate_consumedquantityitemlayer_ondate(LDT.transactiondate,LB.id,LB.itemid,p_companyid),0) as feedcon,
((IFNULL(fnc_calculate_consumedquantityitemlayer_ondate(LDT.transactiondate,LB.id,LB.itemid,p_companyid),0)/
IFNULL(fnc_batchwise_birdliveqtyondate(LB.id,LB.itemid,LDT.transactiondate,p_companyid),0))*1000) as feedperbird,
IFNULL(fnc_calculate_consumedquantityitemlayer_uptodate(LDT.transactiondate,LB.id,LB.itemid,p_companyid),0) as cummufeedcon,
IFNULL(fnc_calculate_cummalefemalemortalityuptolastdate_layer(LB.id,LDT.transactiondate,LB.itemid,p_companyid),0) as cummmortality,
(IFNULL(fnc_calculate_totaleggslayeruptoday(LDT.transactiondate,LB.id),0)/
IFNULL(fnc_batchwise_birdliveqtyondate(LB.id,LB.itemid,LDT.transactiondate,p_companyid),0)) as cummeggperbird,
((IFNULL(fnc_calculate_consumedquantityitemlayer_uptodate(LDT.transactiondate,LB.id,LB.itemid,p_companyid),0)/
IFNULL(fnc_calculate_totaleggslayeruptoday(LDT.transactiondate,LB.id),0))*1000) as cummfeedperegg,
((IFNULL(fnc_calculate_cummalefemalemortalityuptolastdate_layer(LB.id,LDT.transactiondate,LB.itemid,p_companyid),0)/
IFNULL(fnc_batchwise_birdliveqtyondate(LB.id,LB.itemid,LDT.transactiondate,p_companyid),0))*100) as cummumorper


FROM layerdailytransaction LDT 
INNER JOIN layerbatch LB ON LB.id =LDT.layerbatchid
LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id -- AND EC.companyid= p_companyid

WHERE 
FIND_IN_SET(LB.id,p_layerbatchid)  AND
LDT.transactiondate BETWEEN p_fromdate AND p_todate AND
 LDT.companyid = p_companyid
 order by LDT.transactiondate;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerflockdetailreport_search`(
    IN p_layerbatchid INT(11),
    IN p_fromdate DATE,
	IN p_todate DATE,
    In p_companyid INT
 )
BEGIN
/*SELECT  LS.warehousebinid INTO @warehousebinid
FROM
			layerbatch LB
            LEFT JOIN layerdailytransaction LDT ON LDT.layerbatchid = LB.id
			LEFT JOIN layershed LS ON LS.id = LDT.shedid
            where	LDT.layerbatchid = p_layerbatchid AND
            LDT.transactiondate BETWEEN p_fromdate AND p_todate;
            
            select @warehousebinid;*/

	
	SET @defaultfemalechickid = null;
       SELECT  
		itemid
		INTO @defaultfemalechickid
	FROM
		layerbatch
        WHERE 
            id = p_layerbatchid limit 1;
            
			SELECT 
			LDT.id dailytransactionid,
            DATE_FORMAT(LDT.transactiondate ,'%d/%m/%Y') as finaltransactiondate, 
			LDT.shedid,
			LS.shedname,
            I.itemname,
			-- fun_inventorytransferinlayer(LDT.transactiondate,@warehousebinid,@defaultfemalechickid) as  femaleinqty,
			fnc_calculate_layer_received_feed(LDT.shedid, @defaultfemalechickid,LDT.transactiondate,p_companyid) as femaleinqty, /* you can use fun for any item */
			fun_inventorytransferoutlayer(LDT.transactiondate,@warehousebinid,@defaultfemalechickid) as femaleoutqty,
            fun_lyr_transaction_date_waise_liveqtyope(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid, LDT.transactiondate,p_companyid) as  femaleopeningbalance,
			fun_lyr_transaction_date_waise_liveqty(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid, LDT.transactiondate,p_companyid) as femaleclosingbalancefinal,
            fnc_lyr_femaleculls_ongivendate(LDT.id, @defaultfemalechickid) as femaleculls,
			fnc_lyr_femalemortality_ongivendate(LDT.id, @defaultfemalechickid) as femalemortality,
            fnc_lyr_femalesexingerror_ongivendate(LDT.id, @defaultfemalechickid) as sexingerrorqty,
			fnc_lyr_female_transferedquantity(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid, LDT.transactiondate) as femaletransferedquantity,
            fnc_lyr_cummulative_femaleculls(LDT.layerbatchid, LDT.shedid,@defaultfemalechickid, LDT.transactiondate) as cummalefemaleculls,
            fnc_lyr_cummulative_femalemortality(LDT.layerbatchid, LDT.shedid,@defaultfemalechickid, LDT.transactiondate) as cummalefemalemortality,
            fnc_lyr_cummulative_femalesexingerror(LDT.layerbatchid, LDT.shedid,@defaultfemalechickid, LDT.transactiondate) as cummalefemalesexingerror
	FROM
			layerbatch LB
            LEFT JOIN layerdailytransaction LDT ON LDT.layerbatchid = LB.id
            LEFT JOIN item I ON I.id = LB.itemid
			LEFT JOIN layershed LS ON LS.id = LDT.shedid
    
	WHERE 
			LDT.layerbatchid = p_layerbatchid AND
			LDT.transactiondate BETWEEN p_fromdate AND p_todate;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerflockgather_report`(
 IN p_batchid INT,
 IN p_companyid INT
 )
BEGIN
SET @@sql_mode = '';
	SET @feeditemgroupids = null;
	SET @medicineitemgroupids = null;
	SET @vaccineitemgroupids = null;
	SET @vitaminitemgroupids = null;
    SET @chicksitemgroupids = null;
    SET @warehousebinids = null;
    SELECT  
		feeditemgroupids,medicineitemgroupids,
		vaccineitemgroupids,vitaminitemgroupids,
        chicksitemgroupids
		INTO @feeditemgroupids,@medicineitemgroupids,
		@vaccineitemgroupids, @vitaminitemgroupids,
        @chicksitemgroupids
        
	FROM
		layersetting
        
	WHERE 
		companyid = p_companyid limit 1;
        
	SELECT 
   GROUP_CONCAT(LS.warehousebinid SEPARATOR ', ') INTO @warehousebinids
	FROM layerbatchbalance LBB
	LEFT JOIN layershed LS ON LS.id = LBB.layershedid
	WHERE LBB.layerbatchid = p_batchid;
    	
    SET @itemgroupid = concat(@feeditemgroupids,',',@medicineitemgroupids, ',',@vaccineitemgroupids, ',',@vitaminitemgroupids, ',',@chicksitemgroupids);
 	SELECT MM.id,
           DATE_FORMAT(MM.transactiondate,'%d/%m/%Y') as date,
           MM.itemid,
           I.itemgroupid,
           I.itemname,
           SUM(MM.quantity) as quantity,
           IFNULL(ROUND((SUM(MM.itemvalue)/SUM(MM.quantity)),2),0) as unitcost,
           MM.itemvalue as amount,
           CONCAT(IG.groupname ,' In') as groupname
           
	FROM materialmovement MM
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    
    WHERE FIND_IN_SET(MM.towarehousebinid,@warehousebinids)
    AND FIND_IN_SET(I.itemgroupid,@itemgroupid) AND FIND_IN_SET(transactiontypeid,'681,682,685')
    
    group by MM.transactiondate,itemid;     
    
    -- out material
        
	SET @itemgroupid = concat(@feeditemgroupids,',',@medicineitemgroupids, ',',@vaccineitemgroupids, ',',@vitaminitemgroupids, ',',@chicksitemgroupids);
  
        
	SELECT MM.id,
           DATE_FORMAT(MM.transactiondate,'%d/%m/%Y') as date,
           MM.itemid,
           I.itemgroupid,
           I.itemname,
           SUM(MM.quantity) as quantity,
		    IFNUll(ROUND((SUM(MM.itemvalue)/SUM(MM.quantity)),2),0) as unitcost,
           MM.itemvalue as amount,
           CONCAT(IG.groupname ,' Out') as groupname
           
	FROM materialmovement MM
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    
    WHERE FIND_IN_SET(MM.fromwarehousebinid,@warehousebinids)
    AND FIND_IN_SET(I.itemgroupid,@itemgroupid) AND
    FIND_IN_SET(transactiontypeid,'682')
   group by MM.transactiondate,itemid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerflockproduction_summary`(
IN p_batchid VARCHAR(100),
IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';

SET @weekoflays = 0; 
SET @stdmortality = 0; 
SET @act = 0; 
SET @hatchingavgeggsizestd = 0; 
SET @hatchingact = 0; 
SET @cumhehenhoused = 0; 
SET @difference = 0; 
SET @eggmassstd = 0; 





DROP TEMPORARY TABLE IF EXISTS tempfloackproductionsummaryeport;
CREATE TEMPORARY TABLE tempfloackproductionsummaryeport

SELECT

LDT.id as dailytransactionid,
LDT.layerbatchid,
LB.batchname,
LB.itemid,
DATE_FORMAT(LDT.transactiondate ,'%d/%m/%Y') as transactiondate, 
fnc_getlayerplacementdate(LB.id,p_companyid) as placementdate,
fun_batch_ageindays(LDT.transactiondate,(fnc_getlayerplacementdate(LB.id,p_companyid)),LB.id)as ageindays,
fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid)as ageinweek,
DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY) as lastdate,
DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)as firstdate, 
LPO.hdppercent as hdinpercent,
-- LPO.cumdepl as heinpercent,
LPO.hdppercent as heinpercent,
LPO.livability as hatchinpercent,
LPO.cumhhp as cumchicks,
LPO.cumhhp as cumhhp,
LPO.curhhp as cumhhhe,
fnc_batchwise_weekly_stdbodyweightlayer(LB.itemid,(fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid)))as stditembodyweight,
fnc_batchwise_weekly_feedconsumedlayer(LB.itemid,(fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid)))as stditemfeedcon,
fnc_batchwise_birdliveqtyofweeklayer(LB.id,LB.itemid,(DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),p_companyid) as itemliveqty,
fnc_batchwise_malefemalemortality_ongivenlastdatelayer((DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),LB.id,LB.itemid) as mortality,

fnc_calculate_cummalefemalemortalityuptolastdate_layer(LDT.layerbatchid,(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),LB.itemid,p_companyid) as cummalemortality,
fnc_calculate_weeklytotaleggslayer((DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),LDT.layerbatchid)as weeklytotaleggs,
fnc_calculate_weeklyHatchimgeggslayer((DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),LDT.layerbatchid)as weeklyhatchingeggs,
fnc_calculate_weeklyavgweihtlayer(LDT.id,(DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),LDT.layerbatchid)as hatchingavgeggsize,

fnc_calculate_consumedquantityitemlayer((DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),LDT.layerbatchid,LB.itemid,p_companyid)as con,
fnc_calculate_weeklyitemwisebodyweightlayer(LDT.id,(DATE_SUB((DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)), INTERVAL 6 DAY)),(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid))*7) DAY), INTERVAL 1 DAY)),LDT.layerbatchid,LB.itemid,p_companyid)as bodyweight


/*INTO
@dailytransactionid,@layerbatchid,@batchname,@itemid,@transactiondate,@placementdate,@ageindays,@ageinweek,@lastdate,@firstdate,
@hdinpercent,@heinpercent,@hatchinpercent,@cumchicks,@cumhhp,@cumhhhe,
@stditembodyweight,@stditemfeedcon,@itemliveqty,@mortality,@cummalemortality, @weeklytotaleggs,
@weeklyhatchingeggs,@hatchingavgeggsize,@con,@bodyweight */
-- ,@hensdayproact

FROM layerdailytransaction LDT 
INNER JOIN layerbatch LB ON LB.id = LDT.layerbatchid
LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id -- AND EC.companyid= p_companyid
LEFT JOIN layerperformanceobjective LPO ON LPO.itemid = LDM.itemid -- AND EC.companyid= p_companyid





Where
 FIND_IN_SET(LDT.layerbatchid,p_batchid)  AND
 LDT.companyid = p_companyid;

-- This is Weekwise Report 
-- pass weekfirst date and last date and get values

 select 
dailytransactionid,layerbatchid,batchname,itemid,transactiondate,placementdate,ageinweek,
-- ageindays
DATE_FORMAT(lastdate ,'%d/%m/%Y') as lastdate, firstdate,
hdinpercent,heinpercent,hatchinpercent,cumchicks,cumhhp,cumhhhe,
stditembodyweight,stditemfeedcon,itemliveqty,mortality,cummalemortality, weeklytotaleggs,
weeklyhatchingeggs,hatchingavgeggsize,con,bodyweight 
 
 from tempfloackproductionsummaryeport
 group by ageinweek;

 

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerperformanceobjective_delete`(
IN p_id INT,
IN p_comapnyid INT,
IN p_userid INT
)
BEGIN
	DELETE FROM layerperformanceobjective WHERE id = p_id;
    
       CALL spc_commonlog_save(p_companyid, 'layerperformanceobjective', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerperformanceobjective_save`(
	IN p_id INT,
    IN p_itemid INT,
    IN p_ageinweek INT,
    IN p_livability DECIMAL(9,3),
    IN p_cumdepl DECIMAL(9,3),
    IN p_hdppercent DECIMAL(9,3),
    IN p_curhhp DECIMAL(9,3),
	IN p_cumhhp DECIMAL(9,3),
    IN p_feedperdayingm DECIMAL(9,3),
    IN p_curfeedpereggingm DECIMAL(9,3),
    IN p_cumfeedpereggingm DECIMAL(9,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerperformanceobjective
				(itemid , ageinweek , livability , cumdepl , hdppercent , 
                curhhp , cumhhp , feedperdayingm , curfeedpereggingm , 
                cumfeedpereggingm , companyid )
			VALUES 
				(p_itemid , p_ageinweek ,  p_livability , p_cumdepl , p_hdppercent 
					, p_curhhp , p_cumhhp , p_feedperdayingm , 
					p_curfeedpereggingm , p_cumfeedpereggingm ,p_companyid );
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE layerperformanceobjective
			SET 
				itemid	=	p_itemid,
                ageinweek = p_ageinweek, 
                livability = p_livability,
                cumdepl = p_cumdepl, 
                hdppercent = p_hdppercent,
                curhhp = p_curhhp,
                cumhhp = p_cumhhp,
                feedperdayingm = p_feedperdayingm,
                curfeedpereggingm = p_curfeedpereggingm,
                cumfeedpereggingm = p_cumfeedpereggingm,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
    CALL spc_commonlog_save(p_companyid, 'layerperformanceobjective', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerperformanceobjective_search`(
IN p_itemid INT,
IN p_companyid INT
)
BEGIN
	SELECT
    id ,
    itemid ,   
    ageinweek , 
    livability ,
    cumdepl ,
    hdppercent ,
    curhhp,
    cumhhp,
    feedperdayingm ,
    curfeedpereggingm ,
    cumfeedpereggingm ,
     companyid 
	FROM layerperformanceobjective
    
    WHERE
    itemid = p_itemid AND
    companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerperformanceobjective_select`(
IN p_id INT, 
IN p_companyid INT
)
BEGIN
	SELECT id ,
           itemid ,   
		   ageinweek , 
		   livability ,
		   cumdepl ,
		   hdppercent ,
		   curhhp ,
		   cumhhp ,
		   feedperdayingm ,
		   curfeedpereggingm ,
		   cumfeedpereggingm ,
		   companyid
	
    FROM  layerperformanceobjective 
	
    WHERE 
          id = p_id AND
          companyid =p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerphase_byweek`(
  IN p_week INT
  )
BEGIN
 SELECT id , phasename from layerphase
  
   WHERE fromweek <= p_week
   AND toweek >= p_week;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerphase_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM layerphase WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerphase_save`(
	IN p_id INT,
    IN p_phasesequence VARCHAR(100),
    IN p_phasename VARCHAR(200),
    IN p_fromweek INT,
    IN p_toweek INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
SET @action = null;
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerphase 
				(phasesequence, phasename, fromweek, toweek, companyid)
			VALUES 
				(p_phasesequence, p_phasename, p_fromweek, p_toweek, p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE layerphase
			SET 
				phasesequence = p_phasesequence, 
                phasename = p_phasename, 
                fromweek = p_fromweek,
                toweek = p_toweek,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';   
    
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layerphase', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerphase_search`(
  IN p_companyid INT 
)
BEGIN
	SELECT id ,
		   phasesequence,
           phasename,
           fromweek,
           toweek
            
    FROM  layerphase 
    WHERE 
          companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerphase_select`(
  IN p_id INT 
)
BEGIN
	SELECT id ,
		   phasesequence,
           phasename,
           fromweek,
           toweek
            
    FROM  layerphase 
    WHERE 
          id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerplacementscheduledetail`(

    IN p_placementscheduleid INT,
    IN p_companyid INT 
    )
BEGIN

        
SELECT  LPD.id as placementscheduledetailid,
		LPD.placementscheduleid,
        LPD.breedershedid,
		LS.shedname as shedname,
        LSL.linename,
        LSL.id as layershedlineid,
        LSL.capacity as linecapacity,
		LPD.proposalquantity,
		LPD.remark,
        GD.itemid,
        (GD.quantity + GD.freequantity) as quantity, 
        G.id as grpono
        
	FROM 
		layerplacementscheduledetail LPD
    
       INNER JOIN layershed BS ON LPD.layershedid= LS.id
       INNER JOIN layershedline LSL ON BSL.breedershedid = LS.id
       INNER JOIN layerplacementschedule LPS ON LPS.id = LPD.placementscheduleid
       INNER JOIN purchaseorder PO ON PO.purchaserequestid = BPS.requestid
       INNER JOIN grpo G ON G.purchaseorderid = PO.id
       INNER JOIN grpodetail GD ON GD.grpoid = G.id

	
	WHERE
		LPD.placementscheduleid = p_placementscheduleid
        AND LPD.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerplacementscheduledetail_byrequestid`(
    IN p_placementscheduleid INT,
    IN p_grpono INT,
    IN p_companyid INT 
    )
BEGIN
	
        
SELECT  LPD.id as placementscheduledetailid,
		LPD.placementscheduleid,
        LPD.layershedid,
		LS.shedname as shedname,
        LSL.linename,
        LSL.id as layershedlineid,
        LSL.capacity as linecapacity,
		LPD.proposalquantity,
		LPD.remark,
        GD.itemid,
        (GD.quantity) as quantity, 
        G.id as grpono
        
	FROM 
		layerplacementscheduledetail LPD
    
       INNER JOIN layershed LS ON LPD.layershedid= LS.id
       INNER JOIN layershedline LSL ON LSL.layershedid = LS.id
       INNER JOIN layerplacementschedule LPS ON LPS.id = LPD.placementscheduleid
       INNER JOIN purchaseorder PO ON PO.purchaserequestid = LPS.requestid
       INNER JOIN grpo G ON G.purchaseorderid = PO.id
       INNER JOIN grpodetail GD ON GD.grpoid = G.id

	
	WHERE
		LPD.placementscheduleid = p_placementscheduleid
        AND G.id = p_grpono
        AND LPD.companyid = p_companyid ;
        -- GROUP BY LPD.id ;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerplacementscheduledetail_save`(
    IN p_id INT(11),
	IN p_placementscheduleid INT(11),
	IN p_shedreadyid INT(11),
	IN p_layershedid INT(11),
	IN p_capacity INT(11),
	IN p_proposalquantity INT(11),
	IN p_remark	varchar(200),
	IN p_companyid INT(11),
    IN p_userid INT,
	OUT out_id INT
    )
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerplacementscheduledetail 
				(placementscheduleid, shedreadyid, layershedid, capacity, proposalquantity, remark, companyid)
			VALUES 
				(p_placementscheduleid, p_shedreadyid, p_layershedid, p_capacity, p_proposalquantity, p_remark, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE layerplacementscheduledetail
			SET placementscheduleid = p_placementscheduleid,
                shedreadyid = p_shedreadyid, 
                layershedid = p_layershedid,
                capacity = p_capacity, 
                proposalquantity = p_proposalquantity,
                remark = p_remark,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
			
             
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    -- update layer shed status 923 = 'scheduled'
    UPDATE layershed LS SET statusid = 923 where LS.id = p_layershedid;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layerplacementscheduledetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerplacementscheduledetail_search`(
	IN p_placementscheduleid INT,
    IN p_companyid INT 
    )
BEGIN
        
SELECT  LPD.id,
		LPD.placementscheduleid,
		LS.shedname as shedname,
        LPD.shedreadyid,
        LPD.layershedid,
		L.locationname,
        LPD.capacity,
		LPD.proposalquantity,
		LPD.remark,
		LPD.companyid
	FROM 
		layerplacementscheduledetail LPD
    
       INNER JOIN layershed LS ON LPD.layershedid= LS.id
       INNER JOIN location L ON LS.locationid = L.id
	
	
	WHERE
		LPD.placementscheduleid = p_placementscheduleid
        AND LPD.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerplacementschedulelist_search`(
	IN p_location INT,
	IN p_from_date date,
	IN p_to_date date
)
BEGIN
SET @@sql_mode = '';
	SELECT LPS.id,
		DATE_FORMAT(schedulefordate,'%d/%m/%Y') as scheduledate,
		LPS.batchid,
		LPS.statusid,
		LPS.createdby,
        REF.refname AS statusname,
        LPD.layershedid,
		LS.locationid,
        L.locationcode,
        L.locationname,
		LPS.companyid
	FROM 
		layerplacementschedule LPS
        LEFT JOIN `reference` REF ON LPS.statusid = REF.id
		LEFT JOIN layerplacementscheduledetail LPD ON LPS.id = LPD.placementscheduleid
		INNER JOIN layershed LS ON LPD.layershedid = LS.id
		 INNER JOIN location L ON LS.locationid = L.id
	WHERE
		LS.locationid = p_location
		AND (LPS.schedulefordate BETWEEN p_from_date AND p_to_date)
        
	GROUP BY LPS.id
    ORDER BY LPS.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerplacementschedule_availableforbatchplacement`(
  IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';
	SELECT LPS.id,
		DATE_FORMAT(schedulefordate,'%d/%m/%Y') as scheduledate,
		LPS.batchid,
		LPS.statusid,
		LPS.createdby,
        UR.fullname AS schedulername,
        REF.refname AS statusname,
        LPD.layershedid,
		LS.locationid,
        L.locationcode,
        L.locationname,
		LPS.companyid,
        LPS.requestid
	FROM 
		layerplacementschedule LPS
        LEFT JOIN user UR on LPS.createdby = UR.id
        LEFT JOIN `reference` REF ON LPS.statusid = REF.id
		LEFT JOIN layerplacementscheduledetail LPD ON LPS.id = LPD.placementscheduleid
		INNER JOIN layershed LS ON LPD.layershedid = LS.id
		INNER JOIN location L ON LS.locationid = L.id
        LEFT JOIN layerbatchplacement LBP ON LBP.placementscheduleid = LPS.id
	WHERE
		LPS.companyid = p_companyid
        AND LBP.id is null 
        AND LPS.statusid = 1044 -- Approved
        
	GROUP BY LPS.id
    ORDER BY LPS.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerplacementschedule_delete`(	
IN p_id INT
)
BEGIN

	DELETE FROM layerplacementschedule WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerplacementschedule_save`(
  IN p_id INT,
  IN p_date date,
  IN P_schedulefordate date,
  IN p_batchid INT,
  IN p_totalshedcapacity INT,
  IN p_proposedquantity INT,
  IN p_approvedby INT,
  IN p_approveddate DATE,
  IN p_remark VARCHAR(200),
  IN p_statusid INT,
  IN p_createdby INT,
  IN p_companyid INT,
  IN p_userid INT,
  OUT out_id INT,
  OUT req_no VARCHAR(200)
)
BEGIN

	SET @action = null;
    SET @defaultfemalechickid = null;
	SET @defaultfemaleitemname = null;
    SET @defaultfemaleitemunitid = null;
    
    -- Get default Male and Female chick item
    SELECT  
			defaultfemalechickid, IT1.itemname, IT1.itemunitid
			INTO @defaultfemalechickid,@defaultfemaleitemname,
            @defaultfemaleitemunitid 
	FROM
		layersetting LS
	INNER JOIN item IT1 ON LS.defaultfemalechickid = IT1.id
    WHERE 
		LS.companyid = p_companyid limit 1;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO layerplacementschedule 
				(date, schedulefordate, batchid, totalshedcapacity, proposedquantity,
				approvedby, approveddate,remark, statusid, createdby, companyid)
			VALUES 
				(p_date, p_schedulefordate, p_batchid, p_totalshedcapacity, p_proposedquantity,
				p_approvedby, p_approveddate, p_remark, p_statusid, p_createdby, p_companyid);
	
			SET @action = 'INSERT';

	ELSE
    
		UPDATE layerplacementschedule
			SET date = p_date,
				schedulefordate = p_schedulefordate,
				batchid = p_batchid,
				totalshedcapacity = p_totalshedcapacity,
                proposedquantity = p_proposedquantity,
                approvedby = p_approvedby,
				approveddate = p_approveddate,
                remark = p_remark,
				statusid = p_statusid,
				createdby = p_createdby,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
		
                SET @action = 'UPDATE';
	END IF;
    
	SELECT LAST_INSERT_ID() INTO out_id; 
    
		IF (p_statusid = 1044) THEN  -- When status is 702 = 'Approved'
            SET @out_purreqid = null;
			CALL spc_purchaserequest_save(
				NULL, null,545, p_schedulefordate, p_createdby, p_approvedby, 
				'Chicks purchase request', 92, null,
				null,p_schedulefordate, p_companyid, p_userid, @out_purreqid
			);
            
			CALL spc_purchaserequestdetail_save(
				 NULL, @out_purreqid, @defaultfemalechickid, @defaultfemaleitemname, 
                 p_proposedquantity, @defaultfemaleitemunitid,1641, p_companyid, p_userid, 
                 @outpurreqdetailid1
			 );

			-- update the request id in breederplacementschedule table
			UPDATE layerplacementschedule SET requestid = @out_purreqid WHERE id = out_id;
    
		END IF;
        
	select 
    PR.purchaserequestno INTO req_no
    from layerplacementschedule LPS
    LEFT JOIN purchaserequest PR ON PR.id = LPS.requestid
    where LPS.requestid = @out_purreqid;
    
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'layerplacementschedule', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerplacementschedule_search`(
  IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';
	SELECT LPS.id,
		DATE_FORMAT(schedulefordate,'%d/%m/%Y') as scheduledate,
		LPS.batchid,
		LPS.statusid,
		LPS.createdby,
        REF.refname AS statusname,
        LPD.layershedid,
		LS.locationid,
        L.locationcode,
        L.locationname,
		LPS.companyid
	FROM 
		layerplacementschedule LPS
        LEFT JOIN `reference` REF ON LPS.statusid = REF.id
		LEFT JOIN layerplacementscheduledetail LPD ON LPS.id = LPD.placementscheduleid
		INNER JOIN layershed LS ON LPD.layershedid = LS.id
		 INNER JOIN location L ON LS.locationid = L.id
	WHERE
		LPS.companyid = p_companyid
        
	GROUP BY LPS.id
    ORDER BY LPS.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerplacementschedule_select`(	IN p_schedulefordate DATE,
    IN p_id INT,
    IN p_companyid INT
)
BEGIN

	SELECT LPS.id,
		LS.shedname as shedname,
        LS.locationid,
		L.locationname,
        L.locationcode,
		LPS.batchid,
        LS.capacity,
        totalshedcapacity,
		proposedquantity,
		LPS.statusid,
		DATE_FORMAT(schedulefordate,'%d/%m/%Y') as scheduledate,
        REF.refname AS statusname,
		LPS.remark,
        LPS.date,
		LPS.companyid
	FROM 
		layerplacementschedule LPS
    
       LEFT JOIN layerplacementscheduledetail LSD ON LPS.id = LSD.placementscheduleid
       INNER JOIN layershed LS ON LSD.layershedid= LS.id
       INNER JOIN location L ON LS.locationid = L.id
       LEFT JOIN `reference` REF ON LPS.statusid = REF.id
	
	
	WHERE
		LPS.schedulefordate = p_schedulefordate
        AND LPS.id = p_id
        AND LPS.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerreasons_delete`(	
IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN
  	DELETE FROM layerreasons WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'layerreasons', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerreasons_save`(
	IN p_id INT,
    IN p_typeid INT,
	IN p_reason VARCHAR(300),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
SET @action = null;

 IF EXISTS(
            SELECT reason from layerreasons where reason = p_reason
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerreasons 
				(typeid, reason, companyid)
			VALUES 
				(p_typeid, p_reason, p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE layerreasons
			SET 
				typeid = p_typeid, 
                reason = p_reason, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';   
    
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
   
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layerreasons', out_id, @action, p_userid);
    END;
END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerreasons_search`(

 IN p_companyid INT 
)
BEGIN
	SELECT BR.id,
		   typeid,
           R.refname as reasontype,
           reason
            
    FROM  layerreasons BR
    LEFT JOIN `reference` R ON BR.typeid = R.id
    
    WHERE 
          companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerreasons_select`(
  IN p_id INT 
)
BEGIN
	SELECT BR.id ,
		   BR.typeid,
           R.refname as reasontype,
           reason,
           companyid
            
    FROM  layerreasons BR
    LEFT JOIN `reference` R ON BR.typeid = R.id
    WHERE 
          BR.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerscheduledetail_delete`(
 IN p_id INT
)
BEGIN
	DELETE FROM layerscheduledetail WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerscheduledetail_save`(   
	IN p_id INT,
    IN p_layerscheduleid INT(11),
    IN p_itemid INT(11),
    IN p_fromweek TINYINT(4),
    IN p_toweek TINYINT(4),
    IN p_weeknumber TINYINT(4),
    IN p_method VARCHAR(100),
    IN p_quantity DECIMAL(8,3),
    IN p_feedunitid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerscheduledetail 
				(layerscheduleid, itemid, fromweek, toweek, weeknumber, method, quantity, feedunitid, companyid)
			VALUES 
				(p_layerscheduleid, p_itemid, p_fromweek, p_toweek, p_weeknumber, p_method, p_quantity, p_feedunitid, p_companyid);
		
        SET @action = 'INSERT';

	ELSE
    
		UPDATE layerscheduledetail
			SET layerscheduleid = p_layerscheduleid, 
				itemid = p_itemid,
                fromweek = p_fromweek,
                toweek = p_toweek,
                weeknumber = p_weeknumber,
                method = p_method,
                quantity = p_quantity,
                feedunitid = p_feedunitid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
             SET @action = 'UPDATE';   
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	-- record log
   CALL spc_commonlog_save(p_companyid, 'layerscheduledetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerscheduledetail_search`( 
 IN p_layerscheduleid INT
)
BEGIN
    
    SELECT
		 LS.id,
         layerscheduleid,
		 itemid,
         fromweek,
         toweek,
         weeknumber,
         method,
         quantity,
         feedunitid,
         I.itemname
         
    FROM
		layerscheduledetail LS
        INNER JOIN item I ON LS.itemid = I.id
   	
	WHERE
		layerscheduleid = p_layerscheduleid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerscheduledetail_select`(	
 IN p_layerscheduleid INT
)
BEGIN

	SELECT
		 LSD.id,
         layerscheduleid,
		 itemid,
         fromweek,
         toweek,
         weeknumber,
         method,
         quantity,
         feedunitid,
         I.itemname,
         I.itemcode,
         R.refname as itemunit
        
	FROM
		layerscheduledetail LSD
        LEFT JOIN item I ON LSD.itemid = I.id
        LEFT JOIN `reference` R ON LSD.feedunitid = R.id
        
	WHERE
		layerscheduleid = p_layerscheduleid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerschedulelocation_delete`(	
 IN p_id INT
)
BEGIN
	DELETE FROM layerschedulelocation WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerschedulelocation_save`(   
    IN p_id INT,
    IN p_layerscheduleid INT(11),
    IN p_locationid INT(11),
    IN p_companyid INT,
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerschedulelocation 
				(layerscheduleid, locationid, companyid)
			VALUES 
				(p_layerscheduleid, p_locationid, p_companyid);

		SET @action = 'INSERT';

	ELSE
    
		UPDATE layerschedulelocation
			SET layerscheduleid = p_layerscheduleid, 
				locationid = p_locationid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
			SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'layerschedulelocation', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerschedulelocation_search`( 
  IN p_companyid INT
)
BEGIN
    
    SELECT
		 LSL.id,
         layerscheduleid,
		 locationid,
         L.locationname
        
	FROM
		layerschedulelocation LSL
        LEFT JOIN location L ON L.id = LSL.locationid
        
	WHERE
		LSL.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerschedulelocation_select`(
   IN p_layerscheduleid INT
)
BEGIN
    
    SELECT
		 LSL.id,
         layerscheduleid,
		 locationid,
         L.locationname
        
	FROM
		layerschedulelocation LSL
        LEFT JOIN location L ON L.id = LSL.locationid
        
	WHERE
		layerscheduleid = p_layerscheduleid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerschedule_delete`(	IN p_id INT
)
BEGIN
	DELETE FROM layerscheduledetail WHERE layerscheduleid = p_id;
    DELETE FROM layerschedulelocation WHERE layerscheduleid = p_id;
	DELETE FROM layerschedule WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerschedule_save`(
    IN p_id INT,
    IN p_schedulename VARCHAR(200),
    IN p_layerscheduletypeid INT(11),
    IN p_layernametypeid INT(11),
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_layeritemid INT(11),
    IN p_locationids VARCHAR(200),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerschedule 
				(id, schedulename, layerscheduletypeid, layernametypeid, fromdate, todate,layeritemid, locationids, companyid)
			VALUES 
				(p_id, p_schedulename, p_layerscheduletypeid, p_layernametypeid, p_fromdate, p_todate, p_layeritemid, p_locationids,  p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE layerschedule
			SET schedulename = p_schedulename, 
				layerscheduletypeid = p_layerscheduletypeid,
                layernametypeid = p_layernametypeid,
                fromdate = p_fromdate,
                todate = p_todate,
                layeritemid = p_layeritemid,
                locationids = p_locationids,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'layerschedule', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerschedule_search`(
    IN p_companyid INT,
    IN p_scheduletypeid INT
)
BEGIN
    
    SELECT
		 LS.id,
         LS.schedulename,
		 LS.layerscheduletypeid,
         LS.layernametypeid,
         LS.layeritemid,
         LS.locationids,
         I.itemname as layeritemname,
         DATE_FORMAT(fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(todate,'%d/%m/%Y') as todate
        
	FROM
		layerschedule LS
        
         LEFT JOIN item I ON I.id = LS.layeritemid
   	
	WHERE
		LS.companyid = p_companyid AND layerscheduletypeid = p_scheduletypeid
        
	ORDER BY id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layerschedule_select`(
  IN p_id INT
)
BEGIN

	SELECT
		 LS.id,
         LS.schedulename,
		 LS.layerscheduletypeid,
         LS.layernametypeid,
         LS.layeritemid,
         LS.locationids,
         I.itemname as layeritemname,
         DATE_FORMAT(fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(todate,'%d/%m/%Y') as todate
        
	FROM
		layerschedule LS
        
         LEFT JOIN item I ON I.id = LS.layeritemid
   	
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND LS.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layersetting_eggsitem`( 
  IN p_companyid INT
)
BEGIN

	SET @defaulttableeggsitemid = null;
    SET @defaultcrackedeggsitemid = NULL;
	SET @defaultdamageeggsitemid = NULL;
    SET @defaultpulleteggsitemid = NULL;
    
    SELECT  
		defaulttableeggsitemid,defaultcrackedeggsitemid,defaultdamageeggsitemid,defaultpulleteggsitemid
		INTO @defaulttableeggsitemid,@defaultcrackedeggsitemid,@defaultdamageeggsitemid,@defaultpulleteggsitemid
	FROM
	layersetting
	WHERE companyid = p_companyid;

	-- CREATE TEMPORARY TABLE tmppurregreport
    create temporary table layereggsitem
		(	id INT(11) ,
			itemid INT(11) not null,
            itemtypeid INT(11),
			quantity INT(11) ,
			avgweight INT(11),
            cummqty INT(11),
			remark VARCHAR(200)
		);
insert into layereggsitem
(itemid, itemtypeid, quantity,avgweight,cummqty) VALUES
(@defaulttableeggsitemid,1129, 0, 0,0);
insert into layereggsitem
(itemid, itemtypeid, quantity,avgweight,cummqty) VALUES
(@defaultcrackedeggsitemid, 1130, 0, 0,0);
insert into layereggsitem
(itemid, itemtypeid, quantity,avgweight,cummqty) VALUES
(@defaultdamageeggsitemid, 1131, 0, 0,0);
insert into layereggsitem
(itemid, itemtypeid, quantity,avgweight,cummqty) VALUES
(@defaultpulleteggsitemid, 1132, 0, 0,0);

SELECT EI.id,itemid, itemtypeid, quantity, avgweight, remark,cummqty, I1.itemname from layereggsitem EI
LEFT JOIN item I1 ON EI.itemid = I1.id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layersetting_save`(
	IN p_id INT(11),
	IN p_shedrestperiod INT(11),
    IN p_defaultfemalechickid INT(11),
    IN p_defaultfemalechickcost DECIMAL(9,3),
    IN p_defaultwarehouseid INT(11),
    IN p_defaultcoldroomwarehouseid INT(11),
    IN p_labourcharge DECIMAL(9,3),
	IN p_overheadcost DECIMAL(9,3),
    IN p_eggspredictionperbird INT(11),
    IN p_defaulttableeggsitemid INT(11),
    IN p_defaultcrackedeggsitemid INT(11),
    IN p_defaultdamageeggsitemid INT(11),
    IN p_defaultpulleteggsitemid INT(11),
	IN p_standardeggcost DECIMAL(9,3),
    IN p_femalestandardweight DECIMAL(9,3),
	IN p_feeditemgroupids VARCHAR(200),
	IN p_medicineitemgroupids VARCHAR(200),
	IN p_vaccineitemgroupids VARCHAR(200),
	IN p_vitaminitemgroupids VARCHAR(200),
    IN p_chicksitemgroupids VARCHAR(200),
    IN p_eggsitemgroupids VARCHAR(200),
    IN p_layeritemgroupids VARCHAR(200),
    IN p_tableeggscost DECIMAL(9,3),
    IN p_damageeggscost DECIMAL(9,3),
    IN p_crackedeggscost DECIMAL(9,3),
    IN p_pulleteggscost DECIMAL(9,3),
    IN p_costofgoodsoldledgerid INT(11),
    IN p_WIPledgerid INT(11),
    IN p_grpowithoutinvoiceledgerid INT(11),
    IN p_cashledgerid INT(11),
    IN p_freightledgerid INT(11),
    IN p_discountledgerid INT(11),
	IN p_mortalityledgerid INT(11),
	IN p_medicineledgerid INT(11),
	IN p_feedledgerid INT (11),
	IN p_vaccineledgerid INT(11),
	IN p_vitaminledgerid INT(11),
    IN p_amortizationledgerid INT(11),
	IN p_ctrlaccledgerid INT(11),
    IN p_inventorygainlossledgerid INT(11),
    IN p_stcokledgerid INT(11),
	IN p_defaultcullswhid INT(11),
	IN p_amortizationcoststd TINYINT(4),
	IN p_birdcoststd TINYINT(4),
	IN p_amortizationcostnonprodbird TINYINT(4),
	IN p_birdcostnonprodbird TINYINT(4),
    IN p_companyid INT(11),
    IN p_userid INT,
	OUT out_id INT)
BEGIN
	
	SET @action = null;
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layersetting
				( 
				   shedrestperiod,
				   defaultfemalechickid,
				   defaultfemalechickcost,
				   defaultwarehouseid,
				   defaultcoldroomwarehouseid,
				   labourcharge,
				   overheadcost,
				   eggspredictionperbird,
				   defaulttableeggsitemid,
				   defaultcrackedeggsitemid,
				   defaultdamageeggsitemid,
				   defaultpulleteggsitemid,
				   standardeggcost,
				   femalestandardweight,
				   feeditemgroupids,
				   medicineitemgroupids,
				   vaccineitemgroupids,
				   vitaminitemgroupids,
                   chicksitemgroupids,
                   eggsitemgroupids,
                   layeritemgroupids,
                   tableeggscost,
                   damageeggscost,
                   crackedeggscost,
                   pulleteggscost,
                   costofgoodsoldledgerid,
				   WIPledgerid,
                   grpowithoutinvoiceledgerid,
				   cashledgerid,
				   freightledgerid,
				   discountledgerid,
                   mortalityledgerid,
				   medicineledgerid,
				   feedledgerid,
				   vaccineledgerid,
				   vitaminledgerid,
                   amortizationledgerid,
                   ctrlaccledgerid,
                   inventorygainlossledgerid,
                   stcokledgerid,
                   defaultcullswhid,
                   amortizationcoststd,
				   birdcoststd,
				   amortizationcostnonprodbird,
				   birdcostnonprodbird,
				   companyid 
                 )
			VALUES 
				  ( 
					p_shedrestperiod,
					p_defaultfemalechickid,
					p_defaultfemalechickcost,
					p_defaultwarehouseid,
					p_defaultcoldroomwarehouseid,
					p_labourcharge,
					p_overheadcost,
					p_eggspredictionperbird,
					p_defaulttableeggsitemid,
					p_defaultcrackedeggsitemid,
					p_defaultdamageeggsitemid,
					p_defaultpulleteggsitemid,
					p_standardeggcost,
					p_femalestandardweight,
					p_feeditemgroupids,
					p_medicineitemgroupids,
					p_vaccineitemgroupids,
					p_vitaminitemgroupids,
                    p_chicksitemgroupids,
                    p_eggsitemgroupids,
                    p_layeritemgroupids,
					p_tableeggscost,
				    p_damageeggscost,
                    p_crackedeggscost,
                    p_pulleteggscost,
                    p_costofgoodsoldledgerid,
					p_WIPledgerid,
                    p_grpowithoutinvoiceledgerid,
				    p_cashledgerid,
				    p_freightledgerid,
				    p_discountledgerid,
                    p_mortalityledgerid,
					p_medicineledgerid,
					p_feedledgerid,
					p_vaccineledgerid,
					p_vitaminledgerid,
                    p_amortizationledgerid,
                    p_ctrlaccledgerid,
                    p_inventorygainlossledgerid,
                    p_stcokledgerid,
                    p_defaultcullswhid,
                    p_amortizationcoststd,
				    p_birdcoststd,
                    p_amortizationcostnonprodbird,
				    p_birdcostnonprodbird,
					p_companyid );
		
        SET @action = 'INSERT';
        ELSE
    
		UPDATE layersetting
				SET shedrestperiod = p_shedrestperiod,
                defaultfemalechickid = p_defaultfemalechickid,
                defaultfemalechickcost = p_defaultfemalechickcost,
                defaultfemalechickcost = p_defaultfemalechickcost,
                defaultwarehouseid = p_defaultwarehouseid,
                defaultcoldroomwarehouseid = p_defaultcoldroomwarehouseid,
                labourcharge = p_labourcharge,
                overheadcost = p_overheadcost,
				eggspredictionperbird = p_eggspredictionperbird,
                defaulttableeggsitemid = p_defaulttableeggsitemid,
                defaultcrackedeggsitemid = p_defaultcrackedeggsitemid,
                defaultdamageeggsitemid = p_defaultdamageeggsitemid,
                defaultpulleteggsitemid = p_defaultpulleteggsitemid,
                standardeggcost = p_standardeggcost,
                femalestandardweight = p_femalestandardweight,
                feeditemgroupids = p_feeditemgroupids,
                medicineitemgroupids = p_medicineitemgroupids,
                vaccineitemgroupids = p_vaccineitemgroupids,
                vitaminitemgroupids = p_vitaminitemgroupids,
                chicksitemgroupids = p_chicksitemgroupids,
                eggsitemgroupids = p_eggsitemgroupids,
                layeritemgroupids = p_layeritemgroupids,
                tableeggscost = p_tableeggscost,
                damageeggscost = p_damageeggscost,
                crackedeggscost = p_crackedeggscost,
                pulleteggscost = p_pulleteggscost,
                costofgoodsoldledgerid = p_costofgoodsoldledgerid,
			    WIPledgerid = p_WIPledgerid,
				grpowithoutinvoiceledgerid = p_grpowithoutinvoiceledgerid,
				cashledgerid = p_cashledgerid,
				freightledgerid = p_freightledgerid,
				discountledgerid = p_discountledgerid,
                mortalityledgerid = p_mortalityledgerid,
				medicineledgerid = p_medicineledgerid,
				feedledgerid = p_feedledgerid,
				vaccineledgerid = p_vaccineledgerid,
				vitaminledgerid = p_vitaminledgerid,
                amortizationledgerid = p_amortizationledgerid,
				ctrlaccledgerid = p_ctrlaccledgerid,
                inventorygainlossledgerid = p_inventorygainlossledgerid,
                stcokledgerid = p_stcokledgerid,
                defaultcullswhid = p_defaultcullswhid,
                amortizationcoststd = p_amortizationcoststd,
				birdcoststd = p_birdcoststd,
                amortizationcostnonprodbird = p_amortizationcostnonprodbird,
				birdcostnonprodbird = p_birdcostnonprodbird,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';     
         
	END IF;
      SELECT LAST_INSERT_ID() INTO out_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layersetting_search`(
	IN p_companyid INT
)
BEGIN
 
    SELECT
		LS.id ,
		LS.shedrestperiod ,
		LS.defaultfemalechickid ,
		LS.defaultfemalechickcost,
		LS.defaultwarehouseid ,
		LS.defaultcoldroomwarehouseid ,
		LS.labourcharge,
		LS.overheadcost,
		LS.eggspredictionperbird ,
		LS.defaulttableeggsitemid ,
		LS.defaultcrackedeggsitemid ,
		LS.defaultdamageeggsitemid ,
		LS.defaultpulleteggsitemid ,
		LS.standardeggcost ,
		LS.femalestandardweight ,
		LS.feeditemgroupids,
		LS.medicineitemgroupids,
		LS.vaccineitemgroupids,
		LS.vitaminitemgroupids,
        LS.chicksitemgroupids,
        LS.eggsitemgroupids,
        LS.layeritemgroupids,
        LS.tableeggscost,
        LS.damageeggscost,
        LS.crackedeggscost,
        LS.pulleteggscost,
		I1.itemcode as femaleitemcode,
        I1.itemname as defaultfemalechickitem,
		W.warehousename as defaultwarehousename,
	    W1.warehousename as defaultcoldroomwarehousename,
		I2.itemname as defaultpulleteggsitemname,
		I3.itemname as defaulttableeggsitemname,
		I4.itemname as defaultcrackedeggsitemname,
		I5.itemname as defaultdamageeggsitemname,
        LS.costofgoodsoldledgerid,
		COA1.coaname as goodledgername,
		COA1.glcode as goodglcode,
		COA2.coaname as birdledgername,
		COA2.glcode as birdglcode,
		COA3.coaname as grpowithoutinvoiceledgername,
		COA3.glcode as grpowithoutinvoiceglcode,
		COA4.coaname as cashledgername,
		COA4.glcode as cashglcode,
		COA5.coaname as freightledgername,
		COA5.glcode as freightglcode,
		COA6.coaname as discountledgername,
		COA6.glcode as discountglcode,
		LS.cashledgerid,
		LS.freightledgerid,
		LS.WIPledgerid,
		LS.grpowithoutinvoiceledgerid,
		LS.cashledgerid,
		LS.freightledgerid,
		LS.discountledgerid,
		LS.mortalityledgerid,
		COA7.coaname as mortalityledgernamename,
        COA7.glcode as mortalityglcode,
		LS.medicineledgerid,
        COA8.coaname as medicineledgernamename,
        COA8.glcode as medicineglcode,
        LS.feedledgerid,
        COA9.coaname as feedledgernamename,
        COA9.glcode as feedglcode,
		LS.vaccineledgerid,
        COA10.coaname as vaccineledgernamename,
        COA10.glcode as vaccineglcode,
        LS.vitaminledgerid,
        COA11.coaname as vitaminledgernamename,
        COA11.glcode as vitaminglcode,
        LS.amortizationledgerid,
        COA12.coaname as amortizationledgername,
        COA12.glcode as amortizationcode,
        LS.ctrlaccledgerid,
        COA13.coaname as ctrlaccledgername,
        COA13.glcode as ctrlaccledgercode,
        LS.inventorygainlossledgerid,
		COA14.coaname as inventorygainlossname,
        COA14.glcode as inventorygainlosscode,
        LS.stcokledgerid,
		COA15.coaname as stockledgername,
        COA15.glcode as stockledgercode,
        LS.defaultcullswhid,
        W2.warehousename as defaultcullswarehouse,
        LS.amortizationcoststd,
		LS.birdcoststd,
		LS.amortizationcostnonprodbird,
		LS.birdcostnonprodbird
     
    FROM
		layersetting LS
            LEFT JOIN item I1 ON LS.defaultfemalechickid = I1.id
            LEFT JOIN warehouse W ON W.id = LS.defaultwarehouseid
            LEFT JOIN warehouse W1 ON W1.id = defaultcoldroomwarehouseid
             LEFT JOIN warehouse W2 ON W2.id = defaultcullswhid
            LEFT JOIN item I3 ON I3.id = LS.defaulttableeggsitemid
            LEFT JOIN item I4 ON I4.id = LS.defaultcrackedeggsitemid
            LEFT JOIN item I5 ON I5.id = LS.defaultdamageeggsitemid
            LEFT JOIN item I2 ON I2.id = LS.defaultpulleteggsitemid
			LEFT JOIN chartofaccount COA1 ON COA1.id = LS.costofgoodsoldledgerid
			LEFT JOIN chartofaccount COA2 ON COA2.id = LS.WIPledgerid
			LEFT JOIN chartofaccount COA3 ON COA3.id = LS.grpowithoutinvoiceledgerid
            LEFT JOIN chartofaccount COA4 ON COA4.id = LS.cashledgerid
			LEFT JOIN chartofaccount COA5 ON COA5.id = LS.freightledgerid
            LEFT JOIN chartofaccount COA6 ON COA6.id = LS.discountledgerid
            LEFT JOIN chartofaccount COA7 ON COA7.id = LS.mortalityledgerid
			LEFT JOIN chartofaccount COA8 ON COA8.id = LS.medicineledgerid
			LEFT JOIN chartofaccount COA9 ON COA9.id = LS.feedledgerid
			LEFT JOIN chartofaccount COA10 ON COA10.id = LS.vaccineledgerid
			LEFT JOIN chartofaccount COA11 ON COA11.id = LS.vitaminledgerid
            LEFT JOIN chartofaccount COA12 ON COA12.id = LS.amortizationledgerid
			LEFT JOIN chartofaccount COA13 ON COA13.id = LS.ctrlaccledgerid
            LEFT JOIN chartofaccount COA14 ON COA14.id = LS.inventorygainlossledgerid
             LEFT JOIN chartofaccount COA15 ON COA15.id = LS.stcokledgerid
    
	WHERE
		LS.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedforreport_search`(
	IN p_layerbatchid INT(11)
)
BEGIN
	
SELECT  LB.layershedid,
		LB.layershedid as id,
		LS.shedname,
        L.locationcode,
	    L.locationname,
        LS.warehouseid,
		LS.warehousebinid,
        LB.layerbatchid

FROM layerbatchbalance LB

    LEFT JOIN layershed LS ON LB.layershedid =  LS.id 
	LEFT JOIN location L ON LS.locationid = L.id

	WHERE LB.layerbatchid = p_layerbatchid

	GROUP BY  LB.layershedid;
       
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedline_delete`(	
IN p_id INT
)
BEGIN
	DELETE FROM layershedline WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedline_remainingcapacity`(

	IN p_tolineid INT(11)
)
BEGIN
	
    SET @tolinecapacity = NULL;
	SET @tolineusedquantity = NULL;
    
	if exists(SELECT * FROM layerbatchtransferdetail WHERE tolineid = p_tolineid) then
    
		SELECT LSL.capacity, IFNULL(SUM(LBTD.quantity), 0) INTO @tolinecapacity, @tolineusedquantity
		FROM layerbatchtransferdetail LBTD
        LEFT JOIN layershedline LSL ON LSL.id = LBTD.tolineid
		WHERE 
				 LBTD.tolineid = p_tolineid;
    
    else
    
		SELECT capacity, 0 INTO @tolinecapacity, @tolineusedquantity
		FROM layershedline 
		WHERE 
				 id = p_tolineid;
    
    end if;
    
  select IFNULL((@tolinecapacity - @tolineusedquantity), 0) as remainingcapacity;
		 -- IFNULL((@tolinecapacity), 0) as tolinecapacity;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedline_save`(
	IN p_id INT,
    IN p_layershedid INT,
    IN p_linename VARCHAR(50),
    IN p_description VARCHAR(500),
    IN p_capacity INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layershedline
				(layershedid, linename, description, capacity, companyid)
			VALUES 
				(p_layershedid, p_linename, p_description, p_capacity, p_companyid);
		
            SET @action = 'INSERT';
		
	ELSE
    
		UPDATE layershedline
				SET layershedid = p_layershedid, 
                linename = p_linename, 
                description = p_description,
                capacity = p_capacity,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;

	SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layershedline', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedline_search`(
IN p_layershedid INT 
)
BEGIN
	SELECT id,
		   linename,
           layershedid,
           description,
           capacity
            
    FROM  layershedline
    WHERE 
          layershedid = p_layershedid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedline_select`(
IN p_id INT 
)
BEGIN
	SELECT id,
           layershedid,
		   linename,
		   description,
           capacity
            
    FROM  layershedline
    WHERE 
          id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedparameter_byparametertype_search`(
    IN p_companyid INT,
    IN p_parametertypeid INT
)
BEGIN

	SELECT 
		 id,
         parametername,
         requiredratio,
         ismandatory,
         parametertypeid
	FROM
		layershedparameter 
	
	WHERE
		companyid = p_companyid AND
        parametertypeid = p_parametertypeid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedparameter_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM layershedparameter WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedparameter_save`(
	IN p_id INT,
    IN p_parametertypeid INT,
    IN p_parametername VARCHAR(200),
    IN p_requiredratio VARCHAR(50),
    IN p_ismandatory TINYINT(4),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
         IF EXISTS(
            SELECT parametername from layershedparameter where parametername = p_parametername
				AND parametertypeid = p_parametertypeid
				AND (NULLIF(p_id, 0) IS NULL)
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    BEGIN
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layershedparameter
				(id, parametertypeid, parametername, requiredratio, ismandatory, companyid)
			VALUES 
				(p_id, p_parametertypeid, p_parametername, p_requiredratio, p_ismandatory, p_companyid);
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE layershedparameter
				SET parametertypeid = p_parametertypeid, 
                parametername = p_parametername, 
                requiredratio = p_requiredratio,
                ismandatory = p_ismandatory,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'layershedparameter', out_id, @action, p_userid);
END;
END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedparameter_select`(
  IN p_id INT 
)
BEGIN
	SELECT id,
		   parametertypeid,
		   parametername,
           requiredratio,
           ismandatory
            
    FROM  layershedparameter 
    WHERE 
          id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedparameter_shedready`(

	IN p_companyid INT
)
BEGIN

	SELECT id as shedparameterid,
		   parametertypeid,
		   parametername,
           requiredratio,
           ismandatory
            
    FROM  layershedparameter 
    WHERE 
          companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedreadydetail_delete`(
  IN p_id INT
)
BEGIN
	DELETE FROM layershedreadydetail WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedreadydetail_save`(
	IN p_id INT,
	IN p_layershedreadyid INT,
	IN p_parametertypeid INT,
	IN p_shedparameterid INT,
	IN p_isapplied TINYINT,
	IN p_remark VARCHAR(200),
	IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layershedreadydetail
				(layershedreadyid, parametertypeid, shedparameterid, isapplied,
					remark, companyid)
			VALUES 
				(p_layershedreadyid, p_parametertypeid, p_shedparameterid, p_isapplied,
					p_remark, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE layershedreadydetail
			SET 
				layershedreadyid = p_layershedreadyid, 
                parametertypeid = p_parametertypeid, 
                shedparameterid = p_shedparameterid, 
                isapplied = p_isapplied,
				remark = p_remark, 
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layershedreadydetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedreadydetail_search`(
IN p_layershedreadyid INT
)
BEGIN

	SELECT id,
		layershedreadyid,
		LSD.parametertypeid,
        REF.refname as parametertypename,
		shedparameterid,
        SP.parametername,
		isapplied,
		remark
	FROM 
		layershedreadydetail LSD
        LEFT JOIN `reference` REF ON LSD.layershedreadyid = REF.id
        LEFT JOIN shedparameter SP ON LSD.parametertypeid = SP.id
	WHERE
		layershedreadyid= p_layershedreadyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedreadydetail_select`(	
IN p_layershedreadyid INT
)
BEGIN

	SELECT
		LR.id,
		layershedreadyid,
		LR.parametertypeid,
		shedparameterid,
        LP.parametername,
        LP.requiredratio,
		isapplied,
        ismandatory,
		remark
		
        
	FROM
		layershedreadydetail LR
        LEFT JOIN layershedparameter LP ON LP.id = LR.shedparameterid
        
        
	WHERE
		layershedreadyid = p_layershedreadyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedreadylist_search`(  
	IN p_locationid INT,
    IN p_from_date date,
	IN p_to_date date
)
BEGIN
    
    SELECT
		LR.id,
		LR.layershedid,
        L.locationname,
        S.shedname,
		batchid,
        BT.batchname,
		DATE_FORMAT(batchstartdate,'%d/%m/%Y') as batchstartdate,
		restperiod,
		createdby,
        EMP.employeename,
		DATE_FORMAT(LR.createddate,'%d/%m/%Y') as createddate,
		DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
		LR.statusid,
        REF.refname AS statusname,
		LR.companyid
        
	FROM
		layershedready LR
        LEFT JOIN layershed S ON LR.layershedid = S.id
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN breederbatch BT ON LR.batchid = BT.id
        LEFT JOIN employee EMP on LR.createdby = EMP.id
        LEFT JOIN `reference` REF ON LR.statusid = REF.id   	
	WHERE
		S.locationid = p_locationid AND
		(LR.createddate BETWEEN p_from_date AND p_to_date)
        
	ORDER BY LR.id DESC;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedready_byloation_search`(
 IN p_locationid INT,
 IN p_companyid INT
)
BEGIN

	SELECT 
    
		shedreadyid,
        shedreadydata.layershedid,
        locationname,
        locationid,
        shedname,
        capacity,
        createdby,
		statusid,
        statusname,
        username,
		companyid,
        DATE_FORMAT( maxbatch.placementdate,'%d/%m/%Y') as prevbatchdate,
		maxbatch.quantity as prevbatchquantity,
		'NO' as isscheduled
    
    
    FROM  (

				SELECT
					LR.id as shedreadyid,
					LR.layershedid,
					L.locationname,
					S.locationid,
					S.shedname,
					S.capacity,
					LR.createdby,
					LR.statusid,
					REF.refname AS statusname,
					 EMP.employeename AS username,
					LR.companyid,
                     S.statusid as 'No'
				    -- CASE WHEN  LPSD.layershedid IS NULL THEN 'No' ELSE 'Yes' END AS isscheduled
					
				FROM
					layershedready LR
					LEFT JOIN layershed S ON LR.layershedid = S.id 
					LEFT JOIN location L ON S.locationid = L.id
					LEFT JOIN employee EMP on LR.createdby = EMP.id
					LEFT JOIN `reference` REF ON LR.statusid = REF.id
				
				
				WHERE
					LR.companyid = p_companyid AND
					S.statusid = 922 AND
					LR.statusid = 1022 AND -- 'Approved'
					S.locationid = p_locationid
					
					
				ORDER BY 
					LR.createddate DESC

		) AS shedreadydata

			LEFT JOIN
					(
						SELECT LBP.id, LBP.placementdate, LBPD.layershedid, SUM(LBPD.quantity) AS quantity 
							FROM layerbatchplacement LBP
							INNER JOIN layerbatchplacementdetail LBPD ON LBPD.layerbatchplacementid = LBP.id
						GROUP BY LBP.id, LBP.placementdate, LBPD.layershedid
						
			) maxbatch ON maxbatch.layershedid = shedreadydata.layershedid

	
	ORDER BY shedname;
    
	-- S.status in [11, 12] -- Available, Pending Approval
	-- AND (BPS.id IS NULL OR (BPS.status in [2, 4] )) -- Cancelled, Processed
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedready_byshedid`(
 IN p_layershedid INT,
    IN p_companyid INT
)
BEGIN

	SELECT LSR.id,
		LSR.layershedid,
		batchid,
		DATE_FORMAT(batchstartdate,'%d/%m/%Y') as batchstartdate,
		restperiod,
		createdby,
		DATE_FORMAT(createddate,'%d/%m/%Y') as createddate,
		DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
		LSR.statusid,
        L.locationname,
        S.shedname,
        LSR.createdby,
        EMP.employeename
		
	FROM 
		layershedready LSR
        LEFT JOIN breedershed S ON LSR.layershedid = S.id
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN employee EMP on LSR.createdby = EMP.id
    WHERE 
         LSR.layershedid = p_layershedid
          and SR.companyid = p_companyid;
		
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedready_delete`(IN p_id INT
)
BEGIN
	DELETE FROM layershedready WHERE id = p_id;
    DELETE FROM layershedreadydetail WHERE layershedreadyid = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedready_save`(IN p_id int,
	IN p_layershedid int,
	IN p_batchid int,
	IN p_batchstartdate date,
	IN p_restperiod int,
	IN p_createdby int,
	IN p_createddate date,
	IN p_finalcleaningdate date,
	IN p_statusid int,
	IN p_companyid int,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layershedready
				(layershedid, batchid, batchstartdate, restperiod,
					createdby, createddate, finalcleaningdate, statusid, companyid)
			VALUES 
				(p_layershedid, p_batchid, p_batchstartdate, p_restperiod,
					p_createdby, p_createddate, p_finalcleaningdate, p_statusid, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE layershedready
			SET 
				layershedid = p_layershedid,
				batchid = p_batchid,
				batchstartdate = p_batchstartdate,
				restperiod = p_restperiod,
				createdby = p_createdby,
				createddate = p_createddate,
				finalcleaningdate = p_finalcleaningdate,
				statusid = p_statusid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- Update shed status to 12 = 'Shed Ready'
    UPDATE layershed SET statusid = 922 WHERE id = p_layershedid;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layershedready', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedready_search`(  

   IN p_companyid INT
)
BEGIN
    
    SELECT
		LR.id,
		LR.layershedid,
        L.locationname,
        S.shedname,
		batchid,
        BT.batchname,
		DATE_FORMAT(batchstartdate,'%d/%m/%Y') as batchstartdate,
		restperiod,
		createdby,
        EMP.employeename,
		DATE_FORMAT(LR.createddate,'%d/%m/%Y') as createddate,
		DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
		LR.statusid,
        REF.refname AS statusname,
		LR.companyid
        
	FROM
		layershedready LR
        LEFT JOIN layershed S ON LR.layershedid = S.id
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN breederbatch BT ON LR.batchid = BT.id
        LEFT JOIN employee EMP on LR.createdby = EMP.id
        LEFT JOIN `reference` REF ON LR.statusid = REF.id
   	
	WHERE
		LR.companyid = p_companyid
        
	ORDER BY LR.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedready_select`(
  IN p_id INT
)
BEGIN

	SELECT LR.id,
		LR.layershedid,
		batchid,
		DATE_FORMAT(batchstartdate,'%d/%m/%Y') as batchstartdate,
		restperiod,
		createdby,
		DATE_FORMAT(createddate,'%d/%m/%Y') as createddate,
		DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
		LR.statusid,
        L.locationname,
        S.shedname,
        LR.createdby,
        EMP.employeename
		
	FROM 
		layershedready LR
        LEFT JOIN layershed S ON LR.layershedid = S.id
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN employee EMP on LR.createdby = EMP.id
    WHERE 
          LR.id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedtype_delete`(
	IN p_id INT
)
BEGIN
	IF EXISTS (SELECT shedtypeid FROM layershed
		WHERE shedtypeid = p_id) THEN
		BEGIN
			SELECT 1 as `status`;
		END;
	ELSE
	   BEGIN
		SELECT 0 as `status`;
		DELETE FROM layershedtype WHERE id = p_id;
		END;
	END IF ;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedtype_save`(
	IN p_id INT,
    IN p_typename VARCHAR(100),
    IN p_description VARCHAR(300),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layershedtype 
				(id, typename, description, companyid)
			VALUES 
				(p_id, p_typename, p_description, p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE layershedtype
			SET typename = p_typename, 
                description = p_description, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';     
    
	END IF;
    
	SELECT LAST_INSERT_ID() INTO out_id;

	
	-- RECORD LOG
	CALL spc_commonlog_save(p_companyid, 'layershedtype', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedtype_search`(
  IN p_companyid INT 
)
BEGIN
	SELECT id ,
		   typename,
           description
            
    FROM  layershedtype 
    WHERE 
          companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershedtype_select`(
  IN p_id INT 
)
BEGIN
	SELECT id ,
		   typename,
           description
            
    FROM  layershedtype
    WHERE 
          id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershed_batchwise_search`(
    IN p_companyid INT,
    IN p_layerbatchid INT
)
BEGIN


        
	SELECT 
    
		LBB.layerbatchid,
        LS.id as shedid,
        LS.shedname,
        LS.capacity,
		L.locationname,
        LS.warehouseid as warehouseid,
        LS.warehousebinid,
        DATE_FORMAT(DATE_ADD((SELECT transactiondate FROM layerdailytransaction WHERE layerbatchid = LBB.layerbatchid AND shedid = LS.id ORDER BY transactiondate DESC LIMIT 1), INTERVAL 1 DAY),'%d/%m/%Y') as lasttransactiondate
        
	FROM
		layerbatchbalance LBB
        
        LEFT JOIN layershed LS ON LS.id = LBB.layershedid
        LEFT JOIN location L ON LS.locationid = L.id
		
	WHERE
        LBB.layerbatchid = p_layerbatchid
		AND LBB.companyid = p_companyid
        AND LBB.quantity != 0
        GROUP BY LBB.layershedid;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershed_bystatusandlocation_search`(
  IN p_companyid INT,
  IN p_locationid INT(11),
  IN p_statusid INT
 )
BEGIN
	SELECT
		LS.id,
        LS.statusid,
        active,
        L.locationcode,
        L.locationname,
        shedname,
		R.refname as statusname
        
	FROM
		layershed LS
        
	INNER JOIN location L ON LS.locationid = L.id
    INNER JOIN `reference` R ON LS.statusid = R.id

WHERE
		LS.companyid = p_companyid AND
        LS.statusid = p_statusid
        AND LS.locationid = p_locationid;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershed_delete`(	
 IN p_id INT
)
BEGIN
SET @Statusid = null;
SELECT statusid INTO @Statusid
 from layershed 
 where id = p_id AND statusid = 921;
 IF(@Statusid IS NOT NUll) THEN
 BEGIN
     SELECT 1 as yes;
    DELETE FROM layershedline WHERE layershedid = p_id;
	DELETE FROM layershed WHERE id = p_id;
 END;
 ELSE
  BEGIN
		SELECT 0 as yes;
			
		 END;
	END IF;
           
    END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershed_locationwise_search`(
    IN p_companyid INT,
    IN p_locationid INT
)
BEGIN

	SELECT 
		LS.id as shedid,
        LS.statusid,
        LS.capacity,
        LS.shedname,
        R.refname
        
        
	FROM
		layershed LS
        LEFT JOIN `reference` R ON R.id = LS.statusid
      
    
	WHERE
		 LS.statusid = 921 AND
        LS.locationid = p_locationid
        and LS.active = 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershed_save`(
	IN p_id INT,
    IN p_locationid INT,
    IN p_warehouseid INT(11),
    IN p_warehousebinid INT(11),
	IN p_shedtypeid INT(11),
    IN p_shedname VARCHAR(50),
    IN p_capacity INT,
    IN p_statusid VARCHAR(200),
    IN p_active TINYINT(4),
    IN p_shedlengthinft Decimal(9,3),
    IN p_shedwidthinft Decimal(9,3),
    IN p_totalsquareft decimal(9,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action1 = null;
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layershed
				(locationid, warehouseid, warehousebinid, shedtypeid, shedname, capacity, statusid, active, shedlengthinft, shedwidthinft, totalsquareft, companyid)
			VALUES 
				(p_locationid, p_warehouseid, NULL, p_shedtypeid, p_shedname, p_capacity, p_statusid, p_active, p_shedlengthinft, p_shedwidthinft, p_totalsquareft, p_companyid);
			
            SET @action1 = 'INSERT';
            
	ELSE
    
		UPDATE layershed
				SET
                locationid = p_locationid, 
				warehouseid = p_warehouseid,
                warehousebinid = p_warehousebinid,
                shedtypeid = p_shedtypeid,
                shedname = p_shedname, 
                capacity = p_capacity,
				statusid = p_statusid,
                active = p_active,
                shedlengthinft = p_shedlengthinft,
                shedwidthinft = p_shedwidthinft,
                totalsquareft = p_totalsquareft,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action1 = 'UPDATE';     
              

    
   
    END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
     
     IF(NULLIF(p_id, '0') IS NULL) THEN
    
      -- create one warehousebin for current shed
		SET @out_warehousebinid = NULL;
		CALL spc_warehousebin_save(
			NULL, p_warehouseid, CONCAT(p_shedname,'-BIN'), p_shedname,
			p_companyid, 0, p_userid, @out_warehousebinid
		);
		
		-- update warehouse bin id 
		
		UPDATE layershed SET warehousebinid = @out_warehousebinid WHERE id = out_id;
            
	END IF;
    	
   -- record log
  CALL spc_commonlog_save(p_companyid, 'layershed', out_id, @action1, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershed_search`(
   IN p_companyid INT
)
BEGIN

	SELECT 
		LS.id,
        LS.statusid,
        LS.active,
        L.locationcode,
        L.locationname,
        LS.shedname,
		LS.warehouseid,
        LS.warehousebinid,
        WB.binname,
        W.warehousename,
        LS.shedtypeid
        -- R.refname
        
	FROM
		layershed LS
        
	INNER JOIN location L ON LS.locationid = L.id
    LEFT JOIN warehousebin WB ON WB.id = LS.warehousebinid
    LEFT JOIN warehouse W ON W.id = WB.warehouseid
   
    -- INNER JOIN reference R ON BS.statusid = R.id
    
	WHERE
		LS.companyid = p_companyid
        
	ORDER BY LS.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layershed_select`(
IN p_id INT
)
BEGIN

	SELECT 
		LS.id,
		LS.locationid,
        L.locationcode,
        shedname,
        capacity,
        LS.active,
        statusid,
        LS.warehouseid,
        LS.warehousebinid,
        L.locationname,
        W.warehousename,
        W.warehousecode,
		WB.binname,
	    WB.bincode,
        LS.shedtypeid,
        LS.shedlengthinft,
        LS.shedwidthinft,
        LS.totalsquareft,
        LS.companyid
        
	FROM
		layershed LS
        
    INNER JOIN location L ON LS.locationid = L.id
	LEFT JOIN warehouse W ON LS.warehouseid = W.id
	LEFT JOIN warehousebin WB ON WB.id = LS.warehousebinid
	WHERE
	    LS.id = p_id;
		
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchbridopeningbalance_detail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM layer_batchbridopeningbalance_detail WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchbridopeningbalance_detail_save`(
   IN p_id INT(11),
   IN p_layerbatchopeningid INT(11),
   IN p_itemtype TINYINT(4),
   IN p_itemid INT(11),
   IN p_placeqty INT(11),
   IN p_rate DECIMAL(9,3),
   IN p_birdvalue DECIMAL(20,3),
   IN p_liveqty INT(11),
   IN p_mortality INT(11),
   IN p_culls INT(11),
   IN p_sexingerror INT(11),
   IN p_cullssaleqty INT(11),
   IN p_sexingerrorsaleqty INT(11),
   IN p_regularsale INT(11),
   IN p_totalsale INT(11),
   IN p_goodeggsqty INT(11),
   IN p_flooreggsqty INT(11),
   IN p_othereggsqty INT(11),
   IN p_totaleggs INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		INSERT INTO layer_batchbridopeningbalance_detail(
           id,
		   layerbatchopeningid,
           itemtype,
		   itemid,
		   placeqty,
           rate,
           birdvalue,
		   liveqty,
		   mortality,
		   culls,
           sexingerror,
		   cullssaleqty,
           sexingerrorsaleqty,
		   regularsale,
		   totalsale,
		   goodeggsqty,
		   flooreggsqty,
           othereggsqty,
		   totaleggs,
		   companyid
        )
        
        VALUES(
		   p_id,
		   p_layerbatchopeningid,
           p_itemtype,
		   p_itemid,
		   p_placeqty,
           p_rate,
           p_birdvalue,
		   p_liveqty,
		   p_mortality,
		   p_culls,
           p_sexingerror,
		   p_cullssaleqty,
           p_sexingerrorsaleqty,
		   p_regularsale,
		   p_totalsale,
		   p_goodeggsqty,
		   p_flooreggsqty,
           p_othereggsqty,
		   p_totaleggs,
		   p_companyid
        );
        
        SET @action = 'INSERT';
    
    ELSE
    
		UPDATE layer_batchbridopeningbalance_detail
        SET 
		   layerbatchopeningid = p_layerbatchopeningid,
           itemtype = p_itemtype,
		   itemid = p_itemid,
		   placeqty = p_placeqty,
           rate = p_rate,
           birdvalue = p_birdvalue,
		   liveqty = p_liveqty,
		   mortality = p_mortality,
		   culls = p_culls,
           sexingerror = p_sexingerror,
		   cullssaleqty = p_cullssaleqty,
           sexingerrorsaleqty = p_sexingerrorsaleqty,
		   regularsale = p_regularsale,
		   totalsale = p_totalsale,
		   goodeggsqty = p_goodeggsqty,
		   flooreggsqty = p_flooreggsqty,
           othereggsqty = p_othereggsqty,
		   totaleggs = p_totaleggs,
		   companyid = p_companyid,
           id = LAST_INSERT_ID(id)
		WHERE
				id = p_id
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
    
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'layer_batchbridopeningbalance_detail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchbridopeningbalance_detail_search`(
	IN p_layerbatchopeningid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT 
		   layerbatchopeningid,
		   itemid,
		   placeqty,
           rate,
           birdvalue,
		   liveqty,
		   mortality,
		   culls,
           sexingerror,
		   cullssaleqty,
           sexingerrorsaleqty,
		   regularsale,
		   totalsale,
		   goodeggsqty,
		   flooreggsqty,
           othereggsqty,
		   totaleggs
    
    FROM layer_batchbridopeningbalance_detail
    
    WHERE layerbatchopeningid = p_layerbatchopeningid AND companyid = p_companyid;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchbridopeningbalance_detail_select`(
	IN p_companyid INT(11),
    IN p_id INT(11)
)
BEGIN

	SELECT 
		  layerbatchopeningid,
		   itemid,
		   placeqty,
           rate,
           birdvalue,
		   liveqty,
		   mortality,
		   culls,
		   sexingerror,
		   cullssaleqty,
           sexingerrorsaleqty,
		   regularsale,
		   totalsale,
		   goodeggsqty,
		   flooreggsqty,
           othereggsqty,
		   totaleggs
    
    FROM layer_batchbridopeningbalance_detail
    
    WHERE companyid = p_companyid AND id = p_id;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchconsumptionopening_detail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM layer_batchconsumptionopening_detail WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchconsumptionopening_detail_save`(
	 IN p_id INT(11),
     IN p_layerbatchopeningid INT(11),
     IN p_itemid INT(11),
     IN p_consumptiontypeid INT(11),
     IN p_consumptionitemid INT(11),
     IN p_quantity DECIMAL(20,3),
     IN p_rate DECIMAL(15,3),
     IN p_itemvalue DECIMAL(20,3),
     IN p_companyid INT(11),
     IN p_userid INT(11),
     OUT out_id INT
)
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
        INSERT INTO layer_batchconsumptionopening_detail(
			layerbatchopeningid,
			itemid,
			consumptiontypeid,
			consumptionitemid,
			quantity,
			rate,
			itemvalue,
			companyid
        )
        
        VALUES(
			p_layerbatchopeningid,
			p_itemid,
			p_consumptiontypeid,
			p_consumptionitemid,
			p_quantity,
			p_rate,
			p_itemvalue,
			p_companyid
        );
        
        SET @action = 'INSERT';
        
    ELSE
		
        UPDATE layer_batchconsumptionopening_detail
        SET layerbatchopeningid = p_layerbatchopeningid,
			itemid = p_itemid,
			consumptiontypeid = p_consumptiontypeid,
			consumptionitemid = p_consumptionitemid,
			quantity = p_quantity,
			rate = p_rate,
			itemvalue = p_itemvalue,
            id = LAST_INSERT_ID(id)
		WHERE
			id = p_id
            AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'layer_batchconsumptionopening_detail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchconsumptionopening_detail_search`(
	IN p_lyerbatchopeningid INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
			lyerbatchopeningid ,
			itemid,
			consumptiontypeid,
			consumptionitemid,
			quantity,
			rate,
			itemvalue
            
	FROM layer_batchconsumptionopening_detail
    
    WHERE lyerbatchopeningid = p_lyerbatchopeningid
    AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchconsumptionopening_detail_select`(
	IN p_id INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
			layerbatchopeningid,
		    itemid,
			consumptiontypeid,
			consumptionitemid,
			quantity,
			rate,
			itemvalue
            
	FROM layer_batchconsumptionopening_detail
    
    WHERE id = p_id
    AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchfinancialopening_detail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM layer_batchfinancialopening_detail WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchfinancialopening_detail_save`(
	IN p_id INT(11),
    IN p_layerbatchopeningid INT(11),
    IN p_birdvalue DECIMAL(20,3),
    IN p_consumptionvalue DECIMAL(20,3),
    IN p_overheadexp DECIMAL(9,3),
    IN p_birdliveqty DECIMAL(20,3),
    IN p_wipaccountbalance DECIMAL(20,3),
    IN p_wipperbird DECIMAL(12,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
        INSERT INTO layer_batchfinancialopening_detail(
			id,
			layerbatchopeningid,
		    birdvalue,
			consumptionvalue,
			overheadexp,
			birdliveqty,
			wipaccountbalance,
			wipperbird,
			companyid
        )
        
        VALUES(
			p_id,
			p_layerbatchopeningid,
			p_birdvalue,
			p_consumptionvalue,
			p_overheadexp,
			p_birdliveqty,
			p_wipaccountbalance,
			p_wipperbird,
			p_companyid
        );
        
        SET @action = 'INSERT';
        
    ELSE
		
        UPDATE layer_batchfinancialopening_detail
        SET 
			layerbatchopeningid = p_layerbatchopeningid,
			birdvalue = p_birdvalue,
			consumptionvalue = p_consumptionvalue,
			overheadexp = p_overheadexp,
			birdliveqty = p_birdliveqty,
			wipaccountbalance = p_wipaccountbalance,
			wipperbird = p_wipperbird,
            id = LAST_INSERT_ID(id)
		WHERE
			id = p_id
            AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'layer_batchfinancialopening_detail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchfinancialopening_detail_search`(
	IN p_layerbatchopeningid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT
			id,
			layerbatchopeningid,
			birdvalue,
			consumptionvalue,
			overheadexp,
			birdliveqty,
			wipaccountbalance,
			wipperbird,
			companyid
    
    FROM layer_batchfinancialopening_detail
    
	WHERE layerbatchopeningid = p_layerbatchopeningid AND companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchfinancialopening_detail_select`(
	IN p_companyid INT(11),
    IN p_id INT(11)
)
BEGIN

	SELECT
			id,
			layerbatchopeningid,
			birdvalue,
			consumptionvalue,
			overheadexp,
		    birdliveqty,
			wipaccountbalance,
			wipperbird,
			companyid
    
    FROM layer_batchfinancialopening_detail
    
	WHERE id = p_id AND companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchlocationwiseopening_detail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM layer_batchlocationwiseopening_detail WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchlocationwiseopening_detail_save`(
	IN p_id INT(11),
    IN p_layerbatchopeningid INT(11),
    IN p_itemtype TINYINT(4),
    IN p_itemid INT(11),
    IN p_balanceqty DECIMAL(20,3),
    IN p_locationid INT(11),
    IN p_shedid INT(11),
    IN p_shedlineid INT(11),
    IN p_lineqty INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
        INSERT INTO layer_batchlocationwiseopening_detail(
			layerbatchopeningid,
			itemid,
			balanceqty,
			locationid,
			shedid,
			shedlineid,
			lineqty,
			companyid
        )
        
        VALUES(
			p_layerbatchopeningid,
			p_itemid,
			p_balanceqty,
			p_locationid,
			p_shedid,
			p_shedlineid,
			p_lineqty,
			p_companyid
        );
        
        SET @action = 'INSERT';
        
    ELSE
		
        UPDATE layer_batchlocationwiseopening_detail
        SET layerbatchopeningid = p_layerbatchopeningid,
			itemid = p_itemid,
			balanceqty = p_balanceqty,
			locationid = p_locationid,
			shedid = p_shedid,
			shedlineid = p_shedlineid,
			lineqty = p_lineqty,
            id = LAST_INSERT_ID(id)
		WHERE
			id = p_id
            AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    SET @livebatchdate =null;
    SET @statusid =null;
    SET @layerbatchid = null;
    SET @batchplacementdate = null;
    SET @materialreceiptid = null;
    SET @birdrate = null;
    
    SELECT livebatchdate, statusid, layerbatchid, batchplacementdate,materialreceiptid
    INTO @livebatchdate,@statusid, @layerbatchid, @batchplacementdate,@materialreceiptid
    FROM layer_batchopening_balance WHERE id = p_layerbatchopeningid;
    
    if(@statusid=3042) then
    
		SET @out_balanceid = NULL;
		CALL spc_layerbatchbalance_save(
			NULL, @livebatchdate,
			@layerbatchid,
			p_shedid, p_shedlineid,  p_itemid, p_lineqty, 'Layer batch opening', p_companyid, 
			p_userid, @out_balanceid
		);
    
    
		SELECT rate INTO @birdrate 
		FROM layer_batchbridopeningbalance_detail
		WHERE itemid = p_itemid AND layerbatchopeningid = p_layerbatchopeningid;
    
        -- create itembatch for material receipt
		SET @itembatch = null;
		SET @itemgroup = null;
        SET @itemname = null;
        SET @itemunitid = null;
    
        select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith), itemname, itemunitid
        INTO @itembatch, @itemname, @itemunitid 
        from item I
		INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

		WHERE I.id = p_itemid;
        
        SELECT @itembatch;
        
        -- Material receipt detail entry
        SET @out_recdetailid = NULL;
		CALL spc_materialreceiptdetail_save(
			NULL, @materialreceiptid, p_itemid, (SELECT itemname FROM item WHERE id = p_itemid),
            p_balanceqty, @birdrate,
            (p_balanceqty * @birdrate),
            @itemunitid, @itembatch,
			(SELECT warehouseid FROM layershed WHERE id = p_shedid),
            (SELECT warehousebinid FROM layershed WHERE id = p_shedid),
            p_companyid,
			p_userid, NULL, @out_recdetailid
		);
              
		-- Make material movement entry for material receipt
        SET @out_movid1 = NULL;
		CALL spc_materialmovement_save(
			NULL, p_itemid, @itembatch, 685,
			@materialreceiptid, @batchplacementdate, p_balanceqty,
			NULL, NULL,
            (SELECT warehouseid FROM layershed WHERE id = p_shedid),
            (SELECT warehousebinid FROM layershed WHERE id = p_shedid),
			(p_balanceqty * @birdrate), p_companyid, p_userid, @out_movid1
		);
              
		 -- get item group id from the item id and update itemgroup table
        SELECT itemgroupid INTO @itemgroup FROM item WHERE id = p_itemid;
        
        UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
        
        WHERE id = @itemgroup;
    end if;
    
    
    -- UPDATE layer batch male female ids

	UPDATE layerbatch
	SET itemid = p_itemid
	WHERE id = @layerbatchid;

	
    
    -- update layershed status to batch started = 924
    UPDATE layershed SET statusid = 924 WHERE id = p_shedid;
    
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'layer_batchlocationwiseopening_detail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchlocationwiseopening_detail_search`(
	IN p_layerbatchopeningid INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
			layerbatchopeningid,
			itemid,
			balanceqty,
			locationid,
			shedid,
			shedlineid,
			lineqty,
			companyid
            
	FROM layer_batchlocationwiseopening_detail
    
    WHERE layerbatchopeningid = p_layerbatchopeningid AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchlocationwiseopening_detail_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,
			layerbatchopeningid,
			itemid,
			balanceqty,
			locationid,
			shedid,
			shedlineid,
			lineqty,
			companyid
            
	FROM layer_batchlocationwiseopening_detail
    
    WHERE companyid = p_companyid AND id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchopeningbalance_detail_search`(
	IN p_layerbatchopeningid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	-- layer financial
	SELECT
			id,
			layerbatchopeningid,
			birdvalue,
			consumptionvalue,
			overheadexp,
			birdliveqty,
			wipaccountbalance,
			wipperbird,
			companyid
    
    FROM layer_batchfinancialopening_detail
    
	WHERE layerbatchopeningid = p_layerbatchopeningid AND companyid = p_companyid;
    
    
    -- layer locationwise
    SELECT  LBLD.id,
			LBLD.layerbatchopeningid,
			LBLD.itemid,
            I.itemname,
            I.itemcode,
			LBLD.balanceqty,
			LBLD.locationid,
            L.locationname,
			LBLD.shedid,
            LS.shedname,
			LBLD.shedlineid,
            LSL.linename,
			LBLD.lineqty,
			LBLD.companyid,
            LS.capacity as linecapacity
            
	FROM layer_batchlocationwiseopening_detail LBLD
    LEFT JOIN item I ON I.id = LBLD.itemid
    LEFT JOIN layershed LS ON LS.id = LBLD.shedid
    LEFT JOIN layershedline LSL ON LSL.id = LBLD.shedlineid
    LEFT JOIN location L ON L.id = LBLD.locationid
    
    WHERE LBLD.layerbatchopeningid = p_layerbatchopeningid AND LBLD.companyid = p_companyid;
    
    
    -- batch bird detail
    SELECT LBBD.id,
		   LBBD.layerbatchopeningid,
           LBBD.itemtype,
		   LBBD.itemid,
           I.itemname,
           I.itemcode,
		   LBBD.placeqty,
           LBBD.rate,
           LBBD.birdvalue,
		   LBBD.liveqty,
		   LBBD.mortality,
		   LBBD.culls,
           LBBD.sexingerror,
		   LBBD.cullssaleqty,
           LBBD.sexingerrorsaleqty,
		   LBBD.regularsale,
		   LBBD.totalsale,
		   LBBD.goodeggsqty,
		   LBBD.flooreggsqty,
           LBBD.othereggsqty,
		   LBBD.totaleggs
    
    FROM layer_batchbridopeningbalance_detail LBBD
    LEFT JOIN item I ON I.id = LBBD.itemid
    
    WHERE LBBD.layerbatchopeningid = p_layerbatchopeningid AND LBBD.companyid = p_companyid;
    
    
    -- consumption detail
    SELECT  LBCD.id,
			LBCD.layerbatchopeningid,
			LBCD.itemid,
			I.itemname as itemname,
            I.itemcode as consumptionitemcode,
			LBCD.consumptiontypeid,
			LBCD.consumptionitemid,
            I1.itemname as consumptionitemname,
			LBCD.quantity,
			LBCD.rate,
			LBCD.itemvalue,
            R.refname as unit
            
	FROM layer_batchconsumptionopening_detail LBCD
    LEFT JOIN item I ON I.id = LBCD.itemid
    LEFT JOIN item I1 ON I1.id = LBCD.consumptionitemid
	LEFT JOIN `reference` R ON R.id = I.itemunitid
    
    WHERE LBCD.layerbatchopeningid = p_layerbatchopeningid
    AND LBCD.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchopening_balance_list_search`(
	IN p_locationid INT,
    IN p_batchid INT,
    IN p_from_date date,
	IN p_to_date date
)
BEGIN

	SELECT LBO.id,
		   LBO.layerbatchid,
           LB.locationid,
           L.locationname,
           L.locationcode,
		   LB.batchname,
		   DATE_FORMAT(LBO.livebatchdate,'%d/%m/%Y') as livebatchdate,
           LBO.phasestatusid,
           LBO.ageindays,
           LBO.ageinweeks,
		   DATE_FORMAT(LBO.batchplacementdate,'%d/%m/%Y') as batchplacementdate,
           DATE_FORMAT(LBO.firstdaydate,'%d/%m/%Y') as firstdaydate,
           LBO.batchstatusid,
           LBO.expectedphasestatusid,
           LBO.statusid,
           REF.refname,
           REF1.refname as batchstatus,
           LBO.receiptremark,
           LBO.jeremark
    FROM layer_batchopening_balance LBO
    LEFT JOIN layerbatch LB ON LB.id = LBO.layerbatchid
    LEFT JOIN `reference` REF ON REF.id = LBO.statusid
    LEFT JOIN `reference` REF1 ON REF1.id = LBO.batchstatusid
    LEFT JOIN location L ON L.id = LB.locationid
    
    WHERE
		LB.locationid = p_locationid AND
        LBO.layerbatchid = p_batchid AND
        (LBO.batchplacementdate BETWEEN p_from_date AND p_to_date)
    order by LBO.id desc;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchopening_balance_save`(
   IN p_id INT(11),
   IN p_batchname VARCHAR(100),
   IN p_locationid INT(11),
   IN p_layerbatchid INT(11),
   IN p_livebatchdate DATE,
   IN p_phasestatusid INT(11),
   IN p_ageindays INT(11),
   IN p_ageinweeks DECIMAL(9,3),
   IN p_batchplacementdate DATE,
   IN p_firstdaydate DATE,
   IN p_batchstatusid INT(11),
   IN p_expectedphasestatusid INT(11),
   IN p_statusid INT(11),
   IN p_receiptremark VARCHAR(100),
   IN p_jeremark VARCHAR(100),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		-- Insert breederbatch
        SET @layerbatchid = null;
        CALL spc_layerbatch_save(
			NULL,
            p_locationid,
            NULL,
            p_batchname,
            NULL,
            982,
            p_companyid,
            p_userid,
            @layerbatchid
        );
    
		INSERT INTO layer_batchopening_balance(
		   layerbatchid,
		   livebatchdate,
           phasestatusid,
           ageindays,
           ageinweeks,
		   batchplacementdate,
           firstdaydate,
           batchstatusid,
           expectedphasestatusid,
           statusid,
           receiptremark,
           jeremark,
           companyid
        )
        
        VALUES(
		   @layerbatchid,
		   p_livebatchdate,
           p_phasestatusid,
           p_ageindays,
           p_ageinweeks,
		   p_batchplacementdate,
           p_firstdaydate,
           p_batchstatusid,
           p_expectedphasestatusid,
           p_statusid,
           p_receiptremark,
           p_jeremark,
           p_companyid
        );
        
        SET @action = 'INSERT';
    
    ELSE
    
		UPDATE layer_batchopening_balance
        SET layerbatchid = p_layerbatchid,
		   livebatchdate = p_livebatchdate,
           phasestatusid = p_phasestatusid,
           ageindays = p_ageindays,
           ageinweeks = p_ageinweeks,
		   batchplacementdate = p_batchplacementdate,
           firstdaydate = p_firstdaydate,
           batchstatusid = p_batchstatusid,
           expectedphasestatusid = p_expectedphasestatusid,
           statusid = p_statusid,
           receiptremark = p_receiptremark,
           jeremark = p_jeremark,
           id = LAST_INSERT_ID(id)
		WHERE
				id = p_id
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
    
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF(p_statusid = 3042)THEN
    
		-- Make material receipt entry for DOC
		SET @out_recid = NULL;
		CALL spc_materialreceipt_save(
			NULL, p_batchplacementdate, 345, p_layerbatchid, 322, NULL,
			p_userid, p_userid, p_batchplacementdate, p_companyid,
			p_userid, @out_recid
		);
        
      --   select @out_recid;
        
        -- update material receipt id in breederbatchopening table
        UPDATE layer_batchopening_balance SET materialreceiptid = @out_recid WHERE id = out_id;
    
    END IF;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'layer_batchopening_balance', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchopening_balance_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT LBO.id,
		   LBO.layerbatchid,
           LB.locationid,
           L.locationname,
           L.locationcode,
		   LB.batchname,
		   DATE_FORMAT(LBO.livebatchdate,'%d/%m/%Y') as livebatchdate,
           LBO.phasestatusid,
           LBO.ageindays,
           LBO.ageinweeks,
		   DATE_FORMAT(LBO.batchplacementdate,'%d/%m/%Y') as batchplacementdate,
           DATE_FORMAT(LBO.firstdaydate,'%d/%m/%Y') as firstdaydate,
           LBO.batchstatusid,
           LBO.expectedphasestatusid,
           LBO.statusid,
           REF.refname,
           REF1.refname as batchstatus,
           LBO.receiptremark,
           LBO.jeremark
    FROM layer_batchopening_balance LBO
    LEFT JOIN layerbatch LB ON LB.id = LBO.layerbatchid
    LEFT JOIN `reference` REF ON REF.id = LBO.statusid
    LEFT JOIN `reference` REF1 ON REF1.id = LBO.batchstatusid
    LEFT JOIN location L ON L.id = LB.locationid
    
    WHERE LBO.companyid = p_companyid
    order by LBO.id desc;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchopening_balance_select`(
	IN p_id INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT 
           LBO.id,
           LBO.layerbatchid,
		   LB.locationid,
           L.locationname,
           L.locationcode,
		   DATE_FORMAT(LBO.livebatchdate,'%d/%m/%Y') as livebatchdate,
           LBO.phasestatusid,
           LBO.ageindays,
           LBO.ageinweeks,
		   DATE_FORMAT(LBO.batchplacementdate,'%d/%m/%Y') as batchplacementdate,
           DATE_FORMAT(LBO.firstdaydate,'%d/%m/%Y') as firstdaydate,
           LBO.batchstatusid,
           LBO.expectedphasestatusid,
           LBO.statusid,
           LBO.receiptremark,
           LBO.jeremark
    FROM layer_batchopening_balance LBO
    LEFT JOIN layerbatch LB ON LB.id = LBO.layerbatchid
    LEFT JOIN location L ON L.id = LB.locationid
    
    WHERE LBO.id = p_id AND LBO.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batchwisephase`(
IN p_layerbatchid INT(11),
IN p_companyid INT(11)
)
BEGIN
select 
LP.id,
LP.phasename,
LBP.layerbatchid
from layerphase LP
LEFT JOIN layerbatchplacement LBP ON LBP.phasestatusid = LP.id

where
 LBP.layerbatchid =  p_layerbatchid and
 LBP.companyid = p_companyid;
     


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batch_analysis_data`(
IN p_company_id INT(11),
IN p_date DATE,
IN p_out_id BIGINT(11)
)
BEGIN

 DROP TEMPORARY TABLE IF EXISTS temp_batch_analysis;
 CREATE TEMPORARY TABLE temp_batch_analysis
  select id,itemid,
  fnc_getlayerplacementdate(id,p_company_id) as placementdate,
  fnc_layerchicks_placementqty(id,p_company_id,itemid) as placedqty,
  fnc_layerbatchwise_birdliveqty(id,itemid,p_date,p_company_id) as live_qty,
  fnc_layerbatchwise_today_mortality(id,itemid,p_date,p_company_id) as today_mortality,
  fnc_layerbatchwise_cummulative_mortality(id,itemid,p_date,p_company_id) as cum_mortality,
  fnc_lyr_batch_wise_feed(id,itemid,p_date,p_company_id) as today_feed,
  fnc_lyr_batch_wise_cummulative_feed(id,itemid,p_date,p_company_id) as cum_feed,
  ifnull(lyr_datewise_body_weight(id,itemid,p_date,p_company_id),0) as body_weight,
  ifnull(layer_batchwise_eggscollection(id,p_date,p_company_id),0) as eggscollection,
   layer_batchwise_ce_eggscollection(id,p_date,p_company_id) as ce_eggscollection,
  fun_overhed_exp(id,725,p_date,p_company_id) as overheadexp,
  fun_amortizatiobvalue_forlayer(id,p_date) as amortizationvalue,
  fnc_layerbatchwise_salesvalue(id,725,p_date,p_company_id)as salesvalue,
  fun_layerlive_biredcost(id,p_company_id,p_date) as birdcost
  from layerbatch
  WHERE statusid = 982 AND companyid = p_company_id;
  SELECT * FROM temp_batch_analysis;
  INSERT INTO layer_batch_analysis 
  SELECT
  null ,p_date,TA.id ,placementdate ,
  TRUNCATE (((DATEDIFF(p_date,placementdate)/7)),0) as ageinweeks,
  DATEDIFF(p_date,placementdate) as ageindayes,
  placedqty ,live_qty ,today_mortality ,cum_mortality ,
			 ((live_qty*(cumdepl/7))/100),today_feed ,cum_feed ,((fnc_layer_getweekwise_std_feed(TA.itemid,(SELECT TRUNCATE (((DATEDIFF(p_date,placementdate)/7)),0))))/7) ,
			body_weight ,((fnc_layer_getweekwise_std_body_weight(TA.itemid,(SELECT TRUNCATE (((DATEDIFF(p_date,placementdate)/7)),0))))/7) ,eggscollection ,
			ce_eggscollection ,((live_qty*hdppercent)/100) ,TA.itemid ,overheadexp ,
			amortizationvalue ,0 ,salesvalue ,0 ,birdcost ,
			((ce_eggscollection* eggscollection)*100),0 ,0,p_company_id,(today_feed/live_qty)
 FROM 
 temp_batch_analysis TA
 Left Join layerperformanceobjective LPO ON LPO.itemid = TA.itemid AND LPO.ageinweek = (SELECT TRUNCATE (((DATEDIFF(p_date,placementdate)/7)),0));
  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_batch_analysis_save`(
 IN p_id BIGINT(11),
 IN p_transaction_date DATE,
 IN p_batch_id INT(11),
 IN p_placement_date DATE,
 IN p_age_in_days INT(11),
 IN p_age_in_week INT(11),
 IN p_placed_qty INT(11),
 IN p_live_qty INT(11),
 IN p_today_mortality INT(11),
 IN p_cummulative_mortality INT(11),
 IN p_std_mortality INT(11),
 IN p_feed_cons DECIMAL(15,3),
 IN p_cummulative_feed_cons DECIMAl(15,3),
 IN p_std_feed_consumption DECIMAL(15,3),
 IN p_body_weight DECIMAl(15,3),
 IN p_std_body_weight DECIMAL(15,3),
 IN p_total_eggs_collection INT(11),
 IN p_ce_eggs_qty INT(11),
 IN p_std_eggs_collection INT(11),
 IN p_item_id INT(11),
 IN p_over_head_cost DECIMAL(15,3),
 IN p_amortization_value DECIMAL(15,3),
 IN p_sales_qty INT(11),
 IN p_sales_value DECIMAL(15,3),
 IN p_balance DECIMAl(15,3),
 IN p_bird_cost DECIMAl(15,3),
 IN p_ce_eggs_collection_ratio DECIMAL(15,3),
 IN p_ce_std_eggscollection_ratio DECIMAL(15,3),
 IN p_feed_std_ratio DECIMAL(15,3),
 IN p_company_id INT(11)
 
 )
BEGIN
  IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO layer_batch_analysis (id ,transaction_date,batch_id ,placement_date ,age_in_days ,
			age_in_week ,placed_qty ,live_qty ,today_mortality ,cummulative_mortality ,
			std_mortality ,feed_cons ,cummulative_feed_cons ,std_feed_consumption ,
			body_weight ,std_body_weight ,total_eggs_collection ,
			ce_eggs_qty ,std_eggs_collection ,item_id ,over_head_cost ,
			amortization_value ,sales_qty ,sales_value ,balance ,bird_cost ,
			ce_eggs_collection_ratio ,ce_std_eggscollection_ratio ,
			feed_std_ratio ,company_id )
		VALUES(p_id ,p_transaction_date,p_batch_id ,p_placement_date ,p_age_in_days ,
			p_age_in_week ,p_placed_qty ,p_live_qty ,p_today_mortality ,p_cummulative_mortality ,
			p_std_mortality ,p_feed_cons ,p_cummulative_feed_cons ,p_std_feed_consumption ,
			p_body_weight ,p_std_body_weight ,p_total_eggs_collection ,
			p_ce_eggs_qty ,p_std_eggs_collection ,p_item_id ,p_over_head_cost ,
			p_amortization_value ,p_sales_qty ,p_sales_value ,p_balance ,p_bird_cost ,
			p_ce_eggs_collection_ratio ,p_ce_std_eggscollection_ratio ,
			p_feed_std_ratio ,p_company_id);
        
     
        
    END IF;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_before_amortization_exp_reporst`(
IN p_batchid varchar(2000),
IN p_fromdate DATE,
IN p_todate DATE,
IN p_companyid INT)
BEGIN
SET  @p_todate = null;
SET  @p_placementdate = null;
-- SET @p_batchid = p_batchid;

-- get placment date batch wise
 SELECT fnc_getplacementdate_layer(p_batchid,p_companyid) INTO @p_placementdate;
 -- get age in week for to date and if age in week < then todate todate same as lat 24 week date
  SELECT TRUNCATE (((DATEDIFF(p_todate,@p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 19 )THEN
      SELECT date_add(@p_placementdate,INTERVAL 132 DAY) INTO @p_todate;
      END IF;
      if(@ageinweeks <= 19) THEN
       SELECT p_todate INTO @p_todate;
	  END IF;
       -- get age in week for to date and if age in week < then from todate same as lat 24 week date
      SELECT TRUNCATE (((DATEDIFF(p_fromdate,@p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 19 )THEN
      SELECT date_add(@p_placementdate,INTERVAL 132 DAY) INTO @p_fromdate;
      END IF;
      if(@ageinweeks <= 19) THEN
       SELECT p_fromdate INTO @p_fromdate;
	  END IF;
SELECT 
		DATE_FORMAT( jedate,'%d/%m/%Y') as jedate,
		JEA.dramount,coaname,glcode, JEA.cramount,JEA.batchid,LB.batchname
		FROM journalentryfor_amortization JEA
        LEFT JOIN chartofaccount CA ON CA.id = JEA.acledgerid
        LEFT JOIN layerbatch LB ON LB.id = JEA.batchid
        WHERE find_in_set(batchid,p_batchid)
        AND moduleid = 725 AND 
        jedate between @p_fromdate  AND @p_todate;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_birdcost_save`(
 IN p_id INT(11),
 IN p_itemid INT(11),
 IN p_issueqty DECIMAL(20,3),
 IN p_transactiondate DATE,
 IN p_unitcost DECIMAL(30,6),
 IN p_itemvalue DECIMAL(30,6),
 IN p_itembatch VARCHAR(200),
 IN p_layerbatchid INT(11),
 IN p_shedid INT(11),
 IN p_transactionid INT(11),
 IN p_companyid INT(11))
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO layer_birdcost(itemid, issueqty, transactiondate, unitcost, itemvalue,itembatch,layerbatchid,shedid,transactionid,companyid)
        VALUES (p_itemid, p_issueqty, p_transactiondate, p_unitcost, p_itemvalue,p_itembatch,p_layerbatchid,p_shedid,p_transactionid,p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE layer_birdcost
        SET itemid = p_itemid,
			issueqty = p_issueqty,
            transactiondate = p_transactiondate,
            unitcost = p_unitcost,
            itemvalue = p_itemvalue,
            itembatch = p_itembatch,
            layerbatchid = p_layerbatchid,
            shedid = p_shedid,
            transactionid = p_transactionid,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
  
   END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_eggscollection_tilldate`(
    p_layerbatchid INT,
    p_shedid INT,
    p_collectiondate DATE,
    p_companyid INT
    )
BEGIN
	SET @eggscollectionQty = null;
    SET @placementdate = null;
    SET @DefaultFemaleChiksid = NULL;
	SET @liveqty = NULL;
    
    
-- femaleid by batchid
	SELECT itemid INTO @DefaultFemaleChiksid
	FROM layerbatch
	WHERE id = p_layerbatchid;
   
    -- shed,batchid itemwise live stock-- 
    SELECT fnc_layerbatchwise_malefemaleopbalance(p_layerbatchid, p_shedid, @DefaultFemaleChiksid ,p_collectiondate,p_companyid) INTO @liveqty;
	
    -- get batch palcement date
    SELECT fnc_getlayerplacementdate(p_layerbatchid, p_companyid) INTO @placementdate;

    
    -- for eggscollection qty
	SELECT SUM(LECD.quantity) INTO @eggscollectionQty
	From layereggscollection LEC
	LEFT JOIN layereggscollectiondetail LECD ON LEC.id = LECD.eggscollectionid
	WHERE LEC.layerbatchid = p_layerbatchid
    AND LEC.shedid = p_shedid
    AND LEC.collectiondate <= p_collectiondate
    AND LEC.companyid = p_companyid ;
          
	 -- for distribution qty
	
      
	/*SELECT IFNULL(SUM(LED.quantity), 0) INTO @hatchingQty
	From layereggscollection LEC
	LEFT JOIN layereggsdistributiondetail LED ON LEC.id = LED.eggscollectionid 
	WHERE LEC.layerbatchid = p_layerbatchid
    AND LEC.shedid = p_shedid
    AND LEC.collectiondate <= p_collectiondate
    AND LEC.companyid = p_companyid
    AND LED.itemtypeid = 1129 
    group by LED.itemtypeid;*/
	
	SELECT TRUNCATE(((DATEDIFF(p_collectiondate,@placementdate)+1)/7),0) INTO  @weekno;
    SELECT ifnull((((DATEDIFF(p_collectiondate,@placementdate)+1)%7)),0) INTO  @days;
  
SELECT  @eggscollectionQty AS eggscollectionQty, 
		DATE_FORMAT(@placementdate,'%d/%m/%Y') as placementdate,
        @weekno  as weekno,@days as days, concat(@weekno,'-Week,',@days,'-Days')as weeknowithdays,@liveqty as instock;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_layer_feeddeviation_report`( 
 IN p_layerbatchid INT,
 IN p_shedid VARCHAR(200),
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_companyid INT)
BEGIN
SET @@sql_mode = '';
SET @femaleitemid = null;
 -- for female id for layerbatch
	SELECT  
		 itemid INTO @femaleitemid
	FROM
		layerbatch
        WHERE 
			id = p_layerbatchid ;

SELECT layeritemid, shedname,transactiondate, weekno, layeritemname,
IF(livestock=0,femaleinqty,livestock)as livestock,
femaleinqty,itemname,feedstdid,
IFNULL(LFSD.feedconsumed,0) as stfeedconsumed,atfeedconsumption, 
IFNULL((LFSD.feedconsumed - atfeedconsumption),0) as difffeedconsumption,
ROUND(IFNULL(FORMAT((LFSD.feedconsumed/livestock),3),0),2)as stfeedconsumedperbird,
-- ROUND(IFNULL(FORMAT(((atfeedconsumption*1000)/livestock),3),0),2)as actfeedconsumedperbird,
IF(livestock=0,ROUND(IFNULL(FORMAT(((atfeedconsumption*1000)/femaleinqty),3),0),2), ROUND(IFNULL(FORMAT(((atfeedconsumption*1000)/livestock),3),0),2))as actfeedconsumedperbird
FROM(
SELECT 
      -- LDT.id as dailytranid,
       fun_layerbatch_ageinweek(LDT.transactiondate,LDT.layerbatchid,p_companyid) as weekno,
       LDT.shedid,
       LFS.id as feedstdid,
       LS.shedname,
       LDT.transactiondate,
       fnc_calculate_layer_received_feed(LDT.shedid, @femaleitemid,LDT.transactiondate,p_companyid) as femaleinqty,
	   IFNULL(MIN(fun_lyr_transaction_date_waise_liveqtyope(LDT.layerbatchid, LDT.shedid,@femaleitemid,LDT.transactiondate,p_companyid)),0)as livestock,
	   LDC.itemid as feeditemid,
       LDM.itemid as layeritemid,
	   I.itemname,
	   I1.itemname as layeritemname,
	   SUM(fnc_calculate_layerfemale_feedconsumption(LDT.id,LDC.itemid)) as atfeedconsumption
        
	  FROM layerdailytransaction  LDT
	  LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id AND LDM.itemid = @femaleitemid
	  LEFT JOIN layerdailyconsumption LDC ON LDC.layerdailytransactionid = LDT.id AND LDC.consumptiontypeid = 1149 AND LDC.layeritemid = @femaleitemid
	  LEFT JOIN layerfeedstandard LFS ON LFS.layeritemid = @femaleitemid
	  LEFT JOIN item I ON I.id = LDC.itemid 
	  LEFT JOIN layershed LS ON LS.id =  LDT.shedid
	  LEFT JOIN item I1 ON I1.id = LDM.itemid 
  
 WHERE 
               LDT.layerbatchid = p_layerbatchid
                AND FIND_IN_SET(LDT.shedid, p_shedid)
				AND LDT.transactiondate between p_fromdate AND p_todate
				group by weekno
                order by LDT.layerbatchid, LDT.shedid, LDT.transactiondate ) as temp1
			    LEFT JOIN layerfeedstandarddetail LFSD ON LFSD.layerfeedstandardid= feedstdid AND weekno=LFSD.weeknumber AND LFSD.itemid= feeditemid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_leasiondetail_select`(
IN p_id INT(11)
)
BEGIN

	SELECT id, lesionid, lesionname, companyid
           
	FROM lesiondetail
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_ledgeropeningbalance_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DELETE FROM ledgeropeningbalance WHERE id = p_id;
    
    SET @jeid = null;
    SELECT id INTO @jeid FROM journalentry WHERE transactionid = p_id AND journalentrysubject = 'Ledger opening balance JE' AND narration = 'Ledger opening balance JE';

	DELETE FROM journalentry WHERE id = @jeid;
	DELETE FROM journalentrydetail WHERE journalentryid = @jeid;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'ledgeropeningbalance', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_ledgeropeningbalance_save`(
   IN p_id INT(11),
   IN p_openingbalancedate DATE,
   IN p_branchid INT,
   IN p_ledgerid INT(11),
   IN p_openingbalance DECIMAL(15,3),
   IN p_openingbalancetype VARCHAR(5),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   IN p_transactiontypeid INT,
   OUT out_id INT
)
BEGIN

	SET @action = null;
     SET @p_openingledgerid = null;
   SELECT opening_balance_ledger_id INTO @p_openingledgerid FROM common_setting WHERE  companyid = p_companyid limit 1;
     if(@p_openingledgerid IS NOT NUll) THEN
    IF EXISTS(
            SELECT id from ledgeropeningbalance where branchid = p_branchid AND ledgerid = p_ledgerid
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    
    BEGIN
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO ledgeropeningbalance 
				(id, 
                openingbalancedate,
                branchid, 
                ledgerid, 
                openingbalance,
                transactiontypeid,
                companyid)
			VALUES 
				(p_id, 
                p_openingbalancedate,
                p_branchid, 
                p_ledgerid, 
                p_openingbalance, 
              --  (CASE p_openingbalancetype WHEN 'Dr' THEN openingbalance ELSE (-1 * openingbalance) END), 
                p_transactiontypeid,
                p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE ledgeropeningbalance
		SET branchid = p_branchid,
			openingbalancedate = p_openingbalancedate,
			ledgerid = p_ledgerid,
			openingbalance = p_openingbalance, 
			companyid = p_companyid,
            transactiontypeid = p_transactiontypeid,
			id = LAST_INSERT_ID(id)
			
		WHERE
			id = p_id
			AND companyid = p_companyid;
            
           SET @action = 'UPDATE';  
           
           SET @jeid = null;
           SELECT id INTO @jeid FROM journalentry WHERE transactionid = p_id AND journalentrysubject = 'Ledger opening balance JE' AND narration = 'Ledger opening balance JE';
    
		   DELETE FROM journalentry WHERE id = @jeid;
		   DELETE FROM journalentrydetail WHERE journalentryid = @jeid;
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    END;
    
    END IF;
    
    -- start insert JE for item opening balance
    
			SET @jeid = null;
			CALL spc_journalentry_save(
				NULL,
				NULL,
				1299,
				NULL,
				p_openingbalancedate,
				NULL,
				p_branchid,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                346,
				NULL,
				'Ledger opening balance JE',
				NULL,
				NULL,
				NULL,
				out_id,
				'Ledger opening balance JE',
				p_companyid,
                p_userid,
                @jeid
			);
            
            IF(p_transactiontypeid = 1321) THEN -- CR
            -- CRedit to party opening GL
				SET @jedetailid = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					p_ledgerid,
					0,
					NULL,
					NULL,
					NULL,
                    NULL,
					NULL,
					NULL,
					NULL,
					0,
					p_openingbalance,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					'Ledger opening JE',
					p_companyid,
					p_userid,
					@jedetailid
				 );
				
				-- Debit to selected ledgerid
				
				 SET @jedetailid1 = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@p_openingledgerid,
					0,
					NULL,
					NULL,
                    NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					p_openingbalance,
					0,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					'Party opening JE',
					p_companyid,
					p_userid,
					@jedetailid1
				 );
				ELSE
					-- credit to party opening ledger
					SET @jedetailid = null;
					 CALL spc_journalentrydetail_save( 
						NULL,
						@jeid,
						@p_openingledgerid,
						0,
						NULL,
						NULL,
						NULL,
                        NULL,
						NULL,
						NULL,
						NULL,
						0,
						p_openingbalance,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						'Ledger opening JE',
						p_companyid,
						p_userid,
						@jedetailid
					 );
					
					-- Debit to party ledgerid
					
					 SET @jedetailid1 = null;
					 CALL spc_journalentrydetail_save( 
						NULL,
						@jeid,
						p_ledgerid,
						0,
						NULL,
						NULL,
                        NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						p_openingbalance,
						0,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						'Ledger opening JE',
						p_companyid,
						p_userid,
						@jedetailid1
					 );
            
            END IF;
else
SELECT -2 INTO out_id;
END IF;
            
    
    -- END JE
   -- record log
  -- CALL spc_commonlog_save(p_companyid, 'ledgeropeningbalance', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_ledgeropeningbalance_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
			LOB.id,
            DATE_FORMAT(LOB.openingbalancedate,'%d/%m/%Y') as openingbalancedate,
            LOB.branchid,
            B.branchname,
            LOB.ledgerid,
            COA.coaname as ledgername,
            COA.glcode as ledgercode,
            ABS(LOB.openingbalance) as openingbalance,
            LOB.transactiontypeid as transactiontypenameid,
            REF.refname as openingbalancetype
            -- CASE WHEN LOB.openingbalance >= 0 THEN 'Dr' ELSE 'Cr' END as openingbalancetype
			
	FROM ledgeropeningbalance LOB
    LEFT JOIN branch B ON B.id = LOB.branchid
    LEFT JOIN chartofaccount COA ON COA.id = LOB.ledgerid
    LEFT JOIN `reference` REF ON REF.id = LOB.transactiontypeid
	
  
  
	WHERE LOB.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_ledgeropeningbalance_select`(
	IN p_id INT
)
BEGIN

	SELECT
			LOB.id,
            LOB.branchid,
            DATE_FORMAT(LOB.openingbalancedate,'%d/%m/%Y') as openingbalancedate,
            CB.branchname,
            LOB.ledgerid,
            COA.coaname as ledgername,
            ABS(LOB.openingbalance) as openingbalance,
            REF.refname as openingbalancetype,
            LOB.transactiontypeid
            -- CASE WHEN LOB.openingbalance >= 0 THEN 'Dr' ELSE 'Cr' END as openingbalancetype
			
	FROM ledgeropeningbalance LOB
    LEFT JOIN commonbranch CB ON CB.id = LOB.branchid
    LEFT JOIN chartofaccount COA ON COA.id = LOB.ledgerid
	LEFT JOIN `reference` REF ON REF.id = LOB.transactiontypeid
  
	WHERE LOB.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_ledgers_search`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		*
	FROM
		chartofaccount 
        
	WHERE
		 companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_ledger_balancesheet`(
	IN p_todate DATE,
    IN p_companyid INT(11)
)
BEGIN
SET @financialyr_st_date = null;
select startfrom INTO @financialyr_st_date FROM financialyearsetting WHERE companyid = p_companyid AND active = 1 ;
SET @profit = 0;
SET @loss = 0;
select fnc_get_profit_and_loss_amount(@financialyr_st_date,p_todate,p_companyid) INTO @prolossbalance;
if(@prolossbalance>0) THEN 
 SET @profit = ABS(@prolossbalance);
ELSE
 SET  @loss = ABS(@prolossbalance);
END IF;
	-- FOR ASSET
    DROP TEMPORARY TABLE IF EXISTS asset;
    CREATE TEMPORARY TABLE asset
	SELECT COA.id,
           COA.glcode,
           JED.acledgerid,
           COA.coaname as ledgername,
           COA.isparent,
           COA.groupid,
           fnc_getgroupname(COA.groupid) as groupname,
          --  IFNULL(fnc_balancesheet(p_todate,JED.acledgerid), 0) as balance,
          -- IFNULL(SUM(JED.dramount),0) as dramount,
          --  IFNULL(SUM(JED.cramount),0) as cramount,
           (((IFNULL(fnc_balancesheet(@financialyr_st_date,p_todate,JED.acledgerid), 0) + IFNULL(SUM(JED.dramount),0)) - IFNULL(SUM(JED.cramount),0))) as amount
           
	FROM chartofaccount COA
    
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid
    
    WHERE JE.voucherdate between @financialyr_st_date AND p_todate
    AND JE.companyid = p_companyid
    AND COA.categoryid = 1
    
    group by JED.acledgerid;
    
    DROP TEMPORARY TABLE IF EXISTS asset1;
    CREATE TEMPORARY TABLE asset1
     SELECT * FROM asset;
    
    SELECT * FROM asset
    UNION ALL
    
    SELECT '' as id,
           '' as glcode,
           '' as acledgerid,
           'Grand Total' as ledgername,
           '' as isparent,
           '' as groupid,
           'Grand Total' as groupname,
           -- '' as balance,
           -- '' as dramount,
          --  'Grand Total' as cramount,
           ((SUM(amount))+@loss) as amount
             
	FROM asset1;
    
    -- FOR EQUITY AND LIABILITY
    DROP TEMPORARY TABLE IF EXISTS liability;
    CREATE TEMPORARY TABLE liability
    SELECT COA.id,
           COA.glcode,
           JED.acledgerid,
           COA.coaname as ledgername,
           COA.isparent,
           COA.groupid,
           fnc_getgroupname(COA.groupid) as groupname,
        --   IFNULL(fnc_balancesheet(p_todate,JED.acledgerid), 0) as balance,
         --  IFNULL(SUM(JED.dramount),0) as dramount,
         --  IFNULL(SUM(JED.cramount),0) as cramount,
           (((IFNULL(fnc_balancesheet(@financialyr_st_date,p_todate,JED.acledgerid), 0) + IFNULL(SUM(JED.dramount),0)) - IFNULL(SUM(JED.cramount),0))) as amount
           
	FROM chartofaccount COA
    
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid
    
    WHERE JE.voucherdate between @financialyr_st_date AND p_todate
    AND JE.companyid = p_companyid
    AND COA.categoryid IN (2,3)
    
    group by JED.acledgerid;
    
    DROP TEMPORARY TABLE IF EXISTS liability1;
    CREATE TEMPORARY TABLE liability1
     SELECT * FROM liability;
    
    SELECT * FROM liability
    UNION ALL
    
    SELECT '' as id,
           '' as glcode,
           '' as acledgerid,
           'Grand Total' as ledgername,
           '' as isparent,
           '' as groupid,
           'Grand Total' as groupname,
          --  '' as balance,
           -- '' as dramount,
           -- 'Grand Total' as cramount,
            ((SUM(amount))+@profit) as amount
          
	FROM liability1;
    
   
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_ledger_profitandloss`(
	IN p_fromdate DATE,
	IN p_todate DATE,
    IN p_companyid INT(11)
)
BEGIN
	SET @@sql_mode = ' ';
    SET @profit = 0;
    SET @loss = 0;
    SET @fromdate = null;
SELECT startfrom INTO @fromdate FROM financialyearsetting WHERE companyid = p_companyid AND statusid = 6021 AND active = 1 limit 1;
select fnc_get_profit_and_loss_amount(@fromdate,p_todate,p_companyid) INTO @prolossbalance;

if(@prolossbalance>0) THEN 
 SET @profit = ABS(@prolossbalance);
ELSE
 SET  @loss = ABS(@prolossbalance);
END IF;
    
    -- FOR REVENUE
    DROP TEMPORARY TABLE IF EXISTS revenue;
    CREATE TEMPORARY TABLE revenue
    
	SELECT COA.id,
           COA.glcode,
           JED.acledgerid,
           COA.coaname as ledgername,
           COA.isparent,
           COA.groupid,
           fnc_getgroupname(COA.groupid) as groupname,
          --  IFNULL(fnc_profitandloss(@fromdate, p_todate,JED.acledgerid), 0) as balance,
         --   IFNULL(SUM(JED.dramount),0) as dramount,
		 --   IFNULL(SUM(JED.cramount),0) as cramount,
           (((IFNULL(fnc_profitandloss(@fromdate, p_todate,JED.acledgerid), 0) + IFNULL(SUM(JED.dramount),0)) - IFNULL(SUM(JED.cramount),0))) as amount
           
	FROM chartofaccount COA
    
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid
    
    WHERE JE.voucherdate BETWEEN @fromdate AND p_todate
    AND JE.companyid = p_companyid
    AND COA.categoryid = 4
    
    group by JED.acledgerid;
    
    DROP TEMPORARY TABLE IF EXISTS revenue1;
    CREATE TEMPORARY TABLE revenue1
     SELECT * FROM revenue;
    
    SELECT * FROM revenue
    UNION ALL
    
    SELECT '' as id,
           '' as glcode,
           '' as acledgerid,
           'Grand Total' as ledgername,
           '' as isparent,
           '' as groupid,
           'Grand Total' as groupname,
          -- '' as balance,
           -- '' as dramount,
           -- 'Grand Total' as cramount,
          (ABS(SUM(amount))+@loss) as amount
           
	FROM revenue1;
    
	-- FOR EXPENDITURE
    
    DROP TEMPORARY TABLE IF EXISTS expenditure;
    CREATE TEMPORARY TABLE expenditure
    
    SELECT COA.id,
           COA.glcode,
           JED.acledgerid,
           COA.coaname as ledgername,
           COA.isparent,
           COA.groupid,
           fnc_getgroupname(COA.groupid) as groupname,
           -- IFNULL(fnc_profitandloss(@fromdate, p_todate,JED.acledgerid), 0) as balance,
           -- IFNULL(SUM(JED.dramount),0) as dramount,
		   -- IFNULL(SUM(JED.cramount),0) as cramount,
           (((IFNULL(fnc_profitandloss(@fromdate, p_todate,JED.acledgerid), 0) + IFNULL(SUM(JED.dramount),0)) - IFNULL(SUM(JED.cramount),0))) as amount
           
	FROM chartofaccount COA
    
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid
    
    WHERE JE.voucherdate BETWEEN @fromdate AND p_todate
    AND JE.companyid = p_companyid
    AND COA.categoryid = 5
    
    group by JED.acledgerid;
    
    DROP TEMPORARY TABLE IF EXISTS expenditure1;
    CREATE TEMPORARY TABLE expenditure1
     SELECT * FROM expenditure;
    
    SELECT * FROM expenditure
    UNION ALL
    
    SELECT '' as id,
           '' as glcode,
           '' as acledgerid,
           'Grand Total' as ledgername,
           '' as isparent,
           '' as groupid,
           'Grand Total' as groupname,
           -- '' as balance,
           -- '' as dramount,
           -- 'Grand Total' as cramount,
           (ABS(SUM(amount))+@profit) as amount
           
	FROM expenditure1;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_lesiondetail_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM lesiondetail WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'lesiondetail', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_lesiondetail_save`(
 IN p_id INT(11),
 IN p_lesionid INT(11),
 IN p_lesionname VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO lesiondetail
              (lesionid, lesionname, companyid)
       VALUES
            (p_lesionid, p_lesionname, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE lesiondetail 
   
	SET lesionid = p_lesionid,
        lesionname = p_lesionname,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'lesiondetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_lesiondetail_search`(
 IN p_lesionid INT(11)
)
BEGIN

	SELECT id, lesionname, companyid
           
	FROM lesiondetail
    
    WHERE lesionid = p_lesionid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_lesion_byorganid`(
  IN p_organid INT(11)
  )
BEGIN
 SELECT L.id, LD.lesionname, L.companyid
  
  FROM
  lesion L
LEFT JOIN lesiondetail LD ON L.id = LD.lesionid

	WHERE 
    L.organid = p_organid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_lesion_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM lesion WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'lesion', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_lesion_save`(
 IN p_id INT(11),
 IN p_organid INT(11),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO lesion
              (organid, companyid)
       VALUES
            (p_organid, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE lesion 
   
	SET organid = p_organid,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'lesion', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_lesion_search`(
 IN p_companyid INT(11)
)
BEGIN

	SELECT L.id, organid, L.companyid, O.organname
           
	FROM lesion L
    
    LEFT JOIN organ O ON O.id = L.organid
    
    WHERE L.companyid = p_companyid
    
    order by L.id DESC;
 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_lesion_select`(
IN p_id INT(11)
)
BEGIN

	SELECT id, organid, companyid
           
	FROM lesion
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_locationtype_ddl`(
  IN p_companyid INT 
)
BEGIN
	SELECT id ,
		   locationtypename
                  
    FROM  locationtype 
    WHERE 
          companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_locationtype_delete`(
	IN p_id INT
   
)
BEGIN
	IF EXISTS (SELECT shedtypeid FROM breedershed
		WHERE shedtypeid = p_id) THEN
		BEGIN
			SELECT 1 as yes;
		END;
	ELSE
	   BEGIN
		SELECT 0 as yes;
		DELETE FROM locationtype WHERE id = p_id;
		END;
	END IF ;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_locationtype_save`(
	IN p_id INT,
    IN p_locationtypename VARCHAR(100),
    IN p_description VARCHAR(200),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF EXISTS(
            SELECT locationtypename from locationtype where LOWER(locationtypename) = LOWER(p_locationtypename)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
		
        BEGIN

			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO locationtype 
						(id, locationtypename, description, companyid)
					VALUES 
						(p_id, p_locationtypename, p_description, p_companyid);
						
				SET @action = 'INSERT';
				
			ELSE
			
				UPDATE locationtype
					SET locationtypename = p_locationtypename, 
						description = p_description, 
						companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id 
						AND companyid = p_companyid;
						
				SET @action = 'UPDATE';     
			
			END IF;
			
			SELECT LAST_INSERT_ID() INTO out_id;

			
			-- RECORD LOG
			CALL spc_commonlog_save(p_companyid, 'locationtype', out_id, @action, p_userid);

	END;

END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_locationtype_search`(
  IN p_companyid INT 
)
BEGIN
	SELECT id ,
		   locationtypename,
           description
            
    FROM  locationtype 
    WHERE 
          companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_locationtype_select`(
  IN p_id INT 
)
BEGIN
	SELECT id ,
		   locationtypename,
           description
            
    FROM  locationtype 
    WHERE 
          id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_locationwisefarmerenquiry_search`(
	IN p_locationid INT,
    IN p_companyid INT
)
BEGIN

	SELECT FE.id,
		   FE.farmer_name,
           FE.farm_name,
           FE.total_area,
           FE.branch_id,
           FE.supervisor_id,
           E.employeename,
           B.branchname,
           DATE_FORMAT(FE.enquiry_date,'%d/%m/%Y') as enquiry_date
           
	FROM cbf_farmerenquiry FE
    LEFT JOIN cbf_farmeragreement FA ON FA.farmerenquiryid = FE.id
    LEFT JOIN employee E ON E.id = FE.supervisor_id
    LEFT JOIN commonbranch B ON B.id = FE.branch_id
    LEFT JOIN location L ON L.branchid = B.id
    
    WHERE L.id = p_locationid 
    AND FE.company_id = p_companyid
    AND FA.id is not null
    AND FA.statusid = 2062;
		   

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_locationwiseinprogressbreederbatch_search`(
	IN p_locationid INT,
    IN p_companyid INT
)
BEGIN

	SELECT
		B.id,
        L.locationname,
        W.warehousename,
        batchname,
        R.refname as `status`,
		DATE_FORMAT(fnc_getplacementdate(B.id,p_companyid),'%d/%m/%Y') as placementdate,
        B.locationid,
        DATE_FORMAT(fnc_getplacementdate(B.id,p_companyid),'%d/%m/%Y') as formattedplacementdate,
        BF.phasename as phasestatusname,
        DATE_FORMAT(fnc_getmodulewisedailytransactiondate(721, B.id, p_companyid),'%d/%m/%Y') as lasttransactoiondate,
		B.companyid,
        B.statusid
	
    FROM
		breederbatch B
	
    LEFT JOIN location L ON B.locationid = L.id
    LEFT JOIN warehouse W ON B.warehouseid = W.id
    LEFT JOIN `reference` R ON B.statusid = R.id
    LEFT JOIN breederbatchplacement BBP ON B.id = BBP.breederbatchid
	LEFT JOIN breederphase BF ON BBP.phasestatusid = BF.id
    WHERE
		B.companyid = p_companyid
        AND B.statusid = 222
        AND B.locationid = p_locationid
        ORDER BY B.id DESC;

	/*DROP TEMPORARY TABLE IF EXISTS placement;
	CREATE TEMPORARY TABLE placement

	SELECT
		B.id,
        L.locationname,
        W.warehousename,
        batchname,
        R.refname as `status`,
		DATE_FORMAT(fnc_getplacementdate(B.id,p_companyid),'%d/%m/%Y') as placementdate,
        B.locationid,
        DATE_FORMAT(fnc_getplacementdate(B.id,p_companyid),'%d/%m/%Y') as formattedplacementdate,
        BF.phasename as phasestatusname,
        DATE_FORMAT(DATE_ADD((SELECT transactiondate FROM breederdailytransaction WHERE breederbatchid = B.id ORDER BY transactiondate DESC LIMIT 1), INTERVAL 1 DAY),'%d/%m/%Y') AS lasttransactiondate,
        B.companyid,
        B.statusid
	
    FROM
		breederbatch B
	
    LEFT JOIN location L ON B.locationid = L.id
    LEFT JOIN warehouse W ON B.warehouseid = W.id
    LEFT JOIN `reference` R ON B.statusid = R.id
    LEFT JOIN breederbatchplacement BBP ON B.id = BBP.breederbatchid
	LEFT JOIN breederphase BF ON BBP.phasestatusid = BF.id
	
	WHERE
		B.companyid = p_companyid
        AND B.statusid = 222
        AND B.locationid = p_locationid
        ORDER BY B.id DESC;

	IF EXISTS(SELECT placementdate FROM placement WHERE locationid = p_locationid AND placementdate IS NOT NULL) THEN
    
		SELECT id,
        locationname,
        warehousename,
        batchname,
        `status`,
        placementdate,
        locationid,
		formattedplacementdate,
        phasestatusname,
        lasttransactiondate,
        statusid
	
		FROM
			placement
        
        WHERE
		companyid = p_companyid
        AND statusid = 222
        AND locationid = p_locationid
        ORDER BY id DESC;
        
	 ELSE
    
		SELECT DATE_FORMAT(BBO.batchplacementdate,'%d/%m/%Y') as formattedplacementdate,
			   BBO.batchplacementdate as placementdate,
               L.locationname,
               BBL.locationid,
               B.id,
               B.batchname,
               W.warehousename,
               BF.phasename as phasestatusname,
               R.refname as `status`,
               DATE_FORMAT(DATE_ADD((SELECT transactiondate FROM breederdailytransaction WHERE breederbatchid = B.id ORDER BY transactiondate DESC LIMIT 1), INTERVAL 1 DAY),'%d/%m/%Y') AS lasttransactiondate
        
        FROM breederbatchlocationwiseopeningdetail BBL
		LEFT JOIN breederbatchopening BBO ON BBO.id = BBL.breederbatchopeningid 
        LEFT JOIN breederphase BF ON BBO.phasestatusid = BF.id
        LEFT JOIN location L ON BBL.locationid = L.id
        LEFT JOIN breederbatch B ON B.id = BBO.breederbatchid
        LEFT JOIN warehouse W ON B.warehouseid = W.id
        LEFT JOIN `reference` R ON B.statusid = R.id
        
		WHERE BBL.locationid = p_locationid
        AND BBO.companyid = p_companyid
        AND B.statusid = 222
        AND BBL.locationid = p_locationid
        ORDER BY B.id DESC;
    
	 END IF;*/
    
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_location_ddl`(
    IN p_companyid INT,
    IN p_moduleids VARCHAR(200)
)
BEGIN
-- SET @moduleids = p_moduleids;

	SELECT 
		 L.id,
         L.locationname,
		 L.locationcode,
         (SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, L.moduleids)) as modules,
         L.branchid
	FROM
		location L
        
	WHERE 
       FIND_IN_SET(p_moduleids,L.moduleids)  AND
		 L.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_location_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM location WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_location_save`(
	IN p_id INT,
    IN p_locationname VARCHAR(200),
    IN p_moduleids VARCHAR(200),
    IN p_branchid INT(11),
    IN p_costcenterid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    SET @brname = null;
    SET @locname = null;
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
	SELECT SUBSTRING(p_locationname,1,2) INTO @locname;
    SELECT branchname INTO @brname FROM commonbranch WHERE id = p_branchid;
	SELECT CONCAT(@locname,SUBSTRING(@brname,1,2)) INTO @loccode;
		INSERT INTO location
				(id, locationname, moduleids, branchid, costcenterid, companyid)
			VALUES 
				(p_id, p_locationname, p_moduleids, p_branchid, p_costcenterid, p_companyid);
		        
        
		SELECT LAST_INSERT_ID() INTO out_id;        
		UPDATE location 
		SET locationcode = UPPER(CONCAT(@loccode, out_id))
		WHERE id = out_id;

		SET @action = 'INSERT';
		
	ELSE
    
		UPDATE location
        SET
                locationcode = p_locationcode, 
                locationname = P_locationname,
                moduleids = p_moduleids,
                branchid = p_branchid,
                costcenterid = p_costcenterid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';     

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
	 CALL spc_commonlog_save(p_companyid, 'location', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_location_search`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		L.id,
        locationcode,
        locationname,
        moduleids,
        branchid
       --  LT.locationtypename
	FROM
		location L
	-- INNER JOIN locationtype LT ON L.locationtypeid = LT.id
	WHERE
		L.companyid = p_companyid
	ORDER BY
		L.id ASC;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_location_search1`(
	IN p_conditionid INT,
    IN p_companyid INT
)
BEGIN

	 -- NULL : All locations
	 -- 1 : Setter exist at the location
	 -- 2 : In-progress setter batch
	 -- 3 : In-progress hatcher batch

	IF(p_conditionid IS NULL) THEN
    
			SELECT 
				L.id,
				locationcode,
				locationname,
				LT.locationtypename
			FROM
				location L
			INNER JOIN locationtype LT ON L.locationtypeid = LT.id
			WHERE
				L.companyid = p_companyid
			ORDER BY
				L.id ASC;


	ELSEIF(p_conditionid = 1) THEN -- Setter exist at the location

			SELECT 
				L.id,
				locationcode,
				locationname,
				LT.locationtypename
			FROM
				location L
			INNER JOIN locationtype LT ON L.locationtypeid = LT.id
            INNER JOIN setter S ON S.locationid = L.id
			WHERE
				L.companyid = p_companyid
			
			GROUP BY L.id,
				locationcode,
				locationname,
				LT.locationtypename;

	ELSEIF(p_conditionid = 2) THEN -- In-progress setter batch
    
			SELECT 
				L.id,
				locationcode,
				locationname,
				LT.locationtypename
			FROM
				location L
			INNER JOIN locationtype LT ON L.locationtypeid = LT.id
            INNER JOIN setter S ON S.locationid = L.id
            INNER JOIN setterbatch SB ON S.id = SB.setterid
            
			WHERE
				L.companyid = p_companyid
                AND SB.status = 282 -- In Progress
			
            GROUP BY L.id,
				locationcode,
				locationname,
				LT.locationtypename;
	
    
    ELSEIF(p_conditionid = 3) THEN -- In-progress hatcher batch
    
			SELECT 
				L.id,
				locationcode,
				locationname,
				LT.locationtypename
			FROM
				location L
			INNER JOIN locationtype LT ON L.locationtypeid = LT.id
            INNER JOIN hatcher H ON H.locationid = L.id
            INNER JOIN hatcherbatch HB ON H.id = HB.setterid
            
			WHERE
				L.companyid = p_companyid
                AND HB.statusid = 302 -- In Progress
			
            GROUP BY L.id,
				locationcode,
				locationname,
				LT.locationtypename;
    
    END IF;

	
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_location_select`(
	IN p_id INT
)
BEGIN

	SELECT 
		L.id,
		-- L.locationtypeid,
        locationcode,
        locationname,
        moduleids,
        L.companyid,
        branchid,
        CS.dimenssionname,
        L.costcenterid
	FROM
		location L
	-- INNER JOIN locationtype LT ON L.locationtypeid = LT.id
    LEFT JOIN costcenter CS ON CS.id = L.costcenterid
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND L.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_login`(
	IN p_UserName varchar(200)
)
BEGIN
	SELECT id, fullname, email, roleid, companyid, `password` FROM user WHERE fullname = p_UserName;
    
    -- select 5 as id, 'test' as fullname,  'test@gmail.com' as email,  1 as roleid,  1 as companyid,  '$2a$10$.DMeYvKC6fGY5wd.dsQ35e6HRo1Lzf.25ZWdrcRmThWvYsIgR1R9O' as `password`;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_lyrcumm_eggscollection`(
	IN p_batchid INT(11),
	IN p_shedid INT(11),
    IN p_collectiondate DATE
)
BEGIN
SET @@sql_mode = '';
 SELECT
			
            itemtypeid,
			itemid,
            SUM(quantity) as cummqty,
            I.itemname,
            ED.remark,
			ED.companyid
         
    FROM
		layereggsdistributiondetail ED
        
	LEFT JOIN item I ON ED.itemid =I.id
		where ED.layerbatchid = p_batchid
		AND ED.shedid = p_shedid AND statusid =1110
        AND ED.collectiondate < p_collectiondate
        GROUP by ED.itemid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_lyrlive_birdcost`(

IN p_layerbatchid INT(11),
IN p_shedid INT(11),
IN p_companyid INT(11),
IN p_transactiondate DATE)
BEGIN

SET @defaultfemalechickid = null;
SET @defaultfemalechickid = null;
	SET @femalepurchasecost= null;
	SET @femaleplacedqty = null;
	SET @consumptioncost = null;
	SET @femalebirdliveqty = NULL;
	SET @p_placementdate = null;
	SET @lyrbiredcost =0;
    SET @purchasecost = null;
    SET @purvalue = null;
       

 SELECT itemid
           INTO  @defaultfemalechickid
           FROM layerbatch WHERE id = p_layerbatchid AND companyid = p_companyid;
           
          SELECT fnc_getlayerplacementdate(p_layerbatchid,p_companyid) as p_placementdate;
          
       -- SELECT   fnc_layerchicks_purchasecost(p_layerbatchid,p_shedid,p_companyid,@defaultfemalechickid) as purchasecost;
          
          -- if(@p_placementdate = p_transactiondate) THEN
          SELECT
			  fnc_layerchicks_purchasecost(p_layerbatchid,p_shedid,p_companyid,@defaultfemalechickid),
			   fnc_layerchicks_placementqty(p_layerbatchid,p_shedid,p_companyid,@defaultfemalechickid),
			   fnc_layerdaily_consumption_cost(p_layerbatchid,p_shedid,@p_placementdate,p_transactiondate),
			   fnc_layerbird_liveqty(p_layerbatchid,p_shedid,@defaultfemalechickid,@p_placementdate,p_transactiondate,p_companyid),
			   func_layerprev_birdcost(p_layerbatchid,p_shedid,@defaultfemalechickid,@p_placementdate,p_transactiondate,p_companyid) INTO
			    @femalepurchasecost,@femaleplacedqty,@consumptioncost,@femalebirdliveqty,@mortalitycost;
         SELECT @femalepurchasecost,@femaleplacedqty,@consumptioncost,@femalebirdliveqty,@mortalitycost;
				SELECT (@femalepurchasecost*@femaleplacedqty) INTO @purvalue;
				SELECT (@femalepurchasecost*@femalebirdliveqty) INTO @purchasecost;
				SELECT ((@purvalue+@consumptioncost)+(@mortalitycost))/(@femalebirdliveqty) as  lyrbiredcost;
                SELECT @purvalue;
				-- @femalepurchasecost,@femaleplacedqty,@consumptioncost,@femalebirdliveqty,@mortalitycost;
        
				/*SELECT (@femalepurchasecost*@femaleplacedqty) as purvalue;
				SELECT (@femalepurchasecost*@femalebirdliveqty) as purchasecost;
				SELECT ((@purvalue+@consumptioncost)+(@mortalitycost))/(@femalebirdliveqty) as lyrbiredcost;*/
             
         --  END if;
          
         
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_lyr_futureeggscollection_livestock`(
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_shedid INT,
 IN p_layerbatchid INT,
 IN p_companyid INT
 )
BEGIN


    
     SET @DefaultFemaleChiksid = NULL;
	
	 SET @week_start = null;
	 SET @weekend = null;
	 SET @daydiff = null;
	 SET @weekno = null;
	 SET @endweekno = null;
	 SET @liveqty  = null;
     
   SELECT itemid INTO @DefaultFemaleChiksid
	FROM layerbatch
	WHERE id = p_layerbatchid;
		
        SELECT fnc_layerbatchwise_malefemaleopbalance(p_layerbatchid, p_shedid, @DefaultFemaleChiksid ,p_fromdate,p_companyid) INTO @liveqty;
       
        SELECT fnc_getlayerplacementdate(p_layerbatchid, p_companyid) INTO @placementdate;
    
	SELECT TRUNCATE((((DATEDIFF(p_fromdate, @placementdate))+1)/7),0)  INTO @weekno;
	SELECT ifnull(((DATEDIFF(p_fromdate, @placementdate)+1)%7),0) INTO  @weeknodays;
    
	IF(@weeknodays >0)then
		SET @weekno = @weekno+1;
	END IF;
    
	SELECT TRUNCATE((((DATEDIFF(p_todate, @placementdate))+1)/7),0)  INTO @endweekno;

	SELECT ifnull(((DATEDIFF(p_todate, @placementdate)+1)%7),0) INTO  @endweeknodays;
   
	SET @weekenddate = @endweekno;
	SELECT FIRST_DAY_OF_WEEK(p_fromdate) INTO  @week_start;
	SELECT  ifnull(DATEDIFF(p_fromdate,@week_start),0) INTO @daydiff;
  
    
	DROP TEMPORARY TABLE IF EXISTS tempeggscollect;
	CREATE TEMPORARY TABLE  tempeggscollect
		(	
            weekno INT(11),
			liveqty INT(11),
            hdppercent DECIMAL(15,3),
            expeggscollection INT(11)
		);

	if(@daydiff>0 )then 
		SET @ageinweek = null;
        SET @expeggscollection = null;
        
		SELECT LPO.ageinweek, 
			   LPO.hdppercent,
               LPO.livability,
			   (@liveqty*(((LPO.livability/100)/7)*(7-@daydiff)) * (((LPO.hdppercent/100)/7)*(7-@daydiff))) as expeggscollection
		INTO
			   @ageinweek,@livability,@hdppercent,@expeggscollection
               
    
   
        FROM layerperformanceobjective LPO
		WHERE LPO.ageinweek = @weekno AND LPO.itemid =@DefaultFemaleChiksid; 
		if(@ageinweek IS NOT null) THEN
			INSERT INTO tempeggscollect values(@ageinweek,@liveqty,@hdppercent,@expeggscollection);
		END IF;
        
		SET @weekno =  @weekno+1;
	END IF;


	BEGIN
		DECLARE i INT DEFAULT @weekno;
        SET @ageinweek = null;
        SET @hdppercent = null;
        SET @expeggscollection = null;
  
		--  SELECT @weekenddate ,@endweekno; 

		while(i<=@endweekno) DO

			 SET @ageinweek = null;
			 SET @hdppercent = null;
			 SET @expeggscollection = null;
 
			SELECT LPO.ageinweek ,LPO.hdppercent,
				   ((((@liveqty*LPO.livability)/100)*LPO.hdppercent)/100)
			INTO
				   @ageinweek,@hdppercent,@expeggscollection
   
			FROM layerperformanceobjective LPO
			WHERE LPO.ageinweek = i AND LPO.itemid =@DefaultFemaleChiksid;
			if(@ageinweek IS NOT null) THEN
  
				INSERT INTO tempeggscollect values(@ageinweek,@liveqty,@hdppercent,@expeggscollection);
   
			END IF;
   
			SET i =  i+1;
		END WHILE;

		if(@endweeknodays>0 )then 
			SET @weekendt = @endweekno +1;
			SET @ageinweek = null;
			SET @hdppercent = null;
			SET @expeggscollection = null;
            
			SELECT LPO.ageinweek ,LPO.hdppercent,
				   (@liveqty*(((LPO.livability/100)/7)*@endweeknodays) * (((LPO.hdppercent/100)/7)*@endweeknodays)) as expeggscollection
			INTO
				    @ageinweek,@hdppercent,@expeggscollection
    
   
			FROM layerperformanceobjective LPO
			WHERE LPO.ageinweek = @weekendt AND LPO.itemid =@DefaultFemaleChiksid; 
            
			if(@ageinweek IS NOT null) THEN
				INSERT INTO tempeggscollect values(@ageinweek,@liveqty,@hdppercent,@expeggscollection);
			END IF;
		END IF;

	END;
	SELECT * FROM tempeggscollect;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materailmom_productionissue_save`(

IN p_itemid INT(11),
IN p_itembatch VARCHAR(200),
IN p_production_issue_id INT(11),
IN p_productionissuedate DATE,
IN p_batchqty DECIMAl(20,3),
IN p_batch_unitcost DECIMAl(30,6),
IN p_warehouseid INT(11),
IN p_companyid INT(11),
IN p_userid INT(11))
BEGIN

      SET @out_movid = NULL;
      SET @warehousebin_id = null;
      SELECT id INTO @warehousebin_id From warehousebin Where warehouseid = p_warehouseid AND isdefault = 1;
      
			CALL spc_materialmovement_save(
				NULL, p_itemid, p_itembatch, 683,
				p_production_issue_id, p_productionissuedate, p_batchqty,
				 p_warehouseid, @warehousebin_id,NULL, NULL,
				(p_batchqty * p_batch_unitcost),
				p_companyid, p_userid, @out_movid
			);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialissuedetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM materialissuedetail WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialissuedetail_save`(
	IN p_id INT,
    IN p_materialissueid INT(11),
    IN p_itemid INT(11),
    IN p_itemname VARCHAR(100),
    IN p_issuequantity DECIMAL(15,3),
    IN p_unitcost DECIMAL(9,3),
    IN p_totalcost DECIMAL(15,3),
    IN p_itemunitid INT(11),
    IN p_itembatch VARCHAR(100),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialissuedetail 
				(materialissueid, itemid, itemname, issuequantity, unitcost, totalcost, itemunitid, itembatch, companyid)
			VALUES 
				(p_materialissueid, p_itemid, p_itemname, p_issuequantity, p_unitcost, p_totalcost, p_itemunitid, p_itembatch, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE materialissuedetail
			SET materialissueid = p_materialissueid,
				itemid = p_itemid,
				itemname = p_itemname,
				issuequantity = p_issuequantity,
				unitcost = p_unitcost,
				totalcost = p_totalcost,
				itemunitid = p_itemunitid,
				itembatch = p_itembatch,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'materialissuedetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialissuedetail_search`(
    IN p_materialreceiptid INT
)
BEGIN
    
    SELECT
		 MI.id,
         materialissueid,
		 itemid,
         itemname,
         issuequantity,
         unitcost,
         totalcost,
         MI.itemunitid,
         R.refname,
         itembatchid
         
    FROM
		materialissuedetail MI
        INNER JOIN reference R ON MI.itemunitid = R.id
   	
	WHERE
		materialreceiptid = p_materialreceiptid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialissuedetail_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	SELECT
		 MI.id,
         materialissueid,
		 itemid,
         itemname,
         issuequantity,
         unitcost,
         totalcost,
         MI.itemunitid,
         R.refname,
         itembatchid
         
    FROM
		materialissuedetail MI
        INNER JOIN reference R ON MI.itemunitid = R.id
        
	WHERE
		MI.id = p_id AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialissue_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM materialissuedetail WHERE materialissueid = p_id;
	DELETE FROM materialissue WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialissue_save`(
    IN p_id INT,
    IN p_issuedate DATE,
    IN p_issuetypeid INT(11),
    IN p_batchid INT(11),
    IN p_statusid INT(11),
    IN p_remark VARCHAR(100),
    IN p_createdby INT(11),
    IN p_fromwarehouseid INT(11),
    IN p_fromwarehousebinid INT(11),
    IN p_approvedby INT(11),
    IN p_approveddate DATE,
    IN p_companyid INT(11),
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialissue 
				( issuedate, issuetypeid, batchid, statusid, remark, createdby, approvedby, approveddate, fromwarehouseid, fromwarehousebinid, companyid)
			VALUES 
				( p_issuedate, p_issuetypeid, p_batchid, p_statusid, p_remark, p_createdby, p_approvedby, p_approveddate, p_fromwarehouseid, p_fromwarehousebinid, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE materialissue
			SET issuedate = p_issuedate, 
				issuetypeid = p_issuetypeid,
                batchid = p_batchid,
                statusid = p_statusid,
                remark = p_remark,
                createdby = p_createdby,
                approvedby = p_approvedby,
                fromwarehouseid = p_fromwarehouseid,
                fromwarehousebinid = p_fromwarehousebinid,
                approveddate = p_approveddate,
                companyid = p_companyid,
                
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'materialissue', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialissue_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 MI.id,
         DATE_FORMAT(issuedate,'%d/%m/%Y') as issuedate, 
		 issuetypeid,
		 batchid,
		 MI.statusid,
         R.refname,
		 remark,
		 createdby,
		 approvedby,
		 DATE_FORMAT(approveddate,'%d/%m/%Y') as approveddate,
		 MI.fromwarehouseid,
         W.warehousename
        
	FROM
		materialissue MI
        LEFT JOIN `reference` R ON R.id = MI.statusid
        LEFT JOIN warehouse W ON MI.towarehouse = W.id
   	
	WHERE
		MI.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialissue_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 MI.id,
         DATE_FORMAT(issuedate,'%d/%m/%Y') as issuedate, 
		 issuetypeid,
		 batchid,
		 MI.statusid,
         R.refname,
		 remark,
		 createdby,
		 approvedby,
		 DATE_FORMAT(approveddate,'%d/%m/%Y') as approveddate,
		 MI.fromwarehouseid,
         W.warehousename
        
	FROM
		materialissue MI
        LEFT JOIN reference R ON R.id = MI.statusid
        LEFT JOIN warehouse W ON MI.fromwarehouseid = W.id
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND MI.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialmovement_save`(
	IN p_id INT,
    IN p_itemid INT,
    IN p_itembatch VARCHAR(100),
    IN p_transactiontypeid INT,
    IN p_transactionid INT,
    IN p_transactiondate DATE,
    IN p_quantity DECIMAL(20,3),
    IN p_fromwarehouseid INT,
    IN p_fromwarehousebinid INT,
    IN p_towarehouseid INT,
    IN p_towarehousebinid INT,
    IN p_itemvalue DECIMAL(30,6),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialmovement 
				(itemid, itembatch, transactiontypeid, transactionid,
                transactiondate, quantity, fromwarehouseid, fromwarehousebinid,
                towarehouseid, towarehousebinid, itemvalue, companyid)
			VALUES 
				(p_itemid, p_itembatch, p_transactiontypeid, p_transactionid,
                p_transactiondate, p_quantity, p_fromwarehouseid, p_fromwarehousebinid,
                p_towarehouseid, p_towarehousebinid, p_itemvalue, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE materialmovement
			SET itemid = p_itemid,
				itembatch = p_itembatch,
				transactiontypeid = p_transactiontypeid,
				transactionid = p_transactionid,
				transactiondate = p_transactiondate,
				quantity = p_quantity,
				fromwarehouseid = p_fromwarehouseid,
                fromwarehousebinid = p_fromwarehousebinid,
				towarehouseid = p_towarehouseid,
                towarehousebinid = p_towarehousebinid,
				itemvalue = p_itemvalue,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'materialmovement', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialmov_for_materialtransfer_save`(
   IN p_materialtransferid INT(11),
   IN p_itemid INT(11),
   IN p_itemname varchar(200),
   IN p_itemunitid INT(11),
   IN p_quantity DECIMAl(15,3),
   IN p_towarehouseid INT(11),
   IN p_towarehousebinid INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11)
)
BEGIN

	DECLARE p_transferdate DATE;
	DECLARE i INT;
	DECLARE p_unitcost DECIMAL(30,6);
	DECLARE material_itemid INT;
    DECLARE material_itembatch VARCHAR(300);
    DECLARE material_quantity DECIMAL(20,3);
	DECLARE p_itembatch VARCHAR(300);
	DECLARE p_fromwarehouseid INT;
	DECLARE p_fromwarehousebinid INT;
	SET @row_number = 0;
    SET @row_number1 = 0;
	SET @reccount = 0;
    SET @transfercount = 0;
    SET i = 1;
 
    SET @@sql_mode = ' ';
	SELECT transferdate,fromwarehouseid,fromwarehousebinid 
		INTO p_transferdate,p_fromwarehouseid,p_fromwarehousebinid 
	FROM materialtransfer 
	where id = p_materialtransferid;
    
        -- select itembatch and quantity from material movement for current item
	DROP TEMPORARY TABLE IF EXISTS tempitembatch;
	CREATE TEMPORARY TABLE tempitembatch
        
        SELECT itemid, itembatch, stockin,unitcost, transactiondate,
				fnc_itembatchstockout(itemid, IFNULL(itembatch,''), p_fromwarehouseid, p_fromwarehousebinid) as stockout,
				(@row_number1 := @row_number1 + 1) as recordrank 
		FROM(
    
			SELECT itemid, itembatch,SUM(quantity) as stockin,(SUM(itemvalue)/SUM(quantity))as unitcost,transactiondate
			FROM materialmovement
			WHERE 
				itemid = p_itemid AND
				companyid = p_companyid AND
				towarehouseid = p_fromwarehouseid AND
                towarehousebinid = p_fromwarehousebinid AND
				transactiontypeid in (681,682,684,685)
				GROUP BY itemid, itembatch
               
			) stocktable order by transactiondate asc; 
            
           
		SELECT COUNT(*) INTO @reccount FROM  tempitembatch;
        
        WHILE i  <= @reccount DO
       
			SET @issuequantity = 0;
            SET p_unitcost = 0;
			
			SELECT itemid, itembatch, (stockin - stockout) as quantity,unitcost
			INTO  material_itemid, material_itembatch, material_quantity,p_unitcost
			FROM  tempitembatch 
            WHERE recordrank = i;
            
             IF (p_quantity > 0 ) THEN
				
                IF(material_quantity > 0) THEN
					IF (material_quantity >= p_quantity) THEN
						SET @issuequantity = p_quantity;
						SET p_quantity = 0;
					ELSE 
                    
						SET @issuequantity = material_quantity;
                        SET p_quantity = p_quantity - material_quantity;
                    
					-- ELSE
						-- SET @issuequantity = p_quantity - material_quantity;
			END IF;
                    
			END IF;  
                
		if (@issuequantity >0) then
			SET @out_movid = NULL;
			CALL spc_materialmovement_save(
				NULL, 
				p_itemid,
				material_itembatch,
				682,
				p_materialtransferid, 
				p_transferdate,
				@issuequantity,
				(SELECT fromwarehouseid FROM materialtransfer where id = p_materialtransferid),
				(SELECT fromwarehousebinid FROM materialtransfer where id = p_materialtransferid),
				p_towarehouseid, 
				p_towarehousebinid,
				( @issuequantity * p_unitcost),
				p_companyid,
				p_userid,
				@out_movid
			);
        END IF;
            
		END IF;
            
		SET  i = i + 1; 
            
	END WHILE;
       
   DROP TEMPORARY TABLE tempitembatch;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialreceiptdetail_bywarehouse`(
 IN p_warehouseid INT
 )
BEGIN

	SELECT
		MRD.id as materialreceiptdetailid,
		MRD.itembatch,
        MRD.towarehouse,
        W.warehousename,
        MRD.receiptquantity,
        MRD.batchattribute
        
	FROM
		materialreceiptdetail MRD
        INNER JOIN warehouse W ON W.id = MRD.towarehouse
        
	WHERE
		MRD.towarehouse = p_warehouseid
        AND MRD.batchattribute IS NULL
        
        
	ORDER BY MRD.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialreceiptdetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM materialreceiptdetail WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialreceiptdetail_save`(
    IN p_id INT,
    IN p_materialreceiptid INT(11),
    IN p_itemid INT(11),
    IN p_itemname VARCHAR(100),
    IN p_receiptquantity DECIMAL(12,3),
    IN p_unitcost DECIMAL(12,3),
    IN p_totalcost DECIMAL(12,3),
    IN p_itemunitid INT(11),
    IN p_itembatch VARCHAR(100),
    IN p_towarehouse INT(11),
    IN p_towarehousebinid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    IN p_batchattribute JSON,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialreceiptdetail 
				(id, materialreceiptid, itemid, itemname,
                receiptquantity, unitcost, totalcost, itemunitid,
                itembatch, towarehouse, towarehousebinid, companyid, batchattribute)
			VALUES 
				(p_id, p_materialreceiptid, p_itemid, p_itemname,
                p_receiptquantity, p_unitcost, p_totalcost, p_itemunitid,
                p_itembatch, p_towarehouse, p_towarehousebinid, p_companyid, p_batchattribute);
		
        SET @action = 'INSERT';

	ELSE
    
		UPDATE materialreceiptdetail
			SET materialreceiptid = p_materialreceiptid, 
				itemid = p_itemid,
                itemname = p_itemname,
                receiptquantity = p_receiptquantity,
                unitcost = p_unitcost,
                totalcost = p_totalcost,
                itemunitid = p_itemunitid,
                itembatch = p_itembatch,
                towarehouse = p_towarehouse,
                towarehousebinid = p_towarehousebinid,
                companyid = p_companyid,
                batchattribute = p_batchattribute,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
             SET @action = 'UPDATE';   
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	-- record log
   CALL spc_commonlog_save(p_companyid, 'materialreceiptdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialreceiptdetail_search`(
    IN p_materialreceiptid INT
)
BEGIN
    
    SELECT
		 MD.id,
         materialreceiptid,
		 itemid,
         itemname,
         receiptquantity,
         unitcost,
         totalcost,
         MD.unitid,
         R.refname,
         itembatch,
         MD.towarehouse,
         W.warehousename
         
    FROM
		materialreceiptdetail MD
        INNER JOIN reference R ON MD.unitid = R.id
        LEFT JOIN warehouse W ON MD.towarehouse = W.id
   	
	WHERE
		materialreceiptid = p_materialreceiptid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialreceiptdetail_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	SELECT
		 MD.id,
         MD.materialreceiptid,
		 itemid,
         MD.receiptquantity,
         MD.unitcost,
         MD.totalcost,
         MD.itemunitid,
         R.refname,
         itemname,
         itembatch,
         MD.towarehouse,
         W.warehousename,
         MD.batchattribute
        
        
	FROM
		materialreceiptdetail MD
        INNER JOIN reference R ON MD.itemunitid = R.id
        LEFT JOIN warehouse W ON MD.towarehouse = W.id
        
	WHERE
		MD.id = p_id AND MD.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialreceiptdetail_select_vaccinateddoc`(
    IN p_companyid INT
)
BEGIN

	SELECT
		 MD.id,
         MD.materialreceiptid,
		 itemid,
         MD.receiptquantity,
         MD.unitcost,
         MD.totalcost,
         MD.itemunitid,
         R.refname,
         itemname,
         itembatch,
         MD.towarehouse,
         W.warehousename,
         MD.batchattribute
        
        
	FROM
		materialreceiptdetail MD
        INNER JOIN `reference` R ON MD.itemunitid = R.id
        LEFT JOIN warehouse W ON MD.towarehouse = W.id
        
	WHERE
		JSON_EXTRACT(MD.batchattribute , '$.doc_type') = 'vaccinated' 
        and p_companyid = p_companyid;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialreceipthatcherbatch_select`(
	IN p_companyid INT
)
BEGIN
    -- Hatcher batches with status In Progress and that should present in chicks pullout
    SELECT
		HB.id as hatcherbatchno,
		HB.hatcherid,
        H.hatchername,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as hatchingbatchdate,
        R.refname,
        L.id as locationid,
		L.locationname
	
    FROM
		hatcherbatch HB
        
        INNER JOIN hatcher H ON H.id = HB.hatcherid
        INNER JOIN chickspullout C ON C.hatchbatchid = HB.id
		LEFT JOIN location L ON H.locationid = L.id
        LEFT JOIN reference R ON R.id = L.id
	
	WHERE
		HB.statusid = 302;
        
      

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialreceipt_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM materialreceiptdetail WHERE materialreceiptid = p_id;
	DELETE FROM materialreceipt WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialreceipt_save`(
    IN p_id INT,
    IN p_receiptdate DATE,
    IN p_receipttype INT(11),
    IN p_batchid INT(11),
    IN p_statusid INT(11),
    IN p_remark VARCHAR(100),
    IN p_createdby INT(11),
    IN p_approvedby INT(11),
    IN p_approveddate DATE,
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialreceipt 
				(id, receiptdate, receipttype, batchid, statusid, remark, createdby, approvedby, approveddate, companyid)
			VALUES 
				(p_id, p_receiptdate, p_receipttype, p_batchid, p_statusid, p_remark, p_createdby, p_approvedby, p_approveddate, p_companyid);
                
            
		SET @action = 'INSERT';

	ELSE
    
		UPDATE materialreceipt
			SET receiptdate = p_receiptdate, 
				receipttype = p_receipttype,
                batchid = p_batchid,
                statusid = p_statusid,
                remark = p_remark,
                createdby = p_createdby,
                approvedby = p_approvedby,
                approveddate = p_approveddate,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'materialreceipt', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialreceipt_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 MR.id,
         DATE_FORMAT(receiptdate,'%d/%m/%Y') as receiptdate,
		 receipttype,
		 batchid,
		 MR.statusid,
         R1.refname,
		 remark,
		 createdby,
		 approvedby,
         DATE_FORMAT(approveddate,'%d/%m/%Y') as approveddate,
         R2.refname as receipttypename
		 
	FROM
		materialreceipt MR
        LEFT JOIN reference R1 ON R1.id = MR.statusid
        LEFT JOIN reference R2 ON R2.id = MR.receipttype
        
   	
	WHERE
		MR.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialreceipt_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 MR.id,
         DATE_FORMAT(receiptdate,'%d/%m/%Y') as receiptdate,
		 receipttype,
		 batchid,
		 MR.statusid,
         R.refname,
		 remark,
		 createdby,
		 approvedby,
         DATE_FORMAT(approveddate,'%d/%m/%Y') as approveddate,
		 MR.towarehouse,
         W.warehousename
        
	FROM
		materialreceipt MR
        LEFT JOIN reference R ON R.id = MR.statusid
        LEFT JOIN warehouse W ON MR.towarehouse = W.id
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND MR.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialrecptdetail_byeggsdistribution_save`(
	IN p_eggscollectionid INT(11),
	IN p_companyid INT(11),
	IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempmaterialreceipt;

	SET @collectiondate = null;
	SET @breederbatchid = null;
    SET @hatchingeggscost = null;
	SET @commercialeggscost = null;
    SET @crackedeggscost = null;
	SET @doubleyolkeggscost = null;
    SET @wastageeggscost = null;
	SET @batchname = null;
    SET @weekno = null;


	SELECT EC.collectiondate,EC.breederbatchid,BB.batchname
	INTO @collectiondate, @breederbatchid,@batchname
	FROM eggscollection EC
    LEFT JOIN breederbatch BB ON BB.id = EC.breederbatchid
     WHERE EC.id = p_eggscollectionid;
	-- get collection wekk
  
    
    SELECT hatchingeggscost, commercialeggscost, crackedeggscost, doubleyolkeggscost,wastageeggscost
	   INTO @hatchingeggscost, @commercialeggscost, @crackedeggscost, @doubleyolkeggscost,@wastageeggscost
	   FROM breedersetting LIMIT 1;
       

	SET @out_recid = NULL;
	CALL spc_materialreceipt_save(
		NULL, @collectiondate, 341, @breederbatchid, 322, 'Eggs Collection',
		p_userid, p_userid,@collectiondate, p_companyid,
		p_userid, @out_recid
	);

	SET @row_number = 0;
		   
	CREATE TEMPORARY TABLE tempmaterialreceipt

	 SELECT (@row_number:=@row_number + 1) AS num, id as eggsdistributiondetailid, itemid, itemname, itemunitid, towarehouseid, quantity,itemtypeid, (SELECT id FROM warehousebin WHERE warehouseid = (SELECT towarehouseid FROM eggscollection WHERE id = p_eggscollectionid) AND isdefault = 1) as towarehousebinid,
     fromwarehouse_id,fromwarehousebin_id from (

		SELECT 
			EDD.id,
            EDD.itemid,
			I.itemname,
			I.itemunitid,
			EC.towarehouseid,
			EDD.quantity,
            EDD.itemtypeid,
			BS.warhouseid as fromwarehouse_id,
            BS.warehousebinid as fromwarehousebin_id
		FROM eggsdistributiondetail EDD
		LEFT JOIN item I ON I.id = EDD.itemid
		LEFT JOIN eggscollection EC ON EC.id = EDD.eggscollectionid
        LEFT JOIN breedershed BS ON BS.id = EDD.shedid
		where eggscollectionid = p_eggscollectionid
	 ) 
	 as tblmaterialreceipt;
				BEGIN
							DECLARE n INT DEFAULT 0;
							DECLARE i INT DEFAULT 0;
							SELECT COUNT(*) FROM tempmaterialreceipt INTO n;
						
							WHILE i<n DO 
							
								SET @itemid = null;
								SET @itemname = null;
								SET @itemunitid = null;
								SET @towarehouseid = null;
								SET @towarehousebinid = null;
								SET @quantity = null;
                                SET @eggsdistributiondetailid = null;
                                SET @fromwarehouse_id = null;
                                SET @fromwarehousebin_id = null;
								select itemid, itemname, itemunitid, towarehouseid, towarehousebinid, quantity, eggsdistributiondetailid, itemtypeid,fromwarehouse_id,fromwarehousebin_id
								into @itemid, @itemname, @itemunitid, @towarehouseid, @towarehousebinid, @quantity, @eggsdistributiondetailid,@itemtypeid,
                                @fromwarehouse_id,@fromwarehousebin_id from tempmaterialreceipt where num = i+1;
							
							-- itembatch for  eggs
                            if(@itemtypeid = 881)then
								SET @itembatch = null;
								SET @itemgroup = null;
                                 SELECT TRUNCATE(((DATEDIFF(@collectiondate,fnc_getplacementdate(@breederbatchid,p_companyid))/7)+1),0) INTO @weekno;
								select CONCAT(@batchname,'_','W_',@weekno,'_',IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch
                                from item I
								INNER JOIN itemgroup IG ON IG.id = I.itemgroupid
								WHERE I.id = @itemid;
							else
                            SET @itembatch = null;
								SET @itemgroup = null;
								select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch from item I
								INNER JOIN itemgroup IG ON IG.id = I.itemgroupid
								WHERE I.id = @itemid;
							end if;
							 UPDATE eggsdistributiondetail SET itembatchid = @itembatch WHERE id = @eggsdistributiondetailid;
								
								 -- Material receipt detail entry
						SET @out_recdetailid = NULL;
						IF(@itemtypeid = 881) THEN 
						CALL spc_materialreceiptdetail_save(
							NULL, @out_recid, @itemid, 
							@itemname,
							@quantity, 
							@hatchingeggscost ,
							@hatchingeggscost*@quantity,
							@itemunitid,
							@itembatch,
							@towarehouseid,
							@towarehousebinid,
							p_companyid, p_userid, NULL, @out_recdetailid
						);
                        
						SET @out_movid = NULL;
						CALL spc_materialmovement_save(
							NULL, @itemid,  @itembatch, 684,
							@out_recid, @collectiondate, @quantity,
							@fromwarehouse_id,@fromwarehousebin_id, @towarehouseid,
							@towarehousebinid,
							@hatchingeggscost*@quantity,
							p_companyid, p_userid, @out_movid
						);
                        END IF;
                        
                        IF(@itemtypeid = 882) THEN 
						CALL spc_materialreceiptdetail_save(
							NULL, @out_recid, @itemid, 
							@itemname,
							@quantity, 
							@commercialeggscost ,
							@commercialeggscost*@quantity,
							@itemunitid,
							@itembatch,
							@towarehouseid,
							@towarehousebinid,
							p_companyid, p_userid, NULL, @out_recdetailid
						);
                        
						SET @out_movid = NULL;
						CALL spc_materialmovement_save(
							NULL, @itemid,  @itembatch, 684,
							@out_recid, @collectiondate, @quantity,
							@fromwarehouse_id,@fromwarehousebin_id, @towarehouseid,
							@towarehousebinid,
							@commercialeggscost*@quantity,
							p_companyid, p_userid, @out_movid
						);
                        END IF;
                        
                        IF(@itemtypeid = 883) THEN 
						CALL spc_materialreceiptdetail_save(
							NULL, @out_recid, @itemid, 
							@itemname,
							@quantity, 
							@crackedeggscost ,
							@crackedeggscost*@quantity,
							@itemunitid,
							@itembatch,
							@towarehouseid,
							@towarehousebinid,
							p_companyid, p_userid, NULL, @out_recdetailid
						);
                        
						SET @out_movid = NULL;
						CALL spc_materialmovement_save(
							NULL, @itemid,  @itembatch, 684,
							@out_recid, @collectiondate, @quantity,
							@fromwarehouse_id,@fromwarehousebin_id, @towarehouseid,
							@towarehousebinid,
							@crackedeggscost*@quantity,
							p_companyid, p_userid, @out_movid
						);
                        END IF;
                        
						IF(@itemtypeid = 884) THEN 
						CALL spc_materialreceiptdetail_save(
							NULL, @out_recid, @itemid, 
							@itemname,
							@quantity, 
							@doubleyolkeggscost ,
							@doubleyolkeggscost*@quantity,
							@itemunitid,
							@itembatch,
							@towarehouseid,
							@towarehousebinid,
							p_companyid, p_userid, NULL, @out_recdetailid
						);
                        
						SET @out_movid = NULL;
						CALL spc_materialmovement_save(
							NULL, @itemid,  @itembatch, 684,
							@out_recid, @collectiondate, @quantity,
							@fromwarehouse_id,@fromwarehousebin_id, @towarehouseid,
							@towarehousebinid,
							@doubleyolkeggscost*@quantity,
							p_companyid, p_userid, @out_movid
						);
                        END IF;
                        
                        	IF(@itemtypeid = 885) THEN 
						CALL spc_materialreceiptdetail_save(
							NULL, @out_recid, @itemid, 
							@itemname,
							@quantity, 
							@wastageeggscost ,
							@wastageeggscost*@quantity,
							@itemunitid,
							@itembatch,
							@towarehouseid,
							@towarehousebinid,
							p_companyid, p_userid, NULL, @out_recdetailid
						);
                        
						SET @out_movid = NULL;
						CALL spc_materialmovement_save(
							NULL, @itemid,  @itembatch, 684,
							@out_recid, @collectiondate, @quantity,
							@fromwarehouse_id,@fromwarehousebin_id, @towarehouseid,
							@towarehousebinid,
							@wastageeggscost*@quantity,
							p_companyid, p_userid, @out_movid
						);
                        END IF;
						
						 -- get item group id from the item id and update itemgroup table
						SELECT itemgroupid INTO @itemgroup FROM item WHERE id = @itemid;
						
						UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
						
						WHERE id = @itemgroup;
						
							-- Make material movement entry for material receipt
					 
								
					SET i = i + 1;
                   -- end if;
				END WHILE;
		End;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialrecptdetail_bylayereggsdictribution_save`(
	IN p_eggscollectionid INT(11),
	IN p_companyid INT(11),
	IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempmaterialreceipt;

	SET @collectiondate = null;
	SET @layerbatchid = null;
    SET @tableeggscost = null;
    SET @damageeggscost = null;
    SET @crackedeggscost = null;
    SET @pulleteggscost = null;


	SELECT collectiondate, layerbatchid
	INTO @collectiondate, @layerbatchid
	FROM layereggscollection WHERE id = p_eggscollectionid;
    
     SELECT tableeggscost, damageeggscost, crackedeggscost, pulleteggscost
       INTO @tableeggscost, @damageeggscost, @crackedeggscost, @pulleteggscost
       FROM layersetting LIMIT 1;

	SET @out_recid = NULL;
	CALL spc_materialreceipt_save(
		NULL, @collectiondate, 341, @layerbatchid, 322, NULL,
		p_userid, p_userid,@collectiondate, p_companyid,
		p_userid, @out_recid
	);

	SET @row_number = 0;
		   
	CREATE TEMPORARY TABLE tempmaterialreceipt

	SELECT (@row_number:=@row_number + 1) AS num, id as eggsdistributiondetailid, itemid, itemname, itemunitid, towarehouseid, quantity,itemtypeid, (SELECT id FROM warehousebin WHERE warehouseid = (SELECT towarehouseid FROM layereggscollection WHERE id = p_eggscollectionid) AND isdefault = 1) as towarehousebinid from (

		SELECT 
			EDD.id,
            EDD.itemid,
			I.itemname,
			I.itemunitid,
			EC.towarehouseid,
			EDD.quantity,
            EDD.itemtypeid
		FROM layereggsdistributiondetail EDD
		LEFT JOIN item I ON I.id = EDD.itemid
		LEFT JOIN layereggscollection EC ON EC.id = EDD.eggscollectionid
		where eggscollectionid = p_eggscollectionid
	) 
	as tblmaterialreceipt;

				BEGIN
							DECLARE n INT DEFAULT 0;
							DECLARE i INT DEFAULT 0;
							SELECT COUNT(*) FROM tempmaterialreceipt INTO n;
						
							WHILE i<n DO 
							
								SET @itemid = null;
								SET @itemname = null;
								SET @itemunitid = null;
								SET @towarehouseid = null;
								SET @towarehousebinid = null;
								SET @quantity = null;
                                SET @eggsdistributiondetailid = null;
								select itemid, itemname, itemunitid,itemtypeid, towarehouseid, towarehousebinid, quantity, eggsdistributiondetailid
								into @itemid, @itemname, @itemunitid,@itemtypeid, @towarehouseid, @towarehousebinid, @quantity, @eggsdistributiondetailid from tempmaterialreceipt where num = i+1;
						
                           -- if(@quantity > 0)then
							
							-- Create item batch
							
							-- itembatch for hatching eggs
								SET @itembatch = null;
								SET @itemgroup = null;
								-- SET @eggsdistributiondetailid = p_distributionid;
								
								select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch from item I
								INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

								WHERE I.id = @itemid;
								
								SELECT @itembatch;
								
							 UPDATE layereggsdistributiondetail SET itembatchid = @itembatch WHERE id = @eggsdistributiondetailid;
								
								 -- Material receipt detail entry
						SET @out_recdetailid = NULL;
                        
                      IF(@itemtypeid = 1129) THEN  -- for tableeggs
						CALL spc_materialreceiptdetail_save(
							NULL, @out_recid, @itemid, 
							@itemname,
							@quantity, 
							@tableeggscost ,
							@tableeggscost*@quantity,
							@itemunitid,
							@itembatch,
							@towarehouseid,
							@towarehousebinid,
							p_companyid, p_userid, NULL, @out_recdetailid
						);
                        SELECT (@tableeggscost*@quantity);
						SET @out_movid = NULL;
						CALL spc_materialmovement_save(
							NULL, @itemid,  @itembatch, 684,
							@out_recid, @collectiondate, @quantity,
							NULL, NULL, @towarehouseid,
							@towarehousebinid,
							@tableeggscost*@quantity,
							p_companyid, p_userid, @out_movid
						);
                        END IF;
                        
                        IF(@itemtypeid = 1130) THEN -- for damage eggs
						
						CALL spc_materialreceiptdetail_save(
							NULL, @out_recid, @itemid, 
							@itemname,
							@quantity, 
							@damageeggscost ,
							@damageeggscost*@quantity,
							@itemunitid,
							@itembatch,
							@towarehouseid,
							@towarehousebinid,
							p_companyid, p_userid, NULL, @out_recdetailid
						);
                        
						SET @out_movid = NULL;
						CALL spc_materialmovement_save(
							NULL, @itemid,  @itembatch, 684,
							@out_recid, @collectiondate, @quantity,
							NULL, NULL, @towarehouseid,
							@towarehousebinid,
							@damageeggscost*@quantity,
							p_companyid, p_userid, @out_movid
						);
                        END IF;
					IF(@itemtypeid = 1131) THEN -- for carcked eggs
						
						CALL spc_materialreceiptdetail_save(
							NULL, @out_recid, @itemid, 
							@itemname,
							@quantity, 
							@damageeggscost ,
							@crackedeggscost*@quantity,
							@itemunitid,
							@itembatch,
							@towarehouseid,
							@towarehousebinid,
							p_companyid, p_userid, NULL, @out_recdetailid
						);
                        
						SET @out_movid = NULL;
						CALL spc_materialmovement_save(
							NULL, @itemid,  @itembatch, 684,
							@out_recid, @collectiondate, @quantity,
							NULL, NULL, @towarehouseid,
							@towarehousebinid,
							@crackedeggscost*@quantity,
							p_companyid, p_userid, @out_movid
						);
                        END IF;
					IF(@itemtypeid = 1132) THEN -- for damage eggs
						
						CALL spc_materialreceiptdetail_save(
							NULL, @out_recid, @itemid, 
							@itemname,
							@quantity, 
							@damageeggscost ,
							@pulleteggscost*@quantity,
							@itemunitid,
							@itembatch,
							@towarehouseid,
							@towarehousebinid,
							p_companyid, p_userid, NULL, @out_recdetailid
						);
                        
						SET @out_movid = NULL;
						CALL spc_materialmovement_save(
							NULL, @itemid,  @itembatch, 684,
							@out_recid, @collectiondate, @quantity,
							NULL, NULL, @towarehouseid,
							@towarehousebinid,
							@pulleteggscost*@quantity,
							p_companyid, p_userid, @out_movid
						);
                        END IF;
						
						 -- get item group id from the item id and update itemgroup table
						SELECT itemgroupid INTO @itemgroup FROM item WHERE id = @itemid;
						
						UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
						
						WHERE id = @itemgroup;
						
							-- Make material movement entry for material receipt
					 
								
					SET i = i + 1;
                   -- end if;
				END WHILE;
		End;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialrequestdetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM materialrequestdetails WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialrequestdetail_save`(
    IN p_id INT,
    IN p_materialrequestid INT(11),
    IN p_itemid INT(11),
    IN p_itemname VARCHAR(100),
    IN p_quantity INT(11),
    IN p_unitid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialrequestdetails 
				(id, materialrequestid, itemid, itemname, quantity, unitid, companyid)
			VALUES 
				(p_id, p_materialrequestid, p_itemid, p_itemname, p_quantity, p_unitid, p_companyid);
		
        SET @action = 'INSERT';

	ELSE
    
		UPDATE materialrequestdetails
			SET materialrequestid = p_materialrequestid, 
				itemid = p_itemid,
                itemname = p_itemname,
                quantity = p_quantity,
                unitid = p_unitid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
             SET @action = 'UPDATE';   
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	-- record log
   CALL spc_commonlog_save(p_companyid, 'materialrequestdetails', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialrequestdetail_search`(
    IN p_materialrequestid INT
)
BEGIN
    
    SELECT
		 MRD.id as requestdetailid,
         MRD.materialrequestid,
		 MRD.itemid,
         MRD.itemname,
		 MRD.unitid,
		 R.refname as unit,
         MRD.quantity as requestedquantity,
         IG.id as itemgroupid,
		 IG.groupname
        
    FROM
		materialrequestdetails MRD
        LEFT JOIN `reference` R ON MRD.unitid = R.id
        LEFT JOIN item I ON I.id = MRD.itemid
		LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
   	
	WHERE
		MRD.materialrequestid = p_materialrequestid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialrequestdetail_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 MRD.id,
         materialrequestid,
		 itemid,
         quantity as requestedquantity,
         MRD.unitid,
         R.refname as unit,
         itemname
        
	FROM
		materialrequestdetails MRD
        LEFT JOIN `reference` R ON MRD.unitid = R.id
        
	WHERE
		MRD.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialrequest_bycompanyid`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 MR.id,
         requestsource,
         R2.refname as requestfrom,
         requesttarget,
         R3.refname as requestto,
         MR.statusid,
         R1.refname,
         DATE_FORMAT(requestdate,'%d/%m/%Y') as requestdate,
         DATE_FORMAT(duedate,'%d/%m/%Y') as duedate,
         remark,
         MR.towarehouseid,
         W.warehousecode as towarehousecode,
         W.warehousename as towarehousename,
         MR.towarehousebinid,
         WB1.bincode as towarehousebincode,
         WB1.binname as towarehousebinname,
         MR.fromwarehouseid,
         W1.warehousecode as fromwarehousecode,
         W1.warehousename as fromwarehousename,
         MR.fromwarehousebinid,
         WB2.bincode as fromwarehousebincode,
         WB2.binname as fromwarehousebinname,
         tobatchid
        
	FROM
		materialrequest MR
        LEFT JOIN `reference` R1 ON R1.id = MR.statusid
        LEFT JOIN warehouse W ON MR.towarehouseid = W.id
        LEFT JOIN warehouse W1 ON MR.fromwarehouseid = W1.id
        LEFT JOIN warehousebin WB1 ON MR.towarehousebinid = WB1.id
        LEFT JOIN warehousebin WB2 ON MR.fromwarehousebinid = WB2.id
        LEFT JOIN `reference` R2 ON R2.id = MR.requestsource
        LEFT JOIN `reference` R3 ON R3.id = MR.requesttarget
   	
	WHERE
		MR.companyid = p_companyid
        
	ORDER BY 
		MR.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialrequest_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM materialrequestdetails WHERE materialrequestid = p_id;
	DELETE FROM materialrequest WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialrequest_getbatchesbyrequesttarget`(
	IN p_companyid INT,
    IN p_requesttarget INT
)
BEGIN

	if(p_requesttarget = 501) THEN -- Breeder

		SELECT
			B.id,
            L.id as locationid,
			L.locationcode,
			L.locationname,
			W.warehousecode,
			W.warehousename,
			batchname,
			binid,
			WB.bincode,
			WB.binname
		
		FROM
			breederbatch B
		
		LEFT JOIN location L ON B.locationid = L.id
		LEFT JOIN warehouse W ON B.warehouseid = W.id
		LEFT JOIN warehousebin WB on B.binid = WB.id
		
		WHERE
			B.companyid = p_companyid;
	   
	elseif(p_requesttarget = 502) THEN -- Hatchery
		
		SELECT
			SB.id as settingno,
            S.warehouseid, 
            S.warehousebinid,
            W.warehousename,
            WB.binname,
			SB.setterid,
			L.id as locationid,
			L.locationname,
			BB.batchname as breederbatchname,
			S.settername,
			DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
			SB.scheduleid,
			SB.status,
			R.refname,
			SB.itembatch
		
		FROM
			setterbatch SB
		
		LEFT JOIN setter S ON SB.setterid = S.id
        LEFT JOIN warehouse W ON W.id = S.warehouseid
        LEFT JOIN warehousebin WB ON WB.id = S.warehousebinid
		LEFT JOIN breederbatch BB on SB.breederbatchid = BB.id
		LEFT JOIN location L ON S.locationid = L.id
		LEFT JOIN `reference` R ON R.id = SB.status    
			
		WHERE
			SB.companyid = p_companyid
            and SB.status = 282
			
		ORDER BY
			SB.id DESC;
            

    elseif(p_requesttarget = 505) THEN -- layer
		
		SELECT
			B.id,
            L.id as locationid,
			L.locationcode,
			L.locationname,
			W.warehousecode,
			W.warehousename,
			batchname,
			binid,
			WB.bincode,
			WB.binname
		
		FROM
			layerbatch B
		
		LEFT JOIN location L ON B.locationid = L.id
		LEFT JOIN warehouse W ON B.warehouseid = W.id
		LEFT JOIN warehousebin WB on B.binid = WB.id
		
		WHERE
			B.companyid = p_companyid;
    
    elseif(p_requesttarget = 503) THEN -- CBF
		
		SELECT DISTINCT
			CB.id,
			W.warehousecode,
		    W.warehousename,
			CB.batch_number,
			WB.bincode,
			WB.binname,
            CFE.farmer_name,
            CFE.farm_name,
            B.branchname,
            REF.refname,
            SDD.warehousebinid,
            WB.warehouseid,
            SDD.id as cbfshedid,
            SDD.shed_name,
            W.locationid
		
		FROM
			cbf_batch_details CB
		
        LEFT JOIN `reference` REF ON REF.id = CB.statusid
        LEFT JOIN cbf_batchbalance CBB ON CBB.cbfbatchid = CB.id
        LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CBB.cbfshedid
        LEFT JOIN cbf_farmerenquiry CFE ON CFE.id = SDD.farmerenquiryid
        LEFT JOIN commonbranch B ON B.id = CFE.branch_id
		LEFT JOIN warehousebin WB on SDD.warehousebinid = WB.id
        LEFT JOIN warehouse W ON WB.warehouseid = W.id
		
		
		WHERE
			CB.companyid = p_companyid
		ORDER BY CB.id;
    
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialrequest_save`(
    IN p_id INT,
    IN p_requestsource INT(11),
    IN p_requesttarget INT(11),
    IN p_statusid INT(11),
    IN p_requestdate DATE,
    IN p_duedate DATE,
    IN p_remark VARCHAR(100),
    IN p_fromwarehouseid INT(11),
	IN p_fromwarehousebinid INT(11),
    IN p_towarehouseid INT(11),
    IN p_towarehousebinid INT(11),
    IN p_tobatchid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialrequest 
				(id, requestsource, requesttarget, statusid, 
                requestdate, duedate, remark, fromwarehouseid, fromwarehousebinid,
                towarehouseid, towarehousebinid, tobatchid, companyid)
			VALUES 
				(p_id, p_requestsource, p_requesttarget, p_statusid,
                p_requestdate, p_duedate, p_remark, p_fromwarehouseid, p_fromwarehousebinid, 
                p_towarehouseid, p_towarehousebinid, p_tobatchid, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE materialrequest
			SET requestsource = p_requestsource, 
				requesttarget = p_requesttarget,
                statusid = p_statusid,
                requestdate = p_requestdate,
                duedate = p_duedate,
                remark = p_remark,
                fromwarehouseid = p_fromwarehouseid,
                fromwarehousebinid = p_fromwarehousebinid,
                towarehouseid = p_towarehouseid,
                towarehousebinid = p_towarehousebinid,
                tobatchid = p_tobatchid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'materialrequest', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialrequest_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 MR.id,
         MR.requestsource,
         R2.refname as requestfrom,
         MR.requesttarget,
         R3.refname as requestto,
         MR.statusid,
         R1.refname,
         DATE_FORMAT(MR.requestdate,'%d/%m/%Y') as requestdate,
         DATE_FORMAT(MR.duedate,'%d/%m/%Y') as duedate,
         MR.remark,
         MR.towarehouseid,
         W.warehousecode as towarehousecode,
         W.warehousename as towarehousename,
         MR.towarehousebinid,
         WB.binname as towarehousebinname,
         WB.bincode as towarehousebincode,
         MR.fromwarehouseid,
         W1.warehousecode as fromwarehousecode,
         W1.warehousename as fromwarehousename,
         W1.locationid,
         MR.fromwarehousebinid,
         WB1.binname as fromwarehousebinname,
         WB1.bincode as fromwarehousebincode,
         MR.tobatchid
        
	FROM
		materialrequest MR
        LEFT JOIN `reference` R1 ON R1.id = MR.statusid
        LEFT JOIN warehouse W ON MR.towarehouseid = W.id
        LEFT JOIN warehouse W1 ON MR.fromwarehouseid = W1.id
        LEFT JOIN `reference` R2 ON R2.id = MR.requestsource
        LEFT JOIN `reference` R3 ON R3.id = MR.requesttarget
        LEFT JOIN materialtransfer MT ON MR.id = MT.requestid
        LEFT JOIN warehousebin WB ON WB.id = MR.towarehousebinid
        LEFT JOIN warehousebin WB1 ON WB1.id = MR.fromwarehousebinid
   	
	WHERE
		MR.companyid = p_companyid AND
       -- MR.statusid = 444 AND
        MT.id IS NULL -- Material request which were not used in Material Transfer
        
	ORDER BY 
		MR.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialrequest_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 MR.id,
         requestsource,
         requesttarget,
         MR.statusid,
         R.refname,
         DATE_FORMAT(requestdate,'%d/%m/%Y') as requestdate,
         DATE_FORMAT(duedate,'%d/%m/%Y') as duedate,
         remark,
         MR.fromwarehouseid,
         MR.fromwarehousebinid,
         MR.towarehouseid,
         MR.towarehousebinid,
         W1.warehousename as fromwarehousename,
         WB1.binname as fromwarehousebinname,
         W2.warehousename as towarehousename,
         WB2.binname as towarehousebinname,
         MR.tobatchid
        
	FROM
		materialrequest MR
        LEFT JOIN `reference` R ON R.id = MR.statusid
        LEFT JOIN warehouse W1 ON MR.fromwarehouseid = W1.id
        LEFT JOIN warehouse W2 ON MR.towarehouseid = W2.id
        LEFT JOIN warehousebin WB1 ON MR.fromwarehousebinid = WB1.id
        LEFT JOIN warehousebin WB2 ON MR.towarehousebinid = WB2.id
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND MR.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialtransferdetails_search`(
  IN p_materialtransferid INT 
)
BEGIN
	SET @tofarmer_name = null;
    SET @tofarm_name = null;
    SET @fromfarmer_name = null;
    SET @fromfarm_name = null;
	
    SET @transfersource = null;
    SET @transfertarget = null;
    
    SELECT transfersource, transfertarget INTO @transfersource, @transfertarget FROM materialtransfer WHERE id = p_materialtransferid;
	
    IF(@transfersource = 503) THEN
		SELECT FE.farmer_name, FE.farm_name
        INTO @fromfarmer_name, @fromfarm_name
        FROM cbf_farmerenquiry FE
        LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.farmerenquiryid = FE.id
        WHERE SDD.warehousebinid = (SELECT fromwarehousebinid FROM materialtransfer WHERE id = p_materialtransferid);
    END IF;
    
    IF(@transfertarget = 503) THEN
		SELECT FE.farmer_name, FE.farm_name
        INTO @tofarmer_name, @tofarm_name
        FROM cbf_farmerenquiry FE
        LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.farmerenquiryid = FE.id
        WHERE SDD.warehousebinid = (SELECT towarehousebinid FROM materialtransferdetails WHERE materialtransferid = p_materialtransferid group by towarehousebinid);
    END IF;
    
	SELECT MRD.id,
		   MRD.materialtransferid,
           MRD.towarehouseid,
           W.warehousename as towarehousename,
		   MRD.towarehousebinid,
           WB.binname as towarehousebinname,
		   MRD.itemid,
           MRD.itemname,
           MRD.requestedquantity,
           MRD.transferedquantity,
           I.itemunitid as unitid,
           R.refname as unit,
           MRD.itembatch,
           IG.id as itemgroupid,
           IG.groupname,
           @tofarmer_name as tofarmer, 
           @tofarm_name as tofarm,
           @fromfarmer_name as fromfarmer,
           @fromfarm_name as fromfarm,
           @transfersource as transfersource,
           @transfertarget as transfertarget
            
    FROM  materialtransferdetails MRD
    LEFT JOIN warehouse W ON W.id = MRD.towarehouseid
	LEFT JOIN warehousebin WB ON WB.id = MRD.towarehousebinid
    LEFT JOIN item I ON I.id = MRD.itemid
    LEFT JOIN `reference` R ON I.itemunitid = R.id
    LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
    
    WHERE 
          MRD.materialtransferid = p_materialtransferid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialtransferdetails_select`(
 IN p_id INT
)
BEGIN
	 SELECT
			MTD.id,
			MTD.materialtransferid,
            MRD.towarehouseid,
            W.warehousename,
			MRD.towarehousebinid,
            WB.binname,
			MTD.itemid,
			MTD.itemname,
			MTD.requestedquantity,
			MTD.transferedquantity,
			MTD.itemunit as unitid,
            R.refname as unit,
            MTD.itembatch
    FROM
		 materialtransferdetails MTD
         LEFT JOIN `reference` R ON MTD.itemunit = R.id
         LEFT JOIN warehouse W ON W.id = MRD.towarehouseid
         LEFT JOIN warehouse WB ON WB.id = MRD.towarehousebinid
        
	WHERE
		 MTD.id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialtransferdetail_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN

    DELETE FROM materialtransferdetails WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'materialtransferdetails', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialtransferdetail_from_eggstrnsfer_tohatchery_save`(
	IN p_id INT,
    IN p_materialtransferid INT,
    IN p_towarehouseid INT,
    IN p_towarehousebinid INT,
    IN p_itemid INT,
    IN p_itemname VARCHAR(150),
    IN p_requestedquantity DECIMAL(9,3),
    IN p_transferedquantity DECIMAL(9,3),
    IN p_itemunit VARCHAR(50),
    IN p_itembatch VARCHAR(100),
    IN p_userid INT,
    IN p_companyid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialtransferdetails
				(id, materialtransferid, towarehouseid, 
                     towarehousebinid, itemid, itemname, requestedquantity, transferedquantity, itemunit, itembatch, companyid)
			VALUES 
				(p_id, p_materialtransferid, p_towarehouseid, 
                     p_towarehousebinid, p_itemid, p_itemname, p_requestedquantity, p_transferedquantity, p_itemunit, p_itembatch, p_companyid);
		
        SET @action = 'INSERT';
	ELSE
    
		UPDATE materialtransferdetails
				SET materialtransferid = p_materialtransferid, 
                towarehouseid = p_towarehouseid, 
				towarehousebinid = p_towarehousebinid,
                itemid = p_itemid, 
                itemname = p_itemname,
                requestedquantity = p_requestedquantity,
                transferedquantity = p_transferedquantity,
                itemunit = p_itemunit,
                itembatch = p_itembatch,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';  
        
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    -- record log
   CALL spc_commonlog_save(p_companyid, 'materialtransferdetails', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialtransferdetail_save`(
	IN p_id INT,
    IN p_materialtransferid INT,
    IN p_towarehouseid INT,
    IN p_towarehousebinid INT,
    IN p_itemid INT,
    IN p_itemname VARCHAR(150),
    IN p_requestedquantity DECIMAL(9,3),
    IN p_transferedquantity DECIMAL(9,3),
    IN p_itemunit VARCHAR(50),
    IN p_itembatch VARCHAR(1500),
    IN p_userid INT,
    IN p_companyid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialtransferdetails
				(id, materialtransferid, towarehouseid, 
                     towarehousebinid, itemid, itemname, requestedquantity, transferedquantity, itemunit, itembatch, companyid)
			VALUES 
				(p_id, p_materialtransferid, p_towarehouseid, 
                     p_towarehousebinid, p_itemid, p_itemname, p_requestedquantity, p_transferedquantity, p_itemunit, p_itembatch, p_companyid);
		
        SET @action = 'INSERT';
	ELSE
    
		UPDATE materialtransferdetails
				SET materialtransferid = p_materialtransferid, 
                towarehouseid = p_towarehouseid, 
				towarehousebinid = p_towarehousebinid,
                itemid = p_itemid, 
                itemname = p_itemname,
                requestedquantity = p_requestedquantity,
                transferedquantity = p_transferedquantity,
                itemunit = p_itemunit,
                itembatch = p_itembatch,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';  
        
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    SET @statusid = NULL;
    
   
    SELECT statusid INTO @statusid
	FROM materialtransfer WHERE id = p_materialtransferid; 
    if(@statusid = 582) THEN
     -- Do material movement entry for material transfer
      call spc_materialmov_for_materialtransfer_save (
	   p_materialtransferid,
	   p_itemid,
	   p_itemname,
	   (SELECT itemunitid FROM item WHERE id = p_itemid),
	   p_transferedquantity,
	   p_towarehouseid,
	   p_towarehousebinid,
	   p_companyid,
	   p_userid
	);
   END IF;
   
   -- update batch balance if we are transfering birds
   IF((SELECT statusid FROM materialtransfer WHERE id = p_materialtransferid) = 582) THEN
		SET @transfertarget = null;
		SET @tobatchid = null;
		
		SELECT transfertarget INTO @transfertarget from materialtransfer WHERE id = p_materialtransferid; 
		SELECT tobatchid INTO @tobatchid from materialtransfer WHERE id = p_materialtransferid; 
		
		IF(@transfertarget = 501) THEN
			IF((SELECT itemid FROM breederbatchbalance WHERE breederbatchid = @tobatchid LIMIT 1) = p_itemid) THEN
				UPDATE breederbatchbalance SET quantity = quantity+p_transferedquantity,
                transactionname = 'Material Transfer'
				WHERE breedershedid = (SELECT id FROM breedershed WHERE warehousebinid = p_towarehousebinid LIMIT 1)
				AND breederbatchid = @tobatchid
				AND itemid = p_itemid;
			END IF;
		END IF;
			
		IF(@transfertarget = 503) THEN
			IF((SELECT itemid FROM cbf_batchbalance WHERE cbfbatchid = @tobatchid LIMIT 1) = p_itemid) THEN
				UPDATE cbf_batchbalance SET quantity = quantity+p_transferedquantity,
                transactionname = 'Material Transfer'
				WHERE cbfshedid = (SELECT id FROM cbf_farmerenquiry_sheddimensiondetail WHERE warehousebinid = p_towarehousebinid)
				AND cbfbatchid = @tobatchid
				AND itemid = p_itemid;
			END IF;
		END IF;
		
		IF(@transfertarget = 505) THEN
			IF((SELECT itemid FROM layerbatchbalance WHERE layerbatchid = @tobatchid LIMIT 1) = p_itemid) THEN
				UPDATE layerbatchbalance SET quantity = quantity+p_transferedquantity,
                transactionname = 'Material Transfer'
				WHERE layershedid = (SELECT id FROM layershed WHERE warehousebinid = p_towarehousebinid LIMIT 1)
				AND layerbatchid = @tobatchid
				AND itemid = p_itemid;
			END IF;
		END IF;
    END IF;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'materialtransferdetails', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialtransfer_byrequestid`(
    IN p_requestid INT,
    IN p_companyid INT
)
BEGIN
    
    SELECT
			MT.id,
            MT.fromwarehouseid,
            W.warehousename as fromwarehouse,
            MT.frombatchid,
            MT.tobatchid,
            B.batchname,
            B2.batchname as breederbatchname,
            MT.requestid,
            MTD.transferedquantity,
            MTD.itembatch
      
    FROM
		materialtransfer MT
	
    LEFT JOIN materialtransferdetails MTD ON MT.id = MTD.materialtransferid
    LEFT JOIN warehouse W ON MT.fromwarehouseid = W.id
    LEFT JOIN breederbatch B ON MT.frombatchid = B.id
	LEFT JOIN breederbatch B2 ON MT.tobatchid = B2.id
    
	
	WHERE
		MT.companyid = p_companyid and 
        MT.requestid = p_requestid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialtransfer_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN
	DELETE FROM materialtransferdetails WHERE materialtransferid = p_id;
    DELETE FROM materialtransfer WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'materialtransfer', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialtransfer_save`(
	IN p_id INT,
	IN p_transfersource INT,
    IN p_transfertarget INT,
    IN p_statusid INT,
    IN p_duedate DATE,
    IN p_transferdate DATE,
    IN p_remark VARCHAR(500),
    IN p_fromwarehouseid INT,
    IN p_fromwarehousebinid INT,
    IN p_usagetype VARCHAR(150),
    IN p_frombatchid INT,
    IN p_tobatchid INT,
    IN p_requestid INT,
	IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialtransfer 
				    (id, 
                     transfersource, 
                     transfertarget, 
                     statusid, 
                     duedate, 
                     transferdate,
                     remark,
					 fromwarehouseid, 
                     fromwarehousebinid,
                     usagetype, 
                     frombatchid, 
                     tobatchid, 
                     requestid, 
                     companyid)
			VALUES 
				   (p_id, 
                    p_transfersource,
                    p_transfertarget, 
                    p_statusid, 
                    p_duedate, 
                    p_transferdate, 
                    p_remark,
					p_fromwarehouseid, 
                    p_fromwarehousebinid,
                    p_usagetype, 
                    p_frombatchid, 
                    p_tobatchid, 
                    p_requestid, 
                    p_companyid);
                    
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE materialtransfer
				SET 
                transfersource = p_transfersource,
				transfertarget = p_transfertarget,
                statusid = p_statusid,
				duedate = p_duedate,
				transferdate = p_transferdate,
				remark = p_remark,
				fromwarehouseid = p_fromwarehouseid,
                fromwarehousebinid = p_fromwarehousebinid,
				usagetype = p_usagetype,
				frombatchid = p_frombatchid,
				tobatchid = p_tobatchid,
				requestid = p_requestid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'materialtransfer', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialtransfer_search`(
    -- IN p_transfertarget VARCHAR(150),
    IN p_companyid INT
)
BEGIN
    
    SELECT
			MT.id,
			MT.transfersource as transfersourceid,
			R1.refname as transfersource,
			MT.transfertarget as transfertargetid,
            R2.refname as transfertarget,
            MT.statusid,
            R3.refname as status,
            DATE_FORMAT(MT.duedate,'%d/%m/%Y') as duedate,
            DATE_FORMAT(MT.transferdate,'%d/%m/%Y') as transferdate,
            MT.remark,
            MT.fromwarehouseid,
            W1.warehousecode as fromwarehousecode,
            W1.warehousename as fromwarehousename,
			MT.fromwarehousebinid,
            WB.bincode as fromwarehousebincode,
            WB.binname as fromwarehousebinname,
            MT.usagetype as usagetypeid,
            R4.refname as usagetype,
            MT.frombatchid,
            B.batchname,
            MT.requestid,
            MT.tobatchid
      
    FROM
		materialtransfer MT
	
    LEFT JOIN `reference` R1 ON MT.transfersource = R1.id
    LEFT JOIN `reference` R2 ON MT.transfertarget = R2.id
	LEFT JOIN `reference` R3 ON MT.statusid = R3.id
	LEFT JOIN `reference` R4 ON MT.usagetype = R4.id
    LEFT JOIN warehouse W1 ON MT.fromwarehouseid = W1.id
    LEFT JOIN warehousebin WB ON WB.id = MT.fromwarehousebinid
    LEFT JOIN breederbatch B ON MT.frombatchid = B.id
	
	WHERE
		MT.companyid = p_companyid
       -- M.transfertarget = p_transfertarget;
       
	ORDER BY MT.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialtransfer_select`(
	IN p_id INT
)
BEGIN

	SELECT 
		  M.id,
		  M.transfersource,
          M.transfertarget,
          M.statusid,
          R.refname as status,
          DATE_FORMAT(M.duedate,'%d/%m/%Y') as duedate,
          DATE_FORMAT(M.transferdate,'%d/%m/%Y') as transferdate,
          remark,
          M.fromwarehouseid,
          W1.warehousecode as fromwarehousecode,
          W1.warehousename as fromwarehousename,
          M.fromwarehousebinid,
          WB1.binname as fromwarehousebinname,
          WB1.bincode as fromwarehousebincode,
          M.usagetype,
          M.frombatchid,
          B.batchname
        
	FROM
		materialtransfer M
        
    LEFT JOIN `reference` R ON M.statusid = R.id
    LEFT JOIN warehouse W1 ON M.fromwarehouseid = W1.id
    LEFT JOIN warehousebin WB1 ON M.fromwarehousebinid = WB1.id
    LEFT JOIN breederbatch B ON M.frombatchid = B.id
    
	WHERE
	    M.id = p_id ;
          
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_materialtransfer_tempInsert`(
	IN p_hatcheryscheduleid INT,
    IN p_userid INT
)
BEGIN

	-- Status 242 is 'Approve'

	SET @hatcheryscheduledetailid = NULL;
    SET @sourceid = NULL;
    SET @requestid = NULL;
	SET @isfinished = FALSE;
    SET @companyid = NULL;
    
    
    -- Check atleast 1 scheduledetail is approved, and not having materialtranfer or purchaseorder
    
	IF EXISTS(SELECT HS.id FROM hatcheryscheduledetail HS
                    LEFT JOIN materialrequest MR ON HS.requestid = MR.id AND MR.statusid = 444
                    LEFT JOIN purchaserequest PR ON HS.requestid = PR.id AND PR.statusid = 92
					
                    WHERE HS.statusid = 242 
                   
					AND 
                    (
                    (sourceid = 261 AND MR.id is not null)
						OR
                    (sourceid = 262 AND PR.id is not null)
                    )
					AND hatcheryscheduleid = p_hatcheryscheduleid) THEN
    
    
		-- Looping all Approved hatcheryscheduledetails, but not processed further
		
		label1: WHILE @isfinished = FALSE DO
			
			SET @hatcheryscheduleid = NULL;
			
			SELECT HS.id, sourceid, requestid, HS.companyid 
					INTO @hatcheryscheduledetailid, @sourceid, @requestid, @companyid 
				
					FROM hatcheryscheduledetail HS
                    LEFT JOIN materialrequest MR ON HS.requestid = MR.id AND MR.statusid = 444
                    LEFT JOIN purchaserequest PR ON HS.requestid = PR.id AND PR.statusid = 92
					
                    WHERE HS.statusid = 242 
                   
					AND 
                    (
                    (sourceid = 261 AND MR.id is not null)
						OR
                    (sourceid = 262 AND PR.id is not null)
                    )
					AND hatcheryscheduleid = p_hatcheryscheduleid
					LIMIT 1;
		 
			IF(@hatcheryscheduledetailid IS NOT NULL AND @requestid IS NOT NULL) THEN
			
				IF(@sourceid = 261) THEN -- Source 261 is 'OWN'
            
					SET @duedate = NULL;
					SET @fromwarehouseid = NULL;
					SET @towarehouseid = NULL;
					
					SELECT duedate, fromwarehouseid, towarehouseid 
							INTO @duedate, @fromwarehouseid, @towarehouseid
					FROM materialrequest WHERE id = @requestid;
            
                
					SET @out_materialtransferid = NULL;
                
					-- source 481 is 'Breeder'
                    -- target 482 is 'Hatchery'
                    -- status 581 is 'New'
                    -- usagetype 621 is 'Hatcher'
                    -- tobatchid 1 is 'breeder batch id' (will need actual breederbatchid when form submitted)
                    
					CALL spc_materialtransfer_save(NULL, 481, 482, 581, @duedate, now(), null, 
									IFNULL(@fromwarehouseid, 2), IFNULL(@towarehouseid,3), 621, 1, null, @requestid, 
                                    @companyid, p_userid, @out_materialtransferid);

					IF(IFNULL(@out_materialtransferid, 0) > 0) THEN
                    
						INSERT INTO materialtransferdetails 
							(materialtransferid, itemid, itemname, requestedquantity, transferedquantity, 
								itemunit, itembatchid, companyid)
                    
						SELECT @out_materialtransferid, itemid, itemname, quantity, quantity, 
								unitid, 1, companyid
						FROM materialrequestdetails
                        WHERE 
							materialrequestid = @requestid;
                    
                     -- Materialrequest status 442 is 'Complete'
						UPDATE materialrequest SET statusid = 442 WHERE id = @requestid;
                    
                    END IF;
					
                
                ELSEIF (@sourceid = 262) THEN -- Source 262 is 'PURCHASED'
				
					SET @podate = NULL;
                    
					
                    -- Take request fields for purchase order
                    
					SELECT approvaldate, companyid INTO @podate, @companyid FROM purchaserequest
						WHERE id = @requestid;
					                    
                    IF(@podate is null) THEN
						SET @podate = NOW();
                    END IF;
                		
					
                    SET @out_purchaseorderid = NULL;
                    
                    -- Vendorid '1' is temporary supplier id
                    -- shipfromwarehouseid is NULL for now
                    -- Status 521 is 'New'
                    
					CALL spc_purchaseorder_save(NULL, 1, @requestid, @podate, @podate, NULL, 0, NULL, 521, 
													@companyid, p_userid, @out_purchaseorderid);
                
					
                
					IF (@out_purchaseorderid > 0) THEN
						
                        SELECT @out_purchaseorderid AS out_purchaseorderid;
                        
                        SET @out_purchaseorderdetailid = NULL;
                        
                        -- Insert all purchaserequestdetails to purchaseorderdetails for requestid
                        
                        INSERT INTO purchaseorderdetail
							(purchaseorderid, itemid, quantity, itemunit, unitprice, itemdiscount, 
								taxid, companyid)
                                
						SELECT @out_purchaseorderid, itemid, quantity, unitid, NULL, NULL, 
								NULL, @companyid
							FROM purchaserequestdetail
							WHERE purchaserequestid = @requestid;
                    		
						
                        -- Update purchaserequest status 93 is 'Processed'
						UPDATE purchaserequest SET statusid = 93 WHERE id = @requestid;

						
                                               
							SET @out_grpoid = NULL;
                        
							select @companyid as companyid;
                        
							-- grpodate is considered here podate for now
							-- supplierid is '1' for now
                            -- 
							CALL spc_grpo_save(NULL, @podate, 1, NULL, NULL, 
									@out_purchaseorderid, @podate, NULL, NULL, NULL, NULL,
                                    1, NULL, @companyid, p_userid, @out_grpoid);
							
                            IF (@out_grpoid > 0) THEN
                                
                                
                                INSERT INTO grpodetail
									(grpoid, itemid, itemname, quantity, itemunitid, remark, 
										itembatch, companyid)
                                        
								SELECT @out_grpoid, itemid, null, quantity, itemunit, null,
										'1', @companyid
									FROM purchaseorderdetail
                                    WHERE purchaseorderid = @out_purchaseorderid;
                            
                            
								-- Update purchaseorder status 522 is 'Completed'
								UPDATE purchaseorder SET statusid = 522 WHERE id = @out_purchaseorderid;
                            
                            END IF;
                    
                    END IF;
                
                END IF;
				
            
			END IF;
		 
			IF NOT EXISTS(SELECT HS.id
					
					FROM hatcheryscheduledetail HS
                    LEFT JOIN materialrequest MR ON HS.requestid = MR.id AND MR.statusid = 444
                    LEFT JOIN purchaserequest PR ON HS.requestid = PR.id AND PR.statusid = 92
					
                    WHERE HS.statusid = 242 
                   
					AND 
                    (
                    (sourceid = 261 AND MR.id is not null)
						OR
                    (sourceid = 262 AND PR.id is not null)
                    )
					AND hatcheryscheduleid = p_hatcheryscheduleid
					LIMIT 1) THEN
                    
				SET @isfinished = TRUE;
                    
			END IF;
		 
		END WHILE label1;
    
    END IF;
	

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_modeule_shedwise_warehouse`(
IN p_moduleid INT,
IN p_shedid INT)
BEGIN
  IF(p_moduleid = 721) THEN
		SELECT
			BS.warhouseid as id,
            W.warehousename,
            BS.warehousebinid,
            WB.binname
		FROM breedershed BS
		LEFT JOIN warehouse W ON W.id = BS.warhouseid
        LEFT JOIN warehousebin WB ON WB.id = BS.warehousebinid
		WHERE BS.id = p_shedid;
	END IF;
    IF(p_moduleid = 725) THEN
		SELECT
			LS.warehouseid as id,
            W.warehousename,
            LS.warehousebinid,
            WB.binname
		FROM layershed LS
		LEFT JOIN warehouse W ON W.id = LS.warehouseid
        LEFT JOIN warehousebin WB ON WB.id = LS.warehousebinid
		WHERE LS.id = p_shedid;
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_modulebylocation_search`(
IN p_locationid varchar(100),
IN p_companyid INT(11)
)
BEGIN


SELECT 
L.moduleids as operationidone, 
R.id as operationid, 
R.refname as modulename
-- fun_modulename_byids(L.moduleids) as modulename
FROM
		  location L
          -- left JOIN `reference` R ON R.id = L.moduleids
		  LEFT JOIN `reference` R ON FIND_IN_SET( R.id, L.moduleids)
        
        
        WHERE
	   FIND_IN_SET(L.id, p_locationid) AND
	   L.companyid = p_companyid;
      -- group by refname;
       
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_modulelocationwise_batches`(
	IN p_moduleid INT(11),
    IN p_companyid INT(11),
    IN p_locationid INT(11),
    IN p_fromweight DECIMAL(15,3),
    IN p_toweight DECIMAL(15,3)
    
)
BEGIN
SET @@sql_mode = '';

	IF(p_moduleid = 721) THEN
    
		SELECT BB.id as batchid,
			   BBB.itemid,
			   BB.batchname,
               BB.statusid,
               REF.refname as batchstatus,
               DATE_FORMAT(fnc_getplacementdate(BB.id, p_companyid),'%d/%m/%Y') as placementdate,
			   MAX(BDM.avgweight) as avgweight,
               (BBB.quantity) as liveqty,
               ((BBB.quantity)*(MAX(BDM.avgweight))) as totalbatchsaleweight,
               I.itemname,
               BDT.shedid,
               BS.shedname
               
        FROM breederbatch BB
        LEFT JOIN `reference` REF ON REF.id = BB.statusid
        INNER JOIN breederdailytransaction BDT ON BDT.breederbatchid = BB.id
        LEFT JOIN breederbatchbalance BBB ON BBB.breederbatchid = BDT.breederbatchid AND BBB.breedershedid = BDT.shedid
        LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id AND BBB.itemid = BDM.itemid
		LEFT JOIN item I ON I.id = BBB.itemid
        INNER JOIN breedershed BS ON BS.id = BDT.shedid
        WHERE BB.statusid = 222
        AND BB.companyid = p_companyid
        AND BB.locationid = p_locationid
        AND  BDM.avgweight BETWEEN p_fromweight AND p_toweight
        
        group by BBB.itemid,BDT.shedid;
	END IF;
    
   
	
    IF(p_moduleid = 725) THEN
    
		SELECT
				LB.id as batchid,
				LBB.itemid,
				LB.batchname,
				LB.statusid,
				REF.refname as batchstatus,
				DATE_FORMAT(fnc_getlayerplacementdate(LB.id, 1),'%d/%m/%Y') as placementdate,
				MAX(LDM.avgweight) as avgweight,
				(LBB.quantity) as liveqty,
				((LBB.quantity)*(MAX(LDM.avgweight))) as totalbatchsaleweight,
				I.itemname,
				LDT.shedid,
				LS.shedname
               
        FROM layerbatch LB
			LEFT JOIN `reference` REF ON REF.id = LB.statusid
			INNER JOIN layerdailytransaction LDT ON LDT.layerbatchid = LB.id
			LEFT JOIN layerbatchbalance LBB ON LBB.layerbatchid = LDT.layerbatchid AND LBB.layershedid = LDT.shedid
			LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id AND LBB.itemid = LDM.itemid
			LEFT JOIN item I ON I.id = LBB.itemid
			INNER JOIN layershed LS ON LS.id = LDT.shedid
        WHERE LB.statusid = 982 AND
			  LB.companyid = p_companyid AND
			  LB.locationid = p_locationid AND
			  LDM.avgweight BETWEEN p_fromweight AND p_toweight
        
		group by LBB.itemid,LDT.shedid;
        
    
    END IF;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_modulewise_batches`(
	IN p_moduleid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	IF(p_moduleid = 721) THEN
    
		SELECT BB.id as batchid,
			   BB.batchname,
               BB.statusid,
               REF.refname as batchstatus,
               'Breeder' as module,
               DATE_FORMAT(fnc_getplacementdate(BB.id, p_companyid),'%d/%m/%Y') as placementdate
        
        FROM breederbatch BB
        LEFT JOIN `reference` REF ON REF.id = BB.statusid
        
        WHERE BB.statusid = 222
        AND BB.companyid = p_companyid;
	END IF;
    
    IF(p_moduleid = 722) THEN
    
		SELECT SB.id as batchid,
			   null as batchname,
			   SB.`status`,
               REF.refname as batchstatus,
               'Hatchery' as module
        
        FROM setterbatch SB
        LEFT JOIN `reference` REF ON REF.id = SB.`status`
        
        WHERE SB.`status` = 282
        AND SB.companyid = p_companyid;
    
    END IF;
	
    IF(p_moduleid = 725) THEN
    
		SELECT LB.id as batchid,
			   LB.batchname,
               LB.statusid,
               REF.refname as batchstatus,
               'Commercial Layer' as module,
               DATE_FORMAT(fnc_getlayerplacementdate(LB.id, p_companyid),'%d/%m/%Y') as placementdate
        
        FROM layerbatch LB
        LEFT JOIN `reference` REF ON REF.id = LB.statusid
        
        WHERE LB.statusid = 982
        AND LB.companyid = p_companyid;
        
    
    END IF;
    
    IF(p_moduleid = 723) THEN
    
		SELECT CB.id as batchid,
			   CB.batch_number as batchname,
               CB.statusid,
               REF.refname as batchstatus,
               'CBF' as module
		FROM cbf_batch_details CB 
        LEFT JOIN `reference` REF ON REF.id = CB.statusid
        
        WHERE CB.statusid = 3022
        AND CB.companyid = p_companyid;
    
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_modulewise_productionplanning`(
	IN p_moduleids VARCHAR(200),
    IN p_locationid INT,
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT
)
BEGIN
SET @@sql_mode = ' ';
IF(FIND_IN_SET('721', p_moduleids) !=0) THEN
-- create temp table for feed--
DROP TEMPORARY TABLE IF EXISTS tempforfeed;
CREATE TEMPORARY TABLE tempforfeed
SELECT breederbatchid,batchname,shedid,maleitemid,femaleitemid,startwweek,endweek,
placementdate,BFS.breeditemid,BFD.weeknumber,BFD.itemid as feeditemid,BFD.feedconsumed,
DATE_SUB(DATE_ADD(placementdate, INTERVAL (BFD.weeknumber*7) DAY), INTERVAL 1 DAY) as firstdate
 FROM(
	select BB.id as breederbatchid ,BB.batchname,BBB.breedershedid as shedid,BB.maleitemid,BB.femaleitemid,
			fnc_getplacementdate(BB.id,p_companyid) as placementdate,
			TRUNCATE((((DATEDIFF(p_fromdate,fnc_getplacementdate(BB.id,p_companyid)))+1)/7),0) as startwweek,
			TRUNCATE((((DATEDIFF(p_todate,fnc_getplacementdate(BB.id,p_companyid)))+1)/7),0)  as endweek
	from breederbatch BB 
	LEFT JOIN breederbatchbalance BBB ON breederbatchid = BB.id
	Where locationid = p_locationid AND BB.statusid = 222
	group by BB.id,BBB.breedershedid) as temp
	LEFT JOIN breederfeedstandard BFS ON  FIND_IN_SET(BFS.breeditemid,CONCAT_WS( ",", maleitemid, femaleitemid ))
    LEFT JOIN breederfeedstandarddetail BFD ON BFD.breederfeedstandardid = BFS.id 
    AND (BFD.weeknumber BETWEEN startwweek AND endweek)
    where placementdate <= p_fromdate ;
    
DROP TEMPORARY TABLE IF EXISTS tempforfeedDetail;
CREATE TEMPORARY TABLE tempforfeedDetail
    SELECT breederbatchid,batchname,shedid,maleitemid,femaleitemid,startwweek,endweek,shedname,
    SUM(((liveqty*(feedconsumed))/1000)) as stdfeed,itemname,(instock) as instock,
	placementdate,breeditemid,weeknumber,feeditemid as itemid,feedconsumed,liveqty FROM(
    SELECT breederbatchid,batchname,shedid,maleitemid,femaleitemid,startwweek,endweek,
		   BS.shedname,I.itemname,fnc_breederfeedopeningbalance(p_fromdate,shedid,feeditemid,p_companyid) as instock,
			placementdate,breeditemid,weeknumber,feeditemid,IFNULL(feedconsumed,0) as feedconsumed,
			firstdate,fnc_bird_liveqty(breederbatchid,shedid,breeditemid,placementdate,p_fromdate,p_companyid) as liveqty 
	FROM tempforfeed tb1
    LEFT JOIN breedershed BS ON BS.id = tb1.shedid
	LEFT JOIN item I ON I.id = tb1.feeditemid
    ) as temp
    group by shedid,feeditemid ;
    
    SELECT * FROM tempforfeedDetail WHERE liveqty != 0;
    END IF;
    
    -- for layer
    IF(FIND_IN_SET('725', p_moduleids) !=0) THEN
DROP TEMPORARY TABLE IF EXISTS tempforfeed2;
CREATE TEMPORARY TABLE tempforfeed2
SELECT layerbatchid,batchname,shedid,brditemid,startwweek,endweek,
placementdate,LF.layeritemid as breeditemid,LFD.weeknumber,LFD.itemid as feeditemid,LFD.feedconsumed,
DATE_SUB(DATE_ADD(placementdate, INTERVAL (LFD.weeknumber*7) DAY), INTERVAL 1 DAY) as firstdate from(
SELECT LB.id as layerbatchid,LB.batchname,LB.itemid as brditemid ,LBB.layershedid as shedid ,
		fnc_getlayerplacementdate(LB.id,p_companyid) as placementdate,
        TRUNCATE((((DATEDIFF(p_fromdate,fnc_getplacementdate(LB.id,p_companyid)))+1)/7),0) as startwweek,
		TRUNCATE((((DATEDIFF(p_todate,fnc_getplacementdate(LB.id,p_companyid)))+1)/7),0)  as endweek
FROM layerbatch LB
LEFT JOIN layerbatchbalance LBB ON LBB.layerbatchid = LB.id
 WHERE locationid = p_locationid AND statusid = 982
 group by LB.id,LBB.layershedid) as temp 
 LEFT JOIN layerfeedstandard LF ON   LF.layeritemid = brditemid
 LEFT JOIN layerfeedstandarddetail LFD ON   LFD.layerfeedstandardid = LF.id;
 

  SELECT layerbatchid,batchname,shedid,startwweek,endweek,shedname,
    SUM(((liveqty*feedconsumed)/1000)) as stdfeed,itemname,(instock) as instock,
	placementdate,breeditemid,weeknumber,feeditemid as itemid,feedconsumed,liveqty FROM(
    SELECT layerbatchid,batchname,shedid,startwweek,endweek,
		   LS.shedname,I.itemname,fnc_layerfeedopeningbalance(p_fromdate,shedid,feeditemid,p_companyid) as instock,
			placementdate,breeditemid,weeknumber,feeditemid,IFNULL(feedconsumed,0) as feedconsumed,
			firstdate,fnc_layerbird_liveqty(layerbatchid,shedid,breeditemid,placementdate,p_fromdate,p_companyid) as liveqty 
	FROM tempforfeed2 tb2
    LEFT JOIN layershed LS ON LS.id = tb2.shedid
	LEFT JOIN item I ON I.id = tb2.feeditemid
    ) as temp WHERE liveqty !=0 
  group by shedid,feeditemid ;
  END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_mom_fromgoodsissue`(
  IN p_issueid INT,
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DECLARE p_itemid INT;
	DECLARE p_itemname VARCHAR(200);
	DECLARE p_itemunitid INT;
	DECLARE p_unitcost DECIMAL(30,6);
    DECLARE p_quantity DECIMAL(20,3);
    DECLARE p_itemvalue DECIMAL(30,6);
	DECLARE p_itembatch VARCHAR(300);
    DECLARE p_warehouseid INT;
	DECLARE p_warehousebinid INT;
    DECLARE x INT;
    DECLARE j INT;
    DECLARE i INT;
    DECLARE material_itemid INT;
    DECLARE material_itembatch VARCHAR(300);
    DECLARE material_quantity INT;
    DECLARE p_transactiondate DATE;
	SET @row_number = 0;
    SET @row_number1 = 0;
	SET @reccount = 0;
    SET @movement_outid = null;
	SET @@sql_mode = ' ';
   -- select daily consumption for given daily transaction and issue them itembatch wise
   
   
   SELECT issuedate INTO p_transactiondate FROM purchase_goods_issue WHERE id = p_issueid; 
   
   SET @reccount = 0;
   SET x = 1;
   SET @row_number = 0;
   SET @issuecount = null;
 
   
	DROP TEMPORARY TABLE IF EXISTS tempgoodsissue;
        
	CREATE TEMPORARY TABLE tempgoodsissue
	SELECT 
		
		PGID.itemid, 
		I.itemname, 
		I.itemunitid,
        PGID.warehouseid,
		PGID.warehousebinid,
		PGID.itemvalue,
		PGID.issueqty as quantity, 
		(@row_number := @row_number + 1) as `rank`
	FROM purchase_goods_issuedetail PGID
    
	LEFT JOIN item I ON PGID.itemid = I.id
	WHERE PGID.goodsissueid = p_issueid;
	 
	SELECT COUNT(*) INTO @issuecount FROM tempgoodsissue;
    
    
	WHILE x  <= @issuecount DO
		SET p_itemid = null;
		SET p_itemname = null;
		SET p_itemunitid = null;
		SET p_unitcost = null;
		SET p_quantity = null;
        SET p_itemvalue = null;
        SET i = 0;
		SET @reccount = 0;
		SET @row_number1 = 0;
        SET p_warehouseid = null;
        SET p_warehousebinid = null;
        SET @materialissuedetail_outid = 1;
   
		SELECT itemid, itemname, itemunitid, quantity,itemvalue,warehouseid,warehousebinid
		INTO  p_itemid, p_itemname, p_itemunitid, p_quantity,p_itemvalue,p_warehouseid,p_warehousebinid
		FROM tempgoodsissue WHERE `rank` = x;
         
	
        -- select itembatch and quantity from material movement for current item
        DROP TEMPORARY TABLE IF EXISTS tempitembatch;
        
		CREATE TEMPORARY TABLE tempitembatch
        
            
	  SELECT itemid, itembatch, stockin,unitcost, transactiondate,
       fnc_itembatchstockout(itemid, IFNULL(itembatch,''), p_warehouseid, p_warehousebinid) as stockout,
        (@row_number1 := @row_number1 + 1) as recordrank2
       FROM(
    
			SELECT itemid, itembatch,SUM(quantity) as stockin,(SUM(itemvalue)/SUM(quantity))as unitcost,transactiondate
			FROM materialmovement
			WHERE 
				 
				itemid = p_itemid AND
				companyid = p_companyid AND
				towarehouseid = p_warehouseid AND
                towarehousebinid = p_warehousebinid AND
				transactiontypeid in (681,682,684,685) AND itembatch is not null
				GROUP BY itemid, itembatch
               
			) stocktable order by transactiondate asc; 
      
        
		SELECT COUNT(*) INTO @reccount FROM  tempitembatch;
        select * from tempitembatch;
        WHILE i<@reccount DO
			
			SET @issuequantity = 0;
			SET @p_unitcost = null;
			SELECT itemid, itembatch,(stockin - stockout) as quantity,unitcost
			 INTO  material_itemid, material_itembatch, material_quantity,p_unitcost
			FROM  tempitembatch where recordrank2 = i+1;
            
          --  SELECT material_itemid, material_itembatch, material_quantity,@p_unitcost;
           
         --  WHERE recordrank = i;
			
             IF (p_quantity > 0 ) THEN
				
                IF(material_quantity > 0) THEN
					IF (material_quantity >= p_quantity) THEN
						SET @issuequantity = p_quantity;
						SET p_quantity = 0;
					ELSE 
                    
						SET @issuequantity = material_quantity;
                        SET p_quantity = p_quantity - material_quantity;
                    
					-- ELSE
						-- SET @issuequantity = p_quantity - material_quantity;
					END IF;
                    
				END IF;
				   if (@issuequantity >0) then
				  CALL spc_materialmovement_save(null, p_itemid, material_itembatch,
												683, @materialissuedetail_outid, p_transactiondate,
												@issuequantity, p_warehouseid,p_warehousebinid,
                                                null, null,(@issuequantity*p_unitcost), p_companyid,
                                                p_userid,@movement_outid);
				 
              END IF;
            
            END IF;
            
        	SET  i = i + 1; 
	    END WHILE;
            
			SET  x = x + 1; 
	END WHILE;
	 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_notificationhistory_popuplist`(
	IN p_userid INT,
    IN p_limit INT
)
BEGIN
	
    SET @reccount = 0;
    
	 select count(*) INTO @reccount FROM notificationhistory 
		WHERE FIND_IN_SET(p_userid, inappusers) 
			AND !FIND_IN_SET(p_userid, IFNULL(inappviewedusers, 0))
			AND inapp = 1;
    
    IF(p_limit IS NULL) THEN
		SET p_limit = 1000000;
    END IF;
    
	SELECT 
		NH.id,
        DATE_FORMAT(NH.notificationtime,'%d/%m/%Y %h:%m %p') as `date`,
        EN.displayname as title,
        NH.content as description, 
        'Medium' as priority,
        NH.transactionid,
        NH.transactiontypeid,
        EN.pagekey,
		NH.inapp, 
        NH.sms, 
        NH.email,
        @reccount as unreadcount
    FROM 
		notificationhistory NH
    LEFT JOIN 
		entity EN ON NH.transactiontypeid = EN.id
    WHERE
		FIND_IN_SET(p_userid, inappusers) 
        AND !FIND_IN_SET(p_userid, IFNULL(inappviewedusers, 0))
        AND NH.inapp = 1
	ORDER BY NH.notificationtime DESC  
    LIMIT p_limit;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_notificationhistory_readsave`(
	IN p_userid INT,
    IN p_notificationids VARCHAR(3000),
	OUT out_id INT
)
BEGIN

	SET SQL_SAFE_UPDATES = 0;

		UPDATE notificationhistory SET 
        
        inappviewedusers = CASE 
				WHEN inappviewedusers IS NOT NULL THEN CONCAT(inappviewedusers, ',', p_userid) 
				WHEN inappviewedusers IS NULL THEN CONCAT(p_userid) 
			END
        
		WHERE FIND_IN_SET(id, p_notificationids) AND !FIND_IN_SET(p_userid, IFNULL(inappviewedusers, 0));
        
        SET out_id = 1;
    
    SET SQL_SAFE_UPDATES = 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_notificationhistory_save`(
	IN p_id INT,
	IN p_moduleid INT,
	IN p_transactiontypeid INT,
    IN p_transactionid INT,
	IN p_content VARCHAR(3000),
	IN p_roleids VARCHAR(500),
    IN p_inappusers VARCHAR(200),
	IN p_inappviewedusers VARCHAR(200),
	IN p_occurances TINYINT,
	IN p_inapp TINYINT,
	IN p_sms TINYINT,
	IN p_email TINYINT,
	IN p_statusid INT,
    IN p_userid INT,
	IN p_companyid INT,
    OUT out_id INT
)
BEGIN

	
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO notificationhistory 
				(	`id`,
					`moduleid`,
					`notificationtime`,
					`transactiontypeid`,
                    `transactionid`,
					`content`,
					`roleids`,
                    `inappusers`,
					`inappviewedusers`,
					`occurances`,
					`inapp`,
					`sms`,
					`email`,
					`statusid`,
                    `companyid`)
			VALUES 
				(	p_id,
					p_moduleid,
					now(),
					p_transactiontypeid,
                    p_transactionid,
					p_content,
					p_roleids,
                    p_inappusers,
					p_inappviewedusers,
					p_occurances,
					p_inapp,
					p_sms,
					p_email,
					p_statusid,
                    p_companyid
                    );
                    
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE notificationhistory
				SET 
					moduleid = p_moduleid,
					transactiontypeid = p_transactiontypeid,
                    transactionid = p_transactionid,
					content = p_content,
					roleids = p_roleids,
                    inappusers = p_inappusers,
					inappviewedusers = p_inappviewedusers,
					occurances = p_occurances,
					inapp = p_inapp,
					sms = p_sms,
					email = p_email,
					statusid = p_statusid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'notificationhistory', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_notificationhistory_search`(
	IN p_userid INT
)
BEGIN
	
	SELECT 
		NH.id,
        DATE_FORMAT(NH.notificationtime,'%d/%m/%Y %h:%m %p') as `date`,
        EN.displayname as title,
        NH.content as description, 
        'Medium' as priority,
		NH.transactionid,
        NH.transactiontypeid,
        EN.pagekey,
		NH.inapp, 
        NH.sms, 
        NH.email,
        FIND_IN_SET(p_userid, IFNULL(inappviewedusers, 0)) as isread,
        'notificationPress' as pressevent
    FROM 
		notificationhistory NH
    LEFT JOIN 
		entity EN ON NH.transactiontypeid = EN.id
    WHERE
		FIND_IN_SET(p_userid, inappusers) 
        
        AND NH.inapp = 1
	ORDER BY NH.notificationtime DESC;  
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_notificationtemplate_transactioncode`(
	IN p_transactioncode VARCHAR(100)
)
BEGIN


	
	SELECT TT.`id`,
		TT.`moduleid`,
        REF1.refname as `modulename`,
		TT.`apptransactionid`,
        AP.transactioncode,
        AP.transactionname,
		TT.`roleids`,
        (select GROUP_CONCAT(REF2.refname) from `reference` REF2 WHERE FIND_IN_SET(REF2.id, TT.`roleids`)) as rolenames,
        -- REF2.refname as `rolename`,
		
		TT.`template`
		
	FROM 
		`notificationtemplate` TT
	LEFT JOIN `apptransaction` AP ON TT.apptransactionid = AP.id
	LEFT JOIN `reference` REF1 ON TT.moduleid = REF1.id
    
    WHERE
		AP.transactioncode = p_transactioncode;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_notificationuser_save`(
    IN p_userid INT,
    IN p_userkey VARCHAR(50),
    IN p_companyid INT,
    OUT out_id INT
)
BEGIN

	IF(!EXISTS(SELECT * FROM notificationuser WHERE userid = p_userid AND userkey = p_userkey AND companyid = p_companyid LIMIT 1)) THEN

		INSERT INTO notificationuser (userid, userkey, companyid) VALUE (p_userid, p_userkey, p_companyid);
    
		SELECT LAST_INSERT_ID() INTO OUT_ID;
    
	ELSE
    
		SELECT id INTO OUT_ID FROM notificationuser WHERE userid = p_userid AND userkey = p_userkey AND companyid = p_companyid LIMIT 1;
    
    END IF;
    
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_organ_delete`( 
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM organ WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'organ', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_organ_save`( 
 IN p_id INT(11),
 IN p_organname VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO organ
              (organname, companyid)
       VALUES
            (p_organname, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE organ 
   
	SET organname = p_organname,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'organ', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_organ_search`(
 IN p_companyid INT(11)
)
BEGIN

	SELECT 
    id,
    organname,
    companyid
    
	FROM organ
    
    WHERE companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_organ_select`( 
IN p_id INT(11)
)
BEGIN

	SELECT id, organname, companyid
           
	FROM organ
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_parentbirdstockbalancealldetail_breeder`(
In p_batchid varchar(100),
IN p_todate DATE,
IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';


DROP TEMPORARY TABLE IF EXISTS parentbirdstockbalancealldetail;
CREATE TEMPORARY TABLE parentbirdstockbalancealldetail


select
BB.id as batchid,
BB.companyid as companyid,
BDT.transactiondate as transactiondate,
BB.batchname,
BB.maleitemid as maleitemid,
BB.femaleitemid as femaleitemid,
BB.statusid,
REF.refname as statusforbatch,
DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL 167 DAY) as lastdate,
fun_batch_ageindays(BDT.transactiondate,(fnc_getplacementdate(BB.id,p_companyid)),BB.id)as ageindays,

fnc_breeder_batchwise_birdliveqty(BB.id,BB.maleitemid,BDT.transactiondate,p_companyid)as maleliveqty,
fnc_breeder_batchwise_birdliveqty(BB.id,BB.femaleitemid,BDT.transactiondate,p_companyid)as femaleliveqty,
fnc_chicks_purchasecost(BB.id,p_companyid,BB.maleitemid)as malepurcost,
fnc_chicks_purchasecost(BB.id,p_companyid,BB.femaleitemid)as femalrpurcost,
fnc_chicks_placementqty(BB.id,p_companyid,BB.maleitemid)as maleplaqty,
fnc_chicks_placementqty(BB.id,p_companyid,BB.femaleitemid)as femaleplacqty,
(((fnc_chicks_purchasecost(BB.id,p_companyid,BB.maleitemid))*(fnc_chicks_placementqty(BB.id,p_companyid,BB.maleitemid)))+((fnc_chicks_purchasecost(BB.id,p_companyid,BB.femaleitemid))*(fnc_chicks_placementqty(BB.id,p_companyid,BB.femaleitemid))))as purval,
((fnc_breeder_batchwise_birdliveqty(BB.id,BB.maleitemid,BDT.transactiondate,p_companyid))+(fnc_breeder_batchwise_birdliveqty(BB.id,BB.femaleitemid,BDT.transactiondate,p_companyid)))as malefemaleliveqty,

fnc_breederbatchwise_salesvalue(BB.id,721,BDT.transactiondate,p_companyid)as salevalue,
fnc_consumption_wise_qty_uptotodate(BB.id,BDT.transactiondate,861,p_companyid)as feedqty,
fnc_consumption_wise_cost_uptotodate(BB.id,BDT.transactiondate,861,p_companyid)as feedcost,
fnc_consumption_wise_cost_uptotodate(BB.id,BDT.transactiondate,862,p_companyid) as Medcost

/*fnc_consumption_wise_cost_uptotodate(BB.id,BDT.transactiondate,863,p_companyid)as vacccost,
fnc_consumption_wise_cost_uptotodate(BB.id,BDT.transactiondate,864,p_companyid)as vitcost,
fnc_getgoodsissue(BB.id,721,BDT.transactiondate)as othercost,
fnc_batchwise_malefemalemortality_uptodate(BB.id,BB.maleitemid,BDT.transactiondate)as malemor,
fnc_batchwise_malefemalemortality_uptodate(BB.id,BB.femaleitemid,BDT.transactiondate)as femalemor,
fnc_getplacementdate(BB.id,p_companyid) as placementdate,
DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL p_companyid7 DAY) as lastdate,
fnc_consumption_wise_cost_After24week(BB.id,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL p_companyid7 DAY)),861,p_companyid)as feedcostafter24week,
fnc_consumption_wise_cost_After24week(BB.id,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL p_companyid7 DAY)),862,p_companyid)as medcostafter24week,
fnc_consumption_wise_cost_After24week(BB.id,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL p_companyid7 DAY)),863,p_companyid)as vaccinecostafter24week,
fnc_consumption_wise_cost_After24week(BB.id,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL p_companyid7 DAY)),863,p_companyid)as vitcostafter24week,
fnc_consumption_wise_qty_uptotodate(BB.id,DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL p_companyid7 DAY),861,p_companyid)as after24feedqty,
fnc_consumption_wise_qty_uptotodate(BB.id,DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL p_companyid7 DAY),862,p_companyid)as after24medqty,
fnc_consumption_wise_qty_uptotodate(BB.id,DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL p_companyid7 DAY),863,p_companyid)as after24vaccineqty,
fnc_consumption_wise_qty_uptotodate(BB.id,DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL p_companyid7 DAY),864,p_companyid)as after24vitqty,
fnc_breederbatchwise_salesvalue(BB.id,721,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL p_companyid7 DAY)),p_companyid)as after24weeksalevalue,
fnc_getgoodsissue(BB.id,721,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL p_companyid7 DAY)))as after24weekothercost,
fun_afteramortization_mortality(BB.id,(DATE_ADD((fnc_getplacementdate(BB.id,p_companyid)), INTERVAL p_companyid7 DAY)),p_companyid)as after24weekamotization

/*INTO @batchid,@batchname,@maleitemid,@femaleitemid,@statusid,@statusforbatch,@ageindays,@maleliveqty,
@femaleliveqty,@malepurcost,@femalrpurcost,@maleplaqty,@femaleplacqty,@purval,@malefemaleliveqty,
@salevalue,@feedqty,@feedcost,@Medcost,@vacccost,@vitcost,@othercost,@malemor,@femalemor,@placementdate,
@lastdate,@feedcostafter24week,@medcostafter24week,@vaccinecostafter24week,@vitcostafter24week,
@after24feedqty,@after24medqty,@after24vaccineqty,@after24vitqty,@after24weeksalevalue,@after24weekothercost,
@after24weekamotization*/

FROM breederbatch BB
INNER JOIN `reference` REF ON BB.statusid = REF.id
INNER JOIN breederdailytransaction BDT ON BB.id =BDT.breederbatchid
-- LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id 
-- LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = BDM.itemid 

Where
FIND_IN_SET(BB.id,p_batchid)  
-- AND BDT.transactiondate <= p_todate
AND BB.companyid = p_companyid
group by BB.id;



select 

batchid,companyid,transactiondate,batchname,maleitemid,femaleitemid,statusid,statusforbatch,ageindays,maleliveqty,
femaleliveqty,malepurcost,femalrpurcost,maleplaqty,femaleplacqty,purval,malefemaleliveqty,
salevalue,feedqty,feedcost,Medcost,lastdate,


fnc_consumption_wise_cost_After24week(batchid,(lastdate),862,p_companyid)as medcostafter24week,
fnc_consumption_wise_cost_uptotodate(batchid,transactiondate,863,p_companyid)as vacccost,
fnc_consumption_wise_cost_uptotodate(batchid,transactiondate,864,p_companyid)as vitcost,
fnc_getgoodsissue(batchid,721,transactiondate)as othercost,
fnc_batchwise_malefemalemortality_uptodate(batchid,maleitemid,transactiondate)as malemor,
fnc_batchwise_malefemalemortality_uptodate(batchid,femaleitemid,transactiondate)as femalemor,
fnc_getplacementdate(batchid,p_companyid) as placementdate,
fnc_consumption_wise_cost_After24week(batchid,(lastdate),861,p_companyid)as feedcostafter24week,
fnc_consumption_wise_cost_After24week(batchid,(lastdate),863,p_companyid)as vaccinecostafter24week,
fnc_consumption_wise_cost_After24week(batchid,(lastdate),863,p_companyid)as vitcostafter24week,
fnc_consumption_wise_qty_uptotodate(batchid,(lastdate),861,p_companyid)as after24feedqty,
fnc_consumption_wise_qty_uptotodate(batchid,(lastdate),862,p_companyid)as after24medqty,
fnc_consumption_wise_qty_uptotodate(batchid,(lastdate),863,p_companyid)as after24vaccineqty,
fnc_consumption_wise_qty_uptotodate(batchid,(lastdate),864,p_companyid)as after24vitqty,
fnc_breederbatchwise_salesvalue(batchid,721,(lastdate),p_companyid)as after24weeksalevalue,
fnc_getgoodsissue(batchid,721,(lastdate))as after24weekothercost,
fun_afteramortization_mortality(batchid,(lastdate),p_companyid)as after24weekamotization


from parentbirdstockbalancealldetail
where
FIND_IN_SET(batchid,p_batchid)  
-- AND BDT.transactiondate <= p_todate
AND companyid = p_companyid
group by batchid;



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_parentbirdstockbalancealldetail_layer`(
In p_batchid varchar(100),
IN p_todate DATE,
IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';

DROP TEMPORARY TABLE IF EXISTS parentbirdstockbalancealldetail;
CREATE TEMPORARY TABLE parentbirdstockbalancealldetail


select
LB.id as batchid,
LB.batchname,
LB.itemid,
LB.statusid,
REF.refname as statusforbatch,
fnc_getlayerplacementdate(LB.id,p_companyid) as placementdateforbatch,
fun_batch_ageindays(LDT.transactiondate,(fnc_getlayerplacementdate(LB.id,p_companyid)),LB.id)as ageindays,
fnc_layerbatchwise_birdliveqty(LB.id,LB.itemid,LDT.transactiondate,p_companyid)as liveqty,
fnc_chicks_purchasecost_layer(LB.id,p_companyid,LB.itemid)as purcost,
fnc_layerchicks_placementqty(LB.id,p_companyid,LB.itemid)as plaqty,
(((fnc_chicks_purchasecost_layer(LB.id,p_companyid,LB.itemid))*(fnc_layerchicks_placementqty(LB.id,p_companyid,LB.itemid))))as purval,
((fnc_layerbatchwise_birdliveqty(LB.id,LB.itemid,LDT.transactiondate,p_companyid)))as malefemaleliveqty,
fnc_layerbatchwise_salesvalue(LB.id,725,LDT.transactiondate,p_companyid)as salevalue,
fnc_consumption_wise_qty_uptotodateforlayer(LB.id,LDT.transactiondate,861,p_companyid)as feedqty,
fnc_consumption_wise_cost_uptotodateforlayer(LB.id,LDT.transactiondate,861,p_companyid)as feedcost,
fnc_consumption_wise_cost_uptotodateforlayer(LB.id,LDT.transactiondate,862,p_companyid) as Medcost,
fnc_consumption_wise_cost_uptotodateforlayer(LB.id,LDT.transactiondate,863,p_companyid)as vacccost,
fnc_consumption_wise_cost_uptotodateforlayer(LB.id,LDT.transactiondate,864,p_companyid)as vitcost,
fnc_getgoodsissue(LB.id,725,LDT.transactiondate)as othercost,
fnc_batchwise_malefemalemortality_uptodatelayer(LB.id,LB.itemid,LDT.transactiondate)as mor,
fnc_getlayerplacementdate(LB.id,p_companyid) as placementdate,
DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY) as lastdate,
fnc_consumption_wise_cost_After19week(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),861,p_companyid)as feedcostafter19week,
fnc_consumption_wise_cost_After19week(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),862,p_companyid)as medcostafter19week,
fnc_consumption_wise_cost_After19week(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),863,p_companyid)as vaccinecostafter19week,
fnc_consumption_wise_cost_After19week(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),863,p_companyid)as vitcostafter19week,
fnc_consumption_wise_qty_uptotodateforlayer(LB.id,DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY),861,p_companyid)as after19feedqty,
fnc_consumption_wise_qty_uptotodateforlayer(LB.id,DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY),862,p_companyid)as after19medqty,
fnc_consumption_wise_qty_uptotodateforlayer(LB.id,DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY),863,p_companyid)as after19vaccineqty,
fnc_consumption_wise_qty_uptotodateforlayer(LB.id,DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY),864,p_companyid)as after19vitqty,
fnc_layerbatchwise_salesvalue(LB.id,725,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),p_companyid)as after19weeksalevalue,
fnc_getgoodsissue(LB.id,725,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)))as after19weekothercost,
fun_afteramortization_mortalitylayer(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),p_companyid)as after19weekamotization

INTO @batchid,@batchname,@itemid,@statusid,@statusforbatch,@placementdateforbatch,@ageindays,@liveqty,
@purcost,@plaqty,@purval,@malefemaleliveqty,
@salevalue,@feedqty,@feedcost,@Medcost,@vacccost,@vitcost,@othercost,@mor,@placementdate,
@lastdate,@feedcostafter19week,@medcostafter19week,@vaccinecostafter19week,@vitcostafter19week,
@after19feedqty,@after19medqty,@after19vaccineqty,@after19vitqty,@after19weeksalevalue,@after19weekothercost,
@after19weekamotization

FROM layerbatch LB
INNER JOIN `reference` REF ON LB.statusid = REF.id
INNER JOIN layerdailytransaction LDT ON LB.id = LDT.layerbatchid

Where
FIND_IN_SET(LB.id,p_batchid)  -- AND
-- LDT.transactiondate = p_todate
AND LB.companyid = p_companyid;
-- select * from parentbirdstockbalancealldetail;

select

batchid,batchname,itemid,statusid,statusforbatch,placementdateforbatch,ageindays,liveqty,purcost,plaqty,purval,malefemaleliveqty,
purcost/malefemaleliveqty as costperbird,
salevalue,feedqty,feedcost,Medcost,vacccost,vitcost,othercost,mor,placementdate,
lastdate,feedcostafter19week,medcostafter19week,vaccinecostafter19week,vitcostafter19week,
after19feedqty,after19medqty,after19vaccineqty,after19vitqty,after19weeksalevalue,after19weekothercost,
after19weekamotization


FROM 
parentbirdstockbalancealldetail
group by batchid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_parentbirdstockbalancealldetail_Layerone`(
In p_batchid varchar(100),
IN p_todate DATE,
IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';

DROP TEMPORARY TABLE IF EXISTS parentbirdstockbalancealldetail;
CREATE TEMPORARY TABLE parentbirdstockbalancealldetail


select
LB.id as batchid,
LB.batchname,
LB.itemid,
-- BB.femaleitemid,
LB.statusid,
REF.refname as statusforbatch,
DATEDIFF(LDT.transactiondate,fnc_getlayerplacementdate(LB.id,p_companyid))as ageindays,
fnc_layerbatchwise_birdliveqty(LB.id,LB.itemid,LDT.transactiondate,p_companyid)as liveqty,
fnc_chicks_purchasecost_layer(LB.id,p_companyid,LB.itemid)as purcost,
fnc_layerchicks_placementqty(LB.id,p_companyid,LB.itemid)as plaqty,
(((fnc_chicks_purchasecost_layer(LB.id,p_companyid,LB.itemid))*(fnc_layerchicks_placementqty(LB.id,p_companyid,LB.itemid))))as purval,
((fnc_layerbatchwise_birdliveqty(LB.id,LB.itemid,LDT.transactiondate,p_companyid)))as malefemaleliveqty,

fnc_layerbatchwise_salesvalue(LB.id,725,LDT.transactiondate,p_companyid)as salevalue,

fnc_consumption_wise_qty_uptotodateforlayer(LB.id,LDT.transactiondate,1149,p_companyid)as feedqty,
fnc_consumption_wise_cost_uptotodateforlayer(LB.id,LDT.transactiondate,1150,p_companyid)as feedcost,
fnc_consumption_wise_cost_uptotodateforlayer(LB.id,LDT.transactiondate,1151,p_companyid) as Medcost,
fnc_consumption_wise_cost_uptotodateforlayer(LB.id,LDT.transactiondate,1152,p_companyid)as vacccost,
fnc_consumption_wise_cost_uptotodateforlayer(LB.id,LDT.transactiondate,1153,p_companyid)as vitcost,
fnc_getgoodsissue(LB.id,725,LDT.transactiondate)as othercost,
fnc_batchwise_malefemalemortality_uptodatelayer(LB.id,LB.itemid,LDT.transactiondate)as mor,
fnc_getlayerplacementdate(LB.id,p_companyid) as placementdate,
DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY) as lastdate,
fnc_consumption_wise_cost_After19week(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),1149,p_companyid)as feedcostafter19week,
fnc_consumption_wise_cost_After19week(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),1150,p_companyid)as medcostafter19week,
fnc_consumption_wise_cost_After19week(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),1151,p_companyid)as vaccinecostafter19week,
fnc_consumption_wise_cost_After19week(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),1152,p_companyid)as vitcostafter19week,
fnc_consumption_wise_qty_uptotodateforlayer(LB.id,DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY),1149,p_companyid)as after19feedqty,
fnc_consumption_wise_qty_uptotodateforlayer(LB.id,DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY),1150,p_companyid)as after19medqty,
fnc_consumption_wise_qty_uptotodateforlayer(LB.id,DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY),1151,p_companyid)as after19vaccineqty,
fnc_consumption_wise_qty_uptotodateforlayer(LB.id,DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY),1152,p_companyid)as after19vitqty,

fnc_layerbatchwise_salesvalue(LB.id,725,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),p_companyid)as after19weeksalevalue,
fnc_getgoodsissue(LB.id,725,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)))as after19weekothercost,
fun_afteramortization_mortalitylayer(LB.id,(DATE_ADD((fnc_getlayerplacementdate(LB.id,p_companyid)), INTERVAL 132 DAY)),p_companyid)as after19weekamotization

/*INTO @batchid,@batchname,@itemid,@statusid,@statusforbatch,@ageindays,@liveqty,
@purcost,@plaqty,@purval,@malefemaleliveqty,
@salevalue,@feedqty,@feedcost,@Medcost,@vacccost,@vitcost,@othercost,@mor,@placementdate,
@lastdate,@feedcostafter19week,@medcostafter19week,@vaccinecostafter19week,@vitcostafter19week,
@after19feedqty,@after19medqty,@after19vaccineqty,@after19vitqty,@after19weeksalevalue,@after19weekothercost,
@after19weekamotization*/

FROM layerbatch LB
INNER JOIN `reference` REF ON LB.statusid = REF.id
INNER JOIN layerdailytransaction LDT ON LB.id = LDT.layerbatchid 
-- LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id 
-- LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = BDM.itemid 

Where
FIND_IN_SET(LB.id,p_batchid)  AND
LDT.transactiondate <= p_todate
AND LB.companyid = p_companyid
group by LB.id ;
select * from parentbirdstockbalancealldetail;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_parent_bird_balance`(
IN p_batchid varchar(200),
IN p_fromdate DATE,
IN p_todate DATE,
IN p_companyid INT)
BEGIN
SET @birdcoststd =null;
SET @birdcostnonprodbird = null;
SELECT birdcoststd,birdcostnonprodbird INTO @birdcoststd,@birdcostnonprodbird 
	FROM breedersetting 
    WHERE companyid = p_companyid limit 1;

 DROP TEMPORARY TABLE IF EXISTS breederbatchtb;
 CREATE TEMPORARY TABLE breederbatchtb
	select
		BB.id as batchid,maleitemid,femaleitemid,batchname,
        fnc_getplacementdate(BB.id,p_companyid) as placementdate,
        fnc_breeder_getlasttransactiondate(BB.id) as transactiondate ,
		fnc_chicks_purchasecost(BB.id,p_companyid,maleitemid) as malepurcost,
		fnc_chicks_purchasecost(BB.id,p_companyid,femaleitemid) as femalepurcost,
		fnc_chicks_placementqty(BB.id,p_companyid,maleitemid) as maleplacqty ,
		fnc_chicks_placementqty(BB.id,p_companyid,femaleitemid) as femaleplacqty
        
	FROM breederbatch BB 
	

		WHERE find_in_set(BB.id,p_batchid);
        
	DROP TEMPORARY TABLE IF EXISTS breederbatchtb1;
	CREATE TEMPORARY TABLE breederbatchtb1
    
    select
	  batchname,
      transactiondate,
      batchid,
      ((malepurcost*maleplacqty)+(femalepurcost*femaleplacqty)) as purvalue,
	  fnc_breeder_batchwise_birdliveqty(batchid,maleitemid,transactiondate,p_companyid) as maleliveqty,
      fnc_breeder_batchwise_birdliveqty(batchid,femaleitemid,transactiondate,p_companyid) as femaleliveqty,
      fun_overhed_exp(batchid,721,transactiondate,p_companyid) as overheadexp,
	  fnc_getgoodsissue(batchid,721,transactiondate) as goodsissuecost,
	  fnc_consumption_wise_cost(batchid,transactiondate,861,p_companyid) as feedcost,
	  fnc_consumption_wise_cost(batchid,transactiondate,862,p_companyid) as medcost,
	  fnc_consumption_wise_cost(batchid,transactiondate,863,p_companyid) as vacccost,
	  fnc_consumption_wise_cost(batchid,transactiondate,864,p_companyid) as vitamincost,
	  fnc_breederbatchwise_salesvalue(batchid,721,transactiondate,p_companyid) as salesvalue,
	  fun_afterlyaing_mortalitcost(batchid,transactiondate,p_companyid) as mortality,
	  spc_getbatchwise_nonproductive_bird(batchid,p_companyid,transactiondate,femaleitemid) as nonprodbird,
	  fun_amortizatiobvalue_forbreeder(batchid,transactiondate) as amortizationvalue,
      TRUNCATE(((DATEDIFF(transactiondate,placementdate)/7)+1),0) as ageinweek
      
      FROM breederbatchtb ;
    
      
       DROP TEMPORARY TABLE IF EXISTS breederbatchtb2;
	  CREATE TEMPORARY TABLE breederbatchtb2
      SELECT * FROM breederbatchtb1;
      
	if(@birdcostnonprodbird = 1) THEN
		 DROP TEMPORARY TABLE IF EXISTS breederbatchtb3;
		CREATE TEMPORARY TABLE breederbatchtb3
		SELECT * FROM (
		  SELECT batchname,ageinweek,transactiondate,ROUND(purvalue,3) as purvalue ,(maleliveqty+femaleliveqty) as liveqty,((maleliveqty+femaleliveqty)) as productivebird,'0'as nonprobird,
				  ROUND(overheadexp,3) as ohexp, ROUND(goodsissuecost,3) as otexp,amortizationvalue, ROUND(feedcost,3) as feedcost, ROUND(medcost,3) as medicost, ROUND(vacccost,3) as vaccost, ROUND(vitamincost,3) as vitmcost, ROUND(salesvalue,3) as salesvalue,
				 ROUND((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost),3) as totalvalue, ROUND(((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3) as balancevalue,mortality
				 FROM breederbatchtb1 WHERE ageinweek<=24 
			union all
		 SELECT batchname,ageinweek,transactiondate,ROUND(purvalue,3) as purvalue ,(maleliveqty+femaleliveqty) as liveqty,((maleliveqty+femaleliveqty)-(nonprodbird+maleliveqty)) as productivebird,(nonprodbird+maleliveqty)as nonprobird,
		  ROUND(overheadexp,3) as ohexp, ROUND(goodsissuecost,3) as otexp,amortizationvalue, ROUND(feedcost,3) as feedcost, ROUND(medcost,3) as medicost, ROUND(vacccost,3) as vaccost, ROUND(vitamincost,3) as vitmcost, ROUND(salesvalue,3) as salesvalue,
		 ROUND((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost),3) as totalvalue, ROUND(((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3) as balancevalue,mortality
		 FROM breederbatchtb2 WHERE ageinweek>24
		 ) as temp;
	END IF;
    
	IF(@birdcoststd = 1) THEN
	 DROP TEMPORARY TABLE IF EXISTS breederbatchtb3;
	 CREATE TEMPORARY TABLE breederbatchtb3
		SELECT batchname,ageinweek,transactiondate,ROUND(purvalue,3) as purvalue ,(maleliveqty+femaleliveqty) as liveqty,((maleliveqty+femaleliveqty)) as productivebird,'0'as nonprobird,
		  ROUND(overheadexp,3) as ohexp, ROUND(goodsissuecost,3) as otexp,amortizationvalue, ROUND(feedcost,3) as feedcost, ROUND(medcost,3) as medicost, ROUND(vacccost,3) as vaccost, ROUND(vitamincost,3) as vitmcost, ROUND(salesvalue,3) as salesvalue,
			ROUND((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost),3) as totalvalue, ROUND(((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3) as balancevalue,mortality
         FROM breederbatchtb1;
  END IF;
  SELECT *,fnc_getphase_byweek(ageinweek) as phaseststus,ROUND((balancevalue/productivebird),3) as birdcost,0 as transfercost FROM breederbatchtb3;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_parent_bird_balance_report_layer`(
IN p_batchid varchar(200),
IN p_fromdate DATE,
IN p_todate DATE,
IN p_companyid INT)
BEGIN
SET @birdcoststd =null;
SET @birdcostnonprodbird = null;
SELECT standardeggcost INTO @birdcoststd 
	FROM layersetting 
    WHERE companyid = p_companyid limit 1;

 DROP TEMPORARY TABLE IF EXISTS layerbatchtb;
 CREATE TEMPORARY TABLE layerbatchtb
	select
		LB.id as batchid,itemid,batchname,
        fnc_getplacementdate(LB.id,p_companyid) as placementdate,
        fnc_layer_getlasttransactiondate(LB.id) as transactiondate ,
		fnc_chicks_purchasecost_layer(LB.id,p_companyid,itemid) as itempurcost,
		fnc_layerchicks_placementqty(LB.id,p_companyid,itemid) as itemplacqty 
		
        
	FROM layerbatch LB 
	

		WHERE find_in_set(LB.id,p_batchid);
        
	DROP TEMPORARY TABLE IF EXISTS layerbatchtb1;
	CREATE TEMPORARY TABLE layerbatchtb1
    
    select
	  batchname,
      itemid,
      transactiondate,
      batchid,
      ((itempurcost*itemplacqty)) as purvalue,
	  fnc_layerbatchwise_birdliveqty(batchid,itemid,transactiondate,p_companyid) as itemliveqty,
      fun_overhed_exp(batchid,725,transactiondate,p_companyid) as overheadexp,
	  fnc_getgoodsissue(batchid,725,transactiondate) as goodsissuecost,
	  fnc_consumption_wise_cost_layer(batchid,transactiondate,861,p_companyid) as feedcost,
	  fnc_consumption_wise_cost_layer(batchid,transactiondate,862,p_companyid) as medcost,
	  fnc_consumption_wise_cost_layer(batchid,transactiondate,863,p_companyid) as vacccost,
	  fnc_consumption_wise_cost_layer(batchid,transactiondate,864,p_companyid) as vitamincost,
	  fnc_layerbatchwise_salesvalue(batchid,725,transactiondate,p_companyid) as salesvalue,
	  fun_afterlyaing_mortalitcost_layer(batchid,transactiondate,p_companyid) as mortality,
	  -- spc_getbatchwise_nonproductive_bird(batchid,p_companyid,transactiondate,femaleitemid) as nonprodbird,
	  fun_amortizatiobvalue_forlayer(batchid,transactiondate) as amortizationvalue,
      TRUNCATE(((DATEDIFF(transactiondate,placementdate)/7)+1),0) as ageinweek
      
      FROM layerbatchtb;
    
      
       DROP TEMPORARY TABLE IF EXISTS layerbatchtb2;
	  CREATE TEMPORARY TABLE layerbatchtb2
      SELECT * FROM layerbatchtb1;
      
	if(@birdcostnonprodbird = 1) THEN
		 DROP TEMPORARY TABLE IF EXISTS layerbatchtb3;
		CREATE TEMPORARY TABLE layerbatchtb3
		SELECT * FROM (
		  SELECT batchname,ageinweek,transactiondate,ROUND(purvalue,3) as purvalue ,itemliveqty as liveqty,itemliveqty as productivebird,'0'as nonprobird,
				  ROUND(overheadexp,3) as ohexp, ROUND(goodsissuecost,3) as otexp,amortizationvalue, ROUND(feedcost,3) as feedcost, ROUND(medcost,3) as medicost, ROUND(vacccost,3) as vaccost, ROUND(vitamincost,3) as vitmcost, ROUND(salesvalue,3) as salesvalue,
				 ROUND((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost),3) as totalvalue, ROUND(((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3) as balancevalue,mortality
				 FROM layerbatchtb1 WHERE ageinweek<=19 
			union all
		 SELECT batchname,ageinweek,transactiondate,ROUND(purvalue,3) as purvalue ,itemliveqty as liveqty,(itemliveqty-(nonprodbird)) as productivebird,nonprodbird as nonprobird,
		  ROUND(overheadexp,3) as ohexp, ROUND(goodsissuecost,3) as otexp,amortizationvalue, ROUND(feedcost,3) as feedcost, ROUND(medcost,3) as medicost, ROUND(vacccost,3) as vaccost, ROUND(vitamincost,3) as vitmcost, ROUND(salesvalue,3) as salesvalue,
		 ROUND((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost),3) as totalvalue, ROUND(((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3) as balancevalue,mortality
		 FROM layerbatchtb2 WHERE ageinweek>19
		 ) as temp;
	END IF;
    
	IF(@birdcoststd = 1) THEN
	 DROP TEMPORARY TABLE IF EXISTS layerbatchtb3;
	 CREATE TEMPORARY TABLE layerbatchtb3
		SELECT batchname,ageinweek,transactiondate,ROUND(purvalue,3) as purvalue ,itemliveqty as liveqty,itemliveqty as productivebird,'0'as nonprobird,
		  ROUND(overheadexp,3) as ohexp, ROUND(goodsissuecost,3) as otexp,amortizationvalue, ROUND(feedcost,3) as feedcost, ROUND(medcost,3) as medicost, ROUND(vacccost,3) as vaccost, ROUND(vitamincost,3) as vitmcost, ROUND(salesvalue,3) as salesvalue,
			ROUND((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost),3) as totalvalue, ROUND(((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3) as balancevalue,mortality
         FROM layerbatchtb1;
  END IF;
  SELECT *,fnc_getphase_byweek(ageinweek) as phaseststus,ROUND((balancevalue/productivebird),3) as birdcost,0 as transfercost FROM layerbatchtb3;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_parent_bird_balance_report_layerone`(
IN p_batchid varchar(200),
IN p_fromdate DATE,
IN p_todate DATE,
IN p_companyid INT

)
BEGIN
SET @birdcoststd =null;
SET @birdcostnonprodbird = null;

SELECT standardeggcost INTO @birdcoststd 
FROM layersetting 
WHERE companyid = p_companyid limit 1;

 DROP TEMPORARY TABLE IF EXISTS layerbatchtb;
 CREATE TEMPORARY TABLE layerbatchtb
	select
		LB.id as batchid,itemid,batchname,
       fnc_getlayerplacementdate(LB.id,p_companyid) as placementdate,
	   fnc_layer_getlasttransactiondate(LB.id) as transactiondate ,
	   fnc_chicks_purchasecost_layer(LB.id,p_companyid,itemid) as itempurcost,
	    fnc_layerchicks_placementqty(LB.id,p_companyid,itemid) as itemplacqty 
		
        
	FROM layerbatch LB 
	

    WHERE find_in_set(LB.id,p_batchid);
   -- select * from layerbatchtb; 
  
  DROP TEMPORARY TABLE IF EXISTS layerbatchtb1;
  CREATE TEMPORARY TABLE layerbatchtb1
    
    select
	  batchname,
      itemid,
      transactiondate,
      batchid,
      ((itempurcost*itemplacqty)) as purvalue,
	  fnc_layerbatchwise_birdliveqty(batchid,itemid,transactiondate,p_companyid) as itemliveqty,
       fun_overhed_exp(batchid,725,transactiondate,p_companyid) as overheadexp,
	  fnc_getgoodsissue(batchid,725,transactiondate) as goodsissuecost,
	  fnc_consumption_wise_cost_layer(batchid,transactiondate,1149,p_companyid) as feedcost
      
      FROM layerbatchtb;
    
      
       DROP TEMPORARY TABLE IF EXISTS layerbatchtb2;
	  CREATE TEMPORARY TABLE layerbatchtb2
      SELECT * FROM layerbatchtb1;
      
      if(@birdcostnonprodbird = 1) THEN
		DROP TEMPORARY TABLE IF EXISTS layerbatchtb3;
		CREATE TEMPORARY TABLE layerbatchtb3
		SELECT * FROM (
		  SELECT batchname,ageinweek,transactiondate,ROUND(purvalue,3) as purvalue ,itemliveqty as liveqty,itemliveqty as productivebird,'0'as nonprobird,
				  ROUND(overheadexp,3) as ohexp, ROUND(goodsissuecost,3) as otexp,amortizationvalue, ROUND(feedcost,3) as feedcost, ROUND(medcost,3) as medicost, ROUND(vacccost,3) as vaccost, ROUND(vitamincost,3) as vitmcost, ROUND(salesvalue,3) as salesvalue,
				 ROUND((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost),3) as totalvalue, ROUND(((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3) as balancevalue,mortality
				 FROM layerbatchtb1 WHERE ageinweek<=19 
			union all
		 SELECT batchname,ageinweek,transactiondate,ROUND(purvalue,3) as purvalue ,itemliveqty as liveqty,(itemliveqty-(nonprodbird)) as productivebird,nonprodbird as nonprobird,
		  ROUND(overheadexp,3) as ohexp, ROUND(goodsissuecost,3) as otexp,amortizationvalue, ROUND(feedcost,3) as feedcost, ROUND(medcost,3) as medicost, ROUND(vacccost,3) as vaccost, ROUND(vitamincost,3) as vitmcost, ROUND(salesvalue,3) as salesvalue,
		 ROUND((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost),3) as totalvalue, ROUND(((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3) as balancevalue,mortality
		 FROM layerbatchtb2 WHERE ageinweek>19
		 ) as temp;
	END IF;
    
	IF(@birdcoststd = 1) THEN
	 DROP TEMPORARY TABLE IF EXISTS layerbatchtb3;
	 CREATE TEMPORARY TABLE layerbatchtb3
		SELECT batchname,ageinweek,transactiondate,ROUND(purvalue,3) as purvalue ,itemliveqty as liveqty,itemliveqty as productivebird,'0'as nonprobird,
		  ROUND(overheadexp,3) as ohexp, ROUND(goodsissuecost,3) as otexp,amortizationvalue, ROUND(feedcost,3) as feedcost, ROUND(medcost,3) as medicost, ROUND(vacccost,3) as vaccost, ROUND(vitamincost,3) as vitmcost, ROUND(salesvalue,3) as salesvalue,
			ROUND((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost),3) as totalvalue, ROUND(((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3) as balancevalue,mortality
         FROM layerbatchtb1;
  END IF;
  SELECT *,fnc_getphase_byweek(ageinweek) as phaseststus,ROUND((balancevalue/productivebird),3) as birdcost,0 as transfercost FROM layerbatchtb3;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_parent_bird_balance_report_layer_final`(
IN p_batchid varchar(200),
IN p_fromdate DATE,
IN p_todate DATE,
IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';

SET @birdcoststd =null;
SET @birdcostnonprodbird = null;
SELECT standardeggcost INTO @birdcoststd 
	FROM layersetting 
    WHERE companyid = p_companyid limit 1;

 DROP TEMPORARY TABLE IF EXISTS layerbatchtb;
 CREATE TEMPORARY TABLE layerbatchtb
	select
		LB.id as batchid,itemid,batchname,REF.refname as statusforbatch,
        fnc_getlayerplacementdate(LB.id,p_companyid) as placementdate,
		fnc_layer_getlasttransactiondate(LB.id) as transactiondate ,
		fnc_chicks_purchasecost_layer(LB.id,p_companyid,itemid) as itempurcost,
		fnc_layerchicks_placementqty(LB.id,p_companyid,itemid) as itemplacqty
	FROM layerbatch LB 
    INNER JOIN `reference` REF ON LB.statusid = REF.id

	WHERE find_in_set(LB.id,p_batchid);
   -- select * from layerbatchtb;
   
 DROP TEMPORARY TABLE IF EXISTS layerbatchtb1;
 CREATE TEMPORARY TABLE layerbatchtb1  
 
 
select   
batchid,itemid,batchname,statusforbatch, ((itempurcost*itemplacqty)) as purvalue,
fnc_layerbatchwise_birdliveqty(batchid,itemid,transactiondate,p_companyid) as itemliveqty,
fun_overhed_exp(batchid,725,transactiondate,p_companyid) as overheadexp,
fnc_getgoodsissue(batchid,725,transactiondate) as goodsissuecost,
fnc_consumption_wise_cost_layer(batchid,transactiondate,1149,p_companyid) as feedcost,
fnc_consumption_wise_cost_layer(batchid,transactiondate,1150,p_companyid) as medcost,
fnc_consumption_wise_cost_layer(batchid,transactiondate,1151,p_companyid) as vacccost,
fnc_consumption_wise_cost_layer(batchid,transactiondate,1152,p_companyid) as vitamincost,
fnc_layerbatchwise_salesvalue(batchid,725,transactiondate,p_companyid) as salesvalue,
fun_afterlyaing_mortalitcost_layer(batchid,transactiondate,p_companyid) as mortality,
-- spc_getbatchwise_nonproductive_bird(batchid,p_companyid,transactiondate,femaleitemid) as nonprodbird,
fun_amortizatiobvalue_forlayer(batchid,transactiondate) as amortizationvalue,
TRUNCATE(((DATEDIFF(transactiondate,placementdate)/7)+1),0) as ageinweek,
transactiondate,placementdate

 FROM layerbatchtb  
 group by batchid;
 
 -- select * from layerbatchtb1;
 
 DROP TEMPORARY TABLE IF EXISTS layerbatchtb2;
  CREATE TEMPORARY TABLE layerbatchtb2
  
   SELECT 
   batchid,itemid,batchname,statusforbatch,
   purvalue,
   itemliveqty,overheadexp,goodsissuecost,feedcost,medcost,vacccost,salesvalue,
   vitamincost,mortality,amortizationvalue,ageinweek,'0'as nonprobird,fnc_getphase_byweek(ageinweek) as phaseststus,
   ROUND((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost),3) as totalvalue,
   -- ((itemliveqty)-(nonprodbird)) as productivebird,
   ROUND(((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3) as balancevalue,
   ROUND(((ROUND(((purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3))/((itemliveqty))),3) as birdcost,0 as transfercost,
	transactiondate,placementdate
   
   
   FROM layerbatchtb1;
   select * from layerbatchtb2;
  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partner_ddlonrole`(
	IN p_partnerroleid INT
)
BEGIN

	SELECT 
		PT.id,
        partnercode,
        partyname,
        contactperson
	FROM
		partner PT
	
    LEFT JOIN partnerrole PR ON PR.partnerid = PT.id
        
	WHERE
		PR.partnerroleid = p_partnerroleid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partner_search`(
 IN p_companyid INT
 )
BEGIN
 SELECT
  id,
  partnercode,
  partyname as partnername
  
  FROM partner
  WHERE 
  companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partyaddress_bypartyid`(
	IN p_partyid INT,
    IN p_addresstypeid INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
			PA.`id`,
			PA.`partyid`,
			PA.`address`,
			PA.`addresstypeid`,
			PA.`cityid`,
             CT.`cityname`,
			PA.`stateid`,
             S.statename,
             S.statecode,
             S.isunionterritory,
			PA.`countryid`,
             C.countryname,
			PA.`locationcontactno`,
			PA.`pincode`,
			PA.`gstno`,
			PA.`gsttypeid`,
			PA.`companyid`

	FROM 
		`partyaddress` PA
	LEFT JOIN city CT ON PA.cityid = CT.id
    LEFT JOIN state S ON PA.stateid = S.id
    LEFT JOIN country C ON PA.countryid = C.id
	WHERE
		PA.partyid = p_partyid 
        AND (p_addresstypeid is null OR p_addresstypeid = addresstypeid)
        AND PA.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partyaddress_save`(
	IN p_id INT,
    IN p_partyid INT,
    IN p_addresstypeid INT,
    IN p_address VARCHAR(500),
    IN p_cityid INT,
	IN p_stateid INT,
    IN p_countryid INT,
    IN p_locationcontactno VARCHAR(100),
    IN p_pincode VARCHAR(50),
    IN p_gstno VARCHAR(50),
    IN p_gsttypeid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
     /*IF EXISTS(
            SELECT gstno from partyaddress where LOWER(gstno) = LOWER(p_gstno)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    
    BEGIN*/

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO partyaddress
				(id, 
				partyid,
                addresstypeid,
                address,
                cityid,
                stateid,
                countryid,
                locationcontactno,
                pincode,
                gstno,
                gsttypeid,
                companyid)
			VALUES 
				(p_id,
                p_partyid,
                p_addresstypeid,
                p_address,
                p_cityid,
                p_stateid,
                p_countryid,
                p_locationcontactno,
                p_pincode,
                p_gstno,
                p_gsttypeid,
				p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE partyaddress
			SET partyid = p_partyid,
				addresstypeid = p_addresstypeid,
                address = p_address,
                cityid = p_cityid,
                stateid = p_stateid,
                countryid = p_countryid,
                locationcontactno = p_locationcontactno,
                pincode = p_pincode,
                gstno = p_gstno,
                gsttypeid = p_gsttypeid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';     
    
	END IF;
    
	SELECT LAST_INSERT_ID() INTO out_id;

	
	-- RECORD LOG
	CALL spc_commonlog_save(p_companyid, 'partyaddress', out_id, @action, p_userid);
-- END;

-- END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partyaddress_savejson`(
    IN p_partyaddress json,
    OUT out_id INT
)
BEGIN
    
	 SET @i = 0;
    
	 WHILE @i < JSON_LENGTH(p_partyaddress) DO
    
		 SET @str = NULL;
         SELECT JSON_EXTRACT(p_partyaddress,CONCAT('$[',@i,']')) INTO @str;
        
		 SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
		 SET @out_id = null;
        
		 CALL spc_partyaddress_save(
        
			@p_id,
			(SELECT JSON_EXTRACT(@str, CONCAT('$.partyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.addresstypeid'))),
            IF(json_type(json_extract(@str, CONCAT('$.address'))) = 'NULL', null, JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.address'))))),
			IF(json_type(JSON_EXTRACT(@str, CONCAT('$.cityid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.cityid'))) AS UNSIGNED INTEGER)),
           IF(json_type(JSON_EXTRACT(@str, CONCAT('$.stateid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.stateid'))) AS UNSIGNED INTEGER)),
           IF(json_type(JSON_EXTRACT(@str, CONCAT('$.countryid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.countryid'))) AS UNSIGNED INTEGER)),
            IF(json_type(json_extract(@str, CONCAT('$.locationcontactno'))) = 'NULL', null, JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.locationcontactno'))))),
            IF(json_type(json_extract(@str, CONCAT('$.pincode'))) = 'NULL', null, JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.pincode'))))),
            IF(json_type(json_extract(@str, CONCAT('$.gstno'))) = 'NULL', null, JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.gstno'))))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.gsttypeid'))),
			(SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
         );

		 SELECT @i + 1 INTO @i;
         
         SELECT @out_id INTO out_id;
        
	  END WHILE;
      
      
      
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partycontact_save`(
	IN p_id INT,
    IN p_partyid INT,
    IN p_mobileno VARCHAR(100),
    IN p_faxno VARCHAR(100),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO partycontact
				(id, 
				partyid,
                mobileno,
                faxno,
                companyid)
			VALUES 
				(p_id,
                p_partyid,
                p_mobileno,
                p_faxno,
				p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE partycontact
			SET partyid = p_partyid,
                mobileno = p_mobileno,
                faxno = p_faxno,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';     
    
	END IF;
    
	SELECT LAST_INSERT_ID() INTO out_id;

	
	-- RECORD LOG
	CALL spc_commonlog_save(p_companyid, 'partycontact', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partycontact_savejson`(
    IN p_partycontact json,
    OUT out_id INT
)
BEGIN
    
	 SET @i = 0;
    
	 WHILE @i < JSON_LENGTH(p_partycontact) DO
    
		 SET @str = NULL;
         SELECT JSON_EXTRACT(p_partycontact,CONCAT('$[',@i,']')) INTO @str;
        
		 SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
		 SET @out_id = null;
        
		 CALL spc_partycontact_save(
        
			@p_id,
			(SELECT JSON_EXTRACT(@str, CONCAT('$.partyid'))),
            IF(json_type(json_extract(@str, CONCAT('$.mobileno'))) = 'NULL', null, JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.mobileno'))))),
            IF(json_type(json_extract(@str, CONCAT('$.faxno'))) = 'NULL', null, JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.faxno'))))),
			(SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
         );

		 SELECT @i + 1 INTO @i;
        
	  END WHILE;
      
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partygroup_bypartyrole`(
	IN p_partyroleids VARCHAR(50),
    IN p_companyid INT(11)
)
BEGIN

	SET @partyroleids = p_partyroleids;
    
    SELECT PG.id,
		   PG.partygroupname, 
           (SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, PG.partyroleids)) as partyroles,
           PG.partyroleids, 
           PG.description
           
	FROM partygroup PG
    
    WHERE PG.companyid = p_companyid
    AND FIND_IN_SET(PG.partyroleids,@partyroleids);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partygroup_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM partygroup WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partygroup_save`(
   IN p_id INT(11),
   IN p_partygroupname VARCHAR(150),
   IN p_partyroleids VARCHAR(100),
   IN p_description VARCHAR(150),
   IN p_creditorsledgerid INT(11),
   IN p_debitorsledgerid INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF EXISTS(
            SELECT partygroupname from partygroup where LOWER(partygroupname) = LOWER(p_partygroupname)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
			
			BEGIN
			
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO partygroup 
						(id, partygroupname, partyroleids, description, creditorsledgerid, debitorsledgerid, companyid)
					VALUES 
						(p_id, p_partygroupname, p_partyroleids, p_description, p_creditorsledgerid, p_debitorsledgerid, p_companyid);
			  SET @action = 'INSERT';
			ELSE
			
				UPDATE partygroup
					SET partygroupname = p_partygroupname,
						partyroleids = p_partyroleids,
						description = p_description,
                        creditorsledgerid = p_creditorsledgerid, 
                        debitorsledgerid = p_debitorsledgerid,
						companyid = p_companyid,
					id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
				   SET @action = 'UPDATE';     
						
						
			END IF;
			
			SELECT LAST_INSERT_ID() INTO out_id; 
			
		   -- record log
		   CALL spc_commonlog_save(p_companyid, 'partygroup', out_id, @action, p_userid);

		END;
     
   END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partygroup_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT PG.id,
		   PG.partygroupname, 
           (SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, PG.partyroleids)) as partyroles,
           PG.partyroleids, 
           PG.description,
           PG.creditorsledgerid,
           COA.coaname as creditorsledgername,
           PG.debitorsledgerid,
           COA1.coaname as debitorsledgername
           
	FROM partygroup PG
    LEFT JOIN chartofaccount COA ON COA.id = PG.creditorsledgerid
    LEFT JOIN chartofaccount COA1 ON COA1.id = PG.debitorsledgerid
    WHERE PG.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partygroup_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT PG.id,
		   PG.partygroupname, 
           (SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, PG.partyroleids)) as partyroles,
           PG.partyroleids, 
           PG.description,
           PG.creditorsledgerid,
           COA.coaname as creditorsledgername,
           PG.debitorsledgerid,
           COA1.coaname as debitorsledgername
           
	FROM partygroup PG
    LEFT JOIN chartofaccount COA ON COA.id = PG.creditorsledgerid
    LEFT JOIN chartofaccount COA1 ON COA1.id = PG.debitorsledgerid
    WHERE PG.id = p_id
    AND PG.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partyopeningbalance_bypartyid`(
	IN p_partyid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,
		   subledgerid,
           openingbalance
           
	FROM partyopeningbalance
    
    WHERE subledgerid = p_partyid
    AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partyopeningbalance_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM partyopeningbalance WHERE id = p_id;
    
    SET @jeid = null;
    SELECT id INTO @jeid FROM journalentry WHERE transactionid = p_id AND journalentrysubject = 'Party opening balance JE' AND narration = 'Party opening balance JE';

	DELETE FROM journalentry WHERE id = @jeid;
	DELETE FROM journalentrydetail WHERE journalentryid = @jeid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partyopeningbalance_save`(
   IN p_id INT(11),
   IN p_postingdate DATE,
   IN p_acledgerid INT(11),
   IN p_branchid INT(11),
   IN p_subledgerid INT(11),
   IN p_subledgertypeids VARCHAR(100),
   IN p_openingbalance DECIMAL(15,3),
   IN p_transactiontypeid INT,
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
      SET @p_openingledgerid = null;
     SELECT opening_balance_ledger_id INTO @p_openingledgerid FROM common_setting WHERE  companyid = p_companyid;
     if(@p_openingledgerid IS NOT NULL) THEN
    IF EXISTS(
            SELECT id from partyopeningbalance where acledgerid = p_acledgerid AND subledgerid = p_subledgerid
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    
    BEGIN
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO partyopeningbalance 
				(id, acledgerid, subledgerid, subledgertypeids, 
                openingbalance, pendingbalance, transactiontypeid, postingdate, companyid)
			VALUES 
				(p_id, p_acledgerid, p_subledgerid, p_subledgertypeids, 
                p_openingbalance, p_openingbalance, p_transactiontypeid, p_postingdate,
                p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE partyopeningbalance
				SET acledgerid = p_acledgerid,
					subledgerid = p_subledgerid,
                    subledgertypeids = p_subledgertypeids,
                    openingbalance = p_openingbalance, 
                    transactiontypeid = p_transactiontypeid,
                    postingdate = p_postingdate,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
           
           SET @jeid = null;
           SELECT id INTO @jeid FROM journalentry WHERE transactionid = p_id AND journalentrysubject = 'Party opening balance JE' AND narration = 'Party opening balance JE';
    
		   DELETE FROM journalentry WHERE id = @jeid;
		   DELETE FROM journalentrydetail WHERE journalentryid = @jeid;
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
     END;
    
    END IF;
    
    -- start insert JE for Party opening balance
   
    
			SET @jeid = null;
			CALL spc_journalentry_save(
				NULL,
				NULL,
				1299,
				NULL,
				p_postingdate,
				NULL,
				p_branchid,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				p_subledgerid,
                (SELECT partycode FROM party WHERE id = p_subledgerid),
				NULL,
				NULL,
                729,
				NULL,
				'Party opening balance JE',
				NULL,
				NULL,
				NULL,
				out_id,
				'Party opening balance JE',
				p_companyid,
                p_userid,
                @jeid
			);
            
            IF(p_transactiontypeid = 1321) THEN -- CR
            -- CRedit to party opening GL
				SET @jedetailid = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					p_acledgerid,
					0,
					NULL,
					NULL,
					NULL,
                    NULL,
					NULL,
					NULL,
					NULL,
					0,
					p_openingbalance,
					NULL,
					p_subledgerid,
					NULL,
					NULL,
					NULL,
					'Party opening JE',
					p_companyid,
					p_userid,
					@jedetailid
				 );
				
				-- Debit to selected ledgerid
				
				 SET @jedetailid1 = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@p_openingledgerid,
					0,
					@batchid,
					NULL,
                    NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					p_openingbalance,
					0,
					NULL,
					p_subledgerid,
					NULL,
					NULL,
					NULL,
					'Party opening JE',
					p_companyid,
					p_userid,
					@jedetailid1
				 );
				ELSE
					-- credit to party opening ledger
					SET @jedetailid = null;
					 CALL spc_journalentrydetail_save( 
						NULL,
						@jeid,
						@p_openingledgerid,
						0,
						NULL,
                        NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						0,
						p_openingbalance,
						NULL,
						p_subledgerid,
						NULL,
						NULL,
						NULL,
						'Party opening JE',
						p_companyid,
						p_userid,
						@jedetailid
					 );
					
					-- Debit to party ledgerid
					
					 SET @jedetailid1 = null;
					 CALL spc_journalentrydetail_save( 
						NULL,
						@jeid,
						p_acledgerid,
						0,
						@batchid,
						NULL,
                        NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						p_openingbalance,
						0,
						NULL,
						p_subledgerid,
						NULL,
						NULL,
						NULL,
						'Party opening JE',
						p_companyid,
						p_userid,
						@jedetailid1
					 );
            
            END IF;
            -- credit to selected ledgerid
            
    ELSE
    select -2 INTO out_id;
    END IF;
    -- END JE
    
   -- record log
  -- CALL spc_commonlog_save(p_companyid, 'partyopeningbalance', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partyopeningbalance_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT POB.id,
		   POB.acledgerid,
           POB.subledgerid,
           POB.subledgertypeids,
           ABS(POB.openingbalance) as openingbalance,
		 --  CASE WHEN POB.openingbalance >= 0 THEN 'Dr' ELSE 'Cr' END as transactiontype,
		   POB.transactiontypeid,
           REF.refname as transactiontype,
           P.partyname,
           P.partyroleids,
		   (SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, P.partyroleids)) as partyroles,
           DATE_FORMAT(POB.postingdate,'%d/%m/%Y') as postingdate
           
	FROM partyopeningbalance POB
    LEFT JOIN party P ON P.id = POB.subledgerid
    LEFT JOIN `reference` REF ON REF.id = POB.transactiontypeid
    
    
    WHERE POB.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partyopeningbalance_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT POB.id,
		   POB.acledgerid,
           POB.subledgerid,
           COA.glcode as acglcode, 
           COA.coaname as acledgername,
           POB.subledgertypeids,
           ABS(POB.openingbalance) as openingbalance,
		 --  CASE WHEN POB.openingbalance >= 0 THEN 'Dr' ELSE 'Cr' END as transactiontype,
		   POB.transactiontypeid,
		   P.partyname,
           P.partyroleids,
		   (SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, P.partyroleids)) as partyroles,
           DATE_FORMAT(POB.postingdate,'%d/%m/%Y') as postingdate
           
	FROM partyopeningbalance POB
    LEFT JOIN party P ON P.id = POB.subledgerid
    LEFT JOIN chartofaccount COA ON COA.id = POB.subledgerid
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND POB.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_partywisepurchaseorderstatus_report`(
IN p_fromdate date,
IN p_todate date,
IN p_customerid  VARCHAR(16383),
IN p_companyid INT(11)

)
BEGIN
SET @@sql_mode = '';
 SELECT *, (amount + sgstamount + cgstamount + igstamount + discountamount )as total

 FROM(

SELECT 
		
        P.partycode,
		P.partyname,
        I.itemname,
        I.itemunitid,
        POD.unitprice,
		POD.itemdiscount,
		IFNULL(POD.sgstamount,0) as sgstamount,
        IFNULL(POD.cgstamount,0) as cgstamount,
        IFNULL(POD.igstamount,0) as igstamount,
        POD.quantity,
        PO.purchaseorderno,
        PO.statusid,
        DATE_FORMAT( PO.podate,'%d/%m/%Y') as podate,
        IFNULL(((POD.quantity*POD.unitprice)*POD.itemdiscount/100),0) as discountamount,
        (POD.sgstamount+POD.cgstamount+POD.utgstamount) As gstamount,
	   (POD.quantity*POD.unitprice) As amount,
        P.id,
        REF.refname as itemunitname,
		REF1.refname as statusname
       
	   
     FROM purchaseorder PO
	 LEFT JOIN party P  ON PO.vendorid =  P.id
	 LEFT JOIN purchaseorderdetail POD ON PO.id = POD.purchaseorderid
     LEFT JOIN item I ON POD.itemid = I.id
	 LEFT JOIN `reference` REF ON I.itemunitid = REF.id
     LEFT JOIN `reference` REF1 ON PO.statusid = REF1.id
   
  
	 
	
  
    WHERE  PO.companyid = p_companyid AND
		   PO.podate BETWEEN p_fromdate AND p_todate AND
		   FIND_IN_SET( P.id, p_customerid)
           Group By purchaseorderno,partyname) as temp;
         -- CDC.consumptiontypeid = 861 AND
     
   

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_party_bylocation`(
IN p_locationid varchar(200),
IN p_companyid INT(11)

)
BEGIN
SET @@sql_mode = '';
SELECT  
		SB.scheduleid,
        HS.locationid,
        G.supplierid, 
	    P.partyname as partyname,
        P.id as partyid
        
FROM setterbatch SB 
LEFT JOIN hatcheryschedule HS  ON HS.id = SB.scheduleid  
LEFT JOIN grpo G ON G.id  = SB.sourcedeliveryid and  SB.sourceid=262
LEFT JOIN party P ON P.id= G.supplierid

 WHERE SB.companyid = p_companyid AND
FIND_IN_SET( HS.locationid, p_locationid) AND
SB.sourceid = 262  group by P.id;  
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_party_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DELETE FROM party WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'party', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_party_forpurchaseinvoice`(
 IN p_companyid INT(11)
)
BEGIN
   SELECT vendorid , 
		P.partyname,
        P.phoneno
   FROM 
		purchaseinvoice PI
        
  Left JOIN party P ON PI.vendorid = P.id

	WHERE
	 PI.companyid = p_companyid
     group by PI.vendorid;
	END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_party_moduleandrolewise`(
	IN p_roleid INT(11),
    IN p_moduleid VARCHAR(200),
    IN p_companyid INT(11)
)
BEGIN
	SELECT
			P.id,
			P.partyname,
            P.partyroleids,
            (SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, P.partyroleids)) as partyroles,
			P.emailid,
            P.contactperson,
            supplierledgerid,
            customerledgerid,
            P.phoneno,
			COA1.glcode as supplierglcode,
            COA1.coaname as supplierledgername,
            COA1.iscostcenterapplicable,
            P.customerledgerid,
            COA2.glcode as customerglcode,
            COA2.coaname as customerledgername,
            P.companyid,
            COA2.iscostcenterapplicable,
            P.moduleid
			
	FROM party P
    LEFT JOIN chartofaccount COA1 ON COA1.id = P.supplierledgerid
    LEFT JOIN chartofaccount COA2 ON COA2.id = P.customerledgerid
    
    WHERE P.companyid = p_companyid
     AND FIND_IN_SET(p_moduleid, P.moduleid) 
     AND FIND_IN_SET(p_roleid, P.partyroleids);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_party_rolewise`(
	IN p_roleid VARCHAR(1000),
    IN p_companyid INT(11)
)
BEGIN
	IF(p_roleid = 31) THEN
		SELECT
				P.id,
				P.partyname,
				P.partyroleids,
				(SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, P.partyroleids)) as partyroles,
				P.emailid,
				P.contactperson,
				supplierledgerid,
				customerledgerid,
				P.phoneno,
				P.partycode,
				PG.partygroupname,
				COA1.glcode as supplierglcode,
				COA1.coaname as supplierledgername,
				COA1.iscostcenterapplicable,
				P.customerledgerid,
				COA2.glcode as customerglcode,
				COA2.coaname as customerledgername,
				P.companyid,
				COA2.iscostcenterapplicable,
				P.moduleid,
                P.tdsid,
                T.rate as tds
				
		FROM party P
		LEFT JOIN partygroup PG ON PG.id = P.partygroupid
		LEFT JOIN chartofaccount COA1 ON COA1.id = P.supplierledgerid
		LEFT JOIN chartofaccount COA2 ON COA2.id = P.customerledgerid
		INNER JOIN account_tds T ON T.id = P.tdsid
		
		WHERE P.companyid = p_companyid
		AND FIND_IN_SET(P.partyroleids,p_roleid);
	ELSE
		SELECT
				P.id,
				P.partyname,
				P.partyroleids,
				(SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, P.partyroleids)) as partyroles,
				P.emailid,
				P.contactperson,
				supplierledgerid,
				customerledgerid,
				P.phoneno,
				P.partycode,
				PG.partygroupname,
				COA1.glcode as supplierglcode,
				COA1.coaname as supplierledgername,
				COA1.iscostcenterapplicable,
				P.customerledgerid,
				COA2.glcode as customerglcode,
				COA2.coaname as customerledgername,
				P.companyid,
				COA2.iscostcenterapplicable,
				P.moduleid
				
		FROM party P
		LEFT JOIN partygroup PG ON PG.id = P.partygroupid
		LEFT JOIN chartofaccount COA1 ON COA1.id = P.supplierledgerid
		LEFT JOIN chartofaccount COA2 ON COA2.id = P.customerledgerid
		
		WHERE P.companyid = p_companyid
		AND FIND_IN_SET(P.partyroleids,p_roleid);
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_party_save`(
	IN p_id INT,
    IN p_partyname VARCHAR(200),
    IN p_partyroleids INT(11),
    IN p_phoneno VARCHAR(50),
    IN p_contactperson VARCHAR(100),
    IN p_cstno VARCHAR(100),
    IN p_gstin VARCHAR(100),
    IN p_panno VARCHAR(100),
    IN p_postalcode VARCHAR(50),
    IN p_emailid VARCHAR(100),
    IN p_shippingcontactperson VARCHAR(100),
    IN p_shippingcontactno VARCHAR(50),
    IN p_creditlimit DECIMAL(9,3),
    IN p_creditperiod INT,
    IN p_servicetaxno VARCHAR(50),
    IN p_partygroupid INT(11),
   -- IN p_supplierledgerid INT(11),
   -- IN p_customerledgerid INT(11),
    IN p_partycode VARCHAR(200),
    IN p_tdsid INT,
    IN p_moduleid VARCHAR(200),
	IN p_bankname VARCHAR(200),
    IN p_accounttype INT(11),
    IN p_bankbranch VARCHAR(200),
    IN p_ifsccode VARCHAR(45),
    IN p_accountno VARCHAR(45),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

-- select p_companyid;

	SET @action = null;
    SET @ledger_group_id = null;
 SET @category_id = null;
if(p_partyroleids = 32) then
    select customer_ledger_group_id
    INTo @ledger_group_id 
    FROM common_setting WHERE companyid = p_companyid;
    SET @category_id = 1;
else
  select supplier_ledger_group_id
    INTo @ledger_group_id 
    FROM common_setting WHERE companyid = p_companyid;
    SET @category_id = 2;
END IF;
if(@ledger_group_id) THEN
   
  IF EXISTS(
            SELECT panno from party where LOWER(panno) = LOWER(p_panno)  AND panno != '-'
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				 SELECT -1 INTO out_id;
	
			END;
            
	ELSEIF EXISTS(
			SELECT partyname from party where LOWER(partyname) = LOWER(p_partyname)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
		  ) THEN BEGIN
        
				SELECT -2 INTO out_id;
	
			END;
    ELSE 
    
    BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
    SET @out_seriesid = null;
	IF(p_partyroleids = 31) then
     call `spc_financialyeardocseries_newseries`('BPC',p_companyid,@out_seriesid); 
	ELSEIF(p_partyroleids = 32) then
     call `spc_financialyeardocseries_newseries`('BPS',p_companyid,@out_seriesid); 
	ELSEIF(p_partyroleids = 33) then
	call `spc_financialyeardocseries_newseries`('BPS',p_companyid,@out_seriesid);
    ELSEIF(p_partyroleids = 34) then
	 call `spc_financialyeardocseries_newseries`('FR',p_companyid,@out_seriesid);
	END IF;
		INSERT INTO party 
				(id, 
                partyname,
                partyroleids,
                phoneno,
                contactperson,
                cstno,
                gstin,
                panno,
                postalcode,
                emailid,
                shippingcontactperson,
                shippingcontactno,
                creditlimit,
                creditperiod,
                servicetaxno,
                partygroupid,
                -- supplierledgerid,
                -- customerledgerid,
                partycode,
                tdsid,
                moduleid,
			    bankname,
                accounttype,
                bankbranch,
                ifsccode,
                accountno,
                companyid)	
			VALUES 
				(p_id,
                p_partyname,
                p_partyroleids,
                p_phoneno,
                p_contactperson,
                p_cstno,
                p_gstin,
                p_panno,
                p_postalcode,
				p_emailid,
				p_shippingcontactperson,
				p_shippingcontactno,
				p_creditlimit,
				p_creditperiod,
				p_servicetaxno,
				p_partygroupid,
                -- p_supplierledgerid,
                -- p_customerledgerid,
                p_partycode,
                p_tdsid,
                p_moduleid,
                p_bankname,
                p_accounttype,
                p_bankbranch,
                p_ifsccode,
                p_accountno,
				p_companyid);
                
SET @action = 'INSERT';
  SELECT LAST_INSERT_ID() INTO out_id;

SET @chartofaccountid = null;
call `spc_chartofaccount_save`(
	null,
    @category_id,
     CONCAT(p_partyname,'-',p_companyid),
    (select fnc_get_glcode(@ledger_group_id,p_companyid)),
    1003,
    0,
    @ledger_group_id,
    0,
    0,
    0,
    0,
    NULL,
    1,
    0,
   p_companyid,
   p_userid,
   @chartofaccountid
);
   
-- update customr ledger in party table
if(p_partyroleids = 32) then
UPDATE party 
SET 
    customerledgerid = @chartofaccountid
WHERE
    id =out_id;
else
UPDATE party 
SET 
    supplierledgerid = @chartofaccountid
WHERE
    id = out_id;

END IF;

   	
	ELSE
    
		UPDATE party
			SET partyname = p_partyname,
                partyroleids = p_partyroleids,
                phoneno = p_phoneno,
                contactperson = p_contactperson,
                cstno = p_cstno,
                gstin = p_gstin,
                panno = p_panno,
                postalcode = p_postalcode,
                emailid = p_emailid,
                shippingcontactperson = p_shippingcontactperson,
                shippingcontactno = p_shippingcontactno,
                creditlimit = p_creditlimit,
                creditperiod = p_creditperiod,
                servicetaxno = p_servicetaxno,
                partygroupid = p_partygroupid,
              --  supplierledgerid = p_supplierledgerid,
				-- customerledgerid = p_customerledgerid,
                partycode = p_partycode,
                tdsid = p_tdsid,
                moduleid = p_moduleid,
				bankname = p_bankname,
                accounttype = p_accounttype,
                bankbranch = p_bankbranch,
                ifsccode = p_ifsccode,
                accountno = p_accountno,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';     
        
        DELETE FROM partyaddress WHERE partyid = p_id;
        SELECT p_id INTO out_id;
    
	END IF;


	
	-- RECORD LOG
	CALL spc_commonlog_save(p_companyid, 'party', out_id, @action, p_userid);

END;


END IF;
ELSE 
SELECT -3 INTO out_id;
END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_party_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
			P.id,
			P.partyname,
            P.partyroleids,
            (SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, P.partyroleids)) as partyroles,
			P.emailid,
            P.contactperson,
            supplierledgerid,
            customerledgerid,
            P.phoneno,
			COA1.glcode as supplierglcode,
            COA1.coaname as supplierledgername,
            P.customerledgerid,
            COA2.glcode as customerglcode,
            COA2.coaname as customerledgername,
            P.companyid,
            P.partygroupid,
            PG.partygroupname,
            P.partycode,
            P.moduleid,
            P.bankname,
			P.accounttype,
			P.bankbranch,
			P.ifsccode,
			P.accountno
			
	FROM party P
    LEFT JOIN partygroup PG ON PG.id = P.partygroupid
    LEFT JOIN chartofaccount COA1 ON COA1.id = P.supplierledgerid
    LEFT JOIN chartofaccount COA2 ON COA2.id = P.customerledgerid
    
	WHERE P.companyid = p_companyid;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_party_select`(
	IN p_id INT
)
BEGIN
    
	SELECT
			P.id,
            P.partyname,
            P.partyroleids,
			(SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(P.id, P.partyroleids)) as partyroles,
            P.phoneno,
            P.contactperson,
            P.cstno,
            P.gstin,
            P.panno,
            P.postalcode,
            P.emailid,
            P.shippingcontactperson,
            P.shippingcontactno,
            P.creditlimit,
            P.creditperiod,
            P.servicetaxno,
            P.supplierledgerid,
            COA1.glcode as supplierglcode,
            COA1.coaname as supplierledgername,
            P.customerledgerid,
            COA2.glcode as customerglcode,
            COA2.coaname as customerledgername,
            P.companyid,
            P.partygroupid,
            PG.partygroupname,
			P.partycode,
            P.moduleid,
             P.bankname,
			P.accounttype,
			P.bankbranch,
			P.ifsccode,
			P.accountno,
            P.tdsid,
            TDS.section
			
	FROM party P
    LEFT JOIN partygroup PG ON PG.id = P.partygroupid
    LEFT JOIN chartofaccount COA1 ON COA1.id = P.supplierledgerid
    LEFT JOIN chartofaccount COA2 ON COA2.id = P.customerledgerid
    LEFT JOIN account_tds TDS ON TDS.id = P.tdsid
  	WHERE P.id = p_id;
    
    
    SELECT
			id,
            addresstypeid,
            address,
            cityid,
            stateid,
            countryid,
            locationcontactno,
            pincode,
            gstno,
            gsttypeid
	
    FROM partyaddress
    WHERE partyid = p_id;
    
    SELECT
			id,
            mobileno,
            faxno
	
    FROM partycontact
    WHERE partyid = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_permission_ddl`()
BEGIN

	SELECT id, 
			permission 
		FROM `permission`;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_permission_search`()
BEGIN

	SELECT
		id,
        permission,
        description
	FROM
		permission;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_phase_delete`(
	IN p_id INT
   
)
BEGIN
	DELETE FROM breederphase WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_phase_save`(
	IN p_id INT,
    IN p_phasesequence VARCHAR(100),
    IN p_phasename VARCHAR(200),
    IN p_fromweek INT,
    IN p_toweek INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederphase 
				(phasesequence, phasename, fromweek, toweek, companyid)
			VALUES 
				(p_phasesequence, p_phasename, p_fromweek, p_toweek, p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE breederphase
			SET 
				phasesequence = p_phasesequence, 
                phasename = p_phasename, 
                fromweek = p_fromweek,
                toweek = p_toweek,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';   
    
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breederphase', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_phase_search`(
  IN p_companyid INT 
)
BEGIN
	SELECT id ,
		   phasesequence,
           phasename,
           fromweek,
           toweek
            
    FROM  breederphase 
    WHERE 
          companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_phase_select`(
  IN p_id INT 
)
BEGIN
	SELECT id ,
		   phasesequence,
           phasename,
           fromweek,
           toweek
            
    FROM  breederphase 
    WHERE 
          id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_placementschedulelist_search`(
	IN p_location INT,
	IN p_from_date date,
	IN p_to_date date
)
BEGIN

	SELECT BP.id,
		DATE_FORMAT(schedulefordate,'%d/%m/%Y') as scheduledate,
		BP.batchid,
		BP.statusid,
		BP.createdby,
        REF.refname AS statusname,
        BPD.breedershedid,
		BS.locationid,
        BS.shedname,
        BS.capacity,
        PR.purchaserequestno,
        L.locationcode,
        L.locationname,
		BP.companyid
	FROM 
		breederplacementschedule BP
        LEFT JOIN `reference` REF ON BP.statusid = REF.id
		LEFT JOIN breederplacementscheduledetail BPD ON BP.id = BPD.placementscheduleid
		INNER JOIN breedershed BS ON BPD.breedershedid = BS.id
		 INNER JOIN location L ON BS.locationid = L.id
         LEFT JOIN purchaserequest PR ON PR.id = BP.requestid
	WHERE
		BS.locationid = p_location
		AND (BP.schedulefordate BETWEEN p_from_date AND p_to_date)
        
    ORDER BY BP.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_podetails_bypoid`(
	IN p_id VARCHAR(200),
    IN p_isservice TINYINT(4)
)
BEGIN

	SET @@sql_mode = '';
	
    IF(p_isservice = 1) THEN
		SELECT 
			SPO.partnerid,
			PT.partyname as suppliername,
			SPO.id as id,
			DATE_FORMAT(SPO.servicedate,'%d/%m/%Y') as purchaseorderdate,
			SPO.deliveryfromaddressid,
			SPO.deliverytowarehouseid,
			WH1.warehousename,
			SPO.deliveryfromstatecode,
			SPO.deliverytostatecode,
			PA.address as delfromfulladdress,
			WH1.address as warehousefulladdress,
			ST.isunionterritory as warehouseisunionterritory,
			ST1.isunionterritory as deliveryfromisunionterritory,
			SPO.servicepono as purchaseorderno

		FROM 
			servicepo SPO
		
		LEFT JOIN party PT ON SPO.partnerid  = PT.id
		LEFT JOIN partyaddress PA ON SPO.deliveryfromaddressid = PA.id
		LEFT JOIN warehouse WH1 ON SPO.deliverytowarehouseid = WH1.id
		LEFT JOIN `state` ST ON WH1.stateid = ST.id
		LEFT JOIN `state` ST1 ON PA.stateid = ST1.id
		
		WHERE
			-- GR.statusid = p_statusid
			FIND_IN_SET(SPO.id, p_id);
    ELSE
    
			SELECT 
			group_concat(PO.id) as purchaseorderid,
			PO.vendorid as supplierid,
			PT.partyname as suppliername,
			DATE_FORMAT(podate,'%d/%m/%Y') as purchaseorderdate,
			W.warehousename,
			PO.purchaserequestid,
			PO.transactiontypeid,
			PO.deliveryfromaddressid,
			PO.deliverytowarehouseid,
			PO.deliveryfromstatecode,
			PO.deliverytostatecode,
			PA.address as delfromfulladdress,
			WH1.address as warehousefulladdress,
			ST.isunionterritory as warehouseisunionterritory,
			ST1.isunionterritory as deliveryfromisunionterritory,
			group_concat(PO.purchaseorderno) as pono,
            PO.discount,
            PO.transactiontypeid,
            REF.refname,
            PT.tdsid,
			T.rate as tds

		FROM 
			purchaseorder PO
		
		LEFT JOIN party PT ON PO.vendorid  = PT.id
        INNER JOIN account_tds T ON T.id = PT.tdsid
		LEFT JOIN `reference` REF ON REF.id = PO.transactiontypeid
		LEFT JOIN warehouse W ON W.id = PO.deliverytowarehouseid
		LEFT JOIN partyaddress PA ON PO.deliveryfromaddressid = PA.id
		LEFT JOIN warehouse WH1 ON PO.deliverytowarehouseid = WH1.id
		LEFT JOIN `state` ST ON WH1.stateid = ST.id
		LEFT JOIN `state` ST1 ON PA.stateid = ST1.id
		
		WHERE
			-- GR.statusid = p_statusid
			FIND_IN_SET(PO.id, p_id);
            
		SELECT
        group_concat(POD.id) as purchaseorderdetailid,
		group_concat(POD.purchaseorderid) as purchaseorderid,
        SUM(POD.quantity) as quantity,
		POD.itemid,
        IG.groupname,
		I.itemname,
        POD.unitprice,
        POD.itemdiscount,
        POD.taxpercent,
        POD.taxid,
        ((SUM(POD.quantity) * SUM(POD.freequantitypercent)) / 100) as freequantity,
		POD.itemunit as itemunitid,
		REF1.refname as itemunitname,
        POD.quantity as requiredquantity,
        POD.purchaseorderid,
        POD.pendinggrpoquantity,
        POD.id as purchaseorderdetailid,
        POD.taxpercent,
	    POD.cgstpercent,
        POD.cgstamount,
        POD.sgstpercent,
        POD.sgstamount,
        POD.igstpercent,
		POD.igstamount,
        POD.utgstpercent,
        POD.utgstamount,
        POD.sgstid,
	    POD.cgstid,
	    POD.igstid,
	    POD.utgstid,
        REF2.refname as taxtype,
        T.combinedtaxes,
		 T.taxname,
		 fnc_taxes_byids(T.combinedtaxes) as taxesname,
		 fnc_taxpercents_byids(T.combinedtaxes) as taxpercents,
		 fnc_taxtypes_byids(T.combinedtaxes) as taxtypes
         
	FROM 
		purchaseorderdetail POD
        
		 LEFT JOIN `reference` REF1 ON POD.itemunit = REF1.id
         LEFT JOIN purchaseorder PO ON PO.id = POD.purchaseorderid
         LEFT JOIN item I ON I.id = POD.itemid
         LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
		 LEFT JOIN tax T ON T.id = POD.taxid
		 LEFT JOIN `reference` REF2 ON T.taxtypeid = REF2.id
        
	WHERE
		FIND_IN_SET(POD.purchaseorderid, p_id)
        GROUP BY POD.itemid;
    
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_poid_byacknowledgementid`(
IN p_ackid INT(11),
IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';
SELECT 
		ASD.purchaseorderid,
        PO.purchaseorderno,
        DATE_FORMAT(PO.podate,'%d/%m/%Y') as podate,
		P.partyname,
        PO.vendorid,
        PO.statusid,
        PO.vendorid,
        PO.discount,
        PO.deliverytowarehouseid as towarehouseid,
        W.warehousename,
        QCD.resultid
         
FROM feedmill_acknowledgementslipdetail ASD
INNER JOIN purchaseorder PO ON PO.id = ASD.purchaseorderid
INNER JOIN purchaseorderdetail POD ON POD.purchaseorderid = PO.id
LEFT JOIN warehouse W ON W.id = PO.deliverytowarehouseid
LEFT JOIN party P ON P.id = PO.vendorid
LEFT JOIN feedmill_qualitycheck QC ON QC.ackid = ASD.ackid
LEFT JOIN feedmill_qualitycheckdetail QCD ON QCD.qualitycheckid = QC.id


 WHERE ASD.ackid = p_ackid
	AND POD.pendinggrpoquantity > 0
    AND ASD.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_poitem_bypoid`(
	IN p_purchaseorderid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT POD.itemid,
		   POD.unitprice,
           POD.itemunit,
           I.itemname,
           I.itemcode,
           REF.refname as itemunit,
           POD.quantity
           
	FROM purchaseorderdetail POD
    LEFT JOIN item I ON I.id = POD.itemid
    LEFT JOIN `reference` REF ON REF.id = POD.itemunit
    
    WHERE POD.purchaseorderid = p_purchaseorderid
    AND POD.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_postdatedcheques_search`(
	IN p_bankid INT,
	IN p_bankledgerid INT,
    IN p_companyid INT
)
BEGIN
	SET @@sql_mode = ' ';
    
    SET @banktransferbalance = 0;
    SET @chequebalance = 0;
    SET @notreflectedbal = 0;
    SET @balaspercombook = 0;
    
    SELECT (IFNULL(SUM(JED.dramount),0) - IFNULL(SUM(JED.cramount),0)) INTO @banktransferbalance
	FROM journalentry JE
    LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    WHERE JED.acledgerid = p_bankledgerid
    AND JE.voucherdate < CURDATE() 
    AND JE.vouchermodeid = 1233
    AND JE.companyid = p_companyid;
    
    SELECT (IFNULL(SUM(JED.dramount),0) - IFNULL(SUM(JED.cramount),0)) INTO @chequebalance
	FROM journalentry JE
    LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    WHERE JED.acledgerid = p_bankledgerid
    AND JE.chequeclearancedate < CURDATE() 
    AND JE.vouchermodeid = 1231
    AND JE.companyid = p_companyid;
    
    SELECT (IFNULL(SUM(JED.dramount),0) - IFNULL(SUM(JED.cramount),0)) INTO @notreflectedbal
	FROM journalentry JE
    LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    WHERE JED.acledgerid = p_bankledgerid
    AND JE.vouchermodeid = 1231
    AND JE.chequeclearancedate >= CURDATE() OR JE.chequeclearancedate IS NULL
    AND JE.companyid = p_companyid;
    
    SELECT FORMAT((@banktransferbalance - @chequebalance),3) as bankbalance,
		   FORMAT(@notreflectedbal,3) as notreflectedbal,
		   FORMAT(((@banktransferbalance - @chequebalance) + @notreflectedbal),3) as balaspercombook;
    
    SELECT DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate,
		   JE.id as jeid,
           JE.jeno,
           JE.vouchertypeid,
           REF.refname as vouchertype,
           IFNULL(SUM(JED.dramount),0) as dramount,
           IFNULL(SUM(JED.cramount),0) as cramount,
           JE.chequeno,
		   DATE_FORMAT(JE.chequedate,'%d/%m/%Y') as chequedate,
           JE.branchid,
           JE.bankid,
           JE.partyid,
           P.partyname
           
	FROM journalentry JE
    
    INNER JOIN `reference` REF ON JE.vouchertypeid = REF.id
    INNER JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    INNER JOIN chartofaccount COA ON JED.acledgerid = COA.id
    INNER JOIN party P ON P.id = JE.partyid
    INNER JOIN bank B ON B.id = JE.bankid
    
    WHERE JE.bankid = p_bankid
    AND JE.vouchermodeid = 1231
    AND JE.companyid = p_companyid
    AND JE.chequeclearancedate IS NULL;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_producationplanning`(
	IN p_fromdate DATE,
	IN p_todate DATE,
	IN p_locationid INT(11),
	IN p_moduleids VARCHAR(500),
	IN p_companyid INT(11)
)
BEGIN
	SET @placementdate = null;
	SET @firstweek = null;
	SET @lastweek = null;
	SET @weeks = null;
	SET @numbers = null;
	SET @finalnumbers = null;
	SET @Fromdate = null;
	SET @lastdateofweek = null;
	SET @itemid = null;
	SET @towarehousebinid = null; 
	SET @breedershedid = null;
	SET @placementitemid = null;
    SET @warehouseid = null;
	SET @warehousebinid = null;
    SET @maleitemid = null;
    SET @femaleitemid = null;
	SET @malefemaleitemids = '@maleitemid ,@femaleitemid';

   
SELECT FS.warehouseid, WB.id INTO @warehouseid ,@warehousebinid 
	FROM feedmill_feedmillsetting  FS 
    LEFT JOIN warehousebin WB ON WB.warehouseid = FS.warehouseid AND WB.isdefault = 1
	where FS.companyid = p_companyid;
   
	
	-- CBF Module

	IF(FIND_IN_SET('723', p_moduleids) !=0) THEN
    
		SELECT shedname,shedid,batch_id,batch_place_date,age,batchname,itemname,feedconsumed,itemid,lastdate,instock,(feedconsumed-instock)as required,breed_id, @warehouseid as warehouseid,@warehousebinid as warehousebinid
        FROM(
		SELECT shed_name as shedname,shedid,warehousebinid,batch_id,batch_place_date,age,batchname,I.itemname as itemname,CSCD.feedconsumption as feedconsumed,CSCD.itemid as itemid,lastdate,fd,ld,fun_openingbalance(lastdate,@warehousebinid,itemid) as instock,breed_id,warehouseid
		FROM(
		SELECT SD.shed_name,SD.id as shedid,SD.warehousebinid as warehousebinid,CBP.batch_id, CBD.batch_place_date,CBD.batch_number as batchname,
        DATE_ADD(p_fromdate, INTERVAL 1 DAY) as lastdate,
        DATEDIFF(p_fromdate,placement_date) as fd, 
        DATEDIFF(p_todate,placement_date) as ld,
        CBD.breed_id as breed_id,WB.warehouseid as warehouseid
		FROM warehouse W
			LEFT JOIN warehousebin WB ON WB.warehouseid = W.id 
			LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SD ON  WB.id = SD.warehousebinid
			LEFT JOIN cbf_chick_placement CBP ON  CBP.shed_id = SD.id 
			LEFT JOIN cbf_batch_details CBD ON  CBD.id = CBP.batch_id 
		WHERE 
		 W.locationid = p_locationid AND
		 CBD.id IS NOT NULL
		 ) as temp 
		 LEFT JOIN cbfstandardchart CSC ON CSC.companyid = p_companyid AND FIND_IN_SET(CSC.locationids,p_locationid)  AND CSC.breednameid = breed_id
		 LEFT JOIN cbfstandardchartdetail CSCD ON CSCD.cbfstandardchartid = CSC.id
		 LEFT JOIN item I ON I.id = CSCD.itemid) as temptwo;
	
    END IF;
    
    -- Breeder Module
    IF(FIND_IN_SET('721', p_moduleids) !=0) THEN
		SELECT breederbatchid,breedershedid,bpcompanyid,shedname,@warehouseid as warehouseid,@warehousebinid as warehousebinid,batchname,moduleids,sw,ew,feedconsumed,itemid,
        itemname,lastdate,finallastdate,instock,(feedconsumed-instock)as required,maleitemid,femaleitemid,malefemaleitemid,liveqty
        FROM(
		SELECT breederbatchid,breedershedid,bpcompanyid as bpcompanyid,shedname,warehousebinid,warehouseid,
		batchname,moduleids,sw, ew, feedconsumed,itemid,I.itemname as itemname,
		weeknumber as stweekno,placementdate,DATE_SUB(DATE_ADD(placementdate, INTERVAL (weeknumber*7) DAY), INTERVAL 1 DAY) as lastdate,
		DATE_SUB(DATE_ADD(placementdate, INTERVAL ((weeknumber*7)+6) DAY), INTERVAL 1 DAY)as finallastdate,
		fun_openingbalance(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((weeknumber*7)+6) DAY), INTERVAL 1 DAY),@warehousebinid,itemid) as instock,
         maleitemid,femaleitemid,malefemaleitemid,
         fun_calculate_breederdailyliveqty(placementdate,DATE_SUB(DATE_ADD(placementdate, INTERVAL ((weeknumber*7)+6) DAY), INTERVAL 1 DAY),breederbatchid,itemid,breedershedid) as liveqty

		FROM 
			(select breederbatchid,BS.id as breedershedid,BP.companyid as bpcompanyid,BS.shedname,@warehouseid as warehouseid,@warehousebinid as warehousebinid,BB.batchname,L.moduleids,placementdate,
            BB.maleitemid as maleitemid,
            BB.femaleitemid as femaleitemid, 
            CONCAT_WS( ",", maleitemid, femaleitemid ) AS malefemaleitemid,
			TRUNCATE((((DATEDIFF(p_fromdate,placementdate))+1)/7),0) as sw,
			TRUNCATE((((DATEDIFF(p_todate,placementdate))+1)/7),0)  as ew FROM breederbatchplacement BP
			 left JOIN breederbatchplacementdetail BPD ON BPD.breederbatchplacementid = BP.id 
			left JOIN breederbatch BB ON BB.id = BP.breederbatchid 
			 left JOIN breedershed BS ON BS.id = BPD.breedershedid 
			left JOIN location L ON L.id = BP.locationid AND FIND_IN_SET(L.moduleids,p_moduleids)
           -- left JOIN breedershed BS ON BS.locationid = L.id 
			WHERE BP.locationid = p_locationid limit 1


			)as temp
		LEFT JOIN breederfeedstandard BFS ON BFS.companyid = bpcompanyid  AND FIND_IN_SET(BFS.breeditemid,malefemaleitemid)
		LEFT JOIN breederfeedstandarddetail BFD ON BFD.breederfeedstandardid = BFS.id
		LEFT JOIN item I ON I.id = BFD.itemid
        
		WHERE  
			weeknumber BETWEEN sw AND ew) as temptwo;
	END IF;

	-- Hatchery MOdule 
   
	IF(FIND_IN_SET('725', p_moduleids) !=0) THEN
    
     SELECT layerbatchid,layershedid,bpcompanyid,shedname,@warehouseid as warehouseid,@warehousebinid as warehousebinid,batchname,moduleids,sw,ew,feedconsumed,itemid, litemid,
        itemname,stweekno,placementdate,lastdate,finallastdate,instock,(feedconsumed-instock)as required
        FROM(
		SELECT layerbatchid,layershedid,Lcid as bpcompanyid,shedname,warehousebinid,batchname,moduleids,sw, ew, feedconsumed,itemid,I.itemname as itemname,weeknumber as stweekno,litemid,
		placementdate,DATE_SUB(DATE_ADD(placementdate, INTERVAL (weeknumber*7) DAY), INTERVAL 1 DAY)as lastdate,
		DATE_SUB(DATE_ADD(placementdate, INTERVAL ((weeknumber*7)+6) DAY), INTERVAL 1 DAY)as finallastdate,
		fun_openingbalance(DATE_SUB(DATE_ADD(placementdate, INTERVAL ((weeknumber*7)+6) DAY), INTERVAL 1 DAY),@warehousebinid,itemid) as instock

		FROM 
			(select layerbatchid,LBPD.layershedid as layershedid,LBP.companyid as Lcid,LS.shedname,lS.warehousebinid,LB.batchname,L.moduleids,LBP.placementdate as placementdate,
			TRUNCATE((((DATEDIFF(p_fromdate,LBP.placementdate))+1)/7),0) as sw,LB.itemid as  litemid,   
			TRUNCATE((((DATEDIFF(p_todate,LBP.placementdate))+1)/7),0)  as ew FROM layerbatchplacement LBP
			left JOIN layerbatchplacementdetail LBPD ON LBPD.layerbatchplacementid = LBP.id 
			left JOIN layerbatch LB ON LB.id = LBP.layerbatchid 
			left JOIN layershed LS ON LS.id = LBPD.layershedid 
           -- left JOIN warehousebin WB ON WB.id = LS.warehousebinid 
			left JOIN location L ON L.id = LBP.locationid AND FIND_IN_SET(L.moduleids,p_moduleids)
			WHERE LBP.locationid = p_locationid  
			 -- AND FIND_IN_SET(L.moduleids,'721') 

			)as temp 
        LEFT JOIN layerfeedstandard LF ON LF.companyid =  Lcid  AND LF.layeritemid = litemid   
		LEFT JOIN layerfeedstandarddetail LFD ON   LFD.layerfeedstandardid = LF.id
		LEFT JOIN item I ON I.id = LFD.itemid 
		WHERE  
		weeknumber BETWEEN sw AND ew limit 1)as tempone;

	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productioncostgrade_delete`( 
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM productioncostgrade WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'productioncostgrade', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productioncostgrade_save`(
 IN p_id INT(11),
 IN p_categoryid INT(11),
 IN p_locationid INT(11),
 IN p_gradeid INT(11),
 IN p_fromcost DECIMAL(9,3),
 IN p_tocost DECIMAL(9,3),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO productioncostgrade
              (categoryid, locationid, gradeid, fromcost, tocost, companyid)
       VALUES
            (p_categoryid, p_locationid, p_gradeid, p_fromcost, p_tocost, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE productioncostgrade 
   
	SET categoryid = p_categoryid,
		locationid = p_locationid,
		gradeid = p_gradeid,
		fromcost = p_fromcost,
        tocost = p_tocost,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'productioncostgrade', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productioncostgrade_search`(
  IN p_companyid INT(11)
)
BEGIN

	SELECT PG.id,
    PG.categoryid,
    PG.locationid,
    PG.gradeid,
    PG.fromcost,
    PG.tocost,
    PG.companyid,
    L.locationname,
    FT.farmtype as categoryname,
    FG.grade
           
	FROM productioncostgrade PG
    
     LEFT JOIN farmtype FT ON FT.id = PG.categoryid
	 LEFT JOIN location L ON L.id = PG.locationid
     LEFT JOIN farmgrade FG ON FG.id = PG.gradeid
    
    WHERE PG.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productioncostgrade_select`( 
 IN p_id INT(11)
)
BEGIN

	SELECT PG.id,
    PG.categoryid,
    PG.locationid,
    PG.gradeid,
    PG.fromcost,
    PG.tocost,
    PG.companyid,
    L.locationname,
    FT.farmtype as categoryname,
    FG.grade
           
	FROM productioncostgrade PG
    
     LEFT JOIN farmtype FT ON FT.id = PG.categoryid
	 LEFT JOIN location L ON L.id = PG.locationid
	 LEFT JOIN farmgrade FG ON FG.id = PG.gradeid
    
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND PG.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productionissuedetail_forqty`(
 IN p_productionorderid INT,
 IN p_transactiondate DATE,
 IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';
	DROP TEMPORARY TABLE IF EXISTS issuedetail;
	CREATE TEMPORARY TABLE issuedetail
	SELECT
		FPO.warehouseid,
		FPOD.itemid,
        FPOD.plannedqty,	
		FPOD.pendingplannedqty,
		GROUP_CONCAT(MOM.itembatch) as itembatch,
        I.itemname,
        DATE_FORMAT(MOM.transactiondate,'%d/%m/%Y') as collectiondate,
        SUM(fnc_feedmill_itembatchbalance(MOM.itembatch,FPOD.itemid,FPO.warehouseid,p_companyid)) as batch_qty,
        SUM((MOM.itemvalue/MOM.quantity)) as batch_unitcost
        
 FROM feedmill_productionorderdetail FPOD
	LEFT JOIN feedmill_productionorder FPO ON FPO.id = p_productionorderid
	LEFT JOIN materialmovement MOM ON MOM.itemid = FPOD.itemid
    LEFT JOIN item I ON MOM.itemid = I.id
    
    
  where  FPOD.productionorderid = p_productionorderid AND
		 MOM.towarehouseid =FPO.warehouseid AND
         FIND_IN_SET(MOM.transactiontypeid, '681,682,684,685') AND
         MOM.companyid = p_companyid AND
         MOM.transactiondate<=p_transactiondate
   group by  FPOD.itemid;
   
   SELECT *,pendingplannedqty as issue_qty,
			pendingplannedqty*batch_unitcost as batch_totalcost
   FROM issuedetail 
   WHERE batch_qty >0
   AND pendingplannedqty !=0;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productionorderdetail_delete`(  
 IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM feedmill_productionorderdetail WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'feedmill_productionorderdetail', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productionorderdetail_forqty`(
 IN p_productionorderid INT,
 IN p_transactiondate DATE,
 IN p_warehouseid INT,
 IN p_companyid INT
)
BEGIN

	SELECT FPOD.id,
		   FPOD.productionorderid,	
		   FPOD.typeid,
		   FPOD.itemid,	
		   FPOD.baseqty,	
		   FPOD.plannedqty,	
           FPOD.pendingplannedqty,
		   FPOD.issuemethodid,
		   REF.refname as materialtype,
           I.itemname,
		   REF1.refname as itemunitname, 
           I.itemunitid,
           REF2.refname as issuemethod,
           FPOD.itemstockqty,
		   fnc_feedmill_livestock(p_transactiondate,p_warehouseid, FPOD.itemid,p_companyid) as itemstockqty
		   
           
	FROM
		feedmill_productionorderdetail FPOD
        
          LEFT JOIN `reference` REF ON FPOD.typeid = REF.id
          LEFT JOIN item I ON FPOD.itemid = I.id
		  LEFT JOIN `reference` REF1 ON I.itemunitid = REF1.id
          LEFT JOIN `reference` REF2 ON FPOD.issuemethodid = REF2.id
        
	WHERE
		 FPOD.productionorderid = p_productionorderid AND
         FPOD.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productionorderdetail_save`( 
IN p_id	int(11),
IN p_productionorderid int(11),
IN p_typeid int(11),
IN p_itemid int(11),
IN p_baseqty decimal(12,3),
IN p_plannedqty decimal(12,3),
IN p_pendingplannedqty decimal(12,3),
IN p_issuemethodid int(11),
IN p_itemstockqty DECIMAL(15,3),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_productionorderdetail
        (  productionorderid,	
			typeid,
			itemid,	
			baseqty,	
			plannedqty,	
            pendingplannedqty,
			issuemethodid,
            itemstockqty,
            companyid)
        
        VALUES (p_productionorderid,	
				p_typeid,
				p_itemid,	
				p_baseqty,	
				p_plannedqty,
                p_pendingplannedqty,
				p_issuemethodid,
                p_itemstockqty,
				p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_productionorderdetail
        SET productionorderid = p_productionorderid,	
			typeid = p_typeid,
			itemid = p_itemid,	
			baseqty = p_baseqty,	
			plannedqty = p_plannedqty,
            pendingplannedqty = p_pendingplannedqty,
			issuemethodid = p_issuemethodid,
            itemstockqty = p_itemstockqty,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
   
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_productionorderdetail', out_id, @action, p_userid);



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productionorderdetail_search`(
 IN p_productionorderid INT,
 IN p_companyid INT
)
BEGIN

	SELECT FPOD.id,
		   FPOD.productionorderid,	
		   FPOD.typeid,
		   FPOD.itemid,	
		   FPOD.baseqty,	
		   FPOD.plannedqty,	
           FPOD.pendingplannedqty,
		   FPOD.issuemethodid,
		   REF.refname as materialtype,
           I.itemname,
		   REF1.refname as itemunitname, 
           I.itemunitid,
           REF2.refname as issuemethod,
           FPOD.itemstockqty
           
	FROM
		feedmill_productionorderdetail FPOD
        
          LEFT JOIN `reference` REF ON FPOD.typeid = REF.id
          LEFT JOIN item I ON FPOD.itemid = I.id
		  LEFT JOIN `reference` REF1 ON I.itemunitid = REF1.id
          LEFT JOIN `reference` REF2 ON FPOD.issuemethodid = REF2.id
        
	WHERE
		 FPOD.productionorderid = p_productionorderid AND
         FPOD.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productionorderfrom_planing`(
IN p_id INT,
IN p_companyid INT,
IN p_userid INT)
BEGIN


  DECLARE x INT;
  DECLARE i INT;
  DECLARE j INT;
 SET @reccount = 0;
 SET @reccount1 = 0;
 SET x = 1;
SET @row_number = 0;
SET @warehouseid = null;

SELECT warehouseid INTO @warehouseid FROM feedmill_feedmillsetting where companyid = p_companyid;

DROP TEMPORARY TABLE IF EXISTS tempmortality;
CREATE TEMPORARY TABLE tempmortality
SELECT FP.id as planingdetailid,FP.requiredqty,
		BOM.id as productionno,
        BOM.quantity as bomplannedqty,
        (@row_number := @row_number + 1) as `rank`
 FROM feedmill_production FP
LEFT JOIN item I ON I.itemname = FP.itemname
LEFT JOIN feedmill_billofmaterial BOM ON BOM.itemid = I.id 
 WHERE productionplanningid= p_id
 AND BOM.id IS NOT NULL;
 select * FROM tempmortality;
SELECT COUNT(*) INTO @reccount1 FROM tempmortality;

	WHILE x  <= @reccount1 DO
			
		SET @requiredqty = null;
		SET @reccount = 0;
        SET @po_outid = 0;
        SET @prodetail = 0;
        SET @productionno = null;
        SET @planingdetailid = null;
   
		SELECT planingdetailid,requiredqty,productionno
            INTO  @planingdetailid,@requiredqty,@productionno
            FROM tempmortality WHERE `rank` = x;
         
         SELECT planingdetailid,requiredqty,productionno
            FROM tempmortality WHERE `rank` = x;

     call `spc_productionorder_save`(
			null,@productionno,1761,1701,@requiredqty,@warehouseid,now(),now(),now(),null,'Manual',null,null,null,null,
			0,0,0,0,0,0,0,0,now(),now(),null,null,null,
			'production order from planing',
			'production order from planing',
			null,
			@requiredqty,
			 p_companyid,
			p_userid,
            @po_outid);
            
            
          update feedmill_production SET productionorderid =  @po_outid WHERE  id = @planingdetailid;
       
       
       call `spc_productionorderfrom_planingdetail`(
			@productionno,
			@po_outid,
			@warehouseid,
			@requiredqty,
			p_companyid,
			p_userid);	
            
			SET  x = x + 1; 
	END WHILE;
	 
	DROP TEMPORARY TABLE tempmortality;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productionorderfrom_planingdetail`(
IN p_productionno INT,
IN p_productionorderid INT,
IN p_warehouseid INT,
IN p_requiredqty DECIMAL(15,3),
IN p_companyid INT,
IN p_userid INT)
BEGIN


  DECLARE y INT;
  DECLARE i INT;
  DECLARE j INT;
  SET @rowcount = 0;
  SET @noofrows = 0;
  SET y = 1;
  SET @row_number = 0;


DROP TEMPORARY TABLE IF EXISTS tempmortality2;
CREATE TEMPORARY TABLE tempmortality2

SELECT BOM.id as productionno,BOM.itemid as productid,BOMD.itemid,BOM.quantity as bomplannedqty,
		BOMD.quantity as bomddqty,((BOMD.quantity/BOM.quantity)*p_requiredqty) as pqty,
        fnc_feedmill_livestock(now(),p_warehouseid,BOMD.itemid,p_companyid) as itemstockqty,
        (@row_number := @row_number + 1) as `rank`
  FROM feedmill_billofmaterial BOM 
 LEFT JOIN feedmill_billofmaterialdetail BOMD ON BOMD.bomid = BOM.id
 WHERE BOM.id = p_productionno
 AND BOM.id IS NOT NULL;
SELECT COUNT(*) INTO @noofrows FROM tempmortality2;

	WHILE y <= @noofrows DO
			
		SET @productid = null;
		SET @itemid = null;
		SET @bomplannedqty = null;
		SET @bomddqty = null;
        SET @pqty = null;
		SET @rowcount = 0;
        SET @po_outid = 0;
        SET @prodetail = 0;
        SET @itemstockqty = null;
   
		SELECT  productid, itemid, bomplannedqty, bomddqty,pqty,itemstockqty
            INTO @productid, @itemid, @bomplannedqty, @bomddqty, @pqty,@itemstockqty
            FROM tempmortality2 WHERE `rank` = y;
            call `spc_productionorderdetail_save`( 
				null,p_productionorderid,1681,@itemid,
				@bomddqty,@pqty,@pqty,1742,@itemstockqty,p_companyid,p_userid,@prodetail);
            
			SET  y = y + 1; 
	END WHILE;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productionorder_delete`(  
  IN p_id INT,
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN
	DELETE FROM feedmill_productionorder WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'feedmill_productionorder', p_id, 'delete', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productionorder_save`(
IN p_id	int(11),
IN p_productionno INT(11),
IN p_typeid	int(11),
IN p_statusid int(11),
IN p_plannedqty	decimal(12,3),
IN p_warehouseid int(11),
IN p_orderdate date,
IN p_startdate date,
IN p_duedate date,
IN p_employeeid int(11),
IN p_origin	VARCHAR(45),
IN p_customerid int(11),
IN p_salesorderid int(11),
IN p_costcenterid int(11),
IN p_projectid int(11),
IN p_actualitemcost decimal(12,3),
IN p_actualresourcecost	decimal(12,3),
IN p_actualadditionalcost decimal(12,3),
IN p_actualproductcost decimal(12,3),
IN p_actualbyproductcost decimal(12,3),
IN p_totalvariance decimal(12,3),
IN p_completedqty decimal(12,3),
IN p_rejectedqty decimal(12,3),
IN p_actualclosingdate date,
IN p_overduedate date,
IN p_totalruntime varchar(45),
IN p_totaladditionaltime varchar(45),
IN p_totaltime varchar(45),
IN p_journalremark varchar(45),
IN p_remarks varchar(45),
IN p_productionorderno  varchar(30),
IN p_receipt_pendingqty DECIMAL(12,3),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
    SET @newseries = NUll; 
    set @out_seriesid = '0';
		call spc_financialyeardocseries_newseries('FPD', p_companyid, @out_seriesid);
		INSERT INTO feedmill_productionorder
        (  productionno,	
			typeid,	
			statusid,	
			plannedqty,	
			warehouseid,	
			orderdate,	
			startdate,	
			duedate,
			employeeid,
			origin,
            customerid,
            salesorderid,
			costcenterid,
			projectid,	
			actualitemcost,	
			actualresourcecost,	
			actualadditionalcost,	
			actualproductcost,	
			actualbyproductcost,
			totalvariance,	
			completedqty,	
			rejectedqty,	
			actualclosingdate,	
			overduedate,	
			totalruntime,	
			totaladditionaltime,
			totaltime,	
			journalremark,	
			remarks,
            productionorderno,
            receipt_pendingqty,
            companyid)
        
        VALUES ( p_productionno,	
				p_typeid,	
				p_statusid,	
				p_plannedqty,	
				p_warehouseid,	
				p_orderdate,	
				p_startdate,	
				p_duedate,
				p_employeeid,
				p_origin,
				p_customerid,
                p_salesorderid,
				p_costcenterid,
				p_projectid,	
				p_actualitemcost,	
				p_actualresourcecost,	
				p_actualadditionalcost,	
				p_actualproductcost,	
				p_actualbyproductcost,
				p_totalvariance,	
				p_completedqty,	
				p_rejectedqty,	
				p_actualclosingdate,	
				p_overduedate,	
				p_totalruntime,	
				p_totaladditionaltime,
				p_totaltime,	
				p_journalremark,	
				p_remarks,
               (select @out_seriesid),
                p_receipt_pendingqty,
				p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_productionorder
        SET productionno = p_productionno,	
			typeid = p_typeid,	
			statusid = p_statusid,	
			plannedqty = p_plannedqty,	
			warehouseid = p_warehouseid,	
			orderdate = p_orderdate,	
			startdate = p_startdate,	
			duedate = p_duedate,
			employeeid = p_employeeid,
			origin = p_origin,
            customerid = p_customerid,
			salesorderid = p_salesorderid,
            costcenterid = p_costcenterid,
			projectid = p_projectid,	
			actualitemcost = p_actualitemcost,	
			actualresourcecost = p_actualresourcecost,	
			actualadditionalcost = p_actualadditionalcost,	
			actualproductcost = p_actualproductcost,	
			actualbyproductcost = p_actualbyproductcost,
			totalvariance = p_totalvariance,	
			completedqty = p_completedqty,	
			rejectedqty = p_rejectedqty,	
			actualclosingdate = p_actualclosingdate,	
			overduedate = p_overduedate,	
			totalruntime = p_totalruntime,	
			totaladditionaltime = p_totaladditionaltime,
			totaltime = p_totaltime,	
			journalremark = p_journalremark,	
			remarks = p_remarks,
            productionorderno = p_productionorderno,
            receipt_pendingqty = p_receipt_pendingqty,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
   
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_productionorder', out_id, @action, p_userid);



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productionorder_search`(
	IN p_companyid INT(11)
 )
BEGIN
SET @@sql_mode = '';
SELECT 	    FPO.id,
			FPO.productionorderno,
            FPO.productionno,	
			FPO.typeid,	
			FPO.statusid,	
			FPO.plannedqty,	
			FPO.warehouseid,
			DATE_FORMAT(FPO.orderdate,'%d/%m/%Y') as orderdate,
			DATE_FORMAT(FPO.startdate,'%d/%m/%Y') as startdate,
			DATE_FORMAT(FPO.duedate,'%d/%m/%Y') as duedate,
			FPO.employeeid,
			FPO.origin,
            FPO.costcenterid,
            FPO.customerid,
			FPO.salesorderid,
			FPO.projectid,	
			FPO.actualitemcost,	
			FPO.actualresourcecost,	
			FPO.actualadditionalcost,	
			FPO.actualproductcost,	
			FPO.actualbyproductcost,
			FPO.totalvariance,	
			FPO.completedqty,	
			FPO.rejectedqty,
            DATE_FORMAT(FPO.actualclosingdate,'%d/%m/%Y') as actualclosingdate,
			DATE_FORMAT(FPO.overduedate,'%d/%m/%Y') as overduedate,
			FPO.totalruntime,	
			FPO.totaladditionaltime,
			FPO.totaltime,	
			FPO.journalremark,	
			FPO.remarks,
            W.warehousename,
            W.locationid,
            REF.refname as status,
            I.itemname,
            FPO.receipt_pendingqty,
		    I.itemunitid,
            REF1.refname as itemunitname,
            BOM.unitcost,
            BOM.itemid,
            FPI.unitcost as issueunitcost,
            FPI.id as production_issue_id
	
           
	FROM feedmill_productionorder FPO
     LEFT JOIN employee EMP ON FPO.employeeid = EMP.id
     LEFT JOIN warehouse W ON FPO.warehouseid = W.id
     LEFT JOIN `reference` REF ON FPO.statusid = REF.id
	 LEFT JOIN feedmill_billofmaterial BOM ON  FPO.productionno = BOM.id
     LEFT JOIN feedmill_production_issue FPI ON  FPO.id = FPI.productionorder_id
     LEFT JOIN item I ON BOM.itemid = I.id
     LEFT JOIN `reference` REF1 ON  I.itemunitid = REF1.id
    
    WHERE FPO.companyid = p_companyid GROUP by FPO.id
	order by  FPO.id DESC;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productionorder_select`( 
    IN p_id INT(11)
)
BEGIN
SELECT 	    FPO.id,
            FPO.productionorderno,
            FPO.productionno,	
			FPO.typeid,	
			FPO.statusid,	
			FPO.plannedqty,	
			FPO.warehouseid,	
			DATE_FORMAT(FPO.orderdate,'%d/%m/%Y') as orderdate,
			DATE_FORMAT(FPO.startdate,'%d/%m/%Y') as startdate,
			DATE_FORMAT(FPO.duedate,'%d/%m/%Y') as duedate,
			FPO.employeeid,
			FPO.origin,
            FPO.costcenterid,
            FPO.customerid,
			FPO.salesorderid,
			FPO.projectid,	
			FPO.actualitemcost,	
			FPO.actualresourcecost,	
			FPO.actualadditionalcost,	
			FPO.actualproductcost,	
			FPO.actualbyproductcost,
			FPO.totalvariance,	
			FPO.completedqty,	
			FPO.rejectedqty,	
			DATE_FORMAT(FPO.actualclosingdate,'%d/%m/%Y') as actualclosingdate,
			DATE_FORMAT(FPO.overduedate,'%d/%m/%Y') as overduedate,	
			FPO.totalruntime,	
			FPO.totaladditionaltime,
			FPO.totaltime,	
			FPO.journalremark,	
			FPO.remarks,
            W.warehousename,
            REF.refname as status,
            PR.partyname as customername,
            I.itemname as productname,
            I.itemcode,
            I.itemunitid,
			REF1.refname as productunit,
            FPO.receipt_pendingqty
           
	FROM feedmill_productionorder FPO
      LEFT JOIN employee EMP ON FPO.employeeid = EMP.id
      LEFT JOIN warehouse W ON FPO.warehouseid = W.id
      LEFT JOIN `reference` REF ON FPO.statusid = REF.id
      LEFT JOIN `party` PR ON FPO.customerid = PR.id
      LEFT JOIN feedmill_billofmaterial BOM ON  FPO.productionno = BOM.id
      LEFT JOIN item I ON BOM.itemid = I.id
      LEFT JOIN `reference` REF1 ON  I.itemunitid = REF1.id
    
    WHERE 
	FPO.id = p_id;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productionplanningdetail_search`(
 IN p_productionplanningid INT,
 IN p_companyid INT
)
BEGIN
SELECT FP.id,
		   FP.productionplanningid,	
		   FP.itemname,
		   FP.plannedqty as required, 	
		   FP.requiredqty as plannedqty,
           FP.itemid,
           FP.isactive
	FROM
		feedmill_production FP
        
	WHERE
		 FP.productionplanningid = p_productionplanningid AND
         FP.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productionplanning_save`(
     IN p_id INT(11),
     in p_productionplanningid INT(11),
	 IN p_itemname VARCHAR(45),
     IN p_plannedqty INT(11),
     IN p_requiredqty INT(11),
     IN p_itemid INT(11),
     IN p_isactive INT(11),
     IN p_companyid VARCHAR(11),
     IN p_userid INT(11),
     OUT out_id INT
)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_production(id,productionplanningid,itemname,plannedqty,requiredqty,itemid,isactive,companyid)
        VALUES (p_id,p_productionplanningid,p_itemname,p_plannedqty,p_requiredqty,p_itemid,p_isactive,p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_production
        SET 
			productionplanningid = p_productionplanningid,
            itemname = p_itemname,
            plannedqty = p_plannedqty,
            requiredqty = p_requiredqty,
            itemid = p_itemid,
            isactive = p_isactive,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_production', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productionplanning_search`(
IN p_companyid INT(11)
)
BEGIN

SELECT FPP.id ,
       DATE_FORMAT(FPP.fromdate,'%d/%m/%Y') as fromdate,
       DATE_FORMAT(FPP.todate,'%d/%m/%Y') as todate,
       locationid,
       operationid,
       L.locationname as locationname,
       REF.refname as modulename
       
		   
           
	FROM  feedmill_productionplanning FPP
    LEFT JOIN location L ON L.id = FPP.locationid 
	LEFT JOIN `reference` REF ON REF.id = FPP.operationid
	
    
    WHERE FPP.companyid = p_companyid -- GROUP by FP.id
    order by  FPP.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productionplanning_select`(
IN p_id INT(11)
)
BEGIN
SELECT id as pid,
       fromdate,
       todate,
       locationid,
       operationid,
       companyid
      -- L.locationname as locationname
      -- REF.refname as modulename
       
		   
           
	FROM  feedmill_productionplanning FPP
   -- LEFT JOIN location L ON L.id = FP.locationid 
    -- LEFT JOIN `reference` REF ON REF.id = FP.operationid
	
    
    WHERE id = p_id;
   
 

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_productionplanparent_save`(
     IN p_id INT(11),
	 IN p_fromdate DATE,
	 IN p_todate DATE,
     IN p_locationid VARCHAR(200),
     IN p_operationid VARCHAR(200),
     IN p_companyid INT,
     IN p_userid INT(11),
     OUT out_id INT
     )
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_productionplanning(id,fromdate,todate,locationid,operationid,companyid)
        VALUES (p_id,p_fromdate,p_todate,p_locationid,p_operationid,p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_productionplanning
        SET 
            fromdate = p_fromdate,
			todate = p_todate,
			locationid = p_locationid,
			operationid = p_operationid,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_productionplanning', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_Productionregister_report`(
	 IN p_fromdate DATE,
	 IN p_todate DATE,
     In p_companyid INT(11)
)
BEGIN

	DROP TEMPORARY TABLE IF EXISTS tmpproductionorder;
	CREATE TEMPORARY TABLE tmpproductionorder
	SELECT
        FPO.productionorderno,
		FPO.productionno,
        DATE_FORMAT( FPO.orderdate,'%d/%m/%Y') as orderdate,
		I.itemname,
		FPO.plannedqty,
		FRFP.receipt_qty,
       '' as accesshortage,
		R.refname,
		IG.groupname,
		I.itemgroupid,
        WH.warehousename
        

	FROM feedmill_productionorder FPO
		LEFT JOIN feedmill_receipt_from_production FRFP ON FRFP.productionorder_id = FPO.id
		LEFT JOIN item I ON FPO.productionno = I.id
		LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
		LEFT JOIN `reference` R ON R.id = I.itemunitid
        LEFT JOIN warehouse WH ON WH.id =  FPO.warehouseid
		WHERE FPO.orderdate between p_fromdate AND p_todate 
         AND FPO.companyid = p_companyid 
         ORDER BY I.itemgroupid;

	DROP TEMPORARY TABLE IF EXISTS tmpproductionorder1;
	CREATE TEMPORARY TABLE tmpproductionorder1
-- for sub total--
		SELECT *, 'item' as entity from tmpproductionorder;
    
    
	SELECT * from (
		 SELECT * from tmpproductionorder1
			 UNION ALL	
				SELECT 
					'' as productionorderno,
					'' as productionno,
					'' as `orderdate`,
					'Sub Total' as itemname,
					SUM(plannedqty),
					SUM(receipt_qty),
                    (SUM(plannedqty)-SUM(receipt_qty)) as accesshortage ,
					'' as refname,
					'' as groupname,
					itemgroupid,
                    '' as warehousename,
					'subtotal' as entity
				FROM
					tmpproductionorder
						GROUP BY itemgroupid 
			 ) as tmpresult  ORDER BY  itemgroupid,entity;
    END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_product_select`(
  IN p_id INT, 
  IN p_companyid INT
)
BEGIN


SET @curdat = CURDATE();
SET  @warehouseidfrom = null;
SET @warehousebinid = null;
SET @warehouseid = null;

SELECT FS.warehouseid, WB.id INTO @warehouseid ,@warehousebinid 
	FROM feedmill_feedmillsetting  FS 
    LEFT JOIN warehousebin WB ON WB.warehouseid = FS.warehouseid AND WB.isdefault = 1
	where FS.companyid = p_companyid;


	SELECT BM.id as id,
           I.itemname as productname,
           I1.itemname as childitems,
           BM.itemid as product,
           BM.unitcost as productcost,
           BM.quantity as productqty,
		   BMD.itemid as bmditemid,
           BMD.quantity as bmdquantity,
           BMD.unitcost as bmdunitcost,
           BMD.parentid as bmdparentid,
		   fun_openingbalance(@curdat,@warehousebinid,I1.id) as stockbalance,
           @warehousebinid,
           @warehouseid
            
    FROM  feedmill_billofmaterial BM
    LEFT JOIN feedmill_billofmaterialdetail BMD ON BMD.bomid = BM.id
    LEFT JOIN item I ON I.id = BM.itemid 
    LEFT JOIN item I1 ON I1.id = BMD.itemid
    
    WHERE 
          BM.itemid = p_id
          AND  BM.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_profitand_loss_diff`(
 	IN p_todate DATE,
    IN p_companyid INT(11)
    )
BEGIN
SET @pandl_amount = 0;
SET @financialyr_st_date = null;
select startfrom INTO @financialyr_st_date FROM financialyearsetting WHERE companyid = p_companyid AND active = 1 ;
SELECT fnc_get_profit_and_loss_amount(@financialyr_st_date,p_todate,p_companyid) INTO @pandl_amount;
    
    SELECT 
           ASD.profitandlossledgerid as id,
           COA.glcode,
           ASD.profitandlossledgerid as acledgerid,
           COA.coaname as ledgername,
           COA.isparent,
           COA.groupid,
           fnc_getgroupname(COA.groupid) as groupname,
          -- ifnull(@pandl_amount,0) as balance,
		  -- ifnull(@pandl_amount,0) as dramount,
		  --  ifnull(@pandl_amount,0) as cramount,
		    ifnull(@pandl_amount,0) as amount
    FROM common_setting ASD
     Inner JOIN chartofaccount COA ON COA.id = ASD.profitandlossledgerid
    WHERE ASD.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_project_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DELETE FROM project WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'project', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_project_parentproject`(
	IN p_companyid INT
)
BEGIN

	SELECT
			id,
            projectcode,
            projectname,
            DATE_FORMAT(validfrom,'%d/%m/%Y') as validfrom,
			DATE_FORMAT(validto,'%d/%m/%Y') as validto,
            isactive,
            employeeid,
            companyid,
            isparent, 
            parentid
			
	FROM project
    
	WHERE companyid = p_companyid
    AND isparent = 1;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_project_save`(
	IN p_id INT,
	IN p_projectcode VARCHAR(300),
    IN p_projectname VARCHAR(300),
    IN p_validfrom DATE,
    IN p_validto DATE,
    IN p_isactive SMALLINT(4),
    IN p_employeeid INT,
    IN p_isparent TINYINT(4),
    IN p_parentid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    SET @action = null;
    
    IF EXISTS(
            SELECT projectname from project where LOWER(projectname) = LOWER(p_projectname) OR projectcode = p_projectcode
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
			
			BEGIN
			
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO project 
					(projectcode, projectname, validfrom, validto, 
					isactive, employeeid, isparent, parentid, companyid)
				VALUES 
					(p_projectcode, p_projectname, p_validfrom, p_validto,
					p_isactive, p_employeeid, p_isparent, p_parentid, p_companyid);
					
			SET @action = 'INSERT';
			
		ELSE
		
			UPDATE project
				SET 
					projectcode = p_projectcode, 
					projectname = p_projectname,
					validfrom = p_validfrom,
					validto = p_validto,
					isactive = p_isactive,
					employeeid = p_employeeid,
					isparent = p_isparent,
					parentid = p_parentid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id 
					AND companyid = p_companyid;
					
				SET @action = 'UPDATE';        
						
						
			END IF;
			
			SELECT LAST_INSERT_ID() INTO out_id; 
			
		   -- record log
		   CALL spc_commonlog_save(p_companyid, 'project', out_id, @action, p_userid);

		END;
     
   END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_project_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
			id,
            projectcode,
            projectname,
            DATE_FORMAT(validfrom,'%d/%m/%Y') as validfrom,
			DATE_FORMAT(validto,'%d/%m/%Y') as validto,
            isactive,
            employeeid,
            companyid,
            isparent, 
            parentid
			
	FROM project
    
	WHERE companyid = p_companyid;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_project_select`(
	IN p_id INT
)
BEGIN

	SELECT
			id,
            projectcode,
            projectname,
			DATE_FORMAT(validfrom,'%d/%m/%Y') as validfrom,
			DATE_FORMAT(validto,'%d/%m/%Y') as validto,
            isactive,
            employeeid,
            companyid,
            isparent,
            parentid
			
	FROM project
    
	WHERE id = p_id;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchasegrnregister_report`(
IN p_fromdate date,
IN p_todate date,
IN p_itemid VARCHAR(16383),
IN p_companyid INT(11)
)
BEGIN

SELECT 
		P.id,
        P.partycode,
		P.partyname,
        G.grpono,
        I.itemname,
        I.itemunitid,
        POD.unitprice,
        POD.quantity,
        PO.purchaseorderno,
        DATE_FORMAT( PO.podate,'%d/%m/%Y') as podate,
		DATE_FORMAT( G.grpodate,'%d/%m/%Y') as grpodate,
        REF.refname as itemunitname,
		REF1.refname as statusname
	   
     FROM purchaseorder PO
     LEFT JOIN grpo G ON PO.id = G.purchaseorderid   
	 LEFT JOIN party P  ON PO.vendorid =  P.id
	 LEFT JOIN purchaseorderdetail POD ON PO.id = POD.purchaseorderid
     LEFT JOIN item I ON POD.itemid = I.id
	 LEFT JOIN `reference` REF ON I.itemunitid = REF.id
     LEFT JOIN `reference` REF1 ON PO.statusid = REF1.id
   
   
    WHERE  G.companyid = p_companyid AND
		   G.grpodate BETWEEN p_fromdate AND p_todate AND
		    FIND_IN_SET( I.id, p_itemid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseinvoicedetail_delete`(
	IN p_id INT
    )
BEGIN

    DELETE FROM purchaseinvoicedetail WHERE id = p_id;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseinvoicedetail_save`(
		IN p_id INT,
        IN p_purchaseinvoiceid INT,
		IN p_itemid INT,
        IN p_itemname VARCHAR(200),
        IN p_itemunitid INT,
		IN p_quantity DECIMAL(15,3),
        IN p_freequantity DECIMAL(15,3),
		IN p_unitprice DECIMAL(15,3),
		IN p_itemdiscount DECIMAL(15,3),
        IN p_taxid INT,
        IN p_taxpercent DECIMAL(9,3),
		IN p_cgstid INT(11),
		IN p_cgstpercent DECIMAL(9,3),
		IN p_cgstamount DECIMAL(9,3),
		IN p_sgstid INT(11),
		IN p_sgstpercent DECIMAL(9,3),
		IN p_sgstamount DECIMAL(9,3),
		IN p_igstid INT(11),
		IN p_igstpercent DECIMAL(9,3),
		IN p_igstamount DECIMAL(9,3),
		IN p_utgstid INT(11),
		IN p_utgstpercent DECIMAL(9,3),
		IN p_utgstamount DECIMAL(9,3),
        IN p_companyid INT,
		IN p_userid INT,
		OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO purchaseinvoicedetail 
				(purchaseinvoiceid, itemid, itemname, itemunitid, quantity, freequantity, unitprice, itemdiscount, 
               taxid,taxpercent,cgstid, cgstpercent, cgstamount,sgstid,sgstpercent,sgstamount,igstid,igstpercent,
                igstamount,utgstid,utgstpercent,utgstamount, companyid)
			VALUES 
				(p_purchaseinvoiceid, p_itemid, p_itemname, p_itemunitid, p_quantity, p_freequantity, p_unitprice, p_itemdiscount,
                p_taxid,p_taxpercent,p_cgstid,p_cgstpercent, p_cgstamount,
                p_sgstid,p_sgstpercent, p_sgstamount,p_igstid,p_igstpercent,p_igstamount,
                p_utgstid,p_utgstpercent, p_utgstamount, p_companyid);
                
            SET @action = 'INSERT';
            
            SELECT LAST_INSERT_ID() INTO out_id;
            
            IF((SELECT grpono FROM purchaseinvoice WHERE id = p_purchaseinvoiceid) IS null)THEN
				
				-- create itembatch for purchaseinvoice
				SET @itembatch = null;
				SET @itemgroup = null;
				
				SELECT CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch 
				FROM item I
				INNER JOIN itemgroup IG ON IG.id = I.itemgroupid
				WHERE I.id = p_itemid;
				-- get item group id from the item id and update itemgroup table
				SELECT itemgroupid INTO @itemgroup FROM item WHERE id = p_itemid;
				
				UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
				
				WHERE id = @itemgroup;
							
				-- material movement entry for grpo
				SET @out_movid = NULL;
				SET @totalvaluewithdiscount = 0;
				SET @invoicequantity = (p_quantity + (IFNULL((p_freequantity),0)));
				SELECT ((p_quantity * p_unitprice)-((p_quantity * p_unitprice)*p_itemdiscount/100)) INTO @totalvaluewithdiscount;
					
				CALL spc_materialmovement_save(
					NULL, p_itemid, @itembatch, 681,
					p_purchaseinvoiceid, (SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid), 
                    @invoicequantity, NULL, NULL, 
                    (SELECT deliverytowarehouseid FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
					(SELECT towarehousebinid FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
					@totalvaluewithdiscount,
					p_companyid, p_userid, @out_movid
				);
                
                UPDATE purchaseinvoicedetail
                SET itembatch = @itembatch
                WHERE id = out_id
                AND itemid = p_itemid;
			
            ELSE
				SET @grpono = null;
                SET @itembatch = null;
                
				SELECT grpono INTO @grpono from purchaseinvoice WHERE id =p_purchaseinvoiceid;
				SELECT itembatch INTO @itembatch from grpodetail where grpoid = @grpono AND itemid = p_itemid;
    
				UPDATE purchaseinvoicedetail
                SET itembatch = @itembatch
                WHERE id = out_id
                AND itemid = p_itemid;
            
            END IF;

	ELSE
		IF((SELECT id FROM journalentrydetail WHERE subledgertypeid = 1251 AND FIND_IN_SET(p_purchaseinvoiceid, billno) LIMIT 1) IS NULL) THEN
			SET @previousqty = 0;
			SET @usedqty = 0;
			SELECT (quantity+freequantity) INTO @previousqty FROM purchaseinvoicedetail WHERE id = p_id AND itemid = p_itemid;

			SET @itembatch = null;
			SET @livestock = 0;
			
			SELECT itembatch INTO @itembatch from purchaseinvoicedetail where id = p_id AND itemid = p_itemid;
			SELECT fnc_itembatchlivestock(p_itemid, @itembatch, (SELECT towarehousebinid FROM purchaseinvoice WHERE id = p_purchaseinvoiceid), p_companyid) INTO @livestock;
				
			IF(@livestock < @previousqty) THEN
				SELECT -1 as result;
			ELSE			
				UPDATE purchaseinvoicedetail
						SET
						purchaseinvoiceid = p_purchaseinvoiceid, 
						itemid = p_itemid, 
						itemname = p_itemname,
						itemunitid = p_itemunitid,
						quantity = p_quantity,
						freequantity = p_freequantity,
						unitprice = p_unitprice,
						itemdiscount = p_itemdiscount,
						taxid = p_taxid,
						taxpercent= p_taxpercent,
						cgstid = p_cgstid,
						cgstpercent= p_cgstpercent,
						cgstamount = p_cgstamount,
						sgstid = p_sgstid,
						sgstpercent =p_sgstpercent,
						sgstamount =p_sgstamount,
						igstid = p_igstid,
						igstpercent =p_igstpercent,
						igstamount = p_igstamount,
						utgstid = p_utgstid,
						utgstpercent =p_utgstpercent,
						utgstamount = p_utgstamount,
						companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
						
					SET @action = 'UPDATE';     
				
				UPDATE materialmovement
				SET quantity = (p_quantity+p_freequantity),
				itemvalue = (((p_quantity+p_freequantity)*p_unitprice)-((p_quantity+p_freequantity)*p_unitprice)*(p_itemdiscount)/100)
				WHERE transactiontypeid = 681
				AND itembatch = @itembatch
				AND itemid = p_itemid;
				
				SELECT "Updated" as result;
			END IF;
		ELSE
			SELECT "In Outgoing Payment" as result;
		END IF;  
            
	END IF;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseinvoicedetail_search`(
	IN p_purchaseinvoiceid INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
		PID.id as invoicedetailid,
		PID.itemid,
        purchaseinvoiceid,
        PID.itemname,
        itemunitid,
        quantity,
        freequantity,
        unitprice,
        itemdiscount,
        PID.taxpercent,
        PID.taxid,
		REF.refname as itemunitname,
		PID.taxpercent,
	    PID.cgstpercent,
        PID.cgstamount,
        PID.sgstpercent,
        PID.sgstamount,
        PID.igstpercent,
		PID.igstamount,
        PID.utgstpercent,
        PID.utgstamount,
        PID.sgstid,
	    PID.cgstid,
	    PID.igstid,
	    PID.utgstid,
        REF2.refname as taxtype,
		 T.combinedtaxes,
		 T.taxname,
		 fnc_taxes_byids(combinedtaxes) as taxesname,
		 fnc_taxpercents_byids(combinedtaxes) as taxpercents,
		 fnc_taxtypes_byids(combinedtaxes) as taxtypes
        
        
	
	FROM 
		purchaseinvoicedetail PID
        
	 LEFT JOIN `reference` REF ON PID.itemunitid = REF.id
	 LEFT JOIN tax T ON T.id = PID.taxid
	 LEFT JOIN `reference` REF2 ON T.taxtypeid = REF2.id
    
    
	WHERE 
		 PID.purchaseinvoiceid = p_purchaseinvoiceid
         AND PID.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseinvoicelist_search`( 
	IN p_from_date date,
	IN p_to_date date
)
BEGIN
	SELECT PI.id,
           DATE_FORMAT(PI.invoicedate,'%d/%m/%Y') as invoicedate,
           vendorid,
           PI.grpono,
           PI.purchaseorderid,
           PI.subject,
           PI.referenceno,
           DATE_FORMAT(PI.referencedate,'%d/%m/%Y') as referencedate,
           PI.creditperiod,
           PI.nettotal,
           PI.discount,
           PI.taxtotal,
           PI.frieght,
           PI.subtotal,
           PI.remark,
           transactiontypeid,
           deliveryfromaddressid,
           deliverytowarehouseid,
           PI.towarehousebinid,
           WB.binname as towarehousebinname,
		   deliveryfromstatecode,
		   deliverytostatecode,
		   PT.partyname as suppliername,
		   PA.address as delfromfulladdress,
		   WH.address as warehousefulladdress,
		   ST.isunionterritory as warehouseisunionterritory,
		   ST1.isunionterritory as deliveryfromisunionterritory,
           PI.purchaseinvoiceno,
           GR.grpono as grpodocseriesno,
		   DATE_FORMAT(PI.duedate,'%d/%m/%Y') as duedate,
		   DATE_FORMAT(PI.postingdate,'%d/%m/%Y') as postingdate,
           PI.tdsid,
           PI.tdsamount,
           T.rate as tds,
           PI.discount
           
    FROM  purchaseinvoice PI
    
    LEFT JOIN party PT ON PI.vendorid = PT.id
	LEFT JOIN partyaddress PA ON PI.deliveryfromaddressid = PA.id
	LEFT JOIN warehouse WH ON PI.deliverytowarehouseid = WH.id
    LEFT JOIN warehousebin WB ON PI.towarehousebinid = WB.id
	LEFT JOIN `state` ST ON WH.stateid = ST.id
	LEFT JOIN `state` ST1 ON PA.stateid = ST1.id
	LEFT JOIN grpo GR ON GR.id = PI.grpono
	LEFT JOIN account_tds T ON T.id = PI.tdsid
    WHERE 
         (PI.invoicedate BETWEEN p_from_date AND p_to_date)
	ORDER BY 
		PI.id DESC;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseinvoice_bygrpoid`(
	IN p_id INT(11),
    IN p_invoicedate DATE,
    IN p_postingdate DATE,
    IN p_duedate DATE,
    IN p_vendorid INT(11),
    IN p_grpono INT(11),
    IN p_purchaseorderid INT(11),
    IN p_subject VARCHAR(200),
    IN p_referenceno INT(11),
    IN p_referencedate DATE,
    IN p_creditperiod INT(11),
    IN p_nettotal DECIMAL(15,3),
    IN p_discount DECIMAL(15,3),
    IN p_taxtotal DECIMAL(15,3),
    IN p_freight DECIMAL(15,3),
    IN p_remark VARCHAR(200),
    IN p_transactiontypeid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT(11)
)
BEGIN
	SET @purchaseinvoiceno = null;        
	CALL spc_financialyeardocseries_newseries(
		'PI', p_companyid, @purchaseinvoiceno
	);
    
    SET @deliveryfromaddressid = null;
    SET @towarehouseid = null;
    SET @towarehousebinid = null;
    SET @deliveryfromstatecode = null;
    SET @deliverytostatecode = null;
    
    SELECT G.towarehouseid, G.towarehousebinid
    INTO @towarehouseid, @towarehousebinid
    FROM grpo G 
    WHERE G.id = p_grpono;
    
    SELECT PO.deliveryfromaddressid, PO.deliveryfromstatecode, PO.deliverytostatecode
    INTO @deliveryfromaddressid, @deliveryfromstatecode, @deliverytostatecode
    FROM purchaseorder PO
    WHERE PO.id = p_purchaseorderid;
    
    SET @rate = 0;
    SELECT rate INTO @rate
    FROM account_tds ACT
    INNER JOIN party P ON P.tdsid = ACT.id
    WHERE P.id = p_vendorid;
    
    SET @tdsamount = 0;
    SELECT ((p_nettotal * @rate) / 100) INTO @tdsamount;
    
    SET @subtotal = 0;
    SELECT (p_nettotal - IFNULL(@tdsamount,0)) INTO @subtotal;
    
	SET @purchaseinvoiceid = null;
    CALL spc_purchaseinvoice_save(
		null, p_invoicedate, p_postingdate, p_duedate, @purchaseinvoiceno,
        p_vendorid, 0, p_grpono, p_purchaseorderid, null,
        p_subject, p_referenceno, p_referencedate, p_creditperiod, p_nettotal,
        p_discount, p_taxtotal, p_freight, @subtotal, p_remark, p_transactiontypeid,
        @deliveryfromaddressid, @towarehouseid, @towarehousebinid, @deliveryfromstatecode,
        @deliverytostatecode, (SELECT tdsid FROM party WHERE id = p_vendorid), @tdsamount,
        @tdsamount, p_companyid, p_userid, @purchaseinvoiceid
    );
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    SET @row_number = 0;

	CREATE TEMPORARY TABLE tempgrpoinvoice
        
	SELECT (@row_number:=@row_number + 1) AS num, quantity, unitprice, freequantity, totalcost, 
    itemid, itemname, itemunitid, taxid, taxpercent, itemdiscount from (
	SELECT 
    GD.quantity,
    GD.unitprice,
    GD.freequantity,
	(GD.quantity*GD.unitprice) as totalcost,
	GD.itemid,
    GD.itemname,
    GD.itemunitid,
    GD.taxid,
	GD.taxpercent,
	GD.itemdiscount

	FROM grpodetail GD
	where grpoid = p_grpono
	) as tblgrpodetail;

	BEGIN
		DECLARE n INT DEFAULT 0;
		DECLARE i INT DEFAULT 0;
		SELECT COUNT(*) FROM tempgrpoinvoice INTO n;
		
		WHILE i<n DO 
			SET @quantity = null;
            SET @unitprice = null;
            SET @freequantity = null;
			SET @totalcost = null;
			SET @itemid = null;
            SET @itemname = null;
            SET @itemunitid = null;
			SET @itemdiscount = 0;
            SET @taxid = null;
            SET @taxpercent = 0;
	
			select quantity, unitprice, freequantity, totalcost, itemid, itemname, itemunitid, itemdiscount, taxid, taxpercent 
			into @quantity, @unitprice, @freequantity, @totalcost, @itemid, @itemname, @itemunitid, @itemdiscount, @taxid, @taxpercent 
			from tempgrpoinvoice where num = i+1;
			
			SET @cgstid = null;
			SET @sgstid = null;
			SET @igstid = null;
			SET @utgstid = null;

			SET @cgstpercent = null;
            SET @sgstpercent = null;
            SET @igstpercent = null;
            SET @utgstpercent = null; 

			SET @cgstamount = null;
			SET @sgstamount = null;
			SET @igstamount = null;
			SET @utgstamount = null;
			
			select cgstid, sgstid, igstid, utgstid, cgstpercent, sgstpercent, igstpercent, utgstpercent, cgstamount, sgstamount, igstamount, utgstamount
			INTO @cgstid, @sgstid, @igstid, @utgstid, @cgstpercent, @sgstpercent, @igstpercent, @utgstpercent, @cgstamount, @sgstamount, @igstamount, @utgstamount
			from purchaseorderdetail
			where purchaseorderid = p_purchaseorderid
			and itemid = @itemid;

			SET @purchaseinvoicedetailid = null;
			CALL spc_purchaseinvoicedetail_save(
				null, @purchaseinvoiceid, @itemid, @itemname, @itemunitid,
                @quantity, @freequantity, @unitprice, @itemdiscount, @taxid,
                @taxpercent, @cgstid, @cgstpercent, @cgstamount, @sgstid, 
                @sgstpercent, @sgstamount, @igstid, @igstpercent, @igstamount, 
                @utgstid, @utgstpercent, @utgstamount, p_companyid, p_userid, 
                @purchaseinvoicedetailid
            );
			SET i = i + 1;
		END WHILE;
	End;        
    
    -- save purchaseinvoice JE
    CALL spc_savepurchaseinvoice_je(@purchaseinvoiceid, p_companyid, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseinvoice_delete`(	
	IN p_id INT
)
BEGIN
	IF((SELECT id FROM journalentrydetail WHERE subledgertypeid = 1251 AND FIND_IN_SET(p_id, billno) LIMIT 1) IS NULL) THEN
		SET @companyid = null;
		SELECT companyid INTO @companyid FROM purchaseinvoice WHERE id = p_id;
		SET @row_number = 0;
	   
		DROP TEMPORARY TABLE IF EXISTS tempinvoice;
		CREATE TEMPORARY TABLE tempinvoice
		
		SELECT (@row_number:=@row_number + 1) AS num, id, itembatch, itemid, purchaseinvoiceid, invoiceqty from (
			SELECT 
				id, 
				itembatch, 
				itemid,
				purchaseinvoiceid,
				(quantity + freequantity) as invoiceqty
			FROM purchaseinvoicedetail 
			where purchaseinvoiceid = p_id
		) 
		as tblpurchaseinvoicedetail;
		
		BEGIN
			DECLARE n INT DEFAULT 0;
			DECLARE i INT DEFAULT 0;
			DECLARE j INT DEFAULT 0;
			SELECT COUNT(*) FROM tempinvoice INTO n;
			 
			WHILE i<n DO 
			
				SET @tid = null;
				SET @purchaseinvoiceid = null;
				SET @itembatch = null;
				SET @itemid = null;
				SET @invoiceqty = null;
				SET @batchliveqty = null;
				
				select id, purchaseinvoiceid, itembatch, itemid, invoiceqty into @tid, @purchaseinvoiceid, @itembatch, @itemid, @invoiceqty from tempinvoice where num = i+1;
			
				SELECT fnc_itembatchlivestock(@itemid, @itembatch, (SELECT deliverytowarehouseid FROM purchaseinvoice WHERE id = p_id), @companyid) INTO @batchliveqty;
				IF(@batchliveqty < @invoiceqty) THEN
					SET j = j+1;
				END IF;
				
				SET i = i + 1;
			END WHILE;
			
			IF(j > 0) THEN
				SELECT -1 as result;
			ELSE
				SET SQL_SAFE_UPDATES = 0;
				
				BEGIN
					DECLARE n INT DEFAULT 0;
					DECLARE i INT DEFAULT 0;
					SELECT COUNT(*) INTO n FROM purchaseinvoicedetail where purchaseinvoiceid = p_id;
					 
					WHILE i<n DO 
					
						SET @tid = null;
						SET @itembatch = null;
						SET @itemid = null;
						
						select id, itembatch, itemid into @tid, @itembatch, @itemid from purchaseinvoicedetail where purchaseinvoiceid = p_id;
						
						-- Delete itembatch
						DELETE FROM materialmovement 
						WHERE itembatch = @itembatch
						AND transactiontypeid = 681;
						
						SET i = i + 1;
					END WHILE;
				END;
				
				SELECT id INTO @jeid FROM journalentry WHERE transactionid = p_id AND narration = 'Purchase invoice JE' OR narration = 'Freight JE';
				DELETE FROM journalentry WHERE id = @jeid;
				DELETE FROM journalentrydetail WHERE journalentryid = @jeid;
				
				DELETE FROM purchaseinvoicedetail WHERE purchaseinvoiceid = p_id;
				
				DELETE FROM purchaseinvoice WHERE id = p_id;

				SELECT 'Deleted' as result;
			END IF;
		End;
	ELSE 
		SELECT "In Outgoing Payment" as result;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseinvoice_save`(
		IN p_id INT,
        IN p_invoicedate DATE,
        IN p_postingdate DATE,
        IN p_duedate DATE,
        IN p_purchaseinvoiceno VARCHAR(30),
		IN p_vendorid INT,
        IN p_isservice TINYINT(4),
        IN p_grpono VARCHAR(1000),
        IN p_purchaseorderid VARCHAR(200),
        IN p_serviceno INT,
        IN p_subject VARCHAR(200),
        IN p_referenceno VARCHAR(200),
		IN p_referencedate DATE,
        IN p_creditperiod INT, 
        IN p_nettotal DECIMAL(12,3),
		IN p_discount DECIMAL(12,3),
		IN p_taxtotal DECIMAL(12,3),
        IN p_frieght DECIMAL(12,3),
        IN p_subtotal DECIMAL(12,3),
        IN p_remark VARCHAR(200),
		IN p_transactionTypeid INT,
        IN p_deliveryfromaddressid INT,
        IN p_deliverytowarehouseid INT,
        IN p_towarehousebinid INT,
        IN p_deliveryfromstatecode VARCHAR(200),
		IN p_deliverytostatecode VARCHAR(200),
        IN p_tdsid INT(11),
        IN p_tdsamount DECIMAL(12,3),
        IN p_pendingtdsamount DECIMAL(12,3),
        IN p_companyid INT,
		IN p_userid INT,
		OUT out_id INT
)
BEGIN

	SET @action = null;
    -- SET @duedate = null;
    
    	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
        -- if purchase invoice no is already exists in table then create new docseries no. and insert that in table(Savita)
		SET @purchaseinvoiceno = null;
        
        IF EXISTS(SELECT id FROM purchaseinvoice WHERE purchaseinvoiceno = p_purchaseinvoiceno LIMIT 1) THEN
			CALL spc_financialyeardocseries_newseries(
				'PI', p_companyid, @purchaseinvoiceno
			);
		ELSE
			SET @purchaseinvoiceno = p_purchaseinvoiceno;
		END IF;
        
		INSERT INTO purchaseinvoice 
				(invoicedate, postingdate,duedate, purchaseinvoiceno,vendorid, isservice, grpono, purchaseorderid, serviceno, subject, referenceno,
                referencedate, creditperiod, nettotal, discount,
                taxtotal, frieght, subtotal, pendingtotal, remark,transactiontypeid,deliveryfromaddressid,deliverytowarehouseid, towarehousebinid,
                deliveryfromstatecode,deliverytostatecode, tdsid, tdsamount, pendingtdsamount, companyid)
			VALUES 
				(p_invoicedate, p_postingdate,p_duedate, @purchaseinvoiceno,  p_vendorid, p_isservice, p_grpono, p_purchaseorderid, p_serviceno, p_subject, p_referenceno,
                p_referencedate, p_creditperiod,  p_nettotal, p_discount,
                p_taxtotal, p_frieght, p_subtotal, p_subtotal, p_remark,p_transactiontypeid,
                p_deliveryfromaddressid, p_deliverytowarehouseid, p_towarehousebinid,
                p_deliveryfromstatecode, p_deliverytostatecode, p_tdsid, p_tdsamount, p_pendingtdsamount, p_companyid);
			
		IF(p_grpono IS NOT NULL) THEN
			UPDATE grpo
            set statusid = 642
			where FIND_IN_SET(p_grpono, id);
		END IF;
        
		SET @action = 'INSERT';
	ELSE
		IF((SELECT id FROM journalentrydetail WHERE subledgertypeid = 1251 AND FIND_IN_SET(p_id, billno) LIMIT 1) IS NULL) THEN
		
			SET @jeid = null;
			SELECT id INTO @jeid FROM journalentry WHERE transactionid = p_id AND narration = 'Purchase invoice JE' OR narration = 'Freight JE';
			DELETE FROM journalentry WHERE id = @jeid;
			DELETE FROM journalentrydetail WHERE journalentryid = @jeid;
		
			UPDATE purchaseinvoice
					SET
					invoicedate = p_invoicedate,
					postingdate = p_postingdate,
					duedate =p_duedate,
					purchaseinvoiceno = p_purchaseinvoiceno,
					vendorid = p_vendorid, 
					isservice = p_isservice,
					grpono = p_grpono,
					purchaseorderid = p_purchaseorderid,
					serviceno = p_serviceno,
					subject = p_subject,
					referenceno = p_referenceno,
					referencedate = p_referencedate,
					creditperiod = p_creditperiod,
					nettotal = p_nettotal,
					discount = p_discount,
					taxtotal = p_taxtotal,
					frieght = p_frieght,
					subtotal = p_subtotal,
					remark = p_remark,
					transactiontypeid=p_transactiontypeid,
					deliveryfromaddressid=p_deliveryfromaddressid,
					deliverytowarehouseid = p_deliverytowarehouseid,
					towarehousebinid = p_towarehousebinid,
					deliveryfromstatecode = p_deliveryfromstatecode,
					deliverytostatecode = p_deliverytostatecode,
					companyid = p_companyid,
					tdsid = p_tdsid, 
					tdsamount = p_tdsamount,
					pendingtdsamount = p_pendingtdsamount,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
					
				SET @action = 'UPDATE';     
		ELSE
			SELECT "In Outgoing Payment" as result;
        END IF;
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseinvoice_search`( 

	IN p_companyid INT 
)
BEGIN
	SELECT PI.id,
           DATE_FORMAT(PI.invoicedate,'%d/%m/%Y') as invoicedate,
           vendorid,
           PI.grpono,
           PI.purchaseorderid,
           PI.subject,
           PI.referenceno,
           DATE_FORMAT(PI.referencedate,'%d/%m/%Y') as referencedate,
           PI.creditperiod,
           PI.nettotal,
           PI.discount,
           PI.taxtotal,
           PI.frieght,
           PI.subtotal,
           PI.remark,
           transactiontypeid,
           deliveryfromaddressid,
           deliverytowarehouseid,
           PI.towarehousebinid,
           WB.binname as towarehousebinname,
		   deliveryfromstatecode,
		   deliverytostatecode,
		   PT.partyname as suppliername,
		   PA.address as delfromfulladdress,
		   WH.address as warehousefulladdress,
		   ST.isunionterritory as warehouseisunionterritory,
		   ST1.isunionterritory as deliveryfromisunionterritory,
           PI.purchaseinvoiceno,
           GR.grpono as grpodocseriesno,
		   DATE_FORMAT(PI.duedate,'%d/%m/%Y') as duedate,
		   DATE_FORMAT(PI.postingdate,'%d/%m/%Y') as postingdate,
           PI.tdsid,
           IFNULL(PI.tdsamount,0) as tdsamount,
           IFNULL(T.rate,0) as tds,
           PI.discount
           
    FROM  purchaseinvoice PI
    
    LEFT JOIN party PT ON PI.vendorid = PT.id
	LEFT JOIN partyaddress PA ON PI.deliveryfromaddressid = PA.id
	LEFT JOIN warehouse WH ON PI.deliverytowarehouseid = WH.id
    LEFT JOIN warehousebin WB ON PI.towarehousebinid = WB.id
	LEFT JOIN `state` ST ON WH.stateid = ST.id
	LEFT JOIN `state` ST1 ON PA.stateid = ST1.id
	LEFT JOIN grpo GR ON GR.id = PI.grpono
	LEFT JOIN account_tds T ON T.id in(PI.tdsid)
    WHERE 
          PI.companyid = p_companyid
	ORDER BY 
		PI.id DESC;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseinvoice_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT  PT.partyname as suppliername,
			SPO.id as purchaseorderid,
			DATE_FORMAT(SPO.servicedate,'%d/%m/%Y') as purchaseorderdate,
			SPO.deliveryfromaddressid,
			SPO.deliverytowarehouseid,
			W.warehousename,
			SPO.deliveryfromstatecode,
			SPO.deliverytostatecode,
			PA.address as delfromfulladdress,
			WH1.address as warehousefulladdress,
			ST.isunionterritory as warehouseisunionterritory,
			ST1.isunionterritory as deliveryfromisunionterritory,
			SPO.servicepono as purchaseorderno

		FROM 
			servicepo SPO
		
		LEFT JOIN party PT ON SPO.partnerid  = PT.id
		LEFT JOIN warehouse W ON W.id = SPO.deliverytowarehouseid
		LEFT JOIN partyaddress PA ON SPO.deliveryfromaddressid = PA.id
		LEFT JOIN warehouse WH1 ON SPO.deliverytowarehouseid = WH1.id
		LEFT JOIN `state` ST ON WH1.stateid = ST.id
		LEFT JOIN `state` ST1 ON PA.stateid = ST1.id
		
		WHERE
			SPO.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaselist_bydate`(
	IN p_transaction VARCHAR(200),
    IN p_from_date DATE,
    IN p_to_date DATE
)
BEGIN

	IF(p_transaction = "purchaseinvoice") THEN
		SELECT PI.purchaseinvoiceno,
			   DATE_FORMAT(PI.invoicedate,'%d/%m/%Y') as invoicedate,
               PI.subtotal,
               REF.refname as transactiontype,
               PI.tdsamount,
               PI.pendingtdsamount
		FROM purchaseinvoice PI
        INNER JOIN `reference` REF ON REF.id = PI.transactiontypeid
        
        WHERE PI.invoicedate BETWEEN p_from_date AND p_to_date;
    
    ELSEIF(p_transaction = "grpo") THEN
		SELECT G.grpono,
			   DATE_FORMAT(G.grpodate,'%d/%m/%Y') as grpodate,
               PA.partyname as supplier,
               W.warehousename,
               WB.binname,
               REF.refname as status
		FROM grpo G
        INNER JOIN party PA ON PA.id = G.supplierid
        INNER JOIN warehouse W ON W.id = G.towarehouseid
		INNER JOIN warehousebin WB ON WB.id = G.towarehousebinid
		INNER JOIN `reerence` REF ON REF.id = G.statusid
        
		WHERE G.grpodate BETWEEN p_from_date AND p_to_date;
               
    ELSEIF(p_transaction = "purchaseorder") THEN
		SELECT PO.purchaseorderno,
			   DATE_FORMAT(PO.podate,'%d/%m/%Y') as podate,
               REF.refname as transactiontype,
               PA.partyname as vendor,
               REF1.refname as module
		FROM purchaseorder PO
        INNER JOIN `reference` REF ON REF.id = PO.transactiontypeid
        INNER JOIN `reference` REF1 ON REF1.id = PO.moduleid
        INNER JOIN party PA ON PA.id = PO.vendorid
        WHERE PO.podate BETWEEN p_from_date AND p_to_date;           
	
    END IF;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseorderdetail_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN

    DELETE FROM purchaseorderdetail WHERE purchaseorderid = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'purchaseorderdetail', p_id, 'delete', p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseorderdetail_save`(
	IN p_id INT,
	IN p_purchaseorderid INT,
    IN p_itemid INT,
    IN p_chicksageindays INT(11),
    IN p_quantity DECIMAL (15,3),
    IN p_freequantitypercent DECIMAL(15,3),
    IN p_itemunitid INT(11),
    IN p_unitcost DECIMAL(8,3),
    IN p_itemdiscount DECIMAL(8,3),
    IN p_taxid INT,
    IN p_taxpercent DECIMAL(9,3),
    IN p_cgstid INT(11),
    IN p_cgstpercent DECIMAL(9,3),
    IN p_cgstamount DECIMAL(15,3),
    IN p_sgstid INT(11),
    IN p_sgstpercent DECIMAL(9,3),
    IN p_sgstamount DECIMAL(15,3),
    IN p_igstid INT(11),
    IN p_igstpercent DECIMAL(9,3),
    IN p_igstamount DECIMAL(15,3),
    IN p_utgstid INT(11),
    IN p_utgstpercent DECIMAL(9,3),
    IN p_utgstamount DECIMAL(15,3),
	IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO purchaseorderdetail 
				(purchaseorderid, itemid, chicksageindays,
                quantity, freequantitypercent, pendinggrpoquantity, 
                itemunit, unitprice, itemdiscount, taxid,taxpercent,cgstid,
                cgstpercent, cgstamount,sgstid,sgstpercent,sgstamount,igstid,igstpercent,
                igstamount,utgstid,utgstpercent,utgstamount,
                companyid)
			VALUES 
				(p_purchaseorderid, p_itemid, p_chicksageindays, 
                p_quantity, p_freequantitypercent, p_quantity,
                p_itemunitid, p_unitcost, p_itemdiscount, 
                p_taxid,p_taxpercent,p_cgstid,p_cgstpercent, p_cgstamount
                ,p_sgstid,p_sgstpercent, p_sgstamount,p_igstid,p_igstpercent,p_igstamount,
                p_utgstid,p_utgstpercent, p_utgstamount,p_companyid);
                
		SET @action = 'INSERT';
       SET @purchaserequestid = null;
        select purchaserequestid INTO @purchaserequestid from purchaseorder WHERE id = p_purchaseorderid;
        	UPDATE purchaserequestdetail
				set itemstatusid = 1642
			where purchaserequestid = @purchaserequestid AND 
				  itemid = p_itemid;

	ELSE
    
		UPDATE purchaseorderdetail
			SET purchaseorderid=p_purchaseorderid, 
				itemid = p_itemid, 
                chicksageindays = p_chicksageindays,
                quantity = p_quantity, 
                freequantitypercent = p_freequantitypercent,
                pendinggrpoquantity = p_quantity,
                itemunit = p_itemunitid, 
                unitprice = p_unitcost, 
                itemdiscount = p_itemdiscount, 
                taxid = p_taxid,
                taxpercent= p_taxpercent,
                cgstid = p_cgstid,
                cgstpercent= p_cgstpercent,
                cgstamount = p_cgstamount,
                sgstid = p_sgstid,
                sgstpercent =p_sgstpercent,
                sgstamount =p_sgstamount,
                igstid = p_igstid,
                igstpercent =p_igstpercent,
                igstamount = p_igstamount,
                utgstid = p_utgstid,
                utgstpercent =p_utgstpercent,
                utgstamount = p_utgstamount,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'purchaseorderdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseorderdetail_search`(
	IN p_purchaseorderid INT,
    IN p_companyid INT
)
BEGIN
SET @@sql_mode = '';
	SELECT 
		POD.id as purchaseorderdetailid,
		POD.purchaseorderid,
		POD.itemid,
        IT.itemcode,
        IT.itemname,
        POD.chicksageindays,
		POD.quantity as requiredquantity,
        POD.freequantitypercent,
        POD.pendinggrpoquantity,
		POD.itemunit as itemunitid,
		unitprice,
		itemdiscount,
		POD.taxid,     
        REF.refname,
        IT.itemgroupid,
        IG.groupname,
        G.statusid as grpostatusid,
        POD.taxpercent,
	    POD.cgstpercent,
        POD.cgstamount,
        POD.sgstpercent,
        POD.sgstamount,
        POD.igstpercent,
		POD.igstamount,
        POD.utgstpercent,
        POD.utgstamount,
        POD.sgstid,
	    POD.cgstid,
	    POD.igstid,
	    POD.utgstid,
        G.id as grpoid
	FROM 
		purchaseorderdetail POD
        
	LEFT JOIN item IT ON POD.itemid = IT.id
    LEFT JOIN itemgroup IG ON IG.id = IT.itemgroupid
	LEFT JOIN tax TX ON TX.id = POD.taxid
    LEFT JOIN `reference` REF ON REF.id = POD.itemunit
    LEFT JOIN grpo G ON G.purchaseorderid = POD.purchaseorderid
    
	WHERE 
		 POD.purchaseorderid = p_purchaseorderid
         AND POD.companyid = p_companyid
         
	GROUP BY POD.id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseorderdetail_select`(
	IN p_id INT
)
BEGIN

	SELECT id,
		purchaseorderid,
		itemid,
        chicksageindays,
		quantity,
        freequantitypercent,
        pendinggrpoquantity,
		itemunit,
		unitprice,
		itemdiscount,
		taxid
	FROM 
		purchaseorderdetail

	WHERE 
          id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseorderlist_search`(
	IN p_module_type INT(11),
	IN p_from_date date,
	IN p_to_date date,
	IN p_supplier INT(11)
)
BEGIN
	SELECT 
		PO.id,
        PO.purchaserequestid,
        PO.purchaseorderno,
        PO.vendorid,
		PO.moduleid,
        PO.transactiontypeid,
		PO.discount,
		PO.remark,
        PO.statusid,
        PO.shipfromwarehouseid,
        PO.potype,
        PO.deliveryfromaddressid,
        PO.deliverytowarehouseid,
        PO.deliveryfromstatecode,
        PO.deliverytostatecode,
        PO.companyid,
        PT.partyname,
        DATE_FORMAT(PO.podate,'%d/%m/%Y') as podate,
        DATE_FORMAT(PO.deliverydate,'%d/%m/%Y') as deliverydate,
        RF1.refname status,
        RF2.refname module,
        PA.address as delfromfulladdress,
        WH1.address as warehousefulladdress,
		WH1.warehousename as deliverytowarehousename
        
    FROM `purchaseorder` AS PO
    
    LEFT JOIN party PT ON PT.id = PO.vendorid
    
	LEFT JOIN partyaddress PA ON PO.deliveryfromaddressid = PA.id
	LEFT JOIN warehouse WH1 ON PO.deliverytowarehouseid = WH1.id
    
    INNER JOIN `reference` AS RF1
    ON RF1.id = PO.statusid
    
    INNER JOIN `reference` AS RF2
    ON RF2.id = PO.moduleid
    
    INNER JOIN warehouse AS WH
    ON WH.id = PO.deliverytowarehouseid
    
    WHERE
		PO.moduleid = p_module_type
	AND PO.vendorid = p_supplier
    AND (PO.podate BETWEEN p_from_date AND p_to_date)
    ORDER BY PO.purchaseorderno DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseorderWithoutgrpo_bymodueid`(
    IN p_moduleid INT,
	IN p_companyid INT
)
BEGIN
	SET @@sql_mode = ' ';
	IF(p_moduleid = 726) THEN 
		SELECT PO.id,
			PO.vendorid,
			PT.partyname,
			PO.discount,
			PO.potype,
			PO.purchaseorderno,
			DATE_FORMAT(PO.podate,'%d/%m/%Y') as podate,
			PO.deliverytowarehouseid as towarehouseid,
			W.warehousename
			-- fnc_purchaseorder_remainingquantity(PO.id,p_companyid) INTO @remainingquantity
		FROM 
			purchaseorder PO	
		LEFT JOIN feedmill_acknowledgementslipdetail ASD ON ASD.purchaseorderid = PO.id
		LEFT JOIN purchaseorderdetail POD ON POD.purchaseorderid = PO.id
		LEFT JOIN warehouse W ON W.id = PO.deliverytowarehouseid
		LEFT JOIN grpo G ON G.purchaseorderid = PO.id
		LEFT JOIN party PT ON PO.vendorid = PT.id
	   
		
		WHERE 
			PO.companyid = p_companyid AND
			PO.moduleid = p_moduleid
			AND POD.pendinggrpoquantity > 0
			AND PO.statusid <> 523
            AND ASD.id IS NULL
		 GROUP BY 
			 PO.id;
    ELSE
		SELECT PO.id,
			PO.vendorid,
			PT.partyname,
			PO.discount,
			PO.potype,
			PO.purchaseorderno,
			DATE_FORMAT(PO.podate,'%d/%m/%Y') as podate,
			PO.deliverytowarehouseid as towarehouseid,
			W.warehousename
			-- fnc_purchaseorder_remainingquantity(PO.id,p_companyid) INTO @remainingquantity
		FROM 
			purchaseorder PO	
		
		LEFT JOIN purchaseorderdetail POD ON POD.purchaseorderid = PO.id
		LEFT JOIN warehouse W ON W.id = PO.deliverytowarehouseid
		LEFT JOIN grpo G ON G.purchaseorderid = PO.id
		LEFT JOIN party PT ON PO.vendorid = PT.id
	   
		
		WHERE 
			PO.companyid = p_companyid AND
			PO.moduleid = p_moduleid
			AND POD.pendinggrpoquantity > 0
			AND PO.statusid <> 523
			
		 GROUP BY 
			 PO.id;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseorderwithoutgrpo_search`(
	IN p_companyid INT
)
BEGIN

	SELECT PO.id,
		PO.vendorid,
        PT.partyname,
        PO.discount,
        PO.potype,
        PO.purchaseorderno,
        PO.purchaseorderno as pono,
        DATE_FORMAT(PO.podate,'%d/%m/%Y') as podate,
        PO.deliverytowarehouseid as towarehouseid,
        W.warehousename,
        PO.moduleid
		-- fnc_purchaseorder_remainingquantity(PO.id,p_companyid) INTO @remainingquantity
	FROM 
		purchaseorder PO	
	
    LEFT JOIN purchaseorderdetail POD ON POD.purchaseorderid = PO.id
	LEFT JOIN warehouse W ON W.id = PO.deliverytowarehouseid
    LEFT JOIN grpo G ON G.purchaseorderid = PO.id
	LEFT JOIN party PT ON PO.vendorid = PT.id
   
    -- LEFT JOIN grpodetail GD ON G.id = GD.grpoid
	
    WHERE 
		PO.companyid = p_companyid
       -- and @remainingquantity > 0
        AND POD.pendinggrpoquantity > 0
        AND PO.statusid <> 523
        
	 GROUP BY 
		 PO.id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseorder_delete`(
	IN p_id INT
)
BEGIN
	
    IF((SELECT id FROM grpo WHERE purchaseorderid = p_id) IS NULL) THEN
		DELETE FROM purchaseorder WHERE id = p_id;
		DELETE FROM purchaseorderdetail WHERE purchaseorderid = p_id;
        
        SELECT "Deleted" as result;
	ELSE
		SELECT "In GRPO" as result;
    END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseorder_report`(
IN p_fromdate date,
IN p_todate date,
IN p_companyid INT(11) )
BEGIN

SELECT *, (sgstamount+cgstamount+igstamount+linetotal) as Total
From( 

SELECT *,   
			  ((quantity*unitprice)-(discountamt)) as linetotal
			 
		
   
From( 
    
    
SELECT 	     
			PO.id,
            PO.purchaseorderno,
			DATE_FORMAT(podate,'%d/%m/%Y') as podate,
            PO.vendorid,
            PO.discount,
            POD.itemid,
            POD.itemunit,
            POD.unitprice,
            POD.itemdiscount,
            POD.taxid,
            POD.quantity,
			(((POD.quantity*POD.unitprice)*(POD.itemdiscount))/100) as discountamt,
            (POD.quantity*POD.unitprice) as itemcost,
            -- ((POD.quantity*POD.unitprice)-(POD.itemdiscount)) as linetotal,
            R.refname as itenunit,
			R.refname as itemunitname,
            I.itemname,
            T.taxpercent,
            P.partyname,
            IFNULL(POD.sgstamount, 0) as sgstamount,
			IFNULL(POD.cgstamount, 0) as cgstamount,
			IFNULL(POD.igstamount, 0) as igstamount
       
            
    
	FROM purchaseorder PO
    LEFT JOIN purchaseorderdetail POD ON PO.id = POD.purchaseorderid
    LEFT JOIN `reference` R ON POD.itemunit = R.id
	LEFT JOIN item I ON POD.itemid = I.id
    LEFT JOIN tax T ON POD.taxid = T.id
    LEFT JOIN party P ON PO.vendorid = P.id
WHERE
    PO.podate BETWEEN p_fromdate AND p_todate 
    AND PO.companyid = p_companyid )  as temp ) as tempone;
    


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseorder_save`(
		IN p_id INT,
		IN p_vendorid INT,
        IN p_purchaserequestid VARCHAR(200),
		IN p_purchaseorderno VARCHAR(200),
		IN p_podate DATE,
		IN p_deliverydate DATE,
		IN p_discount DECIMAL(8,3),
		IN p_remark VARCHAR(200),
        IN p_statusid INT,
		IN p_shipfromwarehouseid INT,
        IN p_transactionTypeid VARCHAR(100),
        IN p_deliveryfromaddressid INT,
        IN p_deliverytowarehouseid INT,
        IN p_deliveryfromstatecode VARCHAR(200),
		IN p_deliverytostatecode VARCHAR(200),
        IN p_moduleid INT(11),
        IN p_companyid INT,
		IN p_userid INT,
		OUT out_id INT
)
BEGIN

	SET @action = null;
	
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		-- if purchase order no is already exists in table then create new docseries no. and insert that in table(Savita)
		SET @purchaseorderno = null;
        IF EXISTS(SELECT id FROM purchaseorder WHERE purchaseorderno = p_purchaseorderno LIMIT 1) THEN
			CALL spc_financialyeardocseries_newseries(
				'PO', p_companyid, @purchaseorderno
			);
		ELSE
			SET @purchaseorderno = p_purchaseorderno;
		END IF;
    
		INSERT INTO purchaseorder 
				(vendorid, purchaserequestid, purchaseorderno, podate, deliverydate, 
                discount, remark, statusid, 
                shipfromwarehouseid,transactiontypeid,deliveryfromaddressid,deliverytowarehouseid,
                deliveryfromstatecode,deliverytostatecode, moduleid, companyid)
			VALUES 
				(p_vendorid, p_purchaserequestid, @purchaseorderno,
                p_podate, p_deliverydate, p_discount, p_remark, 
                p_statusid, p_shipfromwarehouseid,p_transactiontypeid,p_deliveryfromaddressid,
                p_deliverytowarehouseid, p_deliveryfromstatecode, p_deliverytostatecode, p_moduleid, p_companyid);
                
                -- purchase request status upadte
			/*UPDATE purchaserequest
				set statusid = 93
			where id = p_purchaserequestid; */
                
		SET @action = 'INSERT';

	ELSE
		UPDATE purchaseorder
		SET vendorid = p_vendorid,
			purchaserequestid = p_purchaserequestid,
			purchaseorderno = p_purchaseorderno,
			podate = p_podate,
			deliverydate = p_deliverydate,
			shipfromwarehouseid = p_shipfromwarehouseid,
			statusid = p_statusid,
			discount = p_discount,
			remark = p_remark,
			transactiontypeid=p_transactiontypeid,
			deliveryfromaddressid=p_deliveryfromaddressid,
			deliverytowarehouseid = p_deliverytowarehouseid,
			deliveryfromstatecode = p_deliveryfromstatecode,
			deliverytostatecode = p_deliverytostatecode,
			moduleid = p_moduleid,
			companyid = p_companyid,
			
			id = LAST_INSERT_ID(id)
		WHERE
			id = p_id
			AND companyid = p_companyid;
			
		SET @action = 'UPDATE';
			
		SELECT "Updated" as result;
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'purchaseorder', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseorder_search`(
	IN p_companyid INT
)
BEGIN


	SELECT PO.id,
		PO.vendorid,
        PO.purchaserequestid,
        PT.partyname,
		DATE_FORMAT(PO.podate,'%d/%m/%Y') as podate,
        DATE_FORMAT(PO.deliverydate,'%d/%m/%Y') as deliverydate,
		PO.shipfromwarehouseid,
        WH.warehousename,
        PO.purchaseorderno,
		PO.discount,
		PO.remark,
        PO.statusid,
		REF.refname as statusname,
        transactiontypeid,
        deliveryfromaddressid,
        deliverytowarehouseid,
		deliveryfromstatecode,
        deliverytostatecode,
        PA.address as delfromfulladdress,
        WH1.address as warehousefulladdress,
		WH1.warehousename as deliverytowarehousename,
        ST.isunionterritory as warehouseisunionterritory,
        ST1.isunionterritory as deliveryfromisunionterritory,
        PO.moduleid,
        SUM(POD.pendinggrpoquantity) as pendinggrpoquantity
		
	FROM 
		purchaseorder PO	
        
        LEFT JOIN purchaseorderdetail POD ON POD.purchaseorderid = PO.id
	LEFT JOIN party PT ON PO.vendorid = PT.id
    LEFT JOIN warehouse WH ON PO.shipfromwarehouseid = WH.id
    LEFT JOIN `reference` REF ON PO.statusid = REF.id
	LEFT JOIN partyaddress PA ON PO.deliveryfromaddressid = PA.id
	LEFT JOIN warehouse WH1 ON PO.deliverytowarehouseid = WH1.id
    LEFT JOIN `state` ST ON WH1.stateid = ST.id
	LEFT JOIN `state` ST1 ON PA.stateid = ST1.id
	
    WHERE 
		PO.companyid = p_companyid
        
    GROUP BY PO.id    
	ORDER BY 
		PO.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseorder_select`(
	IN p_id INT
)
BEGIN

	SELECT PO.id,
		PO.vendorid,
        DATE_FORMAT(PO.podate,'%d/%m/%Y') as podate,
		PO.deliverydate,
		PO.shipfromwarehouseid,
		PO.discount,
		PO.remark,
        PO.statusid,
        G.id,
		transactiontypeid,
        deliveryfromaddressid,
        deliverytowarehouseid,
		deliveryfromstatecode,
        deliverytostatecode,
        PO.moduleid
	FROM 
		purchaseorder PO
        LEFT JOIN grpo G ON G.purchaseorderid = PO.id
	WHERE 
		PO.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchasependingpuechaseorder_report`(
IN p_fromdate date,
IN p_todate date,
IN p_companyid INT(11)
)
BEGIN 

SET @@sql_mode = ' ';

-- Store result of sp in temprory table

DROP TEMPORARY TABLE IF EXISTS temppoorder ;
CREATE TEMPORARY TABLE temppoorder 

SELECT  PO.purchaseorderno,
		P.id As partyid,
		P.partyname,
		DATE_FORMAT( PO.podate,'%d/%m/%Y') as podate,
        I.itemname,
		POD.quantity,
		POD.itemdiscount,
        POD.unitprice,
        GD.quantity As inwardqty,
        POD.pendinggrpoquantity
        
         
     FROM purchaseorder PO
     LEFT JOIN grpo G ON PO.id = G.purchaseorderid   
	 LEFT JOIN party P  ON PO.vendorid =  P.id
	 LEFT JOIN purchaseorderdetail POD ON PO.id = POD.purchaseorderid
     LEFT JOIN grpodetail GD ON G.id = GD.grpoid AND POD.itemid = GD.itemid
     LEFT JOIN item I ON POD.itemid = I.id
	 LEFT JOIN `reference` REF ON I.itemunitid = REF.id
    
   
   
    WHERE  PO.podate BETWEEN p_fromdate AND p_todate AND
			POD.pendinggrpoquantity > 0 AND
			PO.companyid = p_companyid
            GROUP BY  POD.itemid;

-- store result of first temprory table into second temprary table
-- create entity item to store result 

 DROP TEMPORARY TABLE IF EXISTS temppoorder1;
	CREATE TEMPORARY TABLE temppoorder1
    
    select *, 'linename' as entity from temppoorder;
-- for sub total--
	 DROP TEMPORARY TABLE IF EXISTS temppoorder2;
	CREATE TEMPORARY TABLE temppoorder2	
    SELECT * from (
    SELECT * from temppoorder1
    UNION ALL	
				SELECT 
					purchaseorderno,
                     '' as partyid,
                     '' as partyname,
                     podate,
                     'Sub Total' as  itemname,
                   --  'Sub Total'as itemunitname,
                     SUM(quantity) as quantity,
                      SUM(itemdiscount) as itemdiscount,
                     '' as unitprice,
					SUM(inwardqty) as inwardqty,
                    SUM(pendinggrpoquantity) as pendinggrpoquantity,
					'subtotal' as entity
				FROM
					temppoorder
                   
						GROUP BY purchaseorderno
                        ) as tmpresult  ORDER BY entity;
	
SELECT * FROM temppoorder2;
     

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaseregister_report`(
 IN p_vendorids varchar(200),
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_companyid INT(11))
BEGIN
SET @@sql_mode = ' ';


	DROP TEMPORARY TABLE IF EXISTS tmppurregreport;
	CREATE TEMPORARY TABLE tmppurregreport
 SELECT PI.id,
			DATE_FORMAT(PI.invoicedate,'%d/%m/%Y') as date,
            PI.purchaseinvoiceno as docno,
			PI.vendorid as vendorid,
            PI.referenceno as billno,
            DATE_FORMAT(PI.referencedate,'%d/%m/%Y') as billdate,
            PID.itemid as itemid,
            PID.itemname as itemname,
            PID.quantity as quantity,
            PID.unitprice as rate,
            (PID.quantity*PID.unitprice)as amount,
			((PID.quantity*PID.unitprice)*PID.itemdiscount/100) as discountamount,
            PID.itemdiscount as itemdiscount,
            PID.taxid as taxid,
			PID.taxpercent as taxpercent,
		    T.taxname as taxname,
            ((PID.quantity*PID.unitprice)*PID.taxpercent/100)as taxamount,
            0 as freightamounts,
            I.itemcode as itemcode,
            P.partyname as partnername
 
	FROM
			purchaseinvoice PI
			LEFT JOIN purchaseinvoicedetail PID ON PI.id = PID.purchaseinvoiceid
            LEFT JOIN item I ON I.id = PID.itemid
			LEFT JOIN party P ON P.id = PI.vendorid
            LEFT JOIN tax T ON PID.taxid = T.id
    
	WHERE 
             FIND_IN_SET( PI.vendorid,p_vendorids) AND
			PI.invoicedate BETWEEN p_fromdate AND p_todate AND
            PI.companyid = p_companyid;
            
	DROP TEMPORARY TABLE IF EXISTS tmppurregreport1;
	CREATE TEMPORARY TABLE tmppurregreport1
	select *, 'item' as entity from tmppurregreport;
    
     
    select * from (
     select * from tmppurregreport1
     UNION ALL
        
      SELECT 
			'' as id,
			'' as `date`,
            docno,
			'' as vendorid,
            '' as billno,
			'' as billdate,
            '' as itemid,
            'Sub Total' as itemname,
            SUM(quantity),
            '' as rate,
            SUM(amount),
            SUM(discountamount),
            '' as itemdiscount,
            '' as taxid,
			'' as taxpercent,
		    '' as taxname,
            SUM(taxamount),
            SUM(freightamounts) as freightamount,
            '' as itemcode,
            '' as partnername,
			'subtotal' as entity
	FROM
			tmppurregreport
	GROUP BY docno 
    ) as tmpresult  ORDER BY docno, entity;
    
    
    
		SELECT 
            PID.taxid as taxid,
		    T.taxname as taxname,
            SUM(((PID.quantity)* (PID.unitprice)))as purchaseamount,
            PID.taxpercent as taxpercent,
            SUM(((PID.quantity)* (PID.unitprice)) *(PID.taxpercent)/100)as taxamount,
            (SUM(((PID.quantity)* (PID.unitprice)))+SUM(((PID.quantity)* (PID.unitprice)) *(PID.taxpercent)/100)) as grandtaxamount
 
	        FROM
			purchaseinvoice PI
			LEFT JOIN purchaseinvoicedetail PID ON PI.id = PID.purchaseinvoiceid
            LEFT JOIN tax T ON PID.taxid = T.id
    
	      WHERE 
            FIND_IN_SET( PI.vendorid,p_vendorids) AND
			PI.invoicedate BETWEEN p_fromdate AND p_todate AND
            PI.companyid = p_companyid
            group by PID.taxid
		
        union all
        SELECT 
            NULL as taxid,
		    'Grand Total' as taxname,
            SUM(((PID.quantity)* (PID.unitprice)))as totalpurchaseamount,
            NUll as taxpercent,
            SUM(((PID.quantity)* (PID.unitprice)) *(PID.taxpercent)/100)as totaltaxamount,
			
            (SUM(((PID.quantity)* (PID.unitprice)))+SUM(((PID.quantity)* (PID.unitprice)) *(PID.taxpercent)/100)) as totalgrandtaxamount
           
 
	        FROM
			purchaseinvoice PI
			LEFT JOIN purchaseinvoicedetail PID ON PI.id = PID.purchaseinvoiceid
            LEFT JOIN tax T ON PID.taxid = T.id
    
	      WHERE 
             FIND_IN_SET( PI.vendorid,p_vendorids) AND
			PI.invoicedate BETWEEN p_fromdate AND p_todate AND
            PI.companyid = p_companyid;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaserequestdetail_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	-- 

	DELETE FROM purchaserequestdetail
		WHERE
			id = p_id
			AND NOT EXISTS (
							SELECT PO.purchaserequestid from purchaserequest PR 
							INNER JOIN purchaserequestdetail PRD ON PR.id = PRD.purchaserequestid
							WHERE
								PRD.id = p_id
                                AND
                                (
									approvalby IS NULL
									OR
									(
										approvalby IS NOT NULL
										AND
										NOT EXISTS (SELECT PO.purchaserequestid FROM purchaseorder PO WHERE PO.purchaserequestid = p_id)
									)
								)
						);
    
    IF NOT EXISTS(SELECT * FROM purchaserequestdetail WHERE id = p_id) THEN
		
	-- record log
		CALL spc_commonlog_save(p_companyid, 'purchaserequestdetail', p_id, 'delete', p_userid);

		SET out_id = p_id;  
	
    ELSE
		SET out_id = -1;  
    
    END IF;
    
    
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaserequestdetail_save`(
	IN p_id INT,
	IN p_purchaserequestid INT,
    IN p_itemid INT,
    IN p_itemname VARCHAR(200),
    IN p_quantity Decimal(15,3),
    IN p_unitid INT,
    IN p_itemstatusid INT,
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO purchaserequestdetail 
				(purchaserequestid, itemid, itemname, quantity, unitid, itemstatusid, companyid)
			VALUES 
				(p_purchaserequestid, p_itemid, p_itemname, p_quantity, p_unitid, p_itemstatusid, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE purchaserequestdetail
			SET purchaserequestid = p_purchaserequestid, 
				itemid = p_itemid, 
                itemname = p_itemname, 
                quantity = p_quantity, 
                unitid = p_unitid, 
                itemstatusid = p_itemstatusid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'purchaserequestdetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaserequestdetail_search`(
    IN p_companyid INT
)
BEGIN

	SELECT PRD.id,
		purchaserequestid,
		itemid,
		I.itemname,
		quantity,
		unitid,
        REF1.refname AS unitname,
		PRD.companyid,
        PRD.unitid as itemunitid,
        I.taxcategoryid,
        I.itemgroupid
        
	FROM 
		purchaserequestdetail PRD
	
    LEFT JOIN `reference` REF1 ON PRD.unitid = REF1.id
	LEFT JOIN  item I ON PRD.itemid = I.id
  --   LEFT JOIN  item IG ON IG.id = I.itemgroupid
    
    WHERE
		
        PRD.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaserequestdetail_searchbyrequestid`(
    IN p_purchaserequestid INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
		PRD.id as purchaserequestdetailid,
		PRD.purchaserequestid,
		PRD.itemid,
		PRD.itemname,
		quantity,
		unitid as itemunitid,
        REF1.refname as itemunitname,
        I.unitcost,
        (quantity*I.unitcost) as itemtotalcost,
        PRD.companyid,
        IG.groupname,
        IG.id as itemgroupid,
        I.taxcategoryid,
		REF2.refname AS taxcategoryname
	FROM 
		purchaserequestdetail PRD
	
    LEFT JOIN `reference` REF1 ON PRD.unitid = REF1.id
	LEFT JOIN item I ON I.id = PRD.itemid
    LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
    LEFT JOIN `reference` REF2 ON I.taxcategoryid = REF2.id
    
    WHERE
		purchaserequestid = p_purchaserequestid
        AND
        PRD.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaserequestdetail_searchbytaxcategory`(
	IN p_taxcategoryid VARCHAR(50),
    IN p_purchaserequestid INT,
    IN p_companyid INT
)
BEGIN
 SET @taxcategoryid = p_taxcategoryid ;
	SELECT 
		PRD.id as purchaserequestdetailid,
		PRD.purchaserequestid,
		PRD.itemid,
		PRD.itemname,
		PRD.quantity,
		PRD.unitid as itemunitid,
        REF1.refname as itemunitname,
        I.unitcost,
        (PRD.quantity*I.unitcost) as itemtotalcost,
        PRD.companyid,
        IG.groupname,
        IG.id as itemgroupid,
        I.taxcategoryid,
		REF2.refname AS taxcategoryname,
        POD.itemid as availableitemid
	FROM 
		purchaserequestdetail PRD
	
    LEFT JOIN `reference` REF1 ON PRD.unitid = REF1.id
	LEFT JOIN item I ON I.id = PRD.itemid
    LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
    LEFT JOIN `reference` REF2 ON I.taxcategoryid = REF2.id
	LEFT JOIN purchaseorder PO ON PO.purchaserequestid = PRD.purchaserequestid
	LEFT JOIN purchaseorderdetail POD ON POD.purchaseorderid = PO.id AND POD.itemid = PRD.itemid
    
    WHERE
		PRD.purchaserequestid = p_purchaserequestid
        AND
        PRD.companyid = p_companyid AND 
        ((p_taxcategoryid = null OR p_taxcategoryid = 'null') OR FIND_IN_SET(I.taxcategoryid,@taxcategoryid))
		AND POD.itemid IS NULL ;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaserequestdetail_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	SELECT id,
		purchaserequestid,
		itemid,
		itemname,
		quantity,
		unitid,
		companyid
	FROM 
		purchaserequestdetail
    WHERE
		id = p_id 
        AND companyid = p_companyid;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaserequestlist_search`(
	IN p_from_date date,
	IN p_to_date date
)
BEGIN

	SELECT 
		PR.id,
		PR.requestsourceid,
		DATE_FORMAT(PR.requestdate,'%d/%m/%Y') as requestdate,
        DATE_FORMAT(PR.materialrequireddate,'%d/%m/%Y') as materialrequireddate,
		createdby,
        U.fullname AS createdbyname,
		approvedby,
        U1.fullname AS approvedbyname,
		PR.approvaldate,
		remark,
		PR.statusid,
        PR.tobatchid,
        PR.vendorid,
		PT.partyname,
        REF1.refname as statusname,
		PR.companyid,
        PR.purchaserequestno,
        REF.refname as requestsource
	FROM 
		purchaserequest PR
	
    LEFT JOIN user U ON PR.approvedby = U.id
    LEFT JOIN user U1 ON PR.approvedby = U1.id
    LEFT JOIN `reference` REF1 ON REF1.id = PR.statusid
    LEFT JOIN `reference` REF ON REF.id = PR.requestsourceid
   LEFT JOIN party PT ON PR.vendorid = PT.id
    

   WHERE 
		(PR.requestdate BETWEEN p_from_date AND p_to_date)
        order by  PR.id desc;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaserequest_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	-- Delete the purchase request if not approved / approved but purchaseorder is not created

	DELETE FROM purchaserequest
		WHERE 
			id = p_id
            AND 
            (approvalby IS NULL
				OR
				(
					approvalby IS NOT NULL
					AND
					NOT EXISTS (SELECT PO.purchaserequestid FROM purchaseorder PO WHERE PO.purchaserequestid = p_id)
				)
			);

	-- if purchase request record is deleted from all above condition, then delete purchaserequestdetail
	IF NOT EXISTS(SELECT * FROM purchaserequest WHERE id = p_id AND companyid = p_companyid) THEN
    
		DELETE FROM purchaserequestdetail WHERE purchaserequestid = p_id;
        
		-- record log
		CALL spc_commonlog_save(p_companyid, 'purchaserequest', p_id, 'delete', p_userid);

		SET out_id = p_id;

	ELSE
		SET out_id = -1;
        
    END IF;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaserequest_save`(
		IN p_id INT,
        IN p_purchaserequestno VARCHAR(200),
		IN p_requestsourceid INT(11),
		IN p_requestdate DATE,
		IN p_createdby INT,
		IN p_approvedby INT,
		IN p_remark VARCHAR(200),
        IN p_statusid INT,
        IN p_tobatchid INT,
        IN p_vendorid INT,
        IN p_materialrequireddate DATE,
        IN p_companyid INT,
		IN p_userid INT,
		OUT out_id INT

)
BEGIN

	SET @action = null;
    SET @p_approveddate = null;
  
    IF(NULLIF(p_id, '0') IS NULL) THEN
		-- if purchase request no is already exists in table then create new docseries no. and insert that in table(Savita)
		SET @purchaserequestno = null;
        IF EXISTS(SELECT id FROM purchaserequest WHERE purchaserequestno = p_purchaserequestno LIMIT 1) THEN
			CALL spc_financialyeardocseries_newseries(
				'PR', p_companyid, @purchaserequestno
			);
		ELSE
			SET @purchaserequestno = p_purchaserequestno;
		END IF;
        
		if(p_approvedby IS NOT NULL) THEN
			SET @p_approveddate	= CURDATE();
        END IF;
		IF( p_purchaserequestno IS NULL) then
			SET p_purchaserequestno = null;
            call spc_financialyeardocseries_newseries('PR',p_companyid,@purchaserequestno);
			-- select @purchaserequestno INTO p_purchaserequestno;
		END IF;
        
        
		INSERT INTO purchaserequest 
                (purchaserequestno, requestsourceid, requestdate, createdby, approvedby, approvaldate, remark, statusid, tobatchid, vendorid,materialrequireddate, companyid)                
			VALUES 
				(@purchaserequestno, p_requestsourceid, p_requestdate, p_createdby, p_approvedby, @p_approveddate, p_remark, p_statusid, p_tobatchid, p_vendorid,p_materialrequireddate, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE purchaserequest
			SET purchaserequestno = p_purchaserequestno,
                requestsourceid = p_requestsourceid, 
				requestdate = p_requestdate, 
                createdby = p_createdby, 
                remark = p_remark, 
                tobatchid = p_tobatchid,
                vendorid = p_vendorid,
                materialrequireddate = p_materialrequireddate,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
           

		-- First time approval / approved request can be cancelled if purchaseorder not created for it
        
		IF(p_approvedby IS NOT NULL) THEN
			
            UPDATE purchaserequest PR
				SET approvedby = p_userid,
					statusid = p_statusid,
					approvaldate = CURDATE()
            WHERE
				statusid != p_statusid
                AND NOT EXISTS (select PO.purchaserequestid from purchaseorder PO where PR.id = PO.purchaserequestid)
				AND id = p_id
				AND companyid = p_companyid;
            
        END IF;
            
                SET @action = 'UPDATE';
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'purchaserequest', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaserequest_search`(
	IN p_companyid INT
)
BEGIN

	SELECT 
		PR.id,
		PR.requestsourceid,
		DATE_FORMAT(PR.requestdate,'%d/%m/%Y') as requestdate,
        DATE_FORMAT(PR.materialrequireddate,'%d/%m/%Y') as materialrequireddate,
		createdby,
        U.fullname AS createdbyname,
		approvedby,
        U1.fullname AS approvedbyname,
		PR.approvaldate,
		remark,
		PR.statusid,
        PR.tobatchid,
        PR.vendorid,
		PT.partyname,
        REF1.refname as statusname,
		PR.companyid,
        PR.purchaserequestno,
        REF.refname as requestsource
	FROM 
		purchaserequest PR
	
    LEFT JOIN user U ON PR.approvedby = U.id
    LEFT JOIN user U1 ON PR.approvedby = U1.id
    LEFT JOIN `reference` REF1 ON REF1.id = PR.statusid
    LEFT JOIN `reference` REF ON REF.id = PR.requestsourceid
   LEFT JOIN party PT ON PR.vendorid = PT.id
    

   WHERE 
		PR.companyid = p_companyid
        order by  PR.id desc;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaserequest_searchbystatus`(
	IN p_statusid INT,
	IN p_companyid INT
)
BEGIN

	SELECT 
		PR.id,
		PR.requestsourceid,
        DATE_FORMAT(PR.requestdate,'%d/%m/%Y') as requestdate,
        REF1.refname as statusname,
		PR.companyid,
        PR.tobatchid,
        PR.vendorid,
        PT.partyname,
		PR.purchaserequestno,
        DATE_FORMAT(PR.materialrequireddate,'%d/%m/%Y') as materialrequireddate
	FROM 
		purchaserequest PR
	
    LEFT JOIN user U ON PR.approvedby = U.id
    LEFT JOIN user U1 ON PR.approvedby = U1.id
    LEFT JOIN `reference` REF1 ON REF1.id = PR.statusid
   LEFT JOIN party PT ON PR.vendorid = PT.id
	LEFT JOIN purchaserequestdetail PRD ON PRD.purchaserequestid = PR.id
     

   WHERE 
		PR.companyid = p_companyid
		AND PR.statusid = p_statusid
		AND PRD.itemstatusid =1641
	group by PR.id 
    ORDER BY PR.id DESC;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchaserequest_select`(
	IN p_id INT
)
BEGIN

	SELECT PR.id,
		PR.requestsourceid,
		PR.requestdate,
		PR.createdby,
		PR.approvedby,
		PR.approvaldate,
		PR.remark,
		PR.statusid,
		PR.companyid,
        PR.tobatchid,
        PR.vendorid,
        PT.partyname,
		I.taxcategoryid,
        DATE_FORMAT(PR.materialrequireddate,'%d/%m/%Y') as materialrequireddate,
		REF1.refname AS taxcategoryname
	FROM 
		purchaserequest PR
        
	LEFT JOIN party PT ON PR.vendorid = PT.id
    LEFT JOIN `reference` REF1 ON I.taxcategoryid = REF1.id
	LEFT JOIN  item I ON PRD.itemid = I.itemid
    WHERE
		id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchasereturn_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM purchase_return WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchasereturn_save`(
	IN p_id INT(11),
    IN p_date DATE,
    IN p_itemid INT(11),
    IN p_warehouseid INT(11),
    IN p_warehousebinid INT(11),
    IN p_transactionid INT(11),
    IN p_quantity DECIMAL(12,3),
    IN p_unitcost DECIMAL(12,3),
    IN p_amount DECIMAL(15,3),
    IN p_statusid INT(11),
    IN p_remark VARCHAR(200),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT OUT_ID INT(11)
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO purchase_return(
			`date`, 
            itemid, 
            warehouseid, 
            warehousebinid, 
            transactionid,
            quantity,
            unitcost,
            amount,
            statusid,
            remark,
            companyid)
        VALUES (
			p_date, 
            p_itemid, 
            p_warehouseid, 
            p_warehousebinid, 
            p_transactionid,
            p_quantity,
            p_unitcost,
            p_amount,
            p_statusid,
            p_remark,
            p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE purchase_return
        SET `date` = p_date, 
            itemid = p_itemid, 
            warehouseid = p_warehouseid, 
            warehousebinid = p_warehousebinid, 
            transactionid = p_transactionid,
            quantity = p_quantity,
            unitcost = p_unitcost,
            amount = p_amount,
            statusid = p_statusid,
            remark = p_remark,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- if status id approve
    IF(p_statusid = 6262) THEN
    
		SET @grpowithoutinvoiceledgerid = null;
        SELECT grpowithoutinvoiceledgerid
        INTO @grpowithoutinvoiceledgerid
        FROM common_setting
        WHERE companyid = p_companyid;
        
	   SET @branch = null;
	   SELECT L.branchid INTO @branch 
	   FROM location L
	   LEFT JOIN warehouse W ON W.locationid = L.id
	   WHERE W.id = p_warehouseid;
        
		BEGIN
			DECLARE j INT;
			 
			DECLARE material_itemid INT;
			DECLARE material_itembatch VARCHAR(300);
			DECLARE material_quantity INT;
			DECLARE material_unitcost DECIMAL(30,6);
			SET @row_number = 0;
			SET @@sql_mode = '';
			SET @reccount = 0;
			SET j = 0;
			SET @materialissue_outid = null;
			CALL spc_materialissue_save(
				null, 
				p_date, 
				381, 
				null, 
				362, 
				'Purchase Return', 
				p_userid, 
				p_warehouseid,
				p_warehousebinid,
				null, 
				null, 
				p_companyid, 
				p_userid, 
				@materialissue_outid
			);
			
			DROP TEMPORARY TABLE IF EXISTS tempitembatch;
		
			CREATE TEMPORARY TABLE tempitembatch
			
			SELECT itemid, itembatch, stockin, transactiondate,itemunitcost,
			fnc_itembatchstockout(itemid, IFNULL(itembatch,''), p_warehouseid, p_warehousebinid) as stockout,
			(@row_number := @row_number + 1) as recordrank 
			FROM(
		
				SELECT itemid, itembatch,SUM(quantity) as stockin,transactiondate,(itemvalue/quantity) as itemunitcost
				FROM materialmovement
				WHERE 
					itemid = p_itemid AND
					companyid = p_companyid AND
					towarehouseid = p_warehouseid AND
					towarehousebinid = p_warehousebinid AND
					transactiontypeid in (681,682,684,685) AND itembatch is not null
					GROUP BY itemid, itembatch
				   
			) stocktable order by transactiondate asc;
			SELECT COUNT(*) INTO @reccount FROM  tempitembatch;
		
			WHILE j < @reccount DO
			
				SET @issuequantity = 0;
				
				SELECT itemid, itembatch, (stockin - stockout) as quantity, itemunitcost
				INTO  material_itemid, material_itembatch, material_quantity, material_unitcost
				FROM  tempitembatch where recordrank = j+1 ;
			 
				 IF (p_quantity > 0 ) THEN
					IF(material_quantity > 0) THEN
						IF (material_quantity >= p_quantity) THEN
							SET @issuequantity = p_quantity;
							SET p_quantity = 0;
						ELSE 
						
							SET @issuequantity = material_quantity;
							SET p_quantity = p_quantity - material_quantity;
						END IF;
						
					END IF;
					 
					IF (@issuequantity >0) THEN
					  SET @materialissuedetail_outid = null;
					  SET @movement_outid = null;
					  
					  CALL spc_materialissuedetail_save(
						null, @materialissue_outid, p_itemid, 
						(SELECT itemname FROM item WHERE id = p_itemid), 
						@issuequantity, material_unitcost,(@issuequantity*material_unitcost), 
						(SELECT itemunitid FROM item WHERE id = p_itemid), 
						material_itembatch, p_companyid, p_userid,
						@materialissuedetail_outid
					 );
					 
					  CALL spc_materialmovement_save(
						  null, p_itemid, material_itembatch,
						  683, @materialissuedetail_outid, p_date,
						  @issuequantity, p_warehouseid, p_warehousebinid,
						  null, null,(@issuequantity*material_unitcost),
						  p_companyid, p_userid,@movement_outid
					  );
                      
                      -- Update GRPO
						SET @grnqty = 0;
						SELECT quantity INTO @grnqty
						FROM grpodetail 
						WHERE grpoid = p_transactionid
						AND itemid = p_itemid;
        
						UPDATE grpodetail
						SET quantity = (quantity - @issuequantity)
						WHERE grpoid = p_transactionid
						AND itemid = p_itemid;
					
				   END IF;
				
				END IF;
				
				SET  j = j + 1; 
			END WHILE;
		   
		   DROP TEMPORARY TABLE tempitembatch;
		END;
		
		SET @jeid = null;
		CALL spc_journalentry_save(
			NULL,
			NULL,
			1295,
			NULL,
			p_date,
			NULL,
			@branch,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			(SELECT supplierid FROM grpo WHERE id = p_transactionid),
			NULL,
			NULL,
			NULL,
			348,
			NULL,
			'Purchase Return JE',
			NULL,
			NULL,
			NULL,
			OUT_ID,
			'Purchase Return JE',
			p_companyid,
			p_userid,
			@jeid
		);
		
		-- Credit to item - Ledger
					 
		 SET @jedetailid1 = null;
		 CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			(SELECT ledgerid FROM item WHERE id = p_itemid),
			0,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			0,
			p_amount,
			NULL,
			(SELECT supplierid FROM grpo WHERE id = p_transactionid),
			NULL,
			p_itemid,
			NULL,
			'Purchase Return JE',
			p_companyid,
			p_userid,
			@jedetailid1
		 );
		
		-- Debit to inventorygainandloss - Ledger
		
		 SET @jedetailid = null;
		 CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			@grpowithoutinvoiceledgerid,
			0,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			p_amount,
			0,
			NULL,
			(SELECT supplierid FROM grpo WHERE id = p_transactionid),
			NULL,
			p_itemid,
			NULL,
			'Purchase Return JE',
			p_companyid,
			p_userid,
			@jedetailid
		 );
    
    END IF;
    -- record log
   CALL spc_commonlog_save(p_companyid, 'purchase_return', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchasereturn_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT PSR.id,
		    DATE_FORMAT(`date`,'%d/%m/%Y') as `date`, 
            PSR.itemid, 
            I.itemname,
            PSR.warehouseid,
            W.warehousename,
            PSR.warehousebinid,
            WB.binname,
            PSR.transactionid,
            PSR.quantity,
            PSR.unitcost,
            REF.refname as unitname,
            PSR.amount,
            PSR.statusid,
            PSR.remark,
            REF2.refname as `status`
	FROM purchase_return PSR
    LEFT JOIN item I ON I.id = PSR.itemid
    LEFT JOIN `reference` REF ON REF.id = I.itemunitid
    LEFT JOIN `reference` REF2 ON PSR.statusid = REF2.id
    LEFT JOIN warehouse W ON W.id = PSR.warehouseid
    LEFT JOIN warehousebin WB ON WB.id = PSR.warehousebinid
    
    WHERE PSR.companyid = p_companyid;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchasereturn_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT PSR.id,
		    DATE_FORMAT(`date`,'%d/%m/%Y') as `date`, 
            PSR.itemid, 
            I.itemname,
            PSR.warehouseid,
            W.warehousename,
            PSR.warehousebinid,
            WB.binname,
            PSR.quantity,
            PSR.unitcost,
            REF.refname as unitname,
            PSR.amount,
            PSR.statusid,
            PSR.remark,
            REF2.refname as `status`,
            PSR.transactionid,
            G.grpono as transactionno,
            CASE
				WHEN GD.quantity < fnc_iteminstock(PSR.itemid, PSR.warehousebinid, PSR.date, PSR.companyid) THEN GD.quantity
				ELSE fnc_iteminstock(PSR.itemid, PSR.warehousebinid, PSR.date, PSR.companyid)
			END as instock
            
	FROM purchase_return PSR
    LEFT JOIN grpo G ON G.id = PSR.transactionid
    LEFT JOIN grpodetail GD ON GD.grpoid = G.id AND GD.itemid = PSR.itemid
    LEFT JOIN item I ON I.id = PSR.itemid
    LEFT JOIN `reference` REF ON REF.id = I.itemunitid
    LEFT JOIN `reference` REF2 ON PSR.statusid = REF2.id
    LEFT JOIN warehouse W ON W.id = PSR.warehouseid
    LEFT JOIN warehousebin WB ON WB.id = PSR.warehousebinid
    
    WHERE PSR.id = p_id;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchase_goods_issuedetail_save`(
 IN p_id INT(11),
 IN p_goodsissueid INT,
 IN p_shedid INT,
 IN p_warehouseid INT,
 IN p_warehousebinid INT,
 IN p_itemgroupid INT,
 IN p_itemid INT,
 IN p_instock DECIMAl(15,3),
 IN p_issueqty DECIMAl(15,3),
 IN p_unitcost DECIMAL(15,3),
 IN p_itemvalue DECIMAL(15,3),
 IN p_companyid INT(11),
 IN p_userid INT(11),
 OUT out_id INT )
BEGIN
SET @action = null;
SET @warehousebinid = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO purchase_goods_issuedetail(
        goodsissueid, shedid, warehouseid, warehousebinid, itemgroupid, itemid, instock,issueqty, unitcost,itemvalue)
        VALUES (p_goodsissueid, p_shedid, p_warehouseid, p_warehousebinid, p_itemgroupid, p_itemid, p_instock,p_issueqty, p_unitcost, p_itemvalue);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE purchase_goods_issuedetail
        SET goodsissueid = p_goodsissueid,
			warehouseid = p_warehouseid,
            warehousebinid = p_warehousebinid,
            itemgroupid = p_itemgroupid,
            itemid = p_itemid,
            instock = p_instock,
            issueqty = p_issueqty,
            unitcost = p_unitcost,
            itemvalue = p_itemvalue,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    

if((select moduleid FROM purchase_goods_issue WHERE id = p_goodsissueid) = 721 and p_shedid IS NOT null) then
	select warehousebinid INTO @warehousebinid FROM breedershed WHERE id = p_shedid;
    update purchase_goods_issuedetail SET warehousebinid = @warehousebinid WHERE id = OUT_ID;
END IF ;
if((select moduleid FROM purchase_goods_issue WHERE id = p_goodsissueid) = 725 and p_shedid IS NOT null) then
	select warehousebinid INTO @warehousebinid FROM layershed WHERE id = p_shedid;
    update purchase_goods_issuedetail SET warehousebinid = @warehousebinid WHERE id = OUT_ID;
END IF ;
if((select moduleid FROM purchase_goods_issue WHERE id = p_goodsissueid) = 723 and p_shedid IS NOT null) then
	select warehousebinid INTO @warehousebinid FROM cbf_farmerenquiry_sheddimensiondetail where id = p_shedid;
    update purchase_goods_issuedetail SET warehousebinid = @warehousebinid WHERE id = OUT_ID;
END IF ;
if((select moduleid FROM purchase_goods_issue WHERE id = p_goodsissueid) != null and p_shedid = null) then
	select warehousebinid INTO @warehousebinid FROM warehouse where id = p_warehouseid AND isdefaulty = 1;
    update purchase_goods_issuedetail SET warehousebinid =@warehousebinid WHERE id = OUT_ID;
END IF ;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'purchase_goods_issuedetail', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchase_goods_issuedetail_search`(
 IN p_id INT(11))
BEGIN
	SELECT GID.id,GID.goodsissueid, GID.shedid, GID.warehouseid, GID.warehousebinid,
          GID.itemgroupid, GID.itemid, GID.instock, GID.unitcost,GID.itemvalue,
          IG.groupname as itemgroup, I.itemname,GID.issueqty,W.warehousename
          
          FROM purchase_goods_issuedetail GID
          LEFT JOIN itemgroup IG ON IG.id =  GID.itemgroupid
          LEFT JOIN item I ON I.id = GID.itemid
		  LEFT JOIN warehouse W ON W.id = GID.warehouseid
          WHERE GID.goodsissueid = p_id;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchase_goods_issuedetail_search_bymodule`(
 IN p_moduleid INT(11),
 IN p_id INT(11))
BEGIN

	IF(p_moduleid = 725) THEN   -- Layer Module
	SELECT GID.id,GID.goodsissueid, GID.shedid, GID.warehouseid, GID.warehousebinid,
          GID.itemgroupid, GID.itemid, GID.instock, GID.unitcost,GID.itemvalue,
          IG.groupname as itemgroup, I.itemname,GID.issueqty,W.warehousename,
          LS.shedname
          
          FROM purchase_goods_issuedetail GID
          LEFT JOIN purchase_goods_issue GI ON GI.id =  GID.goodsissueid
          LEFT JOIN itemgroup IG ON IG.id =  GID.itemgroupid
		  LEFT JOIN layershed LS ON LS.id =  GID.shedid
          LEFT JOIN item I ON I.id = GID.itemid
		  LEFT JOIN warehouse W ON W.id = GID.warehouseid
          WHERE GID.goodsissueid = p_id AND
		  GI.moduleid = p_moduleid;
		END IF;
        
	IF(p_moduleid = 721) THEN   -- Breeder Module
	SELECT GID.id,GID.goodsissueid, GID.shedid, GID.warehouseid, GID.warehousebinid,
          GID.itemgroupid, GID.itemid, GID.instock, GID.unitcost,GID.itemvalue,
          IG.groupname as itemgroup, I.itemname,GID.issueqty,W.warehousename,
          BS.shedname
          
          FROM purchase_goods_issuedetail GID
          LEFT JOIN purchase_goods_issue GI ON GI.id =  GID.goodsissueid
          LEFT JOIN itemgroup IG ON IG.id =  GID.itemgroupid
		  LEFT JOIN breedershed BS ON BS.id =  GID.shedid
          LEFT JOIN item I ON I.id = GID.itemid
		  LEFT JOIN warehouse W ON W.id = GID.warehouseid
          WHERE GID.goodsissueid = p_id AND
				GI.moduleid = p_moduleid;
		END IF;
        
	IF(p_moduleid = 723) THEN   -- CBF Module
	SELECT GID.id,GID.goodsissueid, GID.shedid, GID.warehouseid, GID.warehousebinid,
          GID.itemgroupid, GID.itemid, GID.instock, GID.unitcost,GID.itemvalue,
          IG.groupname as itemgroup, I.itemname,GID.issueqty,W.warehousename,
          CFSDD.shed_name as shedname
          
          FROM purchase_goods_issuedetail GID
          LEFT JOIN purchase_goods_issue GI ON GI.id =  GID.goodsissueid
          LEFT JOIN itemgroup IG ON IG.id =  GID.itemgroupid
		  LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CFSDD ON CFSDD.id =  GID.shedid
          LEFT JOIN item I ON I.id = GID.itemid
		  LEFT JOIN warehouse W ON W.id = GID.warehouseid
          WHERE GID.goodsissueid = p_id AND
				GI.moduleid = p_moduleid;
		END IF;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchase_goods_issue_save`(
 IN p_id INT(11),
 IN p_issueno VARCHAR(45),
 IN p_issuedate DATE,
 IN p_moduleid INT,
 IN p_batchid INT,
 IN p_statusid INT,
 IN p_remark VARCHAR(200),
 IN p_totalcost DECIMAL(15,3),
 IN p_companyid INT(11),
 IN p_userid INT(11),
 OUT out_id INT )
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO purchase_goods_issue(
        issueno, issuedate, moduleid, batchid, statusid, remark, totalcost, companyid)
        VALUES (p_issueno, p_issuedate, p_moduleid, p_batchid, p_statusid, p_remark, p_totalcost, p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE purchase_goods_issue
        SET issueno = p_issueno,
			issuedate = p_issuedate,
            moduleid = p_moduleid,
            batchid = p_batchid,
            statusid = p_statusid,
            remark = p_remark,
            totalcost = p_totalcost,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'purchase_goods_issue', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchase_goods_issue_search`( 
IN p_companyid INT)
BEGIN
 SELECT GI.id, GI.issueno, DATE_FORMAT(GI.issuedate,'%d/%m/%Y') as issuedate,GI.moduleid,GI.batchid,GI.statusid,
		 GI.jeid,GI.materialissueid,GI.totalcost,GI.companyid
         ,R.refname as status
         
   FROM purchase_goods_issue GI
   LEFT JOIN reference R ON R.id = GI.statusid
   WHERE GI.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchase_goods_issue_select`( 
IN p_id INT)
BEGIN
 SELECT GI.id, GI.issueno,GI.issuedate,GI.moduleid,GI.batchid,GI.statusid,
		 GI.jeid,GI.materialissueid,GI.totalcost,GI.companyid
         ,R.refname as status
         
   FROM purchase_goods_issue GI
   LEFT JOIN refrence R ON R.id = GI.statusid
   WHERE GI.id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_purchase_invoice_overdue_detail`( 
 IN p_company_id INT,
 IN p_to_date Date)
BEGIN
set @start_date = null;
-- get year start date from financial year setting where status 6021 = open and year is active
select startfrom INTO @start_date FROM financialyearsetting WHERE statusid = 6021 AND `active` = 1 AND companyid = p_company_id ;


		SELECT PI.id,
           DATE_FORMAT(PI.invoicedate,'%d/%m/%Y') as invoicedate,
           vendorid,
           PI.grpono,
           PI.purchaseorderid,
           PI.subject,
           PI.referenceno,
           DATE_FORMAT(PI.referencedate,'%d/%m/%Y') as referencedate,
           PI.creditperiod,
           PI.nettotal,
           PI.discount,
           PI.taxtotal,
           PI.frieght,
           PI.subtotal,
           PI.remark,
           transactiontypeid,
           deliveryfromaddressid,
           deliverytowarehouseid,
           PI.towarehousebinid,
           WB.binname as towarehousebinname,
		   deliveryfromstatecode,
		   deliverytostatecode,
		   PT.partyname as suppliername,
		   PA.address as delfromfulladdress,
		   WH.address as warehousefulladdress,
		   ST.isunionterritory as warehouseisunionterritory,
		   ST1.isunionterritory as deliveryfromisunionterritory,
           PI.purchaseinvoiceno,
           GR.grpono as grpodocseriesno,
		   DATE_FORMAT(PI.duedate,'%d/%m/%Y') as duedate,
		   DATE_FORMAT(PI.postingdate,'%d/%m/%Y') as postingdate,
           PI.tdsid,
           IFNULL(PI.tdsamount,0) as tdsamount,
           IFNULL(T.rate,0) as tds,
           PI.discount
           
    FROM  purchaseinvoice PI
    
    LEFT JOIN party PT ON PI.vendorid = PT.id
	LEFT JOIN partyaddress PA ON PI.deliveryfromaddressid = PA.id
	LEFT JOIN warehouse WH ON PI.deliverytowarehouseid = WH.id
    LEFT JOIN warehousebin WB ON PI.towarehousebinid = WB.id
	LEFT JOIN `state` ST ON WH.stateid = ST.id
	LEFT JOIN `state` ST1 ON PA.stateid = ST1.id
	LEFT JOIN grpo GR ON GR.id = PI.grpono
	LEFT JOIN account_tds T ON T.id = PI.tdsid
    where PI.invoicedate<=p_to_date
    AND PI.duedate>=@start_date 
    AND PI.duedate<=p_to_date;



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_qualitycheckdetail_delete`(
IN p_id INT(11)

)
BEGIN
DELETE 
FROM		feedmill_qualitycheckdetail
WHERE		id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_qualitycheckdetail_save`(
	IN p_id INT(11),
    IN p_qualitycheckid INT(11),
    IN p_purchaseorderid INT(11),
    IN p_itemid INT(11),
    IN p_testid INT(11),
    IN p_samplequantity DECIMAL(9,3),
    IN p_finding VARCHAR(45),
    IN p_resultid INT(11),
    IN p_remark VARCHAR(45),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_qualitycheckdetail(id,qualitycheckid,purchaseorderid,itemid,testid,samplequantity,finding,resultid,remark,companyid)
        VALUES (p_id, p_qualitycheckid,p_purchaseorderid,p_itemid,p_testid,p_samplequantity,p_finding,p_resultid,p_remark,p_companyid);
        
        SET @action = 'INSERT';
        
        ELSE
        UPDATE feedmill_qualitycheckdetail
        SET id = p_id, 
            qualitycheckid = p_qualitycheckid,
            purchaseorderid = p_purchaseorderid,
            itemid = p_itemid,
            testid = p_testid,
            samplequantity = p_samplequantity,
			finding = p_finding,
           resultid = p_resultid,
           remark = p_remark,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_qualitycheckdetail', out_id, @action, p_userid);



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_qualitycheckdetail_search`(
IN p_qualitycheckid INT(11)
)
BEGIN
	SELECT 
		QD.id,
		QD.qualitycheckid,
		QD.purchaseorderid,
		QD.itemid,
		QD.testid,
		QD.samplequantity,
		QD.finding,
		QD.resultid,
		QD.remark,
		REF.refname as result,
        T.testname,
        I.itemname
       
           
    FROM feedmill_qualitycheckdetail QD
    
     LEFT JOIN item I ON QD.itemid = I.id
     LEFT JOIN feedmill_testmaster T ON QD.testid = T.id
     LEFT JOIN `reference` REF ON QD.resultid = REF.id
    
    
    WHERE  
		  qualitycheckid = p_qualitycheckid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_qualitycheckdetail_select`(
IN p_id INT(11),
IN p_companyid INT(11)
)
BEGIN
SELECT id,
		   qualitycheckid
				
	FROM feedmill_qualitycheckdetail

	WHERE companyid = p_companyid
	AND	id = p_id;            
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_qualitychecklist_search`(
	IN p_acknowledgement_number INT(11),
	IN p_from_date date,
	IN p_to_date date
)
BEGIN
SELECT   FQC.id,
		FQC.ackid,
        FQC.checkedby,
		DATE_FORMAT(FQC.qualitycheckdate,'%d/%m/%Y') as qualitycheckdate,
        FQC.qualitystatus,
        FQC.companyid,
        REF.refname
        
           
	FROM feedmill_qualitycheck FQC
    LEFT JOIN `reference` REF ON REF.id = FQC.qualitystatus
    
    WHERE FQC.ackid = p_acknowledgement_number AND
	(FQC.qualitycheckdate BETWEEN p_from_date AND p_to_date)
    order by FQC.id desc;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_qualitycheckreport_search`(
IN p_fromdate date,
IN p_todate date,
IN p_companyid INT(11)

)
BEGIN

select 
DATE_FORMAT( FQC.qualitycheckdate,'%d/%m/%Y') as qualitycheckdate,
FQC.ackid,
FAS.ackno,
FQC.qualitystatus,
FQCD.itemid,
I.itemname,
FQCD.resultid,
R.refname,
FQCD.testid,
TM.id as mtestid,
TMD.startfrom as fromrange,
TMD.endto as torange,
FQCD.finding as testedvalue,
FQCD.resultid,
FAS.vehicleno,
FASD.purchaseorderid,
PO.purchaseorderno,
PO.vendorid,
P.partyname,
TM.testname as nutrientname

FROM feedmill_qualitycheck FQC
LEFT JOIN feedmill_qualitycheckdetail FQCD ON FQC.id = FQCD.qualitycheckid
LEFT JOIN feedmill_acknowledgementslip FAS ON FAS.id = FQC.ackid
LEFT JOIN feedmill_acknowledgementslipdetail FASD ON FASD.ackid = FAS.id
LEFT JOIN purchaseorder PO ON PO.id =  FASD.purchaseorderid
LEFT JOIN party P ON P.id = PO.vendorid
LEFT JOIN feedmill_testmaster TM ON TM.id = FQCD.testid
LEFT JOIN feedmill_testmasterdetail TMD ON TMD.testmasterid = FQCD.testid
LEFT JOIN item I ON I.id = FQCD.itemid
LEFT JOIN  `reference` R ON R.id = FQCD.resultid

where FQC.qualitycheckdate BETWEEN p_fromdate AND p_todate
AND FQCD.finding BETWEEN TMD.startfrom AND TMD.endto;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_qualitycheck_delete`(
IN p_id INT(11)
)
BEGIN
DELETE
FROM  feedmill_qualitycheck
WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_qualitycheck_save`(
    IN p_id INT(11),
    IN p_ackid INT(11),
    IN p_checkedby VARCHAR(45),
	IN p_qualitycheckdate DATE,
	IN p_qualitystatus INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_qualitycheck(id,ackid,checkedby,qualitycheckdate,qualitystatus,companyid)
        VALUES (p_id, p_ackid,p_checkedby,p_qualitycheckdate,p_qualitystatus,p_companyid);
        
        SET @action = 'INSERT';
        
        ELSE
        UPDATE feedmill_qualitycheck
       SET id = p_id,
            ackid = p_ackid,
            checkedby = p_checkedby,
            qualitystatus = p_qualitystatus,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_qualitycheck', out_id, @action, p_userid);




END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_qualitycheck_search`(
IN p_companyid INT(11)
)
BEGIN
SELECT   FQC.id,
		FQC.ackid,
        FQC.checkedby,
		DATE_FORMAT(FQC.qualitycheckdate,'%d/%m/%Y') as qualitycheckdate,
        FQC.qualitystatus,
        FQC.companyid,
        REF.refname
        
           
	FROM feedmill_qualitycheck FQC
    LEFT JOIN `reference` REF ON REF.id = FQC.qualitystatus
    
    WHERE FQC.companyid = p_companyid
    order by FQC.id desc;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_qualitycheck_select`(
IN p_id INT(11),
IN p_companyid INT(11)
)
BEGIN
SELECT id,
		   checkedby,
           qualitystatus
           
	FROM  feedmill_qualitycheck
    
    WHERE companyid = p_companyid
    AND id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_reference_select`(
	IN p_typecode varchar(30)
)
BEGIN
	
		SELECT 
			id,
			typecode,
            refname,
            parenttypecode,
            displayorder
		FROM
			reference
		WHERE
			typecode = p_typecode and
            deleted <> 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_reference_selectbygroup`(
	IN typecode varchar(20)
)
BEGIN
	
		SELECT 
			id,
			typecode,
            refname,
            parenttypecode,
            displayorder
		FROM
			reference
		WHERE
			parenttypecode = p_typecode and
            deleted <> 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_roleaccess_save`(
	IN p_id INT,
    IN p_roleid INT,
    IN p_entityid INT,
    IN p_entitytypeid INT,
    IN p_permissions INT,
    IN p_checked INT,
    IN p_parentid VARCHAR(100),
    OUT out_id INT
)
BEGIN


	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO roleaccess 
				(
					id,
					roleid,
					entityid,
                    entitytypeid,
                    permissions,
					checked,
                    parentid
				)
			VALUES 
				(	
					p_id,
					p_roleid,
					p_entityid,
                    p_entitytypeid,
                    p_permissions,
					p_checked,
                    p_parentid
				);
                
		SET @action = 'INSERT';
      
	ELSE
    
		UPDATE roleaccess
        
				SET 
					roleid = p_roleid,
					entityid = p_entityid,
					entitytypeid = p_entitytypeid,
                    permissions = p_permissions,
					checked = p_checked,
                    parentid = p_parentid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id;
                
		SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_rolewiseentity_search`(
	IN p_roleid INT
)
BEGIN

	IF(p_roleid IS NULL) THEN
		
		SELECT E.id as entityid,E.displayname,
			   E.pagekey as entityname
		FROM entity E
		LEFT JOIN roleaccess R ON R.entityid = E.id
		WHERE R.entitytypeid = 6003;
    
    ELSE
		SELECT E.id as entityid,E.displayname,
			   E.pagekey as entityname
		FROM entity E
		LEFT JOIN roleaccess R ON R.entityid = E.id
		WHERE R.entitytypeid = 6003
		AND R.roleid = p_roleid;
    
    END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_role_ddl`()
BEGIN

	SELECT id,
			rolename,
            description
		FROM
			`role`;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_role_save`(
	IN p_id INT,
    IN p_rolename INT,
    IN p_description NVARCHAR(200),
    IN p_licensetypeid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO `role`
				(`id`, `rolename`, `description`, `licensetypeid`)
			VALUES 
				(p_id, p_rolename, p_description,p_licensetypeid);
                
		SET @action = 'INSERT';
      
	ELSE
    
		UPDATE `role`
				SET 
                `rolename` = p_rolename, 
                `description` = p_description, 
                `licensetypeid` = p_licensetypeid, 
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id;
                
		SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesdeliverydetail_save`(
	IN p_id INT,
    IN p_salesdeliveryid INT,
    IN p_salesorderdetailid INT,
    IN p_itemid INT,
    IN p_quantity DECIMAL(12,3),
    IN p_isbird TINYINT,
    IN p_weight DECIMAL(12,3),    
    IN p_itemunitid INT,
    IN p_materialissueid INT,
    IN p_warehousebinid INT,
    IN p_statusid INT,
    IN p_companyid INT,
    IN p_rate DECIMAL(15,3),
    IN p_itemdiscount DECIMAL(12,3),
    IN p_taxid INT(11),
    IN p_taxpercent DECIMAL(12,3),
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO salesdeliverydetail
				(`id`,
				`salesdeliveryid`,
                `salesorderdetailid`,
				`itemid`,
				`quantity`,
				`isbird`,
				`weight`,
				`itemunitid`,
				`materialissueid`,
				`warehousebinid`,
                `statusid`,
                `companyid`,
                rate,
                itemdiscount,
                taxid,
                taxpercent)
			VALUES 
				(
                p_id,
				p_salesdeliveryid,
                p_salesorderdetailid,
				p_itemid,
				p_quantity,
				p_isbird,
				p_weight,
				p_itemunitid,
				p_materialissueid,
				p_warehousebinid,
                p_statusid,
                p_companyid,
                p_rate,
                p_itemdiscount,
                p_taxid,
                p_taxpercent);
		
            SET @action = 'INSERT';
		
	ELSE
    
		UPDATE salesdeliverydetail
				SET 
					salesdeliveryid = p_salesdeliveryid,
                    salesorderdetailid = p_salesorderdetailid,
					itemid= p_itemid,
					quantity = p_quantity,
					isbird = p_isbird,
					weight = p_weight,
					itemunitid = p_itemunitid,
					materialissueid = p_materialissueid,
					warehousebinid = p_warehousebinid,
                    statusid = p_statusid,
					companyid = p_companyid,
                    rate = p_rate,
                    itemdiscount = p_itemdiscount,
					taxid = p_taxid,
					taxpercent = p_taxpercent,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;

	SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- IF status is - 'Delivered'
    /*IF((SELECT statusid FROM salesdelivery WHERE id = p_salesdeliveryid) = 1622) THEN
		
        -- IF there is no material issue exists for sales delivery only...
		IF(EXISTS(SELECT id FROM salesdelivery where materialissueid IS NULL AND id = p_salesdeliveryid)) THEN
			
			SET @out_issueitemid = 0;
			CALL spc_salesdelivery_issueitems(p_salesdeliveryid, p_userid, p_companyid);
        
        END IF;
    
    END IF;
    */
   -- record log
   CALL spc_commonlog_save(p_companyid, 'salesdelivery', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesdeliverydetail_search`(
	IN p_salesdeliveryid INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
			SDD.`id`,
			SDD.`salesdeliveryid`,
            SDD.`salesorderdetailid`,
			SDD.`itemid`,
            I.itemname,
			I.itemcode,
            CASE
				WHEN SDD.`salesorderdetailid` IS NOT NULL THEN ((SO.`quantity` + SDD.`quantity`) - ( IFNULL(fnc_salesorder_itemdeliveredqty(SDD.`itemid`, SDD.`salesorderdetailid`), 0)))
				ELSE 0
			END as quantity,
            CASE
				WHEN SDD.`salesorderdetailid` IS NOT NULL THEN ((SO.`weight` + SDD.`weight`) - IFNULL(fnc_salesorder_itemdeliveredweight(SDD.`itemid`, SDD.`salesorderdetailid`), 0))
				ELSE 0
			END as weight,
            -- SO.`quantity` as quantity,
			SDD.`quantity` as deliveryquantity,
			SDD.`isbird`,
            -- SO.`weight` as weight,
			SDD.`weight` as deliveryweight,
			SDD.`itemunitid`,
			SDD.`statusid`,
			SDD.`materialissueid`,
			SDD.`warehousebinid`,
            WHB.bincode as towarehousebincode,
            WHB.binname as towarehousebinname,
            WHB.warehouseid as towarehouseid,
            WH.warehousecode as towarehousecode,
            WH.warehousename as towarehousename,
            WH.locationid,
            LC.locationname,
			SDD.`companyid`,
            SDD.rate,
            CASE
				WHEN SD.`statusid` = 1621 THEN 'Navigation'
				ELSE 'Inactive'
			END as navigation,
            SDD.taxpercent,
            SDD.taxid,
            SDD.itemdiscount as discount,
            ((SDD.`quantity` * SDD.`rate`) - (((SDD.`quantity` * SDD.`rate`) * SDD.itemdiscount)/100) + (((SDD.`quantity` * SDD.`rate`) * SDD.taxpercent)/100)) as linetotal
	FROM 
		`salesdeliverydetail` SDD
	INNER JOIN `item` I ON I.id = SDD.itemid
	INNER JOIN `salesdelivery` SD ON SDD.salesdeliveryid = SD.id
    INNER JOIN `warehousebin` WHB ON WHB.id = SDD.warehousebinid
    INNER JOIN `warehouse` WH ON WH.id = WHB.warehouseid
    INNER JOIN `location` LC ON LC.id = WH.locationid
    LEFT JOIN `salesorderdetail` SO ON SDD.salesorderdetailid = SO.id AND SDD.salesorderdetailid IS NOT NULL
	
    WHERE
		SDD.salesdeliveryid = p_salesdeliveryid
		AND SDD.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesdeliverylist_search`(
	IN p_from_date date,
	IN p_to_date date
)
BEGIN
	SELECT
		SD.`id`,
		SD.`salestypeid`,
		SD.`salesorderid`,
		SO.salesorderno,
		PT.partyname,
		SD.`salesdeliveryno`,
		DATE_FORMAT(SD.deliverydate,'%d/%m/%Y') as deliverydate,
		SD.`deliverytoaddressid`,
		SD.`deliverytoaddress`,
		SD.`billtoaddressid`,
		SD.`billtoaddress`,
		SD.`warehouseid`,
		SD.`warehouseaddress`,
		SD.`remark`,
		SD.`salespersonid`,
		SD.`statusid`,
		REF1.refname as statusname,
		SD.`companyid`,
		fnc_isinvoicedone(SD.id, 'Sales') as isinvoicedone
		
	FROM
		salesdelivery SD
	LEFT JOIN salesorder SO ON SD.salesorderid = SO.id
	LEFT JOIN party PT ON PT.id = SO.customerid
	LEFT JOIN `reference` REF1 ON REF1.id = SD.statusid
	WHERE
		(SD.deliverydate BETWEEN p_from_date AND p_to_date)
	ORDER BY SD.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesdelivery_bysalesorderid`(
	IN p_salesorderid INT,
    IN p_salesinvoiceid INT,
    IN p_companyid INT
)
BEGIN

	SELECT
		SD.id,
        SD.salesorderid,
        SD.salesdeliveryno,
        DATE_FORMAT(SD.deliverydate,'%d/%m/%Y') as deliverydate,	
        SD.statusid
	FROM
		salesdelivery SD
	-- LEFT JOIN salesinvoice SI ON find_in_set(SD.id, SI.salesdeliveryids) 
	WHERE
		SD.salesorderid = p_salesorderid
    --     AND (SI.id IS NULL OR (p_salesinvoiceid IS NOT NULL AND SI.id = p_salesinvoiceid))
		AND SD.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesdelivery_delete`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	DELETE FROM salesdeliverydetail WHERE salesdeliveryid = p_id AND companyid = p_companyid;
	DELETE FROM salesdelivery WHERE id = p_id AND companyid = p_companyid;
    
    SELECT "Deleted" as result;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesdelivery_issueitems`(
  IN p_salesdeliveryid INT,
  IN p_userid INT,
  IN p_companyid INT
)
BEGIN
	
	DECLARE p_unitcost DECIMAL(30,6);
    DECLARE p_sdwarehouseid INT;
    DECLARE p_quantity INT(11);
    DECLARE x INT;
	DECLARE i INT;
    DECLARE j INT;
    DECLARE material_itemid INT;
    DECLARE material_itembatch VARCHAR(300);
    DECLARE material_quantity INT;
    DECLARE p_transactiondate DATE;
	SET @row_number = 0;
    SET @row_number1 = 0;
	SET @reccount = 0;
    SET @consumptionreccount = 0;
	SET x = 1;
    SET i = 1;
    SET j = 1;
    SET @materialissue_outid = null;
    SET @materialissuedetail_outid = null;
    SET @movement_outid = null;
    SET @consumptionissue_outid = null;
    SET @salestypeid =null;
	 SET @@sql_mode = ' ';
     SELECT salestypeid INTO @salestypeid FROM salesdelivery WHERE id = p_salesdeliveryid  LIMIT 1;
    
 
     
	SELECT warehouseid,deliverydate INTO p_sdwarehouseid,p_transactiondate
    FROM salesdelivery SD
    WHERE id = p_salesdeliveryid
    LIMIT 1;
     
      CALL spc_materialissue_save(
			null, 
			p_transactiondate, 
			383, 
			Null, 
			362, 
			'Sales Delivery', 
			p_userid, 
            p_sdwarehouseid,
            NUll,
            null, 
			null, 
            p_companyid, 
            p_userid, 
            @materialissue_outid
		);
        
	UPDATE salesdelivery SET materialissueid = @materialissue_outid
	WHERE id = p_salesdeliveryid
    LIMIT 1;
-- select item sales delive issue them
		
   SET @reccount = 0;
   SET @reccount1 = 0;
   SET x = 1;
   SET @row_number = 0;
   
   DROP TEMPORARY TABLE IF EXISTS tempitemsale;
        
	CREATE TEMPORARY TABLE tempitemsale
	SELECT 
			SDD.id,
			SDD.itemid, 
			I.itemname,
            I.itemunitid,
			SDD.quantity, 
            SDD.warehousebinid,
            SDD.rate,
			(@row_number := @row_number + 1) as `rank`
            
		FROM salesdeliverydetail SDD
		LEFT JOIN item I ON SDD.itemid = I.id
		WHERE SDD.salesdeliveryid = p_salesdeliveryid;
		SELECT COUNT(*) INTO @reccount1 FROM tempitemsale;
        
        WHILE x  <= @reccount1 DO
			
		SET @salesdeliverydetailid = null;
		SET @itemid = null;
		SET @itemname = null;
		SET  @itemunitid = null;
		SET @itemquantity = null;
		SET @warehousebinid = null;
        SET j = 0;
		SET @reccount = 0;
        SET @row_number1 =0;
   
            SELECT id, itemid, itemname, itemunitid, quantity, warehousebinid,rate
            INTO @salesdeliverydetailid, @itemid, @itemname, @itemunitid, @itemquantity, @warehousebinid,p_unitcost
            FROM tempitemsale WHERE `rank` = x;
	DROP TEMPORARY TABLE IF EXISTS tempitembatch;
	CREATE TEMPORARY TABLE tempitembatch
        
        SELECT itemid, itembatch, stockin, transactiondate,
        fnc_itembatchstockout(itemid, IFNULL(itembatch,''), p_sdwarehouseid, @warehousebinid) as stockout,
        (@row_number1 := @row_number1 + 1) as recordrank 
       FROM(
    
			SELECT itemid, itembatch,SUM(quantity) as stockin,transactiondate
			FROM materialmovement
			WHERE 
				itemid = @itemid AND
				companyid = p_companyid AND
				towarehouseid = p_sdwarehouseid AND
                towarehousebinid = @warehousebinid AND
				transactiontypeid in (681,682,684,685) AND itembatch is not null
				GROUP BY itemid, itembatch
               
			) stocktable order by transactiondate asc; 
      
		SELECT COUNT(*) INTO @reccount FROM  tempitembatch;
        
          WHILE j < @reccount DO
        
			SET @issuequantity = 0;
			
			SELECT itemid, itembatch, (stockin - stockout) as quantity
			INTO  material_itemid, material_itembatch, material_quantity
			FROM  tempitembatch where recordrank = j+1 ;
         --  WHERE recordrank = i;
			
             IF (@itemquantity > 0 ) THEN
				
                IF(material_quantity > 0) THEN
					IF (material_quantity >= @itemquantity) THEN
						SET @issuequantity = @itemquantity;
						SET  @itemquantity = 0;
					ELSE 
                    
						SET @issuequantity = material_quantity;
                        SET @itemquantity = @itemquantity - material_quantity;
					END IF;
                    
				END IF;
                if (@issuequantity >0) then
                CALL spc_materialissuedetail_save(null, @materialissue_outid, @itemid, @itemname, @issuequantity, p_unitcost,(@issuequantity*p_unitcost), @itemunitid, material_itembatch, p_companyid, p_userid, @materialissuedetail_outid);
				CALL spc_materialmovement_save(null, @itemid, material_itembatch, 683, @materialissuedetail_outid, p_transactiondate, @issuequantity, p_sdwarehouseid,@warehousebinid, null, null,(@issuequantity*p_unitcost), p_companyid, p_userid,@movement_outid);
                
                SET @itembatch = null;
                SELECT itembatchid INTO @itembatch FROM salesdeliverydetail WHERE salesdeliveryid = p_salesdeliveryid AND itemid = @itemid;
                IF(@itembatch IS NOT NULL) THEN
					SELECT CONCAT((@itembatch),",",material_itembatch) INTO @itembatch;
                    UPDATE salesdeliverydetail
                    SET itembatchid = @itembatch
                    WHERE salesdeliveryid = p_salesdeliveryid 
                    AND itemid = @itemid;
				ELSE
					UPDATE salesdeliverydetail
                    SET itembatchid = material_itembatch
                    WHERE salesdeliveryid = p_salesdeliveryid 
                    AND itemid = @itemid;
                END IF;
               END IF;
            
            END IF;
            
        	SET  j = j + 1; 
	    END WHILE;
       
       DROP TEMPORARY TABLE tempitembatch;
       
            
			SET  x = x + 1; 
	END WHILE;
    -- CALL spc_savesalesdelivery_je(p_salesdeliveryid, p_companyid, p_userid);
	 
	DROP TEMPORARY TABLE tempitemsale;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesdelivery_itemlivestock`(
    IN p_warehouseid INT,
    IN p_warehousebinid INT,
    IN p_itemgroupid INT,
    IN p_companyid INT
)
BEGIN

SET @@sql_mode = '';
    
SELECT I.id,
		MM.itemid,
		I.itemcode,
		I.itemgroupid,
		I.itemname,
		I.itemunitid,
		I.isgst,
		I.materialtypeid,
		I.hsnid,
		I.taxcategoryid,
		REF1.refname as taxcategory,
		MM.itembatch,
		IFNULL((SUM(MM.itemvalue)/SUM(MM.quantity)),0) as unitcost,
		CASE
			WHEN IFNULL(fnc_consumptionlivestock(itemid, p_warehouseid, p_warehousebinid, p_companyid),0) > 0 THEN fnc_consumptionlivestock(itemid, p_warehouseid, p_warehousebinid, p_companyid)
		END as stockquantity
	FROM
		materialmovement MM
		LEFT JOIN item I ON MM.itemid = I.id
		LEFT JOIN `reference` REF1 ON I.taxcategoryid = I.id
		-- LEFT JOIN hsnmaster HM ON I.hsnid = HM.id
	WHERE
		MM.towarehouseid = p_warehouseid
		AND MM.towarehousebinid = p_warehousebinid 
		AND I.itemgroupid = p_itemgroupid
		AND MM.companyid = p_companyid
   
    GROUP BY itemid;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesdelivery_save`(
	IN p_id INT,
    IN p_salestypeid INT,
    IN p_salesorderid INT,
    IN p_salesdeliveryno VARCHAR(30),
    IN p_deliverydate DATE,
    IN p_deliverytoaddressid INT,
    IN p_deliverytoaddress VARCHAR(200),
    IN p_billtoaddressid INT,
    IN p_billtoaddress VARCHAR(200),
    IN p_warehouseid INT,
    IN p_warehouseaddress VARCHAR(200),
    IN p_remark  VARCHAR(500),
    IN p_salespersonid INT,
    IN p_statusid INT,
    IN p_customerid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		SET @series = '';
		CALL spc_financialyeardocseries_newseries('SD', p_companyid, @series);
		-- select @series;
    
		INSERT INTO salesdelivery
				(`id`,
				`salestypeid`,
				`salesorderid`,
				`salesdeliveryno`,
				`deliverydate`,
				`deliverytoaddressid`,
				`deliverytoaddress`,
				`billtoaddressid`,
				`billtoaddress`,
				`warehouseid`,
				`warehouseaddress`,
				`remark`,
				`salespersonid`,
                `customerid`,
				`statusid`,
				`companyid`)
			VALUES 
				(	p_id,
					p_salestypeid,
					p_salesorderid,
					@series,
					p_deliverydate,
					p_deliverytoaddressid,
					p_deliverytoaddress,
					p_billtoaddressid,
					p_billtoaddress,
					p_warehouseid,
					p_warehouseaddress,
					p_remark,
					p_salespersonid,
                    p_customerid,
					p_statusid,
					p_companyid);
		
            SET @action = 'INSERT';
            
            
		
	ELSE
    
		UPDATE salesdelivery
				SET 
					salestypeid = p_salestypeid,
					salesorderid= p_salesorderid,
					salesdeliveryno = p_salesdeliveryno,
					deliverydate = p_deliverydate,
					deliverytoaddressid = p_deliverytoaddressid,
					deliverytoaddress = p_deliverytoaddress,
					billtoaddressid = p_billtoaddressid,
					billtoaddress = p_billtoaddress,
					warehouseaddress = p_warehouseaddress,
					remark = p_remark,
                    customerid = p_customerid,
					statusid = p_statusid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;

	SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'salesdelivery', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesdelivery_search`(
	IN p_companyid INT
)
BEGIN
			SELECT
				SD.`id`,
				SD.`salestypeid`,
				SD.`salesorderid`,
                SO.salesorderno,
                PT.partyname,
				SD.`salesdeliveryno`,
                DATE_FORMAT(SD.deliverydate,'%d/%m/%Y') as deliverydate,
				SD.`deliverytoaddressid`,
				SD.`deliverytoaddress`,
				SD.`billtoaddressid`,
				SD.`billtoaddress`,
				SD.`warehouseid`,
				SD.`warehouseaddress`,
				SD.`remark`,
				SD.`salespersonid`,
				SD.`statusid`,
                REF1.refname as statusname,
				SD.`companyid`,
                fnc_isinvoicedone(SD.id, 'Sales') as isinvoicedone
                
			FROM
				salesdelivery SD
			LEFT JOIN salesorder SO ON SD.salesorderid = SO.id
            LEFT JOIN party PT ON PT.id = SO.customerid
            LEFT JOIN `reference` REF1 ON REF1.id = SD.statusid
			WHERE
				SD.companyid = p_companyid
			ORDER BY SD.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesdelivery_select`(
	IN p_id INT
)
BEGIN
			SELECT
				SD.`id`,
				SD.`salestypeid`,
				SD.`salesorderid`,
                SO.salesorderno,
                DATE_FORMAT(SO.salesorderdate,'%d/%m/%Y') as salesorderdate,
                PT.partyname,
                PT.contactperson,
				SD.`salesdeliveryno`,
                DATE_FORMAT(SD.deliverydate,'%d/%m/%Y') as deliverydate,
				SD.`deliverytoaddressid`,
				SD.`deliverytoaddress`,
				SD.`billtoaddressid`,
				SD.`billtoaddress`,
				SD.`warehouseid`,
				SD.`warehouseaddress`,
				SD.`remark`,
				SD.`salespersonid`,
				SD.`statusid`,
				SD.`companyid`
                
			FROM
				salesdelivery SD
			LEFT JOIN salesorder SO ON SD.salesorderid = SO.id
            LEFT JOIN party PT ON PT.id = SO.customerid
            LEFT JOIN `reference` REF1 ON REF1.id = SD.statusid
			WHERE
				SD.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesinvoicedetail_invoicesearch`(	
    IN p_salesinvoiceid INT,
    IN p_companyid INT
)
BEGIN

		SELECT  
				SID.`id`,
				SID.`salesinvoiceid`,
				SID.`salesorderdetailid`,
				SID.`itemid`,
                WH.stateid,
				SI.warehouseid,
                SID.warehousebinid,
                WB.binname as warehousebinname,
				ST.statecode,
				ST.statename,
				ST.isunionterritory,
                I.itemgroupid,
                taxcategoryid,
				REF1.refname as taxcategoryname,
				IG.groupname,
				I.itemname,
				I.itemcode,
				SID.`quantity`,
				SID.`isbird`,
				SID.`weight`,
                SID.iscalcweight,
				SID.`itemunit`,
				SID.`unitprice`,
				SID.`discount`,
				SID.`taxid`,
				SID.`taxpercent`,
				SID.`taxtypeid`,
				SID.`linetotal`,
				SID.`cgstid`,
				SID.`cgstpercent`,
				SID.`cgstamount`,
				SID.`sgstid`,
				SID.`sgstpercent`,
				SID.`sgstamount`,
				SID.`igstid`,
				SID.`igstpercent`,
				SID.`igstamount`,
				SID.`utgstid`,
				SID.`utgstpercent`,
				SID.`utgstamount`,
				SID.`companyid`,
                IFNULL(fnc_consumptionlivestock(SID.itemid, SI.warehouseid, SID.warehousebinid, SID.companyid),0) as stockquantity
        FROM
			salesinvoicedetail SID
		INNER JOIN salesinvoice SI ON SID.salesinvoiceid = SI.id
		INNER JOIN item I ON SID.itemid = I.id
        INNER JOIN itemgroup IG ON I.itemgroupid = IG.id
        INNER JOIN `reference` REF1 ON I.taxcategoryid = REF1.id
        INNER JOIN `warehousebin` WB ON WB.id =  SID.warehousebinid
        INNER JOIN `warehouse` WH ON WH.id =  SI.warehouseid
        INNER JOIN `state` ST ON ST.id = WH.stateid
        
        WHERE 
        salesinvoiceid = p_salesinvoiceid AND SID.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesinvoicedetail_save`(
	IN p_id INT,
	IN p_salesinvoiceid INT,
    IN p_salesorderdetailid INT,
    IN p_salesdeliverydetailid INT,
	IN p_itemid INT,
	IN p_quantity DECIMAL(12,3),
    IN p_isbird TINYINT,
	IN p_weight DECIMAL(12,3),
    IN p_iscalcweight TINYINT,
	IN p_itemunit INT,
	IN p_unitprice DECIMAL(12,3),
	IN p_discount DECIMAL(12,3),
	IN p_taxid INT,
	IN p_taxpercent  DECIMAL(5,2),
	IN p_taxtypeid INT,
	IN p_cgstid INT,
	IN p_cgstpercent  DECIMAL(5,2),
	IN p_cgstamount DECIMAL(12,3),
	IN p_sgstid INT,
	IN p_sgstpercent DECIMAL(5,2),
	IN p_sgstamount DECIMAL(12,3),
	IN p_igstid INT,
	IN p_igstpercent DECIMAL(5,2),
	IN p_igstamount DECIMAL(12,3),
	IN p_utgstid INT,
	IN p_utgstpercent DECIMAL(5,2),
	IN p_utgstamount DECIMAL(12,3),
    IN p_linetotal DECIMAL(12,3),
    IN p_warehousebinid INT(11),
    IN p_companyid INT,
	IN p_userid INT,
	OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO salesinvoicedetail 
					   (`id`,
						`salesinvoiceid`,
                        `salesorderdetailid`,
                        `salesdeliverydetailid`,
						`itemid`,
						`quantity`,
                        `isbird`,
						`weight`,
                        `iscalcweight`,
						`itemunit`,
						`unitprice`,
						`discount`,
						`taxid`,
						`taxpercent`,
						`taxtypeid`,
						`cgstid`,
						`cgstpercent`,
						`cgstamount`,
						`sgstid`,
						`sgstpercent`,
						`sgstamount`,
						`igstid`,
						`igstpercent`,
						`igstamount`,
						`utgstid`,
						`utgstpercent`,
						`utgstamount`,
                        `linetotal`,
                        `warehousebinid`,
                        `companyid`)
				VALUES 
					(	p_id,
						p_salesinvoiceid,
						p_salesorderdetailid,
						p_salesdeliverydetailid,
						p_itemid,
						p_quantity,
                        p_isbird,
						p_weight,
                        p_iscalcweight,
						p_itemunit,
						p_unitprice,
						p_discount,
						p_taxid,
						p_taxpercent,
						p_taxtypeid,						
						p_cgstid,
						p_cgstpercent,
						p_cgstamount,
						p_sgstid,
						p_sgstpercent,
						p_sgstamount,
						p_igstid,
						p_igstpercent,
						p_igstamount,
						p_utgstid,
						p_utgstpercent,
						p_utgstamount,
                        p_linetotal,
                        p_warehousebinid,
                        p_companyid
						);
								
                          
		SET @action = 'INSERT';

	ELSE
    
		UPDATE salesinvoicedetail
			SET 			id = p_id,
							salesinvoiceid = p_salesinvoiceid,
                            salesorderdetailid = p_salesorderdetailid,
                            salesdeliverydetailid = p_salesdeliverydetailid,
							itemid = p_itemid,
							quantity = p_quantity,
                            isbird = p_isbird,
							weight = p_weight,
                            iscalcweight = p_iscalcweight,
							itemunit = p_itemunit,
							unitprice = p_unitprice,
							discount = p_discount,
							taxid = p_taxid,
							taxpercent = p_taxpercent,
							taxtypeid = p_taxtypeid,
							cgstid = p_cgstid,
							cgstpercent = p_cgstpercent,
							cgstamount =p_cgstamount,
							sgstid = p_sgstid,
							sgstpercent = p_sgstpercent,
							sgstamount = p_sgstamount,
							igstid = p_igstid,
							igstpercent = p_igstpercent,
							igstamount = p_igstamount,
							utgstid = p_utgstid,
							utgstpercent = p_utgstpercent,
							utgstamount = p_utgstamount,
							companyid = p_companyid,
							linetotal = p_linetotal,
                            warehousebinid = p_warehousebinid,
							companyid = p_companyid,
							id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'salesorderdetail', out_id, @action, p_userid);



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesinvoicedetail_search`(
	IN p_salesdeliveryids VARCHAR(500),
    IN p_salesorderid INT,
    IN p_companyid INT
)
BEGIN


		SELECT tblSDel.itemid, tblSDel.quantity, tblSDel.isbird, tblSDel.weight, 
        tblSDel.warehousebinid,
		WH.stateid,
        WB.warehouseid,
        ST.statecode,
        ST.statename,
        ST.isunionterritory,
        I.itemgroupid,
        IG.groupname,
        I.itemname,
        I.itemcode,
        taxcategoryid,
        REF1.refname as taxcategoryname,
        SOD.`unitprice`,
		SOD.`discount`,
		SOD.`taxid`,
		SOD.`taxpercent`,
		SOD.`taxtypeid`,
		SOD.`linetotal`,
		SOD.`cgstid`,
		SOD.`cgstpercent`,
		SOD.`cgstamount`,
		SOD.`sgstid`,
		SOD.`sgstpercent`,
		SOD.`sgstamount`,
		SOD.`igstid`,
		SOD.`igstpercent`,
		SOD.`igstamount`,
		SOD.`utgstid`,
		SOD.`utgstpercent`,
		SOD.`utgstamount`
        FROM
		(
			SELECT
				itemid,
				sum(quantity) as quantity,
				isbird,
				sum(weight) as weight,
                warehousebinid
			FROM
				salesdeliverydetail
			WHERE
				FIND_IN_SET(salesdeliveryid, p_salesdeliveryids)
			GROUP BY itemid, isbird, warehousebinid
		) 
		AS tblSDel
        
		INNER JOIN salesorderdetail SOD ON SOD.itemid = tblSDel.itemid
        LEFT JOIN item I ON I.id = SOD.itemid
        LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
		LEFT JOIN `reference` REF1 ON I.taxcategoryid = REF1.id
        LEFT JOIN `warehousebin` WB ON WB.id = tblSDel.warehousebinid
        LEFT JOIN `warehouse` WH ON WH.id = WB.warehouseid
        LEFT JOIN `state` ST ON ST.id = WH.stateid
        WHERE 
        salesorderid = p_salesorderid AND SOD.companyid = p_companyid;

	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesinvoicefreight_save`(
	IN p_id INT,
	IN p_salesinvoiceid INT,
    IN p_freightid INT,
    IN p_freightname VARCHAR(200),
	IN p_amount DECIMAL(12,3),
    IN p_taxid INT,
	IN p_taxpercent  DECIMAL(5,2),
	IN p_taxtypeid INT,
	IN p_cgstid INT,
	IN p_cgstpercent  DECIMAL(5,2),
	IN p_cgstamount DECIMAL(12,3),
	IN p_sgstid INT,
	IN p_sgstpercent DECIMAL(5,2),
	IN p_sgstamount DECIMAL(12,3),
	IN p_igstid INT,
	IN p_igstpercent DECIMAL(5,2),
	IN p_igstamount DECIMAL(12,3),
	IN p_utgstid INT,
	IN p_utgstpercent DECIMAL(5,2),
	IN p_utgstamount DECIMAL(12,3),    
    IN p_companyid INT,
	IN p_userid INT,
	OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO salesinvoicefreight
					   (`id`,
						`salesinvoiceid`,
                        `freightid`,
                        `freightname`,
						`amount`,
						`taxid`,
						`taxpercent`,
						`taxtypeid`,
						`cgstid`,
						`cgstpercent`,
						`cgstamount`,
						`sgstid`,
						`sgstpercent`,
						`sgstamount`,
						`igstid`,
						`igstpercent`,
						`igstamount`,
						`utgstid`,
						`utgstpercent`,
						`utgstamount`,
                        `companyid`)
				VALUES 
					(	p_id,
						p_salesinvoiceid,
						p_freightid,
						p_freightname,
						p_amount,
						p_taxid,
						p_taxpercent,
						p_taxtypeid,						
						p_cgstid,
						p_cgstpercent,
						p_cgstamount,
						p_sgstid,
						p_sgstpercent,
						p_sgstamount,
						p_igstid,
						p_igstpercent,
						p_igstamount,
						p_utgstid,
						p_utgstpercent,
						p_utgstamount,                        
                        p_companyid
						);
								
                          
		SET @action = 'INSERT';

	ELSE
    
		UPDATE salesinvoicefreight
			SET 			
							salesinvoiceid = p_salesinvoiceid,
                            freightid = p_freightid,
                            freightname = p_freightname,
							amount = p_amount,
							taxid = p_taxid,
							taxpercent = p_taxpercent,
							taxtypeid = p_taxtypeid,
							cgstid = p_cgstid,
							cgstpercent = p_cgstpercent,
							cgstamount =p_cgstamount,
							sgstid = p_sgstid,
							sgstpercent = p_sgstpercent,
							sgstamount = p_sgstamount,
							igstid = p_igstid,
							igstpercent = p_igstpercent,
							igstamount = p_igstamount,
							utgstid = p_utgstid,
							utgstpercent = p_utgstpercent,
							utgstamount = p_utgstamount,
							companyid = p_companyid,
							id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'salesinvoicefreight', out_id, @action, p_userid);



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesinvoicefreight_search`(	
    IN p_salesinvoiceid INT,
    IN p_companyid INT
)
BEGIN

		SELECT  
				SIF.`id`,
				SIF.`salesinvoiceid`,
				SIF.`freightid`,
				SIF.`freightname`,
				SIF.`amount`,
				SIF.`taxid`,
				SIF.`taxpercent`,
				SIF.`taxtypeid`,
				SIF.`cgstid`,
				SIF.`cgstpercent`,
				SIF.`cgstamount`,
				SIF.`sgstid`,
				SIF.`sgstpercent`,
				SIF.`sgstamount`,
				SIF.`igstid`,
				SIF.`igstpercent`,
				SIF.`igstamount`,
				SIF.`utgstid`,
				SIF.`utgstpercent`,
				SIF.`utgstamount`,
				SIF.`companyid`
        FROM
			salesinvoicefreight SIF
        
        WHERE 
			salesinvoiceid = p_salesinvoiceid AND SIF.companyid = p_companyid;

	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesinvoicelist_search`(
	IN p_from_date date,
	IN p_to_date date
)
BEGIN

SELECT
	SI.`id`,
	SI.`salestypeid`,
	SI.`salesinvoiceno`,
	SI.`salesorderid`,
	SO.`salesorderno`,
	SI.`salesdeliveryids`,
	SI.`customerid`,
	SI.`contactperson`,
	P.partyname,
	DATE_FORMAT(SI.salesinvoicedate,'%d/%m/%Y') as salesinvoicedate,
	SI.`referenceno`,
	SI.`referredby`,
	DATE_FORMAT(SI.referencedate,'%d/%m/%Y') as referencedate,
	DATE_FORMAT(SI.deliverydate,'%d/%m/%Y') as deliverydate,
	SI.`deliverytoaddressid`,
    SI.`deliverytoaddress`,
	SI.`transactiontypeid`,
	SI.`billtoaddressid`,
    SI.`billtoaddress`,
	SI.`warehouseid`,
    SI.`warehouseaddress`,
	SI.`subtotal`,
	SI.`discount`,
	SI.`roundoff`,
	SI.`grandtotal`,
	SI.`remark`,
	SI.`subject`,
	SI.`salespersonid`,
	SI.`statusid`,
	REF1.refname as statusname,
	SI.`companyid`
	
FROM
salesinvoice SI
LEFT JOIN salesorder SO ON SI.salesorderid = SO.id
LEFT JOIN party P ON SI.customerid = P.id
LEFT JOIN `reference` REF1 ON SI.statusid = REF1.id
WHERE
(SI.salesinvoicedate BETWEEN p_from_date AND p_to_date)

ORDER BY SI.`id` DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesinvoice_delete`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	DELETE FROM salesinvoicedetail WHERE salesinvoiceid = p_id AND companyid = p_companyid;
	DELETE FROM salesinvoice WHERE id = p_id AND companyid = p_companyid;
    
    SELECT "Deleted" as result;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesinvoice_issueitems`(
  IN p_salesinvoiceid INT,
  IN p_userid INT,
  IN p_companyid INT
)
BEGIN
	IF((SELECT salesdeliveryids FROM salesinvoice WHERE id = p_salesinvoiceid) IS NULL) THEN
		BEGIN
			DECLARE p_unitcost DECIMAL(30,6);
			DECLARE p_siwarehouseid INT;
			DECLARE p_quantity INT(11);
			DECLARE x INT;
			DECLARE i INT;
			DECLARE j INT;
			DECLARE material_itemid INT;
			DECLARE material_itembatch VARCHAR(300);
			DECLARE material_quantity INT;
			DECLARE p_transactiondate DATE;
			SET @row_number = 0;
			SET @row_number1 = 0;
			SET @reccount = 0;
			SET @consumptionreccount = 0;
			SET x = 1;
			SET i = 1;
			SET j = 1;
			SET @materialissue_outid = null;
			SET @materialissuedetail_outid = null;
			SET @movement_outid = null;
			SET @consumptionissue_outid = null;
			SET @salestypeid =null;
			SET @@sql_mode = ' ';
			SELECT salestypeid INTO @salestypeid FROM salesinvoice WHERE id = p_salesinvoiceid  LIMIT 1;
			
			SELECT warehouseid,salesinvoicedate INTO p_siwarehouseid,p_transactiondate
			FROM salesinvoice SI
			WHERE id = p_salesinvoiceid;
			 
			  CALL spc_materialissue_save(
					null, 
					p_transactiondate, 
					383, 
					Null, 
					362, 
					'Sales Invoice', 
					p_userid, 
					p_siwarehouseid,
					NUll,
					null, 
					null, 
					p_companyid, 
					p_userid, 
					@materialissue_outid
				);
				
			UPDATE salesinvoice SET materialissueid = @materialissue_outid
			WHERE id = p_salesinvoiceid
			LIMIT 1;
		-- select item sales invoice issue them
				
		   SET @reccount = 0;
		   SET @reccount1 = 0;
		   SET x = 1;
		   SET @row_number = 0;
		   
		   DROP TEMPORARY TABLE IF EXISTS tempitemsale;
				
			CREATE TEMPORARY TABLE tempitemsale
			SELECT 
					SID.id,
					SID.itemid, 
					I.itemname,
					I.itemunitid,
					SID.quantity, 
					SID.warehousebinid,
					SID.unitprice,
					(@row_number := @row_number + 1) as `rank`
					
				FROM salesinvoicedetail SID
				LEFT JOIN item I ON SID.itemid = I.id
				WHERE SID.salesinvoiceid = p_salesinvoiceid;
				SELECT COUNT(*) INTO @reccount1 FROM tempitemsale;
				
				WHILE x  <= @reccount1 DO
					
				SET @salesinvoicedetailid = null;
				SET @itemid = null;
				SET @itemname = null;
				SET @itemunitid = null;
				SET @itemquantity = null;
				SET @warehousebinid = null;
				SET j = 0;
				SET @reccount = 0;
				SET @row_number1 =0;
		   
					SELECT id, itemid, itemname, itemunitid, quantity, warehousebinid,unitprice
					INTO @salesinvoicedetailid, @itemid, @itemname, @itemunitid, @itemquantity, @warehousebinid,p_unitcost
					FROM tempitemsale WHERE `rank` = x;
			DROP TEMPORARY TABLE IF EXISTS tempitembatch;
			CREATE TEMPORARY TABLE tempitembatch
				
				SELECT itemid, itembatch, stockin, transactiondate,
				fnc_itembatchstockout(itemid, IFNULL(itembatch,''), p_siwarehouseid, @warehousebinid) as stockout,
				(@row_number1 := @row_number1 + 1) as recordrank 
			   FROM(
			
					SELECT itemid, itembatch,SUM(quantity) as stockin,transactiondate
					FROM materialmovement
					WHERE 
						itemid = @itemid AND
						companyid = p_companyid AND
						towarehouseid = p_siwarehouseid AND
						towarehousebinid = @warehousebinid AND
						transactiontypeid in (681,682,684,685) AND itembatch is not null
						GROUP BY itemid, itembatch
					   
					) stocktable order by transactiondate asc; 
			  
				SELECT COUNT(*) INTO @reccount FROM  tempitembatch;
				
				  WHILE j < @reccount DO
				
					SET @issuequantity = 0;
					
					SELECT itemid, itembatch, (stockin - stockout) as quantity
					INTO  material_itemid, material_itembatch, material_quantity
					FROM  tempitembatch where recordrank = j+1 ;
				 --  WHERE recordrank = i;
					
					 IF (@itemquantity > 0 ) THEN
						
						IF(material_quantity > 0) THEN
							IF (material_quantity >= @itemquantity) THEN
								SET @issuequantity = @itemquantity;
								SET  @itemquantity = 0;
							ELSE 
							
								SET @issuequantity = material_quantity;
								SET @itemquantity = @itemquantity - material_quantity;
							END IF;
							
						END IF;
						if (@issuequantity >0) then
						CALL spc_materialissuedetail_save(null, @materialissue_outid, @itemid, @itemname, @issuequantity, p_unitcost,(@issuequantity*p_unitcost), @itemunitid, material_itembatch, p_companyid, p_userid, @materialissuedetail_outid);
						CALL spc_materialmovement_save(null, @itemid, material_itembatch, 683, @materialissuedetail_outid, p_transactiondate, @issuequantity, p_siwarehouseid,@warehousebinid, null, null,(@issuequantity*p_unitcost), p_companyid, p_userid,@movement_outid);
					  
					   END IF;
					
					END IF;
					
					SET  j = j + 1; 
				END WHILE;
			   
			   DROP TEMPORARY TABLE tempitembatch;
			   
					
					SET  x = x + 1; 
			END WHILE;
			 
			DROP TEMPORARY TABLE tempitemsale;
		END;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesinvoice_save`(
		IN p_id INT,
        IN p_salestypeid int,
        IN p_salesinvoiceno varchar(30),
		IN p_salesorderid INT,
        IN p_salesdeliveryids varchar(500),
        IN p_customerid INT,
        IN p_contactperson varchar(100),
		IN p_salesinvoicedate DATE,
		IN p_referenceno varchar(30),
		IN p_referredby INT,
		IN p_referencedate DATE,
        IN p_transactiontypeid INT,
        IN p_deliverydate DATE,
        IN p_deliverytoaddressid INT,
        IN p_deliverytoaddress VARCHAR(200),
		IN p_billtoaddressid INT,
        IN p_billtoaddress VARCHAR(200),
        IN p_warehouseid INT,
        IN p_warehouseaddress VARCHAR(200),
        IN p_subtotal decimal(12,3),
        IN p_discount decimal(12,3),
        IN p_roundoff decimal(12,3),
        IN p_grandtotal decimal(12,3),
        IN p_remark varchar(500),
        IN p_subject varchar(200),
        IN p_salespersonid INT,
        IN p_statusid INT,
        IN p_companyid INT,
		IN p_userid INT,
		OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO salesinvoice
					   (`id`,
						`salestypeid`,
                        `salesinvoiceno`,
						`salesorderid`,
                        `salesdeliveryids`,
						`customerid`,
                        `contactperson`,
						`salesinvoicedate`,
						`referenceno`,
						`referredby`,
						`referencedate`,
                        `transactiontypeid`,
						`deliverydate`,
						`deliverytoaddressid`,
                        `deliverytoaddress`,
                        `billtoaddressid`,
                        `billtoaddress`,
                        `warehouseid`,
                        `warehouseaddress`,
						`subtotal`,
                        `pendingtotal`,
						`discount`,
						`roundoff`,
						`grandtotal`,
						`remark`,
						`subject`,
						`salespersonid`,
						`statusid`,
                        `companyid`)
				VALUES 
					(	p_id,
						p_salestypeid,
                        p_salesinvoiceno,
						p_salesorderid,
                        p_salesdeliveryids,
						p_customerid,
                        p_contactperson,
						p_salesinvoicedate,
						p_referenceno,
						p_referredby,
						p_referencedate,
                        p_transactiontypeid,
						p_deliverydate,
						p_deliverytoaddressid,
                        p_deliverytoaddress,
                        p_billtoaddressid,
                        p_billtoaddress,
                        p_warehouseid,
                        p_warehouseaddress,
						p_subtotal,
                        p_subtotal,
						p_discount,
						p_roundoff,
						p_grandtotal,
						p_remark,
						p_subject,
						p_salespersonid,
						p_statusid,
                        p_companyid);
								
                          
		SET @action = 'INSERT';

	ELSE
    
		UPDATE salesinvoice
			SET 		id = p_id,
						salestypeid = p_salestypeid,
                        salesinvoiceno = p_salesinvoiceno,
						salesorderid = p_salesorderid,
                        salesdeliveryids = p_salesdeliveryids,
						customerid = p_customerid,
                        contactperson = p_contactperson,
						salesinvoicedate = p_salesinvoicedate,
						referenceno = p_referenceno,
						referredby = p_referredby,
						referencedate = p_referencedate,
                        transactiontypeid = p_transactiontypeid,
						deliverydate = p_deliverydate,
						deliverytoaddressid = p_deliverytoaddressid,
                        deliverytoaddress = p_deliverytoaddress,
                        billtoaddressid = p_billtoaddressid,
                        billtoaddress = p_billtoaddress,
                        warehouseid = p_warehouseid,
                        warehouseaddress = p_warehouseaddress,
						subtotal = p_subtotal,
					    discount = p_discount,
						roundoff = p_roundoff,
						grandtotal = p_grandtotal,
						remark = p_remark,
						`subject` = p_subject,
						salespersonid = p_salespersonid,
						statusid = p_statusid,
                        companyid = p_companyid,
						id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'salesinvoice', out_id, @action, p_userid);



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesinvoice_search`(
	IN p_companyid INT
)
BEGIN

		SELECT
                
						SI.`id`,
						SI.`salestypeid`,
                        SI.`salesinvoiceno`,
						SI.`salesorderid`,
                        SO.`salesorderno`,
                        SI.`salesdeliveryids`,
						SI.`customerid`,
                        SI.`contactperson`,
                        P.partyname,
                        DATE_FORMAT(SI.salesinvoicedate,'%d/%m/%Y') as salesinvoicedate,
						SI.`referenceno`,
						SI.`referredby`,
                        DATE_FORMAT(SI.referencedate,'%d/%m/%Y') as referencedate,
                        DATE_FORMAT(SI.deliverydate,'%d/%m/%Y') as deliverydate,
						SI.`deliverytoaddressid`,
						SI.`transactiontypeid`,
						SI.`billtoaddressid`,
						SI.`warehouseid`,
						SI.`subtotal`,
						SI.`discount`,
						SI.`roundoff`,
						SI.`grandtotal`,
						SI.`remark`,
						SI.`subject`,
						SI.`salespersonid`,
						SI.`statusid`,
                        REF1.refname as statusname,
						SI.`companyid`
                        
				FROM
					salesinvoice SI
				LEFT JOIN salesorder SO ON SI.salesorderid = SO.id
				LEFT JOIN party P ON SI.customerid = P.id
                LEFT JOIN `reference` REF1 ON SI.statusid = REF1.id
				WHERE
					SI.companyid = p_companyid
				
                ORDER BY SI.`id` DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesinvoice_select`(
	IN p_id INT
)
BEGIN

		SELECT
                
						SI.`id`,
						SI.`salestypeid`,
                        SI.`salesinvoiceno`,
						SI.`salesorderid`,
                        SO.`salesorderno`,
                        DATE_FORMAT(SO.salesorderdate,'%d/%m/%Y') as salesorderdate,
                        SI.`salesdeliveryids`,
						SI.`customerid`,
                        SI.`contactperson`,
                        P.partyname,
                        DATE_FORMAT(SI.salesinvoicedate,'%d/%m/%Y') as salesinvoicedate,
						SI.`referenceno`,
						SI.`referredby`,
                        DATE_FORMAT(SI.referencedate,'%d/%m/%Y') as referencedate,
                        DATE_FORMAT(SI.deliverydate,'%d/%m/%Y') as deliverydate,
						SI.`deliverytoaddressid`,
                        SI.`deliverytoaddress`,
                        ST1.statecode as deliverytostatecode,
                        ST1.isunionterritory as deliverytoisunionterritory,
						SI.`transactiontypeid`,
						SI.`billtoaddressid`,
                        SI.`billtoaddress`,
                        ST2.statecode as billtostatecode,
                        ST2.isunionterritory as billtoisunionterritory,
						SI.`warehouseid`,
                        SI.`warehouseaddress`,
                        ST3.statecode as warehousestatecode,
                        ST3.isunionterritory as warehouseisunionterritory,
						SI.`subtotal`,
						SI.`discount`,
                        ((100*SI.`discount`)/SI.`subtotal`) as discountpercent,
						SI.`roundoff`,
						SI.`grandtotal`,
						SI.`remark`,
						SI.`subject`,
						SI.`salespersonid`,
						SI.`statusid`,
                        REF1.refname as statusname,
						SI.`companyid`
                        
				FROM
					salesinvoice SI
				LEFT JOIN salesorder SO ON SI.salesorderid = SO.id
				LEFT JOIN party P ON SI.customerid = P.id
                LEFT JOIN `reference` REF1 ON SI.statusid = REF1.id
                LEFT JOIN `partyaddress` PA1 ON SI.deliverytoaddressid = PA1.id
                LEFT JOIN `state` ST1 ON PA1.stateid = ST1.id
                LEFT JOIN `partyaddress` PA2 ON SI.billtoaddressid = PA2.id
                LEFT JOIN `state` ST2 ON PA2.stateid = ST2.id
                LEFT JOIN `warehouse` WH1 ON SI.warehouseid = WH1.id
                LEFT JOIN `state` ST3 ON WH1.stateid = ST3.id
                
				WHERE
					SI.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesorderdetail_deliverysearch`(
	IN p_salesorderid INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
        SOD.`id` as salesorderdetailid,
		SOD.`salesorderid`,
		SOD.`itemid`,
        I.itemname,
        I.itemcode,
        taxcategoryid,
        REF1.refname as taxcategoryname,
        SOD.`quantity` - IFNULL(fnc_salesorder_itemdeliveredqty(SOD.`itemid`, SOD.`id`), 0) as quantity,
        SOD.`weight` - IFNULL(fnc_salesorder_itemdeliveredweight(SOD.`itemid`, SOD.`id`), 0) as weight,
        SOD.`isbird`,
		SOD.`itemunit`,
		SOD.`companyid`,
        SOD.unitprice as rate,
        SOD.taxid,
        SOD.taxpercent,
        SOD.cgstid,
        SOD.cgstpercent,
        SOD.cgstamount,
        SOD.sgstid,
        SOD.sgstpercent,
        SOD.sgstamount,
        SOD.igstid,
        SOD.igstpercent,
        SOD.igstamount,
        SOD.utgstid,
        SOD.utgstpercent,
        SOD.utgstamount,
        SOD.discount
	FROM
		salesorderdetail SOD
	LEFT JOIN item I ON I.id = SOD.itemid
    LEFT JOIN `reference` REF1 ON I.taxcategoryid = REF1.id
	WHERE
		salesorderid = p_salesorderid and
        SOD.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesorderdetail_save`(
	IN p_id INT,
	IN p_salesorderid INT,
	IN p_itemid INT,
	IN p_quantity DECIMAL(12,3),
    IN p_isbird TINYINT,
	IN p_weight DECIMAL(12,3),
    IN p_iscalcweight TINYINT,
	IN p_itemunit INT,
	IN p_unitprice DECIMAL(12,3),
	IN p_discount DECIMAL(12,3),
	IN p_taxid INT,
	IN p_taxpercent  DECIMAL(5,2),
	IN p_taxtypeid INT,
	IN p_cgstid INT,
	IN p_cgstpercent  DECIMAL(5,2),
	IN p_cgstamount DECIMAL(12,3),
	IN p_sgstid INT,
	IN p_sgstpercent DECIMAL(5,2),
	IN p_sgstamount DECIMAL(12,3),
	IN p_igstid INT,
	IN p_igstpercent DECIMAL(5,2),
	IN p_igstamount DECIMAL(12,3),
	IN p_utgstid INT,
	IN p_utgstpercent DECIMAL(5,2),
	IN p_utgstamount DECIMAL(12,3),
    IN p_linetotal DECIMAL(12,3),
    IN p_companyid INT,
	IN p_userid INT,
	OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO salesorderdetail 
					   (`id`,
						`salesorderid`,
						`itemid`,
						`quantity`,
                        `pendingqty`,
                        `isbird`,
						`weight`,
                        `pendingweight`,
                        `iscalcweight`,
						`itemunit`,
						`unitprice`,
						`discount`,
						`taxid`,
						`taxpercent`,
						`taxtypeid`,
						`cgstid`,
						`cgstpercent`,
						`cgstamount`,
						`sgstid`,
						`sgstpercent`,
						`sgstamount`,
						`igstid`,
						`igstpercent`,
						`igstamount`,
						`utgstid`,
						`utgstpercent`,
						`utgstamount`,
                        `linetotal`,
                        `companyid`)
				VALUES 
					(	p_id,
						p_salesorderid,
						p_itemid,
						p_quantity,
                        p_quantity,
                        p_isbird,
						p_weight,
                        p_weight,
                        p_iscalcweight,
						p_itemunit,
						p_unitprice,
						p_discount,
						p_taxid,
						p_taxpercent,
						p_taxtypeid,						
						p_cgstid,
						p_cgstpercent,
						p_cgstamount,
						p_sgstid,
						p_sgstpercent,
						p_sgstamount,
						p_igstid,
						p_igstpercent,
						p_igstamount,
						p_utgstid,
						p_utgstpercent,
						p_utgstamount,
                        p_linetotal,
                        p_companyid
						);
								
                          
		SET @action = 'INSERT';

	ELSE
    
		UPDATE salesorderdetail
			SET 			id = p_id,
							salesorderid = p_salesorderid,
							itemid = p_itemid,
							quantity = p_quantity,
                            isbird = p_isbird,
							weight = p_weight,
                            iscalcweight = p_iscalcweight,
							itemunit = p_itemunit,
							unitprice = p_unitprice,
							discount = p_discount,
							taxid = p_taxid,
							taxpercent = p_taxpercent,
							taxtypeid = p_taxtypeid,
							cgstid = p_cgstid,
							cgstpercent = p_cgstpercent,
							cgstamount =p_cgstamount,
							sgstid = p_sgstid,
							sgstpercent = p_sgstpercent,
							sgstamount = p_sgstamount,
							igstid = p_igstid,
							igstpercent = p_igstpercent,
							igstamount = p_igstamount,
							utgstid = p_utgstid,
							utgstpercent = p_utgstpercent,
							utgstamount = p_utgstamount,
							companyid = p_companyid,
							linetotal = p_linetotal,
							companyid = p_companyid,
							id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'salesorderdetail', out_id, @action, p_userid);



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesorderdetail_search`(
	IN p_salesorderid INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
		SOD.`id`,
        SOD.`id` as salesorderdetailid,
		SOD.`salesorderid`,
		SOD.`itemid`,
        I.itemname,
        I.itemcode,
        I.itemgroupid,
        IG.groupname,
        taxcategoryid,
        REF1.refname as taxcategoryname,
		`quantity`,
        `isbird`,
		`weight`,
        `iscalcweight`,
		SOD.`itemunit`,
		`unitprice`,
		`discount`,
		`taxid`,
		`taxpercent`,
		`taxtypeid`,
		`linetotal`,
		`cgstid`,
		`cgstpercent`,
		`cgstamount`,
		`sgstid`,
		`sgstpercent`,
		`sgstamount`,
		`igstid`,
		`igstpercent`,
		`igstamount`,
		`utgstid`,
		`utgstpercent`,
		`utgstamount`,
		SOD.`companyid`
	FROM
		salesorderdetail SOD
	LEFT JOIN item I ON I.id = SOD.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    LEFT JOIN `reference` REF1 ON I.taxcategoryid = REF1.id
	WHERE
		salesorderid = p_salesorderid and SOD.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesorderlist_search`(
	IN p_from_date date,
	IN p_to_date date
)
BEGIN

SELECT

	BSO.`id`,
	BSO.`salestypeid`,
    BSO.`salestypeid` as moduleid,
	BSO.`salesorderno`,
	BSO.`customerid`,
	BSO.`contactperson`,
	P.partyname,
	DATE_FORMAT(BSO.salesorderdate,'%d/%m/%Y') as salesorderdate,
	BSO.`referenceno`,
	BSO.`referredby`,
	DATE_FORMAT(BSO.referencedate,'%d/%m/%Y') as referencedate,
	DATE_FORMAT(BSO.deliverydate,'%d/%m/%Y') as deliverydate,
	BSO.`deliverytoaddressid`,
    BSO.`deliverytoaddress`,
	ST1.statecode as deliverytostatecode,
	ST1.isunionterritory as deliverytoisunionterritory,
	BSO.`transactiontypeid`,
	BSO.`billtoaddressid`,
    BSO.`billtoaddress`,
	ST2.statecode as billtostatecode,
	ST2.isunionterritory as billtoisunionterritory,
	BSO.`warehouseid`,
    BSO.`warehouseaddress`,
	ST3.statecode as warehousestatecode,
	ST3.isunionterritory as warehouseisunionterritory,
	BSO.`subtotal`,
	BSO.`discount`,
	((100*BSO.`discount`)/BSO.`subtotal`) as discountpercent,
	BSO.`roundoff`,
	BSO.`grandtotal`,
	BSO.`remark`,
	BSO.`subject`,
	BSO.`salespersonid`,
	BSO.`statusid`,
	REF1.refname as statusname,
	BSO.`companyid`
	
FROM salesorder BSO

LEFT JOIN party P ON BSO.customerid = P.id
LEFT JOIN `reference` REF1 ON BSO.statusid = REF1.id
LEFT JOIN `partyaddress` PA1 ON BSO.deliverytoaddressid = PA1.id
LEFT JOIN `state` ST1 ON PA1.stateid = ST1.id
LEFT JOIN `partyaddress` PA2 ON BSO.billtoaddressid = PA2.id
LEFT JOIN `state` ST2 ON PA2.stateid = ST2.id
LEFT JOIN `warehouse` WH1 ON BSO.warehouseid = WH1.id
LEFT JOIN `state` ST3 ON WH1.stateid = ST3.id

WHERE
	(BSO.salesorderdate BETWEEN p_from_date AND p_to_date)
ORDER BY BSO.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesorder_deliverysearch`(
	IN p_salestypeid VARCHAR(100),
	IN p_companyid INT
)
BEGIN


		SELECT 
				id, salestypeid, salesorderno, customerid, contactperson,
				partyname, salesorderdate, deliverydate,
				hasorderquantity, deliverytoaddressid, deliverytoaddress,
				billtoaddressid, billtoaddress, warehouseid, warehouseaddress,
				grandtotal, statusid, statusname, companyid
                
			FROM
            (
					SELECT
                
						BSO.`id`,
						BSO.`salestypeid`,
						BSO.`salesorderno`,
						BSO.`customerid`,
                        BSO.`contactperson`,
                        P.partyname,
                        DATE_FORMAT(BSO.salesorderdate,'%d/%m/%Y') as salesorderdate,						
                        DATE_FORMAT(BSO.deliverydate,'%d/%m/%Y') as deliverydate,
                        fnc_salesorder_hasorderquantity(BSO.`id`, BSO.`companyid`) AS hasorderquantity,
                        BSO.`deliverytoaddressid`,
                        BSO.`deliverytoaddress`,
                        BSO.`billtoaddressid`,
                        BSO.`billtoaddress`,
                        BSO.`warehouseid`,
                        BSO.`warehouseaddress`,
						BSO.`grandtotal`,
						BSO.`statusid`,
                        REF1.refname as statusname,
						BSO.`companyid`
                        
					FROM
						salesorder BSO
					LEFT JOIN party P ON BSO.customerid = P.id
					LEFT JOIN `reference` REF1 ON BSO.statusid = REF1.id
					-- LEFT JOIN salesdelivery SD ON SD.salesorderid = BSO.id
					WHERE
						(p_salestypeid IS NULL OR FIND_IN_SET(BSO.`salestypeid`, p_salestypeid)) 
						-- AND SD.id is null
						AND BSO.companyid = p_companyid AND FIND_IN_SET(BSO.statusid, '1362,1363')
					
                    ORDER BY BSO.id DESC
			) 
            AS tmpdeliverysearch
            WHERE hasorderquantity > 0;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesorder_invoicesearch`(
	
	IN p_companyid INT
)
BEGIN


			SELECT 
					id, salestypeid, salesorderno, customerid, contactperson,
					referenceno, transactiontypeid, partyname,
					salesorderdate, deliverydate, deliverytoaddressid, statecode, statename,
					isunionterritory, deliverytoaddress, billtoaddressid, billtoaddress,
					warehouseid, warehouseaddress, grandtotal, statusid, statusname,
					hasdelivery, companyid
			FROM (

					SELECT
                
						BSO.`id`,
						BSO.`salestypeid`,
						BSO.`salesorderno`,
						BSO.`customerid`,
                        BSO.`contactperson`,
                        BSO.`referenceno`,
                        BSO.`transactiontypeid`,
                        P.partyname,
                        DATE_FORMAT(BSO.salesorderdate,'%d/%m/%Y') as salesorderdate,						
                        DATE_FORMAT(BSO.deliverydate,'%d/%m/%Y') as deliverydate,
                        BSO.`deliverytoaddressid`,
                        ST.statecode,
                        ST.statename,
                        ST.isunionterritory,
                        BSO.`deliverytoaddress`,
                        BSO.`billtoaddressid`,
                        BSO.`billtoaddress`,
                        BSO.`warehouseid`,
                        BSO.`warehouseaddress`,
						BSO.`grandtotal`,
						BSO.`statusid`,
                        REF1.refname as statusname,
                        fnc_salesorder_hasdeliveryforinvoice(BSO.`id`, BSO.`companyid`) as hasdelivery,
						BSO.`companyid`
                        
				FROM
					salesorder BSO
				
				LEFT JOIN party P ON BSO.customerid = P.id
                LEFT JOIN `reference` REF1 ON BSO.statusid = REF1.id
                LEFT JOIN `partyaddress` PA ON BSO.deliverytoaddressid = PA.id
                LEFT JOIN `state` ST ON PA.stateid = ST.id
				WHERE
					-- (p_salestypeid IS NULL OR p_salestypeid = BSO.`salestypeid`) 
					-- AND
                    BSO.companyid = p_companyid -- AND FIND_IN_SET(BSO.statusid, '1363')
                    AND EXISTS(SELECT 1 FROM salesdelivery SD WHERE SD.salesorderid = BSO.id AND FIND_IN_SET(SD.statusid, '1622'))
				ORDER BY BSO.id DESC
					
		) 
		AS tmpinvsearch
		WHERE hasdelivery > 0;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesorder_save`(
		IN p_id INT,
        IN p_salestypeid int,
		IN p_salesorderno varchar(30),
        IN p_customerid INT,
        IN p_contactperson varchar(100),
		IN p_salesorderdate DATE,
		IN p_referenceno varchar(30),
		IN p_referredby INT,
		IN p_referencedate DATE,
        IN p_transactiontypeid INT,
        IN p_deliverydate DATE,
        IN p_deliverytoaddressid INT,
        IN p_deliverytoaddress VARCHAR(200),
		IN p_billtoaddressid INT,
        IN p_billtoaddress VARCHAR(200),
        IN p_warehouseid INT,
        IN p_warehouseaddress VARCHAR(200),
        IN p_subtotal decimal(12,3),
        IN p_discount decimal(12,3),
        IN p_roundoff decimal(12,3),
        IN p_grandtotal decimal(12,3),
        IN p_remark varchar(500),
        IN p_subject varchar(200),
        IN p_salespersonid INT,
        IN p_statusid INT,
        IN p_companyid INT,
		IN p_userid INT,
		OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO salesorder
					   (`id`,
						`salestypeid`,
						`salesorderno`,
						`customerid`,
                        `contactperson`,
						`salesorderdate`,
						`referenceno`,
						`referredby`,
						`referencedate`,
                        `transactiontypeid`,
						`deliverydate`,
						`deliverytoaddressid`,
                        `deliverytoaddress`,
                        `billtoaddressid`,
                        `billtoaddress`,
                        `warehouseid`,
                        `warehouseaddress`,
						`subtotal`,
						`discount`,
						`roundoff`,
						`grandtotal`,
						`remark`,
						`subject`,
						`salespersonid`,
						`statusid`,
                        `companyid`)
				VALUES 
					(	p_id,
						p_salestypeid,
						p_salesorderno,                        
						p_customerid,
                        p_contactperson,
						p_salesorderdate,
						p_referenceno,
						p_referredby,
						p_referencedate,
                        p_transactiontypeid,
						p_deliverydate,
						p_deliverytoaddressid,
                        p_deliverytoaddress,
                        p_billtoaddressid,
                        p_billtoaddress,
                        p_warehouseid,
                        p_warehouseaddress,
						p_subtotal,
						p_discount,
						p_roundoff,
						p_grandtotal,
						p_remark,
						p_subject,
						p_salespersonid,
						p_statusid,
                        p_companyid);
								
                          
		SET @action = 'INSERT';

	ELSE
    
		UPDATE salesorder
			SET 		id = p_id,
						salestypeid = p_salestypeid,
						salesorderno = p_salesorderno,
						customerid = p_customerid,
                        contactperson = p_contactperson,
						salesorderdate = p_salesorderdate,
						referenceno = p_referenceno,
						referredby = p_referredby,
						referencedate = p_referencedate,
                        transactiontypeid = p_transactiontypeid,
						deliverydate = p_deliverydate,
						deliverytoaddressid = p_deliverytoaddressid,
                        deliverytoaddress = p_deliverytoaddress,
                        billtoaddressid = p_billtoaddressid,
                        billtoaddress = p_billtoaddress,
                        warehouseid = p_warehouseid,
                        warehouseaddress = p_warehouseaddress,
						subtotal = p_subtotal,
					    discount = p_discount,
						roundoff = p_roundoff,
						grandtotal = p_grandtotal,
						remark = p_remark,
						`subject` = p_subject,
						salespersonid = p_salespersonid,
						statusid = p_statusid,
                        companyid = p_companyid,
						id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'salesorder', out_id, @action, p_userid);



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesorder_search`(
	IN p_companyid INT
)
BEGIN

		SELECT
                
						BSO.`id`,
						BSO.`salestypeid`,
						BSO.`salesorderno`,
						BSO.`customerid`,
                        BSO.`contactperson`,
                        P.partyname,
                        DATE_FORMAT(BSO.salesorderdate,'%d/%m/%Y') as salesorderdate,
						BSO.`referenceno`,
						BSO.`referredby`,
                        DATE_FORMAT(BSO.referencedate,'%d/%m/%Y') as referencedate,
                        DATE_FORMAT(BSO.deliverydate,'%d/%m/%Y') as deliverydate,
						BSO.`deliverytoaddressid`,
						BSO.`transactiontypeid`,
						BSO.`billtoaddressid`,
						BSO.`warehouseid`,
						BSO.`subtotal`,
						BSO.`discount`,
						BSO.`roundoff`,
						BSO.`grandtotal`,
						BSO.`remark`,
						BSO.`subject`,
						BSO.`salespersonid`,
						BSO.`statusid`,
                        REF1.refname as statusname,
						BSO.`companyid`
                        
				FROM
					salesorder BSO
				LEFT JOIN party P ON BSO.customerid = P.id
                LEFT JOIN `reference` REF1 ON BSO.statusid = REF1.id
				WHERE
					BSO.companyid = p_companyid
				ORDER BY BSO.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesorder_select`(
	IN p_id INT
)
BEGIN

		SELECT
                
						BSO.`id`,
						BSO.`salestypeid`,
						BSO.`salesorderno`,
						BSO.`customerid`,
                        BSO.`contactperson`,
                        P.partyname,
                        DATE_FORMAT(BSO.salesorderdate,'%d/%m/%Y') as salesorderdate,
						BSO.`referenceno`,
						BSO.`referredby`,
                        DATE_FORMAT(BSO.referencedate,'%d/%m/%Y') as referencedate,
                        DATE_FORMAT(BSO.deliverydate,'%d/%m/%Y') as deliverydate,
						BSO.`deliverytoaddressid`,
                        BSO.`deliverytoaddress`,
                        ST1.statecode as deliverytostatecode,
                        ST1.isunionterritory as deliverytoisunionterritory,
						BSO.`transactiontypeid`,
						BSO.`billtoaddressid`,
                        BSO.`billtoaddress`,
                        ST2.statecode as billtostatecode,
                        ST2.isunionterritory as billtoisunionterritory,
						BSO.`warehouseid`,
                        BSO.`warehouseaddress`,
                        ST3.statecode as warehousestatecode,
                        ST3.isunionterritory as warehouseisunionterritory,
						BSO.`subtotal`,
						BSO.`discount`,
                        ((100*BSO.`discount`)/BSO.`subtotal`) as discountpercent,
						BSO.`roundoff`,
						BSO.`grandtotal`,
						BSO.`remark`,
						BSO.`subject`,
						BSO.`salespersonid`,
						BSO.`statusid`,
                        REF1.refname as statusname,
						BSO.`companyid`
	
				FROM
					salesorder BSO
				LEFT JOIN party P ON BSO.customerid = P.id
                LEFT JOIN `reference` REF1 ON BSO.statusid = REF1.id
                LEFT JOIN `partyaddress` PA1 ON BSO.deliverytoaddressid = PA1.id
                LEFT JOIN `state` ST1 ON PA1.stateid = ST1.id
                LEFT JOIN `partyaddress` PA2 ON BSO.billtoaddressid = PA2.id
                LEFT JOIN `state` ST2 ON PA2.stateid = ST2.id
                LEFT JOIN `warehouse` WH1 ON BSO.warehouseid = WH1.id
                LEFT JOIN `state` ST3 ON WH1.stateid = ST3.id
                
				WHERE
					BSO.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesreturn_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM sales_return WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesreturn_save`(
	IN p_id INT(11),
    IN p_date DATE,
    IN p_itemid INT(11),
    IN p_warehouseid INT(11),
    IN p_warehousebinid INT(11),
    IN p_transactionid INT(11),
    IN p_quantity DECIMAL(12,3),
    IN p_unitcost DECIMAL(12,3),
    IN p_amount DECIMAL(15,3),
    IN p_statusid INT(11),
    IN p_remark VARCHAR(200),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT OUT_ID INT(11)
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO sales_return(
			`date`, 
            itemid, 
            warehouseid, 
            warehousebinid, 
            transactionid,
            quantity,
            unitcost,
            amount,
            statusid,
            remark,
            companyid)
        VALUES (
			p_date, 
            p_itemid, 
            p_warehouseid, 
            p_warehousebinid, 
            p_transactionid,
            p_quantity,
            p_unitcost,
            p_amount,
            p_statusid,
            p_remark,
            p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE sales_return
        SET `date` = p_date, 
            itemid = p_itemid, 
            warehouseid = p_warehouseid, 
            warehousebinid = p_warehousebinid, 
            transactionid = p_transactionid,
            quantity = p_quantity,
            unitcost = p_unitcost,
            amount = p_amount,
            statusid = p_statusid,
            remark = p_remark,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- if status id approve
    IF(p_statusid = 6262) THEN
    
        SET @cogsledgerid = null;
        SELECT cogsledgerid
        INTO @cogsledgerid
        FROM common_setting
        WHERE companyid = p_companyid;
        
	   SET @branch = null;
	   SELECT L.branchid INTO @branch 
	   FROM location L
	   LEFT JOIN warehouse W ON W.locationid = L.id
	   WHERE W.id = p_warehouseid;
        
        
		--  do material receipt
	
		SET @mreceiptid = null;
		CALL spc_materialreceipt_save(
			NULL, p_date, 348, NULL, 322,
			NULL, p_userid, p_userid, p_date, 
			p_companyid, p_userid, @mreceiptid
		);

		SET @itembatch = null;
		SET @itemgroup = null;
		
		select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch 
		from item I
		INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

		WHERE I.id = p_itemid;
		
		SET @mreceiptdetailid = null;
		CALL spc_materialreceiptdetail_save(
			NULL, @mreceiptid, p_itemid,
			(SELECT itemname FROM item WHERE id = p_itemid),
			p_quantity, p_unitcost,
			(p_quantity * p_unitcost), 
			(SELECT itemunitid FROM item WHERE id = p_itemid), 
			@itembatch, p_warehouseid, p_warehousebinid,
			p_companyid, p_userid, NULL, @mreceiptdetailid
		);
		
		SELECT itemgroupid INTO @itemgroup 
		FROM item 
		WHERE id = p_itemid;
	
		UPDATE itemgroup 
		SET seriesstartwith = seriesstartwith +1
		WHERE id = @itemgroup;
		
		SET @mmovementid1 = null;
		CALL spc_materialmovement_save(
			NULL, p_itemid, @itembatch,
			684, @mreceiptid, p_date, p_quantity, 
			NULL, NULL, p_warehouseid, 
			p_warehousebinid, (p_quantity * p_unitcost), 
			p_companyid, p_userid, @mmovementid1
		);
		
		-- Update sales delivery
		SET @delqty = 0;
		SELECT quantity INTO @delqty
		FROM salesdeliverydetail 
		WHERE salesdeliveryid = p_transactionid
		AND itemid = p_itemid;  
        
		UPDATE salesdeliverydetail SDD
		SET quantity = (@delqty - p_quantity)
		WHERE salesdeliveryid = p_transactionid
		AND itemid = p_itemid;
		
        SET @partyid = null;
        SELECT SO.customerid INTO @partyid
        FROM salesdelivery SD
        LEFT JOIN salesorder SO ON SO.id = SD.salesorderid
        WHERE SD.id = p_transactionid;
        
		SET @jeid = null;
		CALL spc_journalentry_save(
			NULL,
			NULL,
			1292,
			NULL,
			p_date,
			NULL,
			@branch,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@partyid,
			NULL,
			NULL,
			NULL,
			348,
			NULL,
			'Sales Return JE',
			NULL,
			NULL,
			NULL,
			OUT_ID,
			'Sales Return JE',
			p_companyid,
			p_userid,
			@jeid
		);
		
		-- Credit to cogs - Ledger
					 
		 SET @jedetailid1 = null;
		 CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			@cogsledgerid,
			0,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			0,
			p_amount,
			NULL,
			@partyid,
			NULL,
			@itemid,
			NULL,
			'Sales Return JE',
			p_companyid,
			p_userid,
			@jedetailid1
		 );
		
		-- Debit to item - Ledger
		
		 SET @jedetailid = null;
		 CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			(SELECT ledgerid FROM item WHERE id = @itemid),
			0,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			p_amount,
			0,
			NULL,
			@partyid,
			NULL,
			@itemid,
			NULL,
			'Sales Return JE',
			p_companyid,
			p_userid,
			@jedetailid
		 );
    
    END IF;
    -- record log
   CALL spc_commonlog_save(p_companyid, 'sales_return', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesreturn_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT SSR.id,
		    DATE_FORMAT(`date`,'%d/%m/%Y') as `date`, 
            SSR.itemid, 
            I.itemname,
            SSR.warehouseid,
            W.warehousename,
            SSR.warehousebinid,
            WB.binname,
            SSR.transactionid,
            SSR.quantity,
            SSR.unitcost,
            REF.refname as unitname,
            SSR.amount,
            SSR.statusid,
            SSR.remark,
            REF2.refname as `status`
	FROM sales_return SSR
    LEFT JOIN item I ON I.id = SSR.itemid
    LEFT JOIN `reference` REF ON REF.id = I.itemunitid
    LEFT JOIN `reference` REF2 ON SSR.statusid = REF2.id
    LEFT JOIN warehouse W ON W.id = SSR.warehouseid
    LEFT JOIN warehousebin WB ON WB.id = SSR.warehousebinid
    
    WHERE SSR.companyid = p_companyid;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesreturn_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT SSR.id,
		    DATE_FORMAT(`date`,'%d/%m/%Y') as `date`, 
            SSR.itemid, 
            I.itemname,
            SSR.warehouseid,
            W.warehousename,
            SSR.warehousebinid,
            WB.binname,
            SSR.quantity,
            SSR.unitcost,
            REF.refname as unitname,
            SSR.amount,
            SSR.statusid,
            SSR.remark,
            REF2.refname as `status`,
            SSR.transactionid,
            SD.salesdeliveryno as transactionno,
            CASE
				WHEN SDD.quantity < fnc_iteminstock(SSR.itemid, SSR.warehousebinid, SSR.date, SSR.companyid) THEN SDD.quantity
				ELSE fnc_iteminstock(SSR.itemid, SSR.warehousebinid, SSR.date, SSR.companyid)
			END as instock
            
	FROM sales_return SSR
    LEFT JOIN salesdelivery SD ON SD.id = SSR.transactionid
    LEFT JOIN salesdeliverydetail SDD ON SDD.salesdeliveryid = SD.id AND SDD.itemid = SSR.itemid
    LEFT JOIN item I ON I.id = SSR.itemid
    LEFT JOIN `reference` REF ON REF.id = I.itemunitid
    LEFT JOIN `reference` REF2 ON SSR.statusid = REF2.id
    LEFT JOIN warehouse W ON W.id = SSR.warehouseid
    LEFT JOIN warehousebin WB ON WB.id = SSR.warehousebinid
    
    WHERE SSR.id = p_id;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_salesummary_report`(
IN p_fromdate DATE,
IN p_todate DATE,
IN p_partyid varchar(255),
IN p_companyid INT(11)
)
BEGIN

SET @@sql_mode = ' ';
select * ,((grosstotal-discount)+cgstamount+sgstamount+igstamount+utgstamount)as nettotal

from(
select 
		SI.id as invoiceid,
        SI.salesinvoiceno,
        I.itemname,
        DATE_FORMAT( SI.salesinvoicedate,'%d/%m/%Y') as salesinvoicedate,
        SID.discount as discount,
        SI.customerid,
        SID.quantity,
        SID.unitprice as price,
		IFNULL(SID.weight,0) as weight,
        P.partyname,
	    IFNULL((SID.cgstamount),0) as cgstamount,
        IFNULL((SID.sgstamount),0) as sgstamount,
		IFNULL((SID.igstamount),0) as igstamount,
        IFNULL((SID.utgstamount),0) as utgstamount,
         CASE
			WHEN SID.isbird = 1  THEN (SID.weight* SID.unitprice)
			ELSE (SID.quantity* SID.unitprice)
		END as grosstotal
        
from  salesinvoice SI
LEFT JOIN salesinvoicedetail SID ON SID.salesinvoiceid = SI.id
LEFT JOIN item I ON I.id = SID.itemid
LEFT JOIN party P ON P.id = SI.customerid

where SI.salesinvoicedate BETWEEN p_fromdate AND p_todate
 AND find_in_set(P.id,p_partyid)
 AND P.partyroleids = 32)as temp;     

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_sales_invoice_overdue_detail`( 
 IN p_company_id INT,
 IN p_to_date Date)
BEGIN
set @start_date = null;
-- get year start date from financial year setting where status 6021 = open and year is active
select startfrom INTO @start_date FROM financialyearsetting WHERE statusid = 6021 AND `active` = 1 AND companyid = p_company_id ;

    select 
    SI.id as salesinvoice_id,
    SI.salesinvoiceno,
	DATE_FORMAT(SI.deliverydate,'%d/%m/%Y') as deliverydate,
    SI.grandtotal,
    p.partyname,
    R.refname as modulename,
    DATE_FORMAT(SI.salesinvoicedate,'%d/%m/%Y') as salesinvoicedate
    FROM salesinvoice SI
    INNER JOIN party p ON p.id = SI.customerid
    INNER JOIN `reference` R ON R.id = SI.salestypeid
    where SI.salesinvoicedate<=p_to_date AND SI.deliverydate>=@start_date AND SI.deliverydate<=p_to_date;



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savebreederbatchopening_je`(
	IN p_breederbatchopeningid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempbreederopening;
    
    IF((SELECT statusid FROM breederbatchopening WHERE id = p_breederbatchopeningid) = 1602) THEN

		BEGIN
		
			SET @WIPledgerid = null;
            SET @stockledgerid = null;
			SELECT WIPledgerid, stockledgerid
			INTO @WIPledgerid, @stockledgerid
			FROM breedersetting LIMIT 1;
		   
			set @branch = null;
			SELECT L.branchid INTO @branch 
			FROM location L
			LEFT JOIN breederbatchlocationwiseopeningdetail BBLO ON BBLO.breederbatchopeningid = p_breederbatchopeningid
			WHERE BBLO.locationid = L.id LIMIT 1;
            
            SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				(SELECT livebatchdate FROM breederbatchopening WHERE id = p_breederbatchopeningid),
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                721,
				NULL,
				'Breeder batch opening JE',
				NULL,
				NULL,
				NULL,
				p_breederbatchopeningid,
				'Breeder batch opening JE',
				p_companyid,
                p_userid,
                @jeid
           );
           
           SET @row_number = 0;
   
			CREATE TEMPORARY TABLE tempbreederopening
			
            SELECT (@row_number:=@row_number + 1) AS num, WIPaccountbalance from (
				SELECT 
					WIPaccountbalance
				FROM breederbatchfinancialopeningdetail 
                where breederbatchopeningid = p_breederbatchopeningid
            ) 
            as tblfinancedetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempbreederopening INTO n;
				
					WHILE i<n DO 
					
						SET @WIPaccountbalance = null;
						select WIPaccountbalance into @WIPaccountbalance from tempbreederopening where num = i+1;
                    
						-- insert JE detail
                        
                        -- Credit to stock - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@stockledgerid,
                            0,
                            NULL,
                            (SELECT breederbatchid FROM breederbatchopening WHERE id = p_breederbatchopeningid),
                            NULL,
							NULL,
                            NULL,
							NULL,
							NULL,
							0,
							@WIPaccountbalance,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Breeder batch opening JE',
							p_companyid,
							p_userid,
							@jedetailid1
						 );
                        
                        -- Debit to WIP Bird - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@WIPledgerid,
                            0,
                            NULL,
                            (SELECT breederbatchid FROM breederbatchopening WHERE id = p_breederbatchopeningid),
                            NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							@WIPaccountbalance,
							0,
							NULL,
							NULL,
							NULL,
							NULL,
							NULL,
							'Breeder batch opening JE',
							p_companyid,
							p_userid,
							@jedetailid
						 );
                        
						SET i = i + 1;
					END WHILE;
				End;
			
		END;
        
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savebreederbatchtransfer_je`(
	IN p_breederbatchtransferid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempbreederbatchtransfer;
    
    -- Journal entry detail for WIP bird
	SET @WIPledgerid = null;
    SET @defaultmalechickid = null;
   SET @defaultfemalechickid = null;
   SET @defaultmalechickcost = null;
   SET @defaultfemalechickcost = null;
   SET @branch = null;
   SELECT WIPledgerid, defaultmalechickid, defaultfemalechickid, defaultmalechickcost, defaultfemalechickcost
   INTO @WIPledgerid, @defaultmalechickid, @defaultfemalechickid, @defaultmalechickcost, @defaultfemalechickcost
   FROM breedersetting LIMIT 1;
    
    SELECT L.branchid INTO @branch FROM location L
    WHERE L.id = (SELECT fromlocationid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid);
    
    SET @jeid = null;
    CALL spc_journalentry_save(
		NULL,
		NULL,
		1300,
		NULL,
		(SELECT transferdate FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
		NULL,
		@branch,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		721,
		NULL,
		'Breeder batch transfer JE',
		NULL,
		NULL,
		NULL,
		p_breederbatchtransferid,
		'Breeder batch transfer JE',
		p_companyid,
		p_userid,
		@jeid
    );
    
    SET @row_number = 0;
   
	CREATE TEMPORARY TABLE tempbreederbatchtransfer
	
	SELECT (@row_number:=@row_number + 1) AS num, quantity, toshedid, itemid from (
		SELECT 
			quantity,
            toshedid,
            itemid
		FROM breederbatchtransferdetail 
		where breederbatchtransferid = p_breederbatchtransferid
	) 
	as tblbatchtransferdetail;
    
    BEGIN
		DECLARE n INT DEFAULT 0;
		DECLARE i INT DEFAULT 0;
		SELECT COUNT(*) FROM tempbreederbatchtransfer INTO n;
	
		WHILE i<n DO 
		
            SET @quantity = null;
            SET @toshedid = null;
            SET @itemid = null;
            
			select quantity, toshedid, itemid into @quantity, @toshedid, @itemid from tempbreederbatchtransfer where num = i+1;
		
			-- insert JE detail
            
			 -- Credit to WIP Bird on fromshedid - Ledger
                
			 -- male chick
             IF(@itemid = @defaultmalechickid) THEN
				 SET @jedetailid1 = null;
				 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
                                0,
                                NULL,
                                (SELECT breederbatchid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @defaultmalechickcost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder batch transfer',
								p_companyid,
								p_userid,
								@jedetailid1
				 );
				 
				 -- Debit to WIP Bird on toshedid - Ledger
				
				 SET @jedetailid = null;
				 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
                                0,
                                NULL,
                                (SELECT breederbatchid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @defaultmalechickcost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder batch transfer',
								p_companyid,
								p_userid,
								@jedetailid
				 );
			END IF;
            
            -- female chick
            IF(@itemid = @defaultfemalechickid) THEN
				 SET @jedetailid1 = null;
				 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
                                0,
                                NULL,
                                (SELECT breederbatchid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @defaultfemalechickcost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder batch transfer',
								p_companyid,
								p_userid,
								@jedetailid1
				 );
				 
				 -- Debit to WIP Bird on toshedid - Ledger
				
				 SET @jedetailid = null;
				 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
                                0,
                                NULL,
                                (SELECT breederbatchid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @defaultfemalechickcost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder batch transfer',
								p_companyid,
								p_userid,
								@jedetailid
				 );
			END IF;
			SET i = i + 1;
		END WHILE;
	End;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savebreederdailytransaction_je`(
	IN p_breederdailytransactionid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempconsumption;
    DROP TABLE IF EXISTS tempmortality;
    
    BEGIN 
        
        -- Journal entry detail for WIP bird
		   SET @WIPledgerid = null;
           SET @cogsledgerid = null;
           SET @defaultmalechickid = null;
           SET @defaultfemalechickid = null;
           SET @defaultmalechickcost = null;
           SET @defaultfemalechickcost = null;
           SET @breederbatchid = null;
           SET @shedid = null;
           SET @transactiondate = null;
		   SET @birdcost = null;
           SET @branchid = null;
		   
		   SELECT WIPledgerid, costofgoodsoldledgerid
		   INTO @WIPledgerid, @cogsledgerid
		   FROM breedersetting LIMIT 1;
           
           SELECT BDT.breederbatchid,BDT.transactiondate,BDT.shedid, L.branchid
           INTO @breederbatchid,@transactiondate,@shedid, @branchid
           FROM breederdailytransaction BDT
           LEFT JOIN location L ON L.id = BDT.locationid
           WHERE BDT.id = p_breederdailytransactionid;
           
           SELECT maleitemid, femaleitemid
           INTO @defaultmalechickid, @defaultfemalechickid
           FROM breederbatch WHERE id = @breederbatchid;
           
           select fun_purchse_biredcost(@breederbatchid,p_companyid,@transactiondate) INTO @birdcost;
           
           
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
                NULL,
                1300,
                NULL,
                (SELECT transactiondate FROM breederdailytransaction WHERE id = p_breederdailytransactionid),
                NULL,
				@branchid,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                721,
				NULL,
                'Breeder daily transaction JE',
                NULL,
                NULL,
                NULL,
                p_breederdailytransactionid,
                'Breeder daily transaction JE',
                p_companyid,
                p_userid,
                @jeid
           );
   
   
			-- JE for breeder daily consumption
			SET @row_number = 0;
   
			CREATE TEMPORARY TABLE tempconsumption
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemledgerid, itemid FROM(
            
				SELECT itemvalue as totalcost,
                (SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                itemid
                
                FROM breederdailyconsumption 
                WHERE breederdailytransactionid = p_breederdailytransactionid
                
			) as tbldailydetail;
            
            
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempconsumption INTO n;
				
					WHILE i<n DO 
					
                    SET @totalcost = null;
					SET @itemledgerid = null;
                    
						select totalcost, itemledgerid, itemid into @totalcost, @itemledgerid ,@itemid from tempconsumption where num = i+1;
                    
						-- insert JE detail
                         
                         SET @breederbatchid = null;
                         SET @locationid = null;
                         SET @shedid = null;
                         
                         SELECT breederbatchid, locationid, shedid
                         INTO @breederbatchid, @locationid, @shedid
                         FROM breederdailytransaction WHERE id = p_breederdailytransactionid;
                         
                         -- Credit to consumed item - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
										NULL,
                                        @jeid,
                                        @itemledgerid,
                                        0,
                                        NULL,
                                        (SELECT breederbatchid FROM breederdailytransaction WHERE id = p_breederdailytransactionid),
                                        NULL,
                                        NULL,
                                        NULL,
										NULL,
										NULL,
                                        0,
                                        @totalcost,
                                        NULL,
                                        NULL,
										NULL,
                                        @itemid,
										NULL,
                                        'Breeder daily transaction cons',
										p_companyid,
										p_userid,
										@jedetailid1
						 );
                         
                         -- Debit to WIP Bird - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
										NULL,
                                        @jeid,
                                        @WIPledgerid,
                                        0,
                                        NULL,
                                        (SELECT breederbatchid FROM breederdailytransaction WHERE id = p_breederdailytransactionid),
                                        NULL,
                                        NULL,
                                        NULL,
										NULL,
										NULL,
                                        @totalcost,
                                        0,
                                        NULL,
                                        NULL,
										NULL,
                                        @itemid,
										NULL,
                                        'Breeder daily transaction wip',
										p_companyid,
										p_userid,
										@jedetailid
						 );
						
						SET i = i + 1;
					END WHILE;
				End;
                
                
                -- JE for breeder daily mortality
                
                SET @row_number1 = 0;
   
				CREATE TEMPORARY TABLE tempmortality
				
				SELECT (@row_number1:=@row_number1 + 1) AS num1, quantity, itemledgerid, itemid FROM(
				
					SELECT (totalculls + totalmortality) as quantity,
					(SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                    itemid
					
					FROM breederdailymortality 
					WHERE breederdailytransactionid = p_breederdailytransactionid
					
				) as tbldaily1detail1;
				
				
				
				BEGIN
					DECLARE n1 INT DEFAULT 0;
					DECLARE j INT DEFAULT 0;
					SELECT COUNT(*) FROM tempmortality INTO n1;
					
						WHILE j<n1 DO 
                        
							 SET @quantity = null;
							 SET @itemledgerid1 = null;
                             SET @itemid1 = null;
						
							select quantity, itemledgerid, itemid  into @quantity, @itemledgerid1, @itemid1 from tempmortality where num1 = j+1;
								
							-- insert JE detail
							 
							 -- Credit to culls and mortality item - Ledger
                             
                             -- male chick
							 IF(@itemid1 = @defaultmalechickid) THEN
								 SET @jedetailid3 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@itemledgerid1,
									0,
									NULL,
									(SELECT breederbatchid FROM breederdailytransaction WHERE id = p_breederdailytransactionid),
                                    NULL,
									NULL,
                                    NULL,
									NULL,
									NULL,
									0,
									(@quantity * @birdcost),
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid3
								 );
								 
								 -- Debit to WIP - Ledger
								
								 SET @jedetailid2 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@WIPledgerid,
									0,
                                    NULL,
									(SELECT breederbatchid FROM breederdailytransaction WHERE id = p_breederdailytransactionid),
                                    NULL,
									NULL,
                                    NULL,
									NULL,
									NULL,
									(@quantity * @birdcost),
									0,
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid2
								 );
                                 
                                 END IF;
                                 
                                 -- female chick
                                 IF(@itemid1 = @defaultfemalechickid) THEN
								 SET @jedetailid3 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@itemledgerid1,
									0,
                                    NULL,
									(SELECT breederbatchid FROM breederdailytransaction WHERE id = p_breederdailytransactionid),
                                    NULL,
									NULL,
                                    NULL,
									NULL,
									NULL,
									0,
									(@quantity * @birdcost),
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid3
								 );
								 
								 -- Debit to WIP - Ledger
								
								 SET @jedetailid2 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@WIPledgerid,
									0,
                                    NULL,
									(SELECT breederbatchid FROM breederdailytransaction WHERE id = p_breederdailytransactionid),
									NULL,
                                    NULL,
                                    NULL,
									NULL,
									NULL,
									(@quantity *@birdcost),
									0,
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid2
								 );
                                 
                                 END IF;
							
							SET j = j + 1;
						END WHILE;
					End;
		END;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savebreedereggcollection_amortization_je`(
	IN p_eggscollectionid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempeggcollection;
    
    IF((SELECT itemtypeid FROM eggsdistributiondetail WHERE eggscollectionid = p_eggscollectionid LIMIT 1) = 881) THEN
    
    BEGIN
    -- Journal entry detail for WIP bird
	   SET @WIPledgerid = null;
       SET @amortizationcost = null;
       SET @amortizationledgerid = null;
       
       SELECT amortizationvalueofbird INTO @amortizationcost FROM amortization WHERE breederbatchid = (SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid); 
	  
       SELECT @amortizationcost;
	   SELECT WIPledgerid,amortizationledgerid
	   INTO @WIPledgerid, @amortizationledgerid
	   FROM breedersetting LIMIT 1;
       
       set @branch = null;
       SELECT L.branchid INTO @branch 
       FROM location L
       LEFT JOIN eggscollection EC ON EC.id = p_eggscollectionid
       LEFT JOIN warehouse W ON W.id = EC.towarehouseid
       WHERE W.locationid = L.id;
       
       SET @jeid = null;
           CALL spc_journalentry_save(                
                NULL,
				NULL,
				1300,
				NULL,
				(SELECT collectiondate FROM eggscollection WHERE id = p_eggscollectionid),
				NULL,
				@branchid,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                721,
                NUll,
				'Breeder egg collection for Amortization JE',
				NULL,
				NULL,
				NULL,
				p_eggscollectionid,
				'Breeder egg collection for Amortization JE',
				p_companyid,
				p_userid,
                @jeid
           );
           
           SET @row_number = 0;
   
			CREATE TEMPORARY TABLE tempeggcollection
			
            SELECT (@row_number:=@row_number + 1) AS num, quantity, itemledgerid, itemid, itemtypeid from (
				SELECT 
				quantity,
                (SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                itemid,
                itemtypeid
				FROM eggsdistributiondetail 
                where eggscollectionid = p_eggscollectionid AND itemtypeid = 881
                
            ) 
            as tblgrpodetail;
            
        
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempeggcollection INTO n;
				
					WHILE i<n DO 
                    
						SET @quantity = null;
                        SET @itemledgerid = null;
                        SET @itemid = null;  
                        SET @itemtypeid = null;
					
						select quantity, itemledgerid, itemid, itemtypeid into @quantity, @itemledgerid, @itemid, @itemtypeid from tempeggcollection where num = i+1;
                    
                   	-- insert JE detail
                         -- if(@quantity > 0) then
                        IF(@itemtypeid = 881) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
                                NULL,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @amortizationcost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder egg collection for Amortization JE',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@amortizationledgerid,
								0,
                                NULL,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @amortizationcost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder egg collection for Amortization JE',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- commercial eggs
                        /* IF(@itemtypeid = 882) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @amortizationcost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder egg collection for Amortization JE',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@amortizationledgerid,
								0,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @amortizationcost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder egg collection for Amortization JE',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- cracked eggs
                         IF(@itemtypeid = 883) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @amortizationcost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder egg collection for Amortization JE',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@amortizationledgerid,
								0,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @amortizationcost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder egg collection for Amortization JE',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- doubleyolk eggs
                         IF(@itemtypeid = 884) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @amortizationcost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder egg collection for Amortization JE',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@amortizationledgerid,
								0,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @amortizationcost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder egg collection for Amortization JE',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF; 
						
						
                       -- end if;*/
                       SET i = i + 1;
					END WHILE;
				End;
       END;
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savebreedereggcollection_je`(
	IN p_eggscollectionid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempeggcollection;
    
    IF((SELECT statusid FROM eggsdistributiondetail WHERE eggscollectionid = p_eggscollectionid LIMIT 1) = 842) THEN
    
    BEGIN
    -- Journal entry detail for WIP bird
	   SET @WIPledgerid = null;
	   SET @hatchingeggscost = null;
       SET @commercialeggscost = null;
       SET @crackedeggscost = null;
       SET @doubleyolkeggscost = null;
       SET @inventorygainandlossledgerid = null;
       SET @wastageeggscost = null;
       
	   SELECT WIPledgerid, hatchingeggscost, commercialeggscost, crackedeggscost, doubleyolkeggscost, inventorygainandlossledgerid,wastageeggscost
	   INTO @WIPledgerid, @hatchingeggscost, @commercialeggscost, @crackedeggscost, @doubleyolkeggscost, @inventorygainandlossledgerid,@wastageeggscost
	   FROM breedersetting LIMIT 1;
       
       set @branch = null;
       SELECT L.branchid INTO @branch 
       FROM location L
       LEFT JOIN eggscollection EC ON EC.id = p_eggscollectionid
       LEFT JOIN warehouse W ON W.id = EC.towarehouseid
       
       WHERE W.locationid = L.id;
       
       SET @jeid = null;
           CALL spc_journalentry_save(                
                NULL,
				NULL,
				1300,
				NULL,
				(SELECT collectiondate FROM eggscollection WHERE id = p_eggscollectionid),
				NULL,
				@branchid,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                721,
                NUll,
				'Breeder egg collection JE',
				NULL,
				NULL,
				NULL,
				p_eggscollectionid,
				'Breeder egg collection JE',
				p_companyid,
				p_userid,
                @jeid
           );
           
           SET @row_number = 0;
   
			CREATE TEMPORARY TABLE tempeggcollection
			
            SELECT (@row_number:=@row_number + 1) AS num, quantity, itemledgerid, itemid, itemtypeid from (
				SELECT 
				quantity,
                (SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                itemid,
                itemtypeid
				FROM eggsdistributiondetail 
                where eggscollectionid = p_eggscollectionid
                
            ) 
            as tblgrpodetail;
            
            SELECT * FROm tempeggcollection;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempeggcollection INTO n;
				
					WHILE i<n DO 
                    
						SET @quantity = null;
                        SET @itemledgerid = null;
                        SET @itemid = null;  
                        SET @itemtypeid = null;
					
						select quantity, itemledgerid, itemid, itemtypeid into @quantity, @itemledgerid, @itemid, @itemtypeid from tempeggcollection where num = i+1;
                    SELECT @quantity, @itemledgerid, @itemid,@itemtypeid;
						-- insert JE detail
                         -- if(@quantity > 0) then
                        IF(@itemtypeid = 881) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@inventorygainandlossledgerid,
								0,
                                NULL,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @hatchingeggscost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
                                NULL,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @hatchingeggscost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- commercial eggs
                         IF(@itemtypeid = 882) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@inventorygainandlossledgerid,
								0,
                                NULL,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @commercialeggscost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
                                NULL,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @commercialeggscost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- cracked eggs
                         IF(@itemtypeid = 883) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@inventorygainandlossledgerid,
								0,
                                NULL,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @crackedeggscost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
                                NULL,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @crackedeggscost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- doubleyolk eggs
                         IF(@itemtypeid = 884) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@inventorygainandlossledgerid,
								0,
                                NULL,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @doubleyolkeggscost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
                                NULL,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @doubleyolkeggscost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF; 
						 IF(@itemtypeid = 885) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@inventorygainandlossledgerid,
								0,
                                NULL,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @wastageeggscost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
                                NULL,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @wastageeggscost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF; 
						SET i = i + 1;
                       -- end if;
					END WHILE;
				End;
       END;
       call spc_savebreedereggcollection_amortization_je(p_eggscollectionid,p_companyid,p_userid);
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savecbfdailytransaction_je`(
	IN p_cbfdailytransactionid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN
	IF((SELECT statusid FROM cbf_dailytransaction WHERE id = p_cbfdailytransactionid) = 3062) THEN
    SET @cbfbatchid = null;
    SET @transactiondate = null;
    SET @shedid = null;
    SET @branchid = null;
    SET @breeditemid = null;
    SET @costperbird = null;
    SET @breedledgerid = null;
           
	SELECT CDT.cbf_batchid, CDT.transactiondate, CDT.shedid, CDT.branchid, CB.breed_id, CB.costperbird, I.ledgerid
    INTO @cbfbatchid,@transactiondate,@shedid, @branchid, @breeditemid, @costperbird, @breedledgerid
    FROM cbf_dailytransaction CDT
    LEFT JOIN cbf_batch_details CB ON CB.id = CDT.cbf_batchid
    LEFT JOIN item I ON I.id = CB.breed_id
    WHERE CDT.id = p_cbfdailytransactionid;
    
    SET @jeid = null;
    CALL spc_journalentry_save(
		NULL,
		NULL,
		1302,
		NULL,
		@transactiondate,
		NULL,
		@branchid,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		723,
		NULL,
		'CBF daily transaction JE',
		NULL,
		NULL,
		NULL,
		p_cbfdailytransactionid,
		'CBF daily transaction JE',
		p_companyid,
		p_userid,
		@jeid
    );
    
    UPDATE journalentry 
    SET narration = CONCAT('CBF daily transaction JE ',@jeid)
    WHERE id = @jeid;
    
    -- JE for breeder daily consumption
	SET @row_number = 0;
	DROP TEMPORARY TABLE IF EXISTS tempconsumption;
	CREATE TEMPORARY TABLE tempconsumption
	
	SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemledgerid, itemid FROM(
	
		SELECT itemvalue as totalcost,
		(SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
		itemid
		
		FROM cbf_dailyconsumption 
		WHERE cbfdailytransactionid = p_cbfdailytransactionid
		
	) as tbldailydetail;
	
	
	
	BEGIN
		DECLARE n INT DEFAULT 0;
		DECLARE i INT DEFAULT 0;
		SELECT COUNT(*) FROM tempconsumption INTO n;
		
			WHILE i<n DO 
			
			SET @totalcost = null;
			SET @itemledgerid = null;
			
				select totalcost, itemledgerid, itemid into @totalcost, @itemledgerid ,@itemid from tempconsumption where num = i+1;
			
				-- insert JE detail
				 
				 
				 -- Credit to consumed item - Ledger
				 
				 SET @jedetailid1 = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@itemledgerid,
					0,
					NULL,
					@cbfbatchid,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					0,
					@totalcost,
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'CBF daily transaction credit to consumed item.',
					p_companyid,
					p_userid,
					@jedetailid1
				 );
				 
				 -- Debit to CBF Bird - Ledger
				
				 SET @jedetailid = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@breedledgerid,
					0,
					NULL,
					@cbfbatchid,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					@totalcost,
					0,
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'CBF daily transaction debit to CBF bird.',
					p_companyid,
					p_userid,
					@jedetailid
				 );
				
				SET i = i + 1;
			END WHILE;
		End;
        
        -- JE for breeder daily mortality
                
		SET @row_number1 = 0;

		CREATE TEMPORARY TABLE tempmortality
		
		SELECT (@row_number1:=@row_number1 + 1) AS num1, quantity FROM(
		
			SELECT (totalculls + totalmortality) as quantity
			FROM cbf_dailymortality 
			WHERE cbfdailytransactionid = p_cbfdailytransactionid
			
		) as tbldaily1detail1;
		
		
		
		BEGIN
			DECLARE n1 INT DEFAULT 0;
			DECLARE j INT DEFAULT 0;
			SELECT COUNT(*) FROM tempmortality INTO n1;
			
				WHILE j<n1 DO 
				
					 SET @quantity = null;
				
					select quantity  into @quantity from tempmortality where num1 = j+1;
						
					-- insert JE detail
					 
					 -- Credit CBF bird ledger
					 
						 SET @jedetailid3 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@breedledgerid,
							0,
							NULL,
							@cbfbatchid,
							NULL,
							NULL,
							NULL,
							NULL,
							NULL,
							0,
							(@quantity * @costperbird),
							NULL,
							NULL,
							NULL,
							@breeditemid,
							NULL,
							'CBF daily mortality and culls',
							p_companyid,
							p_userid,
							@jedetailid3
						 );
						 
						 -- Debit to CBF bird ledger
						
						 SET @jedetailid2 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@breedledgerid,
							0,
							NULL,
							@cbfbatchid,
							NULL,
							NULL,
							NULL,
							NULL,
							NULL,
							(@quantity * @costperbird),
							0,
							NULL,
							NULL,
							NULL,
							@breeditemid,
							NULL,
							'CBF daily mortality and culls',
							p_companyid,
							p_userid,
							@jedetailid2
						 );
					
					SET j = j + 1;
				END WHILE;
			End;
		END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savechiksreceived_je`(
	IN p_grpoid INT(11),
    IN p_moduleid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN
	DROP TABLE IF EXISTS tempgrpo;
	 
	IF((SELECT statusid FROM grpo WHERE id = p_grpoid) = 642) THEN
    
		BEGIN 
        
        -- Journal entry detail for WIP bird
		   SET @WIPledgerid = null;
		   SET @GoodsWithoutInvoiceledgerid = null;
           SET @discountledgerid = null;
           
		   If(p_moduleid = 721) then
		   SELECT WIPledgerid, grpowithoutinvoiceledgerid, discountledgerid
		   INTO @WIPledgerid, @GoodsWithoutInvoiceledgerid, @discountledgerid
		   FROM breedersetting LIMIT 1;
           END IF;
           if(p_moduleid = 726) THEN
             SELECT wipledgerid, grpowithoutinvoiceledgerid, discountledgerid
		   INTO @WIPledgerid, @GoodsWithoutInvoiceledgerid, @discountledgerid
		   FROM feedmill_feedmillsetting LIMIT 1;
           END IF; 
           if(p_moduleid = 725) THEN
             SELECT WIPledgerid, grpowithoutinvoiceledgerid, discountledgerid
		   INTO @WIPledgerid, @GoodsWithoutInvoiceledgerid, @discountledgerid
		   FROM layersetting LIMIT 1;
           END IF; 
           
           
           set @branch = null;
		   SELECT L.branchid INTO @branch 
		   FROM location L
		   LEFT JOIN grpo G ON G.id = p_grpoid
		   LEFT JOIN warehouse W ON W.id = G.towarehouseid
		   
		   WHERE W.locationid = L.id;
           
           SET @batchid = null;
           SELECT tobatchid INTO @batchid
           FROM purchaserequest PR
           LEFT JOIN purchaseorder PO ON PO.purchaserequestid = PR.id
           LEFT JOIN grpo G ON G.purchaseorderid = PO.id
           WHERE G.id = p_grpoid;
           
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1301,
				NULL,
				(SELECT grpodate FROM grpo WHERE id = p_grpoid),
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                p_moduleid,
				NULL,
				'GRPO JE',
				NULL,
				NULL,
				NULL,
				p_grpoid,
				'GRPO JE',
				p_companyid,
                p_userid,
                @jeid
           );
   
   
   
			SET @row_number = 0;
   
			CREATE TEMPORARY TABLE tempgrpo
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, taxpercent, itemid, itemdiscount, discountedvalue, (discountedvalue + ((discountedvalue * taxpercent)/100)) as taxcalcvalue from (
				SELECT 
					(quantity*unitprice) as totalcost, 
					taxpercent, 
                    itemid,
					itemdiscount,
					(quantity*unitprice) - (((quantity*unitprice) * itemdiscount)/100) as discountedvalue
				FROM grpodetail 
                where grpoid = p_grpoid
            ) 
            as tblgrpodetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempgrpo INTO n;
				
					WHILE i<n DO 
					
						SET @discountedvalue = null;
                        SET @itemid = null;
						select discountedvalue, itemid into @discountedvalue, @itemid from tempgrpo where num = i+1;
                    
						-- insert JE detail
                        
                        -- Credit to Good receipt but not Invoice - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@GoodsWithoutInvoiceledgerid,
							0,
                            NULL,
							@batchid,
                            NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							0,
							@discountedvalue,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'GRPO JE',
							p_companyid,
							p_userid,
							@jedetailid1
						 );
                        
                        -- Debit to WIP Bird - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@WIPledgerid,
							0,
                            NULL,
							@batchid,
                            NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							@discountedvalue,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'GRPO JE',
							p_companyid,
							p_userid,
							@jedetailid
						 );
                        
						SET i = i + 1;
					END WHILE;
				End;
		END;
        
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_saveeggtransfertohatchery_je`(
	IN p_eggtransfertohatcheryid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempbreedereggtransfer;
    
    IF((SELECT statusid FROM eggtransfertohatchery WHERE id = p_eggtransfertohatcheryid) = 902) THEN
    
		SET @jeid = null;
		CALL spc_journalentry_save(
			NULL,
			NULL,
			1297,
			NULL,
			(SELECT transferdate FROM eggtransfertohatchery WHERE id = p_eggtransfertohatcheryid),
			NULL,
			(SELECT branchid FROM location WHERE id = (SELECT locationid FROM eggtransfertohatchery WHERE id = p_eggtransfertohatcheryid)),
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
            NULL,
            721,
			NULL,
			'Egg transfer to hatchery JE',
			NULL,
			NULL,
			NULL,
			p_eggtransfertohatcheryid,
			'Egg transfer to hatchery JE',
			p_companyid,
			p_userid,
			@jeid
		);
		
		SET @row_number = 0;
	   
		CREATE TEMPORARY TABLE tempbreedereggtransfer
		
		SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemid from (
			SELECT 
				((SELECT hatchingeggscost FROM breedersetting LIMIT 1) * transferquantity) as totalcost,
				itemid
			FROM eggtransfertohatcherydetail 
			where eggtransfertohatcheryid = p_eggtransfertohatcheryid
		) 
		as tbleggtransferdetail;
		
		BEGIN
			DECLARE n INT DEFAULT 0;
			DECLARE i INT DEFAULT 0;
			SELECT COUNT(*) FROM tempbreedereggtransfer INTO n;
		
			WHILE i<n DO 
			
				SET @totalcost = null;
				SET @itemid = null;
				SET @itemledgerid = null;
				select totalcost, itemid into @totalcost, @itemid from tempbreedereggtransfer where num = i+1;
			
				-- insert JE detail
				
				SELECT ledgerid INTO @itemledgerid FROM item WHERE id = @itemid;
				
				 -- Credit to item - Ledger
				 
				 SET @jedetailid1 = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@itemledgerid,
					0,
                    NULL,
					(SELECT breederbatchid FROM eggtransfertohatchery WHERE id = p_eggtransfertohatcheryid),
                    NULL,
					NULL,
                    NULL,
					NULL,
					NULL,
					0,
					@totalcost,
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'Egg transfer to hatchery',
					p_companyid,
					p_userid,
					@jedetailid1
				 );
				 
				 -- Debit to WIP Bird on toshedid - Ledger
				
				 SET @jedetailid = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@itemledgerid,
					0,
                    NULL,
					(SELECT breederbatchid FROM eggtransfertohatchery WHERE id = p_eggtransfertohatcheryid),
                    NULL,
					NULL,
                    NULL,
					NULL,
					NULL,
					@totalcost,
					0,
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'Egg transfer to hatchery',
					p_companyid,
					p_userid,
					@jedetailid
				 );
				
				SET i = i + 1;
			END WHILE;
		End;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savefright_je`(
	IN p_purchaseinvoiceid INT(11),
    IN p_batchid INT(11),
    IN p_vendorid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    IN p_jeid INT(11)
)
BEGIN

    SET @freightledgerid = null;
	select inputledgerid from freight F
	LEFT JOIN freightdetail FD ON FD.freighttypeid = F.id
	where FD.purchaseinvoiceid = p_purchaseinvoiceid;

	SET @row_number1 = 0;
	DROP TABLE IF EXISTS tempfreight;
	CREATE TEMPORARY TABLE tempfreight

	SELECT (@row_number1:=@row_number1 + 1) AS num1,
	freightamount, cgstid,cgstamount,sgstid,sgstamount,igstid,igstamount,utgstid,utgstamount,freighttypeid

	FROM(

	SELECT id,
	freightamount,
	cgstid,
	cgstamount,
	sgstid,
	sgstamount,
	igstid,
	igstamount,
	utgstid,
	utgstamount,
	freighttypeid

	FROM freightdetail 
	WHERE purchaseinvoiceid = p_purchaseinvoiceid

	) as tblfreightdetail1;
SELECT * from tempfreight;
	BEGIN

	DECLARE n1 INT DEFAULT 0;
	DECLARE j INT DEFAULT 0;
	SELECT COUNT(*) FROM tempfreight INTO n1;

	WHILE j<n1 DO 

	SET @inputledgerid = null;
	SET @cgstid1 = null;
	SET @sgstid1 = null;
	SET @igstid1 = null;
	SET @utgstid1 = null;

	SET @freightamount = null;
	SET @cgstamount1 = null;
	SET @sgstamount1 = null;
	SET @igstamount1 = null;
	SET @utgstamount1 = null;

	SET @freighttypeid = null;

	select freightamount,cgstid, sgstid, igstid, utgstid, cgstamount, sgstamount, igstamount, utgstamount, freighttypeid
	INTO @freightamount,@cgstid1, @sgstid1, @igstid1, @utgstid1, @cgstamount1, @sgstamount1, @igstamount1, @utgstamount1, @freighttypeid 
	from tempfreight where num1 = j+1;

	select inputledgerid INTO @inputledgerid from freight F LEFT JOIN freightdetail FD ON FD.freighttypeid = F.id
	where FD.purchaseinvoiceid = p_purchaseinvoiceid and FD.freighttypeid = @freighttypeid; 


	-- insert JE detail

	-- debit to freight - Ledger

	SET @jedetailid7 = null;
	CALL spc_journalentrydetail_save( 
	NULL,
	@jeid,
	@inputledgerid,
	0,
	NULL,
	@batchid,
	NULL,
	NULL,
	p_purchaseinvoiceid,
	(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	@freightamount,
	0,
	NULL,
	@vendorid,
	NULL,
	NULL,
	NULL,
	'Freight JE',
	p_companyid,
	p_userid,
	@jedetailid7
	);
    
    -- credit to vendor - Ledger

	SET @jedetailid = null;
	CALL spc_journalentrydetail_save( 
	NULL,
	@jeid,
	(select supplierledgerid from party where id = (select vendorid from purchaseinvoice where id = p_purchaseinvoiceid)),
	0,
	NULL,
	@batchid,
	NULL,
	NULL,
	p_purchaseinvoiceid,
	(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	0,
	@freightamount,
	NULL,
	@vendorid,
	NULL,
	@itemid,
	NULL,
	'Credit to party JE',
	p_companyid,
	p_userid,
	@jedetailid
	);

	-- debit to tax ledgers
	if(@cgstid1 IS NOT null) then
	SET @jedetailid8 = null;
	CALL spc_journalentrydetail_save( 
	NULL,
	@jeid,
	(SELECT inputledgerid FROM tax WHERE id = @cgstid1),
	0,
	NULL,
	@batchid,
	NULL,
	NULL,
	p_purchaseinvoiceid,
	(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	@cgstamount1,
	0,
	NULL,
	@vendorid,
	NULL,
	NULL,
	NULL,
	'CGST freight JE detail.',
	p_companyid,
	p_userid,
	@jedetailid8
	);
      -- credit to vendor - Ledger

	SET @jedetailid = null;
	CALL spc_journalentrydetail_save( 
	NULL,
	@jeid,
	(select supplierledgerid from party where id = (select vendorid from purchaseinvoice where id = p_purchaseinvoiceid)),
	0,
	NULL,
	@batchid,
	NULL,
	NULL,
	p_purchaseinvoiceid,
	(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	0,
	@cgstamount1,
	NULL,
	@vendorid,
	NULL,
	@itemid,
	NULL,
	'Credit to party JE',
	p_companyid,
	p_userid,
	@jedetailid
	);
	end if;

	if(@sgstid1 IS NOT null) then
	SET @jedetailid9 = null;
	CALL spc_journalentrydetail_save( 
	NULL,
	@jeid,
	(SELECT inputledgerid FROM tax WHERE id = @sgstid1),
	0,
	NULL,
	@batchid,
	NULL,
	NULL,
	p_purchaseinvoiceid,
	(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	@sgstamount1,
	0,
	NULL,
	@vendorid,
	NULL,
	NULL,
	NULL,
	'SGST freight JE detail.',
	p_companyid,
	p_userid,
	@jedetailid9
	);
    
       -- credit to vendor - Ledger

	SET @jedetailid = null;
	CALL spc_journalentrydetail_save( 
	NULL,
	@jeid,
	(select supplierledgerid from party where id = (select vendorid from purchaseinvoice where id = p_purchaseinvoiceid)),
	0,
	NULL,
	@batchid,
	NULL,
	NULL,
	p_purchaseinvoiceid,
	(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	0,
	@sgstamount1,
	NULL,
	@vendorid,
	NULL,
	@itemid,
	NULL,
	'Credit to party JE',
	p_companyid,
	p_userid,
	@jedetailid
	);
	end if;

	if(@igstid1 IS NOT null) then
	SET @jedetailid10 = null;
	CALL spc_journalentrydetail_save( 
	NULL,
	@jeid,
	(SELECT inputledgerid FROM tax WHERE id = @igstid1),
	0,
	NULL,
	@batchid,
	NULL,
	NULL,
	p_purchaseinvoiceid,
	(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	@igstamount1,
	0,
	NULL,
	@vendorid,
	NULL,
	NULL,
	NULL,
	'IGST freight JE detail.',
	p_companyid,
	p_userid,
	@jedetailid10
	);
    
        -- credit to vendor - Ledger

	SET @jedetailid = null;
	CALL spc_journalentrydetail_save( 
	NULL,
	@jeid,
	(select supplierledgerid from party where id = (select vendorid from purchaseinvoice where id = p_purchaseinvoiceid)),
	0,
	NULL,
	@batchid,
	NULL,
	NULL,
	p_purchaseinvoiceid,
	(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	0,
	@igstamount1,
	NULL,
	@vendorid,
	NULL,
	@itemid,
	NULL,
	'Credit to party JE',
	p_companyid,
	p_userid,
	@jedetailid
	);
	end if;

	if(@utgstid1 IS NOT null) then
	SET @jedetailid11 = null;
	CALL spc_journalentrydetail_save( 
	NULL,
	@jeid,
	(SELECT inputledgerid FROM tax WHERE id = @utgstid1),
	0,
	NULL,
	@batchid,
	NULL,
	NULL,
	p_purchaseinvoiceid,
	(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	@utgstamount1,
	0,
	NULL,
	@vendorid,
	NULL,
	@utgstid,
	NULL,
	'UTGST freight JE detail.',
	p_companyid,
	p_userid,
	@jedetailid11
	);
    
        -- credit to vendor - Ledger

	SET @jedetailid = null;
	CALL spc_journalentrydetail_save( 
	NULL,
	@jeid,
	(select supplierledgerid from party where id = (select vendorid from purchaseinvoice where id = p_purchaseinvoiceid)),
	0,
	NULL,
	@batchid,
	NULL,
	NULL,
	p_purchaseinvoiceid,
	(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
	0,
	@utgstamount1,
	NULL,
	@vendorid,
	NULL,
	@itemid,
	NULL,
	'Credit to party JE',
	p_companyid,
	p_userid,
	@jedetailid
	);
	end if;

	SET j = j + 1;
	END WHILE;

	END;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savegoods_issue_je`(
	IN p_issueid INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DROP TABLE IF EXISTS tempgoodsissue;
    SET @warehouseid = null;
    SET @moduleid = null;
    SET @issuedate = null;
    SET @inventorygainandlossledgerid = null;
BEGIN 
        SELECT inventorygainandlossledgerid INTO @inventorygainandlossledgerid FROM common_setting;
        SELECT moduleid,batchid,issuedate INTO @moduleid,@batchid,@issuedate 
        FROM purchase_goods_issue WHERE id = p_issueid;
        SET @placementdate = null;
        SET @weekno = null;
        SET @maleitemid = null;
        SET @femaleitemid = null;
        SET @cbfitemid = null;
        SET @layeritemid = null;
        if(@moduleid = 721) then
			SELECT fnc_getplacementdate(@batchid,p_companyid) INTO @placementdate;
         
            SELECT TRUNCATE(((DATEDIFF(@issuedate,@placementdate)/7)+1),0) INTO @weekno;
            
            SELECT maleitemid,femaleitemid INTO @maleitemid,@femaleitemid FROM breederbatch 
            WHERE id = @batchid;
            
        END IF;
         if(@moduleid = 725) then
			SELECT fnc_getlayerplacementdate(@batchid,p_companyid) INTO @placementdate;
         
            SELECT TRUNCATE(((DATEDIFF(@issuedate,@placementdate)/7)+1),0) INTO @weekno;
            
            SELECT itemid INTO @layeritemid FROM layerbatch 
            WHERE id = @batchid;
            
        END IF;
           if(@moduleid = 723) then
            SELECT breed_id,batch_place_date INTO @cbfitemid,@placementdate FROM layerbatch 
            WHERE id = @batchid;
            SELECT TRUNCATE(((DATEDIFF(@issuedate,@placementdate)/7)+1),0) INTO @weekno;
            
        END IF;
        
        SELECT @weekno,@moduleid;
        
        /*   set @branch = null;
			SELECT L.branchid INTO @branch 
			FROM warehouse W
			LEFT JOIN location L ON L.id = W.locationid
			WHERE W.id = @warehouseid;*/
       
           
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1302,
				NULL,
				@issuedate,
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                @moduleid,
				NULL,
				'Goods Issue',
				NULL,
				NULL,
				NULL,
				p_issueid,
				'Goods Issue',
				p_companyid,
                p_userid,
                @jeid
           );
   

			SET @row_number = 0;
   
			CREATE TEMPORARY TABLE tempgoodsissue
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemid from (
				SELECT 
					itemvalue as totalcost, 
                    itemid
				FROM purchase_goods_issuedetail 
                where goodsissueid = p_issueid
            ) 
            as tblproductionissuedetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempgoodsissue INTO n;
				
					WHILE i<n DO 
					
						SET @totalcost = null;
                        SET @itemid = null;
						select totalcost, itemid into @totalcost, @itemid from tempgoodsissue where num = i+1;
                    
				  if(((@weekno > 24 AND @moduleid =721) or  (@weekno > 18 and @moduleid =725) or @weekno = null) and @moduleid != 723) then
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(SELECT ledgerid FROM item WHERE id = @itemid),
							0,
							NULL,
							NULL,
                            NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							0,
							@totalcost,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Goods Issue',
							p_companyid,
							p_userid,
							@jedetailid1
						 );
                        
                        -- Debit to WIP - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@inventorygainandlossledgerid,
							0,
                            NULL,
							@batchid,
							NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
							@totalcost,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Goods Issue',
							p_companyid,
							p_userid,
							@jedetailid
						 );
				 END IF;
			IF(((@weekno<=24 and @moduleid = 721) or (@weekno <=18 and @moduleid = 725) or @weekno = null) and (@moduleid = 721 or @moduleid = 725 or @moduleid = 723)  ) then
              
                
                 SET @jedetailid2 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(SELECT ledgerid FROM item WHERE id = @itemid),
							0,
							NULL,
							NULL,
                            NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							0,
							@totalcost,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Goods issue JE',
							p_companyid,
							p_userid,
							@jedetailid2
						 );
						if(@moduleid = 725)THEN
                         SET @jedetailid3 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(SELECT ledgerid FROM item WHERE id = @layeritemid),
							0,
                            NULL,
							@batchid,
							NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
							@totalcost,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Goods issue JE',
							p_companyid,
							p_userid,
							@jedetailid3
						 );
                         END IF;
                         
                         if(@moduleid = 723)THEN
                         SET @jedetailid3 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(SELECT ledgerid FROM item WHERE id = @cbfitemid),
							0,
                            NULL,
							@batchid,
							NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
							@totalcost,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Goods issue JE',
							p_companyid,
							p_userid,
							@jedetailid3
						 );
                         END IF;
                        -- Debit to WIP - Ledger
                        if(@moduleid = 721) then
                          SET @jedetailid4 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(SELECT ledgerid FROM item WHERE id = @femaleitemid),
							0,
                            NULL,
							@batchid,
							NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
							@totalcost,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Goods issue JE',
							p_companyid,
							p_userid,
							@jedetailid4
						 );
		 END IF;
                
              END IF;
                        
						SET i = i + 1;
					END WHILE;
                    
				End;
		END;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savegrpo_je`(
	IN p_grpoid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN
	DROP TABLE IF EXISTS tempgrpo;
	 
	IF((SELECT statusid FROM grpo WHERE id = p_grpoid) = 642) THEN
    
		BEGIN 
        
        SELECT moduleid INTO @moduleid
            FROM grpo G
			LEFT JOIN purchaseorder PO ON PO.id = G.purchaseorderid
            WHERE G.id = p_grpoid;
            
        -- Journal entry detail for WIP bird
		  
		   SET @GoodsWithoutInvoiceledgerid = null;
          
           
           SELECT grpowithoutinvoiceledgerid INTO @GoodsWithoutInvoiceledgerid
           FROM common_setting 
           WHERE companyid  = p_companyid limit 1;
           
     
           
           
           set @totaldiscountedvalue = null;
				SELECT 
					SUM((quantity*unitprice) - (((quantity*unitprice) * IFNULL(itemdiscount,0))/100)) INTO @totaldiscountedvalue
				FROM grpodetail 
                where grpoid = p_grpoid
                GROUP by grpoid;
                
			SET @commondiscount = 0;
            select ((@totaldiscountedvalue*IFNULL(discount,0))/100) INTO @commondiscount FROM grpo WHERE id = p_grpoid;
           
           
           -- COMMERCIAL LAYER
           
           set @branch = null;
		   SELECT L.branchid INTO @branch 
		   FROM location L
		   LEFT JOIN grpo G ON G.id = p_grpoid
		   LEFT JOIN warehouse W ON W.id = G.towarehouseid
		   
		   WHERE W.locationid = L.id;
           
           SET @batchid = null;
           SELECT tobatchid INTO @batchid
           FROM purchaserequest PR
           LEFT JOIN purchaseorder PO ON PO.purchaserequestid = PR.id
           LEFT JOIN grpo G ON G.purchaseorderid = PO.id
           WHERE G.id = p_grpoid;
           
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1301,
				NULL,
				(SELECT grpodate FROM grpo WHERE id = p_grpoid),
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                @moduleid,
				NULL,
				'GRPO JE',
				NULL,
				NULL,
				NULL,
				p_grpoid,
				'GRPO JE',
				p_companyid,
                p_userid,
                @jeid
           );
   
   
   
			SET @row_number = 0;
   
			CREATE TEMPORARY TABLE tempgrpo
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, taxpercent, itemid, itemdiscount, discountedvalue, (discountedvalue + ((discountedvalue * taxpercent)/100)) as taxcalcvalue from (
				SELECT 
					(quantity*unitprice) as totalcost, 
					IFNULL(taxpercent,0) as taxpercent, 
                    itemid,
					IFNULL(itemdiscount,0) as itemdiscount,
					(quantity*unitprice) - (((quantity*unitprice) * IFNULL(itemdiscount,0))/100) as discountedvalue
				FROM grpodetail 
                where grpoid = p_grpoid
            ) 
            as tblgrpodetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempgrpo INTO n;
                
                SET @comdiscountvalue = 0;
                
                if(@commondiscount >0) then
					SELECT (@commondiscount/n) INTO @comdiscountvalue;
				 END IF;
                 
					WHILE i<n DO 
					
						SET @discountedvalue = null;
                        SET @itemid = null;
						select discountedvalue, itemid into @discountedvalue, @itemid from tempgrpo where num = i+1;
                    
						-- insert JE detail
                        
                        -- Credit to Good receipt but not Invoice - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@GoodsWithoutInvoiceledgerid,
							0,
                            NULL,
							@batchid,
                            NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							0,
							(@discountedvalue - @comdiscountvalue),
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'GRPO JE',
							p_companyid,
							p_userid,
							@jedetailid1
						 );
                        
                        -- Debit to WIP Bird - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(SELECT ledgerid FROM item WHERE id = @itemid),
							0,
                            NULL,
							@batchid,
                            NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							(@discountedvalue-@comdiscountvalue),
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'GRPO JE',
							p_companyid,
							p_userid,
							@jedetailid
						 );
                        
						SET i = i + 1;
					END WHILE;
				End;
		END;
        
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savelayerbatchopening_je`(
	IN p_layerbatchopeningid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS temlayeropening;
    
    IF((SELECT statusid FROM layer_batchopening_balance WHERE id = p_layerbatchopeningid) = 3042) THEN

		BEGIN
		
			SET @WIPledgerid = null;
            SET @stockledgerid = null;
			SELECT WIPledgerid, stcokledgerid
			INTO @WIPledgerid, @stockledgerid
			FROM layersetting LIMIT 1;
		   
			set @branch = null;
			SELECT L.branchid INTO @branch 
			FROM location L
			LEFT JOIN layer_batchlocationwiseopening_detail LLOD ON LLOD.layerbatchopeningid = p_layerbatchopeningid
			WHERE LLOD.locationid = L.id;
            
            SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				(SELECT livebatchdate FROM layer_batchopening_balance WHERE id = p_layerbatchopeningid),
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                725,
				NULL,
				'Layer batch opening JE',
				NULL,
				NULL,
				NULL,
				p_layerbatchopeningid,
				'Layer batch opening JE',
				p_companyid,
                p_userid,
                @jeid
           );
           
           SET @row_number = 0;
   
			CREATE TEMPORARY TABLE temlayeropening
			
            SELECT (@row_number:=@row_number + 1) AS num, wipaccountbalance from (
				SELECT 
					wipaccountbalance
				FROM layer_batchfinancialopening_detail 
                where layerbatchopeningid = p_layerbatchopeningid
            ) 
            as tblfinancedetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM temlayeropening INTO n;
				
					WHILE i<n DO 
					
						SET @WIPaccountbalance = null;
						select wipaccountbalance into @WIPaccountbalance from temlayeropening where num = i+1;
                    
						-- Credit to stock - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@stockledgerid,
                            0,
                            NULL,
                            (SELECT layerbatchid FROM layer_batchopening_balance WHERE id = p_layerbatchopeningid),
							NULL,
                            NULL,
                            NULL,
							NULL,
							NULL,
							0,
							@WIPaccountbalance,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'layer batch opening JE',
							p_companyid,
							p_userid,
							@jedetailid1
						 );
                         
                        -- Debit to WIP Bird - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@WIPledgerid,
                            0,
                            NULL,
                            (SELECT layerbatchid FROM layer_batchopening_balance WHERE id = p_layerbatchopeningid),
							NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
							@WIPaccountbalance,
							0,
							NULL,
							NULL,
							NULL,
							NULL,
							NULL,
							'Layer batch opening JE',
							p_companyid,
							p_userid,
							@jedetailid
						 );
                        
						SET i = i + 1;
					END WHILE;
				End;
			
		END;
        
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savelayerbatchtransfer_je`(
	IN p_layerbatchtransferid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS templayerbatchtransfer;
    
    -- Journal entry detail for WIP bird
	SET @WIPledgerid = null;
    SET @femalechickscost = null;
    
    SELECT WIPledgerid INTO @WIPledgerid FROM layersetting LIMIT 1;
    
    SELECT defaultfemalechickcost INTO @femalechickscost FROM layersetting LIMIT 1;
    
    SET @jeid = null;
    CALL spc_journalentry_save(
		NULL,
        NULL,
        1297,
        NULL,
		(SELECT transferdate FROM layerbatchtransfer WHERE id = p_layerbatchtransferid),
        NULL,
        (SELECT branchid FROM location WHERE id = (SELECT tolocationid FROM layerbatchtransfer WHERE id = p_layerbatchtransferid)),
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        725,
        NULL,
        'Shed to shed transfer JE',
        NULL,
        NULL,
        NULL,
        p_layerbatchtransferid,
        'Shed to shed transfer JE',
		p_companyid,
		p_userid,
		@jeid
    );
    
    SET @row_number = 0;
   
	CREATE TEMPORARY TABLE templayerbatchtransfer
	
	SELECT (@row_number:=@row_number + 1) AS num, quantity, toshedid, itemid from (
		SELECT 
			quantity,
            toshedid,
            itemid
		FROM layerbatchtransferdetail 
		where layerbatchtransferid = p_layerbatchtransferid
	) 
	as tbllbatchtransferdetail;
    
    BEGIN
		DECLARE n INT DEFAULT 0;
		DECLARE i INT DEFAULT 0;
		SELECT COUNT(*) FROM templayerbatchtransfer INTO n;
	
		WHILE i<n DO 
			
            SET @itemid = null;
            SET @toshedid = null;
            SET @quantity = null;
		
			select quantity, toshedid, itemid into @quantity, @toshedid, @itemid from templayerbatchtransfer where num = i+1;
		
			-- insert JE detail
            
			 -- Credit to WIP Bird on fromshedid - Ledger
			 
			 SET @jedetailid1 = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				@WIPledgerid,
				0,
                NULL,
				(SELECT layerbatchid FROM layerbatchtransfer WHERE id = p_layerbatchtransferid),
                NULL,
				NULL,
                NULL,
				NULL,
				NULL,
				0,
				(@quantity * @femalechickscost),
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Layer batch transfer',
				p_companyid,
				p_userid,
				@jedetailid1
			 );
             
             -- Debit to WIP Bird on toshedid - Ledger
			
			 SET @jedetailid = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				@WIPledgerid,
				0,
                NULL,
				(SELECT layerbatchid FROM layerbatchtransfer WHERE id = p_layerbatchtransferid),
                NULL,
				NULL,
                NULL,
				NULL,
				NULL,
				(@quantity * @femalechickscost),
				0,
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Layer batch transfer',
				p_companyid,
				p_userid,
				@jedetailid
			 );
			
			SET i = i + 1;
		END WHILE;
	End;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savelayerdailytransaction_je`(
	IN p_layerdailytransactionid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS templayerconsumption;
    DROP TABLE IF EXISTS templayermortality;
    
    BEGIN 
        
        -- Journal entry detail for WIP bird
		   SET @WIPledgerid = null;
		   SET @layerbatchid = null;
		   SET @transactiondate = null;
           SET @defaultfemalechickid = null;
			SET @shedid = null;
		   
		   SELECT WIPledgerid
		   INTO @WIPledgerid
		   FROM layersetting LIMIT 1;
           
           SELECT LDT.layerbatchid,LDT.transactiondate,LDT.shedid INTO @layerbatchid,@transactiondate,@shedid
           FROM layerdailytransaction LDT
           WHERE id = p_layerdailytransactionid;
           
           SELECT itemid
           INTO @defaultfemalechickid
           FROM layerbatch WHERE id = @layerbatchid;
           
            SELECT fun_layer_bird_purchasecost(@layerbatchid,p_companyid,@transactiondate) INTO @biredprice;
           
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
                NULL,
                1300,
                NULL,
                @transactiondate,
                NULL,
				(SELECT branchid FROM location WHERE id = (SELECT locationid FROM layerdailytransaction WHERE id = p_layerdailytransactionid)),
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                725,
				NULL,
                'Layer daily transaction JE',
                NULL,
                NULL,
                NULL,
                p_layerdailytransactionid,
                'Layer daily transaction JE',
                p_companyid,
                p_userid,
                @jeid
           );
   
   
			-- JE for layer daily consumption
			SET @row_number = 0;
   
			CREATE TEMPORARY TABLE templayerconsumption
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemledgerid, itemid FROM(
            
				SELECT itemvalue as totalcost,
                (SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                itemid
                FROM layerdailyconsumption 
                WHERE layerdailytransactionid = p_layerdailytransactionid
                
			) as tbllayerdailydetail;
            
            
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM templayerconsumption INTO n;
				
					WHILE i<n DO 
                    
						SET @totalcost = null;
                        SET @itemledgerid = null;
						SET @itemid = null;
						select totalcost, itemledgerid, itemid into @totalcost, @itemledgerid, @itemid from templayerconsumption where num = i+1;
                    
						-- insert JE detail
                        
                       
                         -- Credit to consumed item - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@itemledgerid,
							0,
                            NULL,
							@layerbatchid,
                            NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							0,
							@totalcost,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Layer daily transaction',
							p_companyid,
							p_userid,
							@jedetailid1
						 );
                         
                         -- Debit to WIP Bird - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@WIPledgerid,
							0,
                            NULL,
							@layerbatchid,
							NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
							@totalcost,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Layer daily transaction',
							p_companyid,
							p_userid,
							@jedetailid
						 );
						
						SET i = i + 1;
					END WHILE;
				End;
                
                
                -- JE for layerbatchid daily mortality
                
                SET @row_number1 = 0;
   
				CREATE TEMPORARY TABLE templayermortality
				
				SELECT (@row_number1:=@row_number1 + 1) AS num1, quantity, itemledgerid, itemid FROM(
				
					SELECT (todayculls + todaymortality + sexingerrorquantity) as quantity,
					(SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
					itemid
					FROM layerdailymortality 
					WHERE layerdailytransactionid = p_layerdailytransactionid
					
				) as tbllayerdaily1detail1;
				
				
				
				BEGIN
					DECLARE n1 INT DEFAULT 0;
					DECLARE j INT DEFAULT 0;
					SELECT COUNT(*) FROM templayermortality INTO n1;
					
						WHILE j<n1 DO 
						
							SET @quantity = null;
							SET @itemledgerid1 = null;
							SET @itemid1 = null;
							select quantity, itemledgerid, itemid into @quantity, @itemledgerid1, @itemid1 from templayermortality where num1 = j+1;
						
							-- insert JE detail
							 
							 -- Credit to culls and mortality item - Ledger
							 
							 SET @jedetailid3 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
                                NULL,
								@layerbatchid,
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @biredprice),
								NULL,
								NULL,
								NULL,
								@itemid1,
								NULL,
								'Layer daily mortality and culls',
								p_companyid,
								p_userid,
								@jedetailid3
							 );
                             
                             -- Debit to COGS - Ledger
							
							 SET @jedetailid2 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
                                NULL,
								@layerbatchid,
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @biredprice),
								0,
								NULL,
								NULL,
								NULL,
								@itemid1,
								NULL,
								'Layer daily mortality and culls',
								p_companyid,
								p_userid,
								@jedetailid2
							 );
							
							SET j = j + 1;
						END WHILE;
					End;
		END;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savelayereggcollection_je`(
	IN p_eggscollectionid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS templayereggcollection;
    
    IF((SELECT statusid FROM layereggsdistributiondetail WHERE eggscollectionid = p_eggscollectionid LIMIT 1) = 1110) THEN
    
    BEGIN
    -- Journal entry detail for WIP bird
	   SET @WIPledgerid = null;
	   SET @tableeggscost = null;
       SET @damageeggscost = null;
       SET @crackedeggscost = null;
       SET @pulleteggscost = null;
       SET @inventorygainlossledgerid = null;
       
       SELECT WIPledgerid, tableeggscost, damageeggscost, crackedeggscost, pulleteggscost, inventorygainlossledgerid
       INTO @WIPledgerid, @tableeggscost, @damageeggscost, @crackedeggscost, @pulleteggscost, @inventorygainlossledgerid
       FROM layersetting LIMIT 1;
       
       set @branch = null;
       SELECT L.branchid INTO @branchid 
       FROM location L
       LEFT JOIN layereggscollection LEC ON LEC.id = p_eggscollectionid
       LEFT JOIN warehouse W ON W.id = LEC.towarehouseid
       
       WHERE W.locationid = L.id;
       
       SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				(SELECT collectiondate FROM layereggscollection WHERE id = p_eggscollectionid),
				NULL,
				@branchid,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                725,
				NULL,
				'Layer egg collection JE',
				NULL,
				NULL,
				NULL,
				p_eggscollectionid,
				'Layer egg collection JE',
				p_companyid,
                p_userid,
                @jeid
           );
           
           SET @row_number = 0;
   
			CREATE TEMPORARY TABLE templayereggcollection
			
            SELECT (@row_number:=@row_number + 1) AS num, quantity, itemledgerid, itemid, itemtypeid from (
				SELECT 
				quantity,
                (SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid, 
                itemid,
                itemtypeid
				FROM layereggsdistributiondetail 
                where eggscollectionid = p_eggscollectionid
            ) 
            as tbllayereggscollectiondetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM templayereggcollection INTO n;
				
					WHILE i<n DO 
                    
						SET @quantity = null;
                        SET @itemledgerid = null;
                        SET @itemid = null;
                        SET @itemtypeid = null;
					
						select quantity, itemledgerid, itemid, itemtypeid into @quantity, @itemledgerid, @itemid, @itemtypeid from templayereggcollection where num = i+1;
                        
						-- insert JE detail
                        
                        -- table eggs
                        IF(@itemtypeid = 1129) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@inventorygainlossledgerid,
								0,
                                NULL,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @tableeggscost),
								NULL,
								NULL,
								'Stock',
								@itemid,
								NULL,
								'Layer eggs collection for tableeggs',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
                                NULL,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @tableeggscost),
								0,
								NULL,
								NULL,
								'Stock',
								@itemid,
								NULL,
								'Layer eggs collection for tableeggs',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- damage eggs
                         IF(@itemtypeid = 1130) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@inventorygainlossledgerid,
								0,
                                NULL,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @damageeggscost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection for damageeggs',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
                                NULL,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @damageeggscost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection for damageeggs',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- cracked eggs
                         IF(@itemtypeid = 1131) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@inventorygainlossledgerid,
								0,
                                NULL,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @crackedeggscost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection for crackedeggs',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
                                NULL,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @crackedeggscost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection for crackedeggs',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- pullet eggs
                         IF(@itemtypeid = 1132) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@inventorygainlossledgerid,
								0,
                                NULL,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @pulleteggscost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection for pulleteggs',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
                                NULL,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @pulleteggscost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection for pulleteggs',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
						
						SET i = i + 1;
					END WHILE;
				End;
       END;
	END IF;
	call spc_savelayereggscollection_amortization_je(p_eggscollectionid,p_companyid,p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savelayereggscollection_amortization_je`(
	IN p_eggscollectionid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS templayereggcollection;
    
    IF((SELECT statusid FROM layereggsdistributiondetail WHERE eggscollectionid = p_eggscollectionid LIMIT 1) = 1110) THEN
    
    BEGIN
    -- Journal entry detail for WIP bird
	   SET @WIPledgerid = null;
       SET @amortizationvalue = null;
       SET @amortizationledgerid = null;
       SET @branchid = null;
       
	  SELECT amortizationvalueofbird INTO @amortizationvalue FROM layeramortization WHERE layerbatchid = (SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid); 
       
       SELECT WIPledgerid,amortizationledgerid
       INTO @WIPledgerid, @amortizationledgerid
       FROM layersetting LIMIT 1;
       
       set @branch = null;
       SELECT L.branchid INTO @branchid 
       FROM location L
       LEFT JOIN layereggscollection LEC ON LEC.id = p_eggscollectionid
       LEFT JOIN warehouse W ON W.id = LEC.towarehouseid
       
       WHERE W.locationid = L.id;
       
       SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				(SELECT collectiondate FROM layereggscollection WHERE id = p_eggscollectionid),
				NULL,
				@branchid,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                725,
				NULL,
				'Layer egg collection JE for amortization',
				NULL,
				NULL,
				NULL,
				p_eggscollectionid,
				'Layer egg collection JE for amortization',
				p_companyid,
                p_userid,
                @jeid
           );
           
           SET @row_number = 0;
   
			CREATE TEMPORARY TABLE templayereggcollection
			
            SELECT (@row_number:=@row_number + 1) AS num, quantity, itemledgerid, itemid, itemtypeid from (
				SELECT 
				quantity,
                (SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid, 
                itemid,
                itemtypeid
				FROM layereggsdistributiondetail 
                where eggscollectionid = p_eggscollectionid
                
            ) 
            as tbllayereggscollectiondetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM templayereggcollection INTO n;
				
					WHILE i<n DO 
                    
						SET @quantity = null;
                        SET @itemledgerid = null;
                        SET @itemid = null;
                        SET @itemtypeid = null;
					
						select quantity, itemledgerid, itemid, itemtypeid into @quantity, @itemledgerid, @itemid, @itemtypeid from templayereggcollection where num = i+1;
                        
						-- insert JE detail
                        
                        -- table eggs
                        IF(@itemtypeid = 1129) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
                                NULL,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @amortizationvalue),
								NULL,
								NULL,
								'Stock',
								@itemid,
								NULL,
								'Layer egg collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@amortizationledgerid,
								0,
                                NULL,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @amortizationvalue),
								0,
								NULL,
								NULL,
								'Stock',
								@itemid,
								NULL,
								'Layer egg collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- damage eggs
                         IF(@itemtypeid = 1130) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
                                NULL,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @amortizationvalue),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@amortizationledgerid,
								0,
                                NULL,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @amortizationvalue),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- cracked eggs
                         IF(@itemtypeid = 1131) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
                                NULL,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
								NULL,
                                NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @amortizationvalue),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@amortizationledgerid,
								0,
                                NULL,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @amortizationvalue),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- pullet eggs
                         IF(@itemtypeid = 1132) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
                                NULL,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @amortizationvalue),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@amortizationledgerid,
								0,
                                NULL,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
                                NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @amortizationvalue),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
						
						SET i = i + 1;
					END WHILE;
				End;
       END;
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savematerialtransfer_je`(
	IN p_materialtransferid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	IF((SELECT statusid FROM materialtransfer WHERE id = p_materialtransferid AND companyid = p_companyid) = 582) THEN
		SET @branchid = null;
		SELECT L.branchid INTO @branchid 
		FROM location L
		LEFT JOIN warehouse W ON W.locationid = L.id
		LEFT JOIN materialtransfer MT ON MT.fromwarehouseid = W.id
		WHERE MT.id = p_materialtransferid;
		
		SET @transfertarget = null;
		SELECT transfertarget INTO @transfertarget FROM materialtransfer WHERE id = p_materialtransferid;
		SET @moduleid = null;
		SELECT fnc_getmoduleid(@transfertarget) INTO @moduleid;
		
		SET @jeid = null;
			   CALL spc_journalentry_save(
					NULL,
					NULL,
					1304,
					NULL,
					(SELECT transferdate FROM materialtransfer WHERE id = p_materialtransferid),
					NULL,
					@branchid,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					@moduleid,
					NULL,
					'Material Tranfer JE',
					NULL,
					NULL,
					NULL,
					p_materialtransferid,
					'Material Tranfer JE',
					p_companyid,
					p_userid,
					@jeid
			   );
	   
	   SET @row_number = 0;
	   
	   DROP TABLE IF EXISTS tempmaterialtransfer;
		CREATE TEMPORARY TABLE tempmaterialtransfer
		
		SELECT (@row_number:=@row_number + 1) AS num, id,itembatch,transferedquantity, itemid from (
			SELECT 
				id,
				itembatch,
				transferedquantity,
				itemid
			FROM materialtransferdetails
			where materialtransferid = p_materialtransferid
		) 
		as tblmaterialtransferdetail;
        
        select * from tempmaterialtransfer;

		BEGIN
			DECLARE n INT DEFAULT 0;
			DECLARE i INT DEFAULT 0;
			SELECT COUNT(*) FROM tempmaterialtransfer INTO n;
			 
			WHILE i<n DO 
				SET @itembatch = null;
				SET @detailid = null;
				SET @quantity = null;
				SET @itemid = null;
                SET @unitcost = 0;
				select id, itembatch, transferedquantity, itemid 
                into @detailid, @itembatch, @quantity, @itemid from tempmaterialtransfer where num = i+1;
				
				SET @totalcost = 0;
                
				SELECT IFNULL((itemvalue/quantity),0) INTO @unitcost from materialmovement
				where itemid = @itemid and transactiontypeid in(681,682,684,685) limit 1;
                
				SET @ledgerid = null;
				SELECT ledgerid INTO @ledgerid FROM item WHERE id = @itemid;
				-- insert JE detail
				
				-- Credit to item - Ledger
				 
				 SET @jedetailid = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@ledgerid,
					0,
					NULL,
					(SELECT frombatchid FROM materialtransfer WHERE id = p_materialtransferid),
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					0,
					(@quantity*@unitcost),
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'Material Transfer JE',
					p_companyid,
					p_userid,
					@jedetailid1
				 );
				
				-- Debit to item - Ledger
				
				 SET @jedetailid = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@ledgerid,
					0,
					NULL,
					(SELECT tobatchid FROM materialtransfer WHERE id = p_materialtransferid),
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					(@quantity*@unitcost),
					0,
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'Material Transfer JE',
					p_companyid,
					p_userid,
					@jedetailid
				 );
				
				SET i = i + 1;
			END WHILE;
		End;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_saveproductionissue_je`(
	IN p_production_issue_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DROP TABLE IF EXISTS tempproductionissue;

-- IF((SELECT statusid FROM grpo WHERE id = p_grpoid) = 642) THEN
    
		BEGIN 
        
        -- Journal entry detail for WIP 
		   SET @inventoryindrledgerid = null;
           SET @warehouseid = null;
		   
		   SELECT inventoryindrledgerid
		   INTO @inventoryindrledgerid
		   FROM feedmill_feedmillsetting LIMIT 1;
           
           SELECT FPO.warehouseid INTO @warehouseid  From feedmill_production_issue FPI
           LEFT JOIN feedmill_productionorder FPO  ON FPO.id = FPI.productionorder_id 
           WHERE FPI.id = p_production_issue_id;
           
           set @branch = null;
			SELECT L.branchid INTO @branch 
			FROM warehouse W
			LEFT JOIN location L ON L.id = W.locationid
			WHERE W.id = @warehouseid;
       
           
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				(SELECT issue_date FROM feedmill_production_issue WHERE id = p_production_issue_id),
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                726,
				NULL,
				'PRODUCTION ISSUE JE',
				NULL,
				NULL,
				NULL,
				p_production_issue_id,
				'PRODUCTION ISSUE JE',
				p_companyid,
                p_userid,
                @jeid
           );
   
   
   
			SET @row_number = 0;
   
			CREATE TEMPORARY TABLE tempproductionissue
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemid from (
				SELECT 
					batch_totalcost as totalcost, 
                    itemid
				FROM feedmill_production_issuedetail 
                where production_issue_id = p_production_issue_id
            ) 
            as tblproductionissuedetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempproductionissue INTO n;
				
					WHILE i<n DO 
					
						SET @totalcost = null;
                        SET @itemid = null;
						select totalcost, itemid into @totalcost, @itemid from tempproductionissue where num = i+1;
                    
						-- insert JE detail
                        
                        -- Credit to item - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(SELECT ledgerid FROM item WHERE id = @itemid),
							0,
							NULL,
							NULL,
                            NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							0,
							@totalcost,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'PRODUCTION ISSUE JE',
							p_companyid,
							p_userid,
							@jedetailid1
						 );
                        
                        -- Debit to WIP - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@inventoryindrledgerid,
							0,
                            NULL,
							@batchid,
							NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
							@totalcost,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'PRODUCTION ISSUE JE',
							p_companyid,
							p_userid,
							@jedetailid
						 );
                        
						SET i = i + 1;
					END WHILE;
				End;
		END;
        SELECT @jeid;
	-- END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savepurchaseinvoice_je`(
	IN p_purchaseinvoiceid INT(11),
	IN p_companyid INT(11),
	IN p_userid INT(11)
	)
BEGIN

	
	DROP TABLE IF EXISTS temppurchaseinvoice;
        
		set @branch = null;
		SELECT L.branchid INTO @branch 
		FROM location L
		LEFT JOIN purchaseinvoice PI ON PI.id = p_purchaseinvoiceid
		LEFT JOIN warehouse W ON W.id = PI.deliverytowarehouseid

		WHERE W.locationid = L.id;

		SET @batchid = null;
/*
		SELECT tobatchid INTO @batchid
		FROM purchaserequest PR
		LEFT JOIN purchaseorder PO ON PO.purchaserequestid = PR.id
		LEFT JOIN grpo G ON G.purchaseorderid = PO.id
		LEFT JOIN purchaseinvoice PI ON PI.grpono = G.id
		WHERE PI.id = p_purchaseinvoiceid
		limit 1;
*/
		SET @moduleid = null;
		/*SELECT PO.moduleid INTO @moduleid 
		FROM purchaseorder PO
		LEFT JOIN purchaseinvoice PI ON PI.id = p_purchaseinvoiceid
		LEFT JOIN grpo G ON G.id = PI.grpono
		WHERE 
		PO.id = G.purchaseorderid;
*/
		-- Journal entry detail for WIP bird

		SET @GoodsWithoutInvoiceledgerid = null;
		SET @discountledgerid = null;
		SET @inventorygainandlossledgerid = null;
				   
	   SELECT grpowithoutinvoiceledgerid,discountledgerid,inventorygainandlossledgerid
	   INTO@GoodsWithoutInvoiceledgerid, @discountledgerid,@inventorygainandlossledgerid
	   FROM common_setting 
	   WHERE companyid  = p_companyid limit 1;
		   
		SET @invoicedate =null ; SET @vendorid = null;
		SELECT invoicedate,vendorid INTO @invoicedate,@vendorid FROM purchaseinvoice WHERE id = p_purchaseinvoiceid;

		SET @jeid = null;
		CALL spc_journalentry_save(
		NULL,
		NULL,
		1294,
		NULL,
		@invoicedate,
		NULL,
		@branch,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		@vendorid,
		NULL,
		NULL,
		NULL,
		@moduleid,
		NULL,
		'Purchase invoice JE',
		NULL,
		NULL,
		NULL,
		p_purchaseinvoiceid,
		'Purchase invoice JE',
		p_companyid,
		p_userid,
		@jeid
		);

		SET @row_number = 0;

		CREATE TEMPORARY TABLE temppurchaseinvoice

		SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemid, taxpercent, itemdiscount, discountedvalue, 
        (discountedvalue + ((discountedvalue * taxpercent)/100)) as taxcalcvalue,itembatch from (
		SELECT 
		(PD.quantity*PD.unitprice) as totalcost,
		PD.itemid,
		PD.taxpercent,
		PD.itemdiscount,
		(PD.quantity*PD.unitprice) - (((PD.quantity*PD.unitprice) * PD.itemdiscount)/100) as discountedvalue,
		PD.itembatch

		FROM purchaseinvoicedetail PD
		where purchaseinvoiceid = p_purchaseinvoiceid
		) 
		as tblpurchaseinvoicedetail;

		BEGIN
		DECLARE n INT DEFAULT 0;
		DECLARE i INT DEFAULT 0;
		SELECT COUNT(*) FROM temppurchaseinvoice INTO n;
		
		WHILE i<n DO 

		SET @totalcost = null;
		SET @itemid = null;
		SET @taxcalcvalue = null;
		SET @discountedvalue = null;
		SET @itemdiscount = 0;
		SET @itembatch = null;
		SET @useitembatch = null;
		SET @itemdiscountvalue = null;
		-- SELECT itemdiscount from temppurchaseinvoice where num = i+1;
		select totalcost, itemid, taxcalcvalue,discountedvalue,itemdiscount,itembatch,((totalcost*itemdiscount)/100) 
		into @totalcost, @itemid, @taxcalcvalue,@discountedvalue,@itemdiscount,@itembatch,@itemdiscountvalue 
		from temppurchaseinvoice where num = i+1;
		
		SELECT fnc_getiembatch_use(@itemid,@itembatch) INTO @useitembatch;
		
		SET @cgstid = null;
		SET @sgstid = null;
		SET @igstid = null;
		SET @utgstid = null;

		SET @cgstamount = null;
		SET @sgstamount = null;
		SET @igstamount = null;
		SET @utgstamount = null;
		
		
		select cgstid, sgstid, igstid, utgstid, cgstamount, sgstamount, igstamount, utgstamount
		INTO @cgstid, @sgstid, @igstid, @utgstid, @cgstamount, @sgstamount, @igstamount, @utgstamount
		from purchaseinvoicedetail
		where purchaseinvoiceid = p_purchaseinvoiceid
		and itemid = @itemid;



		-- debit to GoodsWithoutInvoice - Ledger

		SET @jedetailid1 = null;
		CALL spc_journalentrydetail_save( 
		NULL,
		@jeid,
		@GoodsWithoutInvoiceledgerid,
		0,
		NULL,
		@batchid,
		NULL,
		NULL,
		p_purchaseinvoiceid,
		(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
		(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
		@discountedvalue,
		0,
		NULL,
		@vendorid,
		NULL,
		@itemid,
		NULL,
		'Item JE',
		p_companyid,
		p_userid,
		@jedetailid1
		);
	
		/*IF(@useitembatch ='Yes')THEN
			SET @jedetailid6 = null;
			CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			@inventorygainandlossledgerid,
			0,
			NULL,
			@batchid,
			NULL,
			NULL,
			p_purchaseinvoiceid,
			(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			0,
			@itemdiscountvalue,
			NULL,
			@vendorid,
			NULL,
			NULL,
			NULL,
			'Discount JE detail.',
			p_companyid,
			p_userid,
			@jedetailid6
		);
		END IF;
			IF(@useitembatch ='No') THEN
			
			SET @jedetailid1 = null;
			CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			(SELECT ledgerid FROM item WHERE id = @itemid),
			0,
			NULL,
			@batchid,
			NULL,
			NULL,
			p_purchaseinvoiceid,
			(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			0,
			@discountedvalue,
			NULL,
			@vendorid,
			NULL,
			@itemid,
			NULL,
			'Item JE',
			p_companyid,
			p_userid,
			@jedetailid1
			);
			END IF;
		-- END IF;
		*/
        
		-- debit to tax ledgers
		if(@cgstid IS NOT null) then
			SET @jedetailid2 = null;
			CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			(SELECT inputledgerid FROM tax WHERE id = @cgstid),
			0,
			NULL,
			@batchid,
			NULL,
			NULL,
			p_purchaseinvoiceid,
			(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			@cgstamount,
			0,
			NULL,
			@vendorid,
			NULL,
			@itemid,
			NULL,
			'CGST JE detail.',
			p_companyid,
			p_userid,
			@jedetailid2
			);
		end if;

		if(@sgstid IS NOT null) then
			SET @jedetailid3 = null;
			CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			(SELECT inputledgerid FROM tax WHERE id = @sgstid),
			0,
			NULL,
			@batchid,
			NULL,
			NULL,
			p_purchaseinvoiceid,
			(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			@sgstamount,
			0,
			NULL,
			@vendorid,
			NULL,
			@itemid,
			NULL,
			'SGST JE detail.',
			p_companyid,
			p_userid,
			@jedetailid3
			);
		end if;

		if(@igstid IS NOT null) then
			SET @jedetailid4 = null;
			CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			(SELECT inputledgerid FROM tax WHERE id = @igstid),
			0,
			NULL,
			@batchid,
			NULL,
			NULL,
			p_purchaseinvoiceid,
			(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			@igstamount,
			0,
			NULL,
			@vendorid,
			NULL,
			@itemid,
			NULL,
			'IGST JE detail.',
			p_companyid,
			p_userid,
			@jedetailid4
			);
		end if;

		if(@utgstid IS NOT null) then
			SET @jedetailid5 = null;
			CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			(SELECT inputledgerid FROM tax WHERE id = @utgstid),
			0,
			NULL,
			@batchid,
			NULL,
			NULL,
			p_purchaseinvoiceid,
			(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			@utgstamount,
			0,
			NULL,
			@vendorid,
			NULL,
			@utgstid,
			NULL,
			'UTGST JE detail.',
			p_companyid,
			p_userid,
			@jedetailid5
			);
		end if;
		

		
        -- credit to vendor - Ledger

		/*SET @jedetailid = null;
			CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			(select supplierledgerid from party where id = (select vendorid from purchaseinvoice where id = p_purchaseinvoiceid)),
			0,
			NULL,
			@batchid,
			NULL,
			NULL,
			p_purchaseinvoiceid,
			(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			0,
			@taxcalcvalue,
			NULL,
			@vendorid,
			NULL,
			@itemid,
			NULL,
			'Credit to party JE',
			p_companyid,
			p_userid,
			@jedetailid
			); */

		SET i = i + 1;
		END WHILE;
		
        -- credit to vendor - Ledger

		SET @jedetailid = null;
			CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			(select supplierledgerid from party where id = (select vendorid from purchaseinvoice where id = p_purchaseinvoiceid)),
			0,
			NULL,
			@batchid,
			NULL,
			NULL,
			p_purchaseinvoiceid,
			(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			0,
			(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			NULL,
			@vendorid,
			NULL,
			@itemid,
			NULL,
			'Credit to party JE',
			p_companyid,
			p_userid,
			@jedetailid
			);
            
            SET @jedetailid = null;
			CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			(select ledgerid from account_tds where id = (select tdsid from purchaseinvoice where id = p_purchaseinvoiceid)),
			0,
			NULL,
			@batchid,
			NULL,
			NULL,
			p_purchaseinvoiceid,
			(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			(SELECT tdsamount FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			0,
			(SELECT tdsamount FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
			NULL,
			@vendorid,
			NULL,
			@itemid,
			NULL,
			'Credit to TDS JE',
			p_companyid,
			p_userid,
			@jedetailid
			);
        
        End;
        
		-- spc for fright amount
		call spc_savefright_je(
			p_purchaseinvoiceid,
			@batchid,
			@vendorid,
			p_companyid,
			p_userid,
		   @jeid
		);	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savereceiptforproduction_je`(
	IN p_production_receipt_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN



        
        -- Journal entry detail for WIP 
   SET @inventoryindrledgerid = null;
   SET @additionalcost = null;
   SET @additionalcostperkg = null;
   SET @overheadledgerid = null;
   SET @warehouseid = null;
   SET @lossledgerid = null;
   
		   SELECT inventoryindrledgerid, additionalcost, overheadledgerid,lossledgerid
		   INTO @inventoryindrledgerid, @additionalcost, @overheadledgerid,@lossledgerid
		   FROM feedmill_feedmillsetting LIMIT 1;
           
           
		SELECT towarehouse_id INTO @warehouseid  From feedmill_receipt_from_production FRP
           WHERE FRP.id = p_production_receipt_id;
           
           set @branch = null;
			SELECT L.branchid INTO @branch 
			FROM warehouse W
			LEFT JOIN location L ON L.id = W.locationid
			WHERE W.id = @warehouseid;
           
	
   
           
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				(SELECT receipt_date FROM feedmill_receipt_from_production WHERE id = p_production_receipt_id),
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                726,
				NULL,
				'RECEIPT FOR PRODUCTION JE',
				NULL,
				NULL,
				NULL,
				p_production_receipt_id,
				'RECEIPT FOR PRODUCTION JE',
				p_companyid,
                p_userid,
                @jeid
           );
   
   
   
		
			
				SET @item_totalcost = null;
				SET @itemid = null;
                SET @receiptqty = null;
                SET @additionalcost = null;
                SET @po_unit_cost = null;
                SET @remaining_receiptqty = null;
                SET @applyreciptloss = null;
                SET @productionorder_id = null;
				select item_totalcost, itemid, receipt_qty,additionalcost,po_unit_cost,remaining_receiptqty ,applyreciptloss,productionorder_id
                into @item_totalcost, @itemid,@receiptqty,@additionalcost,@po_unit_cost,@remaining_receiptqty,@applyreciptloss,@productionorder_id from feedmill_receipt_from_production WHERE id = p_production_receipt_id;
				
            
				-- insert JE detail
				
				-- Credit to inventoryindrledgerid - Ledger
                
                if(@applyreciptloss =0) then
				 
				 SET @jedetailid1 = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@inventoryindrledgerid,
					0,
					NULL,
					NULL,
					NULL,
                    NULL,
					NULL,
					NULL,
					NULL,
					0,
					(@receiptqty*@po_unit_cost),
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'RECEIPT FOR PRODUCTION JE',
					p_companyid,
					p_userid,
					@jedetailid1
				 );
				else
                 SET @jedetailid1 = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@inventoryindrledgerid,
					0,
					NULL,
					NULL,
					NULL,
                    NULL,
					NULL,
					NULL,
					NULL,
					0,
					((SELECT plannedqty FROM feedmill_productionorder FPO where FPO.id = @productionorder_id)*@po_unit_cost),
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'RECEIPT FOR PRODUCTION JE',
					p_companyid,
					p_userid,
					@jedetailid1
				 );
                END if;
				-- Debit to WIP - Ledger
				
				 SET @jedetailid = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					(SELECT ledgerid FROM item WHERE id = @itemid),
					0,
					null,
					NULL,
					NULL,
                    NULL,
					NULL,
					NULL,
					NULL,
					(@item_totalcost),
					0,
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'RECEIPT FOR PRODUCTION JE',
					p_companyid,
					p_userid,
					@jedetailid
				 );
                 
                 
                 -- Credit to item - Ledger
				 
				 SET @jedetailid1 = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@overheadledgerid,
					0,
					NULL,
					NULL,
					NULL,
                    NULL,
					NULL,
					NULL,
					NULL,
					0,
					(@receiptqty*@additionalcost),
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'RECEIPT FOR PRODUCTION JE',
					p_companyid,
					p_userid,
					@jedetailid1
				 );
                 if(@remaining_receiptqty !=0) then
                 
				 SET @jedetailid = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@lossledgerid,
					0,
					null,
					NULL,
					NULL,
                    NULL,
					NULL,
					NULL,
					NULL,
					(@remaining_receiptqty*@po_unit_cost),
					0,
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'Receipt For Production Loss',
					p_companyid,
					p_userid,
					@jedetailid
				 );
                 
                 -- Credit to inventoryindrledgerid - Ledger
				 
				 SET @jedetailid1 = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@inventoryindrledgerid,
					0,
					NULL,
					NULL,
					NULL,
                    NULL,
					NULL,
					NULL,
					NULL,
					0,
					(@remaining_receiptqty*@po_unit_cost),
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'RECEIPT FOR PRODUCTION JE Loss',
					p_companyid,
					p_userid,
					@jedetailid1
				 );
                 END if;
                 
 
	-- END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savereceiptforproduction_loss_je`(
	IN p_production_receipt_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN



        
        -- Journal entry detail for WIP 
   SET @lossledgerid = null;
   SET @warehouseid = null;
   
		   SELECT lossledgerid
		   INTO @lossledgerid
		   FROM feedmill_feedmillsetting LIMIT 1;
           
           
		SELECT towarehouse_id INTO @warehouseid  From feedmill_receipt_from_production FRP
           WHERE FRP.id = p_production_receipt_id;
           
           set @branch = null;
			SELECT L.branchid INTO @branch 
			FROM warehouse W
			LEFT JOIN location L ON L.id = W.locationid
			WHERE W.id = @warehouseid;
           
   
           
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				(SELECT receipt_date FROM feedmill_receipt_from_production WHERE id = p_production_receipt_id),
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                726,
				NULL,
				'Receipt For Production Loss',
				NULL,
				NULL,
				NULL,
				p_production_receipt_id,
				'Recipt For Production Loss',
				p_companyid,
                p_userid,
                @jeid
           );
   
   
   
		
			
				SET @unit_cost = null;
				SET @itemid = null;
                SET @remaining_receiptqty = null;
				select remaining_receiptqty, itemid, unit_cost into @remaining_receiptqty, @itemid,@unit_cost from feedmill_receipt_from_production WHERE id = p_production_receipt_id;
				
            
				-- insert JE detail
				
				-- Credit to loss - Ledger
				 
				 SET @jedetailid1 = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@lossledgerid,
					0,
					NULL,
					NULL,
					NULL,
                    NULL,
					NULL,
					NULL,
					NULL,
					0,
					(@remaining_receiptqty*@unit_cost),
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'Receipt For Production Loss',
					p_companyid,
					p_userid,
					@jedetailid1
				 );
				
				
 
	-- END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savesalesdelivery_je`(
	IN p_salesdeliveryid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DECLARE finished INTEGER DEFAULT 0;
	DECLARE p_isbird TINYINT(4) DEFAULT 0;
	DECLARE p_weightcost DECIMAL(12,3) DEFAULT 0;
	DECLARE p_totalcost DECIMAL(12,3) DEFAULT 0;
	DECLARE p_taxpercent DECIMAL(12,3) DEFAULT 0;
	DECLARE p_itemid DECIMAL(12,3) DEFAULT 0;
	DECLARE p_discount DECIMAL(12,3) DEFAULT 0;
    DECLARE p_actdiscount DECIMAL(12,3) DEFAULT 0;
	DECLARE i INT(11) DEFAULT 0;
	DECLARE count1 INT(11) DEFAULT 0;

	DEClARE curSalesDeliveryMaster 
	CURSOR FOR SELECT
		SDD.isbird,
		(SDD.weight*SDD.rate) as weightcost,
		(SDD.quantity*SDD.rate) as totalcost, 
		IFNULL(SOD.taxpercent,0) as taxpercent, 
		SDD.itemid,
		SOD.discount,
        (((SDD.quantity*SDD.rate) * SOD.discount) / 100) as actdiscount
	FROM salesdeliverydetail SDD
	LEFT JOIN salesorderdetail SOD ON SOD.id = SDD.salesorderdetailid
	where salesdeliveryid = p_salesdeliveryid;

	DECLARE CONTINUE HANDLER 
	FOR NOT FOUND SET finished = 1;

	IF((SELECT statusid FROM salesdelivery WHERE id = p_salesdeliveryid) = 1622) THEN
    
		BEGIN 
        
        -- Journal entry detail for delivered item
		   SET @costofgoodsoleledgerid = null;
           
		   SELECT costofgoodsoldledgerid
		   INTO @costofgoodsoleledgerid
		   FROM breedersetting LIMIT 1;
           
           set @branch = null;
		   SELECT L.branchid INTO @branch 
		   FROM location L
		   LEFT JOIN salesdelivery SD ON SD.id = p_salesdeliveryid
		   LEFT JOIN warehouse W ON W.id = SD.warehouseid
		   
		   WHERE W.locationid = L.id;
           
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1307,
				NULL,
				(SELECT deliverydate FROM salesdelivery WHERE id = p_salesdeliveryid),
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                348,
				NULL,
				'Sales delivery JE',
				NULL,
				NULL,
				NULL,
				p_salesdeliveryid,
				'Sales delivery JE',
				p_companyid,
                p_userid,
                @jeid
           );

		OPEN curSalesDeliveryMaster;
        
        getNextRec: LOOP
			FETCH curSalesDeliveryMaster INTO p_isbird, p_weightcost, p_totalcost, p_taxpercent, p_itemid, p_discount, p_actdiscount;
			IF finished = 1 THEN 
				LEAVE getNextRec;
			END IF;
			
            SET @taxcalculatedval = null;
			SET @itemid = null;
			IF(p_isbird = 1) THEN
				SELECT ((p_weightcost - p_actdiscount) + (((p_weightcost - p_actdiscount) * p_taxpercent)/100)) INTO @taxcalculatedval;
			ELSE
				SELECT ((p_totalcost - p_actdiscount) + (((p_totalcost - p_actdiscount) * p_taxpercent)/100)) INTO @taxcalculatedval;
			END IF;
			select p_itemid into @itemid;
			-- Credit to item - Ledger
			 
			 SET @jedetailid1 = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				(SELECT ledgerid FROM item WHERE id = @itemid),
				0,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				0,
				@taxcalculatedval,
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Sales delivery JE',
				p_companyid,
				p_userid,
				@jedetailid1
			 );
			
			-- Debit to Cost Of Good Sold - Ledger
			
			 SET @jedetailid = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				@costofgoodsoleledgerid,
				0,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				@taxcalculatedval,
				0,
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Sales delivery JE',
				p_companyid,
				p_userid,
				@jedetailid
			 );
			
            
            END LOOP getNextRec;
			CLOSE curSalesDeliveryMaster;
			truncate chartof_accout_update;
   
		END;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savesalesinvoice_fromsalesdelivery`(
	IN p_salesdeliveryid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	SET @salestypeid = null;
    SET @salesorderid = null;
	SET @customerid = null;
    SET @contactperson = null;
    SET @deliverydate = null;
    SET @referenceno = null;
    SET @referredby = null;
    SET @referencedate = null;
    SET @transactiontypeid = null;
    SET @deliverytoaddressid = null;
    SET @deliverytoaddress = null;
    SET @billtoaddressid = null;
    SET @billtoaddress = null;
    SET @warehouseid = null;
    SET @warehouseaddress = null;
    SET @subtotal = null;
    SET @discount = null;
    SET @roundoff = null;
    SET @grandtotal = null;
    SET @remark = null;
    SET @deliverysubject = null;
    SET @salespersonid = null;
    SET @warehousebinid = null;
    
	SELECT salestypeid, salesorderid
    INTO @salestypeid, @salesorderid
    FROM salesdelivery
    WHERE id = p_salesdeliveryid;

	SELECT SD.customerid, SD.deliverydate, SD.deliverytoaddressid, SD.deliverytoaddress, SD.billtoaddressid, SD.billtoaddress, SD.warehouseid, SD.warehouseaddress,
    CDW.totaldeliverycost, CDW.totaldeliverycost, SD.remark, 'CBF Delivery', SD.salespersonid
    INTO @customerid, @deliverydate, @deliverytoaddressid, @deliverytoaddress, @billtoaddressid, @billtoaddress, @warehouseid, @warehouseaddress,
    @subtotal, @grandtotal, @remark, @deliverysubject, @salespersonid
    FROM salesdelivery SD
    INNER JOIN cbf_delivery_weights CDW ON CDW.stddeliveryid = SD.id
    WHERE SD.id = p_salesdeliveryid;
    
    SELECT warehousebinid INTO @warehousebinid FROM salesdeliverydetail WHERE salesdeliveryid = p_salesdeliveryid LIMIT 1;
    
    SET @salesinvoiceno = null;
    CALL spc_financialyeardocseries_newseries(
		'SI', p_companyid, @salesinvoiceno
	);

	SET @salesinvoiceid = null;
	call spc_salesinvoice_save(
		null,@salestypeid, @salesinvoiceno, @salesorderid, p_salesdeliveryid, @customerid,
		@contactperson, @deliverydate,  @referenceno, @referredby, @referencedate,
		@transactiontypeid, @deliverydate, @deliverytoaddressid, @deliverytoaddress,
		@billtoaddressid, @billtoaddress, @warehouseid, @warehouseaddress, @subtotal,
        @discount, @roundoff, @grandtotal, @remark, @deliverysubject, @salespersonid,
		1362, p_companyid, p_userid, @salesinvoiceid
    );
    
    SET @row_number = 0;
	   
	DROP TABLE IF EXISTS tempsalesinvoicedetail;
	CREATE TEMPORARY TABLE tempsalesinvoicedetail
	
	SELECT (@row_number:=@row_number + 1) AS num,id, salesorderdetailid,itemid,quantity,isbird,weight,itemunitid,rate,discount,taxid,taxpercent,taxtypeid, cgstid, cgstpercent,
			cgstamount, sgstid, sgstpercent,
            sgstamount,igstid,igstpercent,
            igstamount,utgstid,utgstpercent,
            utgstamount from (
		SELECT 
			SDD.id,
            SDD.salesorderdetailid,
			SDD.itemid,IFNULL(SDD.quantity,0) as quantity,SDD.isbird, IFNULL(SDD.weight,0) as weight,
            SDD.itemunitid,IFNULL(SDD.rate,0) as rate,
            IFNULL(SOD.discount,0) as discount, SOD.taxid, IFNULL(SOD.taxpercent,0) as taxpercent,
			SOD.taxtypeid, SOD.cgstid, IFNULL(SOD.cgstpercent,0) as cgstpercent,
			IFNULL(SOD.cgstamount,0) as cgstamount, SOD.sgstid, IFNULL(SOD.sgstpercent,0) as sgstpercent,
            IFNULL(SOD.sgstamount,0) as sgstamount,SOD.igstid,IFNULL(SOD.igstpercent,0) as igstpercent,
            IFNULL(SOD.igstamount,0) as igstamount,SOD.utgstid,IFNULL(SOD.utgstpercent,0) as utgstpercent,
            IFNULL(SOD.utgstamount,0) as utgstamount
            
		FROM salesdeliverydetail SDD
        LEFT JOIN salesorderdetail SOD ON SOD.id = SDD.salesorderdetailid
		where SDD.salesdeliveryid = p_salesdeliveryid
	) 
	as tblsalesinvoicedetail;
	
	select * from tempsalesinvoicedetail;

	BEGIN
		DECLARE n INT DEFAULT 0;
		DECLARE i INT DEFAULT 0;
		SELECT COUNT(*) FROM tempsalesinvoicedetail INTO n;
		 
		WHILE i<n DO 
			SET @salesdeliverydetailid = null;
            SET @salesorderdetailid = null;
            SET @itemid = null;
            SET @quantity = 0;
            SET @isbird = null;
            SET @weight = 0;
            SET @itemunitid = null;
            SET @rate = 0;
            SET @discount = 0;
            SET @taxid = null;
            SET @taxpercent = 0;
            SET @taxtypeid = null;
            SET @cgstid = null;
            SET @cgstpercent = 0;
			SET @cgstamount = 0;
            SET @sgstid = null;
            SET @sgstpercent = 0;
            SET @sgstamount = 0;
            SET @igstid = null;
            SET @igstpercent = 0;
            SET @igstamount = 0;
            SET @utgstid = null;
            SET @utgstpercent = 0;
            SET @utgstamount = 0;
            SET @linetotal = 0;
			select id, salesorderdetailid,itemid,quantity,isbird,weight,itemunitid,rate,discount,taxid,taxpercent,taxtypeid, cgstid, cgstpercent,
			cgstamount, sgstid, sgstpercent,
            sgstamount,igstid,igstpercent,
            igstamount,utgstid,utgstpercent,
            utgstamount 
			into @salesdeliverydetailid, @salesorderdetailid,@itemid,@quantity,@isbird,@weight,@itemunitid,
            @rate,@discount,@taxid,@taxpercent,@taxtypeid, @cgstid, @cgstpercent,
			@cgstamount, @sgstid, @sgstpercent,
            @sgstamount,@igstid,@igstpercent,
            @igstamount,@utgstid,@utgstpercent,
            @utgstamount from tempsalesinvoicedetail where num = i+1;
			
			-- insert invoice detail 
			 SET @invoicedetailid = null;
			IF(@isbird = 1) THEN
				SET @linetotal = @weight * @rate;
            ELSE
				SET @linetotal = @quantity * @rate;
            END IF;
            
            CALL spc_salesinvoicedetail_save( 
				NULL,@salesinvoiceid,@salesorderdetailid,@salesdeliverydetailid,
                @itemid,@quantity,@isbird,@weight,1,@itemunitid,
                @rate,@discount,@taxid,@taxpercent,@taxtypeid, @cgstid, @cgstpercent,
				@cgstamount, @sgstid, @sgstpercent,@sgstamount,@igstid,@igstpercent,
				@igstamount,@utgstid,@utgstpercent,@utgstamount,@linetotal, @warehousebinid,
				p_companyid,p_userid,@invoicedetailid
			 );
			
			
			SET i = i + 1;
		END WHILE;
	END;
	
    -- sales invoice JE
    call spc_savesalesinvoice_je(@salesinvoiceid, p_companyid, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savesalesinvoice_je`(
	IN p_salesinvoiceid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempsalesinvoice;
    DROP TABLE IF EXISTS tempfreight;

   set @branch = null;
   SELECT L.branchid INTO @branch 
   FROM location L
   LEFT JOIN salesinvoice SI ON SI.id = p_salesinvoiceid
   LEFT JOIN salesdelivery SD ON FIND_IN_SET(SD.id, SI.salesdeliveryids)
   LEFT JOIN warehouse W ON W.id = SD.warehouseid
   WHERE W.locationid = L.id LIMIT 1;
   

	 SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1291,
				NULL,
				(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				(select customerid from salesinvoice where id = p_salesinvoiceid),
				NULL,
				NULL,
                NULL,
                NULL,
				NULL,
				'Sales invoice JE',
				NULL,
				NULL,
				NULL,
				p_salesinvoiceid,
				'Sales invoice JE',
				p_companyid,
                p_userid,
                @jeid
           );
           
			SET @row_number = 0;
   
			CREATE TEMPORARY TABLE tempsalesinvoice
			
            SELECT (@row_number:=@row_number + 1) AS num, salesinvoicedetailid, itemid, quantity, unitprice, weight, taxpercent, discount, isbird
            -- discountedvalue, (discountedvalue + ((discountedvalue * taxpercent)/100)) as taxcalcvalue 
            from (
				SELECT id as salesinvoicedetailid,
                    itemid,
                    IFNULL(quantity,0) as quantity,
                    IFNULL(unitprice,0) as unitprice,
                    IFNULL(weight,0) as weight,
                    IFNULL(taxpercent,0) as taxpercent,
                    IFNULL(discount,0) as discount,
                    isbird
                    -- IFNULL(((quantity*unitprice) + (((quantity*unitprice) * IFNULL(taxpercent,0))/100)) - (((quantity*unitprice) * discount)/100),0) as discountedvalue
				FROM salesinvoicedetail 
                where salesinvoiceid = p_salesinvoiceid
            ) 
            as tblsalesinvoicedetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempsalesinvoice INTO n;
				
					WHILE i<n DO 
						SET @salesinvoicedetailid = null;
                        SET @quantity = null;
                        SET @weight = null;
                        SET @unitprice = null;
                        SET @itemid = null;
                        SET @discountedvalue = null;
                        SET @totalcost = null;
                        SET @taxpercent = null;
                        SET @discount = null;
                        SET @isbird = null;
						select salesinvoicedetailid, itemid, quantity, unitprice, weight, isbird, taxpercent, discount
                        into @salesinvoicedetailid, @itemid, @quantity, @unitprice, @weight, @isbird , @taxpercent, @discount
                        from tempsalesinvoice where num = i+1;
                        
                        IF (@isbird = 1) THEN
							SELECT IFNULL(((@weight*@unitprice) + (((@weight*@unitprice) * IFNULL(@taxpercent,0))/100)) - (((@weight*@unitprice) * @discount)/100),0) INTO @discountedvalue;
							SELECT IFNULL((@weight*@unitprice),0) INTO @totalcost;
                        ELSE
							SELECT IFNULL(((@quantity*@unitprice) + (((@quantity*@unitprice) * IFNULL(@taxpercent,0))/100)) - (((@quantity*@unitprice) * @discount)/100),0) INTO @discountedvalue;
							SELECT IFNULL((@quantity*@unitprice),0) INTO @totalcost;
                        END IF;
                    
						SET @cgstid = null;
                        SET @sgstid = null;
                        SET @igstid = null;
                        SET @utgstid = null;
                        
                        SET @cgstamount = null;
                        SET @sgstamount = null;
                        SET @igstamount = null;
                        SET @utgstamount = null;
                        SET @itemdiscount = null;
                        
                        select cgstid, sgstid, igstid, utgstid, IFNULL(cgstamount,0), IFNULL(sgstamount,0), 
                        IFNULL(igstamount,0), IFNULL(utgstamount,0), discount
                        INTO @cgstid, @sgstid, @igstid, @utgstid, @cgstamount, @sgstamount, @igstamount, @utgstamount, @itemdiscount
                        from salesinvoicedetail
                        where salesinvoiceid = p_salesinvoiceid
                        AND id = @salesinvoicedetailid
                        and itemid = @itemid;
                    
						-- insert JE detail
                        
                        -- debit to customer - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(select customerledgerid from party where id = (select customerid from salesinvoice where id = p_salesinvoiceid)),
                            0,
							NULL,
							NULL,
							NULL,
							NULL,
                            p_salesinvoiceid,
							(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
							(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
							@discountedvalue,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Item JE',
							p_companyid,
							p_userid,
							@jedetailid1
						 ); 
                        
                        -- credit to tax ledgers
                        if(@cgstid IS NOT null) then
							 SET @jedetailid2 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT outputledgerid FROM tax WHERE id = @cgstid),
                                0,
								NULL,
								NULL,
								NULL,
								NULL,
                                p_salesinvoiceid,
								(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
								(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
								0,
								@cgstamount,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'CGST JE detail.',
								p_companyid,
								p_userid,
								@jedetailid2
							 );
						end if;
                        
                        if(@sgstid IS NOT null) then
							 SET @jedetailid3 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT outputledgerid FROM tax WHERE id = @sgstid),
                                0,
								NULL,
								NULL,
								NULL,
								NULL,
                                p_salesinvoiceid,
								(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
								(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
								0,
								@sgstamount,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'SGST JE detail.',
								p_companyid,
								p_userid,
								@jedetailid3
							 );
						end if;
                        
                        if(@igstid IS NOT null) then
							 SET @jedetailid4 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT outputledgerid FROM tax WHERE id = @igstid),
                                0,
								NULL,
								NULL,
								NULL,
								NULL,
                                p_salesinvoiceid,
								(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
								(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
								0,
								@igstamount,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'IGST JE detail.',
								p_companyid,
								p_userid,
								@jedetailid4
							 );
						end if;
                        
                        if(@utgstid IS NOT null) then
							 SET @jedetailid5 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT outputledgerid FROM tax WHERE id = @utgstid),
                                0,
								NULL,
								NULL,
								NULL,
								NULL,
                                p_salesinvoiceid,
								(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
								(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
								0,
								@utgstamount,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'UTGST JE detail.',
								p_companyid,
								p_userid,
								@jedetailid5
							 );
						end if;
                        
                        -- debit to customer ledger
                        SET @jedetailid6 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(select customerledgerid from party where id = (select customerid from salesinvoice where id = p_salesinvoiceid)),
							0,
							NULL,
							NULL,
							NULL,
							NULL,
							p_salesinvoiceid,
							(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
							(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
							(@cgstamount + @sgstamount + @igstamount + @utgstamount),
                            0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'UTGST JE detail.',
							p_companyid,
							p_userid,
							@jedetailid5
						 );
                         
                        -- debit to discount ledger
                        
                        /*SET @jedetailid6 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(SELECT discountledgerid FROM breedersetting LIMIT 1),
                            0,
							NULL,
							NULL,
							NULL,
							NULL,
                            p_salesinvoiceid,
							(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
							(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
							@itemdiscount,
							0,
							NULL,
							NULL,
							NULL,
							NULL,
							NULL,
							'Discount JE detail.',
							p_companyid,
							p_userid,
							@jedetailid6
						 );*/
                        
                        -- credit to revenue - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(select revenueledgerid from item where id = @itemid),
                            0,
							NULL,
							NULL,
							NULL,
							NULL,
                            p_salesinvoiceid,
							(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
							(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
							0,
							@discountedvalue,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'credit to revenue ledger JE',
							p_companyid,
							p_userid,
							@jedetailid
						 );
                        
						SET i = i + 1;
					END WHILE;
				End;
		END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_savesupervisorkm_saveje`(
	IN p_supervisorkmchargeid INT,
   -- IN p_supervisorkmdate DATE,
   -- IN p_km DECIMAL(9,3),
   IN p_kmcost DECIMAL(9,3),
   -- IN p_deductedkm DECIMAL(9,3),
   -- IN p_finalkm DECIMAL(9,3),
    IN p_statusid INT (11),
    IN p_chargedate DATE,
    IN p_employeeid INT(11),
	IN p_branchid INT(11),
    In p_companyid INT,
    IN p_jeid INT,
    IN p_userid INT
	-- OUT out_id VARCHAR(200)
    )
BEGIN

   /* DECLARE finished INTEGER DEFAULT 0;
	DECLARE p_rate DECIMAL(9,3) DEFAULT 0;
	DECLARE p_kmcost DECIMAL(9,3) DEFAULT 0;
	-- DECLARE p_itemid DECIMAL(12,3) DEFAULT 0;
	DECLARE c_employeeid INT(11) DEFAULT 0;
	DECLARE i INT(11) DEFAULT 0;
	DECLARE count1 INT(11) DEFAULT 0;*/
    
    
    
/*	DEClARE curSupervisorKMMaster 
	CURSOR FOR SELECT
		SKC.rate,
		(S.finalkm*SKC.rate) as kmcost,
        SKC.employeeid 
		-- SKCD.itemid,
		-- SOD.discount
	from supervisorkmcharge SKC
	LEFT JOIN supervisorkmchargedetail S ON S.supervisorkmchargeid=SKC.id
	where SKC.id = p_supervisorkmchargeid;*/
    
  /*  DECLARE CONTINUE HANDLER 
	FOR NOT FOUND SET finished = 1;
    set p_kmcost =40;
	
    SELECT
		SKC.rate,
		(S.finalkm*SKC.rate) as kmcost,
        SKC.employeeid 
		-- SKCD.itemid,
		-- SOD.discount
	from supervisorkmcharge SKC
	LEFT JOIN supervisorkmchargedetail S ON S.supervisorkmchargeid=SKC.id
	where SKC.id = p_supervisorkmchargeid;*/
    
    IF(p_statusid = 6305) THEN  -- Approve
    BEGIN 
		set @supervisorkmledgerid = null;
         SELECT supervisorkmledgerid
		   INTO @supervisorkmledgerid
		   FROM cbfsetting LIMIT 1;
           
           select @supervisorkmledgerid;
           
		   set @employeeledgerid = null;
		   SELECT E.ledgerid INTO @employeeledgerid 
		   FROM employee E
           where E.id = p_employeeid;
		   select @employeeledgerid;
           
		/*	OPEN curSupervisorKMMaster;
        
            getNextRec: LOOP
			FETCH curSupervisorKMMaster INTO p_rate, p_kmcost, c_employeeid;
			IF finished = 1 THEN 
				LEAVE getNextRec;
			END IF;*/
           
          -- Credit to employee - Ledger
			 
			 SET @jedetailid1 = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				p_jeid,
				@employeeledgerid,
				0,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				0,
				p_kmcost,
				NULL,
				NULL,
				NULL,
				NUll, -- @itemid
				NULL,
				'Supervisor KM Charge JE',
				p_companyid,
				p_userid,
				@jedetailid1
			 );
             
             -- Debit to  - Ledger
			
			 SET @jedetailid = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				p_jeid,
				@supervisorkmledgerid,
				0,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				p_kmcost,
				0,
				NULL,
				NULL,
				NULL,
				NULL, -- @itemid
				NULL,
				'Supervisor KM Charge JE',
				p_companyid,
				p_userid,
				@jedetailid
			 );
           -- END LOOP getNextRec;
		-- CLOSE curSupervisorKMMaster;
    
  END;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_sa_chartofaccount_save1`(
	IN p_id INT(11),
    IN p_categoryid INT(11),
    IN p_coaname VARCHAR(150),
    IN p_glcode VARCHAR(100),
    IN p_coatypeid INT(11),
    IN p_isparent TINYINT(4),
    IN p_groupid INT(11),
    IN p_iscontrolacc TINYINT(4),
    IN p_isblockmanualposting TINYINT(4),
    IN p_iscashacc TINYINT(4),
    IN p_isproject TINYINT(4),
    IN p_projectid INT(11),
    IN p_isactive TINYINT(4),
    IN p_iscostcenterapplicable TINYINT(4),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    set @up_id = 0;
 -- SELECT id into @up_id FROM chartofaccount WHERE companyid = p_companyid  AND categoryid = p_categoryid AND glcode = p_glcode; /* AND coaname = p_coaname*/   -- changes Done by shrinivas avoide duplicate COA
   IF (@up_id = 0)THEN
 --  SELECT @up_id as zero;
		INSERT INTO chartofaccount 
				(categoryid, coaname, glcode, coatypeid, isparent, groupid, iscontrolacc,
                 isblockmanualposting, iscashacc, isproject, projectid, is_deleted, isactive, iscostcenterapplicable, companyid)
			VALUES 
				(p_categoryid, p_coaname, p_glcode, p_coatypeid, p_isparent, p_groupid, p_iscontrolacc,
                 p_isblockmanualposting, p_iscashacc, p_isproject, p_projectid, 0, p_isactive, p_iscostcenterapplicable, p_companyid);

	SELECT LAST_INSERT_ID() INTO out_id; 
    
                insert into chartof_accout_update set id = out_id,groupid =p_groupid,main_id =p_id ;
                select id INTO @update_groupid FROM chartof_accout_update WHERE main_id = p_groupid ;
              update chartofaccount set groupid = ifnull(@update_groupid,p_groupid) WHERE groupid = p_groupid AND companyid = p_companyid AND groupid !=0;
          
         else
        --  SELECT @up_id;
          		update chartofaccount set
				 coaname = p_coaname ,  coatypeid = p_coatypeid, isparent = p_isparent, groupid = p_groupid, 
                 iscontrolacc = p_iscontrolacc,
                 isblockmanualposting = p_isblockmanualposting, iscashacc = p_iscashacc, isproject = p_isproject, projectid = p_projectid, is_deleted = 0, isactive = p_isactive, iscostcenterapplicable = p_iscostcenterapplicable
			WHERE id = @up_id;

	SELECT @up_id INTO @w_out_id;
   -- select @w_out_id as updated_id;
                insert into chartof_accout_update set id = @w_out_id,groupid =p_groupid,main_id =p_id ;
           --   select * from chartof_accout_update;
                select id INTO @update_groupid FROM chartof_accout_update WHERE main_id = p_groupid ;
              --   select @update_groupid as A;
              update chartofaccount set groupid = ifnull(@update_groupid,p_groupid)  WHERE groupid = p_groupid AND companyid = p_companyid AND groupid !=0;
              SELECT LAST_INSERT_ID() INTO out_id;
	 END IF;
    
    
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_schememanagement_savejson`(
	  IN p_coststructureid INT,
      IN p_coststructure json,
	  IN p_deduction json,
      IN p_incentive json,
      IN p_prodincentive json,
      IN p_proddeduction json,
      IN p_userid INT,
      OUT out_id INT
)
BEGIN
    --  save coststructuredetail
    
	 SET @i = 0;
    
	 WHILE @i < JSON_LENGTH(p_coststructure) DO
    
		 SET @str = NULL;
         SELECT JSON_EXTRACT(p_coststructure,CONCAT('$[',@i,']')) INTO @str;
        
		 SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
		 SET @out_id = null;
        
		 CALL spc_coststructuredetail_save(
        
			 @p_id,
              p_coststructureid,
             (SELECT JSON_EXTRACT(@str, CONCAT('$.fromavgweight'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.toavgaeight'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.productioncost'))),
			 (SELECT JSON_EXTRACT(@str, CONCAT('$.rearingcharge'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.fcr'))),
			 (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
		      p_userid,
			 @out_id
         );

		 SELECT @i + 1 INTO @i;
        
	  END WHILE;
    
    
    -- save daily deduction 
    
    SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_deduction) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_deduction,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_deduction_save(
        
			@p_id,
            p_coststructureid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.fromdays'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.todays'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.perratebird'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            p_userid,
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_incentive) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_incentive,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_additionalincentive_save(
        
			@p_id,
            p_coststructureid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.fromsellingrate'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.tosellingrate'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.incentive'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.maxincentive'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            p_userid,
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    -- save production incentive
    
    SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_prodincentive) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_prodincentive,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        select @p_id;
        
        CALL spc_cbfproductionincentive_save(
        
			@p_id,
            p_coststructureid,
            IF(json_type(JSON_EXTRACT(@str, CONCAT('$.fromrate'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.fromrate'))) AS DECIMAL(9,3))),
            IF(json_type(JSON_EXTRACT(@str, CONCAT('$.torate'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.torate'))) AS DECIMAL(9,3))),
            IF(json_type(JSON_EXTRACT(@str, CONCAT('$.dividendperrupee'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.dividendperrupee'))) AS DECIMAL(9,3))),
            IF(json_type(JSON_EXTRACT(@str, CONCAT('$.incentiveapplyby'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.incentiveapplyby'))) AS UNSIGNED INTEGER)),
            IF(json_type(JSON_EXTRACT(@str, CONCAT('$.companyid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))) AS UNSIGNED INTEGER)),
            IF(json_type(JSON_EXTRACT(@str, CONCAT('$.userid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))) AS UNSIGNED INTEGER)),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    -- save production deduction
    
    SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_proddeduction) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_proddeduction,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_cbfproductiondeduction_save(
        
			@p_id,
            p_coststructureid,
            IF(json_type(JSON_EXTRACT(@str, CONCAT('$.fromrate'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.fromrate'))) AS DECIMAL(9,3))),
            IF(json_type(JSON_EXTRACT(@str, CONCAT('$.torate'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.torate'))) AS DECIMAL(9,3))),
            IF(json_type(JSON_EXTRACT(@str, CONCAT('$.dividendperrupee'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.dividendperrupee'))) AS DECIMAL(9,3))),
            IF(json_type(JSON_EXTRACT(@str, CONCAT('$.deductionapplyby'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.deductionapplyby'))) AS UNSIGNED INTEGER)),
            IF(json_type(JSON_EXTRACT(@str, CONCAT('$.companyid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))) AS UNSIGNED INTEGER)),
            IF(json_type(JSON_EXTRACT(@str, CONCAT('$.userid'))) = 'NULL', 0, CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))) AS UNSIGNED INTEGER)),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_servicepodetail_save`(
	IN p_id	INT(11),
	IN p_servicepoid INT(11),
	IN p_servicename VARCHAR(200),
	In p_description VARCHAR(200),
	IN p_itemid INT(11),
	IN p_itemname VARCHAR(200),
	IN p_quantity DECIMAL(9,3),
	IN p_unitid	INT(11),
	IN p_rate DECIMAL(9,3),
	IN p_discountpercent DECIMAL(9,3),
	IN p_discountamt DECIMAL(12,3),
	IN p_netamount	DECIMAL(12,3),
    IN p_taxid INT,
    IN p_taxpercent DECIMAL(9,3),
    IN p_cgstid INT(11),
    IN p_cgstpercent DECIMAL(9,3),
    IN p_cgstamount DECIMAL(9,3),
    IN p_sgstid INT(11),
    IN p_sgstpercent DECIMAL(9,3),
    IN p_sgstamount DECIMAL(9,3),
    IN p_igstid INT(11),
    IN p_igstpercent DECIMAL(9,3),
    IN p_igstamount DECIMAL(9,3),
    IN p_utgstid INT(11),
    IN p_utgstpercent DECIMAL(9,3),
    IN p_utgstamount DECIMAL(9,3),
    IN p_companyid INT(11),
    IN p_userid INT,
	OUT out_id INT
    )
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO servicepodetail 
				(servicepoid, servicename, description, itemid, itemname,
                quantity, unitid, rate,discountpercent, discountamt, netamount, 
                taxid,taxpercent,cgstid,
                cgstpercent, cgstamount,sgstid,sgstpercent,sgstamount,igstid,igstpercent,
                igstamount,utgstid,utgstpercent,utgstamount,companyid)
			VALUES 
				(p_servicepoid, p_servicename, p_description,
                p_itemid, p_itemname, p_quantity, p_unitid,
                p_rate,p_discountpercent, p_discountamt,
                p_netamount,  p_taxid,p_taxpercent,p_cgstid,p_cgstpercent, p_cgstamount
                ,p_sgstid,p_sgstpercent, p_sgstamount,p_igstid,p_igstpercent,p_igstamount,
                p_utgstid,p_utgstpercent, p_utgstamount, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE servicepodetail
				SET servicepoid = p_servicepoid,
                servicename = p_servicename,
                description = p_description,
                itemid = p_itemid,
                itemname = p_itemname, 
                quantity = p_quantity,
                unitid = p_unitid,
                rate = p_rate,
                discountpercent = p_discountpercent,
                discountamt = p_discountamt,
                netamount = p_netamount,
                taxid = p_taxid,
                taxpercent= p_taxpercent,
                cgstid = p_cgstid,
                cgstpercent= p_cgstpercent,
                cgstamount = p_cgstamount,
                sgstid = p_sgstid,
                sgstpercent =p_sgstpercent,
                sgstamount =p_sgstamount,
                igstid = p_igstid,
                igstpercent =p_igstpercent,
                igstamount = p_igstamount,
                utgstid = p_utgstid,
                utgstpercent =p_utgstpercent,
                utgstamount = p_utgstamount,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'servicepodetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_servicepodetail_search`(
 In p_servicepoid INT(11)
 )
BEGIN
  SELECT
		SPO.id as purchaseorderdetailid,
        SPO.servicepoid as purchaseorderid,
        SPO.servicename,
        SPO.description,
        SPO.itemid,
        SPO.itemname,
        I.itemcode,
        IG.groupname,
        IG.id as itemgroupid,
        SPO.quantity,
        SPO.unitid as itemunitid,
        REF.refname,
        SPO.rate as unitprice, 
        SPO.taxid,
        SPO.discountpercent as itemdiscount,
        SPO.discountamt,
        SPO.netamount,
		SPO.taxpercent,
	    SPO.cgstpercent,
        SPO.cgstamount,
        SPO.sgstpercent,
        SPO.sgstamount,
        SPO.igstpercent,
		SPO.igstamount,
        SPO.utgstpercent,
        SPO.utgstamount,
        SPO.sgstid,
	    SPO.cgstid,
	    SPO.igstid,
	    SPO.utgstid,
        G.id as grpoid
	
    FROM
		servicepodetail SPO
        LEFT JOIN item I ON I.id = SPO.itemid
        LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
		LEFT JOIN `reference` REF ON REF.id = SPO.unitid
		LEFT JOIN grpo G ON G.purchaseorderid = SPO.servicepoid
WHERE
		SPO.servicepoid = p_servicepoid
GROUP BY SPO.id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_servicepodetail_select`( 
	IN p_servicepoid INT,
	IN p_companyid INT
)
BEGIN
    
    SELECT
		SPO.id as purchaseorderdetailid,
        SPO.servicepoid as purchaseorderid,
        SPO.servicename,
        SPO.description,
        SPO.itemid,
        SPO.itemname,
        I.itemcode,
        IG.groupname,
        IG.id as itemgroupid,
        SPO.quantity,
        0 as freequantity,
        SPO.unitid as itemunitid,
        REF.refname as itemunitname,
        SPO.rate as unitprice, 
        SPO.taxid,
        SP.subject,
        SPO.discountpercent as itemdiscount,
        SPO.discountamt,
        SPO.netamount,
		SPO.taxpercent,
	    SPO.cgstpercent,
        SPO.cgstamount,
        SPO.sgstpercent,
        SPO.sgstamount,
        SPO.igstpercent,
		SPO.igstamount,
        SPO.utgstpercent,
        SPO.utgstamount,
        SPO.sgstid,
	    SPO.cgstid,
	    SPO.igstid,
	    SPO.utgstid,
        G.id as grpoid
	
    FROM
		servicepodetail SPO
        LEFT JOIN servicepo SP ON SP.id = SPO.servicepoid
        LEFT JOIN item I ON I.id = SPO.itemid
        LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
		LEFT JOIN `reference` REF ON REF.id = SPO.unitid
		LEFT JOIN grpo G ON G.purchaseorderid = SPO.servicepoid
	WHERE
		SPO.servicepoid = p_servicepoid 
        AND SPO.companyid = p_companyid;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_servicepolist_search`(
	IN p_from_date date,
	IN p_to_date date
)
BEGIN
    
    SELECT
		SP.id,
        partnerid,
        DATE_FORMAT(servicedate,'%d/%m/%Y') as servicedate,
        SP.subject,
        nettotal,
        discountper,
        othercharges,
        roundoff,
        p.partyname,
        G.id as grposevicepoid,
        grandtotal,
		transactiontypeid,
        deliveryfromaddressid,
        deliverytowarehouseid,
		deliveryfromstatecode,
        deliverytostatecode,
        PA.address as delfromfulladdress,
        WH1.address as warehousefulladdress,
        ST.isunionterritory as warehouseisunionterritory,
        ST1.isunionterritory as deliveryfromisunionterritory,
        SP.servicepono
        
	
    FROM
		servicepo SP
	
    LEFT JOIN party p ON  SP.partnerid = p.id
    LEFT JOIN grpo G ON SP.id = G.servicepoid
    LEFT JOIN partyaddress PA ON SP.deliveryfromaddressid = PA.id
	LEFT JOIN warehouse WH1 ON SP.deliverytowarehouseid = WH1.id
    LEFT JOIN `state` ST ON WH1.stateid = ST.id
	LEFT JOIN `state` ST1 ON PA.stateid = ST1.id
	WHERE
		(SP.servicedate BETWEEN p_from_date AND p_to_date)
        
	ORDER BY id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_servicepo_save`(
IN p_id INT(11),
IN p_servicepono VARCHAR(30),
IN p_partnerid INT(11),
IN p_servicedate DATE,
IN p_subject VARCHAR(200),
IN p_nettotal DECIMAL(12,3),
IN p_discountper DECIMAL(12,3),
IN p_othercharges DECIMAL(12,3),
IN p_roundoff DECIMAL(12,3),
IN p_grandtotal DECIMAL(12,3),
IN p_transactionTypeid INT,
IN p_deliveryfromaddressid INT,
IN p_deliverytowarehouseid INT,
IN p_deliveryfromstatecode VARCHAR(200),
IN p_deliverytostatecode VARCHAR(200),
in p_companyid INT(11),
IN p_userid INT,
OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO servicepo 
				(servicepono, partnerid, servicedate, subject, nettotal, discountper, 
                othercharges, roundoff, grandtotal, transactiontypeid,deliveryfromaddressid,
                deliverytowarehouseid,deliveryfromstatecode,deliverytostatecode,companyid)
			VALUES 
				(p_servicepono, p_partnerid, p_servicedate, p_subject, p_nettotal, p_discountper,
                p_othercharges, p_roundoff, p_grandtotal,p_transactiontypeid,p_deliveryfromaddressid,
                p_deliverytowarehouseid, p_deliveryfromstatecode,p_deliverytostatecode, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE servicepo
				SET servicepono = p_servicepono,
                partnerid = p_partnerid,
                servicedate= p_servicedate,
                subject = p_subject, 
                nettotal = p_nettotal,
                discountper = p_discountper, 
                othercharges = p_othercharges, 
                roundoff = p_roundoff,
                grandtotal = p_grandtotal,
				transactiontypeid=p_transactiontypeid,
                deliveryfromaddressid=p_deliveryfromaddressid,
                deliverytowarehouseid = p_deliverytowarehouseid,
                deliveryfromstatecode = p_deliveryfromstatecode,
                deliverytostatecode = p_deliverytostatecode,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'servicepo', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_servicepo_search`(

    IN p_companyid INT
)
BEGIN
    
    SELECT
		SP.id,
        partnerid,
        DATE_FORMAT(servicedate,'%d/%m/%Y') as servicedate,
        SP.subject,
        nettotal,
        discountper,
        othercharges,
        roundoff,
        p.partyname,
        G.id as grposevicepoid,
        grandtotal,
		transactiontypeid,
        deliveryfromaddressid,
        deliverytowarehouseid,
		deliveryfromstatecode,
        deliverytostatecode,
        PA.address as delfromfulladdress,
        WH1.address as warehousefulladdress,
        ST.isunionterritory as warehouseisunionterritory,
        ST1.isunionterritory as deliveryfromisunionterritory,
        SP.servicepono
        
	
    FROM
		servicepo SP
	
    LEFT JOIN party p ON  SP.partnerid = p.id
    LEFT JOIN grpo G ON SP.id = G.servicepoid
    LEFT JOIN partyaddress PA ON SP.deliveryfromaddressid = PA.id
	LEFT JOIN warehouse WH1 ON SP.deliverytowarehouseid = WH1.id
    LEFT JOIN `state` ST ON WH1.stateid = ST.id
	LEFT JOIN `state` ST1 ON PA.stateid = ST1.id
	WHERE
		SP.companyid = p_companyid
        
	ORDER BY id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_servicepo_select`(
  IN p_id INT,
  IN p_companyid INT
)
BEGIN
    
    SELECT
		id,
        partnerid,
        DATE_FORMAT(servicedate,'%d/%m/%Y') as servicedate,
        subject,
        nettotal,
        discountper,
        othercharges,
        roundoff,
        grandtotal
	
    FROM
		servicepo
	
	WHERE
		id = p_id AND
        companyid = p_companyid;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_servicepo_withoutgrpo_search`(
IN p_companyid INT
)
BEGIN
-- SET @outsidehatcherywharehouseid = null;
  -- select defaultoutsidehatcherywarehouseid  INTO @outsidehatcherywharehouseid from breedersetting ;
  
    SELECT
		SP.id,
        SP.partnerid,
        SP.servicepono,
        DATE_FORMAT(SP.servicedate,'%d/%m/%Y') as servicedate,
        SP.subject,
        SP.nettotal,
        SP.discountper,
        SP.othercharges,
        SP.roundoff,
        P.partyname as partnername,
        W.warehousename,
        SP.deliverytowarehouseid as towarehouseid,
        grandtotal
	
    FROM
		servicepo SP
	
	 INNER JOIN party P ON SP.partnerid = P.id
     LEFT JOIN grpo G ON G.servicepoid = SP.id
     LEFT JOIN warehouse W ON SP.deliverytowarehouseid = W.id
	WHERE
		SP.companyid = p_companyid
		and G.id is null
	ORDER BY SP.id DESC;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setterbatchforcurrentlocation_search`(
    IN p_companyid INT,
    IN p_locationid INT
)
BEGIN
    
    SELECT
		SB.id as settingno,
        DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
        SB.setterid,
        SB.setterslotid,
        S.settername,
        SS.slotname,
        SB.actualquantity as settingquantity,
        S.capacity,
        BB.id as breederbatchid,
        BB.batchname as breederbatchname,
        W.warehousename,
        L.locationname,
        SB.status,
        R.refname,
       -- HSD.sourceid
		DATE_FORMAT(DATE_ADD(SB.batchdate,INTERVAL 19 DAY),'%d/%m/%Y') as hatchingbatchdate
    FROM
		setterbatch SB
	
    LEFT JOIN setter S ON SB.setterid = S.id
    LEFT JOIN setterslots SS ON SB.setterslotid = SS.id
    LEFT JOIN breederbatch BB on SB.breederbatchid = BB.id
	LEFT JOIN warehouse W ON S.warehouseid = W.id
    LEFT JOIN location L ON S.locationid = L.id
    LEFT JOIN reference R ON SB.status = R.id
   -- LEFT JOIN hatcheryscheduledetail HSD ON SB.detailsid = HSD.id
        
	WHERE
		SB.companyid = p_companyid AND 
        SB.status = 282 AND
        S.locationid = p_locationid
        
	ORDER BY SB.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setterbatchlist_search`(
    IN p_from_date date,
	IN p_to_date date
)
BEGIN
    
    SELECT
		SB.id as settingno,
        SB.setterid,
        SB.setterslotid,
        L.id as locationid,
		L.locationname,
		BB.batchname as breederbatchname,
		S.settername,
        SS.slotname,
        DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
        SB.scheduleid,
        SB.status,
        R.refname,
        SB.itembatch
	
    FROM
		setterbatch SB
	
    LEFT JOIN setter S ON SB.setterid = S.id
    LEFT JOIN setterslots SS ON SB.setterslotid = SS.id
    LEFT JOIN breederbatch BB on SB.breederbatchid = BB.id
	LEFT JOIN location L ON S.locationid = L.id
    LEFT JOIN reference R ON R.id = SB.status    
        
	WHERE
		(SB.batchdate BETWEEN p_from_date AND p_to_date)
        
	ORDER BY
		SB.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setterbatch_delete`(
IN p_id INT
)
BEGIN
	DELETE From setterbatch WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setterbatch_save`(
	IN p_id INT,
	IN p_setterid INT,
    IN p_setterslotid INT,
	IN p_scheduleid INT,
	IN p_detailsid INT,
	IN p_breederbatchid INT,
	IN p_sourceid INT,
	IN p_availablequantity INT,
	IN p_crackedquantity INT,
	IN p_actualquantity INT,
	IN p_batchdate date,
	IN p_partycode INT,
	IN p_status varchar(45),
	IN p_completiondate date,
    IN p_requestid INT,
	IN p_companyid INT,
	IN p_userid INT,
	OUT out_id INT
)
BEGIN
if(p_sourceid = 262) then
	select HSD.requestid,HSD.itemid,POD.unitprice ,I.itemunitid,I.itemname
		INTO @requestid,@defaulteggsitemid,@overheadcostperegg,@itemunitid,@eggsitemname
	 from hatcheryscheduledetail HSD 
		LEFT JOIN purchaseorder PO ON PO.purchaserequestid = HSD.requestid
		LEFT JOIN purchaseorderdetail POD ON POD.purchaseorderid = PO.id AND POD.itemid = HSD.itemid
		LEFT JOIN item I On I.id = HSD.itemid
	WHERE HSD.hatcheryscheduleid = p_scheduleid AND
		  HSD.setterid = p_setterid AND
		  HSD.setterslotid = p_setterslotid;

	-- Get hatchery setting default values
ELSE
	SELECT  @defaulteggsitemid:= defaulteggsitemid,
			@defaultcrackedeggsitemid := defaultcrackedeggsitemid,
			@defaulthatcherywhforeggs:= defaulthatcherywhforeggs,
            @grpowithoutinvoiceledgerid := grpowithoutinvoiceledgerid,
            @crackedeggscost:= crackedeggscost,
			@overheadcostperegg:= IFNULL(overheadcostperegg, 0),
            @eggsitemname:= I.itemname,
            @itemunitid := I.itemunitid,
            @WIPeggledgerid := WIPeggledgerid
	FROM
		hatcherysettings HS
        
        LEFT JOIN item I ON I.id = @defaulteggsitemid
    WHERE 
		HS.companyid = p_companyid;
     END IF;  
     
     SELECT  
			@defaultcrackedeggsitemid := defaultcrackedeggsitemid,
			@defaulthatcherywhforeggs:= defaulthatcherywhforeggs,
            @grpowithoutinvoiceledgerid := grpowithoutinvoiceledgerid,
            @crackedeggscost:= crackedeggscost,
            @WIPeggledgerid := WIPeggledgerid
	FROM
		hatcherysettings HS
    WHERE 
		HS.companyid = p_companyid;
        
	SET @warehouseid = null;
    SET @warehousebinid = null;
    SELECT warehouseid, warehousebinid
    INTO @warehouseid, @warehousebinid
    FROM setter
    WHERE id = p_setterid;
        
    SET @sourcedeliveryid = null;    
    SET @itembatch = null;
        
    -- Do material transfer if source is own i.e. 261
    IF(p_sourceid = 261)THEN
        
		IF EXISTS(SELECT SUM(itemvalue)/SUM(quantity) as unitcost FROM materialmovement WHERE itemid = @defaulteggsitemid) THEN
			SELECT (SUM(itemvalue)/SUM(quantity)) INTO @unitprice FROM materialmovement WHERE itemid = @defaulteggsitemid;
		ELSE
			SELECT unitcost INTO @unitprice FROM item WHERE id = @defaulteggsitemid;
		END IF;
		
		SET @out_transferid = null;
		SET @out_transferdetailid = null;
		
		CALL spc_materialtransfer_save(
			NULL, 501, 502, 582, p_batchdate, p_batchdate,NULL, NULL, NULL,
			 621, p_breederbatchid, NULL, p_requestid, p_companyid, p_userid, @out_transferid
		);
		
		CALL spc_materialtransferdetail_save(
			NULL, @out_transferid,
			@warehouseid, @warehousebinid,
			@defaulteggsitemid, @eggsitemname,
			p_availablequantity, p_availablequantity, 
			@itemunitid, null, p_userid, p_companyid, @out_transferdetailid
		);
		
        SELECT @out_transferid INTO @sourcedeliveryid;
        
        SELECT itembatch INTO @itembatch 
        FROM materialmovement
        WHERE transactiontypeid = 682
        AND towarehousebinid = @warehousebinid
        AND transactionid = @out_transferid;
	-- Do GRPO if source is purchase i.e. 262    
		
	ELSEIF(p_sourceid = 262) THEN
		
		SET @vendorid = NULL;
		SET @poid = NULL;
		SET @podate = NULL;
		SET @discount = NULL;
		SELECT id, vendorid, podate, discount INTO @poid, @vendorid, @podate, @discount 
		FROM purchaseorder WHERE FIND_IN_SET(p_requestid, purchaserequestid) LIMIT 1;
		
		SET @grposeries = null;
		CALL spc_financialyeardocseries_newseries(
			'GRN', p_companyid, @grposeries
		);
		CALL spc_grpo_save(
			NULL, (SELECT @grposeries), p_batchdate, @vendorid,
			NULL, p_batchdate, @poid, @podate,
			NULL, NULL, NULL, NULL, @warehouseid, 
			@warehousebinid, @discount, 642, NULL, 0,
			NULL, p_companyid, p_userid, @grpoid 
		);
		
		SET @podetailid = NULL;
		SET @itemdiscount = NULL;
		SET @taxpercent = NULL;
		SET @taxid = NULL;
		SET @quantity = 0;
		SET @freequantitypercent = 0;
		SET @pendinggrpoquantity = 0;
		
		SELECT id, unitprice, itemdiscount, taxpercent, taxid, quantity, freequantitypercent, pendinggrpoquantity
		INTO @podetailid, @unitprice, @itemdiscount, @taxpercent, @taxid, @quantity, @freequantitypercent, @pendinggrpoquantity
		FROM purchaseorderdetail WHERE purchaseorderid = @poid AND itemid = @defaulteggsitemid LIMIT 1;
		
		-- calculate free quantity
		SET @freeqty = 0;
		SELECT (@quantity * @freequantitypercent)/100 INTO @freeqty;
		
		CALL spc_grpodetail_save(
			NULL, @grpoid, @podetailid, 
			@defaulteggsitemid, @eggsitemname, p_availablequantity,
			@freeqty, @itemunitid, @unitprice,
			@itemdiscount, @taxpercent, @taxid,
			NULL, p_companyid, p_userid, @grpodetailid
		);
		
		-- update pending qty in purchaseorder detail table
		UPDATE purchaseorderdetail
		SET pendinggrpoquantity = @pendinggrpoquantity - (p_availablequantity-@freeqty)
		WHERE id = @podetailid
		AND itemid = @defaulteggsitemid;
		
		-- SAVE GRPO JE
		CALL spc_savegrpo_je(@grpoid, p_companyid, p_userid);
		
		SELECT @grpoid INTO @sourcedeliveryid;
		
        SELECT itembatch INTO @itembatch
        FROM grpodetail
        WHERE id = @grpodetailid
        AND itemid = @defaulteggsitemid;
		-- Save purchase invoice
		SET @nettotal = p_availablequantity * @unitprice;
		SET @taxtotal = ((p_availablequantity * @unitprice) * @taxpercent) / 100;
		SET @subtotal = ((p_availablequantity * @unitprice) * @discount) / 100;
		SET @purchaseinvoiceid = null;
		
        CALL spc_purchaseinvoice_bygrpoid(
			null, p_batchdate, p_batchdate, p_batchdate,
			@vendorid, @grpoid, @poid, "Hatchery eggs received",
			null, p_batchdate, (SELECT creditperiod FROM party WHERE id = @vendorid),
			@nettotal, @discount, @taxtotal, null, "Hatchery eggs received",
			1562, p_companyid, p_userid, @purchaseinvoiceid
		);
	END IF;
        
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		-- JE for stock egg to WIP egg
        
        SET @jeid = null;
		CALL spc_journalentry_save(
			NULL,
			NULL,
			1297,
			NULL,
			p_batchdate,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
            NULL,
            722,
			NULL,
			'Transfer eggs to WIP eggs JE',
			NULL,
			NULL,
			NULL,
			@sourcedeliveryid,
			'Transfer eggs to WIP eggs JE',
			p_companyid,
			p_userid,
			@jeid
		);
        
        -- if source is own = 261
        IF(p_sourceid = 261) THEN
			-- credit stock eggs item - ledger
			SET @jedetailid1 = null;
			CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				(SELECT ledgerid FROM item WHERE id = @defaulteggsitemid),
                0,
                NULL,
                p_breederbatchid,
				NULL,
                NULL,
                NULL,
				NULL,
                NULL,
				0,
				(p_availablequantity * @overheadcostperegg),
				NULL,
				NULL,
				NULL,
				@defaulteggsitemid,
				NULL,
				'Setter batch',
				p_companyid,
				p_userid,
				@jedetailid1
			 );
			 
			 -- Debit to WIP egg - Ledger
			
			 SET @jedetailid = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				@WIPeggledgerid,
                0,
                NULL,
                p_breederbatchid,
				NULL,
                NULL,
                NULL,
				NULL,
                NULL,
				(p_availablequantity * @overheadcostperegg),
				0,
				NULL,
				NULL,
				NULL,
				@defaulteggsitemid,
				NULL,
				'Setter batch',
				p_companyid,
				p_userid,
				@jedetailid
			 );
		END IF;
        
        -- if source is purchase = 262
        IF(p_sourceid = 262) THEN
			-- credit goods receipt but not invoice item - ledger
			SET @jedetailid1 = null;
			CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				@grpowithoutinvoiceledgerid,
                0,
                NULL,
                p_breederbatchid,
				NULL,
                NULL,
                NULL,
				NULL,
                NULL,
				0,
				(p_availablequantity * @overheadcostperegg),
				NULL,
				NULL,
				NULL,
				@defaulteggsitemid,
				NULL,
				'Setter batch',
				p_companyid,
				p_userid,
				@jedetailid1
			 );
			 
			 -- Debit to WIP egg - Ledger
			
			 SET @jedetailid = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				@WIPeggledgerid,
                0,
                NULL,
                p_breederbatchid,
				NULL,
                NULL,
                NULL,
				NULL,
                NULL,
				(p_availablequantity * @overheadcostperegg),
				0,
				NULL,
				NULL,
				NULL,
				@defaulteggsitemid,
				NULL,
				'Setter batch',
				p_companyid,
				p_userid,
				@jedetailid
			 );
		END IF;
        
        
		-- Create setter batch
		INSERT INTO setterbatch
				(setterid, setterslotid, scheduleid, detailsid, breederbatchid , 
                sourceid, sourcedeliveryid, availablequantity, 
                crackedquantity, actualquantity, batchdate, partycode, status, completiondate , itembatch, companyid)
			VALUES  
				(p_setterid, p_setterslotid, p_scheduleid, p_detailsid, p_breederbatchid , 
                p_sourceid, @sourcedeliveryid, p_availablequantity, 
                p_crackedquantity, p_actualquantity, p_batchdate, p_partycode, 282, p_completiondate ,@itembatch, p_companyid);
                
	    SET @action = 'INSERT';
      
       IF(LAST_INSERT_ID() > 0) THEN
		 UPDATE hatcheryscheduledetail
         SET statusid = 244
         WHERE id = p_detailsid;
         
		 -- update setterslot status as batch started
		 UPDATE setterslots 
		 SET statusid = 6193
		 WHERE id = p_setterslotid;
       END IF;
      
	ELSE
    
		UPDATE setterbatch
			SET 
				setterid	=	p_setterid,
                setterslotid = p_setterslotid,
				scheduleid	=	p_scheduleid,
                detailsid = p_detailsid, 
                breederbatchid = p_breederbatchid,
                sourceid = p_sourceid, 
                sourcedeliveryid = @sourcedeliveryid,
                availablequantity = p_availablequantity,
                crackedquantity = p_crackedquantity,
                actualquantity = p_actualquantity,
                batchdate = p_batchdate,
                companyid = p_companyid,
                partycode = p_partycode,
                status = p_status,
                completiondate = p_completiondate,
				itembatch = @itembatch,
                requestid = p_requestid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
     
        -- JE for WIP egg ledger to cracked egg ledger
        SET @jeid1 = null;
		CALL spc_journalentry_save(
			NULL,
			NULL,
			1297,
			NULL,
			p_batchdate,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
            NULL,
            722,
			NULL,
			'Transfer WIP eggs to cracked eggs JE',
			NULL,
			NULL,
			NULL,
			out_id,
			'Transfer WIP eggs to cracked eggs JE',
			p_companyid,
			p_userid,
			@jeid1
		);
        
        -- credit WIP eggs item - ledger
        SET @jedetailid2 = null;
        CALL spc_journalentrydetail_save( 
			NULL,
			@jeid1,
			@WIPeggledgerid,
            0,
            NULL,
            out_id,
			NULL,
            NULL,
            NULL,
            NULL,
            NULL,
			0,
			(p_crackedquantity * @overheadcostperegg),
			NULL,
			NULL,
			NULL,
			@defaulteggsitemid,
			NULL,
			'Setter batch',
			p_companyid,
			p_userid,
			@jedetailid2
		 );
		 
		 -- Debit to cracked egg - Ledger
		
		 SET @jedetailid3 = null;
		 CALL spc_journalentrydetail_save( 
			NULL,
			@jeid1,
            (SELECT ledgerid FROM item WHERE id = @defaultcrackedeggsitemid LIMIT 1),
            0,
            NULL,
            out_id,
            NULL,
			NULL,
            NULL,
			NULL,
			NULL,
			(p_crackedquantity * @overheadcostperegg),
			0,
			NULL,
			NULL,
			NULL,
			@defaulteggsitemid,
			NULL,
			'Setter batch',
			p_companyid,
			p_userid,
			@jedetailid3
		 );
        
        
    
    -- add setter batch reference in material transfer
    
    IF p_sourceid = 261 THEN -- 261 is for 'OWN'
    
		UPDATE materialtransfer SET tobatchid = out_id WHERE id = @sourcedeliveryid;
    
    -- ELSE 
    
    END IF;
		
        -- UPDATE materialreceipt SET batchid = out_id WHERE id = @out_recid;
    
    -- Update the new setterbatchh id as tobatchid in material request table
    
		UPDATE materialrequest SET tobatchid = out_id WHERE id = p_requestid;
    
    -- Material issue entry on create Setter batch for cracked eggs
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
    -- We are using breeder batch as a batch in material issue
		SET @out_issueid = NULL;
		CALL spc_materialissue_save(
			NULL, now(), 381, p_breederbatchid, 362, NULL,
			p_userid, (SELECT warehouseid FROM setter WHERE id = p_setterid LIMIT 1),
            (SELECT warehousebinid FROM setter WHERE id = p_setterid LIMIT 1),
            p_userid, NOW(),
			p_companyid, p_userid, @out_issueid
		);
			
		SET @out_issuedetailid = NULL;
		CALL spc_materialissuedetail_save(
			NULL, @out_issueid, @defaulteggsitemid, @eggsitemname,
			p_crackedquantity, @crackedeggscost, 
			(p_crackedquantity * @crackedeggscost),
			@itemunitid, @itembatch,
			p_companyid, p_userid, @out_issuedetailid
		);
        
        

		-- material movement entry for material issue
		SET @out_movid4 = NULL;
		CALL spc_materialmovement_save(
			NULL, @defaulteggsitemid, @itembatch, 683,
			@out_issueid, p_batchdate, p_crackedquantity,
			(SELECT warehouseid FROM setter WHERE id = p_setterid LIMIT 1), 
            (SELECT warehousebinid FROM setter WHERE id = p_setterid LIMIT 1),
            @defaulthatcherywhforeggs, 
            (SELECT id FROM warehousebin WHERE warehouseid = @defaulthatcherywhforeggs AND isdefault = 1 LIMIT 1),
			(p_crackedquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid LIMIT 1)),
			p_companyid, p_userid, @out_movid4
		);
    
    
    
		-- Make material receipt entry for cracked eggs
			SET @out_recid = NULL;
			CALL spc_materialreceipt_save(
				NULL, now(), 342, out_id, 322, NULL,
				p_userid, p_userid, p_batchdate, p_companyid,
				p_userid, @out_recid
			);
        
			-- Material receipt detail entry
			SET @out_recdetailid = NULL;
			CALL spc_materialreceiptdetail_save(
				NULL, @out_recid, @defaulteggsitemid, (SELECT itemname FROM item WHERE id = @defaulteggsitemid LIMIT 1), 
				p_crackedquantity, (SELECT unitcost FROM item WHERE id = @defaulteggsitemid LIMIT 1), 
				(p_crackedquantity * @crackedeggscost),
				(SELECT itemunitid FROM item WHERE id = @defaulteggsitemid LIMIT 1), @itembatch,
				@defaulthatcherywhforeggs,
                (SELECT id FROM warehousebin WHERE warehouseid = @defaulthatcherywhforeggs AND isdefault = 1 LIMIT 1),
                p_companyid, p_userid, NULL, @out_recdetailid
			);
              
			-- Make material movement entry for material receipt
			SET @out_movid5 = NULL;
			CALL spc_materialmovement_save(
				NULL, @defaulteggsitemid, @itembatch, 684,
				@out_recid, p_batchdate, p_crackedquantity,
				(SELECT warehouseid FROM setter WHERE id = p_setterid LIMIT 1), 
				(SELECT warehousebinid FROM setter WHERE id = p_setterid LIMIT 1),
                @defaulthatcherywhforeggs,
                (SELECT id FROM warehousebin WHERE warehouseid = @defaulthatcherywhforeggs AND isdefault = 1 LIMIT 1),
				(p_crackedquantity * @crackedeggscost),
				p_companyid, p_userid, @out_movid5
			);
    
    END IF;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'setterbatch', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setterbatch_save1`(
	IN p_id INT,
	IN p_setterid INT,
	IN p_scheduleid INT,
	IN p_detailsid INT,
	IN p_breederbatchid INT,
	IN p_sourceid INT,
	IN p_sourcedeliveryid INT,
	IN p_availablequantity INT,
	IN p_crackedquantity INT,
	IN p_actualquantity INT,
	IN p_batchdate date,
	IN p_partycode INT,
	IN p_status varchar(45),
	IN p_completiondate date,
    IN p_itembatch VARCHAR(100),
    IN p_requestid INT,
	IN p_companyid INT,
	IN p_userid INT,
	OUT out_id INT
)
BEGIN

	-- Get hatchery setting default values
    
	SELECT  @defaulteggsitemid:= defaulteggsitemid,
			@defaulthatcherywhforeggs:= defaulthatcherywhforeggs,
            @crackedeggscost:= crackedeggscost,
			@overheadcostperegg:= IFNULL(overheadcostperegg, 0),
            @eggsitemname:= I.itemname,
            @itemunitid= I.itemunitid
	FROM
		hatcherysettings HS
        
        LEFT JOIN item I ON I.id = @defaulteggsitemid
    WHERE 
		HS.companyid = p_companyid;
        
        
	SET @action = null;
    
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
    
		-- Do material transfer from cold room(default hatchery warehouse) to particular setter warehouse
        SET @out_transferid = NULL;
		CALL spc_materialtransfer_save(
			NULL, 502, 502, 582, p_batchdate, p_batchdate,NULL,
			@defaulthatcherywhforeggs, (SELECT warehouseid FROM setter WHERE id = p_setterid), 621, p_breederbatchid,
			NULL, NULL, p_companyid, p_userid, @out_transferid
		);
        
		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, @out_transferid, @defaulteggsitemid, @eggsitemname,
			p_availablequantity, p_availablequantity, 
			(SELECT refname FROM reference WHERE id = @itemunitid),
			p_itembatch, p_userid, p_companyid, @out_transferdetailid
		);
        
        -- Do material movement entry for material transfer
        SET @out_movid1 = NULL;
		CALL spc_materialmovement_save(
			NULL, @defaulteggsitemid, p_itembatch, 682,
			@out_transferid, p_batchdate, p_availablequantity,
			@defaulthatcherywhforeggs, (SELECT warehouseid FROM setter WHERE id = p_setterid LIMIT 1),
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid LIMIT 1)),
			p_companyid, p_userid, @out_movid1
		);
        
        
        -- Material Issue from cold room(default hatchery warehouse)
		/*SET @out_issueid1 = NULL;
		CALL spc_materialissue_save(
			NULL, p_batchdate, 382, p_breederbatchid, 362, NULL,
			p_userid, @defaulthatcherywhforeggs, p_userid, p_batchdate,
			p_companyid, p_userid, @out_issueid1
		);
                            
		-- Itembatch details
		SET @out_issuedetailid1 = NULL;
		CALL spc_materialissuedetail_save(
			NULL, @out_issueid1, @defaulteggsitemid, (SELECT itemname FROM item WHERE id = @defaulteggsitemid),
			p_actualquantity, (SELECT unitcost FROM item WHERE id = @defaulteggsitemid), 
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			NULL, p_itembatch,
			p_companyid, p_userid, @out_issuedetailid1
		);

		-- material movement entry for material issue
		SET @out_movid2 = NULL;
		CALL spc_materialmovement_save(
			NULL, @defaulteggsitemid, p_itembatch, 683,
			@out_issueid1, p_batchdate, p_actualquantity,
			@defaulthatcherywhforeggs, NULL,
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			p_companyid, p_userid, @out_movid2
		);
        
        -- Make material receipt entry for Transfered eggs
		SET @out_recid = NULL;
		CALL spc_materialreceipt_save(
			NULL, p_batchdate, 342, NULL, 322, NULL,
			p_userid, p_userid, p_batchdate, p_companyid,
			p_userid, @out_recid
		);
        
        SET @out_recdetailid = NULL;
        CALL spc_materialreceiptdetail_save(
			NULL, @out_recid, @defaulteggsitemid, (SELECT itemname FROM item WHERE id = @defaulteggsitemid), 
			p_actualquantity, (SELECT unitcost FROM item WHERE id = @defaulteggsitemid), 
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			(SELECT itemunitid FROM item WHERE id = @defaulteggsitemid),
            (SELECT batchname FROM breederbatch WHERE id = p_breederbatchid),
			(SELECT warehouseid FROM setter WHERE id = p_setterid), p_companyid,
			p_userid, NULL, @out_recdetailid
		);
        
        -- material movement entry for material receipt
		SET @out_movid3 = NULL;
		CALL spc_materialmovement_save(
			NULL, @defaulteggsitemid, NULL, 684,
			@out_recid, p_batchdate, p_actualquantity,
			@defaulthatcherywhforeggs, (SELECT warehouseid FROM setter WHERE id = p_setterid),
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			p_companyid, p_userid, @out_movid3
		);*/
	
		-- Create setter batch
		INSERT INTO setterbatch
				(setterid, scheduleid, detailsid, breederbatchid , 
                sourceid, sourcedeliveryid, availablequantity, 
                crackedquantity, actualquantity, batchdate, partycode, status, completiondate , itembatch, companyid)
			VALUES  
				(p_setterid, p_scheduleid, p_detailsid, p_breederbatchid , 
                p_sourceid, p_sourcedeliveryid, p_availablequantity, 
                p_crackedquantity, p_actualquantity, p_batchdate, p_partycode, 282, p_completiondate ,p_itembatch, p_companyid);
                
	    SET @action = 'INSERT';
      
       IF(LAST_INSERT_ID() > 0) THEN
		 UPDATE hatcheryscheduledetail
         SET statusid = 244
         WHERE id = p_detailsid;
       END IF;
      
	ELSE
    
		UPDATE setterbatch
			SET 
				setterid	=	p_setterid,
				scheduleid	=	p_scheduleid,
                detailsid = p_detailsid, 
                breederbatchid = p_breederbatchid,
                sourceid = p_sourceid, 
                sourcedeliveryid = p_sourcedeliveryid,
                availablequantity = p_availablequantity,
                crackedquantity = p_crackedquantity,
                actualquantity = p_actualquantity,
                batchdate = p_batchdate,
                companyid = p_companyid,
                partycode = p_partycode,
                status = p_status,
                completiondate = p_completiondate,
				itembatch = p_itembatch,
                requestid = p_requestid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- add setter batch reference in material transfer
    
    IF p_sourceid = 261 THEN -- 261 is for 'OWN'
    
		UPDATE materialtransfer SET tobatchid = out_id WHERE id = p_sourcedeliveryid;
    
    -- ELSE 
    
    END IF;
		
        UPDATE materialreceipt SET batchid = out_id WHERE id = @out_recid;
    
    -- Update the new setterbatchh id as tobatchid in material request table
    
		UPDATE materialrequest SET tobatchid = out_id WHERE id = p_requestid;
    
    -- Material issue entry on create Setter batch for cracked eggs
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
    -- We are using breeder batch as a batch in material issue
		SET @out_issueid = NULL;
		CALL spc_materialissue_save(
			NULL, now(), 381, p_breederbatchid, 362, NULL,
			p_userid, @defaulthatcherywhforeggs, p_userid, NOW(),
			p_companyid, p_userid, @out_issueid
		);
			
		SET @out_issuedetailid = NULL;
		CALL spc_materialissuedetail_save(
			NULL, @out_issueid, @defaulteggsitemid, @eggsitemname,
			p_crackedquantity, (SELECT unitcost FROM item WHERE id = @defaulteggsitemid), 
			((p_crackedquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid))),
			@itemunitid, p_itembatch,
			p_companyid, p_userid, @out_issuedetailid
		);
        
        

		-- material movement entry for material issue
		SET @out_movid4 = NULL;
		CALL spc_materialmovement_save(
			NULL, @defaulteggsitemid, p_itembatch, 683,
			@out_issueid, p_batchdate, p_crackedquantity,
			@defaulthatcherywhforeggs, NULL,
			(p_crackedquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			p_companyid, p_userid, @out_movid4
		);
    
    
    
		-- Make material receipt entry for cracked eggs
			SET @out_recid = NULL;
			CALL spc_materialreceipt_save(
				NULL, now(), 342, out_id, 322, NULL,
				p_userid, p_userid, p_batchdate, p_companyid,
				p_userid, @out_recid
			);
        
			-- Material receipt detail entry
			SET @out_recdetailid = NULL;
			CALL spc_materialreceiptdetail_save(
				NULL, @out_recid, @defaulteggsitemid, (SELECT itemname FROM item WHERE id = @defaulteggsitemid), 
				p_crackedquantity, (SELECT unitcost FROM item WHERE id = @defaulteggsitemid), 
				(p_crackedquantity * @crackedeggscost),
				(SELECT itemunitid FROM item WHERE id = @defaulteggsitemid), p_itembatch,
				(SELECT warehouseid FROM setter WHERE id = p_setterid), p_companyid,
				p_userid, NULL, @out_recdetailid
			);
              
			-- Make material movement entry for material receipt
			SET @out_movid5 = NULL;
			CALL spc_materialmovement_save(
				NULL, @defaulteggsitemid, p_itembatch, 684,
				@out_recid, p_batchdate, p_crackedquantity,
				@defaulthatcherywhforeggs, (SELECT warehouseid FROM setter WHERE id = p_setterid),
				(p_crackedquantity * @crackedeggscost),
				p_companyid, p_userid, @out_movid5
			);
    
    END IF;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'setterbatch', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setterbatch_save_fromhatcheryopening`(
	IN p_id INT,
	IN p_setterid INT,
	IN p_scheduleid INT,
	IN p_detailsid INT,
	IN p_breederbatchid INT,
	IN p_sourceid INT,
	IN p_sourcedeliveryid INT,
	IN p_availablequantity INT,
	IN p_crackedquantity INT,
	IN p_actualquantity INT,
	IN p_setterbatchdate date,
	IN p_partycode INT, 
	IN p_status varchar(45),
    IN p_itembatch VARCHAR(100),
    IN p_requestid INT,
    IN p_itemid INT,
    IN p_crackedeggscost DECIMAL(15,3),
    IN p_hatchingeggscost DECIMAL(15,3),
    IN p_hatchingwhs INT,
    IN p_hatchingopeningid INT,
    IN p_setteropeningid INT,
	IN p_companyid INT,
	IN p_userid INT,
    OUT out_id INT
)
BEGIN

	-- Get hatchery setting default values
    SET @crackedeggscost= p_crackedeggscost;
    SET @overheadcostperegg = p_hatchingeggscost;
    SET @defaulthatcherywhforeggs = p_hatchingwhs;
    SELECT I.itemname,I.id,I.itemunitid INTO  @eggsitemname,@defaulteggsitemid,@itemunitid 
		FROM item I 
        WHERE I.id = p_itemid;
	SELECT 
			@defaultcrackedeggsitemid := defaultcrackedeggsitemid,
            @grpowithoutinvoiceledgerid := grpowithoutinvoiceledgerid,
            @WIPeggledgerid := WIPeggledgerid
	FROM
		hatcherysettings HS
    WHERE 
		HS.companyid = p_companyid;
        
        
	SET @action = null;
    
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		-- JE for stock egg to WIP egg
        
        SET @jeid = null;
		CALL spc_journalentry_save(
			NULL,
			NULL,
			1299,
			NULL,
			p_setterbatchdate,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
            NULL,
            722,
			NULL,
			'Transfer eggs to WIP eggs JE',
			NULL,
			NULL,
			NULL,
			p_sourcedeliveryid,
			'Transfer eggs to WIP eggs JE',
			p_companyid,
			p_userid,
			@jeid
		);
        
        -- if source is own = 261
        IF(p_sourceid = 261) THEN
			-- credit stock eggs item - ledger
			SET @jedetailid1 = null;
			CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				(SELECT ledgerid FROM item WHERE id = @defaulteggsitemid),
                0,
                NULL,
                p_breederbatchid,
				NULL,
                NULL,
                NULL,
				NULL,
                NULL,
				0,
				(p_availablequantity * @overheadcostperegg),
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Setter batch',
				p_companyid,
				p_userid,
				@jedetailid1
			 );
			 
			 -- Debit to WIP egg - Ledger
			
			 SET @jedetailid = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				@WIPeggledgerid,
                0,
                NULL,
                p_breederbatchid,
				NULL,
                NULL,
                NULL,
				NULL,
                NULL,
				(p_availablequantity * @overheadcostperegg),
				0,
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Setter batch',
				p_companyid,
				p_userid,
				@jedetailid
			 );
		END IF;
        
        -- if source is purchase = 262
        IF(p_sourceid = 262) THEN
			-- credit goods receipt but not invoice item - ledger
			SET @jedetailid1 = null;
			CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				@grpowithoutinvoiceledgerid,
                0,
                NULL,
                p_breederbatchid,
				NULL,
                NULL,
                NULL,
				NULL,
                NULL,
				0,
				(p_availablequantity * @overheadcostperegg),
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Setter batch',
				p_companyid,
				p_userid,
				@jedetailid1
			 );
			 
			 -- Debit to WIP egg - Ledger
			
			 SET @jedetailid = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				@WIPeggledgerid,
                0,
                NULL,
                p_breederbatchid,
				NULL,
                NULL,
                NULL,
				NULL,
                NULL,
				(p_availablequantity * @overheadcostperegg),
				0,
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Setter batch',
				p_companyid,
				p_userid,
				@jedetailid
			 );
		END IF;
        
        
		-- Create setter batch
		INSERT INTO setterbatch
				(setterid, scheduleid, detailsid, breederbatchid , 
                sourceid, sourcedeliveryid, availablequantity, 
                crackedquantity, actualquantity, batchdate, partycode, status, completiondate , itembatch, companyid)
			VALUES  
				(p_setterid, p_scheduleid, p_detailsid, p_breederbatchid , 
                p_sourceid, p_sourcedeliveryid, p_availablequantity, 
                p_crackedquantity, p_actualquantity, p_setterbatchdate, p_partycode, 282, p_setterbatchdate ,p_itembatch, p_companyid);
                
	    SET @action = 'INSERT';
      
	ELSE
    
		UPDATE setterbatch
			SET 
				setterid	=	p_setterid,
				scheduleid	=	p_scheduleid,
                detailsid = p_detailsid, 
                breederbatchid = p_breederbatchid,
                sourceid = p_sourceid, 
                sourcedeliveryid = p_sourcedeliveryid,
                availablequantity = p_availablequantity,
                crackedquantity = p_crackedquantity,
                actualquantity = p_actualquantity,
                batchdate = p_setterbatchdate,
                companyid = p_companyid,
                partycode = p_partycode,
                status = p_status,
                completiondate = p_setterbatchdate,
				itembatch = p_itembatch,
                requestid = p_requestid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    update hatchery_opening_setterdetail SET setterbatchid = out_id,
										   itembatch = p_itembatch
    WHERE id = p_setteropeningid AND hatcheryopeningid = p_hatchingopeningid;
    
    
        
        -- JE for WIP egg ledger to cracked egg ledger
        SET @jeid1 = null;
		CALL spc_journalentry_save(
			NULL,
			NULL,
			1297,
			NULL,
			p_setterbatchdate,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
            NULL,
            342,
			NULL,
			'opening setter cracked eggs JE',
			NULL,
			NULL,
			NULL,
			out_id,
			'opening setter cracked eggs JE',
			p_companyid,
			p_userid,
			@jeid1
		);
        
        -- credit WIP eggs item - ledger
        SET @jedetailid2 = null;
        CALL spc_journalentrydetail_save( 
			NULL,
			@jeid1,
			@WIPeggledgerid,
            0,
            NULL,
            p_sourcedeliveryid,
			NULL,
            NULL,
            NULL,
            NULL,
            NULL,
			0,
			(p_crackedquantity * @overheadcostperegg),
			NULL,
			NULL,
			NULL,
			@itemid,
			NULL,
			'Setter batch',
			p_companyid,
			p_userid,
			@jedetailid2
		 );
		 
		 -- Debit to cracked egg - Ledger
		
		 SET @jedetailid3 = null;
		 CALL spc_journalentrydetail_save( 
			NULL,
			@jeid1,
            (SELECT ledgerid FROM item WHERE id = @defaultcrackedeggsitemid LIMIT 1),
            0,
            NULL,
            out_id,
            NULL,
			NULL,
            NULL,
			NULL,
			NULL,
			(p_crackedquantity * @crackedeggscost),
			0,
			NULL,
			NULL,
			NULL,
			@itemid,
			NULL,
			'Setter batch',
			p_companyid,
			p_userid,
			@jedetailid3
		 );
        
        
    
    -- add setter batch reference in material transfer
    
    -- IF p_sourceid = 261 THEN -- 261 is for 'OWN'
    
		-- UPDATE materialtransfer SET tobatchid = out_id WHERE id = p_sourcedeliveryid;
    
    -- ELSE 
    
    -- END IF;
		
    
    -- Update the new setterbatchh id as tobatchid in material request table
    
	-- 	UPDATE materialrequest SET tobatchid = out_id WHERE id = p_requestid;
    
    -- Material issue entry on create Setter batch for cracked eggs
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
    -- We are using breeder batch as a batch in material issue
		SET @out_issueid = NULL;
		CALL spc_materialissue_save(
			NULL, p_setterbatchdate,382, p_breederbatchid, 362, NULL,
			p_userid, (SELECT warehouseid FROM setter WHERE id = p_setterid LIMIT 1),
            (SELECT warehousebinid FROM setter WHERE id = p_setterid LIMIT 1),
            p_userid, p_setterbatchdate,
			p_companyid, p_userid, @out_issueid
		);
			
		SET @out_issuedetailid = NULL;
		CALL spc_materialissuedetail_save(
			NULL, @out_issueid, @defaulteggsitemid, @eggsitemname,
			p_crackedquantity, @crackedeggscost, 
			(p_crackedquantity * @crackedeggscost),
			@itemunitid, p_itembatch,
			p_companyid, p_userid, @out_issuedetailid
		);
        
        

		-- material movement entry for material issue
		SET @out_movid4 = NULL;
		CALL spc_materialmovement_save(
			NULL, @defaulteggsitemid, p_itembatch, 683,
			@out_issueid, p_setterbatchdate, p_crackedquantity,
			(SELECT warehouseid FROM setter WHERE id = p_setterid LIMIT 1), 
            (SELECT warehousebinid FROM setter WHERE id = p_setterid LIMIT 1),
            @defaulthatcherywhforeggs, 
            (SELECT id FROM warehousebin WHERE warehouseid = @defaulthatcherywhforeggs AND isdefault = 1 LIMIT 1),
			(p_crackedquantity *@crackedeggscost),
			p_companyid, p_userid, @out_movid4
		);
    
    
    
		-- Make material receipt entry for cracked eggs
			SET @out_recid = NULL;
			CALL spc_materialreceipt_save(
				NULL, p_setterbatchdate, 342, out_id, 322, NULL,
				p_userid, p_userid, p_setterbatchdate, p_companyid,
				p_userid, @out_recid
			);
        
			-- Material receipt detail entry
			SET @out_recdetailid = NULL;
			CALL spc_materialreceiptdetail_save(
				NULL, @out_recid, @defaulteggsitemid, (SELECT itemname FROM item WHERE id = @defaulteggsitemid LIMIT 1), 
				p_crackedquantity, (SELECT unitcost FROM item WHERE id = @defaulteggsitemid LIMIT 1), 
				(p_crackedquantity * @crackedeggscost),
				(SELECT itemunitid FROM item WHERE id = @defaulteggsitemid LIMIT 1), p_itembatch,
				@defaulthatcherywhforeggs,
                (SELECT id FROM warehousebin WHERE warehouseid = @defaulthatcherywhforeggs AND isdefault = 1 LIMIT 1),
                p_companyid, p_userid, NULL, @out_recdetailid
			);
              
			-- Make material movement entry for material receipt
			SET @out_movid5 = NULL;
			CALL spc_materialmovement_save(
				NULL, @defaulteggsitemid, p_itembatch, 684,
				@out_recid, p_setterbatchdate, p_crackedquantity,
				(SELECT warehouseid FROM setter WHERE id = p_setterid LIMIT 1), 
				(SELECT warehousebinid FROM setter WHERE id = p_setterid LIMIT 1),
                @defaulthatcherywhforeggs,
                (SELECT id FROM warehousebin WHERE warehouseid = @defaulthatcherywhforeggs AND isdefault = 1 LIMIT 1),
				(p_crackedquantity * @crackedeggscost),
				p_companyid, p_userid, @out_movid5
			);
    
    END IF;
    
   -- record log
   -- CALL spc_commonlog_save(p_companyid, 'setterbatch', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setterbatch_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		SB.id as settingno,
        SB.setterid,
        SB.setterslotid,
        L.id as locationid,
		L.locationname,
		BB.batchname as breederbatchname,
		S.settername,
        SS.slotname,
        DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
        SB.scheduleid,
        SB.status,
        R.refname,
        SB.itembatch
	
    FROM
		setterbatch SB
	
    LEFT JOIN setter S ON SB.setterid = S.id
    LEFT JOIN setterslots SS ON SB.setterslotid = SS.id
    LEFT JOIN breederbatch BB on SB.breederbatchid = BB.id
	LEFT JOIN location L ON S.locationid = L.id
    LEFT JOIN reference R ON R.id = SB.status    
        
	WHERE
		SB.companyid = p_companyid
        
	ORDER BY
		SB.id DESC;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setterbatch_select`(
 IN p_id INT
)
BEGIN

	SELECT
		 SB.id as settingno,
         SB.setterid,
         S.settername,
         SS.slotname,
         SB.scheduleid,
         SB.detailsid,
         SB.breederbatchid,
         SB.sourceid,
         R.refname as source,
         SB.sourcedeliveryid,
         SB.availablequantity,
         SB.crackedquantity,
         SB.actualquantity,
         DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
         SB.partycode,
         DATE_FORMAT(SB.completiondate,'%d/%m/%Y') as completiondate,
         BB.batchname as breederbatchname,
         HSD.plannedquantity,
         SB.itembatch
         
FROM
		setterbatch SB
        LEFT JOIN setter S ON SB.setterid = S.id
        LEFT JOIN setterslots SS ON SB.setterslotid = SS.id
		LEFT JOIN reference R ON SB.sourceid = R.id
        LEFT JOIN hatcheryscheduledetail HSD ON SB.detailsid = HSD.id
        LEFT JOIN breederbatch BB on SB.breederbatchid = BB.id
        
	WHERE
		SB.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setterdailytransaction_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN
	DELETE FROM setterdailytransaction WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'setterdailytransaction', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setterdailytransaction_save`(
	IN p_id INT,
    IN p_setterbatchid INT,
    IN p_setterid INT,
    IN p_date DATE,
    IN p_time VARCHAR(50),
    IN p_temperature DECIMAL(18,3),
    IN p_humidity DECIMAL(18,3),
    IN p_rotationid INT,
    IN p_remark VARCHAR(500),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
	IF EXISTS(
            SELECT id from setterdailytransaction 
            where date > p_date AND setterbatchid = p_setterbatchid
			AND (
				  (NULLIF(p_id, 0) IS NULL)
				 -- OR 
				 -- (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id)
                )
            
            ) THEN  
            BEGIN
        
				SELECT -1 INTO out_id;
	
			 END;
            
	ELSEIF EXISTS(
            SELECT id from setterdailytransaction where date = p_date AND time = p_time  AND setterbatchid = p_setterbatchid
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN  BEGIN
        
				SELECT -2 INTO out_id;
	
			 END;
             
    ELSE 
    
       BEGIN
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO setterdailytransaction 
				(id, setterbatchid, setterid, date, time, temperature, humidity, rotationid, remark, companyid)
			VALUES 
				(p_id, p_setterbatchid, p_setterid, p_date, p_time, p_temperature, p_humidity, p_rotationid, p_remark, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE setterdailytransaction
				SET setterbatchid = p_setterbatchid, 
                setterid = p_setterid,
                date = p_date, 
                time = p_time,
                temperature = p_temperature,
                humidity = p_humidity,
                rotationid = p_rotationid,
                remark = p_remark,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
    CALL spc_commonlog_save(p_companyid, 'setterdailytransaction', out_id, @action, p_userid);
   
   END;
   
   END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setterdailytransaction_search`(
	IN p_settingno INT,
    IN p_companyid INT
)
BEGIN
    
    SELECT
			ST.id ,
			L.locationname,
            ST.setterbatchid as settingno,
            ST.setterid,
			DATE_FORMAT(ST.date,'%d/%m/%Y') as date,
            time,
            temperature,
            humidity,
            rotationid,
            R.refname,
            remark
			
    FROM
		setterdailytransaction ST
	
    LEFT JOIN setter S ON ST.setterid = S.id
	LEFT JOIN location L ON S.locationid = L.id
    LEFT JOIN reference R ON ST.rotationid = R.id
        
	WHERE
		ST.companyid = p_companyid AND 
        ST.setterbatchid = p_settingno
        ORDER BY ST.date desc;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setterdailytransaction_select`(
	IN p_id INT
)
BEGIN
    
    SELECT
		  SDT.id,
          setterbatchid,
          setterid,
		  DATE_FORMAT(date,'%d/%m/%Y') as date,
          -- TIME_FORMAT(time, '%h:%i %p') as time,
          time,
          temperature,
          humidity,
          rotationid,
          R.refname as rotation,
          remark,
          companyid
	
    FROM
		setterdailytransaction SDT
		LEFT JOIN reference R ON SDT.rotationid = R.id

	WHERE
		 SDT.id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setterslot_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN
	DELETE FROM setterslots WHERE id = p_id;
    
	-- record log
    CALL spc_commonlog_save(p_companyid, 'setterslots', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setterslot_save`(
	IN p_id INT,
    IN p_setterid INT,
    IN p_slotname VARCHAR(50),
    IN p_capacity INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
	-- IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO setterslots
				(id, setterid, slotname, capacity, statusid, companyid)
			VALUES 
				(p_id, p_setterid, p_slotname, p_capacity, 6191, p_companyid);
		
        SET @action = 'INSERT';
	/*ELSE
   
		UPDATE setterslots
				SET setterid = p_setterid, 
                slotname = p_slotname, 
                capacity = p_capacity,
                statusid = p_statusid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';  
      
	END IF;
    */
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
     CALL spc_commonlog_save(p_companyid, 'setterslots', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setterslot_search`(
  IN p_setterid INT 
)
BEGIN
	SELECT id,
		   setterid,
		   slotname,
           capacity,
           companyid
            
    FROM  setterslots
    WHERE 
          setterid = p_setterid
          order by id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setter_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN
    DELETE FROM setterslots WHERE setterid = p_id;
	DELETE FROM setter WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'setter', p_id, 'deleted', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setter_list_search`(
    IN p_location INT,
    IN p_warehouse INT
)
BEGIN

	SELECT 
		 S.id,
         settername,
         capacity,
         L.locationname,
         W.warehousename,
         machinedetails,
         S.active
	FROM
		setter S
	    LEFT JOIN location L on S.locationid = L.id
        LEFT JOIN warehouse W on S.warehouseid = W.id
	WHERE
		S.locationid = p_location AND
        S.warehouseid = p_warehouse;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setter_prevnext`(
	IN p_id INT,
    IN p_action 

VARCHAR(10)
)
BEGIN
    IF(p_id = 0) THEN
   
     IF(p_action = 'desc') THEN  -- select last record
    
        SELECT
              S.setterid,
              settername,
              capacity,
              S.locationid,
              L.locationcode,
              L.locationname,
              S.warehouseid,
              W.warehousecode,
              W.warehousename,
              typeid,
              machinedetails,
              S.active
        FROM 
             setter S
		     LEFT JOIN location L on S.locationid = L.locationid
             LEFT JOIN warehouse W on S.warehouseid = W.warehouseid
             
	    ORDER BY setterid DESC LIMIT 1;

 
     ELSE --  select first record
        SELECT 
              S.setterid,
              settername,
              capacity,
              S.locationid,
              L.locationcode,
              L.locationname,
              S.warehouseid,
              W.warehousecode,
              W.warehousename,
              typeid,
              machinedetails,
              S.active
        FROM 
			 setter S
		     LEFT JOIN location L on S.locationid = L.locationid
             LEFT JOIN warehouse W on S.warehouseid = W.warehouseid 
        
        ORDER BY setterid limit 1;
     
     END IF;
     
   ELSE 
   
	 IF(p_action = 'desc') THEN
     
      IF EXISTS( SELECT setterid, settername, capacity, locationid, warehouseid, typeid, machinedetails, active FROM setter WHERE setterid < p_id ORDER BY setterid DESC LIMIT 1) THEN
           SELECT 
                S.setterid,
				settername,
				capacity,
				S.locationid,
				L.locationcode,
				L.locationname,
				S.warehouseid,
				W.warehousecode,
				W.warehousename,
				typeid,
				machinedetails,
				S.active
           FROM 
				setter S
				LEFT JOIN location L on S.locationid = L.locationid
				LEFT JOIN warehouse W on S.warehouseid = W.warehouseid 
           WHERE S.setterid < p_id 
           ORDER BY setterid DESC LIMIT 1;
           
	  ELSE
          
          SELECT 
                S.setterid,
				settername,
				capacity,
				S.locationid,
				L.locationcode,
				L.locationname,
				S.warehouseid,
				W.warehousecode,
				W.warehousename,
				typeid,
				machinedetails,
				S.active
	      FROM 
              setter S
			  LEFT JOIN location L on S.locationid = L.locationid
			  LEFT JOIN warehouse W on S.warehouseid = W.warehouseid 
           
	      WHERE S.setterid > p_id ORDER BY setterid DESC LIMIT 1;
          
	  END IF;
        
     ELSE
     
       IF EXISTS (SELECT setterid,settername,capacity,locationid, warehouseid, typeid, machinedetails, active FROM setter WHERE setterid > p_id ORDER BY setterid ASC LIMIT 1) THEN
          SELECT 
			    S.setterid,
				settername,
				capacity,
				S.locationid,
				L.locationcode,
				L.locationname,
				S.warehouseid,
				W.warehousecode,
				W.warehousename,
				typeid,
				machinedetails,
				S.active
	      FROM 
              setter S
			  LEFT JOIN location L on S.locationid = L.locationid
			  LEFT JOIN warehouse W on S.warehouseid = W.warehouseid 
           
	      WHERE S.setterid > p_id ORDER BY setterid ASC LIMIT 1;
          
       ELSE
          SELECT 
                S.setterid,
				settername,
				capacity,
				S.locationid,
				L.locationcode,
				L.locationname,
				S.warehouseid,
				W.warehousecode,
				W.warehousename,
				typeid,
				machinedetails,
				S.active
          FROM 
               setter S
			   LEFT JOIN location L on S.locationid = L.locationid
			   LEFT JOIN warehouse W on S.warehouseid = W.warehouseid 
              
          WHERE S.setterid < p_id ORDER BY setterid ASC LIMIT 1;
          
       END IF;
	
     END IF;
     
   END IF;
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setter_save`(
	IN p_id INT,
	IN p_settername VARCHAR(100),
	IN p_capacity INT,
    IN p_locationid INT,
    IN p_warehouseid INT,
    IN p_typeid INT,
    IN p_machinedetails VARCHAR(500),
    IN p_active TINYINT,
    IN p_userid INT,
    IN p_companyid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF EXISTS(
            SELECT settername from setter where LOWER(settername) = LOWER(p_settername)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    
    BEGIN
    
			IF(NULLIF(p_id, '0') IS NULL) THEN

				INSERT INTO setter
						(id, settername, capacity, locationid, warehouseid, typeid, machinedetails, active, companyid)
					VALUES 
						(p_id, p_settername, p_capacity, p_locationid, p_warehouseid, p_typeid, p_machinedetails, p_active, p_companyid );
				
				SET @action = 'INSERT';

			ELSE

				UPDATE setter
						SET settername = p_settername, 
						capacity = p_capacity, 
						locationid = p_locationid,
						warehouseid = p_warehouseid,
						typeid = p_typeid,
						machinedetails = p_machinedetails,
						active = p_active,
						companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
						
					SET @action = 'UPDATE';     
			 
		   END IF;
           
           	SELECT LAST_INSERT_ID() INTO out_id;
            
            -- Create default warehousebin
            SET @out_warehousebinid = NULL;
			CALL spc_warehousebin_save(
				NULL, p_warehouseid, CONCAT(p_settername,'-BIN'), p_settername,
				p_companyid, 0, p_userid, @out_warehousebinid
			);
            
            -- update warehouse bin id 
    
			UPDATE setter SET warehousebinid = @out_warehousebinid WHERE id = out_id;
					
			-- record log
			-- CALL spc_commonlog_save(p_companyid, 'setter', out_id, @action, p_userid);
     END;
     
   END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setter_search`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		 S.id,
         settername,
         capacity,
         L.locationname,
         W.warehousename,
         machinedetails,
         S.active
	FROM
		setter S
	    LEFT JOIN location L on S.locationid = L.id
        LEFT JOIN warehouse W on S.warehouseid = W.id
	WHERE
		S.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_setter_select`(
	IN p_id INT
)
BEGIN
    
    SELECT
		S.id,
        settername,
        capacity,
		S.locationid,
        L.locationcode,
        L.locationname,
        S.warehouseid,
        W.warehousecode,
        W.warehousename,
        S.active,
        typeid,
        machinedetails
	
    FROM
		setter S
	
    LEFT JOIN location L ON S.locationid = L.id
    LEFT JOIN warehouse W ON S.warehouseid = W.id

	WHERE
		S.id = p_id;
      

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_settingreportwithbinqty_report`(
IN p_fromdate DATE,
IN p_todate DATE,
IN p_companyid INT(11)
)
BEGIN

select 
	SB.setterid,
	SB.id as settingno,
	DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as batchdate,
	SB.sourceid as sourceid,
	REF.refname,
	SB.id as setterbatchno,
	S.locationid as locationid,
	S.warehousebinid as warehousebinid,
	WB.binname as Warehousebinname,
	SB.actualquantity as machineqty,
	L.locationname as locationname,
	SB.availablequantity as receivedqty,
	SB.crackedquantity as crackedeggs,
	((SB.crackedquantity/availablequantity)*100)as crackper,
	HSD.plannedquantity as noofeggset


From setterbatch SB
LEFT JOIN `reference` REF ON SB.sourceid = REF.id
LEFT JOIN hatcheryscheduledetail HSD ON HSD.setterid = SB.setterid
LEFT JOIN setter S ON S.id = SB.setterid
LEFT JOIN warehousebin WB ON WB.id = S.warehousebinid
LEFT JOIN location L ON L.id = S.locationid

Where  SB.batchdate BETWEEN p_fromdate AND p_todate
	   AND SB.companyid = p_companyid;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_settingreport_select`(
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_companyid INT
)
BEGIN
	SELECT
		 id,
         setterid,
         scheduleid,
         detailsid,
         breederbatchid,
         sourceid,
         sourcedeliveryid,
         availablequantity,
         crackedquantity,
         actualquantity,
         DATE_FORMAT(batchdate,'%d/%m/%Y') as batchdate,
         partycode,
         status,
         DATE_FORMAT(completiondate,'%d/%m/%Y') as completiondate,
         companyid
         
	FROM
		setterbatch BT
        
	 WHERE
		 companyid = p_companyid
         AND
		 BT.batchdate BETWEEN p_fromdate AND p_todate;
         

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_settingreport_select1`(
	 IN p_fromdate DATE,
	 IN p_todate DATE,
	 IN p_companyid INT
)
BEGIN

	SET @@sql_mode = ' ';
    SET @row_number = 0;
    
    SELECT 
    CASE WHEN (Temp1.breederbatchid = 'Grand Total') THEN '' 
			ELSE (@row_number:=@row_number + 1)  END sqno, 
            
    Temp1.* from 
    (

	SELECT 	
        setterbatchid,
        hatcherbatchid,
        batchstatus,
        setterbatchsetterid,
        setterslotidinsetterbatch,
        setterslotid,
        slotname,
		CASE WHEN (breederbatchid = 'Sub Total') THEN '' ELSE setterid END AS setterid, 
        -- id,
		settername,
		machinedetails,
		CASE WHEN (breederbatchid = 'Sub Total') THEN '' ELSE batchdate END AS batchdate,  
        tentativecandlingdate,
        
        tentativetransferdate,
        tentativehatchdate,
		CASE WHEN (breederbatchid = 'Sub Total') THEN '' ELSE sourcename END AS sourcename, 
		breederbatchid, 
       --  sourcename,
		availablequantity, 
		crackedquantity, 
        CASE WHEN (breederbatchid = 'Sub Total') THEN '' ELSE crackedpercent END AS crackedpercent, 
		actualquantity
        
		FROM (

			SELECT
				BT.id as setterbatchid,
                HB.id as hatcherbatchid,
                IF(HB.id = Null, "Present", "Move") as batchstatus,
                BT.setterid as setterbatchsetterid,
                BT.setterslotid as setterslotidinsetterbatch,
                SS.id as setterslotid,
                SS.slotname,
                COALESCE(BT.setterid, '') AS setterid, 		
                S.settername,
			    S.machinedetails,
				COALESCE(DATE_FORMAT(BT.batchdate,'%d/%m/%Y'), '') AS batchdate, 		
                DATE_FORMAT(DATE_ADD(BT.batchdate, INTERVAL 10 DAY),'%d/%m/%Y') as tentativecandlingdate,
				DATE_FORMAT(DATE_ADD(BT.batchdate, INTERVAL 17 DAY),'%d/%m/%Y') as tentativetransferdate,
				DATE_FORMAT(DATE_ADD(BT.batchdate, INTERVAL 20 DAY),'%d/%m/%Y') as tentativehatchdate,
				 
                -- COALESCE(REF1.refname, '') AS sourcename, 	
                IF(BT.sourceid=262, P.partyname, BT.breederbatchid) as sourcename,
                COALESCE(BT.breederbatchid, '') AS breederbatchid, 		
				SUM(BT.availablequantity) AS availablequantity,
				SUM(BT.crackedquantity) AS crackedquantity,
                ROUND(((IFNULL(SUM(BT.crackedquantity), 0) * 100) / IFNULL(SUM(availablequantity), 0)),2) AS crackedpercent,		
				SUM(BT.actualquantity) AS actualquantity
				 
			FROM
				setterbatch BT
                LEFT JOIN setter S ON S.id = BT.setterid
                LEFT JOIN setterslots SS ON SS.id = BT.setterslotid 
                LEFT JOIN hatcherbatch HB ON HB.setterbatchid = BT.id
				LEFT JOIN hatcheryscheduledetail HSD ON HSD.setterslotid = SS.id AND HB.setterslotid
				LEFT JOIN purchaserequest PR ON PR.id = HSD.requestid and requestsourceid= 542
                LEFT JOIN purchaseorder PO ON PO.purchaserequestid = HSD.requestid and PR.id
                LEFT JOIN grpo GRPO ON GRPO.purchaseorderid = PO.id
                LEFT JOIN party P ON P.id = GRPO.supplierid
			    LEFT JOIN `reference` REF1 ON BT.sourceid = REF1.id
			WHERE 
				BT.companyid = p_companyid 
                AND BT.batchdate BETWEEN p_fromdate AND p_todate
            
			GROUP BY   
           BT.setterslotid, setterid, batchdate, breederbatchid, REF1.refname
            
            
          --  WITH ROLLUP
            
			-- HAVING sourcename != ''
            
		) AS TEMP
        
        
        UNION
        
		SELECT 
			null,
		    null,
		    null,
		    null,
		    null,
		    null,
		    null,
		    null,
            null,
            null,
			null, 
            null,
            null,
			null, 
            null, 
            'Grand Total', 
			SUM(availablequantity) AS availablequantity ,
            SUM(crackedquantity) AS crackedquantity ,
            '' AS crackedpercent,
            -- ROUND(((IFNULL(SUM(crackedquantity), 0) * 100) / IFNULL(SUM(availablequantity), 0)),2) crackedpercent,		
            SUM(actualquantity) AS actualquantity 
		FROM
				setterbatch BT
                LEFT JOIN setter S ON S.id = BT.setterid
                LEFT JOIN setterslots SS ON SS.setterid = S.id and BT.setterid
		WHERE 
				BT.companyid = p_companyid 
                AND BT.batchdate BETWEEN p_fromdate AND p_todate
	) AS Temp1;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_shedname_bybatch`(
IN p_batchid varchar(200),
IN p_companyid INT(11)

)
BEGIN

SELECT 
CBB.cbfbatchid,
CBB.cbfshedid,
CFESDD.shed_name

FROM cbf_batchbalance CBB 
LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CFESDD  ON CFESDD.id = CBB.cbfshedid  


 WHERE CBB.companyid = p_companyid AND
FIND_IN_SET( CBB.cbfbatchid, p_batchid)
group by CBB.cbfbatchid;     
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_shedwiselayerquantity`(
	IN p_shedid INT(11),
    IN p_batchid INT(11)
)
BEGIN

	select SUM(LBB.quantity) as shedquantity,
		   (LS.capacity - SUM(LBB.quantity)) as shedcapacity
	from layerbatchbalance LBB
    LEFT JOIN layershed LS ON LS.id = LBB.layershedid
    
    WHERE LBB.layershedid = p_shedid
    AND LBB.layerbatchid = p_batchid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_sltb_report`(
	IN p_branchid INT,
    IN p_partyroleid INT,
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT
)
BEGIN
SET @@sql_mode = ' ';

	SET @openingdramount = null;
	SET @openingcramount = null;
	SET @from_date = DATE_SUB(p_fromdate, INTERVAL 1 DAY);
	
    IF(p_partyroleid = 31) THEN -- Supplier
		DROP TEMPORARY TABLE IF EXISTS sltb;
		CREATE TEMPORARY TABLE sltb
		SELECT 
			   JED.acledgerid,
			  -- COA.glcode,
			  -- COA.coaname as ledgername,
               CONCAT(COA.glcode,' ' ,COA.coaname) as ledger,
			   JED.dramount,
			   JED.cramount,
               P.partyname,
               P.id as partyid
			   
		FROM journalentry JE
		
		LEFT JOIN journalentrydetail JED ON JE.id = JED.journalentryid
		LEFT JOIN chartofaccount COA ON JED.acledgerid = COA.id
        LEFT JOIN party P ON P.supplierledgerid = JED.acledgerid
		
		WHERE JE.voucherdate BETWEEN @from_date AND p_todate
		AND JE.branchid = p_branchid
		AND JE.companyid = p_companyid
        AND P.id = JED.partyid;
        
       -- GROUP BY P.id; 
	
    ELSE
    
		DROP TEMPORARY TABLE IF EXISTS sltb;
		CREATE TEMPORARY TABLE sltb
		SELECT 
			   JED.acledgerid,
			   -- COA.glcode,
			   -- COA.coaname as ledgername,
               CONCAT(COA.glcode,' ' ,COA.coaname) as ledger,
			   JED.dramount,
			   JED.cramount,
               P.partyname,
               P.id as partyid
			   
		FROM journalentry JE
		
		LEFT JOIN journalentrydetail JED ON JE.id = JED.journalentryid
		LEFT JOIN chartofaccount COA ON JED.acledgerid = COA.id
        LEFT JOIN party P ON P.customerledgerid = JED.acledgerid
		
		WHERE JE.voucherdate BETWEEN @from_date AND p_todate
		AND JE.branchid = p_branchid
		AND JE.companyid = p_companyid
        AND P.id = JED.partyid;
        
      --  GROUP BY P.id;
        
  --   select * from sltb;
	END IF;

	DROP TEMPORARY TABLE IF EXISTS subledgertb;
	CREATE TEMPORARY TABLE subledgertb
	SELECT IFNULL(tb1.dramount,0) as dramount, 
		   IFNULL(tb1.cramount,0) as cramount,
           tb1.acledgerid,
		   IFNULL(fnc_slopeningcreditdebitbal(tb1.partyid, @from_date, 'debit'),0) as openingdramount,
           IFNULL(fnc_slopeningcreditdebitbal(tb1.partyid, @from_date, 'credit'),0) as openingcramount,
           -- COA.glcode,
		   -- COA.coaname as ledgername,
           CONCAT(COA.glcode,' ' ,COA.coaname) as ledger,
           tb1.partyname,
           tb1.partyid
           
    FROM sltb tb1
    LEFT JOIN chartofaccount COA ON tb1.acledgerid = COA.id
    
	GROUP BY tb1.partyid;
    
    select * from subledgertb;
     
   /* DROP TEMPORARY TABLE IF EXISTS subledgertb1;
    CREATE TEMPORARY TABLE subledgertb1
    SELECT *,partyname as item FROM subledgertb;
    
    DROP TEMPORARY TABLE IF EXISTS subledgertb2;
    CREATE TEMPORARY TABLE subledgertb2
	SELECT * FROM(  
	SELECT * FROM subledgertb1
    UNION ALL
    
    SELECT SUM(tb1.dramount) as dramount,
           SUM(tb1.cramount) as cramount,
           '' as acledgerid,
		   SUM(tb1.openingcramount) as openingcramount,
           SUM(tb1.openingdramount) as openingdramount,
           ledger,
          'Sub Total'  as partyname,
           '' as partyid,
           CONCAT(partyname, ' ', 'subtotal') as item
           
	FROM subledgertb tb1
    
    group by ledger
    ) as tempsub
    ORDER BY item;
    
    SELECT * FROM subledgertb2
    
    UNION ALL
    
    SELECT SUM(tb1.dramount) as dramount,
           SUM(tb1.cramount) as cramount,
           '' as acledgerid,
		   SUM(tb1.openingcramount) as openingcramount,
           SUM(tb1.openingdramount) as openingdramount,
           'Grand Total' as ledger,
           'Grand Total' as partyname,
           '' as partyid,
           -- CONCAT(partyname, ' ', 'grandtotal') as item
            'grandtotal' as item
           
	FROM subledgertb tb1;*/
     
   --  SELECT * FROM sltb;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_state_ddl`(
)
BEGIN

	SELECT id,
		   countryid,
           statename
           
	FROM state;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_state_save`(
	IN p_id INT,
    IN p_countryid INT,
    IN p_statecode VARCHAR(45),
    IN p_statename VARCHAR(100),
    IN p_companyid INT,
    IN p_stategstcode VARCHAR(100),
    IN p_isunionterritory TINYINT(4),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO state 
				(id, countryid, statecode, statename, companyid, stategstcode, isunionterritory)
			VALUES 
				(p_id, p_countryid, p_statecode, p_statename, p_companyid, p_stategstcode, p_isunionterritory);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE state
				SET countryid = p_countryid,
                statecode = p_statecode,
                statename = p_statename,
                companyid = p_companyid,
                stategstcode = p_stategstcode,
                isunionterritory = p_isunionterritory,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_state_search`(
	IN p_countryid INT(11)
)
BEGIN

	SELECT id,
		   countryid,
           statecode,
           statename
           
	FROM state
    
    WHERE countryid = p_countryid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_stockadjustment_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM stockadjustment WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_stockadjustment_report`(
 IN p_itemid VARCHAR(16383),
 IN p_companyid INT(11)
 )
BEGIN
SET @@sql_mode = '';



select *,  IF(adjustmenttypeid = 6201, increasestock, decreasestock) as closingqty
FROM (
SELECT 
   -- SA.date as adjustmentdate,
    DATE_FORMAT( SA.date,'%d/%m/%Y') as adjustmentdate,
    SA.itemid,
    SA.warehouseid,
    W.warehousename,
	WB.binname,
    SA.warehousebinid,
    SA.adjustmenttypeid,
    SA.quantity as adjustedqty,
    SA.unitcost,
    SA.amount,
    SA.instock as previousqty,
    (IFNULL(SA.instock,0)+IFNULL(SA.quantity,0))as increasestock,
    (IFNULL(SA.instock,0)-IFNULL(SA.quantity,0))as decreasestock,
    SA.statusid,
    REF.refname,
    REF1.refname as refnameone,
    REF2.refname as unit,
    I.itemname
    
    
 FROM stockadjustment SA
 LEFT JOIN warehouse W ON W.id = SA.warehouseid
 LEFT JOIN warehousebin WB ON WB.id = SA.warehousebinid
 LEFT JOIN item I ON I.id = SA.itemid
 LEFT JOIN `reference` REF ON SA.statusid = REF.id
 LEFT JOIN `reference` REF1 ON SA.adjustmenttypeid = REF1.id
 LEFT JOIN `reference` REF2 ON I.itemunitid = REF2.id
 -- LEFT JOIN 'reference' R ON R.id = SA.statusid

WHERE 
find_in_set(SA.itemid,p_itemid)
AND SA.statusid = 6222)as temp;
-- group by itemid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_stockadjustment_save`(
	IN p_id INT(11),
    IN p_date DATE,
    IN p_itemid INT(11),
    IN p_warehouseid INT(11),
    IN p_warehousebinid INT(11),
    IN p_adjustmenttypeid INT(11),
    IN p_instock DECIMAL(15,3),
    IN p_quantity DECIMAL(12,3),
    IN p_unitcost DECIMAL(12,3),
    IN p_amount DECIMAL(15,3),
    IN p_statusid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT OUT_ID INT(11)
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO stockadjustment(
			`date`, 
            itemid, 
            warehouseid, 
            warehousebinid, 
            adjustmenttypeid,
            instock,
            quantity,
            unitcost,
            amount,
            statusid,
            companyid)
        VALUES (
			p_date, 
            p_itemid, 
            p_warehouseid, 
            p_warehousebinid, 
            p_adjustmenttypeid,
            p_instock,
            p_quantity,
            p_unitcost,
            p_amount,
            p_statusid,
            p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE stockadjustment
        SET `date` = p_date, 
            itemid = p_itemid, 
            warehouseid = p_warehouseid, 
            warehousebinid = p_warehousebinid, 
            adjustmenttypeid = p_adjustmenttypeid,
            instock = p_instock,
            quantity = p_quantity,
            unitcost = p_unitcost,
            amount = p_amount,
            statusid = p_statusid,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    IF(p_statusid = 6222) THEN
    
		SET @inventorygainandlossledgerid = null;
        SELECT inventorygainandlossledgerid INTO @inventorygainandlossledgerid
        FROM common_setting
        WHERE companyid = p_companyid;
        
	   SET @branch = null;
	   SELECT L.branchid INTO @branch 
	   FROM location L
	   LEFT JOIN warehouse W ON W.locationid = L.id
	   WHERE W.id = p_warehouseid;
        
        if(p_adjustmenttypeid = 6201) THEN
        
			-- if adjustment type is increase then do material receipt
            SET @unitprice = 0;
            
            SELECT (IFNULL(SUM(itemvalue),0)/IFNULL(SUM(quantity),0)) INTO @unitprice
            FROM materialmovement
            WHERE transactiontypeid in(682,681,684,685)
            AND itemid = p_itemid;
        
            SET @mreceiptid = null;
            CALL spc_materialreceipt_save(
				NULL, p_date, 348, NULL, 322,
                NULL, p_userid, p_userid, p_date, 
                p_companyid, p_userid, @mreceiptid
            );

			SET @itembatch = null;
            SET @itemgroup = null;
            
			select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch 
            from item I
			INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

			WHERE I.id = p_itemid;
            
            SET @mreceiptdetailid = null;
            CALL spc_materialreceiptdetail_save(
				NULL, @mreceiptid, p_itemid,
                (SELECT itemname FROM item WHERE id = p_itemid),
                p_quantity, @unitprice,
                (p_quantity * @unitprice), 
                (SELECT itemunitid FROM item WHERE id = p_itemid), 
                @itembatch, p_warehouseid, p_warehousebinid,
                p_companyid, p_userid, NULL, @mreceiptdetailid
            );
            
            SELECT itemgroupid INTO @itemgroup 
            FROM item 
            WHERE id = p_itemid;
        
			UPDATE itemgroup 
            SET seriesstartwith = seriesstartwith +1
			WHERE id = @itemgroup;
            
            SET @mmovementid1 = null;
            CALL spc_materialmovement_save(
				NULL, p_itemid, @itembatch,
                684, @mreceiptid, p_date, p_quantity, 
                NULL, NULL, p_warehouseid, 
				p_warehousebinid, (p_quantity * @unitprice), 
                p_companyid, p_userid, @mmovementid1
            );
            
            SET @jeid = null;
            CALL spc_journalentry_save(
				NULL,
				NULL,
				1303,
				NULL,
				p_date,
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                348,
				NULL,
				'Stock adjustment JE',
				NULL,
				NULL,
				NULL,
				OUT_ID,
				'Stock adjustment JE',
				p_companyid,
                p_userid,
                @jeid
            );
            
            -- Credit to inventory gain and loss - Ledger
                         
			 SET @jedetailid1 = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
                @inventorygainandlossledgerid,
				0,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				0,
				p_amount,
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Stock adjustment JE',
				p_companyid,
				p_userid,
				@jedetailid1
			 );
			
			-- Debit to item - Ledger
			
			 SET @jedetailid = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				(SELECT ledgerid FROM item WHERE id = @itemid),
				0,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				p_amount,
				0,
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Stock adjustment JE',
				p_companyid,
				p_userid,
				@jedetailid
			 );
            
        ELSE
			-- If adjustment type decrease then do material issue
		
			BEGIN
				DECLARE j INT;
                 
				DECLARE material_itemid INT;
				DECLARE material_itembatch VARCHAR(300);
				DECLARE material_quantity INT;
				DECLARE material_unitcost DECIMAL(30,6);
                SET @row_number = 0;
                SET @@sql_mode = '';
                SET @reccount = 0;
                SET j = 0;
				SET @materialissue_outid = null;
				CALL spc_materialissue_save(
					null, 
					p_date, 
					381, 
					null, 
					362, 
					'Stock Adjustment', 
					p_userid, 
					p_warehouseid,
					p_warehousebinid,
					null, 
					null, 
					p_companyid, 
					p_userid, 
					@materialissue_outid
				);
				
				DROP TEMPORARY TABLE IF EXISTS tempitembatch;
			
				CREATE TEMPORARY TABLE tempitembatch
				
				SELECT itemid, itembatch, stockin, transactiondate,itemunitcost,
				fnc_itembatchstockout(itemid, IFNULL(itembatch,''), p_warehouseid, p_warehousebinid) as stockout,
				(@row_number := @row_number + 1) as recordrank 
				FROM(
			
					SELECT itemid, itembatch,SUM(quantity) as stockin,transactiondate,(itemvalue/quantity) as itemunitcost
					FROM materialmovement
					WHERE 
						itemid = p_itemid AND
						companyid = p_companyid AND
						towarehouseid = p_warehouseid AND
						towarehousebinid = p_warehousebinid AND
						transactiontypeid in (681,682,684,685) AND itembatch is not null
						GROUP BY itemid, itembatch
					   
				) stocktable order by transactiondate asc;
				SELECT COUNT(*) INTO @reccount FROM  tempitembatch;
			
				WHILE j < @reccount DO
				
					SET @issuequantity = 0;
                    
					SELECT itemid, itembatch, (stockin - stockout) as quantity, itemunitcost
					INTO  material_itemid, material_itembatch, material_quantity, material_unitcost
					FROM  tempitembatch where recordrank = j+1 ;
				 
					 IF (p_quantity > 0 ) THEN
						IF(material_quantity > 0) THEN
							IF (material_quantity >= p_quantity) THEN
								SET @issuequantity = p_quantity;
								SET p_quantity = 0;
							ELSE 
							
								SET @issuequantity = material_quantity;
								SET p_quantity = p_quantity - material_quantity;
							END IF;
							
						END IF;
						 
						IF (@issuequantity >0) THEN
						  SET @materialissuedetail_outid = null;
						  SET @movement_outid = null;
						  
						  CALL spc_materialissuedetail_save(
							null, @materialissue_outid, p_itemid, 
                            (SELECT itemname FROM item WHERE id = p_itemid), 
                            @issuequantity, material_unitcost,(@issuequantity*material_unitcost), 
                            (SELECT itemunitid FROM item WHERE id = p_itemid), 
                            material_itembatch, p_companyid, p_userid,
                            @materialissuedetail_outid
						 );
                         
						  CALL spc_materialmovement_save(
							  null, p_itemid, material_itembatch,
							  683, @materialissuedetail_outid, p_date,
							  @issuequantity, p_warehouseid, p_warehousebinid,
							  null, null,(@issuequantity*material_unitcost),
							  p_companyid, p_userid,@movement_outid
						  );
						
					   END IF;
					
					END IF;
					
					SET  j = j + 1; 
				END WHILE;
			   
			   DROP TEMPORARY TABLE tempitembatch;
			END;
            
            SET @jeid = null;
            CALL spc_journalentry_save(
				NULL,
				NULL,
				1302,
				NULL,
				p_date,
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                348,
				NULL,
				'Stock adjustment JE',
				NULL,
				NULL,
				NULL,
				OUT_ID,
				'Stock adjustment JE',
				p_companyid,
                p_userid,
                @jeid
            );
            
            -- Credit to item - Ledger
                         
			 SET @jedetailid1 = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				(SELECT ledgerid FROM item WHERE id = @itemid),
				0,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				0,
				p_amount,
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Stock adjustment JE',
				p_companyid,
				p_userid,
				@jedetailid1
			 );
			
			-- Debit to inventorygainandloss - Ledger
			
			 SET @jedetailid = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
                @inventorygainandlossledgerid,
				0,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				p_amount,
				0,
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Stock adjustment JE',
				p_companyid,
				p_userid,
				@jedetailid
			 );
        END IF;
    
    END IF;
    -- record log
   CALL spc_commonlog_save(p_companyid, 'stockadjustment', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_stockadjustment_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT SA.id,
		    DATE_FORMAT(`date`,'%d/%m/%Y') as `date`, 
            SA.itemid, 
            I.itemname,
            SA.warehouseid,
            W.warehousename,
            SA.warehousebinid,
            WB.binname,
            SA.adjustmenttypeid,
            REF1.refname as adjustmenttype,
            SA.instock,
            SA.quantity,
            SA.unitcost,
            REF.refname as unitname,
            SA.amount,
            SA.statusid,
            REF2.refname as `status`
	FROM stockadjustment SA
    LEFT JOIN item I ON I.id = SA.itemid
    LEFT JOIN `reference` REF ON REF.id = I.itemunitid
    LEFT JOIN `reference` REF1 ON SA.adjustmenttypeid = REF1.id
    LEFT JOIN `reference` REF2 ON SA.statusid = REF2.id
    LEFT JOIN warehouse W ON W.id = SA.warehouseid
    LEFT JOIN warehousebin WB ON WB.id = SA.warehousebinid
    
    WHERE SA.companyid = p_companyid;
    

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_stockadjustment_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT SA.id,
		    DATE_FORMAT(`date`,'%d/%m/%Y') as `date`, 
            SA.itemid, 
            I.itemname,
            SA.warehouseid,
            W.warehousename,
            SA.warehousebinid, 
            WB.binname,
            SA.adjustmenttypeid,
            REF2.refname as adjustmenttype,
            SA.instock,
            SA.quantity,
            SA.unitcost,
            REF.refname as unitname,
            SA.amount,
            SA.statusid,
            REF1.refname as status,
            I.itemgroupid,
            IG.groupname
            
	FROM stockadjustment SA
    LEFT JOIN `reference` REF2 ON REF2.id = SA.adjustmenttypeid
    LEFT JOIN `reference` REF1 ON REF1.id = SA.statusid
    LEFT JOIN item I ON I.id = SA.itemid
    LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
    LEFT JOIN `reference` REF ON REF.id = I.itemunitid
    LEFT JOIN warehouse W ON W.id = SA.warehouseid
    LEFT JOIN warehousebin WB ON WB.id = SA.warehousebinid
    WHERE SA.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_subledgerregisterforoneparty_report`(
	IN p_partyroleid VARCHAR(255),
	IN p_partyid VARCHAR(255),
    IN p_fromdate DATE,
	IN p_todate DATE,
    IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';

IF(p_partyroleid = 31) THEN
DROP TEMPORARY TABLE IF EXISTS tempsubledger ;
CREATE TEMPORARY TABLE tempsubledger

SELECT 
			   JED.acledgerid,
               JED.loadonitemid,
               JE.id as jeid,
               JE.partyid as jeparty,
               JE.jeno as jeno,
               JE.vouchertypeid,
               R.refname as transactiontype,
               JE.uservoucherno,
			   SUM(JED.dramount) as dramount,
			   SUM(JED.cramount) as cramount,
               IFNULL(fnc_slopeningcreditdebitbal( P.id, p_fromdate, 'credit'),0) as op_cr,
               IFNULL(fnc_slopeningcreditdebitbal( P.id,p_fromdate, 'debit'),0) as op_dr,
               ((IFNULL(fnc_slopeningcreditdebitbal( P.id, p_fromdate, 'debit'),0))-(IFNULL(fnc_slopeningcreditdebitbal( P.id, p_fromdate, 'credit'),0)))as Ob,
               P.partyname,
               P.id as partyid,
               P.partycode as partycode,
               DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate
			   
		FROM journalentry JE
		
		LEFT JOIN journalentrydetail JED ON JE.id = JED.journalentryid
		LEFT JOIN chartofaccount COA ON JED.acledgerid = COA.id
        LEFT JOIN party P ON P.supplierledgerid = JED.acledgerid AND P.id = JED.partyid 
        LEFT JOIN `reference` R ON  JE.vouchertypeid = R.id
        
 		
		WHERE JE.voucherdate BETWEEN p_fromdate AND p_todate AND
		 JE.companyid = p_companyid AND
		 FIND_IN_SET( JE.partyid, p_partyid)
        AND P.id = JED.partyid
        GROUP BY JE.id;
    
   
      
	ELSE
    
    DROP TEMPORARY TABLE IF EXISTS tempsubledger ;
    CREATE TEMPORARY TABLE tempsubledger
    
    SELECT 
			   JED.acledgerid,
               JED.loadonitemid,
               JE.id as jeid,
               JE.partyid as jeparty,
               JE.jeno as jeno,
               JE.vouchertypeid,
               R.refname as transactiontype,
               JE.uservoucherno,
			   SUM(JED.dramount) as dramount,
			   SUM(JED.cramount) as cramount,
               IFNULL(fnc_slopeningcreditdebitbal( P.id, p_fromdate, 'credit'),0) as op_cr,
               IFNULL(fnc_slopeningcreditdebitbal( P.id,p_fromdate, 'debit'),0) as op_dr,
               ((IFNULL(fnc_slopeningcreditdebitbal( P.id, p_fromdate, 'debit'),0))-(IFNULL(fnc_slopeningcreditdebitbal( P.id, p_fromdate, 'credit'),0)))as Ob,
               P.partyname,
               P.id as partyid,
               P.partycode as partycode,
               DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate
			   
		FROM journalentry JE
		
		LEFT JOIN journalentrydetail JED ON JE.id = JED.journalentryid
		LEFT JOIN chartofaccount COA ON JED.acledgerid = COA.id
        LEFT JOIN party P ON P.customerledgerid = JED.acledgerid AND P.id = JED.partyid 
		LEFT JOIN `reference` R ON  JE.vouchertypeid = R.id
        
        
		WHERE JE.voucherdate BETWEEN p_fromdate AND p_todate AND
		 JE.companyid = p_companyid AND
         FIND_IN_SET( JE.partyid, p_partyid)
        AND P.id = JED.partyid
		  GROUP BY JE.id;
       --  GROUP BY JE.partyid;
     
  END IF; 
  
    DROP TEMPORARY TABLE IF EXISTS tempsubledger1;
	CREATE TEMPORARY TABLE tempsubledger1
    
    select *, 'item' as entity from tempsubledger;  

    
    DROP TEMPORARY TABLE IF EXISTS tempsubledger2;
	CREATE TEMPORARY TABLE tempsubledger2	
    SELECT * from (
    SELECT * from tempsubledger1
    UNION ALL	
				SELECT 
                
			   '' as acledgerid,
               '' as loadonitemid,
               '' as jeid,
               ''  as jeparty,
               ''  as jeno,
               '' as vouchertypeid,
               '' as transactiontype,
               '' as uservoucherno,
			   '' as dramount,
			   '' as cramount,
			   '' as op_cr,
			   '' as op_dr,
			   Ob as Ob,
			   'A.Ope Bal' as partyname,
			   '' as partyid,
			   '' as partycode,
			   '' as voucherdate,
			   ' ' as entity
				
				FROM
					tempsubledger  group by Ob
                        ) as tmpresult ;
	
SELECT * FROM tempsubledger2;  
	
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_subledgerregister_report`(
	IN p_partyroleid VARCHAR(255),
	IN p_partyid VARCHAR(1500),
    IN p_fromdate DATE,
	IN p_todate DATE,
    IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';

IF(p_partyroleid = 31) THEN
SELECT 
			   JED.acledgerid,
               JE.id as jeid,
               JE.partyid as jeparty,
               JE.jeno as jeno,
               JE.vouchertypeid,
               R.refname as transactiontype,
               JE.uservoucherno,
			   SUM(JED.dramount)as dramount,
			   SUM(JED.cramount)as cramount,
                -- (JED.dramount)as dramount,
			    --  (JED.cramount)as cramount,
               IFNULL(fnc_openingcreditdebitbal( P.id,JED.acledgerid, JE.voucherdate, 'credit'),0) as op_cr,
               IFNULL(fnc_openingcreditdebitbal( P.id,JED.acledgerid, JE.voucherdate, 'debit'),0) as op_dr,
               ((IFNULL(fnc_openingcreditdebitbal( P.id,JED.acledgerid, JE.voucherdate, 'debit'),0))-(IFNULL(fnc_openingcreditdebitbal( P.id,JED.acledgerid, JE.voucherdate, 'credit'),0)))as Ob,
               P.partyname,
               P.id as partyid,
               P.partycode as partycode,
               DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate
			   
		FROM journalentry JE
		LEFT JOIN journalentrydetail JED ON JE.id = JED.journalentryid
		LEFT JOIN chartofaccount COA ON JED.acledgerid = COA.id
        INNER JOIN party P ON P.id = JED.partyid  AND  P.supplierledgerid = JED.acledgerid 
        LEFT JOIN `reference` R ON  JE.vouchertypeid = R.id
 		
		WHERE JE.voucherdate BETWEEN p_fromdate AND p_todate AND
		 JE.companyid = p_companyid AND
		 FIND_IN_SET(JE.partyid,p_partyid)
        GROUP BY P.id,JE.voucherdate
         order by JE.voucherdate; 
	ELSE
    SELECT 
			   JED.acledgerid,
			   SUM(JED.dramount) as dramount,
			   SUM(JED.cramount) as cramount,
               IFNULL(fnc_openingcreditdebitbal( P.id,JED.acledgerid, JE.voucherdate, 'credit'),0) as op_cr,
               IFNULL(fnc_openingcreditdebitbal( P.id,JED.acledgerid, JE.voucherdate, 'debit'),0) as op_dr,
			  ((IFNULL(fnc_openingcreditdebitbal( P.id,JED.acledgerid, JE.voucherdate, 'debit'),0))-(IFNULL(fnc_openingcreditdebitbal( P.id,JED.acledgerid, JE.voucherdate, 'credit'),0)))as Ob,
               P.partyname,
               P.id as partyid,
			   P.partycode as partycode,
               DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate
			   
		FROM journalentry JE
		LEFT JOIN journalentrydetail JED ON JE.id = JED.journalentryid
		LEFT JOIN chartofaccount COA ON JED.acledgerid = COA.id
        INNER JOIN party P ON P.customerledgerid = JED.acledgerid AND P.id = JED.partyid 
		
		WHERE JE.voucherdate BETWEEN p_fromdate AND p_todate AND
		 JE.companyid = p_companyid AND
          FIND_IN_SET(JE.partyid,p_partyid)
        
	GROUP BY P.id,JE.voucherdate; 
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_subscription_import`(
	IN p_companyid INT
)
BEGIN

	select * from logicalkeys.subscription;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_supervisorkmchargedetail_delete`(
IN p_id INT(11)

)
BEGIN
DELETE 
FROM		supervisorkmchargedetail
WHERE		id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_supervisorkmchargedetail_save`(
    IN p_id INT,
	IN p_supervisorkmchargeid INT,
    IN p_supervisorkmid INT,
	IN p_jeid INT,
    IN p_supervisorkmdate DATE,
    IN p_km DECIMAL(9,3),
    IN p_deductedkm DECIMAL(9,3),
    IN p_finalkm DECIMAL(9,3),
    IN p_statusid INT (11),
    IN p_chargedate DATE,
    IN p_employeeid INT(11),
	IN p_branchid INT(11),
    In p_companyid INT,
    IN p_userid INT,
    OUT out_id VARCHAR(200)
)
BEGIN
-- DECLARE @curSupervisorKMMaster CURSOR;
    SET @action = null;
	
   IF(NULLIF(p_id, '0') IS NULL)  THEN
		INSERT INTO supervisorkmchargedetail 
				(supervisorkmchargeid,supervisorkmid,jeid,supervisorkmdate,km,deductedkm,finalkm, 
				companyid)
			VALUES 
				(p_supervisorkmchargeid,p_supervisorkmid,p_jeid,p_supervisorkmdate, p_km, p_deductedkm, p_finalkm, 
                 p_companyid);
                
		SET @action = 'INSERT';
        ELSE
        UPDATE supervisorkmchargedetail
        SET supervisorkmchargeid = p_supervisorkmchargeid,
			supervisorkmid = p_supervisorkmid,
            jeid = p_jeid,
            supervisorkmdate = p_supervisorkmdate,
            km = p_km,
            deductedkm = p_deductedkm,
            finalkm = p_finalkm,
            companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
    END IF;
    
    
  /*  IF(p_statusid = 6305) THEN  -- Approve
    BEGIN 
		set @supervisorkmledgerid = null;
         SELECT supervisorkmledgerid
		   INTO @supervisorkmledgerid
		   FROM cbfsetting LIMIT 1;
           
           select @supervisorkmledgerid;
           
		   set @employeeledgerid = null;
		   SELECT E.ledgerid INTO @employeeledgerid 
		   FROM employee E
           where E.id = p_employeeid;
           	 SET @jedetailid = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				p_jeid,
				@employeeledgerid,
				0,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				0,
				70,
				NULL,
				NULL,
				NULL,
				NUll, -- @itemid
				NULL,
				'Supervisor KM Charge JE',
				p_companyid,
				p_userid,
				@jedetailid1
			 );
	 SET @jedetailid = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				p_jeid,
				@supervisorkmledgerid,
				0,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				70,
				0,
				NULL,
				NULL,
				NULL,
				NULL, -- @itemid
				NULL,
				'Supervisor KM Charge JE',
				p_companyid,
				p_userid,
				@jedetailid
			 );
        end;
        end if;
       */      
	-- UPDATE supervisorkm SET supervisorkmchargeid = p_supervisorkmchargeid WHERE id = LAST_INSERT_ID();	
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
  -- CALL spc_commonlog_save(p_companyid, 'feedmill_billofmaterialdetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_supervisorkmchargedetail_search`(
	IN p_supervisorkmchargeid INT
)
BEGIN
SET @@sql_mode = ' ';

	SELECT 
        SKCD.id,
		SKCD.supervisorkmchargeid,
        DATE_FORMAT(SKCD.supervisorkmdate,'%d/%m/%Y') as supervisorkmdate,
		SKCD.km,
		SKCD.deductedkm,
		SKCD.finalkm,
		SKCD.companyid
	FROM 
		supervisorkmchargedetail SKCD
        
	WHERE
		SKCD.supervisorkmchargeid = p_supervisorkmchargeid
        group by SKCD.id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_supervisorkmchargedetail_select`(
	IN p_id INT,
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT
)
BEGIN

	SET @@sql_mode = ' ';

SELECT 
		SKCD.id,
        SK.id as supervisorkmid,
		SKCD.supervisorkmchargeid,
        DATE_FORMAT(SKCD.supervisorkmdate,'%d/%m/%Y') as supervisorkmdate,
        DATE_FORMAT(SK.travalingdate,'%d/%m/%Y') as travalingdate,
        SKCD.km as totalkm,
		SKCD.deductedkm,
		SKCD.finalkm,
		SKCD.companyid,
        SKC.branchid
        
	FROM supervisorkm SK
    LEFT JOIN supervisorkmcharge SKC ON SK.employeeid = SKC.employeeid AND SK.branchid = SKC.branchid
	LEFT JOIN supervisorkmchargedetail SKCD ON SKCD.supervisorkmchargeid = SKC.id  
	WHERE
		SKCD.supervisorkmchargeid = p_id
        AND SK.travalingdate BETWEEN p_fromdate AND p_todate
         group by SKCD.id,SKCD.supervisorkmchargeid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_supervisorkmcharge_delete`(
	IN p_id INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DELETE FROM supervisorkmcharge WHERE id = p_id;
      -- CALL spc_commonlog_save(p_companyid, 'supervisorkm', out_id, 'Delete', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_supervisorkmcharge_save`(
IN p_id INT(11),
IN  p_branchid INT(11),
IN p_employeeid INT(11),
IN p_chargedate DATE,
IN p_fromdate DATE,
IN p_todate DATE,
IN p_statusid INT(11),
IN p_rate decimal(9,3),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO supervisorkmcharge 
				(branchid,employeeid,chargedate,fromdate,todate,statusid,rate,companyid)
			VALUES 
				(p_branchid,p_employeeid,p_chargedate,p_fromdate,p_todate,p_statusid,p_rate,p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE supervisorkmcharge
				SET 
                
                branchid= p_branchid,
                employeeid = p_employeeid,
                chargedate = p_chargedate,
                fromdate = p_fromdate,
                todate = p_todate,
                statusid = p_statusid,
                rate = p_rate,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
     
	SET @jeid = 0;
     IF(p_statusid = 6305) THEN
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				p_chargedate,
				NULL,
				p_branchid,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                343,
				NULL,
				'Supervisor KM Charge JE',
				NULL,
				NULL,
				NULL,
				p_id,
				'Supervisor KM Charge JE',
				p_companyid,
                p_userid,
                @jeid
           );
          END IF; 
           select @jeid;
    
   
    
   -- record log
   -- CALL spc_commonlog_save(p_companyid, 'sopervisorkm', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_supervisorkmcharge_search`(
IN p_companyid INT(11)
)
BEGIN
SET @@sql_mode = ' ';

SELECT 
SK.id,SK.employeeid,E.employeename,
DATE_FORMAT(SK.chargedate,'%d/%m/%Y') as chargedate,
DATE_FORMAT(SK.fromdate,'%d/%m/%Y') as fromdate,
DATE_FORMAT(SK.todate,'%d/%m/%Y') as todate,
DATE_FORMAT(SKCD.supervisorkmdate,'%d/%m/%Y') as supervisorkmdate,
SK.statusid,SK.rate,SK.companyid,SKCD.km,SKCD.deductedkm,SKCD.finalkm,
R1.refname as statusname,C.branchname,SK.branchid	

FROM supervisorkmcharge SK 
LEFT JOIN employee E ON E.id = SK.employeeid
LEFT JOIN supervisorkmchargedetail SKCD ON SKCD.supervisorkmchargeid= SK.id
LEFT JOIN `reference` R1 ON R1.id = SK.statusid
LEFT JOIN commonbranch C ON C.id = SK.branchid

WHERE 
SK.companyid = p_companyid
group by SK.id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_supervisorkmcharge_select`(
IN p_id INT(11)
)
BEGIN

SELECT 
SK.id,SK.supervisorid,E.employeename,
DATE_FORMAT(SK.chargedate,'%d/%m/%Y') as chargedate,
DATE_FORMAT(SK.fromdate,'%d/%m/%Y') as fromdate,
DATE_FORMAT(SK.todate,'%d/%m/%Y') as todate,
DATE_FORMAT(SKCD.supervisorkmdate,'%d/%m/%Y') as supervisorkmdate,
SK.statusid,SK.rate,SK.companyid,SKCD.km,SKCD.deductedkm,SKCD.finalkm 	

FROM supervisorkmcharge SK 
LEFT JOIN employee E ON E.id = SK.employeeid
LEFT JOIN supervisorkmchargedetail SKCD ON SKCD.supervisorkmchargeid= SK.id

where 
(
			NULLIF(p_id, '') IS NOT NULL AND SK.id = p_id 
            OR NULLIF(p_id, '') IS NULL
);   
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_supervisorkm_delete`(
	IN p_id INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DELETE FROM supervisorkm WHERE id = p_id;
      -- CALL spc_commonlog_save(p_companyid, 'supervisorkm', out_id, 'Delete', p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_supervisorkm_save`(
IN p_id INT(11),
IN p_branchid INT(11),
IN p_employeeid INT(11),
IN p_travalingdate DATE,
IN p_vehicleno VARCHAR(45),
IN p_openingkm decimal(9,3),
IN p_closingkm decimal(9,3),
IN p_totalkm decimal(9,3),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO supervisorkm 
				(branchid,employeeid,travalingdate,vehicleno,openingkm,closingkm,totalkm,companyid)
			VALUES 
				(p_branchid,p_employeeid,p_travalingdate,p_vehicleno,p_openingkm,p_closingkm,p_totalkm,p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE supervisorkm
				SET 
                branchid = p_branchid,
                employeeid = p_employeeid,
                travalingdate = p_travalingdate,
                vehicleno = p_vehicleno,
                openingkm = p_openingkm,
                closingkm = p_closingkm,
                totalkm = p_totalkm,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
           
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   -- CALL spc_commonlog_save(p_companyid, 'sopervisorkm', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_supervisorkm_search`(
IN p_companyid INT(11)
)
BEGIN

SELECT
S.id,S.branchid,C.branchname,S.employeeid,E.employeename,
DATE_FORMAT(S.travalingdate,'%d/%m/%Y') as travalingdate,
S.vehicleno,S.openingkm,S.closingkm,S.totalkm,S.companyid

FROM supervisorkm S 
LEFT JOIN commonbranch C ON C.id = S.branchid
LEFT JOIN employee E ON E.id = S.employeeid
WHERE 
S.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_supervisorkm_select`(
IN p_id INT(11)
)
BEGIN

SELECT 
S.id,S.branchid,C.branchname,S.employeeid,E.employeename,
DATE_FORMAT(S.travalingdate,'%d/%m/%Y') as travalingdate,
S.vehicleno,S.openingkm,S.closingkm,S.totalkm,S.companyid

FROM supervisorkm S 
LEFT JOIN commonbranch C ON C.id = S.branchid
LEFT JOIN employee E ON E.id = S.employeeid

where 
(
			NULLIF(p_id, '') IS NOT NULL AND S.id = p_id 
            OR NULLIF(p_id, '') IS NULL
);
        
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_supervisorname_byline`(
IN p_branchlineid varchar(200),
IN p_companyid INT(11)

)
BEGIN
SELECT  E.id,
        E.employeename
        
        
        
FROM employee E 
 LEFT JOIN cbf_farmerenquiry CFE  ON E.id = CFE.supervisor_id   
	

 WHERE E.companyid = p_companyid AND
    FIND_IN_SET( CFE.line_id, p_branchlineid);  

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_symptomsdetail_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM symptomsdetail WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'symptomsdetail', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_symptomsdetail_save`(
 IN p_id INT(11),
 IN p_symptomsid INT(11),
 IN p_symptomsname VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO symptomsdetail
              (symptomsid, symptomsname, companyid)
       VALUES
            (p_symptomsid, p_symptomsname, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE symptomsdetail 
   
	SET symptomsid = p_symptomsid,
        symptomsname = p_symptomsname,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'symptomsdetail', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_symptomsdetail_search`(
 IN p_symptomsid INT(11)
)
BEGIN

	SELECT id, symptomsname, companyid
           
	FROM symptomsdetail
    
    WHERE symptomsid = p_symptomsid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_symptoms_byleasionid`( 
 IN p_lesionid INT(11)
  )
BEGIN
 SELECT S.id, SD.symptomsname, S.companyid
  
  FROM
  symptoms S
LEFT JOIN symptomsdetail SD ON S.id = SD.symptomsid

	WHERE 
    S.lesionid = p_lesionid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_symptoms_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM symptoms WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'symptoms', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_symptoms_save`( 
 IN p_id INT(11),
 IN p_organid INT(11),
 IN p_lesionid INT(11),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO symptoms
              (organid, lesionid, companyid)
       VALUES
            (p_organid, p_lesionid, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE symptoms 
   
	SET organid = p_organid,
        lesionid = p_lesionid,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'symptoms', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_symptoms_search`(
IN p_companyid INT(11)
)
BEGIN

	SELECT ST.id, ST.organid, ST.lesionid, ST.companyid, O.organname, LD.lesionname
           
	FROM symptoms ST
    
    LEFT JOIN organ O ON O.id = ST.organid
    LEFT JOIN lesiondetail LD ON LD.lesionid = ST.lesionid
    
    WHERE ST.companyid = p_companyid
    
    order by ST.id;
 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_symptoms_select`(
 IN p_id INT(11)
)
BEGIN

	SELECT id, organid,lesionid, companyid
           
	FROM symptoms
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_tax_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM tax WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_tax_save`(
   IN p_id INT(11),
   IN p_taxcode VARCHAR(50),
   IN p_taxname VARCHAR(200),
   IN p_taxpercent DECIMAL(8,3),
   IN p_taxtypeid INT,
   IN p_combinedtaxes VARCHAR(100),
   IN p_inputledgerid INT(11),
   IN p_outputledgerid INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF EXISTS(
            SELECT id from tax where LOWER(taxcode) = LOWER(p_taxcode) OR taxname = p_taxname
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE
		BEGIN
    
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO tax 
						(id, taxcode, taxname, taxpercent, taxtypeid, combinedtaxes, inputledgerid, outputledgerid, companyid)
					VALUES 
						(p_id,  p_taxcode, p_taxname, p_taxpercent, p_taxtypeid, p_combinedtaxes, p_inputledgerid, p_outputledgerid, p_companyid);
			  SET @action = 'INSERT';
			ELSE
			
				UPDATE tax
						SET taxcode = p_taxcode,
							taxname = p_taxname,
							taxpercent = p_taxpercent,
							taxtypeid = p_taxtypeid,
							combinedtaxes = p_combinedtaxes,
							inputledgerid = p_inputledgerid,
							outputledgerid = p_outputledgerid,
							companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
				   SET @action = 'UPDATE';     
						
						
			END IF;
			
			SELECT LAST_INSERT_ID() INTO out_id; 
			
		   -- record log
		   CALL spc_commonlog_save(p_companyid, 'tax', out_id, @action, p_userid);
		END;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_tax_search`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		 T.id,
         taxcode,
         taxname,
         taxpercent,
         taxtypeid,
         REF1.refname as taxtype,
         combinedtaxes,
         fnc_taxes_byids(combinedtaxes) as taxesname,
         fnc_taxpercents_byids(combinedtaxes) as taxpercents,
         fnc_taxtypes_byids(combinedtaxes) as taxtypes,
         inputledgerid, 
         COA1.coaname as inputledgername,
         outputledgerid,
         COA2.coaname as outputledgername
                  
	FROM
		tax T
	LEFT JOIN `reference` REF1 ON REF1.id = T.taxtypeid
    LEFT JOIN `chartofaccount` COA1 ON COA1.id = T.inputledgerid
    LEFT JOIN `chartofaccount` COA2 ON COA2.id = T.outputledgerid
	WHERE
		 T.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_tax_select`(
    IN p_id INT
)
BEGIN

	SELECT 
		 
         id, 
         taxcode, 
         taxname, 
         taxpercent, 
         taxtypeid, 
         combinedtaxes, 
         fnc_taxes_byids(combinedtaxes) as taxesname,
         inputledgerid, 
         outputledgerid, 
         companyid
         
	FROM
		tax 
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_tax_singletaxsearch`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		 
         id, 
         taxcode, 
         taxname, 
         taxpercent, 
         taxtypeid, 
         combinedtaxes, 
         fnc_taxes_byids(combinedtaxes) as taxesname,
         inputledgerid, 
         outputledgerid, 
         companyid
         
	FROM
		tax 
        
	WHERE
		 taxtypeid != 1545  -- Other than Combined taxtype
         AND  companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_test5_save`(
	IN p_id INT(11),
    IN p_fname VARCHAR(45),
	IN p_lname VARCHAR(45),
    IN p_city VARCHAR(45),
    IN p_mark DECIMAL(9,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT

)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO test5(id, fname, lname, city, mark, companyid)
    VALUES(p_id, p_fname, p_lname, p_city, p_mark, p_companyid);
        
        SET @action = 'INSERT';
        
        ELSE
    
		UPDATE test5
				SET id = p_id,
					fname = p_fname,
                    lname = p_lname,
                    city = p_city,
                    mark = p_mark,
                    companyid = p_companyid,
                    
					
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     

    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'test5',out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_test5_save1`(
	IN p_id INT(11),
    IN p_fname VARCHAR(45),
	IN p_lname VARCHAR(45),
    IN p_city VARCHAR(45),
    IN p_mark DECIMAL(9,3),
    IN p_companyid INT(11),
    OUT out_id INT
)
BEGIN

	INSERT INTO test5(id, fname, lname, city, mark, companyid)
    VALUES(p_id, p_fname, p_lname, p_city, p_mark, p_companyid);
    
    SELECT LAST_INSERT_ID() INTO out_id; 

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testgettemp1`()
BEGIN

	select * from temp1;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testjson1`(
	IN p_breederdailytransactionid INT,
    IN p_feedConsumption json,
    OUT out_id INT
)
BEGIN



   SET @i = 0;
    select JSON_LENGTH(p_feedConsumption) as length;
    WHILE @i < JSON_LENGTH(p_feedConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_feedConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = null; -- CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        set @issuedetailid = null;
     
            
           select JSON_EXTRACT(@str, CONCAT('$.issuedetailid')) = CAST('null' AS JSON);

       select if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,0);
        
        
         
        
        
		INSERT INTO breederdailyconsumption
				(
                 breederdailytransactionid, 
				 consumptiontypeid, 
                 itemid, 
                 breedertypeid, 
                 shedlineid, 
                 isherbal, 
                 standardconsumption,
                 quantity, 
                 issuedetailid,
                 companyid)
			VALUES 
				(
                CAST(p_breederdailytransactionid AS SIGNED INTEGER),
				CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))) AS SIGNED INTEGER),
				CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))) AS SIGNED INTEGER),
				CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.breedertypeid'))) AS SIGNED INTEGER),
				CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.shedlineid'))) AS SIGNED INTEGER),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
				CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))) AS DECIMAL(9,3)),
				CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))) AS DECIMAL(9,3)),
				
                if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
                
				CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))) AS SIGNED INTEGER)
                );
      
        
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
 
 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testmasterdetail_delete`(
IN p_id INT(11)

)
BEGIN
DELETE 
FROM		feedmill_testmasterdetail
WHERE		id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testmasterdetail_save`(

	IN p_id INT(11),
    IN p_testmasterid INT(11),
    IN p_startfrom DECIMAL(9,3),
    IN p_endto DECIMAL(9,3),
    IN p_resultid INT(11),
    IN p_testvalue VARCHAR(45),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

SET @action = null;
-- SET @p_startfrom = null;
-- SET @p_endto = null;

-- SET p_startfrom = IFNULL(p_startfrom, 0);
-- SET p_endto = IFNULL(p_endto, 0);

-- select p_startfrom;
-- select p_endto;

select IF(p_startfrom=0, null, p_startfrom); 
select IF(p_endto=0, null, p_endto); 


/*IF (p_startfrom = 0)  THEN 
     p_startfrom = null ;
   ELSE commands
      -- Execute These Statements ;
END IF; */

-- select p_startfrom;
-- select p_endto;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_testmasterdetail(id,testmasterid,startfrom,endto,resultid,testvalue,companyid)
        VALUES (p_id, p_testmasterid,(select IF(p_startfrom=0, null, p_startfrom)),(select IF(p_endto=0, null, p_endto)),p_resultid,p_testvalue,p_companyid);
        
        SET @action = 'INSERT';
        
        ELSE
        UPDATE feedmill_testmasterdetail
        SET testmasterid = p_testmasterid,
			companyid = p_companyid,
            id = p_id,
            startfrom = (select IF(p_startfrom=0, null, p_startfrom)),
            endto = (select IF(p_endto=0, null, p_endto)),
            resultid = p_resultid,
			testvalue = p_testvalue,
            companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
  CALL spc_commonlog_save(p_companyid, 'feedmill_testmasterdetail', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testmasterdetail_search`(
IN p_testmasterid INT(11)
)
BEGIN
SELECT TMD.id,
	   TMD.testmasterid,
       TMD.startfrom,
       TMD.endto,
       TMD.resultid,
       TMD.testvalue,
       REF.refname as result
           
    FROM feedmill_testmasterdetail TMD
    LEFT JOIN `reference` REF ON REF.id = TMD.resultid
    
    WHERE  
		  testmasterid = p_testmasterid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testmasterdetail_select`(
IN p_id INT(11),
IN p_companyid INT(11)
)
BEGIN
SELECT id,
		   testmasterid
				
	FROM feedmill_testmasterdetail

	WHERE companyid = p_companyid
	AND	id = p_id;            

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testmaster_delete`(
IN p_id INT(11)
)
BEGIN
	DELETE FROM feedmill_testmaster WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testmaster_save`(
	 IN p_id INT(11),
     IN p_testname VARCHAR(45),
     IN p_testtype INT(11),
     IN p_companyid INT(11),
     IN p_userid INT(11),
     OUT out_id INT
)
BEGIN

SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_testmaster(id, testname,testtype,companyid)
        VALUES (p_id, p_testname,p_testtype,p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_testmaster
        SET testname = p_testname,
			testtype = p_testtype,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_testmaster', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testmaster_search`(
IN p_companyid INT(11) 
)
BEGIN
SELECT TM.id,
		  TM. testname,
           TM.testtype, 
           REF.refname 
           
           
	FROM feedmill_testmaster TM
    LEFT JOIN `reference` REF ON REF.id = TM.testtype
    
    WHERE companyid = p_companyid
    order by id desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testmaster_select`( 
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN
SELECT id,
		   testname,
           testtype
           
	FROM  feedmill_testmaster
    
    WHERE companyid = p_companyid
    AND id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testpivot`()
BEGIN

DROP TABLE IF EXISTS test1;

CREATE TEMPORARY TABLE IF NOT EXISTS test1(shedid INT, line INT , typeid INT, quantity INT);
TRUNCATE TABLE test1;

insert into test1 (shedid, line, typeid, quantity) values (1, 1, 1, 100);
insert into test1 (shedid, line, typeid, quantity) values (1, 1, 2, 10);
insert into test1 (shedid, line, typeid, quantity) values (1, 2, 1, 60);
insert into test1 (shedid, line, typeid, quantity) values (1, 2, 2, 6);
insert into test1 (shedid, line, typeid, quantity) values (2, 1, 1, 4000);
insert into test1 (shedid, line, typeid, quantity) values (2, 1, 2, 1000);
insert into test1 (shedid, line, typeid, quantity) values (2, 2, 1, 3500);
insert into test1 (shedid, line, typeid, quantity) values (2, 2, 2, 800);

select * from test1;


select 
	shedid, line,
		MAX(IF(typeid = 1, quantity, NULL)) AS malequantity,
        MAX(IF(typeid = 2, quantity, NULL)) AS femalequantity
 from (

	select shedid, line, typeid, quantity
	from test1 
) test11
group by shedid, line;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testresultregisterreport_search`(
IN p_fromdate date,
IN p_todate date,
IN p_companyid INT(11) )
BEGIN
SELECT      FTMD.id,
			FTMD.startfrom,
            FTMD.endto,
            FTMD.resultid,
            FTM.id,
            FTM.testname,
			REF.refname as result,
			DATE_FORMAT(FQC.qualitycheckdate,'%d/%m/%Y') as qualitycheckdate,
            FQD.itemid,
            FQD.finding,
            I.itemname
            
       FROM  feedmill_testmasterdetail FTMD
		LEFT JOIN `reference` REF ON REF.id = FTMD.resultid
	    LEFT JOIN feedmill_qualitycheckdetail FQD ON FTMD.resultid  = FQD.resultid
        LEFT JOIN item I  ON FQD.itemid = I.id
		LEFT JOIN feedmill_testmaster FTM  ON FTMD.testmasterid = FTM.id
		LEFT JOIN feedmill_qualitycheck FQC  ON FQD.qualitycheckid = FQC.id
       WHERE
       
       FQC.qualitycheckdate BETWEEN p_fromdate AND p_todate 
	   AND FTMD.companyid = p_companyid;



END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testresultregister_search`(
IN p_fromdate date,
IN p_todate date,
IN p_companyid INT(11) )
BEGIN
SELECT		
			DATE_FORMAT(FQC.qualitycheckdate,'%d/%m/%Y') as qualitycheckdate,
			FQD.finding,
            FQD.resultid,
            FQD.testid,
            FQD.itemid,
            FTMD.startfrom,
            FTMD.endto,
            FTM.testname,
			REF.refname as result,
            I.itemname
FROM  feedmill_qualitycheck FQC

	
    LEFT JOIN feedmill_qualitycheckdetail FQD ON FQC.id  = FQD.qualitycheckid
	LEFT JOIN feedmill_testmasterdetail FTMD  ON FQD.testid = FTMD.testmasterid
    LEFT JOIN `reference` REF ON REF.id = FTMD.resultid
	LEFT JOIN feedmill_testmaster FTM  ON FQD.testid = FTM.id
    LEFT JOIN item I  ON FQD.itemid = I.id
    
	
       WHERE
       
       FQC.qualitycheckdate BETWEEN p_fromdate AND p_todate 
	   AND FQC.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testresult_byfinding`(
IN p_testid INT(11),
In p_finding DECIMAL(9,3),
IN p_companyid INT(11)

)
BEGIN
SET @@sql_mode = '';
SELECT

TMD.resultid,
REF.refname as result

FROM feedmill_testmasterdetail TMD
LEFT JOIN `reference` REF ON REF.id  = TMD.resultid

WHERE 
 TMD.testmasterid = p_testid  AND
 p_finding BETWEEN startfrom AND endto
 AND TMD.companyid = p_companyid
 
 group by TMD.testmasterid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testresult_byvalue`(
IN p_testid INT(11),
In p_testvalue VARCHAR(45),
IN p_companyid INT(11)

)
BEGIN
SET @@sql_mode = '';
SELECT

TMD.resultid,
REF.refname as result

FROM feedmill_testmasterdetail TMD
LEFT JOIN `reference` REF ON REF.id  = TMD.resultid

WHERE 
 TMD.testmasterid = p_testid  AND
 TMD.testvalue = p_testvalue
 AND TMD.companyid = p_companyid
 
 group by TMD.testmasterid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testtemplatedetail_delete`(
IN p_id INT(11)
)
BEGIN

DELETE 
FROM		feedmill_testtemplatedetail
WHERE		id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testtemplatedetail_save`(
	IN p_id INT(11),
    IN p_testtemplateid INT(11),
    IN p_testid INT(11),
    IN p_testname VARCHAR(100),
    IN p_deduction DECIMAL(9,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT

)
BEGIN

SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_testtemplatedetail(id,testtemplateid,testid,testname,deduction,companyid)
        VALUES (p_id, p_testtemplateid,p_testid,p_testname,p_deduction,p_companyid);
        
        SET @action = 'INSERT';
        
        ELSE
        UPDATE feedmill_testtemplatedetail
        SET testtemplateid = p_testtemplateid,
			companyid = p_companyid,
            id = p_id,
            testid = p_testid,
            testname = p_testname,
            deduction = p_deduction,
            companyid = p_companyid,
            
            
            
            
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_testtemplatedetail', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testtemplatedetail_search`(
IN p_testtemplateid INT(11)
)
BEGIN

	SELECT TTD. id,
		   TTD.testtemplateid,
           TTD.testid,
           TTD.testname,
           TTD.deduction
           
    FROM   feedmill_testtemplatedetail TTD
    
    
    WHERE  
		  TTD.testtemplateid = p_testtemplateid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testtemplatedetail_select`(
IN p_id INT(11),
IN p_companyid INT(11)
)
BEGIN

	SELECT id,
		   testtemplateid
				
	FROM feedmill_testtemplatedetail

	WHERE companyid = p_companyid
	AND	id = p_id;            

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testtemplatedetail_selfjoin`(

)
BEGIN
SELECT testtemplate.id,testtemplate.itemid,testtemplatedetail.testname  
FROM    testtemplate
INNER JOIN testtemplatedetail  
ON testtemplate.id = testtemplatedetail.testtemplateid;  




END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testtemplatelist_search`(
	IN p_item INT(11)
)
BEGIN

	SELECT TT.id,
		   TT.itemid,
           I.itemname
           
	FROM feedmill_testtemplate TT
    LEFT JOIN item I ON I.id = TT.itemid
    
    WHERE TT.itemid = p_item;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testtemplate_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM feedmill_testtemplate WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testtemplate_save`(
	 IN p_id INT(11),
     IN p_itemid INT(11),
     IN p_companyid INT(11),
     IN p_userid INT(11),
     OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_testtemplate(id, itemid, companyid)
        VALUES (p_id, p_itemid, p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_testtemplate
        SET itemid = p_itemid,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_testtemplate', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testtemplate_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT TT.id,
		   TT.itemid,
           I.itemname
           
	FROM feedmill_testtemplate TT
    LEFT JOIN item I ON I.id = TT.itemid
    
    WHERE TT.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_testtemplate_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT TT.id,
		   TT.itemid,
           I.itemname,
           I.itemcode
           
	FROM feedmill_testtemplate TT
    LEFT JOIN item I ON I.id = TT.itemid
    
    WHERE TT.companyid = p_companyid
    AND TT.id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_transactionwise_jaurnalentry_search`(
 IN p_company_id INT(11),
 IN p_transaction_id INT(11),
 IN p_voucher_type_id INT(11))
BEGIN
	SELECT JE.vouchertypeid,
		   REF.refname,
		   JE.id,
		   JE.vouchermodeid, 
           DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate, 
           DATE_FORMAT(JE.bankdate,'%d/%m/%Y') as bankdate,
           JE.chequeno, 
           DATE_FORMAT(JE.chequedate,'%d/%m/%Y') as chequedate, 
           JE.byhand, 
           JE.partyid, 
           JE.partycode, 
           JE.subledgertypeid, 
		   JE.approvestatusid, 
           JE.journalentrysubject, 
           JE.addressto, 
		   JE.financialyear, 
           JE.bankid, 
           JE.narration,
           B.bankname,
           CB.branchname,
           AD.dimensionname,
           P.partyname,
           JE.moduleid,
           JE.jeno
           
    FROM journalentry JE 
    LEFT JOIN `reference` REF ON JE.vouchertypeid = REF.id
    LEFT JOIN bank B ON B.id = JE.bankid
    LEFT JOIN commonbranch CB ON CB.id = JE.branchid
    LEFT JOIN party P ON P.id = JE.partyid
    LEFT JOIN accounts_dimension AD ON AD.id = JE.dimensionid
    
    WHERE JE.companyid = p_company_id AND JE.vouchertypeid = p_voucher_type_id AND transactionid = p_transaction_id;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_transfertohatcher_report`(
IN p_fromdate DATE,
IN p_todate DATE,
IN p_companyid INT(11)
)
BEGIN

SET @@sql_mode = ' ';
select 
		H.id as hatcherid,
        HB.setterid as setterno,
        HB.setterslotid as slotno,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as batchdate,
        HB.id as batchid,
        H.hatchername,
        REF.refname,
        H.locationid,
        H.warehousebinid,
        WB.binname as hatchermachine,
        WB1.binname as settermachine,
        L.locationname as locationname,
        S.settername,
        SS.slotname,
        SB.sourceid,
        HSD.plannedquantity as noofeggset,
        HB.actualquantity as transferqty,
        SB.crackedquantity as crackedquantity,
        ((SB.crackedquantity/SB.availablequantity)*100)as crackper
        
        
        
from hatcher H
LEFT JOIN hatcherbatch HB ON HB.hatcherid = H.id
LEFT JOIN setterbatch SB ON SB.id = HB.setterbatchid
LEFT JOIN hatcheryscheduledetail HSD ON HSD.setterid = SB.setterid
LEFT JOIN setter S ON S.id = HB.setterid
LEFT JOIN setterslots SS ON SS.id = HB.setterslotid
LEFT JOIN `reference` REF ON SB.sourceid = REF.id
LEFT JOIN warehousebin WB ON WB.id = H.warehousebinid
LEFT JOIN warehousebin WB1 ON WB1.id = S.warehousebinid
LEFT JOIN location L ON L.id = H.locationid


where    
HB.batchdate BETWEEN p_fromdate AND p_todate
AND H.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_treatmenttype_delete`(  
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM treatmenttype WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'treatmenttype', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_treatmenttype_save`(
 IN p_id INT(11),
 IN p_treatmenttype VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO treatmenttype
              (treatmenttype, companyid)
       VALUES
            (p_treatmenttype, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE treatmenttype 
   
	SET treatmenttype = p_treatmenttype,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'treatmenttype', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_treatmenttype_search`(
IN p_companyid INT(11)
)
BEGIN

	SELECT id, treatmenttype, companyid
           
	FROM treatmenttype
    
    WHERE 
		companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_treatmenttype_select`(  
 IN p_id INT(11)
)
BEGIN

	SELECT id, treatmenttype, companyid
           
	FROM treatmenttype
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_uniformitydetail_ddl`(
IN p_companyid INT
)
BEGIN

	 SELECT 
     DATE_FORMAT(UF.date,'%d/%m/%Y') as date
     
     FROM uniformitydetail UF
     
	 WHERE UF.companyid = p_companyid 
     
	 GROUP BY UF.date 
	 ORDER BY UF.date DESC;
 END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_uniformitydetail_deleteondate`(
	IN p_date date
)
BEGIN

	SET SQL_SAFE_UPDATES = 0;
    
	DELETE FROM uniformitydetail WHERE date = p_date;
    DELETE FROM uniformitylocation WHERE date = p_date;
    
    SET SQL_SAFE_UPDATES = 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_userlicense_save`(
	IN p_userid INT,
    IN p_licenses VARCHAR(1000),
    OUT out_id INT
)
BEGIN
    
     -- Get and Split selected ProductIds for Company
    
		DROP TEMPORARY TABLE IF EXISTS tblSubscriptionIds;
		CREATE TEMPORARY TABLE tblSubscriptionIds( subscriptionid int );
     
        SET @Occurrences = LENGTH(p_licenses) - LENGTH(REPLACE(p_licenses, ',', ''));
        
        myloop: WHILE (@Occurrences >= 0)
        DO 
            SET @myValue = SUBSTRING_INDEX(p_licenses, ',', 1);
            IF (@myValue != '') THEN
				
				INSERT INTO tblSubscriptionIds VALUES(@myValue);
            ELSE
                LEAVE myloop; 
            END IF;
            SET @Occurrences = LENGTH(p_licenses) - LENGTH(REPLACE(p_licenses, ',', ''));
            IF (@occurrences = 0) THEN 
                LEAVE myloop; 
            END IF;
            SET p_licenses = SUBSTRING(p_licenses,LENGTH(SUBSTRING_INDEX(p_licenses, ',', 1))+2);
        END WHILE;                  
	
    
    
	-- select * from tblSubscriptionIds;
    
    INSERT INTO userlicense (userid, companysubscriptionid, roleid)
       SELECT p_userid, P.subscriptionid, R.id FROM tblSubscriptionIds P
	   LEFT JOIN userlicense CP ON CP.userid = p_userid AND P.subscriptionid = CP.companysubscriptionid
       LEFT JOIN companysubscription CS ON CS.id = P.subscriptionid
       LEFT JOIN role R ON R.licensetypeid = CS.licensetypeid
	   WHERE CP.id IS NULL;
       
       
    -- Delete records which are not in ProductIds List
    
	SET SQL_SAFE_UPDATES = 0;

	DELETE FROM userlicense where id in(
		
        SELECT temp.id FROM (
			SELECT id FROM userlicense
				WHERE userid = p_userid AND companysubscriptionid IN 
				(
				SELECT companysubscriptionid FROM userlicense WHERE userid = p_userid and companysubscriptionid NOT IN (SELECT subscriptionid from tblSubscriptionIds)
				) 	
			) as temp
        );
   
   SET SQL_SAFE_UPDATES = 1;
    
    
    SELECT p_userid INTO out_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_user_assignlicense`(
	IN p_companyid INT
)
BEGIN

	SELECT 
		id,
		username,
		fnc_user_assignedlicenses(id) as licenses,
        fnc_user_assignedsubscriptionids(id) as subscriptionids
    FROM 
		user1
	WHERE
		active = 1 AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_user_createdfor`(
	IN p_userid INT
)
BEGIN

		SET @userrole = "";
        
        SELECT `description` INTO @userrole FROM user1 UR
        INNER JOIN userlicense UL ON UR.id = UL.userid
        INNER JOIN `role` R ON UL.roleid = R.id
        WHERE UR.id = p_userid;
        
        
        SET @userrole = REPLACE(@userrole, 'Manager', '');
        SET @userrole = REPLACE(@userrole, 'Executive', '');
        
		SELECT UR.id, username, mobile, email, rolename, R.description AS rolefullname, userkey
        FROM user1 UR
        INNER JOIN userlicense UL ON UR.id = UL.userid
        INNER JOIN `role` R ON UL.roleid = R.id
        LEFT JOIN `notificationuser` NU ON UR.id = NU.userid
        WHERE (UR.id = p_userid OR rolename = 'AD' OR INSTR(UPPER(description), @userrole));
		-- AND userkey IS NOT NULL;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_user_delete`(
IN p_id INT
)
BEGIN
	DELETE FROM `user1` WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_user_keyshortcuts_save`(
 IN p_id INT(11),
 IN p_roleid INT(11),
 IN p_key VARCHAR(45),
 IN p_pagekey VARCHAR(200),
 IN p_pagename VARCHAR(200),
 IN p_companyid INT(11),
 OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO user_keyshortcuts(id, roleid, `key`, pagekey, pagename, companyid)
        VALUES (p_id, p_roleid, p_key, p_pagekey, p_pagename, p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE user_keyshortcuts
        SET roleid = p_roleid,
			`key` = p_key, 
			pagekey = p_pagekey, 
			pagename = p_pagename, 
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_user_keyshortcuts_search`(
IN p_roleids VARCHAR(100),
IN p_companyid INT(11))
BEGIN
	SELECT
		UK.id,
        UK.roleid,
        UK.`key`,
        UK.pagekey,
        UK.pagename,
        R.description
        
	FROM user_keyshortcuts UK
    LEFT JOIN role R ON R.id = UK.roleid
    WHERE  FIND_IN_SET(UK.roleid, p_roleids)
    AND  UK.companyid = p_companyid;
			

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_user_login`(
	IN p_username VARCHAR(200),
    IN p_pwd VARCHAR(100),
    IN p_companyid INT
)
BEGIN
 
	SET @invalidcompanyuser = null;
    SET @isinactiveuser = null;
    SET @isuserlocked = null;
    SET @invalidpwd = null;
    SET @accesstoken = null;
        
	-- Check Valid Username for Company
    
    IF EXISTS( SELECT id FROM `user1` WHERE mobile = p_username AND companyid = p_companyid ) THEN
	    
        SELECT  
			p_username as username,
            -- Check User is active
            @isinactiveuser:= CASE WHEN active != 1 THEN 1 ELSE NULL END as inactiveuser,
            -- Check User is locked
            @isuserlocked:= CASE WHEN locked = 1 THEN 1 ELSE NULL END as userlocked,
            -- Check User has correct Password
            @invalidpwd:= CASE WHEN pwd != COMPRESS(p_pwd) THEN 1 ELSE NULL END as invalidpwd,
            
            @accesstoken:= CASE WHEN accesstoken != NULL THEN 1 ELSE NULL END as accesstoken,
        
			null as invalidcompanyuser
        
        FROM (
				SELECT 
					accesstoken, username, mobile, pwd, active, locked, companyid 
				FROM 
					`user1`
				WHERE mobile = p_username AND companyid = p_companyid
                
        ) AS tblUser;
	
    ELSE
    
		SET @invalidcompanyuser:= 1;
        
        SELECT 	p_username as username,
				@invalidcompanyuser AS invalidcompanyuser, 
				@isinactiveuser AS inactiveuser, 
				@isuserlocked AS userlocked, 
				@invalidpwd AS invalidpwd,
				@accesstoken as accesstoken;
    END IF;
    
    
    -- IF User is valid get User details
  
	IF(@invalidcompanyuser IS NULL &&  @isinactiveuser IS NULL 
            && @isuserlocked IS NULL && @isuserlocked IS NULL && @invalidpwd IS NULL) THEN
			SELECT UR.id, UR.username, UR.mobile, UR.companyid, UR.email, 
				   companyname, C.address, C.city, C.pincode, C.email as companyemail, 
				   C.contactno1 as companycontact, C.contactno2, C.faxnumber, companycode, UR.accesstoken, 
				fnc_user_roleids(UR.id) as roleids,
				fnc_user_rolenames(UR.id) as rolenames
			FROM `user1` UR
			left join company C ON UR.companyid = C.id
			WHERE
				mobile = p_username AND companyid = p_companyid  AND pwd = COMPRESS(p_pwd);
    END IF;
	

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_user_logout`(
	IN p_userid INT,
    IN p_companyid INT
)
BEGIN

	UPDATE user1 SET accesstoken = null
    WHERE id = p_userid AND companyid = p_companyid;
    
     SELECT accesstoken from user1 where id = p_userid AND companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_user_permissions`(
	IN p_userid INT,
    IN p_companyid INT
)
BEGIN

		SELECT 
			RA.roleid as r, 
			RA.entityid as e, 
            E.displayname as dn, 
            E.pagekey as pk, 
            RA.entitytypeid as et, 
            RA.permissions as p, 
            RA.checked as c, 
            RA.parentid as pr
        FROM roleaccess RA
        
        INNER JOIN entity E ON E.id = RA.entityid
		INNER JOIN userlicense UL ON RA.roleid = UL.roleid
        INNER JOIN user1 U ON U.id = UL.userid
        WHERE UL.userid = p_userid AND U.companyid = p_companyid ;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_user_resetpassword`(
	IN p_id INT(11),
    IN p_password VARCHAR(100),
    IN p_companyid INT(11),
    OUT out_id INT
)
BEGIN

	UPDATE `user1`
			SET pwd = COMPRESS(p_password)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
	SELECT 1 INTO out_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_user_save`(
	IN p_id INT,
    IN p_username VARCHAR(200),
    IN p_mobile VARCHAR(20),
    IN p_imei VARCHAR(20),
    IN p_email VARCHAR(200),
    IN p_pwd VARCHAR(50),
    IN p_active TINYINT,
    IN p_locked TINYINT,
    IN p_userid INT,
    IN p_companyid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO `user1`
				(id, username, mobile, imei, email, pwd, active, locked, createdby, createddate, companyid)
			VALUES 
				(p_id, p_username,p_mobile, p_imei, p_email, COMPRESS(p_pwd), p_active, p_locked, p_userid, NOW(), p_companyid);
		
         SET @action = 'INSERT';
        
	ELSE
    
		UPDATE `user1`
			SET username = p_username, 
                mobile = p_mobile, 
                imei = p_imei,
                email = p_email,
                active = p_active,
                locked = p_locked,
                createdby = p_userid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
          
		IF NULLIF(p_pwd, '') IS NOT NULL THEN
			
            UPDATE `user1`
				SET pwd = COMPRESS(p_pwd)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
        END IF;
                
		SET @action = 'UPDATE';     
    
	END IF;
    
	SELECT LAST_INSERT_ID() INTO out_id;

	-- RECORD LOG
   CALL spc_commonlog_save(p_companyid, 'user', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_user_search`(
IN p_companyid INT
)
BEGIN
	SELECT
		`id`,
		`username`,
		`mobile`,
		`imei`,
        `email`,
		`active`,
		`locked`,
		`companyid`
	FROM `user1`
	WHERE
		companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_user_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	SELECT
		`id`,
		`username`,
		`mobile`,
		`imei`,
        `email`,
		`active`,
		`locked`,
		`companyid`
	FROM
		`user1`
	WHERE 
		id = p_id 
        AND companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_vaccination_report`(
p_locationid VARCHAR(255),
p_batchid VARCHAR(255)
)
BEGIN
SET @batchname= null;
select CPO.itembatchid INTO @batchname
FROM chickspullout CPO where  CPO.hatchbatchid= p_batchid;

SET @batchname = CONCAT(@batchname,'-V');

select @batchname;

select
      CPO.locationid,
      CPO.hatchbatchid,
      CPO.setterbatchid,
      CPO.pulloutdate as hatchdate,
      CPO.totalhatch,
      CPO.itemid,
      CPO.itembatchid,
      MRD.itembatch,
      MRD.receiptquantity,
      MRD.totalcost,
      MRD.itemunitid,
      MR.approveddate as vaccinationdate,
      L.locationname
      
FROM chickspullout CPO
LEFT JOIN materialreceiptdetail MRD ON MRD.itembatch = @batchname and JSON_EXTRACT(MRD.batchattribute , '$.doc_type') = 'vaccinated' 
LEFT JOIN materialreceipt MR ON MRD.materialreceiptid = MR.id
-- LEFT JOIN materialreceiptdetail MRD1 ON MRD1.itembatch = 
LEFT JOIN location L ON L.id = CPO.locationid
WHERE
 CPO.hatchbatchid= p_batchid; 
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_vacinatedchicks_save`(
		IN p_vaccinationDate DATE,
		IN p_materialreceiptdetailid INT,
		IN p_warehouseid INT,
		IN p_itemid INT,
		IN p_vaccinequantity DECIMAL(12,3),
		IN p_docstandardcost DECIMAL(12,3),
        IN p_vaccinateddoccost DECIMAL(12,3),
		IN p_totalcost DECIMAL(12,3),
		IN p_itembatch VARCHAR(100),
        IN p_vaccineitemid INT,
		IN p_vaccinecost DECIMAL(9,3),
		IN p_vaccineqty DECIMAL(12,3),
		IN p_totalvaccinecost DECIMAL(12,3),
		IN p_userid INT,
		IN p_companyid INT
)
BEGIN
	
    -- Material Issue from Itembatch for DOC item
		SET @out_issueid = NULL;
		CALL spc_materialissue_save(
			NULL, p_vaccinationDate, 382, p_materialreceiptdetailid, 362, NULL,
			p_userid, p_warehouseid, 
            (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
            p_userid, p_vaccinationDate,
			p_companyid, p_userid, @out_issueid
		);
                            
		-- Itembatch details
		SET @out_issuedetailid = NULL;
		CALL spc_materialissuedetail_save(
			NULL, @out_issueid, p_itemid, (SELECT itemname FROM item WHERE id = p_itemid),
			p_vaccinequantity, p_docstandardcost, 
			(p_vaccinequantity * p_docstandardcost),
			NULL, p_itembatch,
			p_companyid, p_userid, @out_issuedetailid
		);

	 UPDATE materialreceiptdetail SET receiptquantity = receiptquantity - p_vaccinequantity WHERE id = p_materialreceiptdetailid;

	-- material movement entry for DOC material issue
	SET @out_movid1 = NULL;
	CALL spc_materialmovement_save(
		NULL, p_itemid, p_itembatch, 683,
		@out_issueid, p_vaccinationDate, p_vaccinequantity,
		p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
        p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
		(p_vaccinequantity * p_docstandardcost),
		p_companyid, p_userid, @out_movid1
	);
    
    -- Make material issue entry for vaccine item
		SET @out_issueid1 = NULL;
		CALL spc_materialissue_save(
			NULL, p_vaccinationDate, 382, p_materialreceiptdetailid, 362, NULL,
			p_userid, p_warehouseid, 
            (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
            p_userid, p_vaccinationDate,
			p_companyid, p_userid, @out_issueid1
		);
                            
		-- Itembatch details
		SET @out_issuedetailid1 = NULL;
		CALL spc_materialissuedetail_save(
			NULL, @out_issueid1, p_vaccineitemid, 
            (SELECT itemname FROM item WHERE id = p_vaccineitemid),
			p_vaccineqty, p_vaccinecost, p_totalvaccinecost,
			NULL, p_itembatch,
			p_companyid, p_userid, @out_issuedetailid1
		);

	
		-- material movement entry for vaccine material issue
		SET @out_movid3 = NULL;
		CALL spc_materialmovement_save(
			NULL, p_vaccineitemid, p_itembatch, 683,
			@out_issueid1, p_vaccinationDate, p_vaccineqty,
			p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
			p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
			p_totalvaccinecost, p_companyid, p_userid, @out_movid3
		);
    
    -- Make material receipt entry for vaccinated DOC
		SET @out_recid = NULL;
		CALL spc_materialreceipt_save(
			NULL, p_vaccinationDate, 342, p_materialreceiptdetailid, 322, NULL,
			p_userid, p_userid, p_vaccinationDate, p_companyid,
			p_userid, @out_recid
		);
        
		SET @batchname = CONCAT(p_itembatch,'-V');
		-- SET @series = 2;
		
        -- Material receipt detail entry
        SET @out_recdetailid = NULL;
		
		IF (!EXISTS(SELECT 1 FROM materialreceiptdetail where itembatch like CONCAT(@batchname, '%'))) THEN
        
			CALL spc_materialreceiptdetail_save(
				NULL, @out_recid, p_itemid, (SELECT itemname FROM item WHERE id = p_itemid), 
				p_vaccinequantity, p_vaccinateddoccost, 
				p_totalcost,
				(SELECT itemunitid FROM item WHERE id = p_itemid), @batchname,
				p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
                p_companyid,
				p_userid, '{"doc_type" : "vaccinated"}', @out_recdetailid
			);
            
            -- Make material movement entry for material receipt
			SET @out_movid2 = NULL;
			CALL spc_materialmovement_save(
				NULL, p_itemid, CONCAT(@batchname), 684,
				@out_recid, p_vaccinationDate, p_vaccinequantity,
				p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
                p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
				p_totalcost,
				p_companyid, p_userid, @out_movid2
			);
			
		ELSE
			SET @seriesbatchname = null;
            SELECT itembatch INTO @seriesbatchname FROM materialreceiptdetail where itembatch LIKE CONCAT(@batchname, '%') ORDER BY id DESC LIMIT 1;
            
            SELECT REPLACE(@seriesbatchname, CONCAT(p_itembatch,'-V'), '') INTO @seriesbatchname;
            
            IF(@seriesbatchname = '') THEN
				SET @seriesbatchname = CONCAT(p_itembatch,'-V',2);
                
			else
				SET @seriesbatchname = CONCAT(p_itembatch,'-V',(@seriesbatchname+1));
            END IF;
            
			CALL spc_materialreceiptdetail_save(
				NULL, @out_recid, p_itemid, (SELECT itemname FROM item WHERE id = p_itemid LIMIT 1), 
				p_vaccinequantity, p_vaccinateddoccost, 
				p_totalcost,
				(SELECT itemunitid FROM item WHERE id = p_itemid LIMIT 1), @seriesbatchname,
				p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
                p_companyid,
				p_userid, '{"doc_type" : "vaccinated"}', @out_recdetailid
			);
            
            
            -- Make material movement entry for material receipt
			SET @out_movid2 = NULL;
			CALL spc_materialmovement_save(
				NULL, p_itemid, @seriesbatchname, 684,
				@out_recid, p_vaccinationDate, p_vaccinequantity,
				p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
                p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
				p_totalcost,
				p_companyid, p_userid, @out_movid2
			);
			
			-- SET @series = @series + 1;
			
		END IF;
		

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehousebin_defaultbin`(
	IN p_warehouseid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,bincode, binname
    
    FROM warehousebin
    
    WHERE isdefault = 1
    AND companyid = p_companyid
    AND warehouseid = p_warehouseid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehousebin_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM warehousebin WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehousebin_dll`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		  id,
          binname,
          bincode
         
    FROM
		warehousebin 
	

	WHERE
		 companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehousebin_save`(
    IN p_id INT,
    IN p_warehouseid INT,
    IN p_bincode VARCHAR(100),
    IN p_binname VARCHAR(200),
    IN p_companyid INT,
    IN p_isdefault TINYINT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	
    SET @action = null;
    
    IF EXISTS(
            SELECT binname from warehousebin where LOWER(binname) = LOWER(p_binname)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    
		BEGIN
		
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO warehousebin 
						(id, warehouseid, bincode, binname, companyid, isdefault)
					VALUES 
						(p_id, p_warehouseid, p_bincode, p_binname, p_companyid, p_isdefault);

					SET @action = 'INSERT';

			ELSE
			
				UPDATE warehousebin
					SET warehouseid = p_warehouseid,
						bincode = p_bincode, 
						binname = p_binname,
						companyid = p_companyid,
						isdefault = p_isdefault,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
						
					SET @action = 'UPDATE';
			END IF;
			SELECT LAST_INSERT_ID() INTO out_id; 
			
			-- record log
		   CALL spc_commonlog_save(p_companyid, 'warehousebin', out_id, @action, p_userid);

		END;
        
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehousebin_search`(
    IN p_warehouseid INT
)
BEGIN
    
    SELECT
		 WB.id,
         W.warehousename,
         bincode,
         binname,
		 isdefault,
		 displayorder
         
    FROM
		warehousebin WB
	
    LEFT JOIN warehouse W ON WB.warehouseid = W.id
   	
	WHERE
		WB.warehouseid = p_warehouseid;
     
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehousebin_select`(
	IN p_id INT
)
BEGIN

	SELECT
		WB.id,
		WB.warehouseid,
        W.warehousename,
        WB.bincode,
        WB.binname,
        L.locationname
        
	FROM
		warehousebin WB
        LEFT JOIN warehouse W ON W.id = WB.warehouseid
        LEFT JOIN location L ON L.id = W.locationid
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND WB.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehousebin_stock`(
	IN p_shedid INT
)
BEGIN
	SET @warehousebinid = null;
    
	SELECT warehousebinid INTO @warehousebinid
    FROM cbf_farmerenquiry_sheddimensiondetail
    WHERE id = p_shedid;
    
	DROP TEMPORARY TABLE IF EXISTS warehousebinstock;
	CREATE TEMPORARY TABLE warehousebinstock
	SELECT I.itemname, WB.binname,
	fnc_iteminstock(MM.itemid,MM.towarehousebinid,15) as instock

	 FROM materialmovement MM
	 LEFT JOIN item I ON I.id = MM.itemid
	 LEFT JOIN warehousebin WB ON WB.id = MM.towarehousebinid
	 
	 
	WHERE 
	find_in_set(towarehousebinid,@warehousebinid) 
	group by itemid,towarehousebinid;


	 SELECT itemname,binname,instock
	 FROM 
	  warehousebinstock;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehousewisebreederbatch_select`(
	IN p_companyid INT,
    IN p_warehouseid INT
)
BEGIN
    
    SELECT
		BB.id as breederbatchid,
        BB.warehouseid,
        W.warehousename,
        BB.batchname as breederbatchname,
        BB.locationid,
        L.locationname
	
    FROM
		breederbatch BB
        LEFT JOIN warehouse W ON BB.warehouseid = W.id
        LEFT JOIN location L ON BB.locationid = L.id
	
	WHERE
		BB.warehouseid = p_warehouseid and
		BB.companyid = p_companyid;
      

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehousewise_bomdetail_search`(
IN p_bomid INT(11),
IN p_warehouseid INT(11),
IN p_transactiondate DATE,
In p_companyid INT(11)
)
BEGIN
SELECT
	   BOMD.id,
	   BOMD.bomid,
       BOMD.itemid,
       BOMD.quantity,
       BOMD.unitid,
       BOMD.unitcost,
       BOMD.parentid,
       BOMD.materialtypeid,
	   I.itemname,
       I1.itemname as parentitemname,
	   R.refname as itemunitname,
       R1.refname as materialtype,
       fnc_feedmill_livestock(p_transactiondate,p_warehouseid,BOMD.itemid,p_companyid) as itemstockqty
   
           
    FROM feedmill_billofmaterialdetail BOMD
	LEFT JOIN item I ON BOMD.itemid = I.id
    LEFT JOIN item I1 ON BOMD.parentid = I1.id
    LEFT JOIN `reference` R ON BOMD.unitid = R.id
	LEFT JOIN `reference` R1 ON BOMD.materialtypeid = R1.id
    
    
    WHERE  
		  bomid = p_bomid;
          
          


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehouse_bylocation_report`(
IN p_locationid varchar(265),
IN p_companyid INT(11)
    )
BEGIN

SELECT
		  W.id,
          warehousename,
          warehousecode,
          W.locationid,
          W.companyid,
          L.locationname
         
    FROM
		warehouse W
        LEFT JOIN location L ON W.locationid = L.id
	

	WHERE
		
		 FIND_IN_SET(W.locationid, p_locationid) AND
         W.companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehouse_bylocation_search`(
	IN p_companyid INT,
    IN p_locationid varchar(1000)
   
)
BEGIN
    
    SELECT
		  W.id,
          warehousename,
          warehousecode,
          W.locationid,
          W.companyid,
          L.locationname
         
    FROM
		warehouse W
        
        LEFT JOIN location L ON W.locationid = L.id
	

	WHERE
		
         FIND_IN_SET( W.locationid,  p_locationid)AND
         W.companyid = p_companyid AND
         W.`active` = 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehouse_bymoduleandlocation_search`(
	IN p_companyid INT,
    IN p_moduleid INT,
    IN p_locationid INT
   
)
BEGIN
    
    SELECT
		  W.id,
          warehousename,
          warehousecode,
          W.locationid,
          W.companyid,
          L.locationname
         
    FROM
		warehouse W
        LEFT JOIN location L ON W.locationid = p_locationid

	WHERE
		 -- W.moduleid = p_moduleid AND
       FIND_IN_SET(p_moduleid,W.moduleid)  AND
         W.companyid = p_companyid AND
         W.`active` = 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehouse_bymodule_search`(
	IN p_companyid INT,
    IN p_moduleid INT
   
)
BEGIN
    
    SELECT
		  W.id,
          warehousename,
          warehousecode,
          W.locationid,
          W.companyid,
          L.locationname
         
    FROM
		warehouse W
        LEFT JOIN location L ON W.locationid = L.id

	WHERE
		 -- W.moduleid = p_moduleid AND
       FIND_IN_SET(p_moduleid,W.moduleid)  AND
         W.companyid = p_companyid AND
         W.`active` = 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehouse_bysalesorder_search`(
  IN p_salesorderid INT,
  IN p_companyid INT
)
BEGIN
	IF((SELECT moduleid FROM breeder_birdsalesorder WHERE id = p_salesorderid) = 721) THEN
		SELECT 
			BS.warhouseid as warehouseid, W.warehousename FROM  breeder_birdsalesorderdetail BSOD
		LEFT JOIN breedershed BS ON BS.id = BSOD.shedid
		LEFT JOIN warehouse W ON W.id = BS.warhouseid
		where
			BSOD.breederbirdsalesorderid = p_salesorderid 
			AND BSOD.companyid = p_companyid
			group by BS.warhouseid;
	END IF;
    
	IF((SELECT moduleid FROM breeder_birdsalesorder WHERE id = p_salesorderid) = 725) THEN
		SELECT 
			BS.warehouseid as warehouseid, W.warehousename FROM  breeder_birdsalesorderdetail BSOD
		LEFT JOIN layershed BS ON BS.id = BSOD.shedid
		LEFT JOIN warehouse W ON W.id = BS.warehouseid
		where
			BSOD.breederbirdsalesorderid = p_salesorderid 
			AND BSOD.companyid = p_companyid AND
			W.`active` = 1
			group by BS.warehouseid;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehouse_ddl`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 id,
         warehousename
	
    FROM
		warehouse 
   	
	WHERE
		 companyid = p_companyid AND
         `active` = 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehouse_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM warehouse WHERE id = p_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehouse_from_breeder_eggscollection`(
 IN p_breeder_batch_id INT(11))
BEGIN
   SELECT EC.towarehouseid as fromwarehouseid , WH.warehousename as fromwarehousename
   FROM eggscollection EC
   Inner JOIN warehouse WH ON WH.id = EC.towarehouseid 
   WHERE breederbatchid = p_breeder_batch_id group by towarehouseid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehouse_save`(
    IN p_id INT,
    IN p_warehousecode VARCHAR(50),
    IN p_warehousename VARCHAR(200),
    IN p_description VARCHAR(500),
    IN p_locationid INT,
    IN p_shiptoname VARCHAR(200),
    IN p_address VARCHAR(100),
    IN p_cityid INT(11),
    IN p_stateid INT(11),
    IN p_zipcode VARCHAR(10),
    IN p_gln VARCHAR(50),
    IN p_countryid INT,
    IN p_active TINYINT,
    IN p_moduleid VARCHAR(200),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	
    SET @action = null;
    
    IF EXISTS(
            SELECT warehousename,warehousecode from warehouse where (LOWER(warehousename) = LOWER(p_warehousename) OR  warehousecode = p_warehousecode) 
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 

		BEGIN
        
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO warehouse 
						(warehousecode, warehousename, description, 
						locationid, shiptoname, address, cityid, stateid, 
						zipcode, gln, countryid, active,moduleid, companyid)
					VALUES 
						(p_warehousecode, p_warehousename, p_description,
						p_locationid, p_shiptoname, p_address, p_cityid, p_stateid, 
						p_zipcode, p_gln, p_countryid, p_active, p_moduleid, p_companyid);

					SET @action = 'INSERT';
					
			ELSE
			
				UPDATE warehouse
					SET warehousename = p_warehousename, 
						warehousecode = p_warehousecode,
						description = p_description,
						locationid = p_locationid,
						shiptoname = p_shiptoname,
						address = p_address,
						cityid = p_cityid,
						stateid = p_stateid,
						zipcode = p_zipcode,
						gln = p_gln,
						countryid = p_countryid,
						active = p_active,
						moduleid = p_moduleid,
						companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
						
					SET @action = 'UPDATE';
			END IF;
			SELECT LAST_INSERT_ID() INTO out_id; 
			
			-- create default one warehousebin
			SET @out_warehousebinid = NULL;
            if(p_id IS NULL) THEN 
			CALL spc_warehousebin_save(
				NULL, out_id, CONCAT(p_warehousecode,'-BIN'), CONCAT(p_warehousename,'-BIN'),
				p_companyid, 1, p_userid, @out_warehousebinid
			);
            END IF;

		
		END;
        
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehouse_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 W.id,
		 W.warehousecode,
         W.warehousename,
         W.description,
		 W.locationid,
         L.locationname,
         W.shiptoname,
         W.address,
         W.cityid,
         W.stateid,
		 W.zipcode,
         W.gln,
         W.countryid,
         W.active,
         W.moduleid,
         W.companyid
         
    FROM
		warehouse W
	
    LEFT JOIN location L ON W.locationid = L.id
   	
	WHERE
		W.companyid = p_companyid;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_warehouse_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 W.id,
		 W.warehousecode,
         W.warehousename,
         W.description,
		 W.locationid,
         L.locationname,
         W.shiptoname,
         W.address,
         W.cityid,
         C.cityname,
         W.stateid,
         S.statename,
		 W.zipcode,
         W.gln,
         W.countryid,
         CON.countryname,
         W.active,
         W.moduleid,
         W.companyid
        
	FROM
		warehouse W
        LEFT JOIN location L ON L.id = W.locationid
        LEFT JOIN country CON ON CON.id = W.countryid
        LEFT JOIN city C ON C.id = W.cityid
        LEFT JOIN state S ON S.id = W.stateid
        
	WHERE
		W.id = p_id; 
          
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_waterfacility_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM waterfacility WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'waterfacility', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_waterfacility_save`(
 IN p_id INT(11),
 IN P_facility VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO waterfacility
              (facility, companyid)
       VALUES
            (p_facility, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE waterfacility 
   
	SET facility = p_facility,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'waterfacility', out_id, @action, p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_waterfacility_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id, facility, companyid
           
	FROM waterfacility
    
    WHERE companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_waterfacility_select`(	
	IN p_id INT(11)
)
BEGIN

	SELECT id, facility, companyid
           
	FROM waterfacility
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_waterparameter_delete`(
  IN p_id INT,
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM waterparameter WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'waterparameter', p_id, 'delete', p_userid);
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_waterparameter_save`(
  IN p_id INT(11),
  IN p_name VARCHAR(200),
  IN p_unit VARCHAR(200),
  IN p_stdspecification	 VARCHAR(200),
  IN p_companyid INT(11),
  IN p_userid INT,
  OUT out_id INT
 )
BEGIN

 SET @action = null;
 
 IF EXISTS(
		SELECT id from waterparameter where `name` = p_name 
			AND ((NULLIF(p_id, 0) IS NULL)
				OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
		
		) THEN BEGIN
	
			SELECT -1 INTO out_id;

		END;
		
	 ELSE 
		BEGIN
   
		   IF(NULLIF(p_id, '0') IS NULl) THEN
		   
			 INSERT INTO waterparameter
					  (name, unit, stdspecification, companyid)
			   VALUES
					(p_name, p_unit, p_stdspecification, p_companyid);
					
			SET @action = 'INSERT';
			
		   ELSE
		   
			UPDATE waterparameter 
		   
			SET name = p_name,
				unit = p_unit,
				stdspecification = p_stdspecification,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
				
		   WHERE
				id = p_id AND
				companyid = p_companyid;
				
				SET @action = 'UPDATE';
				
		   END IF;
			 SELECT LAST_INSERT_ID() INTO out_id; 
			
		   -- record log
		   CALL spc_commonlog_save(p_companyid, 'waterparameter', out_id, @action, p_userid);
		END;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_waterparameter_search`(	
  IN p_companyid INT(11)
)
BEGIN

	SELECT id, name, unit, stdspecification, companyid
           
	FROM waterparameter
    
    WHERE companyid = p_companyid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_waterparameter_select`(
   IN p_id INT(11)
)
BEGIN

	SELECT id, name, unit,stdspecification, companyid
           
	FROM waterparameter
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_weekly_amortization`(
	IN p_breederbatchid INT,
    IN p_weekno INT
)
BEGIN
     
     SET @maleitemid = NULL;
     SET @femaleitemid = NULL;
     SET @femalebirdcost = NULL;
     SET @femaleplaced = NULL;
     SET @femalemortality = NULL;
	 SET @batchconsumptioncost = NULL;
     SET @batchconsumption = NULL;
     SET @standardeggcost = NULL;
     SET @eggsproduction = NULL;
     SET @placementdate = NULL;
      
     
        SELECT placementdate INTO @placementdate
        FROM breederbatchplacement 
        WHERE breederbatchid = p_breederbatchid;
        
		-- select default values from breeder setting
          
		SELECT 
			defaultfemalechickid, defaultmalechickid, standardeggcost
			INTO 
            @femaleitemid, @maleitemid, @standardeggcost
		FROM 
			breedersetting LIMIT 1;


	 -- Bird purchase cost
     
         SELECT 
			CASE WHEN itemid = @femaleitemid THEN @femalebirdcost:= unitprice ELSE NULL END as femalebirdcost
        FROM (
         
				SELECT itemid, GRD.unitprice as unitprice
				 
					FROM breederbatchplacement BBP 
					INNER JOIN grpo GR ON GR.id = BBP.grpono
					INNER JOIN grpodetail GRD ON GR.id = GRD.grpoid
				 WHERE
					BBP.breederbatchid = p_breederbatchid
			) AS TEMP;
            
     
	 -- Birds placed in batch
             
        SELECT 
			CASE WHEN itemid = @femaleitemid THEN @femaleplaced:= quantity ELSE NULL END as femaleplaced
        FROM (
        
			SELECT itemid, SUM(BPD.quantity) as quantity
				FROM breederbatchplacement BP
				INNER JOIN breederbatchplacementdetail BPD ON BPD.breederbatchplacementid = BP.id
				WHERE
					BP.breederbatchid = p_breederbatchid
				GROUP BY itemid
			
			 ) AS TEMP;
             
   
     -- Live birds
             
        SELECT 
			CASE WHEN itemid = @femaleitemid THEN @femalemortality:= itemmortality ELSE NULL END as femalemortality
        FROM (
				SELECT itemid, SUM(totalmortality) + SUM(totalculls) as itemmortality
					FROM breederdailytransaction BT
					INNER JOIN breederdailymortality BDM ON BT.id = BDM.breederdailytransactionid
				WHERE
					BT.breederbatchid = p_breederbatchid 
					-- AND fnc_calculate_weekno(BT.transactiondate, @placementdate) = p_weekno
				GROUP BY itemid
        ) AS TEMP;
            

	 -- Batch total consumption

		SELECT SUM(batchconsumptioncost), SUM(batchconsumptionquantity) INTO @batchconsumptioncost, @batchconsumption FROM (
			
            SELECT BC.quantity as batchconsumptionquantity, I.unitcost * BC.quantity AS batchconsumptioncost
			 
			FROM breederdailyconsumption BC
			INNER JOIN breederdailytransaction BT  ON BT.id = BC.breederdailytransactionid
			-- INNER JOIN materialissuedetail MD ON BT.issueid = MD.materialissueid
			INNER JOIN item I ON I.id = BC.itemid
               
            WHERE BT.breederbatchid = p_breederbatchid AND BT.statusid = 822
            AND fnc_calculate_weekno(BT.transactiondate, @placementdate) = p_weekno
		
          --  GROUP BY BC.quantity 
		) AS batchconsumptiontable;

	
     --  Eggs collection by batch
     
     	SELECT SUM(quantity) INTO @eggsproduction FROM (
        
			SELECT ECD.quantity as quantity
			FROM eggscollectiondetail ECD
			INNER JOIN eggscollection EC ON ECD.eggscollectionid = EC.id
			
            WHERE EC.breederbatchid = p_breederbatchid 
           AND fnc_calculate_weekno(EC.collectiondate, @placementdate) = p_weekno
			-- GROUP BY ECD.quantity 
		) AS eggscollectiontable;

     
    
	SELECT 	 
		CAST(@femaleitemid AS UNSIGNED INTEGER) AS femaleitemid,
		CAST(@femalebirdcost AS UNSIGNED INTEGER) AS femalebirdcost,
		CAST(@femaleplaced AS UNSIGNED INTEGER) AS femaleplaced,
		CAST(IFNULL(@femalemortality,0) AS UNSIGNED INTEGER) AS femalemortality,
		CAST(IFNULL(@batchconsumptioncost,0) AS UNSIGNED INTEGER) AS batchconsumptioncost,
        CAST(IFNULL(@batchconsumption,0) AS UNSIGNED INTEGER) AS batchconsumption,
		CAST(IFNULL(@standardeggcost,0) AS DECIMAL(9,3)) AS standardeggcost,
        CAST(IFNULL(@eggsproduction,0) AS UNSIGNED INTEGER) AS eggsproduction;
        
     
        
        -- select record from standard table for future weeks
           
        SET @consumption = 0;
        SET @consumptioncost = 0;
       
       SELECT consumption, consumptioncost INTO @consumption, @consumptioncost
       FROM ( SELECT 
			BFSD.itemid, 
            BFSD.feedconsumed as consumption,
            BFSD.feedconsumed * I.unitcost as consumptioncost
        
        FROM breederfeedstandard BFS
        LEFT JOIN breederfeedstandarddetail BFSD ON BFS.id = BFSD.breederfeedstandardid
        LEFT JOIN item I ON I.id = BFSD.itemid
        
        WHERE 
         BFS.breednametypeid = 72 AND
         BFSD.weeknumber = p_weekno
		) AS temptable;
        
        SELECT ageinweek as weekno, 
        ((IFNULL(@femaleplaced,0) - IFNULL(@femalemortality,0)) * livability) /100 as livebirds,
        CAST(IFNULL(@consumptioncost,0) AS UNSIGNED INTEGER) AS batchconsumptioncost,
        CAST(IFNULL(@consumption,0) AS UNSIGNED INTEGER) AS batchconsumption,
        hhheperweek * (((IFNULL(@femaleplaced,0) - IFNULL(@femalemortality,0))) ) as eggsproduction
        FROM breederperformanceobjective
        WHERE ageinweek = p_weekno;
        
      

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_weekly_layeramortization`(
	IN p_layerbatchid INT,
    IN p_weekno INT
)
BEGIN
     
     SET @femaleitemid = NULL;
     SET @femalebirdcost = NULL;
     SET @femaleplaced = NULL;
     SET @femalemortality = NULL;
	 SET @batchconsumptioncost = NULL;
     SET @batchconsumption = NULL;
     SET @standardeggcost = NULL;
     SET @eggsproduction = NULL;
     SET @placementdate = NULL;
      
     
        SELECT placementdate INTO @placementdate
        FROM layerbatchplacement 
        WHERE layerbatchid = p_layerbatchid;
        
		-- select default values from layer setting
          
		SELECT 
			defaultfemalechickid ,standardeggcost
			INTO 
            @femaleitemid, @standardeggcost
		FROM 
			layersetting LIMIT 1;


	 -- Bird purchase cost
     
         SELECT 
			CASE WHEN itemid = @femaleitemid THEN @femalebirdcost:= unitprice ELSE NULL END as femalebirdcost
        FROM (
         
				SELECT itemid, GRD.unitprice as unitprice
				 
					FROM layerbatchplacement LBP 
					INNER JOIN grpo GR ON GR.id = LBP.grpono
					INNER JOIN grpodetail GRD ON GR.id = GRD.grpoid
				 WHERE
					LBP.layerbatchid = p_layerbatchid
			) AS TEMP;
            
     
	 -- Birds placed in batch
             
        SELECT 
			CASE WHEN itemid = @femaleitemid THEN @femaleplaced:= quantity ELSE NULL END as femaleplaced
        FROM (
        
			SELECT itemid, SUM(LPD.quantity) as quantity
				FROM layerbatchplacement LP
				INNER JOIN layerbatchplacementdetail LPD ON LPD.layerbatchplacementid = LP.id
				WHERE
					LP.layerbatchid = p_layerbatchid
				GROUP BY itemid
			
			 ) AS TEMP;
             
   
     -- Live birds
             
        SELECT 
			CASE WHEN itemid = @femaleitemid THEN @femalemortality:= itemmortality ELSE NULL END as femalemortality
        FROM (
				SELECT itemid, SUM(todaymortality) + SUM(todayculls) as itemmortality
					FROM layerdailytransaction LT
					INNER JOIN layerdailymortality LDM ON LT.id = LDM.layerdailytransactionid
				WHERE
					LT.layerbatchid = p_layerbatchid 
					-- AND fnc_calculate_weekno(BT.transactiondate, @placementdate) = p_weekno
				GROUP BY itemid
        ) AS TEMP;
            

	 -- Batch total consumption

		SELECT SUM(batchconsumptioncost), SUM(batchconsumptionquantity) INTO @batchconsumptioncost, @batchconsumption FROM (
			
            SELECT LC.consumptionquantity as batchconsumptionquantity, I.unitcost * LC.consumptionquantity AS batchconsumptioncost
			 
			FROM layerdailyconsumption LC
			INNER JOIN layerdailytransaction LT  ON LT.id = LC.layerdailytransactionid
			-- INNER JOIN materialissuedetail MD ON BT.issueid = MD.materialissueid
			INNER JOIN item I ON I.id = LC.itemid
               
            WHERE LT.layerbatchid = p_layerbatchid AND LT.statusid = 1170
            AND fnc_calculate_weekno(LT.transactiondate, @placementdate) = p_weekno
		
          --  GROUP BY BC.quantity 
		) AS batchconsumptiontable;

	
     --  Eggs collection by batch
     
     	SELECT SUM(quantity) INTO @eggsproduction FROM (
        
			SELECT LECD.quantity as quantity
			FROM layereggscollectiondetail LECD
			INNER JOIN layereggscollection LEC ON LECD.eggscollectionid = LEC.id
			
            WHERE LEC.layerbatchid = p_layerbatchid 
           AND fnc_calculate_weekno(LEC.collectiondate, @placementdate) = p_weekno
			-- GROUP BY ECD.quantity 
		) AS eggscollectiontable;

     
    
	SELECT 	 
		CAST(@femaleitemid AS UNSIGNED INTEGER) AS femaleitemid,
		CAST(@femalebirdcost AS UNSIGNED INTEGER) AS femalebirdcost,
		CAST(@femaleplaced AS UNSIGNED INTEGER) AS femaleplaced,
		CAST(IFNULL(@femalemortality,0) AS UNSIGNED INTEGER) AS femalemortality,
		CAST(IFNULL(@batchconsumptioncost,0) AS UNSIGNED INTEGER) AS batchconsumptioncost,
        CAST(IFNULL(@batchconsumption,0) AS UNSIGNED INTEGER) AS batchconsumption,
		CAST(IFNULL(@standardeggcost,0) AS DECIMAL(9,3)) AS standardeggcost,
        CAST(IFNULL(@eggsproduction,0) AS UNSIGNED INTEGER) AS eggsproduction;
        
     
        
        -- select record from standard table for future weeks
           
        SET @consumption = 0;
        SET @consumptioncost = 0;
       
       SELECT consumption, consumptioncost INTO @consumption, @consumptioncost
       FROM ( SELECT 
			LFSD.itemid, 
            LFSD.feedconsumed as consumption,
            LFSD.feedconsumed * I.unitcost as consumptioncost
        
        FROM layerfeedstandard LFS
        LEFT JOIN layerfeedstandarddetail LFSD ON LFS.id = LFSD.layerfeedstandardid
        LEFT JOIN item I ON I.id = LFSD.itemid
        
        WHERE 
         LFS.layernametypeid = 1061 AND
         LFSD.weeknumber = p_weekno
		) AS temptable;
        
        SELECT ageinweek as weekno, 
        ((IFNULL(@femaleplaced,0) - IFNULL(@femalemortality,0)) * livability) /100 as livebirds,
        CAST(IFNULL(@consumptioncost,0) AS UNSIGNED INTEGER) AS batchconsumptioncost,
        CAST(IFNULL(@consumption,0) AS UNSIGNED INTEGER) AS batchconsumption,
        hdppercent * (((IFNULL(@femaleplaced,0) - IFNULL(@femalemortality,0))) ) as eggsproduction
        FROM layerperformanceobjective
        WHERE ageinweek = p_weekno;
        
      

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_weekwise_birdcost_cal`(
IN p_batchid INT,
IN p_transactiondate DATE,
IN p_companyid INT)
BEGIN
DECLARE n INT DEFAULT 0;
DECLARE i INT DEFAULT 0;
SET @p_placementdate = null;
SET @ageinweeks = 0;
SET @maleitemid = null;
SET @femaleitemid = null;
SET @malepurchasecost = null;
SET @femalepurchasecost = null;
SET @maleplaceqty = null;
SET @femaleplacedqty = null;
SET @birdcoststd = null;
SET @birdcostnonprodbird = null;
SET @purvalue = 0;
SET @ageindays = 0;
-- select setting
	SELECT birdcoststd,birdcostnonprodbird INTO @birdcoststd,@birdcostnonprodbird FROM breedersetting WHERE companyid = p_companyid limit 1;
     -- get oalcment date age in week age in days
	SELECT fnc_getplacementdate(p_batchid,p_companyid) INTO @p_placementdate;
	SELECT TRUNCATE (((DATEDIFF(p_transactiondate,@p_placementdate)/7)),0) INTO @ageinweeks;

    
    -- get male and female itemid
	SELECT maleitemid ,femaleitemid INTO @maleitemid,@femaleitemid FROM breederbatch WHERE id = p_batchid;
    
    -- get purchase cost
	 SELECT fnc_chicks_purchasecost(p_batchid,p_companyid,@maleitemid),
			fnc_chicks_purchasecost(p_batchid,p_companyid,@femaleitemid),
			fnc_chicks_placementqty(p_batchid,p_companyid,@maleitemid) ,
			fnc_chicks_placementqty(p_batchid,p_companyid,@femaleitemid) INTO 
            @malepurchasecost,@femalepurchasecost,@maleplaceqty,@femaleplacedqty;
             SELECT ((@malepurchasecost*@maleplaceqty)+(@femalepurchasecost*@femaleplacedqty)) INTO @purvalue;
	-- set validation for non productive bird
	/*if(@birdcoststd = 1) then
			SET @applynonproductive = 0;
	END IF;
	if(@birdcostnonprodbird = 1 and @ageinweek>=24 and @ageindays>0) then
			SET @applynonproductive = 1;
	ELSE
			SET @applynonproductive = 0;
	END IF;*/
    IF(p_transactiondate > @p_placementdate) THEN
		SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@p_placementdate)%7)),0) INTO @ageindays;
	ELSE
		SELECT 1 INTO @ageindays;
    END IF;
    
	IF(@ageindays >0) then
		SELECT(@ageinweeks+1) INTO n;
    ELSE
		SELECT @ageinweeks INTO n;
	END IF;

DROP TEMPORARY TABLE IF EXISTS tempweekwisebirdcost;
CREATE TEMPORARY TABLE tempweekwisebirdcost
(
 week_no INT,
 placmentdate Date,
 transactiondate DATE);
 -- while loop---
 
  SET @pdate = null;
  
	WHILE i<n DO 
        SET i = i + 1;
       
        SET @p_transactiondate = null;
        SET @transactiondate = null;
        
        SELECT date_add(@p_placementdate,INTERVAL(i*6) DAY) INTO @transactiondate;
        
       -- if(i = 1) THEN
        -- SET @pdate = @transactiondate;
       -- END IF;
        
        if(i > 1) THEN
			SELECT date_add(@transactiondate,INTERVAL (i-1) DAY) INTO @transactiondate;
            SELECT date_add(@transactiondate,INTERVAL 1 DAY) INTO @p_transactiondate;
            
		-- ELSE
       
         /* SELECT date_add(@transactiondate,INTERVAL 1 DAY) INTO @lasttransactiondate;
          SELECT date_add(@transactiondate,INTERVAL 1 DAY) INTO @p_transactiondate;*/
          END IF;
          
            if(i=n AND @ageindays>0) THEN
			SET @transactiondate = p_transactiondate;
            SELECT date_add(p_transactiondate,INTERVAL 1 DAY) INTO @p_transactiondate;
            END IF;
            
            
		INSERT INTO tempweekwisebirdcost 
        SELECT
			 i,
			 @p_placementdate,
             @transactiondate;
    END WHILE;
    
DROP TEMPORARY TABLE IF EXISTS tempweekwisebirdcost2;
CREATE TEMPORARY TABLE tempweekwisebirdcost2
    SELECT 	week_no,
			transactiondate,
			fnc_breeder_batchwise_birdliveqty(p_batchid,@maleitemid,transactiondate,p_companyid) as maleliveqty,
			fnc_breeder_batchwise_birdliveqty(p_batchid,@femaleitemid,transactiondate,p_companyid) as femaleliveqty,
			fun_overhed_exp(p_batchid,721,transactiondate,p_companyid) as overheadexp,
			fnc_getgoodsissue(p_batchid,721,transactiondate) as goodsissuecost,
			fnc_consumption_wise_cost(p_batchid,transactiondate,861,p_companyid) as feedcost,
			fnc_consumption_wise_cost(p_batchid,transactiondate,862,p_companyid) as medcost,
			fnc_consumption_wise_cost(p_batchid,transactiondate,863,p_companyid) as vacccost,
			fnc_consumption_wise_cost(p_batchid,transactiondate,864,p_companyid) as vitamincost,
			fnc_breederbatchwise_salesvalue(p_batchid,721,transactiondate,p_companyid) as salesvalue,
			fun_afteramortization_mortality(p_batchid,transactiondate,p_companyid) as mortality,
			spc_getbatchwise_nonproductive_bird(p_batchid,p_companyid,transactiondate,@femaleitemid) as nonprodbird,
            fun_amortizatiobvalue_forbreeder(p_batchid,transactiondate) as amortizationvalue
            
            FROM tempweekwisebirdcost;
	 DROP TEMPORARY TABLE IF EXISTS tempweekwisebirdcost4;
     CREATE TEMPORARY TABLE tempweekwisebirdcost4
     SELECT * FROM tempweekwisebirdcost2;
 -- if(@applynonproductive = 1)THEN

if(@birdcostnonprodbird = 1) THEN
 DROP TEMPORARY TABLE IF EXISTS tempweekwisebirdcost3;
CREATE TEMPORARY TABLE tempweekwisebirdcost3
SELECT * FROM (
  SELECT week_no,transactiondate,ROUND(@purvalue,3) as purvalue ,(maleliveqty+femaleliveqty) as liveqty,((maleliveqty+femaleliveqty)) as productivebird,'0'as nonprobird,
		  ROUND(overheadexp,3) as ohexp, ROUND(goodsissuecost,3) as otexp,amortizationvalue, ROUND(feedcost,3) as feedcost, ROUND(medcost,3) as medicost, ROUND(vacccost,3) as vaccost, ROUND(vitamincost,3) as vitmcost, ROUND(salesvalue,3) as salesvalue,
		 ROUND((@purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost),3) as totalvalue, ROUND(((@purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3) as balancevalue,mortality
         FROM tempweekwisebirdcost2 WHERE week_no<=24 
         union all
         SELECT week_no,transactiondate,ROUND(@purvalue,3) as purvalue ,(maleliveqty+femaleliveqty) as liveqty,((maleliveqty+femaleliveqty)-(nonprodbird+maleliveqty)) as productivebird,(nonprodbird+maleliveqty)as nonprobird,
		  ROUND(overheadexp,3) as ohexp, ROUND(goodsissuecost,3) as otexp,amortizationvalue, ROUND(feedcost,3) as feedcost, ROUND(medcost,3) as medicost, ROUND(vacccost,3) as vaccost, ROUND(vitamincost,3) as vitmcost, ROUND(salesvalue,3) as salesvalue,
		 ROUND((@purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost),3) as totalvalue, ROUND(((@purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3) as balancevalue,mortality
         FROM tempweekwisebirdcost4 WHERE week_no>24
         ) as temp;
 END IF;
 IF(@birdcoststd = 1) THEN
  DROP TEMPORARY TABLE IF EXISTS tempweekwisebirdcost3;
 CREATE TEMPORARY TABLE tempweekwisebirdcost3
   SELECT week_no,transactiondate,ROUND(@purvalue,3) as purvalue ,(maleliveqty+femaleliveqty) as liveqty,((maleliveqty+femaleliveqty)) as productivebird,'0'as nonprobird,
		  ROUND(overheadexp,3) as ohexp, ROUND(goodsissuecost,3) as otexp,amortizationvalue, ROUND(feedcost,3) as feedcost, ROUND(medcost,3) as medicost, ROUND(vacccost,3) as vaccost, ROUND(vitamincost,3) as vitmcost, ROUND(salesvalue,3) as salesvalue,
		 ROUND((@purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost),3) as totalvalue, ROUND(((@purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3) as balancevalue,mortality
         FROM tempweekwisebirdcost2;
  END IF;
DROP TEMPORARY TABLE IF EXISTS tempweekwisebirdcost5;
CREATE TEMPORARY TABLE tempweekwisebirdcost5
SELECT *,ROUND((balancevalue/productivebird),3) as birdcost FROM tempweekwisebirdcost3 order by week_no;
SELECT* FROM tempweekwisebirdcost5;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_weekwise_birdcost_calforlayer`(
IN p_batchid INT,
IN p_transactiondate DATE,
IN p_companyid INT)
BEGIN
DECLARE n INT DEFAULT 0;
DECLARE i INT DEFAULT 0;
SET @p_placementdate = null;
SET @ageinweeks = null;
SET @femaleitemid = null;
SET @femalepurchasecost = null;
SET @femaleplacedqty = null;
SET @birdcoststd = null;
SET @birdcostnonprodbird = null;
SET @purvalue = 0;
SET @ageindays = 0;
-- select setting
	SELECT birdcoststd,birdcostnonprodbird INTO @birdcoststd,@birdcostnonprodbird FROM breedersetting WHERE companyid = p_companyid limit 1;
     -- get oalcment date age in week age in days
	SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @p_placementdate;
	SELECT TRUNCATE (((DATEDIFF(p_transactiondate,@p_placementdate)/7)),0) INTO @ageinweeks;

    
    -- get male and female itemid
	SELECT itemid INTO @femaleitemid FROM layerbatch WHERE id = p_batchid;
    
    -- get purchase cost
	 SELECT fnc_chicks_purchasecost_layer(p_batchid,p_companyid,@femaleitemid),
			fnc_layerchicks_placementqty(p_batchid,p_companyid,@femaleitemid) 
			INTO 
            @femalepurchasecost,@femaleplacedqty;
             SELECT ((@femalepurchasecost*@femaleplacedqty)) INTO @purvalue;
	-- set validation for non productive bird
	/*if(@birdcoststd = 1) then
			SET @applynonproductive = 0;
	END IF;
	if(@birdcostnonprodbird = 1 and @ageinweek>=24 and @ageindays>0) then
			SET @applynonproductive = 1;
	ELSE
			SET @applynonproductive = 0;
	END IF;*/
SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@p_placementdate)%7)),0) INTO @ageindays;

  IF(@ageindays >0) then
    SELECT(@ageinweeks+1) INTO n;
    ELSE
		SELECT @ageinweeks INTO n;
END IF;

DROP TEMPORARY TABLE IF EXISTS tempweekwisebirdcost;
CREATE TEMPORARY TABLE tempweekwisebirdcost
(
 week_no INT,
 placmentdate Date,
 transactiondate DATE);
 -- while loop---
 
  SET @pdate = null;
  
	WHILE i<n DO 
        SET i = i + 1;
       
        SET @p_transactiondate = null;
        SET @transactiondate = null;
        
        SELECT date_add(@p_placementdate,INTERVAL(i*6) DAY) INTO @transactiondate;
        
       -- if(i = 1) THEN
        -- SET @pdate = @transactiondate;
       -- END IF;
        
        if(i > 1) THEN
			SELECT date_add(@transactiondate,INTERVAL (i-1) DAY) INTO @transactiondate;
            SELECT date_add(@transactiondate,INTERVAL 1 DAY) INTO @p_transactiondate;
            
		-- ELSE
       
         /* SELECT date_add(@transactiondate,INTERVAL 1 DAY) INTO @lasttransactiondate;
          SELECT date_add(@transactiondate,INTERVAL 1 DAY) INTO @p_transactiondate;*/
          END IF;
          
            if(i=n AND @ageindays>0) THEN
			SET @transactiondate = p_transactiondate;
            SELECT date_add(p_transactiondate,INTERVAL 1 DAY) INTO @p_transactiondate;
            END IF;
            
            
		INSERT INTO tempweekwisebirdcost 
        SELECT
			 i,
			 @p_placementdate,
             @transactiondate;
    END WHILE;
    
DROP TEMPORARY TABLE IF EXISTS tempweekwisebirdcost2;
CREATE TEMPORARY TABLE tempweekwisebirdcost2
    SELECT 	week_no,
			transactiondate,
			fnc_layerbatchwise_birdliveqty(p_batchid,@femaleitemid,transactiondate,p_companyid) as femaleliveqty,
			fun_overhed_exp(p_batchid,725,transactiondate,p_companyid) as overheadexp,
			fnc_getgoodsissue(p_batchid,725,transactiondate) as goodsissuecost,
			fnc_consumption_wise_cost_layer(p_batchid,transactiondate,1149,p_companyid) as feedcost,
			fnc_consumption_wise_cost_layer(p_batchid,transactiondate,1150,p_companyid) as medcost,
			fnc_consumption_wise_cost_layer(p_batchid,transactiondate,1151,p_companyid) as vacccost,
			fnc_consumption_wise_cost_layer(p_batchid,transactiondate,1152,p_companyid) as vitamincost,
			fnc_layerbatchwise_salesvalue(p_batchid,725,transactiondate,p_companyid) as salesvalue,
			fun_afteramortization_mortalitylayer(p_batchid,transactiondate,p_companyid) as mortality,
			spc_getbatchwise_nonproductive_bird_layer(p_batchid,p_companyid,transactiondate,@femaleitemid) as nonprodbird,
            fun_amortizatiobvalue_forlayer(p_batchid,transactiondate) as amortizationvalue
            
            FROM tempweekwisebirdcost;
	 DROP TEMPORARY TABLE IF EXISTS tempweekwisebirdcost4;
     CREATE TEMPORARY TABLE tempweekwisebirdcost4
     SELECT * FROM tempweekwisebirdcost2;
 -- if(@applynonproductive = 1)THEN

if(@birdcostnonprodbird = 1) THEN
 DROP TEMPORARY TABLE IF EXISTS tempweekwisebirdcost3;
CREATE TEMPORARY TABLE tempweekwisebirdcost3
SELECT * FROM (
  SELECT week_no,transactiondate,ROUND(@purvalue,3) as purvalue ,(femaleliveqty) as liveqty,((femaleliveqty)) as productivebird,'0'as nonprobird,
		  ROUND(overheadexp,3) as ohexp, ROUND(goodsissuecost,3) as otexp,amortizationvalue, ROUND(feedcost,3) as feedcost, ROUND(medcost,3) as medicost, ROUND(vacccost,3) as vaccost, ROUND(vitamincost,3) as vitmcost, ROUND(salesvalue,3) as salesvalue,
		 ROUND((@purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost),3) as totalvalue, ROUND(((@purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3) as balancevalue,mortality
         FROM tempweekwisebirdcost2 WHERE week_no<=19 
         union all
         SELECT week_no,transactiondate,ROUND(@purvalue,3) as purvalue ,(femaleliveqty) as liveqty,((femaleliveqty)-(nonprodbird)) as productivebird,(nonprodbird)as nonprobird,
		 ROUND(overheadexp,3) as ohexp, ROUND(goodsissuecost,3) as otexp,amortizationvalue, ROUND(feedcost,3) as feedcost, ROUND(medcost,3) as medicost, ROUND(vacccost,3) as vaccost, ROUND(vitamincost,3) as vitmcost, ROUND(salesvalue,3) as salesvalue,
		 ROUND((@purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost),3) as totalvalue, ROUND(((@purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3) as balancevalue,mortality
         FROM tempweekwisebirdcost4 WHERE week_no>19
         ) as temp;
 END IF;
 IF(@birdcoststd = 1) THEN
  DROP TEMPORARY TABLE IF EXISTS tempweekwisebirdcost3;
 CREATE TEMPORARY TABLE tempweekwisebirdcost3
   SELECT week_no,transactiondate,ROUND(@purvalue,3) as purvalue ,(femaleliveqty) as liveqty,((femaleliveqty)) as productivebird,'0'as nonprobird,
		  ROUND(overheadexp,3) as ohexp, ROUND(goodsissuecost,3) as otexp,amortizationvalue, ROUND(feedcost,3) as feedcost, ROUND(medcost,3) as medicost, ROUND(vacccost,3) as vaccost, ROUND(vitamincost,3) as vitmcost, ROUND(salesvalue,3) as salesvalue,
		 ROUND((@purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost),3) as totalvalue, ROUND(((@purvalue+feedcost+medcost+vacccost+vitamincost+overheadexp+goodsissuecost)-(amortizationvalue+salesvalue)),3) as balancevalue,mortality
         FROM tempweekwisebirdcost2;
  END IF;
DROP TEMPORARY TABLE IF EXISTS tempweekwisebirdcost5;
CREATE TEMPORARY TABLE tempweekwisebirdcost5
SELECT *,ROUND((balancevalue/productivebird),3) as birdcost FROM tempweekwisebirdcost3 order by week_no;
SELECT* FROM tempweekwisebirdcost5;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_weightslipdetail_delete`(
IN p_id INT(11)
)
BEGIN
DELETE
FROM feedmill_weightslipdetail
WHERE   id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_weightslipdetail_save`(
	IN p_id INT(11),
    IN p_weightslipid INT(11),
    IN p_itemcode INT(11),
    IN p_quantity DECIMAL(9,3),
    IN p_weight DECIMAL(9,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_weightslipdetail(id,weightslipid,itemcode,quantity,weight,companyid)
        VALUES (p_id,p_weightslipid,p_itemcode,p_quantity,p_weight,p_companyid);
        
        SET @action = 'INSERT';
        
        ELSE
        UPDATE feedmill_weightslipdetail
        SET  id = p_id,
			 weightslipid = p_weightslipid,
            itemcode = p_itemcode,
            quantity = p_quantity,
             weight = p_weight,
            companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_weightslipdetail', out_id, @action, p_userid);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_weightslipdetail_search`(
IN p_weightslipid INT(11)
)
BEGIN

SELECT  id,
	    weightslipid,
        itemcode,
        quantity,
        weight
       
           
    FROM feedmill_weightslipdetail 
    
    
    WHERE  
		  weightslipid = p_weightslipid;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_weightslipdetail_select`(
IN p_id INT(11),
IN p_companyid INT(11)

)
BEGIN

SELECT 	   id,
		   weightslipid,
           itemcode,
           quantity,
           weight,
           companyid
		
				
	FROM feedmill_weightslipdetail

	WHERE companyid = p_companyid
	AND	id = p_id;            

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_weightsliplist_search`(
	IN p_acknowledgement_number INT(11),
	IN p_from_date date,
	IN p_to_date date
)
BEGIN
 SELECT     FW.id,
			FW.ackid,
            DATE_FORMAT(weightslipdate,'%d/%m/%Y') as weightslipdate,
            FW.loadweightkg,
            FW.loadweightton,
            FW.unloadweightkg,
            FW.unloadweightton,
            FW.netweightkg,
            FW.netweightton,
            FW.intime,
			FW.outtime,
            FW.itemid,
            I.itemname
	FROM feedmill_weightslip FW
    LEFT JOIN item I ON I.id = FW.itemid

    WHERE FW.ackid = p_acknowledgement_number AND
	(FW.weightslipdate BETWEEN p_from_date AND p_to_date);


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_weightslipreport_search`(
IN p_fromdate date,
IN p_todate date,
IN p_companyid INT(11) )
BEGIN
SELECT      FWS.id,
			FWS.ackid,
            DATE_FORMAT(FWS.weightslipdate,'%d/%m/%Y') as weightslipdate,
            FWS.loadweightkg,
            FWS.loadweightton,
            FWS.unloadweightkg,
            FWS.unloadweightton,
            FWS.netweightkg,
            FWS.netweightton,
            FWS.intime,
			FWS.outtime,
            FWS.companyid,
            I.itemname
            
       FROM  feedmill_weightslip FWS
	   LEFT JOIN feedmill_acknowledgementslipdetail FASD ON FWS.ackid = FASD.ackid
       LEFT JOIN item I  ON FASD.itemid = I.id
       WHERE
       
       FWS.weightslipdate BETWEEN p_fromdate AND p_todate 
	   AND FWS.companyid = p_companyid;
      

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_weightslip_delete`(
IN p_id INT(11)
)
BEGIN

DELETE
FROM feedmill_weightslip
WHERE   id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_weightslip_save`(
IN p_id INT(11),
IN p_ackid INT(11),
IN p_itemid INT(11),
IN p_weightslipdate DATE,
IN p_loadweightkg DECIMAL(9,3),
IN p_loadweightton DECIMAL(9,3),   
IN p_unloadweightkg DECIMAL(9,3),
IN p_unloadweightton DECIMAL(9,3),
IN p_netweightkg DECIMAL(9,3),
IN p_netweightton DECIMAL(9,3),
IN p_intime VARCHAR(45),
IN p_outtime VARCHAR(45),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT
)
BEGIN

SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_weightslip(id,ackid,itemid,weightslipdate,loadweightkg,loadweightton,unloadweightkg,unloadweightton,netweightkg,netweightton,intime,outtime,companyid)
        VALUES (p_id,p_ackid,p_itemid,p_weightslipdate,p_loadweightkg,p_loadweightton,p_unloadweightkg,p_unloadweightton,p_netweightkg,p_netweightton,p_intime,p_outtime,p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_weightslip
        SET 
			
            ackid = p_ackid,
            itemid = p_itemid,
            weightslipdate = p_weightslipdate,
            loadweightkg = p_loadweightkg,
            loadweightton = p_loadweightton,
            unloadweightkg = p_unloadweightkg,
            unloadweightton = p_unloadweightton,
            netweightkg = p_netweightkg,
            netweightton = p_netweightton,
            intime = p_intime,
             outtime = p_outtime,
                companyid = p_companyid,
                 
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        
       
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_weightslip', out_id, @action, p_userid);







END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_weightslip_search`(
IN p_companyid INT(11) 

)
BEGIN
 SELECT     FW.id,
			FW.ackid,
            DATE_FORMAT(weightslipdate,'%d/%m/%Y') as weightslipdate,
            FW.loadweightkg,
            FW.loadweightton,
            FW.unloadweightkg,
            FW.unloadweightton,
            FW.netweightkg,
            FW.netweightton,
            FW.intime,
			FW.outtime,
            FW.itemid,
            I.itemname
	
			
           
           
	FROM feedmill_weightslip FW
    LEFT JOIN item I ON I.id = FW.itemid

    WHERE FW.companyid = p_companyid;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spc_weightslip_select`( 
IN p_id INT(11),
IN p_companyid INT(11)
)
BEGIN

SELECT 		
            FW.ackid,
            DATE_FORMAT(FW.weightslipdate,'%d/%m/%Y') as weightslipdate,
            FW.loadweightkg,
            FW.loadweightton,
            FW.unloadweightkg,
            FW.unloadweightton,
            FW.netweightkg,
            FW.netweightton,
            FW.intime,
			FW.outtime,
            FW.companyid,
            FW.itemid,
            I.itemname
           
	FROM  feedmill_weightslip FW
    INNER JOIN item I ON I.id = FW.itemid
    WHERE companyid = p_companyid
    AND id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spk_apptransaction_search`(
	
)
BEGIN

	SELECT `id`,
		`entityname`,
		`displayname`
	FROM `entity`
    WHERE
		entitytypeid = 6003;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spk_notificationplaceholder_select`(
	IN p_entityid INT
)
BEGIN

	SELECT 
		id, transactiontypeid, placeholder, propertyname, valuetype
	FROM 
		notificationplaceholder
	WHERE
		transactiontypeid = p_entityid;
		
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spk_notificationtemplate_delete`(
	IN p_id INT
)
BEGIN

	DELETE FROM notificationtemplate WHERE id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spk_notificationtemplate_save`(
	IN p_id	INT,
    IN p_moduleid INT,
    IN p_transactiontypeid INT,
    IN p_roleids VARCHAR(1000),
    IN p_template NVARCHAR(3000),
    IN p_userid INT,
    IN p_inapp TINYINT,
    IN p_sms TINYINT,
	IN p_email TINYINT,
    OUT out_id INT
)
BEGIN
	
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO notificationtemplate
			(`id`,
				`moduleid`,
				`transactiontypeid`,
				`roleids`,
				`template`,
                `inapp`,
                `sms`,
                `email`
				)
			VALUES 
				(p_id, p_moduleid, p_transactiontypeid, p_roleids, p_template, p_inapp, p_sms, p_email);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE notificationtemplate
			SET 
				moduleid = p_moduleid,
				transactiontypeid = p_transactiontypeid,
				roleids = p_roleids,
				template = p_template,
                inapp = p_inapp,
                sms = p_sms,
                email = p_email,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(1,'notificationtemplate', out_id, @action, p_userid);

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spk_notificationtemplate_search`(
)
BEGIN

	SELECT TT.`id`,
		TT.`moduleid`,
        REF1.refname as `modulename`,
		TT.`transactiontypeid`,
		AP.entityname as transactioncode,
        AP.displayname as transactionname,
        AP.pagekey,
		TT.`roleids`,
        (select GROUP_CONCAT(REF2.refname) from `reference` REF2 WHERE FIND_IN_SET(REF2.id, TT.`roleids`)) as rolenames,
        -- REF2.refname as `rolename`,
		TT.inapp,
        TT.sms,
        TT.email,
		TT.`template`
		
	FROM 
		`notificationtemplate` TT
	LEFT JOIN `entity` AP ON TT.transactiontypeid = AP.id
	LEFT JOIN `reference` REF1 ON TT.moduleid = REF1.id;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `spk_notificationtemplate_select`(
	IN p_id INT
)
BEGIN

	SELECT `id`,
		`moduleid`,
		`transactiontypeid`,
		`roleids`,
		(select GROUP_CONCAT(REF2.refname) from `reference` REF2 WHERE FIND_IN_SET(REF2.id, `roleids`)) as rolenames,
		`template`,
		`inapp`,
        `sms`,
        `email`
	FROM 
		`notificationtemplate`
	WHERE
		id = p_id;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `SPLIT_VALUE_STRING`(
    IN `INPUTSTR` TEXT CHARSET utf8mb4, 
    IN `SEPARATR` TEXT CHARSET utf8mb4
)
BEGIN

	SET @I = 1;
    SET @SEP = SEPARATR;
    SET @VARSTR = INPUTSTR;
    
    SET @N = FORMAT((LENGTH(@VARSTR)-LENGTH(REPLACE(@VARSTR, @SEP, '')))/LENGTH(@SEP), 0)+1;
   
    CREATE TEMPORARY TABLE IF NOT EXISTS splt_table(P1 VARCHAR(100) NULL);
	TRUNCATE TABLE splt_table;
    
    label1: LOOP
    
		SET @TEMP = SUBSTRING_INDEX(SUBSTRING_INDEX(@VARSTR, @SEP, 1), ',' , -1);
        -- SELECT @TEMP;
        insert into splt_table (`P1`) SELECT @TEMP;
        SET @I = @I + 1;
        SET @VARSTR = REPLACE(@VARSTR, CONCAT(@TEMP, @SEP), '');
        IF @N >= @I THEN
          ITERATE label1;
        END IF;
        LEAVE label1;
      END LOOP label1;
    SELECT * FROM splt_table;           

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `testnextprev`(
	IN p_id INT,
    IN p_tablename varchar(100),
    IN p_action VARCHAR(10),
    OUT out_returnid INT
)
BEGIN

	SET @returnid = null;
 	SET @strquery = null;
    
		IF(p_id IS NULL) THEN
			SET p_id = 0;
		END IF;
        			
		SET @strquery = concat('SELECT id into @returnid FROM ', p_tablename, ' WHERE ');
		SET @strquery = concat(@strquery, ' (IFNULL(' , p_id , ', 0) != 0 && ''' , p_action , ''' = ''PREV'' && id < ',p_id,')');
		SET @strquery = concat(@strquery, ' OR ');
		SET @strquery = concat(@strquery, ' (IFNULL(' , p_id , ', 0) != 0 && ''' , p_action ,''' = ''NEXT'' && id > ',p_id,')');
		SET @strquery = concat(@strquery, ' OR ');
		SET @strquery = concat(@strquery, ' (IFNULL(' , p_id , ', 0) = 0 && ''' , p_action , ''' = ''PREV'') ');
		SET @strquery = concat(@strquery, ' OR ');
		SET @strquery = concat(@strquery, ' (IFNULL(' , p_id , ', 0) = 0 && ''' , p_action , ''' = ''NEXT'') ');
                
		IF(IFNULL(p_id, 0) = 0 &&  p_action = 'NEXT') THEN
			SET @strquery = concat(@strquery, ' ORDER BY id DESC ');
		END IF;
        
        SET @strquery = concat(@strquery, ' LIMIT 1;');
                
     PREPARE statement FROM @strquery;
	 EXECUTE statement;
	 DEALLOCATE PREPARE statement;

	IF(IFNULL(@returnid, 0) != 0) THEN
		SET out_returnid = @returnid;
     ELSE
		SET out_returnid = p_id;
     END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `test_11`()
BEGIN

	SELECT * FROM setter;
    
    SELECT * FROM setterslots;

END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `test_getitembatchwise_qty`(
	IN p_itemid INT,
    IN p_warehousebinid INT
)
BEGIN

DECLARE x INT;

set @orderquantity = 1000;
set @row_number = 0;
set x = 0;
set @reccount = 0;
	
DROP TEMPORARY TABLE IF EXISTS tempitembatches;

CREATE TEMPORARY TABLE tempitembatches
SELECT itemid, itemname, itembatch, quantity, `rank` FROM (
	SELECT MM.itemid, I.itemname, MM.itembatch, MM.itemvalue, MM.itemunitid, fnc_itembatchlivestock(MM.itemid, MM.itembatch, MM.companyid) as quantity, (@row_number := @row_number + 1) as `rank` 
	FROM materialmovement  MM
    INNER JOIN item I ON MM.itemid = I.id
	WHERE itemid = p_itemid AND towarehousebinid = p_warehousebinid
) AS 
tmplivestock WHERE quantity > 0;

SELECT COUNT(*) INTO @reccount FROM tempitembatches;

WHILE x <= @reccount DO

	SET @b_itemid = 0, @b_itemname = '', @b_itembatch = '', @b_itemvalue = 0, @b_itemunitid = 0, @b_quantity = 0, @b_rnk = 0;
    SELECT 
		itemid, itemname, itembatch, itemvalue, itemunitid, quantity, `rank` 
		INTO 
        @b_itemid, @b_itemname, @b_itembatch, @b_itemvalue, @b_itemunitid, @b_quantity, @b_rnk 
	FROM 
    tempitembatches WHERE `rank` = x;
    
    SET @b_minusqty = 0;
    
    IF (@b_quantity > @orderquantity) THEN
		SET @b_minusqty = @orderquantity;
	ELSEIF(@b_quantity < @orderquantity) THEN
		SET @b_minusqty = @b_quantity;
	ELSEIF(@b_quantity = @orderquantity) THEN
		SET @b_minusqty = @orderquantity;
    END IF;
    
    SET @b_unitcost = CAST(@b_itemvalue / @b_minusqty AS DECIMAL(12,3));
    SET @orderquantity = @orderquantity - @b_minusqty;
	
    CALL spc_materialissuedetail_save(null, @materialissue_outid, @b_itemid, @b_itemname, @b_minusqty, @b_unitcost, (@b_minusqty * @b_unitcost), @b_itemunitid, @b_itembatch, p_companyid, p_userid, @materialissuedetail_outid);
	CALL spc_materialmovement_save(null, @b_itemid, @b_itembatch, 683, @materialissuedetail_outid, NOW(), @b_minusqty, @warehouseid, @warehousebinid, null, null, null, p_companyid, p_userid, @movement_outid);
     
	SET x = x + 1; 
    
END WHILE;


END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `TEST_NEXTPREV`()
BEGIN

 
    SET @p_tablename = 'setter';
 	SET @strquery = null;
			
	SET @strquery = concat(@strquery, 'SELECT * FROM ', @p_tablename);
	SET @strquery = concat(@strquery, ';');
            
    PREPARE statementa FROM @strquery;
	EXECUTE statementa;
	DEALLOCATE PREPARE statementa;

END$$
DELIMITER ;


DELIMITER $$
CREATE FUNCTION `batch_liveqty_ongivendate`(
 p_breederbatchid INT,
 p_transactiondate DATE,
 p_dailytransactionid INT,
 p_itemid INT,
 p_companyid INT) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @liveqty = 0;
SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;

SELECT
	SUM(fnc_bird_liveqty(p_breederbatchid,BDT.shedid,p_itemid,@placementdate,p_transactiondate,p_companyid)) INTO @liveqty
FROM 
	breederdailytransaction BDT
    LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id
WHERE 
	BDT.id = p_dailytransactionid AND 
	BDT.transactiondate = p_transactiondate AND
	BDT.breederbatchid = p_breederbatchid;

RETURN @liveqty;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `batch_liveqty_ongivendatelayer`(
 p_layerbatchid INT,
 p_transactiondate DATE,
 p_dailytransactionid INT,
 p_itemid INT,
 p_companyid INT) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @liveqty = 0;
SELECT fnc_getplacementdate_layer(p_layerbatchid,p_companyid) INTO @placementdate;

SELECT
	SUM(fnc_layerbird_liveqty(p_layerbatchid,LDT.shedid,p_itemid,@placementdate,p_transactiondate,p_companyid)) INTO @liveqty
FROM 
	layerdailytransaction LDT
    LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id
WHERE 
	LDT.id = p_dailytransactionid AND 
	LDT.transactiondate = p_transactiondate AND
	LDT.layerbatchid = p_layerbatchid;

RETURN @liveqty;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `batch_liveqty_ongivendate_cbf`(
 p_cbfbatchid INT,
 p_transactiondate DATE,
 p_dailytransactionid INT,
 p_itemid INT,
 p_companyid INT) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @liveqty = 0;
SELECT fnc_getplacementdatecbf(p_cbfbatchid,p_companyid) INTO @placementdate;

SELECT
	SUM(fnc_bird_liveqty_cbf(p_cbfbatchid,CDT.shedid,p_itemid,@placementdate,p_transactiondate,p_companyid)) INTO @liveqty
FROM 
	cbf_dailytransaction CDT
    LEFT JOIN cbf_dailymortality CDM ON CDM.cbfdailytransactionid = CDT.id
WHERE 
	CDT.id = p_dailytransactionid AND 
	CDT.transactiondate = p_transactiondate AND
	CDT.cbf_batchid = p_cbfbatchid;

RETURN @liveqty;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `FIRST_DAY_OF_WEEK`(day DATE) RETURNS date
    DETERMINISTIC
BEGIN
  RETURN SUBDATE(day, WEEKDAY(day));
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_active_status`(
	p_isactive INT
) RETURNS tinyint(1)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
    IF(p_isactive = 1) THEN
      return true;
	ELSE
      return false;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_act_feed_consumption`(
 p_batchid INT(11),
 p_transactiondate DATE,
 p_placementdate DATE,
 p_consumptiontypeid INT,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @consumptionqty = 0;
      SET @placementdate = null;
     -- SELECT fnc_getcbfplacementdate(p_batchid,p_companyid) INTO @placementdate;
     
    
		   SELECT IFNULL((SUM(CDC.quantity)), 0) into @consumptionqty
			 FROM
			 cbf_dailytransaction CDT
			 
			LEFT JOIN cbf_dailyconsumption CDC ON CDT.id = CDC.cbfdailytransactionid  AND CDC.consumptiontypeid = p_consumptiontypeid
			
			WHERE CDT.cbf_batchid = p_batchid AND
				CDT.transactiondate >= p_placementdate AND
				 CDT.transactiondate <= p_transactiondate;
                 
	SET @openingfeedconsume  = 0;
 
    SELECT 
	IFNULL(SUM(COBD.feedconsume),0) INTO @openingfeedconsume
	FROM cbf_openingbalance COB 
	LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id 
    
    WHERE 
	COBD.cbfbatchid = p_batchid
    group by COBD.cbfbatchid;
		
               
					
RETURN (IFNULL(@consumptionqty,0)+IFNULL(@openingfeedconsume,0));
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_avgliftingage`(
	p_cbf_batchid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @@sql_mode = ' ';
	SET @avgliftingage = 0;
    SET @firstsaledate = null;
    SET @lastsaledate = null;
    SET @placementdate = null;
    
   /* SELECT CP.placement_date INTO @placementdate
    FROM cbf_chick_placement CP
    WHERE CP.batch_id = p_cbf_batchid;*/
    
    select CBD.batch_place_date INTO @placementdate
    from cbf_batch_details CBD
     WHERE CBD.id = p_cbf_batchid;
    
    SELECT SO.salesorderdate
    INTO @firstsaledate
    
    FROM salesdeliverydetail SDD 
    LEFT JOIN salesorderdetail SOD ON SOD.id = SDD.salesorderdetailid
    LEFT JOIN salesorder SO ON SO.id = SOD.salesorderid
    LEFT JOIN cbf_birdsalesorder BSO ON BSO.stdsalesorderid = SOD.salesorderid
    LEFT JOIN cbf_birdsalesorderdetail BSOD ON BSOD.cbfbirdsalesorderid = BSO.id
    
    WHERE BSOD.cbf_batchid = p_cbf_batchid ORDER BY SO.id ASC LIMIT 1;
    
    SELECT SO.salesorderdate
    INTO @lastsaledate
    
    FROM salesdeliverydetail SDD 
    LEFT JOIN salesorderdetail SOD ON SOD.id = SDD.salesorderdetailid
    LEFT JOIN salesorder SO ON SO.id = SOD.salesorderid
    LEFT JOIN cbf_birdsalesorder BSO ON BSO.stdsalesorderid = SOD.salesorderid
    LEFT JOIN cbf_birdsalesorderdetail BSOD ON BSOD.cbfbirdsalesorderid = BSO.id
    
    WHERE BSOD.cbf_batchid = p_cbf_batchid ORDER BY SO.id DESC LIMIT 1;
    
    SET @diffdays = DATEDIFF(@lastsaledate, @firstsaledate);
    
    SET @age = DATEDIFF(@firstsaledate, @placementdate);
    SET @totalage = @age;
    
    BEGIN
		DECLARE n INT DEFAULT 0;
		DECLARE i INT DEFAULT 1;
        
        SELECT @diffdays INTO n;
        
        WHILE i<n DO
			SELECT(@totalage + @age + i) INTO @totalage;
			SET i = i + 1;
		END WHILE;
        
        SELECT (@totalage / (@diffdays + 1)) INTO @avgliftingage;
        
    END;
    

RETURN -- @placementdate;
@avgliftingage;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_balancesheet`(
	p_from_date DATE,
	p_todate DATE,
    p_acledgerid INT(11)
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @@sql_mode = ' ';

	SET @openingbal = null;
    
    SET @cramount = null;
    SET @dramount = null;
    
    SELECT (select REPLACE(cast(IFNULL(SUM(JED.cramount),0) as CHAR(100)), '-', '')), IFNULL(SUM(JED.dramount),0)
    INTO @cramount, @dramount
    FROM journalentry JE
    LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    WHERE JE.voucherdate between p_from_date AND p_todate
    AND JED.acledgerid = p_acledgerid;
    
    SELECT ((IFNULL(LOB.openingbalance,0) + @dramount) - @cramount) INTO @openingbal
		
	FROM ledgeropeningbalance LOB
	LEFT JOIN journalentrydetail JED ON JED.acledgerid = LOB.ledgerid
	
	WHERE LOB.ledgerid = JED.acledgerid
    AND JED.acledgerid = p_acledgerid
	AND openingbalancedate between p_from_date AND p_todate
	group by JED.acledgerid;

RETURN (select REPLACE(cast(@openingbal as CHAR(100)), '-', ''));
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchopningbalance`(
	p_breederbatchid INT,
    p_shedid INT,
    p_itemid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @btachopeningbalance = 0;
    
     
		SELECT IFNULL(SUM(BBPD.quantity),0) INTO @btachopeningbalance
        from breederbatchplacementdetail BBPD
        LEFT JOIN breederbatchplacement BBP ON BBP.id = BBPD.breederbatchplacementid
        
        where
           BBP.breederbatchid = p_breederbatchid AND
           BBPD.breedershedid = p_shedid
           AND BBPD.itemid = p_itemid LIMIT 1;

   
	RETURN @openingbalance;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchshedwise_cullsandmortality`(
	p_breederbatchid INT,
    p_shedid INT,
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM breederbatchplacement
    WHERE breederbatchid = p_breederbatchid;
     
     
	SELECT SUM(totalmortality) + SUM(totalculls) INTO @quantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
		BDT.shedid = p_shedid  AND
         BDM.itemid = p_itemid AND
         (BDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchshedwise_malefemale_transfeinquantityuptodate`(
	p_breederbatchid INT,
    p_shedid varchar(200),
    p_itemid INT,
    p_transferdate DATE,
	p_transfertodate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @transferedquantity = 0;
    
     SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
  
    SELECT warhouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM breedershed
    WHERE FIND_IN_SET(id,p_shedid);
    
    
/*	 SELECT 			
			SUM(BBTD.quantity) INTO @transferedquantity1
                      
	FROM breederbatchtransferdetail BBTD
	LEFT JOIN breederbatchtransfer BBT ON BBT.id = BBTD.breederbatchtransferid
							
	WHERE 
		BBT.breederbatchid = p_breederbatchid AND
		BBT.fromshedid = p_shedid AND
        BBTD.itemid = p_itemid AND
		BBT.transferdate = p_transferdate;
        
  */      
	SELECT IFNULL(SUM(quantity), 0) into @transferedquantity
    FROM materialmovement
    WHERE transactiondate between p_transferdate AND p_transfertodate AND
    transactiontypeid = 682 AND
     transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
    towarehousebinid =  @warehousebinid;
                        
                        
RETURN IFNULL(@transferedquantity, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchshedwise_malefemale_transfeinquantityuptodate_layer`(
	p_batchid INT,
    p_shedid varchar(200),
    p_itemid INT,
    p_transferdate DATE,
	p_transfertodate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @transferedquantity = 0;
	SET @inwardqty = 0;
    
     SELECT fnc_getplacementdate_layer(p_batchid,p_companyid) INTO @placementdate;
  
    SELECT warehouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM layershed
    WHERE FIND_IN_SET(id,p_shedid);
  
	SELECT IFNULL(SUM(quantity), 0) into @transferedquantity
    FROM materialmovement
    WHERE transactiondate between p_transferdate AND p_transfertodate AND
    transactiontypeid = 682 AND
     transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
    towarehousebinid =  @warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @inwardqty
    FROM materialmovement
    WHERE transactiondate between p_transferdate AND p_transfertodate AND
    transactiontypeid = 681 AND
     transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
    towarehousebinid =  @warehousebinid;
                        
RETURN (IFNULL(@transferedquantity, 0)+IFNULL(@inwardqty, 0));
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchshedwise_malefemale_transferedinquantity`(
	p_breederbatchid INT,
    p_shedid varchar(200),
    p_itemid INT,
    p_transferdate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @transferedquantity = 0;
    
     SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
  
    SELECT warhouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM breedershed
    WHERE FIND_IN_SET(id,p_shedid);
    
    
/*	 SELECT 			
			SUM(BBTD.quantity) INTO @transferedquantity1
                      
	FROM breederbatchtransferdetail BBTD
	LEFT JOIN breederbatchtransfer BBT ON BBT.id = BBTD.breederbatchtransferid
							
	WHERE 
		BBT.breederbatchid = p_breederbatchid AND
		BBT.fromshedid = p_shedid AND
        BBTD.itemid = p_itemid AND
		BBT.transferdate = p_transferdate;
        
  */      
	SELECT IFNULL(SUM(quantity), 0) into @transferedquantity
    FROM materialmovement
    WHERE transactiondate = p_transferdate AND
    transactiontypeid = 682 AND
   -- transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
    towarehousebinid =  @warehousebinid;
                        
RETURN IFNULL(@transferedquantity, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchshedwise_malefemale_transferedinquantity_layer`(
	p_batchid INT,
    p_shedid varchar(200),
    p_itemid INT,
    p_transferdate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @transferedquantity = 0;
    SET @inwardqty = 0;
  
    SELECT warehouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM layershed
    WHERE FIND_IN_SET(id,p_shedid);
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedquantity
    FROM materialmovement
    WHERE transactiondate = p_transferdate AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
    towarehousebinid =  @warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @inwardqty
    FROM materialmovement
    WHERE transactiondate = p_transferdate AND
    transactiontypeid = 681 AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
    towarehousebinid =  @warehousebinid;
                        
RETURN (IFNULL(@transferedquantity, 0)+IFNULL(@inwardqty, 0));

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchshedwise_malefemale_transferedquantity`(
	p_breederbatchid INT,
    p_shedid varchar(200),
    p_itemid INT,
    p_transferdate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @transferedquantity = 0;
    
     SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
  
    SELECT warhouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM breedershed
    WHERE FIND_IN_SET(id,p_shedid);
    
    
/*	 SELECT 			
			SUM(BBTD.quantity) INTO @transferedquantity1
                      
	FROM breederbatchtransferdetail BBTD
	LEFT JOIN breederbatchtransfer BBT ON BBT.id = BBTD.breederbatchtransferid
							
	WHERE 
		BBT.breederbatchid = p_breederbatchid AND
		BBT.fromshedid = p_shedid AND
        BBTD.itemid = p_itemid AND
		BBT.transferdate = p_transferdate;
        
  */      
	SELECT IFNULL(SUM(quantity), 0) into @transferedquantity
    FROM materialmovement
    WHERE transactiondate = p_transferdate AND
    transactiontypeid = 682 AND
    -- transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
                        
                        
RETURN IFNULL(@transferedquantity, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchshedwise_malefemale_transferedquantityuptodate`(
	p_breederbatchid INT,
    p_shedid varchar(200),
    p_itemid INT,
    p_transferdate DATE,
	p_transfertodate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @transferedquantity = 0;
    
     SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
  
    SELECT warhouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM breedershed
    WHERE FIND_IN_SET(id,p_shedid);
    
    
/*	 SELECT 			
			SUM(BBTD.quantity) INTO @transferedquantity1
                      
	FROM breederbatchtransferdetail BBTD
	LEFT JOIN breederbatchtransfer BBT ON BBT.id = BBTD.breederbatchtransferid
							
	WHERE 
		BBT.breederbatchid = p_breederbatchid AND
		BBT.fromshedid = p_shedid AND
        BBTD.itemid = p_itemid AND
		BBT.transferdate = p_transferdate;
        
  */      
	SELECT IFNULL(SUM(quantity), 0) into @transferedquantity
    FROM materialmovement
    WHERE transactiondate between p_transferdate AND p_transfertodate AND
    transactiontypeid = 682 AND
     transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
                        
                        
RETURN IFNULL(@transferedquantity, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchshedwise_malefemale_transferedquantityuptodate_layer`(
	p_batchid INT,
    p_shedid varchar(200),
    p_itemid INT,
    p_transferdate DATE,
	p_transfertodate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @transferedquantity = 0;
    
     SELECT fnc_getplacementdate_layer(p_batchid,p_companyid) INTO @placementdate;
  
    SELECT warehouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM layershed
    WHERE FIND_IN_SET(id,p_shedid);
    
  
	SELECT IFNULL(SUM(quantity), 0) into @transferedquantity
    FROM materialmovement
    WHERE transactiondate between p_transferdate AND p_transfertodate AND
    transactiontypeid = 682 AND
     transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
                        
                        
RETURN IFNULL(@transferedquantity, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchshedwise_malefemale_transferedquantity_layer`(
	p_batchid INT,
    p_shedid varchar(200),
    p_itemid INT,
    p_transferdate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @transferedquantity = 0;
  
    SELECT warehouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM layershed
    WHERE FIND_IN_SET(id,p_shedid);
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedquantity
    FROM materialmovement
    WHERE transactiondate = p_transferdate AND
    transactiontypeid = 682 AND
    itemid = p_itemid AND
	fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
                        
RETURN IFNULL(@transferedquantity, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_birdliveqtyofweeklayer`(
	p_batchid INT,
    p_itemid INT,
    p_weekfirstdate DATE,
    p_weeklastdate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @@sql_mode = '';
	SET @liveqty = 0;
    SET @placementdate = null;
    
	SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @placementdate;
    
    
   IF EXISTS(SELECT id FROM layerbatchplacement WHERE layerbatchid = p_batchid AND id IS NOT NULL) THEN
   IF(@placementdate = p_weekfirstdate) THEN
    
	           SELECT SUM(LBPD.quantity) INTO @liveqty
			   FROM layerbatchplacement LBP
				INNER JOIN layerbatchplacementdetail LBPD ON LBP.id = LBPD.layerbatchplacementid
				WHERE LBP.layerbatchid = p_batchid AND LBP.companyid = p_companyid AND
							LBPD.itemid = p_itemid ;
        
    ELSE
     
				SELECT (IFNULL(SUM(LBPD.quantity),0)- fnc_layer_batchwise_cullsandmortality(p_batchid,p_itemid,p_weeklastdate,p_companyid)) INTO @liveqty
                    
				FROM layerbatchplacement LBP
				INNER JOIN layerbatchplacementdetail LBPD ON LBP.id = LBPD.layerbatchplacementid
				WHERE LBP.layerbatchid = p_batchid AND LBP.companyid = p_companyid AND
							LBPD.itemid = p_itemid; 

	END IF;
					
		 ELSE
				
					SELECT
					 (IFNULL(SUM(LBOBD.placeqty),0) - fnc_layer_batchwise_cullsandmortality(p_batchid,p_itemid,p_weeklastdate,p_companyid)) INTO @liveqty
                    
					FROM layer_batchopening_balance LBOB
					INNER JOIN layer_batchbridopeningbalance_detail LBOBD ON LBOB.id = LBOBD.layerbatchopeningid
					WHERE LBOBD.itemid = p_itemid AND LBOB.layerbatchid = p_batchid AND 
						  LBOB.companyid = p_companyid;
		END IF;
   
	RETURN @liveqty;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_birdliveqtyondate`(
	p_batchid INT,
    p_itemid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @@sql_mode = '';
	SET @liveqty = 0;
    SET @placementdate = null;
    
	SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @placementdate;
    
    
   IF EXISTS(SELECT id FROM layerbatchplacement WHERE layerbatchid = p_batchid AND id IS NOT NULL) THEN
   IF(@placementdate = p_transactiondate) THEN
    
	           SELECT SUM(LBPD.quantity) INTO @liveqty
			   FROM layerbatchplacement LBP
				INNER JOIN layerbatchplacementdetail LBPD ON LBP.id = LBPD.layerbatchplacementid
				WHERE LBP.layerbatchid = p_batchid AND LBP.companyid = p_companyid AND
							LBPD.itemid = p_itemid ;
        
    ELSE
     
				SELECT (IFNULL(SUM(LBPD.quantity),0)- fnc_layer_batchwise_cullsandmortality(p_batchid,p_itemid,p_transactiondate,p_companyid)) INTO @liveqty
                    
				FROM layerbatchplacement LBP
				INNER JOIN layerbatchplacementdetail LBPD ON LBP.id = LBPD.layerbatchplacementid
				WHERE LBP.layerbatchid = p_batchid AND LBP.companyid = p_companyid AND
							LBPD.itemid = p_itemid; 

	END IF;
					
		 ELSE
				
					SELECT
					 (IFNULL(SUM(LBOBD.placeqty),0) - fnc_layer_batchwise_cullsandmortality(p_batchid,p_itemid,p_transactiondate,p_companyid)) INTO @liveqty
                    
					FROM layer_batchopening_balance LBOB
					INNER JOIN layer_batchbridopeningbalance_detail LBOBD ON LBOB.id = LBOBD.layerbatchopeningid
					WHERE LBOBD.itemid = p_itemid AND LBOB.layerbatchid = p_batchid AND 
						  LBOB.companyid = p_companyid;
		END IF;
   
	RETURN @liveqty;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_closingbalance`(
	p_breederbatchid INT,
    p_shedid INT,
    p_itemid INT,
    p_transactiondate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM breederbatchplacement
    WHERE breederbatchid = p_breederbatchid;
     
	IF(@placementdate = p_transactiondate) THEN
    
		SELECT IFNULL(SUM(BBPD.quantity),0) INTO @openingbalance 
        from breederbatchplacementdetail BBPD
        LEFT JOIN breederbatchplacement BBP ON BBP.id = BBPD.breederbatchplacementid
        
        where
           BBP.breederbatchid = p_breederbatchid
		   AND FIND_IN_SET(BBPD.breedershedid,p_shedid)
           AND BBPD.itemid = p_itemid LIMIT 1;
        
    ELSE
     
		SELECT IFNULL(SUM(BBPD.quantity),0) - IFNULL(fnc_batchshedwise_cullsandmortality(p_breederbatchid, p_shedid, p_itemid, p_transactiondate), 0) INTO @openingbalance
        from breederbatchplacementdetail BBPD
        LEFT JOIN breederbatchplacement BBP ON BBP.id = BBPD.breederbatchplacementid
        
        where
           BBP.breederbatchid = p_breederbatchid
           AND BBPD.breedershedid = p_shedid
           AND BBPD.itemid = p_itemid LIMIT 1;

	END IF;
   
	RETURN @openingbalance;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_cullsandmortality`(
	p_breederbatchid INT,
    p_shedids INT,
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM breederbatchplacement
    WHERE breederbatchid = p_breederbatchid;
     
     
	SELECT SUM(totalmortality) + SUM(totalculls) INTO @quantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
         BDT.shedid = p_shedids AND 
         BDM.itemid = p_itemid AND
         (BDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_culls_ongivendate_cbf`(
	p_cbfdailytransactionid INT,
    p_itemid INT,
    p_shedid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @totalculls = 0;
       
	SELECT SUM(CDM.totalculls) INTO @totalculls
    FROM
		cbf_dailymortality CDM
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDM.cbfdailytransactionid
	WHERE
		CDM.cbfdailytransactionid = p_cbfdailytransactionid AND
        CDT.shedid = p_shedid AND
		CDM.itemid = p_itemid;
      
	RETURN IFNULL(@totalculls, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_malefemaleculls_ongivendate`(
	p_breederdailytransactionid INT,
    p_itemid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @totalculls = 0;
       
	SELECT SUM(totalculls) INTO @totalculls
    FROM
		breederdailymortality 
	WHERE
		breederdailytransactionid = p_breederdailytransactionid AND
		itemid = p_itemid;
      
	RETURN IFNULL(@totalculls, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_malefemalemortality_ongivendate`(
	p_breederdailytransactionid INT,
    p_itemid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @totalmortality = 0;
       
	SELECT SUM(totalmortality) INTO @totalmortality
    FROM
		breederdailymortality 
	WHERE
		breederdailytransactionid = p_breederdailytransactionid AND
		itemid = p_itemid;
      
	RETURN IFNULL(@totalmortality, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_malefemalemortality_ongivenlastdate`(
    p_weekfirstdate DATE,
    p_weeklastdate DATE,
    p_batchid INT,
    p_itemid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @totalmortality = 0;
       
	SELECT SUM(BDM.totalmortality) INTO @totalmortality
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
        
	WHERE
		BDM.itemid = p_itemid AND
        BDT.breederbatchid = p_batchid AND
         (BDT.transactiondate BETWEEN p_weekfirstdate AND p_weeklastdate);
      
	RETURN IFNULL(@totalmortality, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_malefemalemortality_ongivenlastdatelayer`(
    p_weekfirstdate DATE,
    p_weeklastdate DATE,
    p_batchid INT,
    p_itemid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @totalmortality = 0;
    SET @totalculls = 0;
    
       
	SELECT SUM(LDM.todaymortality + LDM.todayculls) INTO @totalmortality
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
        
	WHERE
		LDM.itemid = p_itemid AND
        LDT.layerbatchid = p_batchid AND
         (LDT.transactiondate BETWEEN p_weekfirstdate AND p_weeklastdate);
      
	RETURN IFNULL(@totalmortality, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_malefemalemortality_uptodate`(
	p_batchid varchar(255),
    p_itemid INT,
    p_lastdate DATE
    
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @totalmortality = 0;
       
	SELECT SUM(BDM.totalmortality+BDM.totalculls) INTO @totalmortality
    -- SELECT SUM(BDM.totalmortality) INTO @totalmortality
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
        
	WHERE
		BDM.itemid = p_itemid AND
        BDT.breederbatchid = p_batchid AND
		(BDT.transactiondate <= p_lastdate);
      
	RETURN IFNULL(@totalmortality, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_malefemalemortality_uptodatelayer`(
	p_batchid varchar(255),
    p_itemid INT,
    p_lastdate DATE
    
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @totalmortality = 0;
       
	SELECT SUM(LDM.todaymortality+LDM.todayculls) INTO @totalmortality
    -- SELECT SUM(BDM.totalmortality) INTO @totalmortality
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
        
	WHERE
		LDM.itemid = p_itemid AND
        LDT.layerbatchid = p_batchid AND
		(LDT.transactiondate <= p_lastdate);
      
	RETURN IFNULL(@totalmortality, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_malefemaleopbalance`(
	p_breederbatchid INT,
    p_shedid INT,
    p_itemid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @placementdate = null;
    
    
    SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
    
   SELECT  fnc_bird_liveqty(p_breederbatchid,p_shedid,p_itemid,@placementdate,p_transactiondate,p_companyid) INTo @openingbalance;
    
   /* SELECT placementdate INTO @placementdate
    FROM breederbatchplacement
    WHERE breederbatchid = p_breederbatchid;
     
	IF(@placementdate = p_transactiondate) THEN
    
		SELECT IFNULL(SUM(BBPD.quantity),0) INTO @openingbalance 
        from breederbatchplacementdetail BBPD
        LEFT JOIN breederbatchplacement BBP ON BBP.id = BBPD.breederbatchplacementid
        
        where
           BBP.breederbatchid = p_breederbatchid
           AND BBPD.breedershedid = p_shedid
           AND BBPD.itemid = p_itemid LIMIT 1;
        
    ELSE
     
		SELECT IFNULL(SUM(BBPD.quantity),0) - IFNULL(fnc_batchwise_cullsandmortality(p_breederbatchid, p_shedid, p_itemid, p_transactiondate), 0) INTO @openingbalance
        from breederbatchplacementdetail BBPD
        LEFT JOIN breederbatchplacement BBP ON BBP.id = BBPD.breederbatchplacementid
        
        where
           BBP.breederbatchid = p_breederbatchid
           AND BBPD.breedershedid = p_shedid 
           AND BBPD.itemid = p_itemid LIMIT 1;

	END IF;*/
   
	RETURN @openingbalance;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_malefemaleopbal_tillgivendate`(
	p_breederbatchid INT,
    p_breedershedid INT,
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @totalcullsandmortality = 0;
    SET @transferedquantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM breederbatchplacement
    WHERE breederbatchid = p_breederbatchid;
    
    
	-- calculate total culla and mortality for given batch before p_todate
    
	SELECT SUM(totalmortality) + SUM(totalculls) INTO @totalcullsandmortality
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
         BDT.shedid = p_breedershedid AND 
         BDM.itemid = p_itemid AND
         BDT.transactiondate >= @placementdate AND
         BDT.transactiondate < p_todate;
  
  
	-- calculate transfered male/female quantity befor p_todate
    
	SELECT 			
		SUM(BBTD.quantity) INTO @transferedquantity
                      
	FROM breederbatchtransferdetail BBTD
		 LEFT JOIN breederbatchtransfer BBT ON BBT.id = BBTD.breederbatchtransferid
							
	WHERE 
		BBT.breederbatchid = p_breederbatchid AND
		BBT.fromshedid = p_breedershedid AND
        BBTD.itemid = p_itemid AND
		BBT.transferdate < p_todate;
        
    
    -- calculate batch opening balance (placed quantity)
    
    SELECT IFNULL(SUM(BBPD.quantity),0) INTO @openingbalance
        from breederbatchplacementdetail BBPD
        LEFT JOIN breederbatchplacement BBP ON BBP.id = BBPD.breederbatchplacementid
        
        where
           BBP.breederbatchid = p_breederbatchid
           AND BBPD.breedershedid = p_breedershedid
           AND BBPD.itemid = p_itemid LIMIT 1;
    
    
	RETURN IFNULL(@openingbalance,0) - IFNULL(@totalcullsandmortality, 0) - IFNULL(@transferedquantity, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_mortality_ongivendate_cbf`(
	p_cbfdailytransactionid INT,
    p_itemid INT,
    p_shedid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @totalmortality = 0;
       
	SELECT SUM(CDM.totalmortality) INTO @totalmortality
    FROM
		cbf_dailymortality CDM
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDM.cbfdailytransactionid
	WHERE
		CDM.cbfdailytransactionid = p_cbfdailytransactionid AND
        CDT.shedid = p_shedid AND
		CDM.itemid = p_itemid;
      
	RETURN IFNULL(@totalmortality, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_weekly_feedconsumed`(
    p_itemid INT,
    P_weekno INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @feedconsumed = 0;
       
	SELECT SUM(BFSD.feedconsumed) INTO @feedconsumed
    from breederfeedstandard BFS
	LEFT JOIN breederfeedstandarddetail BFSD ON BFS.id = BFSD.breederfeedstandardid
	where BFS.breeditemid=p_itemid
    AND BFSD.weeknumber = P_weekno;
      
	RETURN IFNULL(@feedconsumed, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_weekly_feedconsumedlayer`(
    p_itemid INT,
    P_weekno INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @feedconsumed = 0;
       
	SELECT SUM(LFSD.feedconsumed) INTO @feedconsumed
    from layerfeedstandard LFS
	LEFT JOIN layerfeedstandarddetail LFSD ON LFS.id = LFSD.layerfeedstandardid
	where LFS.layeritemid=p_itemid
    AND LFSD.weeknumber = P_weekno;
      
	RETURN IFNULL(@feedconsumed, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_weekly_stdbodyweight`(
    p_itemid INT,
    P_weekno INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @weeklybodyweight = 0;
       
	SELECT SUM(BFSD.weeklybodyweight) INTO @weeklybodyweight
    from breederfeedstandard BFS
	LEFT JOIN breederfeedstandarddetail BFSD ON BFS.id = BFSD.breederfeedstandardid
	where BFS.breeditemid=p_itemid
    AND BFSD.weeknumber = P_weekno;
      
	RETURN IFNULL(@weeklybodyweight, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_batchwise_weekly_stdbodyweightlayer`(
    p_itemid INT,
    P_weekno INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @weeklybodyweight = 0;
       
	SELECT SUM(LFSD.weeklybodyweight) INTO @weeklybodyweight
    from layerfeedstandard LFS
	LEFT JOIN layerfeedstandarddetail LFSD ON LFS.id = LFSD.layerfeedstandardid
	where LFS.layeritemid=p_itemid
    AND LFSD.weeknumber = P_weekno;
      
	RETURN IFNULL(@weeklybodyweight, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_bird_liveqty`(
	p_breederbatchid INT,
    p_breedershedid INT,
    p_itemid INT,
    p_placementdate DATE,
    p_todate DATE,
    p_companyid INT
    
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @totalcullsandmortality = 0;
    SET @transferedquantity = 0;
    SET @transferedinquantity = 0;
    
  
    SELECT warhouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM breedershed
    WHERE id =  p_breedershedid;
    
   --  select  @warehouseid;
	-- calculate total culla and mortality for given batch before p_todate
    
	/*SELECT SUM(totalmortality) + SUM(totalculls) INTO @totalcullsandmortality
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
         BDT.shedid = p_breedershedid AND 
         BDM.itemid = p_itemid AND
         BDT.transactiondate >= p_placementdate AND
         BDT.transactiondate < p_todate;*/
         
SELECT IFNULL(SUM(quantity), 0) into @totalcullsandmortality
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
	transactiondate >= p_placementdate AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
   
  
	-- calculate transfered male/female quantity befor p_todate
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedquantity
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    transactiondate >= p_placementdate AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
    
  
	-- calculate transfered in  male/female quantity befor p_todate
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedinquantity
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    transactiondate >= p_placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
    
  
	
     IF EXISTS(SELECT id FROM breederbatchplacement WHERE breederbatchid = p_breederbatchid AND id IS NOT NULL) THEN
			select 
				SUM(BBPD.quantity) INTO @openingbalance
                    
					FROM breederbatchplacement BBP
						
				INNER JOIN breederbatchplacementdetail BBPD ON BBP.id = BBPD.breederbatchplacementid
					WHERE BBP.breederbatchid = p_breederbatchid AND BBP.companyid = p_companyid AND
							BBPD.itemid = p_itemid AND BBPD.breedershedid = p_breedershedid 
                            group by BBPD.breedershedid;
					
		ELSE
				SELECT
					 SUM(BLO.penqty) INTO @openingbalance
                    
					FROM breederbatchlocationwiseopeningdetail BLO
						INNER JOIN breederbatchopening BBO ON BBO.id = BLO.breederbatchopeningid
					WHERE BLO.itemid = p_itemid AND BBO.breederbatchid = p_breederbatchid AND 
						  BBO.companyid = p_companyid AND BLO.shedid = p_breedershedid
                          group by BLO.shedid;
					
			
		END IF;
        
    
   -- select  @openingbalance; 
	 RETURN IFNULL(@openingbalance,0) - IFNULL(@totalcullsandmortality, 0) - IFNULL(@transferedquantity, 0);
     -- RETURN @totalcullsandmortality;


END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_bird_liveqty_cbf`(
	p_cbfbatchid INT,
    p_cbfshedid INT,
    p_itemid INT,
    p_placementdate DATE,
    p_todate DATE,
    p_companyid INT
    
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @totalcullsandmortality = 0;
    SET @transferedquantity = 0;
    SET @transferedinquantity = 0;
    SET @inward = 0;
    
  
    select 
     WB.warehouseid,
    CFESD.warehousebinid INTO @warehouseid,@warehousebinid
    FROM cbf_farmerenquiry_sheddimensiondetail CFESD
    LEFT JOIN  warehousebin WB ON CFESD.warehousebinid =   WB.id
    WHERE CFESD.id =  p_cbfshedid;
    
	-- calculate total culla and mortality for given batch before p_todate
    
	/*SELECT SUM(totalmortality) + SUM(totalculls) INTO @totalcullsandmortality
    FROM
		cbf_dailymortality CDM
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDM.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_breederbatchid AND
         CDT.shedid = p_breedershedid AND 
         CDM.itemid = p_itemid AND
         CDT.transactiondate >= p_placementdate AND
         CDT.transactiondate < p_todate;*/
         
SELECT IFNULL(SUM(quantity), 0) into @totalcullsandmortality
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
	transactiondate >= p_placementdate AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
  
  
	-- calculate transfered male/female quantity befor p_todate
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedquantity
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    transactiondate >= p_placementdate AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
    
      
	-- calculate transfered in  male/female quantity befor p_todate
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedinquantity
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    transactiondate >= p_placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
 
 -- calculate  inward  male/female quantity befor p_todate
    SELECT IFNULL(SUM(quantity), 0) into @inward
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    transactiondate >= p_placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
        
    
  
	
     IF EXISTS(SELECT id FROM cbf_chick_placement WHERE batch_id = p_cbfbatchid AND id IS NOT NULL) THEN
			select 
				SUM(CCP.chick_qty) INTO @openingbalance
                    
					FROM cbf_chick_placement CCP
                    LEFT JOIN cbf_batch_details CBD ON CBD.id = CCP.batch_id
					WHERE CCP.batch_id = p_cbfbatchid AND CCP.company_id = p_companyid AND
						  CBD.breed_id = p_itemid AND 
                           CCP.shed_id = p_cbfshedid 
                           group by CCP.shed_id;
					
		ELSE
				SELECT
					 SUM(COB.liveqty) INTO @openingbalance
                    
					FROM cbf_openingbalance COB
						LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id
					    WHERE COB.breeditemid = p_itemid AND COBD.cbfbatchid = p_cbfbatchid AND 
						  COB.companyid = p_companyid AND COBD.cbfshedid = p_cbfshedid
                          group by COBD.cbfshedid;
					
			
		END IF;
        
    
    
	RETURN (IFNULL(@openingbalance,0)) - IFNULL(@totalcullsandmortality, 0) - IFNULL(@transferedquantity, 0);
	-- RETURN (IFNULL(@openingbalance,0)) - IFNULL(@totalcullsandmortality, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_bird_liveqty_cbf_batchdetail`(
	p_cbfbatchid INT,
    p_cbfshedid INT,
    p_itemid INT,
    p_placementdate DATE,
    p_todate DATE,
    p_companyid INT
    
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @totalcullsandmortality = 0;
    SET @transferedquantity = 0;
    SET @transferedinquantity = 0;
    SET @inward = 0;
    
  
    select 
     WB.warehouseid,
    CFESD.warehousebinid INTO @warehouseid,@warehousebinid
    FROM cbf_farmerenquiry_sheddimensiondetail CFESD
    LEFT JOIN  warehousebin WB ON CFESD.warehousebinid =   WB.id
    WHERE CFESD.id =  p_cbfshedid;
	-- calculate total culla and mortality for given batch before p_todate
    
	SELECT SUM(totalmortality) + SUM(totalculls) INTO @totalcullsandmortality
    FROM
		cbf_dailymortality CDM
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDM.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_cbfbatchid AND
         CDT.shedid = p_cbfshedid AND 
         CDM.itemid = p_itemid AND
         CDT.transactiondate >= p_placementdate AND
         CDT.transactiondate < p_todate;
         

  
	
     IF EXISTS(SELECT id FROM cbf_chick_placement WHERE batch_id = p_cbfbatchid AND id IS NOT NULL) THEN
			select 
				SUM(CCP.chick_qty) INTO @openingbalance
                    
					FROM cbf_chick_placement CCP
                    LEFT JOIN cbf_batch_details CBD ON CBD.id = CCP.batch_id
					WHERE CCP.batch_id = p_cbfbatchid AND CCP.company_id = p_companyid AND
						  CBD.breed_id = p_itemid AND 
                           CCP.shed_id = p_cbfshedid 
                           group by CCP.shed_id;
					
		ELSE
				SELECT
					 SUM(COB.liveqty) INTO @openingbalance
                    
					FROM cbf_openingbalance COB
						LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id
					    WHERE COB.breeditemid = p_itemid AND COBD.cbfbatchid = p_cbfbatchid AND 
						  COB.companyid = p_companyid AND COBD.cbfshedid = p_cbfshedid
                          group by COBD.cbfshedid;
					
			
		END IF;
        
    
    
    RETURN (IFNULL(@openingbalance,0)) - IFNULL(@totalcullsandmortality, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_biredbalance`(
	p_breederbatchid INT,
    p_itemid INT,
    p_placementdate DATE,
    p_fromdate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

     
     
	SELECT SUM(totalmortality) + SUM(totalculls) INTO @quantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
         BDM.itemid = p_itemid AND
         (BDT.transactiondate BETWEEN  p_placementdate AND p_fromdate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_breederbatchphase`(
	p_breederbatchid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @phaseid = 0;
    
    if Exists(select * from breederbatchtransfer where breederbatchid = p_breederbatchid) then
		select phasestatusid INTO @phaseid from breederbatchtransfer 
        where breederbatchid = p_breederbatchid;
	else
		select phasestatusid INTO @phaseid from breederbatchplacement
        where breederbatchid = p_breederbatchid;
    end if;
    

RETURN @phaseid;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_breederbatchwise_bird_cost`(
    p_breederbatchid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS decimal(15,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	 SET @@sql_mode = '';
      SET @birdcoststd = null;
      SET @birdcostnonprodbird = null;
      SET @birdcost = 0;
      SET @nonproductiovebirdqty = 0;
      SET @amortizationcostnonprodbird = null;
      SET @placementdate = null;
      SET @ageinweek = null;
      SET @ageindays = 0;
      
      SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
	  SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@placementdate)/7)),0) INTO @ageinweek;
      SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@placementdate)%7)),0) INTO @ageindays;
     SELECT birdcoststd,birdcostnonprodbird,amortizationcostnonprodbird INTO @birdcoststd,@birdcostnonprodbird,@amortizationcostnonprodbird FROM breedersetting WHERE companyid = p_companyid limit 1;
	SELECT maleitemid,femaleitemid INTO @maleitemid,@femaleitemid FROM breederbatch WHERE id = p_breederbatchid;
		-- non productive bird 
        if(@birdcoststd = 1) then
			SELECT fun_live_biredcost(p_breederbatchid,p_companyid,p_transactiondate) INTO @birdcost;
		END IF;
         if(@birdcostnonprodbird = 1 and @ageinweek>=24 AND @ageindays>0) then
			SELECT fun_live_biredcost_for_nonproductivebird(p_breederbatchid,p_companyid,p_transactiondate) INTO @birdcost;
		ELSE
			SELECT fun_live_biredcost(p_breederbatchid,p_companyid,p_transactiondate) INTO @birdcost;
		END IF;
      

RETURN @birdcost;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_breederbatchwise_salesvalue`(
 p_batchid INT,
 p_moduleid INT,
 p_transactiondate DATE,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	
      SET @itemid = null;
      SET @warehousebinid = null;
      SET @salesvalue = null;
      SET @placementdate = null;
	
    SELECT fnc_getplacementdate(p_batchid,p_companyid) INTO @placementdate;
    
	select GROUP_CONCAT(DISTINCT warehousebinid SEPARATOR ', ')  INTo @warehousebinid FROM breederbatchbalance BBB
		LEFT JOIN breedershed BS ON BS.id = BBB.breedershedid
		WHERE breederbatchid = p_batchid
		group by BBB.breederbatchid;
        
    SELECT CONCAT(maleitemid,',',femaleitemid) INTO @itemid FROM breederbatch WHERE id = p_batchid;

	SELECT ifnull(SUM(SDD.quantity*rate),0) INTO @salesvalue
    FROM salesdelivery SD
		inner JOIN salesdeliverydetail SDD ON SDD.salesdeliveryid = SD.id AND find_in_set(SDD.itemid, @itemid)
			AND find_in_set(SDD.warehousebinid, @warehousebinid)
			WHERE SD.salestypeid = p_moduleid AND SD.deliverydate <= p_transactiondate
             AND SD.deliverydate >= @placementdate ;

RETURN @salesvalue;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_breederbatchwise_salesvalue_after24week`(
 p_batchid INT,
 p_moduleid INT,
 p_transactiondate DATE,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	
      SET @itemid = null;
      SET @warehousebinid = null;
      SET @salesvalue = null;
      SET @placementdate = null;
	
    SELECT fnc_getplacementdate(p_batchid,p_companyid) INTO @placementdate;
    
	select GROUP_CONCAT(DISTINCT warehousebinid SEPARATOR ', ')  INTo @warehousebinid FROM breederbatchbalance BBB
		LEFT JOIN breedershed BS ON BS.id = BBB.breedershedid
		WHERE breederbatchid = p_batchid
		group by BBB.breederbatchid;
        
    SELECT CONCAT(maleitemid,',',femaleitemid) INTO @itemid FROM breederbatch WHERE id = p_batchid;

	SELECT ifnull(SUM(SDD.quantity*rate),0) INTO @salesvalue
    FROM salesdelivery SD
		inner JOIN salesdeliverydetail SDD ON SDD.salesdeliveryid = SD.id AND find_in_set(SDD.itemid, @itemid)
			AND find_in_set(SDD.warehousebinid, @warehousebinid)
			WHERE SD.salestypeid = p_moduleid AND SD.deliverydate > p_transactiondate
             AND SD.deliverydate >= @placementdate ;

RETURN @salesvalue;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_breederfeedclosingbalance`(
    p_transactiondate Date,
	p_shedid INT,
    p_itemid INT(11),
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    SET @p_itemquantity = 0;
    
	SELECT GROUP_CONCAT(warehousebinid) INTO @warehousebinids
	FROM breedershed
    WHERE id =  p_shedid;
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    itemid = p_itemid AND
    towarehousebinid= @warehousebinids;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    towarehousebinid = @warehousebinids;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    fromwarehousebinid =  @warehousebinids;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
    fromwarehousebinid =  @warehousebinids;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
     itemid = p_itemid AND
    towarehousebinid =  @warehousebinids;
    
   SELECT IFNULL(SUM(quantity), 0) into @p_itemquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 685 AND
     itemid = p_itemid AND
    towarehousebinid =  @warehousebinids;
    
      
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity+ @p_itemquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_breederfeedopeningbalance`(
    p_transactiondate Date,
	p_shedid INT,
    p_itemid INT(11),
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    SET @p_itemquantity = 0;
    
	SELECT GROUP_CONCAT(warehousebinid) INTO @warehousebinids
	FROM breedershed
    WHERE id =  p_shedid;
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    itemid = p_itemid AND
    towarehousebinid= @warehousebinids;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    towarehousebinid = @warehousebinids;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    fromwarehousebinid =  @warehousebinids;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
    fromwarehousebinid =  @warehousebinids;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
     itemid = p_itemid AND
    towarehousebinid =  @warehousebinids;
    
   SELECT IFNULL(SUM(quantity), 0) into @p_itemquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 685 AND
     itemid = p_itemid AND
    towarehousebinid =  @warehousebinids;
    
      
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity+ @p_itemquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_breeder_batchwise_birdliveqty`(
	p_breederbatchid INT,
    p_itemid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @@sql_mode = '';
	SET @liveqty = 0;
    SET @placementdate = null;
    
	SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
    
    
   IF EXISTS(SELECT id FROM breederbatchplacement WHERE breederbatchid = p_breederbatchid AND id IS NOT NULL) THEN
	IF(@placementdate = p_transactiondate) THEN
    
	           SELECT SUM(BBPD.quantity) INTO @liveqty
                    
			   FROM breederbatchplacement BBP
						
			       INNER JOIN breederbatchplacementdetail BBPD ON BBP.id = BBPD.breederbatchplacementid
				WHERE BBP.breederbatchid = p_breederbatchid AND BBP.companyid = p_companyid AND
							BBPD.itemid = p_itemid ;
        
    ELSE
     
				SELECT (IFNULL(SUM(BBPD.quantity),0)- fnc_breeder_batchwise_cullsandmortality(p_breederbatchid,p_itemid,p_transactiondate,p_companyid)) INTO @liveqty
                    
				FROM breederbatchplacement BBP
						
				INNER JOIN breederbatchplacementdetail BBPD ON BBP.id = BBPD.breederbatchplacementid
				WHERE BBP.breederbatchid = p_breederbatchid AND BBP.companyid = p_companyid AND
							BBPD.itemid = p_itemid; 

	END IF;
					
		 ELSE
				
					SELECT
					 (IFNULL(SUM(BBOB.liveqty),0) - fnc_breeder_batchwise_cullsandmortality(p_breederbatchid,p_itemid,p_transactiondate,p_companyid)) INTO @liveqty
                    
					FROM breederbatchopening BBO
						INNER JOIN breederbatchmalefemaleopeningdetail BBOB ON BBO.id = BBOB.breederbatchopeningid
					WHERE BBOB.itemid = p_itemid AND BBO.breederbatchid = p_breederbatchid AND 
						  BBO.companyid = p_companyid;
		END IF;

   
	RETURN @liveqty;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_breeder_batchwise_birdliveqtyofweek`(
	p_breederbatchid INT,
    p_itemid INT,
    p_weekfirstdate DATE,
    p_weeklastdate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @@sql_mode = '';
	SET @liveqty = 0;
    SET @placementdate = null;
    
	SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
    
    
   IF EXISTS(SELECT id FROM breederbatchplacement WHERE breederbatchid = p_breederbatchid AND id IS NOT NULL) THEN
   IF(@placementdate = p_weekfirstdate) THEN
    
	           SELECT SUM(BBPD.quantity) INTO @liveqty
			   FROM breederbatchplacement BBP
				INNER JOIN breederbatchplacementdetail BBPD ON BBP.id = BBPD.breederbatchplacementid
				WHERE BBP.breederbatchid = p_breederbatchid AND BBP.companyid = p_companyid AND
							BBPD.itemid = p_itemid ;
        
    ELSE
     
				SELECT (IFNULL(SUM(BBPD.quantity),0)- fnc_breeder_batchwise_cullsandmortality(p_breederbatchid,p_itemid,p_weeklastdate,p_companyid)) INTO @liveqty
                    
				FROM breederbatchplacement BBP
				INNER JOIN breederbatchplacementdetail BBPD ON BBP.id = BBPD.breederbatchplacementid
				WHERE BBP.breederbatchid = p_breederbatchid AND BBP.companyid = p_companyid AND
							BBPD.itemid = p_itemid; 

	END IF;
					
		 ELSE
				
					SELECT
					 (IFNULL(SUM(BBOB.placeqty),0) - fnc_breeder_batchwise_cullsandmortality(p_breederbatchid,p_itemid,p_weeklastdate,p_companyid)) INTO @liveqty
                    
					FROM breederbatchopening BBO
					INNER JOIN breederbatchmalefemaleopeningdetail BBOB ON BBO.id = BBOB.breederbatchopeningid
					WHERE BBOB.itemid = p_itemid AND BBO.breederbatchid = p_breederbatchid AND 
						  BBO.companyid = p_companyid;
		END IF;
   
	RETURN @liveqty;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_breeder_batchwise_cullsandmortality`(
	p_breederbatchid INT,
    p_itemid INT,
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	 SET @@sql_mode = '';
	SET @quantity = 0;
    SET @placementdate = NOW();
    
   SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(totalmortality),0) + IFNULL(SUM(totalculls),0) INTO @quantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND 
         BDM.itemid = p_itemid AND
         (BDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN IFNULL(@quantity,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_breeder_biologicalvalue`(
    p_breederbatchid INT,
    p_transactiondate DATE,
    p_placementdate DATE,
    p_companyid INT
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @maleqty  = null;
    SET @femaleqty = null;
    SET @malecost = null;
    SET @femalecost = null;
    SET @consumptioncost = null;
    SET @billogicalvalue = null;
    SET @defaultfemalechickid = null;
    SET @defaultmalechickid = null;
    SET @overheadexp = 0;
    SET @goodsissuecost = 0;
    SET @p_transactiondate = date_add(p_transactiondate, INTERVAL 1 DAY);
    
    
    
    SELECT maleitemid, femaleitemid
           INTO @defaultmalechickid, @defaultfemalechickid
           FROM breederbatch WHERE id = p_breederbatchid;
   
			SELECT fnc_daily_consumption_cost(p_breederbatchid,p_placementdate,@p_transactiondate),
                 fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@defaultmalechickid),
			     fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@defaultfemalechickid) ,
			     fnc_chicks_placementqty(p_breederbatchid,p_companyid,@defaultmalechickid) ,
			     fnc_chicks_placementqty(p_breederbatchid,p_companyid,@defaultfemalechickid) INTO
                 @consumptioncost,@malecost,@femalecost,@maleqty, @femaleqty;
    
        SELECT ((@maleqty*@malecost)+(@femalecost*@femaleqty)) INTO @purvalue;
		SELECT fun_overhed_exp(p_breederbatchid,721,p_transactiondate,p_companyid) INTO @overheadexp;
        SELECT fnc_getgoodsissue(p_breederbatchid,721,p_transactiondate) INTO @goodsissuecost;
        SELECT (@purvalue + @consumptioncost +@overheadexp+@goodsissuecost) INTO @billogicalvalue;
        
         RETURN @billogicalvalue;
         
       
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_breeder_getlasttransactiondate`(
	p_breederbatchid INT
) RETURNS date
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @transactiondate = null;
SET @collectiondate = null;
SET @livebatchdate= null;

	SELECT 
			BT.transactiondate
			INTO 
            @transactiondate
		FROM 
			breederdailytransaction BT
		WHERE BT.breederbatchid = p_breederbatchid
        ORDER BY BT.id DESC
		LIMIT 1;
        
        SELECT 
			EC.collectiondate
			INTO 
            @collectiondate
		FROM 
			eggscollection EC
		WHERE EC.breederbatchid = p_breederbatchid
        ORDER BY EC.id DESC
		LIMIT 1;
       
       IF(@collectiondate IS NOT null) then
		   IF(@transactiondate>@collectiondate)THEN
			
				SELECT @transactiondate INTO @livebatchdate;
				
			ELSE
				SELECT @collectiondate INTO @livebatchdate;
				
			END IF;
			ELSE
			SELECT @transactiondate INTO @livebatchdate;
            if(@livebatchdate IS NULL)then
				SET @livebatchdate = now();
                end if;
        END IF;

RETURN @livebatchdate;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_breeder_opening_totaleggs`(
 p_breederbatchid INT(11),
 p_companyid INT(11)
 ) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	 SET @@sql_mode = '';
     SET @total_eggs = NUll;
    
           
           SELECT ifnull(SUM(BMF.totaleggs),0) INTO @total_eggs
           FROM 
           breederbatchopening BBO
           LEFT JOIN breederbatchmalefemaleopeningdetail BMF ON BBO.id = BMF.breederbatchopeningid
           WHERE
           BBO.breederbatchid = p_breederbatchid AND BBO.companyid = p_companyid;
		
        
        RETURN IFNULL(@total_eggs,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculatepurchaseamont`(
    p_varderids varchar(200),
	p_fromdate DATE,
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @totalamount = 0;
   
    
        SELECT 
		
            SUM((PID.quantity*PID.unitprice) )INTO @totalamount
		
 
	FROM
			purchaseinvoice PI
			LEFT JOIN purchaseinvoicedetail PID ON PI.id = PID.purchaseinvoiceid
       
    
	WHERE 
             FIND_IN_SET( PI.vendorid,@vendorids) AND
			PI.invoicedate BETWEEN p_fromdate AND p_todate AND
            PI.companyid = p_companyid; 

RETURN @totalamount;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_batchwisetotaleggs`(
p_breederbatchid INT,
p_shedids varchar(300),
p_fromdate DATE,
p_todate DATE,
p_companyid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @totaleggs = 0;
       
	SELECT (ECD.quantity) INTO @totaleggs
    
 FROM breederdailytransaction BDT
 LEFT JOIN eggscollection EC ON EC.breederbatchid = BDT.breederbatchid AND EC.shedid = BDT.shedid
 LEFT JOIN eggscollectiondetail ECD ON ECD.shedid = BDT.shedid
        
        
	WHERE
		EC.breederbatchid = p_breederbatchid AND
        EC.shedid = p_shedids  AND
	  (EC.collectiondate BETWEEN p_fromdate AND p_todate)
      group by EC.collectiondate,ECD.id;
      
	RETURN IFNULL(@totaleggs, 0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_consumedquantityitemlayer`(
    p_weekfirstdate DATE,
    p_weeklastdate DATE,
	p_batchid INT,
    p_itemid VARCHAR(200),
    p_companyid INT
  
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = null;
    SET @openingquantity = 0 ;
   
    SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @placementdate;
     
     
	 SELECT IFNULL(SUM(LDC.consumptionquantity), 0) into @quantity
    FROM
		layerdailyconsumption LDC
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDC.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_batchid AND
		LDC.layeritemid = p_itemid AND
		(LDT.transactiondate BETWEEN p_weekfirstdate AND p_weeklastdate); 
        
	SELECT 
	IFNULL(SUM(LBCD.quantity),0) INTO @openingquantity
	FROM layer_batchopening_balance LBOB 
	LEFT JOIN layer_batchconsumptionopening_detail LBCD ON LBCD.layerbatchopeningid = LBOB.id 
    
    WHERE 
	LBOB.layerbatchid = p_batchid AND
    LBCD.consumptionitemid = p_itemid 
    group by LBOB.layerbatchid;

RETURN (@quantity + @openingquantity);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_consumedquantityitemlayer_ondate`(
	p_transactiondate DATE,
	p_batchid INT,
    p_itemid VARCHAR(200),
    p_companyid INT
  
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = null;
    SET @openingquantity = 0 ;
   
    SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @placementdate;
     
     
	 SELECT IFNULL(SUM(LDC.consumptionquantity), 0) into @quantity
    FROM
		layerdailyconsumption LDC
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDC.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_batchid AND
		LDC.layeritemid = p_itemid AND
        LDC.consumptiontypeid = 1149 AND
		LDT.transactiondate = p_transactiondate; 
        
	SELECT 
	IFNULL(SUM(LBCD.quantity),0) INTO @openingquantity
	FROM layer_batchopening_balance LBOB 
	LEFT JOIN layer_batchconsumptionopening_detail LBCD ON LBCD.layerbatchopeningid = LBOB.id 
    
    WHERE 
	LBOB.layerbatchid = p_batchid AND
    LBCD.consumptionitemid = p_itemid AND
    LBCD.consumptiontypeid = 1149 
    group by LBOB.layerbatchid;

RETURN (@quantity + @openingquantity);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_consumedquantityitemlayer_uptodate`(
	p_transactiondate DATE,
	p_batchid INT,
    p_itemid VARCHAR(200),
    p_companyid INT
  
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = null;
    SET @openingquantity = 0 ;
   
    SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @placementdate;
     
     
	 SELECT IFNULL(SUM(LDC.consumptionquantity), 0) into @quantity
    FROM
		layerdailyconsumption LDC
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDC.layerdailytransactionid
        LEFT JOIN layeramortization LA ON LA.layerbatchid = LDT.layerbatchid
        
	WHERE
		LDT.layerbatchid = p_batchid AND
		LDC.layeritemid = p_itemid AND
        LDC.consumptiontypeid = 1149 AND
		LDT.transactiondate >= LA.amortizationdate AND
	    LDT.transactiondate <= p_transactiondate;
        
	SELECT 
	IFNULL(SUM(LBCD.quantity),0) INTO @openingquantity
	FROM layer_batchopening_balance LBOB 
	LEFT JOIN layer_batchconsumptionopening_detail LBCD ON LBCD.layerbatchopeningid = LBOB.id
    LEFT JOIN layeramortization LA ON LA.layerbatchid = LBOB.layerbatchid
    
    WHERE 
	LBOB.layerbatchid = p_batchid AND
    LBCD.consumptionitemid = p_itemid AND
    LBCD.consumptiontypeid = 1149 
    group by LBOB.layerbatchid;

RETURN (@quantity + @openingquantity);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_consumedquantitymalefemale`(
    p_weekfirstdate DATE,
    p_weeklastdate DATE,
	p_breederbatchid INT,
    p_itemid VARCHAR(200),
    p_companyid INT
  
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = null;
    SET @openingquantity = 0 ;
   
    SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
     
     
	 SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM
		breederdailyconsumption BDC
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDC.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
		BDC.breederitemid = p_itemid AND
		(BDT.transactiondate BETWEEN p_weekfirstdate AND p_weeklastdate); 
        
	SELECT 
	IFNULL(SUM(BBL.quantity),0) INTO @openingquantity
	FROM breederbatchopening BBO 
	LEFT JOIN breederbatchconsumptionopeningdetail BBL ON BBL.breederbatchopeningid = BBO.id 
    
    WHERE 
	BBO.breederbatchid = p_breederbatchid AND
    BBL.consumptionitemid = p_itemid 
    group by BBO.breederbatchid;

RETURN (@quantity + @openingquantity);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_consumptioncost`(
	p_issueids VARCHAR(600),
    p_itemids VARCHAR(600),
    p_transactiondate DATE
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @consumptioncost = 0;
    SET @materialissueids = null;
        SELECT IFNULL(GROUP_CONCAT(DISTINCT id),0) into @materialissueids FROM materialissuedetail WHERE FIND_IN_SET(materialissueid, p_issueids);

			SELECT IFNULL(SUM(itemvalue),0) INTO @consumptioncost
            FROM materialmovement MM
            -- LEFT JOIN materialissuedetail MID ON MID.id = MM.transactionid
            WHERE MM.transactiontypeid = 683
            AND FIND_IN_SET(MM.itemid,p_itemids)
            AND FIND_IN_SET(MM.transactionid, @materialissueids)
            AND MM.transactiondate = p_transactiondate
            GROUP BY MM.transactiondate;
	  			
	RETURN @consumptioncost; 
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_consumptioncost_byconsumptiontype`(
    p_breederbatchid INT,
    p_fromdate DATE,
    p_todate DATE,
    p_consumptiontypeid INT
    
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @@sql_mode = '';
	SET @cost = 0;
    SET @issuedetailids = null;
    SET @itemids = null;
    
    IF(p_todate IS NULL OR p_fromdate IS NULL) THEN
		SELECT 0 INTO @cost;
	ELSE
		
		/* SELECT IFNULL(group_concat(DISTINCT BDC.issuedetailid),0),
		IFNULL(group_concat(DISTINCT BDC.itemid),0) INTO @issuedetailids, @itemids
		FROM breederdailytransaction BDT
		LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id
		WHERE BDT.breederbatchid = p_breederbatchid
		AND BDT.transactiondate between p_fromdate and p_todate
		AND BDC.consumptiontypeid = p_consumptiontypeid;
		
		SELECT IFNULL(SUM(itemvalue),0) INTO @cost
		FROM materialmovement MM
		WHERE MM.transactiontypeid = 683
		AND FIND_IN_SET(MM.itemid,@itemids)
		AND FIND_IN_SET(MM.transactionid, @issuedetailids);
		*/
        
        SELECT IFNULL(SUM(BDC.itemvalue),0) INTO @cost
		FROM breederdailytransaction BDT
		LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id
		WHERE BDT.breederbatchid = p_breederbatchid
		AND BDT.transactiondate between p_fromdate and p_todate
		AND BDC.consumptiontypeid = p_consumptiontypeid
        AND BDT.statusid = 822;
    END IF;
	RETURN @cost;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_cumconsumedquantity`(
    p_breederbatchid INT,
    p_itemid VARCHAR(200),
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = null;
    SET @openingquantity = 0 ;
   
    SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
     
     
	 SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM
		breederdailyconsumption BDC
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDC.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
		BDC.itemid = p_itemid AND
		(BDT.transactiondate BETWEEN @placementdate AND p_todate); 
        
	SELECT 
	IFNULL(SUM(BBL.quantity),0) INTO @openingquantity
	FROM breederbatchopening BBO 
	LEFT JOIN breederbatchconsumptionopeningdetail BBL ON BBL.breederbatchopeningid = BBO.id 
    
    WHERE 
	BBO.breederbatchid = p_breederbatchid AND
    BBL.consumptionitemid = p_itemid 
    group by BBO.breederbatchid;

RETURN (@quantity + @openingquantity);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_cummactconbatchdetailscreen`(
    p_cbfbatchid INT,
    -- p_cbfshedid INT,
    p_companyid INT
    
) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    SET @openingcon = 0;
   
    
  SELECT fnc_getplacementdatecbf(p_cbfbatchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(CDC.quantity), 0) into @quantity
    FROM
		cbf_dailyconsumption CDC
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDC.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_cbfbatchid AND
        -- CDT.shedid = p_cbfshedid AND
        (CDT.transactiondate>@placementdate) AND
        CDC.consumptiontypeid = 861; 
        
 SET @openingfeedconsume  = 0;
 
    SELECT 
	IFNULL(SUM(COBD.feedconsume),0) INTO @openingfeedconsume
	FROM cbf_openingbalance COB 
	LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id 
    
    WHERE 
	COBD.cbfbatchid = p_cbfbatchid
    group by COBD.cbfbatchid;
		

RETURN (IFNULL(@quantity,0) + IFNULL(@openingfeedconsume,0));
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_cummactconcbf`(
    p_cbfbatchid INT,
    p_cbfshedid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    SET @openingcon = 0;
   
    
  SELECT fnc_getplacementdatecbf(p_cbfbatchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(CDC.quantity), 0) into @quantity
    FROM
		cbf_dailyconsumption CDC
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDC.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_cbfbatchid AND
        CDT.shedid = p_cbfshedid AND
        (CDT.transactiondate BETWEEN @placementdate AND p_transactiondate) AND
        CDC.consumptiontypeid = 861; 
        
 SET @openingfeedconsume  = 0;
 
    SELECT 
	IFNULL(SUM(COBD.feedconsume),0) INTO @openingfeedconsume
	FROM cbf_openingbalance COB 
	LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id 
    
    WHERE 
	COBD.cbfbatchid = p_cbfbatchid
    group by COBD.cbfbatchid;
		

RETURN -- IFNULL(@quantity,0);
(IFNULL(@quantity,0) + IFNULL(@openingfeedconsume,0));
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_cummactconcostcbf`(
    p_cbfbatchid INT,
    p_cbfshedid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @cost = 0;
    SET @placementdate = NOW();
    SET @openingcon = 0;
   
    
  SELECT fnc_getplacementdatecbf(p_cbfbatchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(CDC.itemvalue), 0) into @cost
    FROM
		cbf_dailyconsumption CDC
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDC.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_cbfbatchid AND
        CDT.shedid = p_cbfshedid AND
        (CDT.transactiondate BETWEEN @placementdate AND p_transactiondate) AND
        CDC.consumptiontypeid = 861; 
        
 SET @openingfeedconsumecost  = 0;
 
    SELECT 
	IFNULL(SUM(COBD.feedvalue),0) INTO @openingfeedconsumecost
	FROM cbf_openingbalance COB 
	LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id 
    
    WHERE 
	COBD.cbfbatchid = p_cbfbatchid
    group by COBD.cbfbatchid;
		

RETURN (IFNULL(@cost,0) + IFNULL(@openingfeedconsumecost,0));
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_cummactconinkgcbf`(
    p_cbfbatchid INT,
    p_cbfshedid INT,
    p_transactiondate DATE,
	p_itemunitid INT,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    SET @openingcon = 0;
   
    
  SELECT fnc_getplacementdatecbf(p_cbfbatchid,p_companyid) INTO @placementdate;
     /* 50pp Bag */
     IF(p_itemunitid = 144) THEN 
	SELECT IFNULL(SUM(CDC.quantity*50), 0) into @quantity
    FROM
		cbf_dailyconsumption CDC
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDC.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_cbfbatchid AND
        CDT.shedid = p_cbfshedid AND
        (CDT.transactiondate BETWEEN @placementdate AND p_transactiondate) AND
        CDC.consumptiontypeid = 861; 
    END IF;     
    
     /* 30pp Bag */
     IF(p_itemunitid = 145) THEN 
	SELECT IFNULL(SUM(CDC.quantity*30), 0) into @quantity
    FROM
		cbf_dailyconsumption CDC
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDC.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_cbfbatchid AND
        CDT.shedid = p_cbfshedid AND
        (CDT.transactiondate BETWEEN @placementdate AND p_transactiondate) AND
        CDC.consumptiontypeid = 861; 
    END IF;     
  
    /* 30pp Bag */
     IF(p_itemunitid = 142) THEN 
	SELECT IFNULL(SUM(CDC.quantity), 0) into @quantity
    FROM
		cbf_dailyconsumption CDC
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDC.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_cbfbatchid AND
        CDT.shedid = p_cbfshedid AND
        (CDT.transactiondate BETWEEN @placementdate AND p_transactiondate) AND
        CDC.consumptiontypeid = 861; 
    END IF;     
  
    
    
 SET @openingfeedconsume  = 0;
 
    SELECT 
	IFNULL(SUM(COBD.feedconsume),0) INTO @openingfeedconsume
	FROM cbf_openingbalance COB 
	LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id 
    
    WHERE 
	COBD.cbfbatchid = p_cbfbatchid
    group by COBD.cbfbatchid;
		

RETURN (IFNULL(@quantity,0) + IFNULL(@openingfeedconsume,0));
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_cummalefemaleculls`(
    p_breederbatchid INT,
    p_breedershedid INT,
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @totalquantity = 0;
    SET @placementdate = NOW();
    SET @openingfemaleculls = 0;
   
    
  
    
    SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(totalculls), 0) into @totalquantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
		BDT.shedid = p_breedershedid AND
		(BDT.transactiondate BETWEEN @placementdate AND p_todate); 
        
        
        SET @openingfemalemortality = 0;

	SET @openingfemaleculls = 0;

	SELECT 
	IFNULL(SUM(BBM.culls),0) INTO @openingfemaleculls
	FROM breederbatchopening BBO 
	LEFT JOIN breederbatchmalefemaleopeningdetail BBM ON BBM.breederbatchopeningid = BBO.id 
    
    WHERE 
	BBO.breederbatchid = p_breederbatchid
    group by BBO.breederbatchid;
	

RETURN (@quantity + @openingfemaleculls);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_cummalefemalecullscbf`(
    p_cbfbatchid INT,
    p_cbfshedid INT,
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @totalquantity = 0;
    SET @placementdate = NOW();
    SET @openingfemaleculls = 0;
   
    
  
    
    SELECT fnc_getplacementdatecbf(p_cbfbatchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(totalculls), 0) into @totalquantity
    FROM
		cbf_dailymortality CDM
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDM.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_cbfbatchid AND
		CDT.shedid = p_cbfshedid AND
		(CDT.transactiondate BETWEEN @placementdate AND p_todate); 
        
        
        SET @openingfemalemortality = 0;

	SET @openingfemaleculls = 0;

	SELECT 
	IFNULL(SUM(COBD.mortality),0) INTO @openingfemaleculls
	FROM cbf_openingbalance COB 
	LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id 
    
    WHERE 
	COBD.cbfbatchid = p_cbfbatchid
    group by COBD.cbfbatchid;
	

RETURN @totalquantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_cummalefemalecullscbfscreen`(
    p_cbfbatchid INT,
    p_cbfshedid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @totalquantity = 0;
    SET @placementdate = NOW();
    SET @openingfemaleculls = 0;
   
    
  
    
    -- SELECT fnc_getplacementdatecbf(p_cbfbatchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(totalculls), 0) into @totalquantity
    FROM
		cbf_dailymortality CDM
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDM.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_cbfbatchid AND
		CDT.shedid = p_cbfshedid;
		-- (CDT.transactiondate BETWEEN @placementdate AND p_todate); 
        
        
        SET @openingfemalemortality = 0;

	SET @openingfemaleculls = 0;

	SELECT 
	IFNULL(SUM(COBD.mortality),0) INTO @openingfemaleculls
	FROM cbf_openingbalance COB 
	LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id 
    
    WHERE 
	COBD.cbfbatchid = p_cbfbatchid
    group by COBD.cbfbatchid;
	

RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_cummalefemalemortality`(
    p_breederbatchid INT,
    p_breedershedid INT,
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    SET @openingfemalemortality = 0;
   
    
   SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(totalmortality), 0) into @quantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
		BDT.shedid = p_breedershedid AND
		(BDT.transactiondate BETWEEN @placementdate AND p_todate); 
        
        SET @openingfemalemortality = 0;

	SELECT 
	IFNULL(SUM(BBM.mortality),0) INTO @openingfemalemortality
	FROM breederbatchopening BBO 
	LEFT JOIN breederbatchmalefemaleopeningdetail BBM ON BBM.breederbatchopeningid = BBO.id 
    
    WHERE 
	BBO.breederbatchid = p_breederbatchid
    group by BBO.breederbatchid;

RETURN (@quantity + @openingfemalemortality);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_cummalefemalemortalityuptolastdate`(
    p_breederbatchid INT,
    p_transactiondate DATE,
    p_itemid INT,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    SET @openingfemalemortality = 0;
   
    
   SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(totalmortality), 0) into @quantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
		BDT.transactiondate = p_transactiondate AND
        BDM.itemid = p_itemid; 
        
        SET @openingfemalemortality = 0;

	SELECT 
	IFNULL(SUM(BBM.mortality),0) INTO @openingfemalemortality
	FROM breederbatchopening BBO 
	LEFT JOIN breederbatchmalefemaleopeningdetail BBM ON BBM.breederbatchopeningid = BBO.id 
    
    WHERE 
	BBO.breederbatchid = p_breederbatchid
    AND BBM.itemid = p_itemid
    group by BBO.breederbatchid;

RETURN (@quantity + @openingfemalemortality);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_cummalefemalemortalityuptolastdate_layer`(
    p_batchid INT,
    p_transactiondate DATE,
    p_itemid INT,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    SET @openingmortality = 0;
   
    
   SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(todaymortality), 0) into @quantity
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_batchid AND
		LDT.transactiondate <= p_transactiondate AND
        LDM.itemid = p_itemid; 
        
        SET @openingmortality = 0;

	SELECT 
	IFNULL(SUM(LBOD.mortality),0) INTO @openingmortality
	FROM layer_batchopening_balance LBO 
	LEFT JOIN layer_batchbridopeningbalance_detail LBOD ON LBOD.layerbatchopeningid = LBO.id 
    
    WHERE 
	LBO.layerbatchid = p_batchid
    AND LBOD.itemid = p_itemid
    group by LBO.layerbatchid;

RETURN (@quantity + @openingmortality);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_cummamortalitycbf`(
    p_cbfbatchid INT,
    p_cbfshedid INT,
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    SET @openingfemalemortality = 0;
   
    
  SELECT fnc_getplacementdatecbf(p_cbfbatchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(totalmortality), 0) into @quantity
    FROM
		cbf_dailymortality CDM
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDM.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_cbfbatchid AND
		CDT.shedid = p_cbfshedid AND
		(CDT.transactiondate BETWEEN @placementdate AND p_todate); 
        
        SET @openingfemalemortality = 0;

	SELECT 
	IFNULL(SUM(COBD.mortality),0) INTO @openingfemalemortality
	FROM cbf_openingbalance COB 
	LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id 
    
    WHERE 
	COBD.cbfbatchid = p_cbfbatchid
    group by COBD.cbfbatchid;
	

RETURN (@quantity + @openingfemalemortality);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_cummamortalitycbfscreen`(
    p_cbfbatchid INT,
    p_cbfshedid INT
   
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    SET @openingfemalemortality = 0;
   
    
  -- SELECT fnc_getplacementdatecbf(p_cbfbatchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(totalmortality), 0) into @quantity
    FROM
		cbf_dailymortality CDM
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDM.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_cbfbatchid AND
		CDT.shedid = p_cbfshedid; 
		-- (CDT.transactiondate BETWEEN @placementdate AND p_todate); 
        
        SET @openingfemalemortality = 0;

	SELECT 
	IFNULL(SUM(COBD.mortality),0) INTO @openingfemalemortality
	FROM cbf_openingbalance COB 
	LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id 
    
    WHERE 
	COBD.cbfbatchid = p_cbfbatchid
    group by COBD.cbfbatchid;
	

RETURN (@quantity + @openingfemalemortality);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_cummastdconcbf`(
    p_cbfbatchid INT,
    p_cbfshedid INT,
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    SET @openingcon = 0;
   
    
  SELECT fnc_getplacementdatecbf(p_cbfbatchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(stdconsumption), 0) into @quantity
    FROM
		cbf_dailyconsumption CDC
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDC.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_cbfbatchid AND
		-- CDT.shedid = p_cbfshedid AND
		(CDT.transactiondate BETWEEN @placementdate AND p_todate)AND
        CDC.consumptiontypeid = 861; 
        
        SET @openingcon = 0;

	

RETURN (@quantity);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_itemopeningbalance_tillgivendate`(
    p_itemid INT,
    p_warehouseid INT,
    p_todate DATE,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @inwardQuantity = 0;
    SET @outwardQuantity = 0;
                
    SELECT 
		IFNULL(SUM(quantity), 0) into @inwardQuantity
    FROM 
		materialmovement
    WHERE
		transactiontypeid in(681, 682, 684) AND
        towarehouseid = p_warehouseid AND
        itemid = p_itemid AND
        transactiondate <= p_todate AND
		companyid = p_companyid;
    
    
	SELECT IFNULL(SUM(quantity), 0) into @outwardQuantity
    FROM materialmovement
    WHERE 
		transactiontypeid = 683 AND
        fromwarehouseid = p_warehouseid AND
		itemid = p_itemid AND	
        transactiondate < p_todate AND
		companyid = p_companyid;
		
   
   RETURN (@inwardQuantity - @outwardQuantity);
 
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_layerconsumptioncost_byconsumptiontype`(
    p_layerbatchid INT,
    p_fromdate DATE,
    p_todate DATE,
    p_consumptiontypeid INT
    
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @@sql_mode = '';
	SET @cost = 0;
    SET @issuedetailids = null;
    SET @itemids = null;
    
    IF(p_todate IS NULL OR p_fromdate IS NULL) THEN
		SELECT 0 INTO @cost;
	ELSE
		
		SELECT IFNULL(group_concat(DISTINCT LDC.issuedetailid),0),
		IFNULL(group_concat(DISTINCT LDC.itemid),0) INTO @issuedetailids, @itemids
		FROM layerdailytransaction LDT
		LEFT JOIN layerdailyconsumption LDC ON LDC.layerdailytransactionid = LDT.id
		WHERE LDT.layerbatchid = p_layerbatchid
		AND LDT.transactiondate between p_fromdate and p_todate
		AND LDC.consumptiontypeid = p_consumptiontypeid;
		
		SELECT IFNULL(SUM(itemvalue),0) INTO @cost
		FROM materialmovement MM
		WHERE MM.transactiontypeid = 683
		AND FIND_IN_SET(MM.itemid,@itemids)
		AND FIND_IN_SET(MM.transactionid, @issuedetailids);
		
    END IF;
	RETURN @cost;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_layercumconsumedquantity`(
    p_layerbatchid INT,
    p_itemid VARCHAR(200),
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    SET @openingquantity = 0;
   
    
      SELECT fnc_getlayerplacementdate(p_layerbatchid,p_companyid) INTO @placementdate;
     
     
	 SELECT IFNULL(SUM(consumptionquantity), 0) into @quantity
    FROM
		layerdailyconsumption LDC
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDC.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid AND
		LDC.itemid = p_itemid AND
		(LDT.transactiondate BETWEEN @placementdate AND p_todate); 
        
	SELECT 
	IFNULL(SUM(LBL.quantity),0) INTO @openingquantity
	FROM layer_batchopening_balance LBO 
	LEFT JOIN layer_batchconsumptionopening_detail LBL ON LBL.layerbatchopeningid = LBO.id 
    
    WHERE 
	LBO.layerbatchid = p_layerbatchid AND
    LBL.consumptionitemid = p_itemid 
    group by LBO.layerbatchid;
        


RETURN (@quantity + @openingquantity);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_layerfemale_feedconsumption`(
    p_dailytransactionid varchar(1000),
    p_layeritemid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @quantity = 0;
   
    SELECT IFNULL(SUM(consumptionquantity), 0) into @quantity
    FROM layerdailyconsumption
    
    WHERE
    find_in_set(layerdailytransactionid,p_dailytransactionid) AND
	-- layerdailytransactionid = p_dailytransactionid AND
    consumptiontypeid = 1149 AND -- feed 
    itemid = p_layeritemid ;
    
   RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_layer_received_feed`(
    p_shedid INT,
    p_itemid INT(11),
    p_fromdate DATE,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @warehousebinid = null;
    SET @quantity = 0;
    
            
            
    SELECT GROUP_CONCAT(warehousebinid) INTO  @warehousebinid
	FROM layershed
    WHERE id = p_shedid;
  
  
    SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM materialmovement
    
    WHERE
	companyid = p_companyid AND
    transactiontypeid in(681, 682, 684,685) AND
    towarehousebinid =  @warehousebinid
    AND transactiondate = p_fromdate AND
    itemid = p_itemid;
    

   RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_layer_transfered_feed`(
    p_shedid INT,
    p_itemid INT(11),
    p_fromdate DATE,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @warehousebinid = null;
    SET @quantity = 0;
    
	
	-- get warehousebin ids for given sheds
    SELECT warehousebinid INTO @warehousebinid
	FROM layershed
    WHERE id =  p_shedid;
  
  
	-- calculate transfered quantity
    
    SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM materialmovement
    
    WHERE
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    fromwarehousebinid = @warehousebinid
    AND transactiondate = p_fromdate
    AND itemid = p_itemid;
    

   RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_malefemale_feedconsumption`(
    p_dailytransactionid INT,
    p_breederitemid INT,
	p_feeditemid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @quantity = 0;
   
    SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM breederdailyconsumption
    
    WHERE
	breederdailytransactionid = p_dailytransactionid AND
    consumptiontypeid = 861 -- feed 
    AND breederitemid = p_breederitemid
    AND itemid = p_feeditemid;
    
   RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_malefemale_feedconsumptionuptodate`(
	p_fromtransactiondate Date,
    p_totransactiondate Date,
	p_shedid INT,
    p_itemid INT(11),
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
    
    SET @quantity = 0;
    
    SELECT GROUP_CONCAT(warehousebinid) INTO @warehousebinids
	FROM breedershed
    WHERE id =  p_shedid;
   
   SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM materialmovement
    WHERE transactiondate between p_fromtransactiondate AND p_totransactiondate AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
    fromwarehousebinid =   @warehousebinids;
    RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_malefemale_feedconsumptionuptodatelyr`(
	p_fromtransactiondate Date,
    p_totransactiondate Date,
	p_shedid INT,
    p_itemid INT(11),
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
    
    SET @quantity = 0;
    
    SELECT GROUP_CONCAT(warehousebinid) INTO @warehousebinids
	FROM layershed
    WHERE id =  p_shedid;
   
   SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM materialmovement
    WHERE transactiondate between p_fromtransactiondate AND p_totransactiondate AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
    fromwarehousebinid =   @warehousebinids;
    RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_outfeedquantity_ongivendate`(
    p_itemid INT,
    p_warehouseid INT,
    p_date DATE,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @outQuantity = 0;
   
	SELECT IFNULL(SUM(quantity), 0) into @outQuantity
    FROM materialmovement
    WHERE 
		transactiontypeid in(682) AND
        fromwarehouseid = p_warehouseid AND
		itemid = p_itemid AND	
        transactiondate = p_date AND
		companyid = p_companyid;
        
   
   RETURN @outQuantity;
 
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_receivedfeedquantity_ongivendate`(
    p_itemid INT,
    p_warehouseid INT,
    p_date DATE,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

   
    SET @inwardQuantity = 0;
                
    SELECT 
		IFNULL(SUM(quantity), 0) into @inwardQuantity
    FROM 
		materialmovement
    WHERE
		transactiontypeid in(681, 682, 684) AND
        towarehouseid = p_warehouseid AND
        itemid = p_itemid AND
        transactiondate = p_date AND
		companyid = p_companyid;
        
   
   RETURN @inwardQuantity;
 
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_received_feed`(
    p_shedid int,
    p_itemid INT(11),
    p_fromdate DATE,
    p_companyid INT
  --   p_dailytransactionid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @warehousebinids = null;
    SET @quantity = 0;
    
            
            
    SELECT GROUP_CONCAT(warehousebinid) INTO @warehousebinids
	FROM breedershed
    WHERE id =  p_shedid;
  
  
    SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM materialmovement
    
    WHERE
	companyid = p_companyid AND
    itemid = p_itemid AND
    transactiontypeid in(681, 682,684,685) AND
	transactiondate = p_fromdate AND
    towarehousebinid =  @warehousebinids;
    
   RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_totaleggslayeronparticularday`(
p_transactiondate DATE,
p_batchid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @totaleggs = 0;
       
	SELECT SUM(LECD.quantity) INTO @totaleggs
    FROM
		layereggscollection LEC
        LEFT JOIN layereggscollectiondetail LECD ON LECD.eggscollectionid = LEC.id
        
        
	WHERE
		LEC.layerbatchid = p_batchid AND
	  LEC.collectiondate=p_transactiondate;
      
	RETURN IFNULL(@totaleggs, 0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_totaleggslayeruptoday`(
p_transactiondate DATE,
p_batchid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @totaleggs = 0;
       
	SELECT SUM(LECD.quantity) INTO @totaleggs
    -- SELECT SUM(LA.amortizationdate) INTO @totaleggs
    FROM
		layereggscollection LEC
        LEFT JOIN layereggscollectiondetail LECD ON LECD.eggscollectionid = LEC.id
        LEFT JOIN layeramortization LA ON LA.layerbatchid = LEC.layerbatchid
        
        
	WHERE
		LEC.layerbatchid = p_batchid AND
	  LA.amortizationdate<=p_transactiondate AND
      LEC.collectiondate<=p_transactiondate;
      
	RETURN IFNULL(@totaleggs, 0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_transfered_feed`(
    p_shedid INT,
    p_itemid INT(11),
    p_fromdate DATE,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @warehousebinids = null;
    SET @quantity = 0;
    
    -- get default male and female item ids

            
		
	-- get warehousebin ids for given sheds
    SELECT GROUP_CONCAT(warehousebinid) INTO @warehousebinids
	FROM breedershed
    WHERE id =  p_shedid;
  
  
	-- calculate transfered quantity
    
    SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM materialmovement
    
    WHERE
	companyid = p_companyid AND
    transactiontypeid = 682 AND
  fromwarehousebinid =  @warehousebinids
    AND transactiondate = p_fromdate
    AND itemid = p_itemid;
  
    

   RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_weeklyavgweiht`(
-- p_breederdailytransactionid INT,
p_weekfirstdate DATE,
p_weeklastdate DATE,
p_batchid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @avgweight = 0;
SET @countone = 0;
SET @weight = 0;


       
	SELECT count(*),SUM(EDD.avgweight),((SUM(EDD.avgweight))/count(*)) into @countone,@weight,@avgweight 
    
    FROM
		eggscollection EC
        LEFT JOIN eggsdistributiondetail EDD ON EDD.eggscollectionid = EC.id
        -- LEFT JOIN breederdailytransaction BDT ON EC.breederbatchid = BDT.breederbatchid
        
        
	WHERE
		-- BDT.id = p_breederdailytransactionid AND
		EC.breederbatchid = p_batchid AND
        EDD.itemtypeid=881 AND
	    (EDD.collectiondate BETWEEN p_weekfirstdate AND p_weeklastdate);
      
	RETURN IFNULL(@countone,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_weeklyavgweihtlayer`(
p_dailytransactionid INT,
p_weekfirstdate DATE,
p_weeklastdate DATE,
p_batchid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @avgweight = 0;
SET @countone = 0;
SET @weight = 0;


       
	SELECT count(*),SUM(LEDD.avgweight),((SUM(LEDD.avgweight))/count(*)) into @countone,@weight,@avgweight 
    
    FROM
		layereggscollection LEC
        LEFT JOIN layereggsdistributiondetail LEDD ON LEDD.eggscollectionid = LEC.id
        LEFT JOIN layerdailytransaction LDT ON LEC.layerbatchid = LDT.layerbatchid
        
        
	WHERE
		LDT.id = p_dailytransactionid AND
		LEC.layerbatchid = p_batchid AND
        LEDD.itemtypeid=881 AND
	    (LEDD.collectiondate BETWEEN p_weekfirstdate AND p_weeklastdate);
      
	RETURN IFNULL(@avgweight,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_weeklyHatchimgeggs`(
p_weekfirstdate DATE,
p_weeklastdate DATE,
p_batchid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @hatchingeggs = 0;
       
	SELECT SUM(EDD.quantity) INTO @hatchingeggs
    FROM
		eggscollection EC
        LEFT JOIN eggsdistributiondetail EDD ON EDD.eggscollectionid = EC.id
        LEFT JOIN breederdailytransaction BDT ON EC.breederbatchid = BDT.breederbatchid
        
        
	WHERE
		EC.breederbatchid = p_batchid AND
        EDD.itemtypeid=881 AND
	    (EDD.collectiondate BETWEEN p_weekfirstdate AND p_weeklastdate);
      
	RETURN IFNULL(@hatchingeggs, 0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_weeklyHatchimgeggslayer`(
p_weekfirstdate DATE,
p_weeklastdate DATE,
p_batchid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @hatchingeggs = 0;
       
	SELECT SUM(LEDD.quantity) INTO @hatchingeggs
    FROM
		layereggscollection LEC
        LEFT JOIN layereggsdistributiondetail LEDD ON LEDD.eggscollectionid = LEC.id
        LEFT JOIN layerdailytransaction LDT ON LEC.layerbatchid = LDT.layerbatchid
        
        
	WHERE
		LEC.layerbatchid = p_batchid AND
        LEDD.itemtypeid=881 AND
	    (LEDD.collectiondate BETWEEN p_weekfirstdate AND p_weeklastdate);
      
	RETURN IFNULL(@hatchingeggs, 0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_weeklyitemwisebodyweight`(
p_breederdailytransactionid INT,
p_weekfirstdate DATE,
p_weeklastdate DATE,
p_breederbatchid INT,
p_itemid VARCHAR(200),
p_companyid INT    

) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @avgweight = 0;
SET @countone = 0;
SET @weight = 0;
   
   
    SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
     
     
	SELECT count(*), IFNULL(SUM(BDM.avgweight), 0),((SUM(BDM.avgweight))/count(*))into @countone,@weight,@avgweight
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
        BDM.itemid = p_itemid AND
		(BDT.transactiondate BETWEEN p_weekfirstdate AND p_weeklastdate); 
        
    

RETURN (@avgweight);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_weeklyitemwisebodyweightlayer`(
p_dailytransactionid INT,
p_weekfirstdate DATE,
p_weeklastdate DATE,
p_batchid INT,
p_itemid VARCHAR(200),
p_companyid INT    

) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @avgweight = 0;
SET @countone = 0;
SET @weight = 0;
   
   
    SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @placementdate;
     
     
	SELECT count(*), IFNULL(SUM(LDM.avgweight), 0),((SUM(LDM.avgweight))/count(*))into @countone,@weight,@avgweight
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_batchid AND
        LDM.itemid = p_itemid AND
		(LDT.transactiondate BETWEEN p_weekfirstdate AND p_weeklastdate); 
        
    

RETURN (@avgweight);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_weeklytotaleggs`(
p_weekfirstdate DATE,
p_weeklastdate DATE,
p_batchid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @totaleggs = 0;
       
	SELECT SUM(ECD.quantity) INTO @totaleggs
    FROM
		eggscollection EC
        LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id
        
        
	WHERE
		EC.breederbatchid = p_batchid AND
	  (EC.collectiondate BETWEEN p_weekfirstdate AND p_weeklastdate);
      
	RETURN IFNULL(@totaleggs, 0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_weeklytotaleggslayer`(
p_weekfirstdate DATE,
p_weeklastdate DATE,
p_batchid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @totaleggs = 0;
       
	SELECT SUM(LECD.quantity) INTO @totaleggs
    FROM
		layereggscollection LEC
        LEFT JOIN eggscollectiondetail LECD ON LECD.eggscollectionid = LEC.id
        
        
	WHERE
		LEC.layerbatchid = p_batchid AND
	  (LEC.collectiondate BETWEEN p_weekfirstdate AND p_weeklastdate);
      
	RETURN IFNULL(@totaleggs, 0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_calculate_weekno`(
	p_fromdate DATE,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	DECLARE p_days INT;
    DECLARE weekno INT;
    SET p_days = 0;
	
     SELECT DATEDIFF(p_fromdate, p_todate) INTO p_days;
     
     IF (p_days >= 162 && p_days <= 168) THEN
		SET weekno = 24;
        
	 ELSEIF (p_days >= 169 && p_days <= 175) THEN
		SET weekno = 25;
     
	 ELSEIF (p_days >= 176 && p_days <= 182) THEN
		SET weekno = 26;
        
	 ELSEIF (p_days >= 183 && p_days <= 189) THEN
		SET weekno = 27;
        
	 ELSEIF (p_days >= 190 && p_days <= 196) THEN
		SET weekno = 28;
        
	 ELSEIF (p_days >= 197 && p_days <= 203) THEN
		SET weekno = 29;
        
	 ELSEIF (p_days >= 204 && p_days <= 210) THEN
		SET weekno = 30;
        
	 ELSEIF (p_days >= 211 && p_days <= 217) THEN
		SET weekno = 31;
        
	 ELSEIF (p_days >= 218 && p_days <= 224) THEN
		SET weekno = 32;
        
	 ELSEIF (p_days >= 225 && p_days <= 231) THEN
		SET weekno = 33;
        
	 ELSEIF (p_days >= 232 && p_days <= 238) THEN
		SET weekno = 34;
        
	 ELSEIF (p_days >= 239 && p_days <= 245) THEN
		SET weekno = 35;
        
	 ELSEIF (p_days >= 246 && p_days <= 252) THEN
		SET weekno = 36;
        
	 ELSEIF (p_days >= 253 && p_days <= 259) THEN
		SET weekno = 37;
        
	 ELSEIF (p_days >= 260 && p_days <= 266) THEN
		SET weekno = 38;
        
	 ELSEIF (p_days >= 267 && p_days <= 273) THEN
		SET weekno = 39;
        
	 ELSEIF (p_days >= 274 && p_days <= 280) THEN
		SET weekno = 40;
        
	 ELSEIF (p_days >= 281 && p_days <= 287) THEN
		SET weekno = 41;
        
	 ELSEIF (p_days >= 288 && p_days <= 294) THEN
		SET weekno = 42;
        
	 ELSEIF (p_days >= 295 && p_days <= 301) THEN
		SET weekno = 43;
        
	 ELSEIF (p_days >= 302 && p_days <= 308) THEN
		SET weekno = 44;
        
	 ELSEIF (p_days >= 309 && p_days <= 315) THEN
		SET weekno = 45;
        
	 ELSEIF (p_days >= 316 && p_days <= 322) THEN
		SET weekno = 46;
        
	 ELSEIF (p_days >= 323 && p_days <= 329) THEN
		SET weekno = 47;
        
	 ELSEIF (p_days >= 330 && p_days <= 336) THEN
		SET weekno = 48;
        
	 ELSEIF (p_days >= 337 && p_days <= 343) THEN
		SET weekno = 49;
        
	 ELSEIF (p_days >= 344 && p_days <= 350) THEN
		SET weekno = 50;
        
	 ELSEIF (p_days >= 351 && p_days <= 357) THEN
		SET weekno = 51;
        
	 ELSEIF (p_days >= 358 && p_days <= 364) THEN
		SET weekno = 52;
        
	 ELSEIF (p_days >= 365 && p_days <= 371) THEN
		SET weekno = 53;
        
	 ELSEIF (p_days >= 372 && p_days <= 378) THEN
		SET weekno = 54;
        
	 ELSEIF (p_days >= 379 && p_days <= 385) THEN
		SET weekno = 55;
        
	 ELSEIF (p_days >= 386 && p_days <= 392) THEN
		SET weekno = 56;
        
	 ELSEIF (p_days >= 393 && p_days <= 399) THEN
		SET weekno = 57;
        
	 ELSEIF (p_days >= 400 && p_days <= 406) THEN
		SET weekno = 58;
        
	 ELSEIF (p_days >= 407 && p_days <= 413) THEN
		SET weekno = 59;
        
	 ELSEIF (p_days >= 414 && p_days <= 420) THEN
		SET weekno = 60;
        
	 ELSEIF (p_days >= 421 && p_days <= 427) THEN
		SET weekno = 61;
        
	 ELSEIF (p_days >= 428 && p_days <= 434) THEN
		SET weekno = 62;
        
	 ELSEIF (p_days >= 435 && p_days <= 441) THEN
		SET weekno = 63;
        
	 ELSEIF (p_days >= 442 && p_days <= 448) THEN
		SET weekno = 64;
        
	 ELSEIF (p_days >= 449 && p_days <= 455) THEN
		SET weekno = 65;
        
	 ELSEIF (p_days >= 456 && p_days <= 462) THEN
		SET weekno = 66;
        
	 ELSEIF (p_days >= 463 && p_days <= 469) THEN
		SET weekno = 67;
        
	 ELSEIF (p_days >= 470 && p_days <= 476) THEN
		SET weekno = 68;
        
     END IF;
     
     RETURN weekno;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbfbatchwise_malefemalemortality_uptodate`(
	p_batchid varchar(255),
    p_lastdate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @totalmortality = 0;
      SELECT fnc_getplacementdatecbf(p_batchid,p_companyid) INTO @placementdate;
     

       
	   SELECT SUM(CDM.totalmortality+CDM.totalculls) INTO @totalmortality
       FROM
	   cbf_dailymortality CDM
	   LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDM.cbfdailytransactionid
        
        
	WHERE
        CDT.cbf_batchid = p_batchid AND
		(CDT.transactiondate <= p_lastdate);
        
   SET @openingfemalemortality = 0;
        
   SELECT 
	IFNULL(SUM(COBD.mortality),0) INTO @openingfemalemortality
	FROM cbf_openingbalance COB 
	LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id 
    
    WHERE 
	COBD.cbfbatchid = p_batchid AND
    @placementdate<= p_lastdate
    group by COBD.cbfbatchid;     
      
	RETURN (IFNULL(@totalmortality, 0)+IFNULL(@openingfemalemortality,0));

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbfbatchwise_salesvalue`(
 p_batchid INT,
 p_moduleid INT,
 p_transactiondate DATE,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	
      SET @itemid = null;
      SET @warehousebinid = null;
      SET @salesvalue = null;
      SET @placementdate = null;
      SET @@sql_mode = ' ';
	
    SELECT fnc_getcbfplacementdate(p_batchid,p_companyid) INTO @placementdate;
    
	select GROUP_CONCAT(DISTINCT warehousebinid SEPARATOR ', '),itemid  INTo @warehousebinid,@itemid FROM cbf_batchbalance CBB
		LEFT JOIN cbf_farmerenquiry_sheddimensiondetail CBS ON CBS.id = CBB.cbfshedid
		WHERE cbfbatchid = p_batchid
		group by CBB.cbfbatchid;
        

	SELECT ifnull(SUM(SDD.quantity*rate),0) INTO @salesvalue
    FROM salesdelivery SD
		inner JOIN salesdeliverydetail SDD ON SDD.salesdeliveryid = SD.id AND find_in_set(SDD.itemid, @itemid)
			AND find_in_set(SDD.warehousebinid, @warehousebinid)
			WHERE SD.salestypeid = p_moduleid AND SD.deliverydate <= p_transactiondate
             AND SD.deliverydate >= @placementdate ;

RETURN @salesvalue;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbfbatchwise_totalBirdSold`(
 p_batchid INT,
 p_moduleid INT,
 p_transactiondate DATE,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	
      SET @salesvalue = null;
      SET @placementdate = null;
	
    SELECT fnc_getcbfplacementdate(p_batchid,p_companyid) INTO @placementdate;
    
	/*select GROUP_CONCAT(DISTINCT warehousebinid SEPARATOR ', ')  INTo @warehousebinid FROM cbf_batchbalance CBB
		LEFT JOIN cbf_shedready CS ON CS.id = CBB.cbfbatchid
		WHERE cbfbatchid = p_batchid
		group by CBB.cbfbatchid;*/
        
    SELECT itemid INTO @itemid FROM cbf_batchbalance WHERE cbfbatchid = p_batchid;

	SELECT ifnull(SUM(SDD.quantity),0) INTO @salesvalue
    FROM salesdelivery SD
		    LEFT JOIN salesdeliverydetail SDD ON SDD.salesdeliveryid = SD.id AND find_in_set(SDD.itemid, @itemid)
            LEFT JOIN cbf_lifting_schedule_details CLS ON CLS.cbfbirdsalesorderid = SD.salesorderid
            LEFT JOIN cbf_farmerenquiry CFE ON CFE.id = CLS.farmerenquiryid
			LEFT JOIN cbf_batch_details CBD ON CBD.farmer_enquiry_id = CFE.id

			WHERE SD.salestypeid = 723 AND SD.deliverydate <= p_transactiondate
            AND CBD.id = p_batchid; 
			-- AND CBD.id = p_batchid 
			-- AND SD.deliverydate >= '2020-08-20';      -- CBD.batch_place_date;

RETURN  @salesvalue;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbfbirdshortageamt`(
	p_birdshortage INT,
    p_actualproductioncost DECIMAL(12,3),
    p_shortagerecoveryper DECIMAL(9,3),
    p_avgweightofbird DECIMAL(12,3),
    p_avgsellingrate DECIMAL(12,3)
    
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @birdShortageAmt = 0;

	IF(p_birdshortage > 0)THEN
    
		SET @saleRatePercentage = 0;
		SET @newsaleRaterVal = 0;

		if(p_avgsellingrate > p_actualproductioncost)THEN
			SELECT (p_avgsellingrate * (p_shortagerecoveryper / 100)) INTO @saleRatePercentage;

			SELECT (p_avgsellingrate + @saleRatePercentage) INTO @newsaleRaterVal;
		else
			SELECT (p_actualproductioncost * (p_shortagerecoveryper / 100)) INTO @saleRatePercentage;

			SELECT (p_actualproductioncost + @saleRatePercentage) INTO @newsaleRaterVal;
		END IF;

			SELECT (p_birdshortage * p_avgweightofbird * @newsaleRaterVal) INTO @birdShortageAmt;
	END IF;



RETURN @birdShortageAmt;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbfchicks_placementqty`(
 p_batchid INT(11),
 p_companyid INT(11)
 -- p_itemid INT(11)
 ) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	 SET @@sql_mode = '';
     SET @placedqty = NUll;
     IF EXISTS(SELECT id FROM cbf_chick_placement WHERE batch_id = p_batchid AND id IS NOT NULL) THEN
			select 
				SUM(CCPD.chick_qty) INTO @placedqty
                    
					FROM cbf_chick_placement CCP
						
				INNER JOIN cbf_chick_placement_details CCPD ON CCP.id = CCPD.chick_placement_id
					WHERE CCP.batch_id = p_batchid AND CCP.company_id = p_companyid; 
							
					
		ELSE
				SELECT
					 SUM(CBOB.placementqty) INTO @placedqty
                    
					FROM cbf_openingbalance COB
						INNER JOIN cbf_openingbalancedetail CBOB ON COB.id = CBOB.cbfopeningbalanceid
					WHERE CBOB.cbfbatchid = p_batchid AND 
						  COB.companyid = p_companyid;
			
		END IF;
        
        RETURN IFNULL(@placedqty,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbfchicks_purchasecost`(
 p_batchid INT(11),
 p_companyid INT(11),
 p_itemid INT(11)
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	 SET @@sql_mode = '';
     SET @biredcost = NUll;
	/*IF EXISTS(SELECT id FROM cbf_chick_placement WHERE batch_id = p_batchid AND id IS NOT NULL) THEN
     
			 SELECT PID.unitprice INTO @biredcost FROM
                    cbf_chick_placement CCP
						INNER JOIN cbf_chick_placement_details CCPD ON CCPD.chick_placement_id = CCP.id 
						INNER JOIN purchaseinvoice PI ON PI.grpono = LBP.grpono
						INNER JOIN purchaseinvoicedetail PID ON PI.id = PID.purchaseinvoiceid AND PID.itemid = p_itemid
                    WHERE 
                    
                    LBP.layerbatchid = p_batchid 
					AND LBP.companyid = p_companyid AND LBPD.itemid = p_itemid;
		ELSE  */
           
					select
					COBD.salevalue INTO @biredcost
                    
					FROM cbf_openingbalancedetail COBD
						INNER JOIN cbf_openingbalance COB ON COB.id = COBD.cbfopeningbalanceid
					WHERE  COB.breeditemid = p_itemid AND 
                    COBD.cbfbatchid = p_batchid AND COB.companyid = p_companyid
					group by COB.breeditemid ;
			
		-- END IF;
        
        RETURN IFNULL(@biredcost,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbffirstweekmortality`(
	p_placementdate DATE,
    p_cbf_batchid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @fwmortality = 0;
    SET @weekend = null;
    
    SELECT SUM(CDM.totalmortality)
    INTO @fwmortality
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
    
    WHERE CDT.id = CDM.cbfdailytransactionid
    AND (CDT.transactiondate BETWEEN  p_placementdate AND (DATE_ADD(FIRST_DAY_OF_WEEK(p_placementdate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(p_placementdate))) DAY)));
    

RETURN @fwmortality;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbffreechicks`(
	p_sourceid INT,
    p_requestid INT,
    p_batchqty INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @@sql_mode = '';
		SET @qty = null;
        SET @free_qty = null;

		if(p_sourceid = 261) THEN -- OWN

			SELECT 
				0 INTO @qty
			FROM 
				materialtransfer
			WHERE
				requestid = p_requestid;
				
			-- GROUP BY requestid;
		   
		elseif(p_sourceid = 262) THEN -- PURCHASED
			SELECT POD.freequantitypercent INTO @freequantitypercent
            FROM purchaseorderdetail POD
            LEFT JOIN purchaseorder PO ON PO.id = POD.purchaseorderid
            WHERE FIND_IN_SET(p_requestid, PO.purchaserequestid)
            LIMIT 1;
            
		-- SELECT (p_batchqty - ((p_batchqty/(100 + @freequantitypercent)) * 100)) INTO @qty;
        
			SELECT ((p_batchqty * @freequantitypercent)/100) INTO @qty;
		END IF;


			IF @qty IS NOT NULL THEN
				SET @free_qty = @qty;
			ELSE
				SET @free_qty = 0;
			END IF;
    

RETURN @free_qty;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbfPlacementMaterialStatus`(
	p_batchid INT,
    p_companyid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @@sql_mode = '';
		SET @returnid = null;
		SET @isPO = null;
		SET @sourceid = null;
        SET @requestid = null;
		
		SELECT sourceid, requestid INTO @sourceid, @requestid FROM cbf_procurementscheduledetail WHERE batchid = p_batchid AND companyid = p_companyid;

		if(@sourceid = 261) THEN -- OWN

			SELECT 
				id INTO @returnid
			FROM 
				materialtransfer
			WHERE
				requestid = @requestid;
				
			-- GROUP BY requestid;
		   
		elseif(@sourceid = 262) THEN -- PURCHASED
			
			SELECT id INTO @returnid FROM purchaseorder 
				WHERE 
					FIND_IN_SET(@requestid, purchaserequestid)
					
				GROUP BY purchaserequestid;
			
			/*SELECT GR.id INTO @returnid FROM purchaseorder PO
				INNER JOIN grpo GR ON GR.purchaseorderid = PO.id
				WHERE
					PO.purchaserequestid = @requestid
					
				GROUP BY PO.purchaserequestid;*/
		END IF;


			IF @returnid IS NOT NULL THEN
				SET @materialreceiptstatus = @returnid;
			ELSE
				SET @materialreceiptstatus = -1;
			END IF;
    

RETURN @materialreceiptstatus;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbfPlacementTransactionId`(
	p_sourceid INT,
    p_requestid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @@sql_mode = '';
		SET @returnid = null;
		SET @isPO = null;
        SET @transactionid = null;

		if(p_sourceid = 261) THEN -- OWN

			SELECT 
				id INTO @returnid
			FROM 
				materialtransfer
			WHERE
				requestid = p_requestid;
				
			-- GROUP BY requestid;
		   
		elseif(p_sourceid = 262) THEN -- PURCHASED
			
			SELECT id INTO @returnid FROM purchaseorder 
				WHERE 
					purchaserequestid = p_requestid
					
				GROUP BY purchaserequestid;
		END IF;


			IF @returnid IS NOT NULL THEN
				SET @transactionid = @returnid;
			ELSE
				SET @transactionid = 0;
			END IF;
    

RETURN @transactionid;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbf_batchwise_birdliveqty`(
	p_batchid INT,
    p_transactiondate DATE,
    p_placementdate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @@sql_mode = '';
	SET @liveqty = 0;
    SET @placementdate = null;
    
	SELECT fnc_getcbfplacementdate(p_batchid,p_companyid) INTO @placementdate;
    
    
   IF EXISTS(SELECT id FROM cbf_chick_placement WHERE batch_id = p_batchid AND id IS NOT NULL) THEN
	IF(p_placementdate = p_transactiondate) THEN
    
	           SELECT SUM(CCP.chick_qty) INTO @liveqty
                    
			   FROM cbf_chick_placement CCP
						
			       INNER JOIN cbf_chick_placement_details CCPD ON CCP.id = CCPD.chick_placement_id
				WHERE CCP.batch_id = p_batchid AND CCP.company_id = p_companyid; 
							
        
    ELSE
     
				SELECT -- CCP.chick_qty INTO @liveqty
                (IFNULL(SUM(CCP.chick_qty),0)- fnc_cbf_batchwise_cullsandmortality(p_batchid,p_transactiondate,p_companyid)) INTO @liveqty
                    
				FROM cbf_chick_placement CCP
						
				LEFT JOIN cbf_chick_placement_details CCPD ON CCP.id = CCPD.chick_placement_id
				WHERE CCP.batch_id = p_batchid AND CCP.company_id = p_companyid;

	END IF;
					
		 ELSE
				
					SELECT
					 (IFNULL(SUM(COBD.liveqty),0) - fnc_cbf_batchwise_cullsandmortality(p_batchid,p_transactiondate,p_companyid)) INTO @liveqty
                    
					FROM cbf_openingbalance COB
						INNER JOIN cbf_openingbalancedetail COBD ON COB.id = COBD.cbfopeningbalanceid
					WHERE  COBD.cbfbatchid = p_batchid AND 
						  COB.companyid = p_companyid;
		END IF;

   
	RETURN @liveqty;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbf_batchwise_cullsandmortality`(
	p_batchid varchar(255),
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	 SET @@sql_mode = '';
	SET @quantity = 0;
    SET @placementdate = NOW();
    
   SELECT fnc_getcbfplacementdate(p_batchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(totalmortality),0) + IFNULL(SUM(totalculls),0) INTO @quantity
    FROM
		cbf_dailymortality CDM
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDM.cbfdailytransactionid
        
	WHERE
		  
        FIND_IN_SET(CDT.cbf_batchid , p_batchid) AND
         (CDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN IFNULL(@quantity,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbf_cullsmortlity_uptotodate`(
    p_batchid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    SET @openingmortality = 0;
   
    
   SELECT fnc_getcbfplacementdate(p_batchid,p_companyid) INTO @placementdate;
     
     
	SELECT SUM(CDM.totalmortality) + SUM(CDM.totalculls)into @quantity
    FROM
		cbf_dailymortality CDM
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDM.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_batchid AND
		CDT.transactiondate = p_transactiondate;
        
        SET @openingmortality = 0;

	SELECT 
	IFNULL(SUM(COBD.mortality),0) INTO @openingmortality
	FROM cbf_openingbalance COB 
	LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id 
    
    WHERE 
	COBD.cbfbatchid = p_batchid
    group by COBD.cbfbatchid;

RETURN (@quantity + @openingmortality);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbf_dailyconsumption_value`(
	p_batchid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS decimal(15,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @consumtionvalue = 0;
      SET @consumptioncost = 0;
      SET @opecon = 0;
      SET  @cbfbatchid = 0;
      SET @opeconfeed = 0;
      SET @opeconvacc =0;
      SET @opeconmed = 0;
      SET @opeconvit = 0;
      SET @placementdate = null;
    
    
    select COBD.cbfbatchid INTO @cbfbatchid
    from cbf_openingbalance COB
    LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id
    WHERE COBD.cbfbatchid = p_batchid;
    
     
	SELECT ifnull(SUM(CDTC.itemvalue),0) INTO @consumtionvalue 
	FROM cbf_dailytransaction CDT 
    LEFT JOIN cbf_dailyconsumption CDTC ON CDTC.cbfdailytransactionid = CDT.id
	WHERE CDT.cbf_batchid = p_batchid AND CDT.transactiondate <=p_transactiondate;
   
   
   -- IF( p_consumptiontypeid = 861) THEN
    select COBD.feedvalue INTO @opeconfeed
    from cbf_openingbalance COB
    LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id
    WHERE COBD.cbfbatchid = @cbfbatchid;
	-- END IF;		
    
    -- IF( p_consumptiontypeid = 862) THEN
    select COBD.medicinevalue INTO @opeconmed
    from cbf_openingbalance COB
    LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id
    WHERE COBD.cbfbatchid = @cbfbatchid;
	-- END IF;				
    
	-- IF( p_consumptiontypeid = 863) THEN
    select COBD.vaccinevalue INTO @opeconvacc
    from cbf_openingbalance COB
    LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id
    WHERE COBD.cbfbatchid = @cbfbatchid;
	-- END IF;		
    
    -- IF( p_consumptiontypeid = 864) THEN
    select COBD.vitaminvalue INTO @opeconvit
    from cbf_openingbalance COB
    LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id
    WHERE COBD.cbfbatchid = @cbfbatchid;
	-- END IF;		
    
	RETURN (IFNULL(@consumtionvalue,0)+IFNULL(@opeconvit,0)+IFNULL(@opeconvacc,0)+IFNULL(@opeconmed,0)
    +IFNULL(@opeconfeed,0));

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbf_deliveredcost_uptogivendate_cbf`(
	p_todate DATE,
    p_batchid INT
    -- p_farmerenquiryid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @totaldeliverycost = 0;
       
	SELECT SUM(CDW.totaldeliverycost) INTO @totaldeliveredqty
    FROM cbf_delivery_weights  CDW
	LEFT JOIN cbf_delivery_weights_detail CDWD  ON CDWD.cbf_delivery_weightsid = CDW.id
	
	WHERE
		liftingdate <= p_todate AND
        CDWD.cbf_batchid = p_batchid; 
        
	RETURN IFNULL(@totaldeliverycost, 0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbf_deliveredquantity_uptogivendate_cbf`(
	p_todate DATE,
    p_batchid INT
    -- p_farmerenquiryid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @totaldeliveredqty = 0;
       
	SELECT SUM(CDW.totaldeliveredqty) INTO @totaldeliveredqty
    FROM cbf_delivery_weights  CDW
	LEFT JOIN cbf_delivery_weights_detail CDWD  ON CDWD.cbf_delivery_weightsid = CDW.id
	WHERE
		liftingdate <= p_todate AND
        CDWD.cbf_batchid = p_batchid; 
		-- CDW.farmerenquiryid = p_farmerenquiryid;
      
	RETURN IFNULL(@totaldeliveredqty, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbf_deliveredweight_ongivendate_cbf`(
	p_todate DATE,
    p_batchid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @totaldeliveredqty = 0;
       
	SELECT SUM(CDW.totaldeliveredqty) INTO @totaldeliveredqty
    FROM cbf_delivery_weights CDW
	    LEFT JOIN cbf_delivery_weights_detail CDWD ON CDW.id = CDWD.cbf_delivery_weightsid
	WHERE
		 CDW.liftingdate = p_todate AND
		CDWD.cbf_batchid = p_batchid
        GROUP BY CDW.liftingdate;
      
	RETURN IFNULL(@totaldeliveredqty, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cbf_deliveredweight_uptogivendate_cbf`(
	p_todate DATE,
    p_batchid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @totaldeliveredwt = 0;
       
	SELECT SUM(totaldeliveredwt) INTO @totaldeliveredwt
    FROM cbf_delivery_weights  CDW
        LEFT JOIN cbf_farmerenquiry CFE  ON CDW.farmerenquiryid = CFE.id
		LEFT JOIN cbf_batch_details CBD ON CFE.id =   CBD.farmer_enquiry_id AND CDW.farmerenquiryid
        


	WHERE
		liftingdate <= p_todate AND
		CBD.id = p_batchid;
      
	RETURN IFNULL(@totaldeliveredwt, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_checkissetterslotscheduled`(
	p_setterslotid INT,
    p_companyid INT
) RETURNS tinyint(1)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
     IF EXISTS(
            SELECT HSD.id 
            FROM hatcheryscheduledetail HSD
			-- LEFT JOIN setterbatch SB ON HSD.id = SB.detailsid
            
            where 
				HSD.setterslotid = p_setterslotid AND 
				HSD.statusid NOT IN(243, 244) AND 
				HSD.companyid = p_companyid  AND
                id NOT IN (SELECT detailsid from setterbatch WHERE detailsid = id)
              
           ) THEN BEGIN
        
			return true;
	
			END;
    ELSE 
		return false;
        
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_chicks_placementqty`(
 p_breederbatchid INT(11),
 p_companyid INT(11),
 p_itemid INT(11)
 ) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	 SET @@sql_mode = '';
     SET @placedqty = NUll;
     IF EXISTS(SELECT id FROM breederbatchplacement WHERE breederbatchid = p_breederbatchid AND id IS NOT NULL) THEN
			select 
				SUM(BBPD.quantity) INTO @placedqty
                    
					FROM breederbatchplacement BBP
						
				INNER JOIN breederbatchplacementdetail BBPD ON BBP.id = BBPD.breederbatchplacementid
					WHERE BBP.breederbatchid = p_breederbatchid AND BBP.companyid = p_companyid AND
							BBPD.itemid = p_itemid;
					
		ELSE
				SELECT
					 SUM(BBOB.placeqty) INTO @placedqty
                    
					FROM breederbatchopening BBO
						INNER JOIN breederbatchmalefemaleopeningdetail BBOB ON BBO.id = BBOB.breederbatchopeningid
					WHERE BBOB.itemid = p_itemid AND BBO.breederbatchid = p_breederbatchid AND 
						  BBO.companyid = p_companyid;
			
		END IF;
        
        RETURN IFNULL(@placedqty,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_chicks_purchasecost`(
 p_breederbatchid INT(11),
 p_companyid INT(11),
 p_itemid INT(11)
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	 SET @@sql_mode = '';
     SET @biredcost = NUll;
     IF EXISTS(SELECT id FROM breederbatchplacement WHERE breederbatchid = p_breederbatchid AND id IS NOT NULL) THEN
     
			 SELECT PID.unitprice INTO @biredcost FROM
                    breederbatchplacement BBP
						INNER JOIN breederbatchplacementdetail BBPD ON BBPD.breederbatchplacementid = BBP.id 
						INNER JOIN purchaseinvoice PI ON PI.grpono = BBP.grpono
						INNER JOIN purchaseinvoicedetail PID ON PI.id = PID.purchaseinvoiceid AND PID.itemid = p_itemid
                    WHERE 
                    
                    BBP.breederbatchid = p_breederbatchid 
					AND BBP.companyid = p_companyid AND BBPD.itemid = p_itemid LIMIT 1;
		ELSE
           
					select
					BMF.rate INTO @biredcost
                    
					FROM breederbatchmalefemaleopeningdetail BMF
						INNER JOIN breederbatchopening BBO ON BBO.id = BMF.breederbatchopeningid
					WHERE BMF.itemid = p_itemid AND BBO.breederbatchid = p_breederbatchid AND BBO.companyid = p_companyid
					group by itemid ;
			
		END IF;
        
        RETURN IFNULL(@biredcost,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_chicks_purchasecost_layer`(
 p_batchid INT(11),
 p_companyid INT(11),
 p_itemid INT(11)
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	 SET @@sql_mode = '';
     SET @biredcost = NUll;
     IF EXISTS(SELECT id FROM layerbatchplacement WHERE layerbatchid = p_batchid AND id IS NOT NULL) THEN
     
			 SELECT PID.unitprice INTO @biredcost FROM
                    layerbatchplacement LBP
						INNER JOIN layerbatchplacementdetail LBPD ON LBPD.layerbatchplacementid = LBP.id 
						INNER JOIN purchaseinvoice PI ON PI.grpono = LBP.grpono
						INNER JOIN purchaseinvoicedetail PID ON PI.id = PID.purchaseinvoiceid AND PID.itemid = p_itemid
                    WHERE 
                    
                    LBP.layerbatchid = p_batchid 
					AND LBP.companyid = p_companyid AND LBPD.itemid = p_itemid;
		ELSE
           
					select
					LBOB.rate INTO @biredcost
                    
					FROM layer_batchbridopeningbalance_detail LBOB
						INNER JOIN layer_batchopening_balance LBO ON LBO.id = LBOB.layerbatchopeningid
					WHERE LBOB.itemid = p_itemid AND LBO.layerbatchid = p_batchid AND LBO.companyid = p_companyid
					group by itemid ;
			
		END IF;
        
        RETURN IFNULL(@biredcost,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_closingcreditdebitbal`(
	p_acledgerid INT(11),
    p_fromdate DATE,
    p_todate DATE,
    p_type VARCHAR(100)
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @closingcreditdebitbal = null;
    
    SET @cramount = null;
    SET @dramount = null;
    
    SELECT (select REPLACE(cast(IFNULL(SUM(JED.cramount),0) as CHAR(100)), '-', '')), 
		   IFNULL(SUM(JED.dramount),0)
    -- IFNULL(SUM(JED.cramount),0), IFNULL(SUM(JED.cramount),0)
    -- ;
    INTO @cramount, @dramount
    FROM journalentry JE
    LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    WHERE JE.voucherdate BETWEEN p_fromdate AND p_todate;
    
    IF(p_type = 'credit') THEN
		SELECT ((fnc_openingcreditdebitbal(p_acledgerid, p_fromdate, 'credit')) + @cramount) INTO @closingcreditdebitbal;
		
       -- FROM journalentrydetail JED
		
		-- WHERE JED.acledgerid = p_acledgerid;
    
    ELSE  
    
		SELECT ((fnc_openingcreditdebitbal(JED.acledgerid, p_fromdate, 'debit')) + @dramount) INTO @closingcreditdebitbal;
		
		-- FROM journalentrydetail JED
		
		-- WHERE JED.acledgerid = p_acledgerid;
        
        -- group by JED.acledgerid;
        
    END IF;
    
    
RETURN (select REPLACE(cast(@closingcreditdebitbal as CHAR(100)), '-', ''));

-- @closingcreditdebitbal;

-- 
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_consumptionlivestock`(
    p_itemid INT,
	p_warehouseid INT,
    p_warehousebinid INT,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_batchqty = 0;


DROP TEMPORARY TABLE IF EXISTS tempbatchtable;
CREATE TEMPORARY TABLE tempbatchtable
 SELECT 
	IFNULL((fnc_itembatchbalance(MOM.itembatch,p_itemid,p_warehouseid,p_warehousebinid,p_companyid)),0) as batch_qty
        
 FROM materialmovement MOM 
 
	LEFT JOIN item I ON MOM.itemid = I.id
    
  where MOM.towarehouseid = p_warehouseid AND
		MOM.towarehousebinid = p_warehousebinid AND
		MOM.itemid = p_itemid  AND
         FIND_IN_SET(MOM.transactiontypeid, '681,682,684,685') AND
         MOM.companyid = p_companyid ;
         
         SELECT SUM(batch_qty) INTO @batch_qty FROM tempbatchtable WHERE batch_qty>0;
      RETURN (@batch_qty);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_consumption_wise_cost`(
 p_breederbatchid INT(11),
 p_transactiondate DATE,
 p_consumptiontypeid INT,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @consumptioncost = 0;
      SET @placementdate = null;
     SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
     
     SELECT TRUNCATE (((DATEDIFF(p_transactiondate,@p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 24 )THEN
      SELECT date_add(@p_placementdate,INTERVAL 167 DAY) INTO @transactiondate;
      END IF;
      if(@ageinweeks <= 24) THEN
       SELECT p_transactiondate INTO @transactiondate;
	  END IF;
   
		   SELECT IFNULL((SUM(BDTD.itemvalue)), 0) into @consumptioncost
			 FROM
			 breederdailytransaction BDT
			 
			LEFT JOIN breederdailyconsumption BDTD ON BDT.id = BDTD.breederdailytransactionid  AND BDTD.consumptiontypeid = p_consumptiontypeid
			
			WHERE BDT.breederbatchid = p_breederbatchid AND
				BDT.transactiondate >= @placementdate AND
				 BDT.transactiondate <= @transactiondate;
               
					
RETURN @consumptioncost;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_consumption_wise_cost_After19week`(
 p_batchid INT(11),
 p_transactiondate DATE,
 p_consumptiontypeid INT,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @consumptioncost = 0;
      SET @placementdate = null;
     SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @placementdate;
     
    /* SELECT TRUNCATE (((DATEDIFF(p_transactiondate,@p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 24 )THEN
      SELECT date_add(@p_placementdate,INTERVAL 167 DAY) INTO @transactiondate;
      END IF;
      if(@ageinweeks <= 24) THEN
       SELECT p_transactiondate INTO @transactiondate;
	  END IF;*/
   
		   SELECT IFNULL((SUM(LDC.itemvalue)), 0) into @consumptioncost
			 FROM
			 layerdailytransaction LDT
			 
			LEFT JOIN layerdailyconsumption LDC ON LDT.id = LDC.layerdailytransactionid  AND LDC.consumptiontypeid = p_consumptiontypeid
			
			WHERE LDT.layerbatchid = p_batchid AND
				  LDT.transactiondate >= @placementdate AND
				  LDT.transactiondate > p_transactiondate;
               
					
RETURN @consumptioncost;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_consumption_wise_cost_After24week`(
 p_breederbatchid INT(11),
 p_transactiondate DATE,
 p_consumptiontypeid INT,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @consumptioncost = 0;
      SET @placementdate = null;
     SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
     
    /* SELECT TRUNCATE (((DATEDIFF(p_transactiondate,@p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 24 )THEN
      SELECT date_add(@p_placementdate,INTERVAL 167 DAY) INTO @transactiondate;
      END IF;
      if(@ageinweeks <= 24) THEN
       SELECT p_transactiondate INTO @transactiondate;
	  END IF;*/
   
		   SELECT IFNULL((SUM(BDTD.itemvalue)), 0) into @consumptioncost
			 FROM
			 breederdailytransaction BDT
			 
			LEFT JOIN breederdailyconsumption BDTD ON BDT.id = BDTD.breederdailytransactionid  AND BDTD.consumptiontypeid = p_consumptiontypeid
			
			WHERE BDT.breederbatchid = p_breederbatchid AND
				BDT.transactiondate >= @placementdate AND
				 BDT.transactiondate > p_transactiondate;
               
					
RETURN @consumptioncost;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_consumption_wise_cost_before19week`(
 p_batchid INT(11),
 p_transactiondate DATE,
 p_consumptiontypeid INT,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @consumptioncost = 0;
      SET @placementdate = null;
     SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @placementdate;
     
    /* SELECT TRUNCATE (((DATEDIFF(p_transactiondate,@p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 24 )THEN
      SELECT date_add(@p_placementdate,INTERVAL 167 DAY) INTO @transactiondate;
      END IF;
      if(@ageinweeks <= 24) THEN
       SELECT p_transactiondate INTO @transactiondate;
	  END IF;*/
   
		   SELECT IFNULL((SUM(LDC.itemvalue)), 0) into @consumptioncost
			 FROM
			 layerdailytransaction LDT
			 
			LEFT JOIN layerdailyconsumption LDC ON LDT.id = LDC.layerdailytransactionid  AND LDC.consumptiontypeid = p_consumptiontypeid
			
			WHERE LDT.layerbatchid = p_batchid AND
				LDT.transactiondate >= @placementdate AND
				 LDT.transactiondate <= p_transactiondate;
               
					
RETURN @consumptioncost;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_consumption_wise_cost_before24week`(
 p_breederbatchid INT(11),
 p_transactiondate DATE,
 p_consumptiontypeid INT,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @consumptioncost = 0;
      SET @placementdate = null;
     SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
     
    /* SELECT TRUNCATE (((DATEDIFF(p_transactiondate,@p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 24 )THEN
      SELECT date_add(@p_placementdate,INTERVAL 167 DAY) INTO @transactiondate;
      END IF;
      if(@ageinweeks <= 24) THEN
       SELECT p_transactiondate INTO @transactiondate;
	  END IF;*/
   
		   SELECT IFNULL((SUM(BDTD.itemvalue)), 0) into @consumptioncost
			 FROM
			 breederdailytransaction BDT
			 
			LEFT JOIN breederdailyconsumption BDTD ON BDT.id = BDTD.breederdailytransactionid  AND BDTD.consumptiontypeid = p_consumptiontypeid
			
			WHERE BDT.breederbatchid = p_breederbatchid AND
				BDT.transactiondate >= @placementdate AND
				 BDT.transactiondate <= p_transactiondate;
               
					
RETURN @consumptioncost;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_consumption_wise_cost_cbf`(
 p_batchid INT(11),
 p_transactiondate DATE,
 p_consumptiontypeid INT,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @consumptioncost = 0;
      SET @opecon = 0;
      SET  @cbfbatchid = 0;
      SET @placementdate = null;
      SELECT fnc_getcbfplacementdate(p_batchid,p_companyid) INTO @placementdate;
     
	select COBD.cbfbatchid INTO @cbfbatchid
    from cbf_openingbalance COB
    LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id
    WHERE COBD.cbfbatchid = p_batchid;
    
    -- select @cbfbatchid;
     
     /*SELECT TRUNCATE (((DATEDIFF(p_transactiondate,@p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 24 )THEN
      SELECT date_add(@p_placementdate,INTERVAL 167 DAY) INTO @transactiondate;
      END IF;
      if(@ageinweeks <= 24) THEN
       SELECT p_transactiondate INTO @transactiondate;
	  END IF;*/
   
		   SELECT IFNULL((SUM(CDC.itemvalue)), 0) into @consumptioncost
			 FROM
			 cbf_dailytransaction CDT
			LEFT JOIN cbf_batch_details CBD ON CBD.id = CDT.cbf_batchid  
			LEFT JOIN cbf_dailyconsumption CDC ON CDT.id = CDC.cbfdailytransactionid  AND CDC.consumptiontypeid = p_consumptiontypeid
			 
			
			WHERE CDT.cbf_batchid = p_batchid AND
                  CDC.consumptiontypeid = p_consumptiontypeid AND
				 CDT.transactiondate >=  @placementdate;
	
	-- IF( p_batchid = @cbfbatchid) THEN
    IF( p_consumptiontypeid = 861) THEN
    select COBD.feedvalue INTO @opecon
    from cbf_openingbalance COB
    LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id
    WHERE COBD.cbfbatchid = @cbfbatchid;
	END IF;		
    
    IF( p_consumptiontypeid = 862) THEN
    select COBD.medicinevalue INTO @opecon
    from cbf_openingbalance COB
    LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id
    WHERE COBD.cbfbatchid = @cbfbatchid;
	END IF;				
    
	IF( p_consumptiontypeid = 863) THEN
    select COBD.vaccinevalue INTO @opecon
    from cbf_openingbalance COB
    LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id
    WHERE COBD.cbfbatchid = @cbfbatchid;
	END IF;		
    
     IF( p_consumptiontypeid = 864) THEN
    select COBD.vitaminvalue INTO @opecon
    from cbf_openingbalance COB
    LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id
    WHERE COBD.cbfbatchid = @cbfbatchid;
	END IF;		
   -- END IF;		
	
RETURN (IFNULL(@consumptioncost,0)+IFNULL(@opecon,0));

 
  
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_consumption_wise_cost_layer`(
 p_batchid INT(11),
 p_transactiondate DATE,
 p_consumptiontypeid INT,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @consumptioncost = 0;
      SET @placementdate = null;
     SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @placementdate;
     
     SELECT TRUNCATE (((DATEDIFF(p_transactiondate,@p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 19 )THEN
      SELECT date_add(@p_placementdate,INTERVAL 132 DAY) INTO @transactiondate;
      END IF;
      if(@ageinweeks <= 19) THEN
       SELECT p_transactiondate INTO @transactiondate;
	  END IF;
   
		   SELECT IFNULL((SUM(LDC.itemvalue)), 0) into @consumptioncost
			 FROM
			 layerdailytransaction LDT
			 
			LEFT JOIN layerdailyconsumption LDC ON LDT.id = LDC.layerdailytransactionid  AND LDC.consumptiontypeid = p_consumptiontypeid
			
			WHERE LDT.layerbatchid = p_batchid AND
				LDT.transactiondate >= @placementdate AND
				 LDT.transactiondate <= @transactiondate;
               
					
RETURN @consumptioncost;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_consumption_wise_cost_uptotodate`(
 p_breederbatchid INT(11),
 p_transactiondate DATE,
 p_consumptiontypeid INT,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @consumptioncost = 0;
      SET @placementdate = null;
     SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
     
     
		   SELECT IFNULL((SUM(BDTD.itemvalue)), 0) into @consumptioncost
			 FROM
			 breederdailytransaction BDT
			 
			LEFT JOIN breederdailyconsumption BDTD ON BDT.id = BDTD.breederdailytransactionid  AND BDTD.consumptiontypeid = p_consumptiontypeid
			
			WHERE BDT.breederbatchid = p_breederbatchid AND
				BDT.transactiondate >= @placementdate AND
				 BDT.transactiondate <= p_transactiondate;
               
					
RETURN @consumptioncost;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_consumption_wise_cost_uptotodateforlayer`(
 p_batchid INT(11),
 p_transactiondate DATE,
 p_consumptiontypeid INT,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @consumptioncost = 0;
      SET @placementdate = null;
     SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @placementdate;
     
     
		   SELECT IFNULL((SUM(LDC.itemvalue)), 0) into @consumptioncost
			 FROM
			 layerdailytransaction LDT
			 
			LEFT JOIN layerdailyconsumption LDC ON LDT.id = LDC.layerdailytransactionid  AND LDC.consumptiontypeid = p_consumptiontypeid
			
			WHERE LDT.layerbatchid = p_batchid AND
				LDT.transactiondate >= @placementdate AND
				 LDT.transactiondate <= p_transactiondate;
                              
					
RETURN @consumptioncost;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_consumption_wise_qty_uptotodate`(
 p_breederbatchid INT(11),
 p_transactiondate DATE,
 p_consumptiontypeid INT,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @consumptioncost = 0;
      SET @placementdate = null;
     SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
     
     
		   SELECT IFNULL((SUM(BDTD.quantity)), 0) into @consumptioncost
			 FROM
			 breederdailytransaction BDT
			 
			LEFT JOIN breederdailyconsumption BDTD ON BDT.id = BDTD.breederdailytransactionid  AND BDTD.consumptiontypeid = p_consumptiontypeid
			
			WHERE BDT.breederbatchid = p_breederbatchid AND
				BDT.transactiondate >= @placementdate AND
				 BDT.transactiondate <= p_transactiondate;
               
					
RETURN @consumptioncost;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_consumption_wise_qty_uptotodateforlayer`(
 p_batchid INT(11),
 p_transactiondate DATE,
 p_consumptiontypeid INT,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @consumptioncost = 0;
      SET @placementdate = null;
     SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @placementdate;
     
     
		   SELECT IFNULL((SUM(LDC.consumptionquantity)), 0) into @consumptioncost
			 FROM
			 layerdailytransaction LDT
			 
			LEFT JOIN layerdailyconsumption LDC ON LDT.id = LDC.layerdailytransactionid  AND LDC.consumptiontypeid = p_consumptiontypeid
			
			WHERE LDT.layerbatchid = p_batchid AND
				LDT.transactiondate >= @placementdate AND
				 LDT.transactiondate <= p_transactiondate;
               
					
RETURN @consumptioncost;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_convertfeed_bagtokg`(
    p_cbfbatchid INT,
    p_cbfshedid INT,
    p_transactiondate DATE,
    p_itemunitid INT,
    p_companyid INT
    
) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    SET @openingcon = 0;
	SET @openingfeedconsume  = 0;
   
   
  SELECT fnc_getplacementdatecbf(p_cbfbatchid,p_companyid) INTO @placementdate;
  /* 50pp Bag */
   IF(p_itemunitid = 144) THEN
	SELECT IFNULL(SUM(CDC.quantity*50), 0) into @quantity
    FROM
		cbf_dailyconsumption CDC
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDC.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_cbfbatchid AND
		CDT.transactiondate = p_transactiondate AND
        CDC.consumptiontypeid = 861;
   END IF;    
   
   /* 30pp Bag */
   IF(p_itemunitid = 145) THEN
	SELECT IFNULL(SUM(CDC.quantity*30), 0) into @quantity
    FROM
		cbf_dailyconsumption CDC
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDC.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_cbfbatchid AND
		CDT.transactiondate = p_transactiondate AND
        CDC.consumptiontypeid = 861;
   END IF;    
   
    /* Bag In KG */
   IF(p_itemunitid = 142) THEN
	SELECT IFNULL(SUM(CDC.quantity), 0) into @quantity
    FROM
		cbf_dailyconsumption CDC
        LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDC.cbfdailytransactionid
        
	WHERE
		CDT.cbf_batchid = p_cbfbatchid AND
		CDT.transactiondate = p_transactiondate AND
        CDC.consumptiontypeid = 861;
   END IF;    

	
    SELECT 
	IFNULL(SUM(COBD.feedconsume),0) INTO @openingfeedconsume
	FROM cbf_openingbalance COB 
	LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id 
    
    WHERE 
	COBD.cbfbatchid = p_cbfbatchid AND
	COB.date = p_transactiondate
    group by COBD.cbfbatchid;
		

RETURN IFNULL(@quantity,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_convertfeed_bagtokginrecept`(
    p_receitid INT(11),
    p_itemid INT(11),
    p_itemunitid INT(11),
    p_companyid INT(11)
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    
  /* 50pp Bag */
   IF(p_itemunitid = 144) THEN
	SELECT IFNULL((FRFP.po_unit_cost*50), 0) into @quantity
    FROM
		feedmill_receipt_from_production FRFP
	WHERE
		FRFP.id = p_receitid and
		FRFP.itemid = p_itemid
        group by FRFP.id;
   END IF;    
   
   /* 30pp Bag */
   IF(p_itemunitid = 145) THEN
	SELECT IFNULL((FRFP.po_unit_cost*30), 0) into @quantity
    FROM
		feedmill_receipt_from_production FRFP
	WHERE
		FRFP.id = p_receitid and
		FRFP.itemid = p_itemid
        group by FRFP.id;
   END IF;    
   
    /* Bag In KG */
   IF(p_itemunitid = 142) THEN
	SELECT IFNULL((FRFP.po_unit_cost), 0) into @quantity
     FROM
		feedmill_receipt_from_production FRFP
	WHERE
		FRFP.id = p_receitid and
		FRFP.itemid = p_itemid
        group by FRFP.id;
   END IF;    


RETURN IFNULL(@quantity,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cummulativefeed`(
    p_breederbatchid INT,
	p_itemid INT(11),
    p_shedid INT,
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    SET @openingfeed = 0;

    
    SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
     
     
	 SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM
		breederdailyconsumption BDC
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDC.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
        BDT.shedid =  p_shedid AND
		 BDC.consumptiontypeid = 861 AND
		 itemid = p_itemid AND
         (BDT.transactiondate BETWEEN  @placementdate AND p_todate);
         
         
	SELECT 
	IFNULL(BBC.quantity,0) INTO @openingfeed
	FROM breederbatchopening BBO 
	LEFT JOIN breederbatchconsumptionopeningdetail BBC ON BBC.breederbatchopeningid = BBO.id 
    
    WHERE 
    BBC.consumptiontypeid = 861 AND BBC.consumptionitemid = p_itemid AND
	BBO.breederbatchid = p_breederbatchid;

RETURN (@quantity + @openingfeed);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cummulative_malefemaleculls`(
    p_breederbatchid INT,
    p_shedid INT ,
    p_itemid INT,
    p_todate DATE,
   p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @cumucullsquantity = 0;
    SET @placementdate = NOW();
    SET @openingfemaleculls =0;
    
    SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(totalculls),0) INTO @cumucullsquantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
        --  AND FIND_IN_SET(BDT.shedid,p_shedids) AND
		 BDT.shedid = p_shedid AND 
         BDM.itemid = p_itemid AND
         (BDT.transactiondate BETWEEN  @placementdate AND p_todate);
         
         
  SELECT 
	IFNULL(SUM(BBM.culls),0) INTO @openingfemaleculls
	FROM breederbatchopening BBO 
	LEFT JOIN breederbatchmalefemaleopeningdetail BBM ON BBM.breederbatchopeningid = BBO.id 
    
    WHERE 
	BBO.breederbatchid = p_breederbatchid
    group by BBO.breederbatchid;-- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN (@cumucullsquantity+@openingfemaleculls);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_cummulative_malefemalemortality`(
    p_breederbatchid INT,
    p_shedid INT,
    p_itemid INT,
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @cumumprtalityquantity = 0;
    SET @placementdate = NOW();
    SET @openingfemalemortality = 0;
    
   SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(totalmortality),0) INTO @cumumprtalityquantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
        BDT.shedid = p_shedid AND
         BDM.itemid = p_itemid AND
         (BDT.transactiondate BETWEEN  @placementdate AND p_todate);
         
	SELECT 
	IFNULL(SUM(BBM.mortality),0) INTO @openingfemalemortality
	FROM breederbatchopening BBO 
	LEFT JOIN breederbatchmalefemaleopeningdetail BBM ON BBM.breederbatchopeningid = BBO.id 
    
    WHERE 
	BBO.breederbatchid = p_breederbatchid AND BBM.itemid = p_itemid
    group by BBO.breederbatchid;-- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN (@cumumprtalityquantity +@openingfemalemortality);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_dailymortality`(
 p_breederbatchid INT(11),
 p_shedid INT(11),
 p_placementdate DATE,
 p_transactiondate DATE
 ) RETURNS decimal(20,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @mortality = 0;
     SELECT SUM(BDM.totalmortality) INTO @mortality
     
     FROM
     breederdailytransaction BDT
     
    LEFT JOIN breederdailymortality BDM ON BDT.id = BDM.breederdailytransactionid 
    
    WHERE BDT.breederbatchid = p_breederbatchid AND BDT.shedid = p_shedid AND
		BDT.transactiondate >= p_placementdate AND
         BDT.transactiondate < p_transactiondate;
	-- transactiondate BETWEEN p_placementdate AND p_transactiondate;
    
        RETURN @mortality;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_daily_consumption_cost`(
 p_breederbatchid INT(11),
 p_placementdate DATE,
 p_transactiondate DATE
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @consumptioncost = 0;
      SET @dailycost = 0;
      SET @opningcost = 0;
      SET @transactiondate = null;
      SET @consumptionvalue = null;
    
	SELECT TRUNCATE (((DATEDIFF(p_transactiondate,p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 24)THEN
      
      SELECT date_add(p_placementdate,INTERVAL 168 DAY) INTO @transactiondate;
    
      else
       SELECT p_transactiondate INTO @transactiondate;
	  END IF;
     IF EXISTS(SELECT id FROM breederbatchplacement WHERE breederbatchid = p_breederbatchid AND id IS NOT NULL) THEN
   
		   SELECT IFNULL((SUM(BDTD.itemvalue)), 0) into @consumptioncost
			 FROM
			 breederdailytransaction BDT
			 
			LEFT JOIN breederdailyconsumption BDTD ON BDT.id = BDTD.breederdailytransactionid 
			
			WHERE BDT.breederbatchid = p_breederbatchid AND
				BDT.transactiondate >= p_placementdate AND
				 BDT.transactiondate < @transactiondate;
					
		ELSE
				SELECT
                     IFNULL((SUM(consumptionvalue)), 0)  INTO @opningcost
                    
					FROM breederbatchopening BLO
						INNER JOIN breederbatchfinancialopeningdetail BFOD ON BLO.id = BFOD.breederbatchopeningid
					WHERE  BLO.breederbatchid = p_breederbatchid ;
						 
                          
                          
				SELECT IFNULL((SUM(BDTD.itemvalue)), 0) into @dailycost
					FROM
					breederdailytransaction BDT
			 
				LEFT JOIN breederdailyconsumption BDTD ON BDT.id = BDTD.breederdailytransactionid 
			
				WHERE BDT.breederbatchid = p_breederbatchid AND
					BDT.transactiondate >= p_placementdate AND
					BDT.transactiondate < @transactiondate;
					
                    SELECT (@opningcost+@dailycost) INTO @consumptioncost;
			
		END IF;
        select @consumptioncost INTO @consumptionvalue;
RETURN @consumptionvalue;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_date`(
	p_cbfbatchid INT,
    p_date date,
    p_type VARCHAR(45),
    p_companyid INT
    
) RETURNS date
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @batchplacementdate = null;
	
    /*SELECT batch_place_date INTO @batchplacementdate
        FROM cbf_batch_details 
        WHERE 
			id = p_cbfbatchid AND companyid = p_companyid;*/
        IF(p_type = 'feed') THEN    
		select 
        max(CDT.transactiondate) INTO @batchplacementdate
        from cbf_dailytransaction CDT
        LEFT JOIN cbf_dailyconsumption CDC  ON  CDC.cbfdailytransactionid = CDT.id
        where 
        CDT.cbf_batchid = p_cbfbatchid and CDC.consumptiontypeid=861 and
        CDT.transactiondate<=p_date;
		END IF;
        
        IF(p_type = 'medicine') THEN    
		select 
        max(CDT.transactiondate) INTO @batchplacementdate
        from cbf_dailytransaction CDT
        LEFT JOIN cbf_dailyconsumption CDC  ON  CDC.cbfdailytransactionid = CDT.id
        where 
        CDT.cbf_batchid = p_cbfbatchid and CDC.consumptiontypeid=862 and
        CDT.transactiondate<=p_date;
		END IF;
        
         IF(p_type = 'vaccine') THEN    
		select 
        max(CDT.transactiondate) INTO @batchplacementdate
        from cbf_dailytransaction CDT
        LEFT JOIN cbf_dailyconsumption CDC  ON  CDC.cbfdailytransactionid = CDT.id
        where 
        CDT.cbf_batchid = p_cbfbatchid and CDC.consumptiontypeid=863 and
        CDT.transactiondate<=p_date;
		END IF;
RETURN @batchplacementdate;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_eggscollection_itembatchbalance`(
  P_itembatch VARCHAR(200),
  p_itemid INT,
  p_warehouseid INT,
  p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	 SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    SET @p_itemopningbalquantity = 0;
     SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE  
   itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    itemid = p_itemid AND
    towarehouseid= p_warehouseid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE itembatch = p_itembatch  AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    towarehouseid = p_warehouseid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    fromwarehouseid = p_warehouseid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
    fromwarehouseid = p_warehouseid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
     itemid = p_itemid AND
    towarehouseid = p_warehouseid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_itemopningbalquantity
    FROM materialmovement
    WHERE itembatch = p_itembatch AND
	 companyid = p_companyid AND
     transactiontypeid = 685 AND
     itemid = p_itemid AND
     towarehouseid = p_warehouseid;
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity+ @p_itemopningbalquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_eggsdistributiondetail_itembatch`(
	p_itembatchid VARCHAR(50),
    p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	 SET @receivedquantity = 0;
    
    SELECT 
		SUM(quantity) - 
			(
				SELECT IFNULL(SUM(quantity),0)
                
				FROM materialmovement 
				WHERE transactiontypeid = 683 AND itembatch = p_itembatchid
				AND companyid = p_companyid
			)
		INTO @receivedquantity
    FROM materialmovement 
    
    WHERE transactiontypeid = 684 
			AND itembatch = p_itembatchid
            AND companyid = p_companyid;
RETURN @receivedquantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_excessbirdincentive`(
	p_excessbirds INT,
	p_totalmortalitypercent DECIMAL(9,3),
    p_schemetotalmortality INT,
    p_exbirdincentive DECIMAL(12,3),
    p_avgweightofbird DECIMAL(9,3)
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @excessbirdincentive = 0;
    
    
    IF(p_excessbirds > 0 AND p_totalmortalitypercent < p_schemetotalmortality) THEN
        
        SELECT (p_excessbirds * p_avgweightofbird * p_exbirdincentive) INTO @excessbirdincentive;
	
    END IF;
    
    
RETURN @excessbirdincentive;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_fcrdeduction`(
	p_totalfeedconsumed DECIMAL(9,3),
	p_fcr DECIMAL(9,3),
    p_actualproductioncostperkg DECIMAL(9,3),
    p_cbf_batchid INT,
    p_applyschemefeedcost TINYINT(4),
    p_totalfeedcost DECIMAL(12,3)
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @fcrdeduction = 0;
    SET @totalbirdweight = 0;
    SET @std_fcr = 0;
    SET @std_productioncost = 0;
    SET @std_feedcost = 0;
    SET @excessfeedinkg = 0;
    
    SELECT fnc_getdelivered_weight(p_cbf_batchid) INTO @totalbirdweight;
    
    SELECT CSD.fcr, CSD.productioncost, CS.feedcost
	INTO @std_fcr, @std_productioncost, @std_feedcost
    
    FROM cbf_batch_details CB
    LEFT JOIN coststructure CS ON CS.id = CB.scheme_id
    LEFT JOIN coststructuredetail CSD ON CSD.coststructureid = CS.id
    
    WHERE CB.id = p_cbf_batchid LIMIT 1;
    
    IF(p_fcr > @std_fcr AND p_actualproductioncostperkg > @std_productioncost)THEN
    
		SELECT((@totalbirdweight * @std_fcr) - p_totalfeedconsumed) INTO @excessfeedinkg;
        
        IF(p_applyschemefeedcost = 1)THEN  
        
			SELECT (@excessfeedinkg * @std_feedcost) INTO @fcrdeduction;
        
        ELSE
        
			SELECT (@excessfeedinkg * (p_totalfeedcost / p_totalfeedconsumed)) INTO @fcrdeduction;
        
        END IF;
    
    END IF;
RETURN @fcrdeduction;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_feedmill_itembatchbalance`(
  P_itembatch VARCHAR(200),
  p_itemid INT,
  p_warehouseid INT,
  p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    SET @p_itemopningbalquantity = 0;
     SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE  
   FIND_IN_SET(itembatch, p_itembatch) AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    itemid = p_itemid AND
    towarehouseid= p_warehouseid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE FIND_IN_SET(itembatch, p_itembatch) AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    towarehouseid = p_warehouseid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE FIND_IN_SET(itembatch, p_itembatch) AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    fromwarehouseid = p_warehouseid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE FIND_IN_SET(itembatch, p_itembatch) AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
    fromwarehouseid = p_warehouseid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE FIND_IN_SET(itembatch, p_itembatch) AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
     itemid = p_itemid AND
    towarehouseid = p_warehouseid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_itemopningbalquantity
    FROM materialmovement
    WHERE FIND_IN_SET(itembatch, p_itembatch) AND
	 companyid = p_companyid AND
     transactiontypeid = 685 AND
     itemid = p_itemid AND
     towarehouseid = p_warehouseid;
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity+ @p_itemopningbalquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_feedmill_livestock`(
    p_transactiondate Date,
	p_warehouseid INT,
    p_itemid INT(11),
    p_companyid INT
   
) RETURNS decimal(15,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    SET @p_itemquantity = 0;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    itemid = p_itemid AND
    towarehouseid = p_warehouseid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    towarehouseid = p_warehouseid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    fromwarehouseid = p_warehouseid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
    fromwarehouseid = p_warehouseid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
     itemid = p_itemid AND
    towarehouseid = p_warehouseid;
    
   SELECT IFNULL(SUM(quantity), 0) into @p_itemquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 685 AND
     itemid = p_itemid AND
    towarehouseid = p_warehouseid;
    
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity+ @p_itemquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_feedtransferin`(
    p_warehousebinid VARCHAR(200),
    p_itemid INT(11),
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @quantity = 0;
  
    SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM materialmovement
    
    WHERE
	companyid = p_companyid AND
    transactiontypeid in(681, 682, 684) AND
    towarehousebinid = p_warehousebinid AND
    itemid = p_itemid AND companyid = p_companyid;
    

   RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_feedtransferout`(
	p_warehousebinid VARCHAR(200),
    p_itemid INT(11),
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @quantity = 0;
  
    SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM materialmovement
    
    WHERE
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    fromwarehousebinid = p_warehousebinid AND
    itemid = p_itemid AND companyid = p_companyid;
    

   RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_freightamount`(
	p_id INT(11)
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

     SET @frieght = null;
     
	SELECT frieght INTO @frieght
    FROM
		purchaseinvoice PI
       
	WHERE
	
         PI.id= p_id
         limit 1;

RETURN @frieght;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getaddress`(
	p_table VARCHAR(200),
    p_id INT(11)
) RETURNS varchar(500) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @fulladdress = null;
    
    IF(p_table = 'warehouse') THEN
    
		SELECT CONCAT(W.address, ' ', C.cityname, ' ', S.statename, ' ', CO.countryname) INTO @fulladdress  
        FROM warehouse W 
        INNER JOIN city C ON C.id = W.cityid
        INNER JOIN state S ON S.id = W.stateid
        INNER JOIN country CO ON CO.id = W.countryid
        WHERE W.id = p_id; 
    
    END IF;
    
    IF(p_table = 'partyaddress') THEN
    
		SELECT CONCAT(PA.address, ' ', C.cityname, ' ', S.statename, ' ', CO.countryname) INTO @fulladdress  
        FROM partyaddress PA 
        INNER JOIN city C ON C.id = PA.cityid
        INNER JOIN state S ON S.id = PA.stateid
        INNER JOIN country CO ON CO.id = PA.countryid
        WHERE PA.id = p_id; 
    
    END IF;
    
RETURN @fulladdress;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getavgfeed`(
	p_breederbatchid INT,
    p_transactiondate DATE
    
) RETURNS decimal(20,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @feedqty = 0;
		SELECT SUM(BDC.quantity) INTO @feedqty
    FROM
		breederdailyconsumption BDC
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDC.breederdailytransactionid AND BDC.consumptiontypeid = 861
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
        BDT.transactiondate <= p_transactiondate;

RETURN @feedqty;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getcbfdailytransactiondate`(
	 p_batchid INT,
    p_companyid INT
    ) RETURNS date
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @transactiondate = null;
	IF EXISTS(SELECT id FROM cbf_dailytransaction WHERE cbf_batchid = p_batchid)THEN
		select  IFNULL(DATE_ADD(transactiondate, INTERVAL 1 DAY),now()) INTO @transactiondate
        FROM 
			cbf_dailytransaction
		where cbf_batchid = p_batchid
			order by transactiondate desc limit 1;
	ELSE
		SELECT live_batch_date INTO @transactiondate
        FROM cbf_batch_details
        WHERE id = p_batchid;
    END IF;
RETURN @transactiondate;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getcbfplacementdate`(
	p_cbfbatchid INT,
    p_companyid INT
) RETURNS date
    READS SQL DATA
    DETERMINISTIC
BEGIN

	/*SET @batchplacementdate = null;
	IF EXISTS(select id FROM cbf_openingbalancedetail WHERE cbfbatchid = p_cbfbatchid AND companyid = p_companyid) THEN
    
		SELECT placementdate INTO @batchplacementdate
        FROM cbf_openingbalancedetail 
        WHERE 
			cbfbatchid = p_cbfbatchid AND companyid = p_companyid;
        
	ELSE
    
		SELECT placement_date INTO @batchplacementdate
        FROM cbf_chick_placement
        WHERE batch_id = p_cbfbatchid AND company_id = p_companyid;
    
	END IF;*/
    
    SELECT batch_place_date INTO @batchplacementdate
        FROM cbf_batch_details 
        WHERE 
			id = p_cbfbatchid AND companyid = p_companyid;

RETURN @batchplacementdate;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getdelivered_quantity_sales`(
	p_cbf_batchid INT,
    p_sales_type_id INT
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @soldqty = 0;
    
    SELECT IFNULL(SUM(SDD.quantity),0)
    INTO @soldqty
    
    FROM salesdeliverydetail SDD 
    LEFT JOIN salesdelivery SD ON SD.id = SDD.salesdeliveryid
    LEFT JOIN salesorderdetail SOD ON SOD.id = SDD.salesorderdetailid
    LEFT JOIN cbf_birdsalesorder BSO ON BSO.stdsalesorderid = SOD.salesorderid
    LEFT JOIN cbf_birdsalesorderdetail BSOD ON BSOD.cbfbirdsalesorderid = BSO.id
    
    WHERE BSOD.cbf_batchid = p_cbf_batchid
    AND SD.salestypeid = p_sales_type_id;
    
    

RETURN @soldqty;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getdelivered_weight`(
	p_cbf_batchid INT
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @deliveredwt = 0;
    
    SELECT IFNULL(SUM(SDD.weight),0)
    INTO @deliveredwt
    
    FROM salesdeliverydetail SDD 
    LEFT JOIN salesorderdetail SOD ON SOD.id = SDD.salesorderdetailid
    LEFT JOIN cbf_birdsalesorder BSO ON BSO.stdsalesorderid = SOD.salesorderid
    LEFT JOIN cbf_birdsalesorderdetail BSOD ON BSOD.cbfbirdsalesorderid = BSO.id
    
    WHERE BSOD.cbf_batchid = p_cbf_batchid;
    
    

RETURN @deliveredwt;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getdelivered_weight_sales`(
	p_cbf_batchid INT,
    p_sales_type_id INT
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @soldwt = 0;
    
    IF(p_sales_type_id = 723) THEN
		SELECT IFNULL(SUM(CDWD.deliveredwt),0)
		INTO @soldwt
		
		FROM cbf_delivery_weights_detail CDWD 
		
		WHERE CDWD.cbf_batchid = p_cbf_batchid;
		
    END IF;
    
RETURN @soldwt;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_geteefgrade`(
	p_eefvalue INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @eefgradeid = null;
    
    SELECT id INTO @eefgradeid
    FROM farmgrade
    WHERE p_eefvalue BETWEEN fromeef AND toeef;

RETURN @eefgradeid;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_geteggscollection`(
	p_breederbatchid INT,
    p_transactiondate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @eggscollection = 0;
    
	SELECT  
		SUM(ED.quantity)  INTO @eggscollection
	FROM 
		eggscollection EC  
        LEFT JOIN eggscollectiondetail ED ON  ED.eggscollectionid = EC.id
		WHERE EC.breederbatchid = p_breederbatchid AND EC.collectiondate <=p_transactiondate
        AND EC.statusid = 803 ;

   
	RETURN @eggscollection;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_geteggscollectionlayer`(
	p_layerbatchid INT,
    p_transactiondate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @eggscollection = 0;
    
	SELECT  
		SUM(LED.quantity)  INTO @eggscollection
	FROM 
		layereggscollection LEC  
        LEFT JOIN layereggscollectiondetail LED ON  LED.eggscollectionid = LEC.id
		WHERE LEC.layerbatchid = p_layerbatchid AND LEC.collectiondate <=p_transactiondate
        AND LEC.statusid = 803 ;

   
	RETURN @eggscollection;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getgoodsissue`(
	p_batchid INT,
    p_moduleid INT,
    p_transactiondate DATE
    
) RETURNS decimal(15,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @goodsissuecost = 0;
SET @ageinweeks = NULL;
SET @p_placementdate = NULL;
SET @p_companyid = null;

if(p_moduleid = 721) THEN
	select companyid INTO @p_companyid FROM breederbatch where id = p_batchid;
  SELECT fnc_getplacementdate(p_batchid,@p_companyid) INTO @p_placementdate;
  END IF;
  if(p_moduleid = 725) THEN
  select companyid INTO @p_companyid FROM layerbatch where id = p_batchid;
  SELECT fnc_getlayerplacementdate(p_batchid,@p_companyid) INTO @p_placementdate;
  END IF;
  
  if(p_moduleid = 723) THEN
  select companyid INTO @p_companyid FROM cbf_batch_details where id = p_batchid;
  SELECT fnc_getcbfplacementdate(p_batchid,@p_companyid) INTO @p_placementdate;
  END IF;
 SELECT TRUNCATE (((DATEDIFF(p_transactiondate,@p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 24 AND p_moduleid = 721)THEN
      SELECT date_add(@p_placementdate,INTERVAL 167 DAY) INTO @transactiondate;
      END IF;
      if(@ageinweeks <= 24 AND p_moduleid = 721)THEN
       SELECT p_transactiondate INTO @transactiondate;
	  END IF;
     if(@ageinweeks > 19 AND p_moduleid = 725)THEN
      SELECT date_add(@p_placementdate,INTERVAL 133 DAY) INTO @transactiondate;
      END IF;
       if(@ageinweeks <= 19 AND p_moduleid = 725)THEN
       SELECT p_transactiondate INTO @transactiondate;
	  END IF;
      
      
SELECT IFNULL(SUM(PGD.itemvalue),0) INTO  @goodsissuecost
	FROM purchase_goods_issue PG
		LEFT JOIN purchase_goods_issuedetail PGD ON PGD.goodsissueid = PG.id
		WHERE PG.batchid = p_batchid
		AND PG.moduleid = p_moduleid
		AND PG.issuedate <= @transactiondate
		group by PG.batchid;
RETURN @goodsissuecost;


END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getgroupname`(
	p_groupid INT(11)
) RETURNS char(100) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @groupname = null;
    
    SELECT coaname INTO @groupname FROM chartofaccount WHERE id = p_groupid;

RETURN @groupname;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_gethatchingeggs`(
	p_breederbatchid INT,
    p_transactiondate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @totalhatchingeggs = 0;
    
	SELECT  
		SUM(EDD.quantity)  INTO @totalhatchingeggs
	FROM 
		eggscollection EC  
        LEFT JOIN eggsdistributiondetail EDD ON  EDD.eggscollectionid = EC.id
		WHERE EC.breederbatchid = p_breederbatchid
        AND EDD.statusid = 842 AND EDD.itemtypeid = 881 AND 
        EC.collectiondate <=p_transactiondate;

   
	RETURN @totalhatchingeggs;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_gethatchingeggslayer`(
	p_layerbatchid INT,
    p_transactiondate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @totalhatchingeggs = 0;
    
	SELECT  
		SUM(LEDD.quantity)  INTO @totalhatchingeggs
	FROM 
		layereggscollection LEC  
        LEFT JOIN layereggsdistributiondetail LEDD ON  LEDD.eggscollectionid = LEC.id
		WHERE LEC.layerbatchid = p_layerbatchid
        AND LEDD.statusid = 842 AND LEDD.itemtypeid = 881 AND 
        LEC.collectiondate <=p_transactiondate;

   
	RETURN @totalhatchingeggs;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getiembatch_use`(
	p_itemid INT,
    p_itembatch varchar(100)
    ) RETURNS varchar(45) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @itembatch = Null;
		SELECT itembatch INTO @itembatch FROM  materialmovement 
        WHERE 
        itemid = p_itemid 
        AND itembatch = p_itembatch AND transactiontypeid != 681
        AND transactiontypeid = 683 limit 1;
        IF(@itembatch IS NOT NULL) THEN
			return 'YES';
		ELSE
		 return 'NO';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getlayerplacementdate`(
	p_layerbatchid INT,
    p_companyid INT
) RETURNS date
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @batchplacementdate = null;
	IF EXISTS(select id FROM layer_batchopening_balance WHERE layerbatchid = p_layerbatchid AND companyid = p_companyid AND id IS NOT NULL ) THEN
    
		SELECT batchplacementdate INTO @batchplacementdate
        FROM layer_batchopening_balance 
        WHERE 
			layerbatchid = p_layerbatchid AND companyid = p_companyid;
        
	ELSE
    
		SELECT placementdate INTO @batchplacementdate
        FROM layerbatchplacement
        WHERE layerbatchid = p_layerbatchid AND companyid = p_companyid;
    
	END IF;

RETURN @batchplacementdate;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getlayertotalmortality`(
	p_layerbatchid INT,
    p_transactiondate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    
	SELECT (SUM(todaymortality) + SUM(todayculls)) INTO @quantity
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid
        AND LDT.transactiondate <= p_transactiondate;

RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getmoduleid`(
	p_transfertarget INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @moduleid = null;
    
    IF(p_transfertarget = 501) THEN
		SELECT 721 INTO @moduleid;
	ELSEIF(p_transfertarget = 502) THEN
		SELECT 722 INTO @moduleid;
	ELSEIF(p_transfertarget = 503) THEN
		SELECT 723 INTO @moduleid;
	ELSEIF(p_transfertarget = 504) THEN
		SELECT 724 INTO @moduleid;
	ELSEIF(p_transfertarget = 505) THEN
		SELECT 725 INTO @moduleid;
	ELSE 
		SELECT 726 INTO @moduleid;
	END IF;
	RETURN @moduleid;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getmodulewisedailytransactiondate`(
	 p_moduleid INT,
	 p_batchid INT,
	 p_companyid INT
) RETURNS date
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @transactiondate = null;
	IF(p_moduleid = 721) THEN
		SELECT IFNULL(DATE_ADD(updateddate, INTERVAL 1 DAY),now()) INTO @transactiondate
		FROM breederbatchbalance
		WHERE breederbatchid = p_batchid
        ORDER BY updateddate DESC LIMIT 1;
	
	END IF;
    
    IF (p_moduleid = 725) THEN 
		SELECT IFNULL(DATE_ADD(updateddate, INTERVAL 1 DAY),now()) INTO @transactiondate
		FROM layerbatchbalance
		WHERE layerbatchid = p_batchid
        ORDER BY updateddate DESC LIMIT 1;
    END IF;
RETURN @transactiondate;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getphase_byweek`(
	p_week INT
) RETURNS varchar(45) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @phasename = null;
 SELECT phasename INTO @phasename from breederphase
  
   WHERE fromweek <= p_week
   AND toweek >= p_week;


RETURN @phasename;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getplacementdate`(
	p_breederbatchid INT,
    p_companyid INT
) RETURNS date
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @batchplacementdate = null;
	IF EXISTS(select id FROM breederbatchopening WHERE breederbatchid = p_breederbatchid AND companyid = p_companyid) THEN
    
		SELECT batchplacementdate INTO @batchplacementdate
        FROM breederbatchopening 
        WHERE 
			breederbatchid = p_breederbatchid AND companyid = p_companyid;
        
	ELSE
    
		SELECT placementdate INTO @batchplacementdate
        FROM breederbatchplacement
        WHERE breederbatchid = p_breederbatchid AND companyid = p_companyid;
    
	END IF;

RETURN @batchplacementdate;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getplacementdatecbf`(
	p_cbfbatchid INT,
    p_companyid INT
) RETURNS date
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @batchplacementdate = null;
	IF EXISTS(select id FROM cbf_openingbalancedetail WHERE cbfbatchid = p_cbfbatchid AND companyid = p_companyid) THEN
    
		SELECT placementdate INTO @batchplacementdate
        FROM cbf_openingbalancedetail 
        WHERE 
			cbfbatchid = p_cbfbatchid AND companyid = p_companyid;
        
	ELSE
    
		SELECT placement_date INTO @batchplacementdate
        FROM cbf_chick_placement
        WHERE batch_id = p_cbfbatchid AND company_id = p_companyid;
    
	END IF;

RETURN @batchplacementdate;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getplacementdate_layer`(
	p_batchid INT,
    p_companyid INT
) RETURNS date
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @batchplacementdate = null;
	IF EXISTS(select id FROM layer_batchopening_balance WHERE layerbatchid = p_batchid AND companyid = p_companyid) THEN
    
		SELECT batchplacementdate INTO @batchplacementdate
        FROM layer_batchopening_balance 
        WHERE 
			layerbatchid = p_batchid AND companyid = p_companyid;
        
	ELSE
    
		SELECT placementdate INTO @batchplacementdate
        FROM layerbatchplacement
        WHERE layerbatchid = p_batchid AND companyid = p_companyid;
    
	END IF;

RETURN @batchplacementdate;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getScheduleDate`(
	p_setterid INT,
	p_detailsid 

INT
    
) RETURNS date
    READS SQL DATA
    DETERMINISTIC
BEGIN
	IF(p_detailsid != 0) THEN
      SET @date = ( SELECT HS.scheduledate
			        FROM
					  hatcheryschedule HS
			          LEFT JOIN hatcheryscheduledetail HSD ON HS.id = HSD.hatcheryscheduleid
                    WHERE
				      HSD.id = p_detailsid AND
                      HSD.statusid NOT IN (243, 244) 
				  );
	ELSE
		SET @date = (SELECT HS.scheduledate
                     FROM
					   hatcheryschedule HS
                       LEFT JOIN hatcheryscheduledetail HSD ON HS.id = HSD.hatcheryscheduleid
                     WHERE
				       HSD.setterid = p_setterid AND
                       HSD.statusid NOT IN (243, 244) -- status not canceled and processed
                    );
    END IF;

   RETURN @date;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_getStdMortality`(
	p_week INT,
    p_mortality INT,
    p_moduleid INT
) RETURNS varchar(20) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @mortality = 0;
    SET @trend = '';
    
	IF(p_moduleid = 721) THEN
    
		SELECT mortality INTO @mortality
        from breederperformance 
        
        where
           `week` = p_week;
           
	ELSEIF(p_moduleid = 725) THEN
    
		SELECT mortality INTO @mortality
        from layer_performance
        
        where
           `week` = p_week;
           
    END IF;
           
	IF (@mortality > p_mortality OR @mortality = p_mortality) THEN
		SET @trend = 'Up';
	ELSEIF(@mortality < p_mortality) THEN
		SET @trend = 'Down';
	END IF;

   
	RETURN @trend;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_gettotalmortality`(
	p_breederbatchid INT,
    p_transactiondate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    
     
     
	SELECT (SUM(totalmortality) + SUM(totalculls)) INTO @quantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid
        AND BDT.transactiondate <= p_transactiondate;

RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_get_glcode`(
	p_subgroupledger_id INT(11),
    p_compnay_id BIGINT(11)
) RETURNS varchar(200) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @memglcode = null;
SET @subglcode = null;

-- select glcode from subledger
	 select glcode INTO @memglcode from chartofaccount 
	 WHERE 
		groupid = p_subgroupledger_id  AND companyid = p_compnay_id 
	 order by id desc limit 1;
-- get glcode from sub ledger;
		select glcode INTO @subglcode from chartofaccount 
		WHERE 
			id = p_subgroupledger_id  AND companyid = p_compnay_id 
	order by id desc limit 1;

-- if glcode is null for first codition then get subleger gloce and increse by one
	 if(@memglcode IS NOT NULL) THEN 
		SET @glcode = @memglcode+1;
	ELSE
		SET @glcode = @subglcode+1;
	END IF;
RETURN @glcode;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_get_profit_and_loss_amount`(
     p_from_date DATE,
	 p_todate DATE,
     p_companyid INT(11)) RETURNS decimal(15,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @@sql_mode = ' ';
    SET @revenu_amount = 0;
    SET @exp_amount = 0;
    SET @profitandloss_amount = 0;
   
    -- FOR REVENUE
   DROP TEMPORARY TABLE IF EXISTS revenue;
  CREATE TEMPORARY TABLE revenue
    
	SELECT
           JED.acledgerid,
          (((IFNULL(fnc_profitandloss(p_from_date, p_todate,JED.acledgerid), 0) + IFNULL(SUM(JED.dramount),0)) - IFNULL(SUM(JED.cramount),0))) as amount
           
	FROM chartofaccount COA
    
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid
	WHERE JE.voucherdate BETWEEN p_from_date AND p_todate
    -- JE.voucherdate <= p_todate
	AND JE.companyid = p_companyid
    AND COA.categoryid = 4
    
    group by JED.acledgerid;
    
    SELECT 
           ((SUM(amount))) INTO @revenu_amount
           
	FROM revenue;
    
	-- FOR EXPENDITURE
    
     DROP TEMPORARY TABLE IF EXISTS expenditure;
    CREATE TEMPORARY TABLE expenditure
    
    SELECT 
           JED.acledgerid,
          (((IFNULL(fnc_profitandloss(p_from_date, p_todate,JED.acledgerid), 0) + IFNULL(SUM(JED.dramount),0)) - IFNULL(SUM(JED.cramount),0))) as amount
           
		FROM chartofaccount COA
    
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid
	WHERE JE.voucherdate BETWEEN p_from_date AND p_todate
    -- JE.voucherdate <= p_todate
	AND JE.companyid = p_companyid
    AND COA.categoryid = 5
    
    group by JED.acledgerid;
    
  
    
    SELECT 
           ((SUM(amount))) INTO @exp_amount
           
	FROM expenditure;

    SELECT  (ABS(@revenu_amount) - ABS(@exp_amount)) INTO @profitandloss_amount;
RETURN @profitandloss_amount;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_hatchery_status`(
	p_scheduleid INT
    
) RETURNS tinyint(1)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
     IF EXISTS(
            SELECT 
				HSD.id 
            
            FROM hatcheryscheduledetail HSD
	
            where 
				HSD.hatcheryscheduleid = p_scheduleid AND 
                HSD.statusid = 241
                
            LIMIT 1
           ) THEN BEGIN
        
			return true;
	
			END;
    ELSE 
		return false;
        
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_inwardrate_forstock`(
  p_itemid varchar(255),
  p_warehousebinid VARCHAR(500),
  p_transactiondate DATE,
  p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
SET @p_inwardrate= 0;
SET @p_outward= 0;

    
SELECT SUM(MM.itemvalue) INTO @p_inwardrate

FROM materialmovement MM
LEFT JOIN item I ON I.id = MM.itemid
LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id

 WHERE 
	   FIND_IN_SET(MM.towarehousebinid,p_warehousebinid) AND
       FIND_IN_SET(MM.itemid,p_itemid)
	   AND FIND_IN_SET(transactiontypeid,'681,682,685,684')
       AND MM.transactiondate = p_transactiondate 
       group by MM.itemid;    
       
    RETURN (@p_inwardrate);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_isinvoicedone`(
	p_grpoid INT(11), 
    p_type VARCHAR(200)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @@sql_mode = '';
	SET @isgrnexists = 0;
    
    IF(p_type = 'Purchase') THEN
		IF EXISTS(SELECT id FROM purchaseinvoice WHERE FIND_IN_SET(p_grpoid, grpono)) THEN
			SELECT 1 INTO @isgrnexists;
		ELSE
			SELECT 0 INTO @isgrnexists;
		END IF;
	ELSE
		IF EXISTS(SELECT id FROM salesinvoice WHERE FIND_IN_SET(p_grpoid, salesdeliveryids)) THEN
			SELECT 1 INTO @isgrnexists;
		ELSE
			SELECT 0 INTO @isgrnexists;
		END IF;
    END IF;
	RETURN @isgrnexists;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_itembatchbalance`(
  P_itembatch VARCHAR(800),
  p_itemid INT,
  p_warehouseid INT,
  p_warehousebinid INT,
  p_companyid INT
   
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	 SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    SET @p_itemopningbalquantity = 0;
    
     SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE transactiontypeid = 681 AND
     itemid = p_itemid AND
     towarehousebinid = p_warehousebinid AND
     FIND_IN_SET(itembatch,p_itembatch) AND
     quantity > 0;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE transactiontypeid = 682 AND
     itemid = p_itemid AND
     towarehousebinid = p_warehousebinid AND
     FIND_IN_SET(itembatch,p_itembatch) AND
     quantity > 0;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE transactiontypeid = 682 AND
     itemid = p_itemid AND
     fromwarehousebinid = p_warehousebinid AND
     FIND_IN_SET(itembatch,p_itembatch) AND
     quantity > 0;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE transactiontypeid = 683 AND
     itemid = p_itemid AND
     fromwarehousebinid = p_warehousebinid AND
     FIND_IN_SET(itembatch,p_itembatch) AND
     quantity > 0;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiontypeid = 684 AND
     itemid = p_itemid AND
     towarehousebinid = p_warehousebinid AND
     FIND_IN_SET(itembatch,p_itembatch) AND
     quantity > 0;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_itemopningbalquantity
    FROM materialmovement
    WHERE 
     transactiontypeid = 685 AND
     itemid = p_itemid AND
     towarehousebinid = p_warehousebinid AND
     FIND_IN_SET(itembatch,p_itembatch) AND
     quantity > 0;
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity+ @p_itemopningbalquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_itembatchbalancedate`(
  p_itemid INT(11),
  p_warehouseids VARCHAR(200),
  p_warehousebinids VARCHAR(200),
  p_fromdate DATE,
  p_companyid INT
   
) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_issuequantity = 0;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE  
	companyid = p_companyid AND
    transactiontypeid in (682,681,685,684) AND
    itemid = p_itemid AND
    transactiondate < p_fromdate AND
    FIND_IN_SET(towarehousebinid, p_warehousebinids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE -- itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid in (682,683) AND
    itemid = p_itemid AND
    transactiondate < p_fromdate AND
    FIND_IN_SET(fromwarehousebinid, p_warehousebinids);
    
   
   RETURN (@p_inwardquantity - @p_issuequantity);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_itembatchbalanceongivendate`(
	p_itembatch VARCHAR(200), 
    p_warehouseids VARCHAR(200),
    p_fromdate DATE,
    p_todate DATE,
    p_companyid INT(11)
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_issuequantity = 0;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE  
	companyid = p_companyid AND
    transactiontypeid in (682,681,685,684) AND
    itembatch = p_itembatch AND
    transactiondate BETWEEN p_fromdate AND p_todate AND
    FIND_IN_SET(towarehouseid, p_warehouseids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE -- itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid in (682,683) AND
    itembatch = p_itembatch AND
    transactiondate BETWEEN p_fromdate AND p_todate AND
    FIND_IN_SET(fromwarehouseid, p_warehouseids);
    
   
   RETURN (@p_inwardquantity - @p_issuequantity);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_itembatchlivestock`(
    p_itemid INT,
    p_itembatch VARCHAR(200),
	p_warehousebinid INT,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    SET @p_openingquantity = 0;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_openingquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 685 AND
    towarehousebinid = p_warehousebinid;
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    towarehousebinid = p_warehousebinid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    towarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    fromwarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
    fromwarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    towarehousebinid = p_warehousebinid;
    
   
   RETURN (@p_openingquantity + @p_inwardquantity + @p_transferinquantity + @p_receiptquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_itembatchstockout`(
	p_itemid INT, 
    p_itembatch VARCHAR(200),
    p_warehouseid INT,
    p_shedwarehousebinid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @outquantity = 0;

	select quantity INTO @outquantity from 
	(
		select itemid, itembatch, sum(quantity) as quantity from materialmovement
		where 
			 transactiontypeid in (682,683)
			 AND itemid = p_itemid 
            AND itembatch = p_itembatch
            AND fromwarehouseid = p_warehouseid
            AND fromwarehousebinid = p_shedwarehousebinid
            
		GROUP BY itemid, itembatch
	) stockout;


RETURN @outquantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_itemgroupwise_transferedquantity`(
	p_itemgroupids varchar(200),
    p_warehousebinid varchar(200),
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @@sql_mode = ' ';
SET @transferedquantity = 0;

	SELECT SUM(MM.quantity) into @transferedquantity
		  
           
	FROM materialmovement MM
    LEFT JOIN item I ON I.id = MM.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    
    WHERE FIND_IN_SET(MM.fromwarehousebinid,p_warehousebinid)
    AND FIND_IN_SET(I.itemgroupid,p_itemgroupids) AND
    FIND_IN_SET(transactiontypeid,'682')
   group by MM.transactiondate,itemid;
                        
RETURN IFNULL(@transferedquantity, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_iteminstock`(
	p_itemid INT(11),
    p_warehousebinid INT(11),
    p_transactiondate DATE,
    p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    SET @p_openingquantity = 0;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_openingquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 685 AND
    transactiondate <= p_transactiondate AND
    towarehousebinid = p_warehousebinid;
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    transactiondate <= p_transactiondate AND
    towarehousebinid = p_warehousebinid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    transactiondate <= p_transactiondate AND
    towarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    transactiondate <= p_transactiondate AND
    fromwarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
    transactiondate <= p_transactiondate AND
    fromwarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    transactiondate <= p_transactiondate AND
    towarehousebinid = p_warehousebinid;
    
   
   RETURN (@p_openingquantity + @p_inwardquantity + @p_transferinquantity + @p_receiptquantity) - (@p_issuequantity + @p_transferoutquantity);
   

RETURN 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_item_avgweight`(
	p_itemid INT
) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @avgweight = 0;

	SELECT avgweight INTO @avgweight FROM breederdailymortality 
    WHERE itemid = p_itemid  
    ORDER BY itemid desc LIMIT 1;

RETURN @avgweight;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerbatchwise_batchchicksopeningbalance`(
	p_layerbatchid INT,
    p_shedid INT,
    p_transactiondate DATE,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
 SET @coloseingbalance = null;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
     
	IF(@placementdate = p_transactiondate) THEN
    
		SELECT
        IFNULL(SUM(LBPD.quantity),0) INTO @coloseingbalance
		-- LBPD.layershedid
        from layerbatchplacementdetail LBPD
        LEFT JOIN layerbatchplacement LBP ON LBP.id = LBPD.layerbatchplacementid 
        
        where
           LBP.layerbatchid = p_layerbatchid AND
           LBPD.layershedid = p_shedid;
    ELSE
     
		
		SELECT IFNULL(SUM(LBPD.quantity),0) -IFNULL(fnc_layerbatchwise_chickscullsandmortality(p_layerbatchid, p_shedid,p_transactiondate), 0) INTO @coloseingbalance
        from layerbatchplacementdetail LBPD
        LEFT JOIN layerbatchplacement LBP ON LBP.id = LBPD.layerbatchplacementid
        
        where
           LBP.layerbatchid = p_layerbatchid AND
           LBPD.layershedid = p_shedid ;

	 END IF;
   
	RETURN @coloseingbalance;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerbatchwise_birdliveqty`(
	p_layerbatchid INT,
    p_itemid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @placementdate = null;
    
    SELECT fnc_getlayerplacementdate(p_layerbatchid,p_companyid) INTO @placementdate;
    
    
    IF EXISTS(SELECT id FROM layerbatchplacement WHERE layerbatchid = p_layerbatchid AND id IS NOT NULL) THEN
		IF(@placementdate = p_transactiondate) THEN
    
		SELECT IFNULL(SUM(LBPD.quantity),0) INTO @openingbalance 
        from layerbatchplacementdetail LBPD
        LEFT JOIN layerbatchplacement LBP ON LBP.id = LBPD.layerbatchplacementid
        
        where
           LBP.layerbatchid = p_layerbatchid 
           AND LBPD.itemid = p_itemid;
        
    ELSE
     
		SELECT IFNULL(SUM(LBPD.quantity),0) - IFNULL(fnc_layerbatchwise_mortalityculls(p_layerbatchid, p_itemid, p_transactiondate,p_companyid), 0) INTO @openingbalance
        from layerbatchplacementdetail LBPD
        LEFT JOIN layerbatchplacement LBP ON LBP.id = LBPD.layerbatchplacementid
        
        where
           LBP.layerbatchid = p_layerbatchid
           AND LBPD.itemid = p_itemid;

	END IF;
					
		ELSE
				SELECT
					  (IFNULL(SUM(LBOD.liveqty),0) - IFNULL(fnc_layerbatchwise_mortalityculls(p_layerbatchid, p_itemid, p_transactiondate,p_companyid), 0) ) INTO @openingbalance
                    
					FROM layer_batchopening_balance LBO
						INNER JOIN layer_batchbridopeningbalance_detail LBOD ON LBO.id = LBOD.layerbatchopeningid
					WHERE LBOD.itemid = p_itemid AND LBO.layerbatchid = p_layerbatchid AND 
						  LBO.companyid = p_companyid ;
		END IF;

   
	RETURN @openingbalance;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerbatchwise_chickscullsandmortality`(
	p_layerbatchid INT,
    p_shedid INT,
    p_transactiondate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
     
     
	SELECT (SUM(todaymortality) + SUM(todayculls) + SUM(sexingerrorquantity)) +IFNULL(fnc_layerbatchwise_transferqty(p_layerbatchid, p_shedid,p_transactiondate), 0) INTO @quantity
    FROM
		layerdailymortality LDM
       
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid AND
        LDT.shedid = p_shedid AND
         (LDT.transactiondate BETWEEN  @placementdate AND p_transactiondate)
          GROUP BY LDT.shedid; -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerbatchwise_cullsandmortality`(
	p_layerbatchid INT,
    p_shedid INT,
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
     
     
	SELECT SUM(todaymortality) + SUM(todayculls) + SUM(sexingerrorquantity) INTO @quantity
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		 LDT.layerbatchid = p_layerbatchid AND
         LDT.shedid = p_shedid AND 
         LDM.itemid = p_itemid AND
         (LDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerbatchwise_cummulative_mortality`(
	p_layerbatchid INT,
    p_itemid INT,
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @cum_mortality = 0;
    SET @placementdate = null;
    
 
     SELECT fnc_getlayerplacementdate(p_layerbatchid,p_companyid) INTO  @placementdate;
     
     
	SELECT (IFNULL(SUM(todaymortality),0)) INTO @cum_mortality
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		 LDT.layerbatchid = p_layerbatchid AND
         LDM.itemid = p_itemid AND
          (LDT.transactiondate BETWEEN  @placementdate AND p_todate);

RETURN @cum_mortality;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerbatchwise_malefemaleopbalance`(
	p_layerbatchid INT,
    p_shedid INT,
    p_itemid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @placementdate = null;
    
    SELECT fnc_getlayerplacementdate(p_layerbatchid,p_companyid) INTO @placementdate;
    
    select fnc_layerbird_liveqty(p_layerbatchid, p_shedid, p_itemid, @placementdate,p_transactiondate,p_companyid) INTO @openingbalance;
	/*IF(@placementdate = p_transactiondate) THEN
    
		SELECT IFNULL(SUM(LBPD.quantity),0) INTO @openingbalance 
        from layerbatchplacementdetail LBPD
        LEFT JOIN layerbatchplacement LBP ON LBP.id = LBPD.layerbatchplacementid
        
        where
           LBP.layerbatchid = p_layerbatchid AND
            LBPD.layershedid = p_shedid
           AND LBPD.itemid = p_itemid LIMIT 1;
        
    ELSE
     
		SELECT IFNULL(SUM(LBPD.quantity),0) - IFNULL(fnc_layerbatchwise_cullsandmortality(p_layerbatchid, p_shedid, p_itemid, p_transactiondate), 0) INTO @openingbalance
        from layerbatchplacementdetail LBPD
        LEFT JOIN layerbatchplacement LBP ON LBP.id = LBPD.layerbatchplacementid
        
        where
           LBP.layerbatchid = p_layerbatchid
           AND LBPD.layershedid = p_shedid
           AND LBPD.itemid = p_itemid LIMIT 1;

	END IF;*/
   
	RETURN @openingbalance;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerbatchwise_mortalityculls`(
	p_layerbatchid INT,
    p_itemid INT,
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = null;
    
 
     SELECT fnc_getlayerplacementdate(p_layerbatchid,p_companyid) INTO  @placementdate;
     
     
	SELECT (IFNULL(SUM(todaymortality),0) + IFNULL(SUM(todayculls),0) + IFNULL(SUM(sexingerrorquantity),0)) INTO @quantity
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		 LDT.layerbatchid = p_layerbatchid AND
         LDM.itemid = p_itemid AND
         (LDT.transactiondate BETWEEN  @placementdate AND p_todate);

RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerbatchwise_salesvalue`(
 p_batchid INT,
 p_moduleid INT,
 p_transactiondate DATE,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	
      SET @itemid = null;
      SET @warehousebinid = null;
      SET @salesvalue = null;
      SET @placementdate = null;
	
    SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @placementdate;
    
	select GROUP_CONCAT(DISTINCT warehousebinid SEPARATOR ', ')  INTo @warehousebinid FROM layerbatchbalance LBB
		LEFT JOIN layershed LS ON LS.id = LBB.layerbatchid
		WHERE layerbatchid = p_batchid
		group by LBB.layerbatchid;
        
    SELECT  itemid INTO @itemid FROM layerbatch WHERE id = p_batchid;

	SELECT ifnull(SUM(SDD.quantity*rate),0) INTO @salesvalue
    FROM salesdelivery SD
		inner JOIN salesdeliverydetail SDD ON SDD.salesdeliveryid = SD.id AND find_in_set(SDD.itemid, @itemid)
			AND find_in_set(SDD.warehousebinid, @warehousebinid)
			WHERE SD.salestypeid = p_moduleid AND SD.deliverydate <= p_transactiondate
             AND SD.deliverydate >= @placementdate ;

RETURN @salesvalue;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerbatchwise_salesvalue_after19week`(
 p_batchid INT,
 p_moduleid INT,
 p_transactiondate DATE,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	
      SET @itemid = null;
      SET @warehousebinid = null;
      SET @salesvalue = null;
      SET @placementdate = null;
	
    SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @placementdate;
    
	select GROUP_CONCAT(DISTINCT warehousebinid SEPARATOR ', ')  INTo @warehousebinid FROM layerbatchbalance LBB
		LEFT JOIN layershed LS ON LS.id = LBB.layershedid
		WHERE layerbatchid = p_batchid
		group by LBB.layerbatchid;
        
    SELECT itemid INTO @itemid FROM layerbatch WHERE id = p_batchid;

	SELECT ifnull(SUM(SDD.quantity*rate),0) INTO @salesvalue
    FROM salesdelivery SD
		inner JOIN salesdeliverydetail SDD ON SDD.salesdeliveryid = SD.id AND find_in_set(SDD.itemid, @itemid)
			AND find_in_set(SDD.warehousebinid, @warehousebinid)
			WHERE SD.salestypeid = p_moduleid AND SD.deliverydate > p_transactiondate
             AND SD.deliverydate >= @placementdate ;

RETURN @salesvalue;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerbatchwise_today_mortality`(
	p_layerbatchid INT,
    p_itemid INT,
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @today_mortality = 0;
     
     
	SELECT (IFNULL(SUM(todaymortality),0)) INTO @today_mortality
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		 LDT.layerbatchid = p_layerbatchid AND
         LDM.itemid = p_itemid AND
         LDT.transactiondate = p_todate;

RETURN @today_mortality;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerbatchwise_transferqty`(
    p_layerbatchid INT,
    p_shedid INT,
    p_transactiondate DATE) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @quantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
    
    SELECT SUM(LBTD.quantity) INTO @quantity
    
    	FROM layerbatchtransferdetail LBTD
        
        LEFT JOIN layerbatchtransfer LBT ON LBT.id = LBTD.layerbatchtransferid
        
	WHERE
    LBT.layerbatchid = p_layerbatchid AND
     LBT.fromshedid = P_shedid
     AND (LBT.transferdate BETWEEN  @placementdate AND p_transactiondate)
      GROUP BY LBT.fromshedid;
RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerbird_liveqty`(
	p_layerbatchid INT,
    p_layershedid INT,
    p_itemid INT,
    p_placementdate DATE,
    p_todate DATE,
    p_companyid INT
    
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @totalcullsandmortality = 0;
    SET @transferedquantity = 0;
    SET @transferedinquantity = 0;
    
  
    SELECT warehouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM layershed
    WHERE id =  p_layershedid;
	-- calculate total culla and mortality for given batch before p_todate
    
	/*SELECT SUM(todaymortality) + SUM(todayculls) +SUM(sexingerrorquantity) INTO @totalcullsandmortality
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		 LDT.layerbatchid = p_layerbatchid AND
         LDT.shedid = p_layershedid AND 
         LDM.itemid = p_itemid AND
         LDT.transactiondate >= p_placementdate AND
         LDT.transactiondate < p_todate;*/
	SELECT IFNULL(SUM(quantity), 0) into @totalcullsandmortality
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
	transactiondate >= p_placementdate AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
  
  
	-- calculate transfered male/female quantity befor p_todate
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedquantity
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
	transactiondate >= p_placementdate AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
        
        
        -- calculate transfered in male/female quantity befor p_todate
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedinquantity
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
	transactiondate >= p_placementdate AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
        
    
  

        
	IF EXISTS(SELECT id FROM layerbatchplacement WHERE layerbatchid = p_layerbatchid AND id IS NOT NULL) THEN
			select 
				SUM(LBPD.quantity) INTO @openingbalance
                    
					FROM layerbatchplacement LBP
						
				INNER JOIN layerbatchplacementdetail LBPD ON LBP.id = LBPD.layerbatchplacementid
					WHERE LBP.layerbatchid = p_layerbatchid AND LBP.companyid = p_companyid AND
							LBPD.itemid = p_itemid AND LBPD.layershedid = p_layershedid group by LBPD.layershedlineid;
					
		ELSE
				SELECT
					 SUM(LLO.lineqty) INTO @openingbalance
                    
					FROM layer_batchlocationwiseopening_detail LLO
						INNER JOIN layer_batchopening_balance LBO ON LBO.id = LLO.layerbatchopeningid
					WHERE LLO.itemid = p_itemid AND LBO.layerbatchid = p_layerbatchid AND 
						  LBO.companyid = p_companyid AND LLO.shedid = p_layershedid
                          group by shedlineid;
					
			
		END IF;
        
    
    
	RETURN (IFNULL(@openingbalance,0)+IFNULL(@transferedinquantity,0)) - (IFNULL(@totalcullsandmortality, 0) + IFNULL(@transferedquantity, 0));

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerchicks_placementqty`(
 p_layerbatchid INT(11),
 p_companyid INT(11),
 p_itemid INT(11)
 ) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

     SET @placedqty = NUll;
         IF EXISTS(SELECT id FROM layerbatchplacement WHERE layerbatchid = p_layerbatchid AND id IS NOT NULL) THEN
			select 
				SUM(LBPD.quantity) INTO @placedqty
                    
					FROM layerbatchplacement LBP
						
				INNER JOIN layerbatchplacementdetail LBPD ON LBP.id = LBPD.layerbatchplacementid
					WHERE LBP.layerbatchid = p_layerbatchid AND LBP.companyid = p_companyid AND
							LBPD.itemid = p_itemid;
					
		ELSE
				SELECT
					 LBD.placeqty INTO @placedqty
                    
					FROM layer_batchopening_balance LBO
						INNER JOIN layer_batchbridopeningbalance_detail LBD ON LBO.id = LBD.layerbatchopeningid
					WHERE LBO.layerbatchid = p_layerbatchid AND 
						  LBO.companyid = p_companyid;
					
			
		END IF;
        
        RETURN @placedqty;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerchicks_purchasecost`(
 p_layerbatchid INT(11),
 p_companyid INT(11),
 p_itemid INT(11)
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

     SET @biredcost = NUll;
     IF EXISTS(SELECT id FROM layerbatchplacement WHERE layerbatchid = p_layerbatchid AND id IS NOT NULL) THEN
     
			 SELECT PID.unitprice INTO @biredcost FROM
                    layerbatchplacement LBP
						INNER JOIN layerbatchplacementdetail LBPD ON LBPD.layerbatchplacementid = LBP.id 
						INNER JOIN purchaseinvoice PI ON PI.grpono = LBP.grpono
						INNER JOIN purchaseinvoicedetail PID ON PI.id = PID.purchaseinvoiceid AND PID.itemid = p_itemid
                    WHERE 
                    
                    LBP.layerbatchid = p_layerbatchid AND
					LBP.companyid = p_companyid AND LBPD.itemid = p_itemid;
		ELSE
           
					select
					LBOD.rate INTO @biredcost
                    
					FROM layer_batchbridopeningbalance_detail LBOD
						INNER JOIN layer_batchopening_balance LBOB ON LBOB.id = LBOD.layerbatchopeningid
					WHERE LBOD.itemid = p_itemid AND LBOB.layerbatchid = p_layerbatchid AND LBOB.companyid = p_companyid
					group by itemid ;
			
		END IF;
        
        RETURN @biredcost;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerconsumptionlivestock`(
    p_itemid INT,
	p_warehousebinid INT,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    towarehousebinid = p_warehousebinid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    towarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    fromwarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
    fromwarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    towarehousebinid = p_warehousebinid;
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerdaily_consumption_cost`(
 p_layerbatchid INT(11),
 p_placementdate DATE,
 p_transactiondate DATE
 ) RETURNS decimal(20,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @consumptioncost = 0;
    SET @ageinweek =0;
	SET @transactiondate = null;
    
	SELECT ((DATEDIFF(p_transactiondate,p_placementdate))/7) INTO @ageinweeks;
      if(@ageinweeks > 19)THEN
      
      SELECT date_add(p_placementdate,INTERVAL 133 DAY) INTO @transactiondate;
      else
      
       SELECT p_transactiondate INTO @transactiondate;
       
	  END IF;
      
 IF EXISTS(SELECT id FROM layerbatchplacement WHERE layerbatchid = p_layerbatchid AND id IS NOT NULL) THEN
	 SELECT IFNULL((SUM(LDTD.itemvalue)), 0) into @consumptioncost
     
     FROM
     layerdailytransaction LDT
     
    LEFT JOIN layerdailyconsumption LDTD ON LDT.id = LDTD.layerdailytransactionid 
    
    WHERE LDT.layerbatchid = p_layerbatchid  AND
		LDT.transactiondate >= p_placementdate AND
         LDT.transactiondate < @transactiondate;
					
	ELSE
		          
		SET @balancecost = null;
        SET @dailycost = null;
        
		SELECT IFNULL((consumptionvalue), 0) INTO @balancecost
		FROM layer_batchopening_balance LBOB
		INNER JOIN layer_batchfinancialopening_detail LBOD  ON LBOB.id = LBOD.layerbatchopeningid
		WHERE  LBOB.layerbatchid = p_layerbatchid;
        
        SELECT IFNULL((SUM(LDTD.itemvalue)), 0) into @dailycost
     
		FROM layerdailytransaction LDT
     
        LEFT JOIN layerdailyconsumption LDTD ON LDT.id = LDTD.layerdailytransactionid 
    
        WHERE LDT.layerbatchid = p_layerbatchid AND
				LDT.transactiondate >= p_placementdate AND
				LDT.transactiondate < @transactiondate;
				
        SELECT(@balancecost + @dailycost) INTO @consumptioncost;
		
        
	END IF;
	-- transactiondate BETWEEN p_placementdate AND p_transactiondate;
    
        RETURN @consumptioncost;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layerfeedopeningbalance`(
	p_transactiondate Date,
    p_shedid INT,
    p_itemid INT(11),
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    SET @p_itemopningqty = 0;
    
	SELECT GROUP_CONCAT(warehousebinid) INTO @warehousebinids
	FROM layershed
    WHERE id =  p_shedid;
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    itemid = p_itemid AND
    towarehousebinid= @warehousebinids;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    towarehousebinid = @warehousebinids;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    fromwarehousebinid =  @warehousebinids;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
    fromwarehousebinid =  @warehousebinids;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
     itemid = p_itemid AND
    towarehousebinid =  @warehousebinids;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_itemopningqty
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 685 AND
     itemid = p_itemid AND
    towarehousebinid =  @warehousebinids;
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity+ @p_itemopningqty) - (@p_issuequantity + @p_transferoutquantity);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layer_batchwise_cullsandmortality`(
	p_batchid INT,
    p_itemid INT,
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	 SET @@sql_mode = '';
	SET @quantity = 0;
    SET @placementdate = NOW();
    
   SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @placementdate;
     
     
	SELECT IFNULL(SUM(todaymortality),0) + IFNULL(SUM(todayculls),0) INTO @quantity
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_batchid AND 
         LDM.itemid = p_itemid AND
         (LDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN IFNULL(@quantity,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layer_biologicalvalue`(
    p_layerbatchid INT,
    p_transactiondate DATE,
    p_placementdate DATE,
    p_companyid INT
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @femalecost = null;
    SET @femaleqty = null;
    SET @consumptioncost = null;
    SET @billogicalvalue = null;
    SET @defaultfemalechickid = null;
    SET @overheadexp = null;
    SET @goodsissuecost = 0;
    
    SELECT 
			LB.itemid
			INTO 
             @defaultfemalechickid
		FROM 
			layerbatch LB 
		where LB.id = p_layerbatchid
		LIMIT 1;
   
   SELECT       fnc_layerdaily_consumption_cost(LDT.layerbatchid,p_placementdate,p_transactiondate),
                 fnc_layerchicks_purchasecost(LDT.layerbatchid,p_companyid,@defaultfemalechickid),
			     fnc_layerchicks_placementqty(LDT.layerbatchid,p_companyid,@defaultfemalechickid) INTO
                 @consumptioncost,@femalecost, @femaleqty
    
     
     FROM
     layerdailytransaction LDT
     
    LEFT JOIN layerdailyconsumption LDTD ON LDT.id = LDTD.layerdailytransactionid 
    
   WHERE LDT.layerbatchid = p_layerbatchid AND
		 LDT.transactiondate >= p_placementdate AND
         LDT.transactiondate <= p_transactiondate
         
         group by LDT.layerbatchid;
         
        SELECT (@femalecost*@femaleqty) INTO @purvalue;
        SELECT fun_overhed_exp(p_layerbatchid,725,p_transactiondate,p_companyid) INTO @overheadexp;
		SELECT fnc_getgoodsissue(p_layerbatchid,725,p_transactiondate) INTO @goodsissuecost;
        SELECT (@purvalue + @consumptioncost+@overheadexp + @goodsissuecost) INTO @billogicalvalue;
        
         RETURN @billogicalvalue;
         
       
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layer_getlasttransactiondate`(
	p_batchid INT
) RETURNS date
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @transactiondate = null;
SET @collectiondate = null;
SET @livebatchdate= null;

	SELECT 
			LT.transactiondate
			INTO 
            @transactiondate
		FROM 
			layerdailytransaction LT
		WHERE LT.layerbatchid = p_batchid
        ORDER BY LT.id DESC
		LIMIT 1;
        
        SELECT 
			LEC.collectiondate
			INTO 
            @collectiondate
		FROM 
			layereggscollection LEC
		WHERE LEC.layerbatchid = p_batchid
        ORDER BY LEC.id DESC
		LIMIT 1;
       
       IF(@collectiondate IS NOT null) then
		   IF(@transactiondate>@collectiondate)THEN
			
				SELECT @transactiondate INTO @livebatchdate;
				
			ELSE
				SELECT @collectiondate INTO @livebatchdate;
				
			END IF;
			ELSE
			SELECT @transactiondate INTO @livebatchdate;
            if(@livebatchdate IS NULL)then
				SET @livebatchdate = now();
                end if;
        END IF;

RETURN @livebatchdate;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layer_getweekwise_std_body_weight`(
  p_item_id INT(11),
  p_age_in_week INT(11)
  
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @weeklybodyweight = 0;
	SELECT IFNULL(SUM(LSTD.weeklybodyweight),0) INTO @weeklybodyweight
    FROM 
     layerfeedstandard LST 
     LEFT JOIN layerfeedstandarddetail LSTD ON LSTD.layerfeedstandardid = LST.id AND weeknumber= p_age_in_week
     WHERE LST.layeritemid = p_item_id;
               
					
RETURN @weeklybodyweight;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_layer_getweekwise_std_feed`(
  p_item_id INT(11),
  p_age_in_week INT(11)
  
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @consumptionqty = 0;
	SELECT IFNULL(SUM(LSTD.feedconsumed),0) INTO @consumptionqty
    FROM 
     layerfeedstandard LST 
     LEFT JOIN layerfeedstandarddetail LSTD ON LSTD.layerfeedstandardid = LST.id AND weeknumber= p_age_in_week
     WHERE LST.layeritemid = p_item_id;
               
					
RETURN @consumptionqty;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_ledgerbalance`(
	p_id INT(11),
    p_todate DATE,
    p_type VARCHAR(100)
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @ledgerbalance = null;
    
    if(p_type = 'credit') THEN
    
		SELECT (select REPLACE(cast(IFNULL(SUM(JED.cramount),0) as CHAR(100)), '-', ''))
		INTO @ledgerbalance
		FROM journalentry JE
		LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
		LEFT JOIN chartofaccount COA ON COA.id = JED.acledgerid
		WHERE JE.voucherdate = p_todate
		AND COA.id = p_id
        
        group by JED.acledgerid;

	else
    
		SELECT IFNULL(SUM(JED.dramount),0)
		INTO @ledgerbalance
		FROM journalentry JE
		LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
		LEFT JOIN chartofaccount COA ON COA.id = JED.acledgerid
		WHERE JE.voucherdate = p_todate
		AND COA.id = p_id
        
        group by JED.acledgerid;
    
    end if;
RETURN (select REPLACE(cast(@ledgerbalance as CHAR(100)), '-', ''));
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_linewise_chickslivestock`(
	p_shedlineid INT,
    p_itemid INT,
    p_breederdailytransactionid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
    SET @p_quantity = 0;
    SET @p_breederbatchid = null;
    SET @p_shedid = null;
    
	/*SET @p_quantity = 0;
    SET @p_mortality = 0;
	SET @p_culls = 0;
    SET @p_breederbatchplacementid = 0;

    
    SELECT BBP.id into @p_breederbatchplacementid
    FROM breederdailytransaction BDT
    LEFT JOIN breederbatchplacement BBP ON BDT.breederbatchid = BBP.breederbatchid
    WHERE BDT.id = p_breederdailytransactionid LIMIT 1;
    
    
     SELECT quantity INTO @p_quantity
     FROM breederbatchplacementdetail 
     WHERE
        breederbatchplacementid = @p_breederbatchplacementid AND
		breedershedpenid = p_shedlineid AND
        itemid = p_itemid LIMIT 1;
        
	 SELECT totalmortality, totalculls INTO @p_mortality, @p_culls
     FROM breederdailymortality
     WHERE
     shedlineid = p_shedlineid AND
     itemid = p_itemid AND
     breederdailytransactionid = p_breederdailytransactionid LIMIT 1;
     
   RETURN (IFNULL(@p_quantity, 0) - (IFNULL(@p_mortality, 0) + IFNULL(@p_culls, 0)));
   */
   
	SELECT breederbatchid, shedid into @p_breederbatchid, @p_shedid
    FROM breederdailytransaction 
    WHERE id = p_breederdailytransactionid;
   
   SELECT quantity INTO @p_quantity 
   FROM breederbatchbalance
   WHERE
      breederbatchid = @p_breederbatchid
      AND breedershedid = @p_shedid
      AND breedershedpenid = p_shedlineid
      AND itemid = p_itemid
      AND quantity != 0;
      
      
	RETURN IFNULL(@p_quantity, 0);
    
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_linewise_chicksplacedtock`(
	p_shedlineid INT,
    p_itemid INT,
    p_breederdailytransactionid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_quantity = 0;
    SET @p_breederbatchplacementid = 0;

    SELECT BBP.id into @p_breederbatchplacementid
    FROM breederdailytransaction BDT
    LEFT JOIN breederbatchplacement BBP ON BDT.breederbatchid = BBP.breederbatchid
    WHERE BDT.id = p_breederdailytransactionid LIMIT 1;
    
     SELECT quantity INTO @p_quantity
     FROM breederbatchplacementdetail 
     WHERE
        breederbatchplacementid = @p_breederbatchplacementid AND
		breedershedpenid = p_shedlineid AND
        itemid = p_itemid LIMIT 1;
        
     
   RETURN IFNULL(@p_quantity, 0);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_linewise_layer_chickslivestock`(
	p_shedlineid INT,
    p_itemid INT,
    p_layerdailytransactionid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
    SET @p_quantity = 0;
    SET @p_layerbatchid = null;
    SET @p_shedid = null;
    

   
	SELECT layerbatchid, shedid into @p_layerbatchid, @p_shedid
    FROM layerdailytransaction 
    WHERE id = p_layerdailytransactionid;
   
   SELECT quantity INTO @p_quantity 
   FROM layerbatchbalance
   WHERE
      layerbatchid = @p_layerbatchid
      AND layershedid = @p_shedid
      AND layershedlineid = p_shedlineid
      AND itemid = p_itemid
      AND quantity != 0;
      
      
	RETURN IFNULL(@p_quantity, 0);
    
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_lyr_batchopningbalance`(
	p_layerbatchid INT,
    p_shedids VARCHAR(300),
    p_itemid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @btachopeningbalance = 0;
    
     
		SELECT IFNULL(SUM(LBPD.quantity),0) INTO @btachopeningbalance
        from layerbatchplacementdetail LBPD
        LEFT JOIN layerbatchplacement LBP ON LBP.id = LBPD.layerbatchplacementid
        
        where
           LBP.layerbatchid = p_layerbatchid
           AND FIND_IN_SET(LBPD.layershedid,p_shedids)
           AND LBPD.itemid = p_itemid LIMIT 1;

   
	RETURN @openingbalance;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_lyr_batchwise_malefemaleopbal_tillgivendate`(
	p_layerbatchid INT,
    p_shedid INT,
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @totalcullsandmortality = 0;
    SET @transferedquantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
    
    
	-- calculate total culla and mortality for given batch before p_todate
    
	SELECT SUM(todaymortality) + SUM(todayculls) +SUM(sexingerrorquantity)INTO @totalcullsandmortality
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid AND
         LDT.shedid = p_shedid AND 
         LDM.itemid = p_itemid AND
         LDT.transactiondate >= @placementdate AND
         LDT.transactiondate < p_todate;
  
  
	-- calculate transfered male/female quantity befor p_todate
    
	SELECT 			
		SUM(LBTD.quantity) INTO @transferedquantity
                      
	FROM layerbatchtransferdetail LBTD
		 LEFT JOIN layerbatchtransfer LBT ON LBT.id = LBTD.layerbatchtransferid
							
	WHERE 
		LBT.layerbatchid = p_layerbatchid AND
		LBT.fromshedid = p_shedid AND
        LBTD.itemid = p_itemid AND
		LBT.transferdate < p_todate;
        
    
    -- calculate batch opening balance (placed quantity)
    
    SELECT IFNULL(SUM(LBPD.quantity),0) INTO @openingbalance
        from layerbatchplacementdetail LBPD
        LEFT JOIN layerbatchplacement LBP ON LBP.id = LBPD.layerbatchplacementid
        
        where
           LBP.layerbatchid = p_layerbatchid
           AND LBPD.layershedid = p_shedid
           AND LBPD.itemid = p_itemid LIMIT 1;
    
    
	RETURN IFNULL(@openingbalance,0) - IFNULL(@totalcullsandmortality, 0) - IFNULL(@transferedquantity, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_lyr_batch_wise_cummulative_feed`(
    p_layerbatchid INT,
	p_itemid INT(11),
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    SET @openingquantity = 0;
  
       SELECT fnc_getlayerplacementdate(p_layerbatchid,p_companyid) INTO @placementdate;
     
	 SELECT IFNULL(SUM(consumptionquantity), 0) into @quantity
    FROM
		layerdailyconsumption LDC
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDC.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid AND
		 LDC.consumptiontypeid = 1149 AND
		 itemid = p_itemid AND
         (LDT.transactiondate BETWEEN  @placementdate AND p_todate);
         
 SELECT 
	IFNULL(SUM(LBL.quantity),0) INTO @openingquantity
	FROM layer_batchopening_balance LBO 
	LEFT JOIN layer_batchconsumptionopening_detail LBL ON LBL.layerbatchopeningid = LBO.id 
    
    WHERE 
	LBO.layerbatchid = p_layerbatchid AND
	LBL.consumptiontypeid = 1149 AND
    LBL.consumptionitemid = p_itemid 
    group by LBO.layerbatchid;
         
   

RETURN (@quantity+@openingquantity);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_lyr_batch_wise_feed`(
    p_layerbatchid INT,
	p_itemid INT(11),
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
     
	 SELECT IFNULL(SUM(consumptionquantity), 0) into @quantity
    FROM
		layerdailyconsumption LDC
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDC.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid AND
		 LDC.consumptiontypeid = 1149 AND
		 itemid = p_itemid AND
         LDT.transactiondate = p_todate;
   

RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_lyr_batch_wise__feed`(
    p_layerbatchid INT,
	p_itemid INT(11),
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
     
	 SELECT IFNULL(SUM(consumptionquantity), 0) into @quantity
    FROM
		layerdailyconsumption LDC
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDC.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid AND
		 LDC.consumptiontypeid = 1149 AND
		 itemid = p_itemid AND
         LDT.transactiondate = p_todate;
   

RETURN @quantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_lyr_cummulativefeed`(
    p_layerbatchid INT,
	p_itemid INT(11),
    p_shedid VARCHAR(200),
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    SET @openingquantity = 0;
  
       SELECT fnc_getlayerplacementdate(p_layerbatchid,p_companyid) INTO @placementdate;
     
	 SELECT IFNULL(SUM(consumptionquantity), 0) into @quantity
    FROM
		layerdailyconsumption LDC
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDC.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid AND
        FIND_IN_SET( LDT.shedid, p_shedid) AND
		 LDC.consumptiontypeid = 1149 AND
		 itemid = p_itemid AND
         (LDT.transactiondate BETWEEN  @placementdate AND p_todate);
         
 SELECT 
	IFNULL(SUM(LBL.quantity),0) INTO @openingquantity
	FROM layer_batchopening_balance LBO 
	LEFT JOIN layer_batchconsumptionopening_detail LBL ON LBL.layerbatchopeningid = LBO.id 
    
    WHERE 
	LBO.layerbatchid = p_layerbatchid AND
	LBL.consumptiontypeid = 1149 AND
    LBL.consumptionitemid = p_itemid 
    group by LBO.layerbatchid;
         
   

RETURN (@quantity+@openingquantity);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_lyr_cummulative_feed`(
    p_layerbatchid INT,
	p_itemid INT(11),
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    SET @openingquantity = 0;
  
       SELECT fnc_getlayerplacementdate(p_layerbatchid,p_companyid) INTO @placementdate;
     
	 SELECT IFNULL(SUM(consumptionquantity), 0) into @quantity
    FROM
		layerdailyconsumption LDC
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDC.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid AND
		 LDC.consumptiontypeid = 1149 AND
		 itemid = p_itemid AND
         (LDT.transactiondate BETWEEN  @placementdate AND p_todate);
         
 SELECT 
	IFNULL(SUM(LBL.quantity),0) INTO @openingquantity
	FROM layer_batchopening_balance LBO 
	LEFT JOIN layer_batchconsumptionopening_detail LBL ON LBL.layerbatchopeningid = LBO.id 
    
    WHERE 
	LBO.layerbatchid = p_layerbatchid AND
	LBL.consumptiontypeid = 1149 AND
    LBL.consumptionitemid = p_itemid 
    group by LBO.layerbatchid;
         
   

RETURN (@quantity+@openingquantity);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_lyr_cummulative_femaleculls`(
    p_layerbatchid INT,
    p_shedids varchar(200) ,
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @cumucullsquantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
     
     
     SELECT IFNULL(SUM(todayculls), 0) into @cumucullsquantity
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid 
         AND FIND_IN_SET(LDT.shedid,p_shedids) AND
         -- BDT.shedid = p_shedid AND 
         LDM.itemid = p_itemid AND
         (LDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @cumucullsquantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_lyr_cummulative_femalemortality`(
    p_layerbatchid INT,
    p_shedids VARCHAR(200),
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @cumumprtalityquantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
     
     
     SELECT IFNULL(SUM(todaymortality), 0) into @cumumprtalityquantity
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid AND
        FIND_IN_SET(LDT.shedid,p_shedids) AND
         LDM.itemid = p_itemid AND
         (LDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @cumumprtalityquantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_lyr_cummulative_femalesexingerror`(
    p_layerbatchid INT,
    p_shedids varchar(200) ,
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @cumusexingerrorquantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
     

	SELECT IFNULL( SUM(sexingerrorquantity), 0) into @cumusexingerrorquantity
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid 
         AND FIND_IN_SET(LDT.shedid,p_shedids) AND
         -- BDT.shedid = p_shedid AND 
         LDM.itemid = p_itemid AND
         (LDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @cumusexingerrorquantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_lyr_femaleculls_ongivendate`(
	p_layerdailytransactionid INT,
    p_itemid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @todayculls = 0;
       
	SELECT SUM(todayculls) INTO @todayculls
    FROM
		layerdailymortality 
	WHERE
		layerdailytransactionid = p_layerdailytransactionid AND
		itemid = p_itemid;
      
	RETURN IFNULL(@todayculls, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_lyr_femalemortality_ongivendate`(
	p_layerdailytransactionid INT,
    p_itemid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @todaymortality = 0;
       
	SELECT SUM(todaymortality) INTO @todaymortality
    FROM
		layerdailymortality 
	WHERE
		layerdailytransactionid = p_layerdailytransactionid AND
		itemid = p_itemid;
      
	RETURN IFNULL(@todaymortality, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_lyr_femalesexingerror_ongivendate`(
	p_layerdailytransactionid INT,
    p_itemid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @sexingerrorqty = 0;
       
	SELECT SUM(sexingerrorquantity) INTO @sexingerrorqty
    FROM
		layerdailymortality 
	WHERE
		layerdailytransactionid = p_layerdailytransactionid AND
		itemid = p_itemid;
      
	RETURN IFNULL(@sexingerrorqty, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_lyr_female_transferedquantity`(
	p_layerbatchid INT,
    p_shedid varchar(200),
    p_itemid INT,
    p_transferdate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @transferedquantity = 0;
    
	 SELECT 			
			SUM(LBTD.quantity) INTO @transferedquantity
                      
	FROM layerbatchtransferdetail LBTD
	LEFT JOIN layerbatchtransfer LBT ON LBT.id = LBTD.layerbatchtransferid
							
	WHERE 
		LBT.layerbatchid = p_layerbatchid AND
		LBT.fromshedid = p_shedid AND
        LBTD.itemid = p_itemid AND
		LBT.transferdate = p_transferdate;
                        
RETURN IFNULL(@transferedquantity, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_mortalitydeduction`(
	p_totalmortalitypercent DECIMAL(9,3),
    p_FWmortalitypercent DECIMAL(9,3),
	p_cbf_batchid INT
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @mortalitydeduction = 0;
    SET @mortalitypercentage = 0;
    SET @firstweekmortalityper = 0;
    SET @placeqty = 0;
    SET @placementdate = null;
    SET @chickcost = 0;
    SET @avgweight = 0;
    
    SELECT CB.batch_place_date, CS.mortalitypercentage, CS.firstweekmortalityper, CP.chick_qty, CS.chickcost, CB.body_weight
    INTO @placementdate, @mortalitypercentage, @firstweekmortalityper, @placeqty, @chickcost, @avgweight
    FROM coststructure CS 
    LEFT JOIN cbf_batch_details CB ON CB.scheme_id = CS.id
    LEFT JOIN cbf_chick_placement CP ON CP.batch_id = CB.id
    WHERE CB.id = p_cbf_batchid;
    
    IF(p_totalmortalitypercent > @mortalitypercentage)THEN
    
		SET @fwmortalitydeduction = 0;
		SET @mortalitypercent = 0;
        SET @mortalityqty = 0;
		IF(p_FWmortalitypercent > @firstweekmortalityper)THEN
			
            BEGIN
				SELECT (IFNULL(fnc_cbffirstweekmortality(@placementdate, p_cbf_batchid),0) - (@placeqty * (@firstweekmortalityper / 100))) * @chickcost INTO @fwmortalitydeduction;
                SELECT (p_totalmortalitypercent - p_FWmortalitypercent - (@mortalitypercentage - @firstweekmortalityper)) INTO @mortalitypercent;
                
                IF(@mortalitypercent > 0)THEN
                    
                    BEGIN
						
                        SELECT (@placeqty * (@mortalitypercent / 100)) INTO @mortalityqty;
                        SELECT (@mortalityqty * @avgweight * @chickcost) INTO @mortalitydeduction;
                        
                    END;
                END IF;
            END;
        ELSE
        
			SET @qty = 0;
            SET @perqty = 0;
			SELECT (p_totalmortalitypercent - p_FWmortalitypercent) INTO @qty;
            
            SELECT @placeqty * ((@mortalitypercentage - @firstweekmortalityper) / 100) INTO @perqty;
            
			SELECT (@qty - @perqty) INTO @mortalityqty;
            
            SELECT (@mortalityqty * @avgweight * @chickcost) INTO @mortalitydeduction;
        END IF;
        
	END IF;
    
    

RETURN @mortalitydeduction;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_mortalityincentive`(
	p_totalmortalitypercent DECIMAL(9,3),
	p_cbf_batchid INT
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
    
	SET @mortalityincentive = 0;
    SET @mortalitypercentage = 0;
    SET @placeqty = 0;
    SET @birdincentiveperbird = 0;
    
    SELECT CS.cummulativeper, CP.chick_qty, CS.birdincentiveperbird
    INTO @mortalitypercentage, @placeqty, @birdincentiveperbird
    FROM coststructure CS 
    LEFT JOIN cbf_batch_details CB ON CB.scheme_id = CS.id
    LEFT JOIN cbf_chick_placement CP ON CP.batch_id = CB.id
    WHERE CB.id = p_cbf_batchid;
    
   IF(p_totalmortalitypercent < @mortalitypercentage)THEN
    -- IF(2.33 < 5)THEN
		
        SELECT IFNULL(((@placeqty * ((@mortalitypercentage - p_totalmortalitypercent) / 100)) * @birdincentiveperbird),0) INTO @mortalityincentive;
        -- SELECT IFNULL(((1800 * ((5 - 2.33) / 100)) * 7),0) INTO @mortalityincentive;
    END IF;

RETURN  @mortalityincentive;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_openingcreditdebitbal`(
	p_partyid INT(11),
    p_acledgerid INT(11),
    p_fromdate DATE,
    p_type VARCHAR(100)
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @@sql_mode = '';
	SET @openingcreditdebitbal = null;
    
    
    IF(p_type = 'credit') THEN
        
		SELECT (select REPLACE(cast(IFNULL(SUM(JED.cramount),0) as CHAR(100)), '-', '')) INTO @openingcreditdebitbal
		FROM journalentry JE
		LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
		WHERE JE.voucherdate < p_fromdate
		AND JED.acledgerid = p_acledgerid
		AND JE.partyid = p_partyid
        GROUP BY JED.acledgerid;
    
    ELSE  
        
        SELECT IFNULL(SUM(JED.dramount),0) INTO @openingcreditdebitbal
		FROM journalentry JE
		LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
		WHERE JE.voucherdate < p_fromdate
		AND JED.acledgerid = p_acledgerid
		AND JE.partyid = p_partyid
        GROUP BY JED.acledgerid;
    
    END IF;
    
    
RETURN IFNULL((select REPLACE(cast(@openingcreditdebitbal as CHAR(100)), '-', '')),0);

-- @openingcreditdebitbal;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_openingcreditdebitbalforledger`(
	p_acledgerid varchar(16383),
    p_fromdate DATE,
    p_type VARCHAR(100)
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @@sql_mode = '';
	SET @openingcreditdebitbal = null;
	-- SET @openingcreditdebitbaltwo = null;

    
    
    IF(p_type = 'credit') THEN
        
		SELECT (select REPLACE(cast(IFNULL(SUM(JED.cramount),0) as CHAR(100)), '-', '')) INTO @openingcreditdebitbal
		FROM journalentry JE
		LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
		WHERE JE.voucherdate < p_fromdate
		AND JED.acledgerid = p_acledgerid; 
       -- AND  FIND_IN_SET( JE.partyid, p_partyid)
       -- GROUP BY JE.partyid;
    
    ELSE  
        
        SELECT IFNULL(SUM(JED.dramount),0) INTO @openingcreditdebitbal
		FROM journalentry JE
		LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
		WHERE JE.voucherdate < p_fromdate
		AND JED.acledgerid = p_acledgerid;
       -- AND  FIND_IN_SET( JE.partyid, p_partyid)
       -- GROUP BY JE.partyid;
        -- 
    
    END IF;
    
    
 RETURN IFNULL((select REPLACE(cast(@openingcreditdebitbal as CHAR(100)), '-', '')),0);

-- RETURN(@openingcreditdebitbaltwo - @openingcreditdebitbalone);
-- @openingcreditdebitbal;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_opening_breeder_hatching_eggs`(
 p_breederbatchid INT(11),
 p_companyid INT(11)
 ) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	 SET @@sql_mode = '';
     SET @hatching_eggs = NUll;
    
           
           SELECT ifnull(SUM(BMF.goodeggsqty),0) INTO @hatching_eggs
           FROM 
           breederbatchopening BBO
           LEFT JOIN breederbatchmalefemaleopeningdetail BMF ON BBO.id = BMF.breederbatchopeningid
           WHERE
           BBO.breederbatchid = p_breederbatchid AND BBO.companyid = p_companyid;
		
        
        RETURN IFNULL(@hatching_eggs,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_operate_forstock`(
  p_itemid varchar(255),
  p_warehousebinid VARCHAR(500),
  p_transactiondate DATE,
  p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
SET @p_openingrate= 0;
SET @p_issuerate= 0;

    
SELECT SUM(MM.itemvalue) INTO @p_openingrate

FROM materialmovement MM
LEFT JOIN item I ON I.id = MM.itemid
LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id

 WHERE 
	   FIND_IN_SET(MM.towarehousebinid,p_warehousebinid) AND
       FIND_IN_SET(MM.itemid,p_itemid)
	   AND FIND_IN_SET(MM.transactiontypeid,'681,682,685,684')
       AND MM.transactiondate < p_transactiondate 
       group by MM.itemid;    
       
  
/*SELECT IFNULL(SUM(MM.itemvalue), 0) into @p_inwardrate
    FROM materialmovement MM
     WHERE MM.transactiondate = p_transactiondate AND
     MM.transactiontypeid in(681, 682,684,685) AND
     MM.itemid = p_itemid AND
     MM.towarehousebinid =  p_warehousebinid
     GROUP BY MM.itemid;  */
     
     
        SELECT IFNULL(SUM(MM.itemvalue), 0) into @p_issuerate
    FROM materialmovement MM
    WHERE -- itembatch = p_itembatch AND
	MM.companyid = p_companyid AND
    MM.transactiontypeid in (682,683) AND
    MM.itemid = p_itemid AND
    MM.transactiondate < p_transactiondate AND
    FIND_IN_SET(MM.fromwarehousebinid, p_warehousebinid);
       
   RETURN (@p_openingrate - @p_issuerate);
   
   -- RETURN @p_openingrate;h
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_outardrate_forstock`(
  p_itemid varchar(255),
  p_warehousebinid VARCHAR(500),
  p_transactiondate DATE,
  p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
SET @p_outwardrate= 0;
SET @p_outward= 0;

    
SELECT SUM(MM.itemvalue) INTO @p_outwardrate

FROM materialmovement MM
LEFT JOIN item I ON I.id = MM.itemid
LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id

 WHERE 
	   FIND_IN_SET(MM.fromwarehousebinid,p_warehousebinid) AND
       FIND_IN_SET(MM.itemid,p_itemid)
	   AND FIND_IN_SET(transactiontypeid,'683,682')
       AND MM.transactiondate >= p_transactiondate 
       group by MM.itemid;    
       
    RETURN (@p_outwardrate);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_outstock_shed`(
  p_itemid varchar(255),
  p_warehousebinid INT(11),
  p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
SET @p_inward= 0;
SET @p_outward= 0;

    
SELECT SUM(MM.quantity) INTO @p_outward

FROM materialmovement MM
LEFT JOIN item I ON I.id = MM.itemid
LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id

 WHERE 
	   FIND_IN_SET(MM.fromwarehousebinid,p_warehousebinid) AND
       FIND_IN_SET(MM.itemid,p_itemid)
	   AND FIND_IN_SET(transactiontypeid,'682,683')
       AND MM.transactiondate >= CURDATE() 
       group by MM.itemid;    
       
    RETURN (@p_outward);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_partnerrole_select`(
	p_partnerid INT
) RETURNS varchar(1000) CHARSET utf8
    READS SQL DATA
    DETERMINISTIC
BEGIN

	RETURN (SELECT GROUP_CONCAT(id) FROM partnerrole WHERE partnerid = p_partnerid);
	
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_phaseby_week`(
	p_week INT
    ) RETURNS varchar(45) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @breederphase = NUll;

SELECT phasename INTO @breederphase
  FROM breederphase
   WHERE fromweek <= p_week
   AND toweek >= p_week;
RETURN @breederphase;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_profitandloss`(
	p_fromdate DATE,
	p_todate DATE,
    p_acledgerid INT(11)
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @@sql_mode = ' '; 
	SET @openingbal = null;
    SET @cramount = null;
    SET @dramount = null;
    
    SELECT (select REPLACE(cast(IFNULL(SUM(JED.cramount),0) as CHAR(100)), '-', '')), IFNULL(SUM(JED.dramount),0)
    INTO @cramount, @dramount
    FROM journalentry JE
    LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    WHERE JE.voucherdate BETWEEN p_fromdate AND p_todate
    AND JED.acledgerid = p_acledgerid;
    
    SELECT ((IFNULL(LOB.openingbalance,0) + @dramount) - @cramount) INTO @openingbal
		
	FROM ledgeropeningbalance LOB
	LEFT JOIN journalentrydetail JED ON JED.acledgerid = LOB.ledgerid
	
	WHERE LOB.ledgerid = JED.acledgerid
    AND JED.acledgerid = p_acledgerid
	AND openingbalancedate BETWEEN p_fromdate AND p_todate
	group by JED.acledgerid;

RETURN (select REPLACE(cast(@openingbal as CHAR(100)), '-', ''));
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_purchaseorder_remainingquantity`(
	p_id INT(11),
    p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	 SET @remainingquantity = 0;
     SET @qty = NULL;
    
	IF EXISTS(SELECT IFNULL(SUM(quantity),0)
		
			FROM grpodetail GD
			LEFT JOIN grpo G ON G.id = GD.grpoid
			WHERE G.purchaseorderid = p_id
			AND GD.companyid = p_companyid) THEN
			
			BEGIN
				SELECT IFNULL(SUM(quantity),0) INTO @qty
			
				FROM grpodetail GD
				LEFT JOIN grpo G ON G.id = GD.grpoid
				WHERE G.purchaseorderid = p_id
				AND GD.companyid = p_companyid;
			END;
		
		ELSE
			SELECT 0 INTO @qty;
		END IF;
    
    SELECT 
		SUM(quantity) - @qty
			
		INTO @remainingquantity
    FROM purchaseorderdetail 
    
    WHERE purchaseorderid = p_id
            AND companyid = p_companyid;
RETURN @remainingquantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_purchase_overdue_amount`(
 p_start_date DATE,
 p_to_date DATE ) RETURNS decimal(15,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
    SET @pi_amount = 0;
	SELECT sum(subtotal) INTO @pi_amount FROM purchaseinvoice WHERE pendingtotal != 0 AND duedate >= p_start_date AND duedate <= p_to_date;

RETURN @pi_amount;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_purchase_overdue_count`(
 p_start_date DATE,
 p_to_date DATE ) RETURNS bigint(20)
    READS SQL DATA
    DETERMINISTIC
BEGIN
    SET @pi_count= 0;
	SELECT count(*) INTO @pi_count FROM purchaseinvoice WHERE pendingtotal != 0 AND duedate >= p_start_date AND duedate <= p_to_date;

RETURN @pi_count;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_salesinvoice_getstatecode`(
	p_salesdeliveryids VARCHAR(200)
) RETURNS varchar(200) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @warehousebinid = 0, @statecode = '';

	SELECT tblWH.warehousebinid, ST.statecode INTO @warehousebinid, @statecode FROM (
		SELECT 
			warehousebinid
		FROM
			salesdeliverydetail 
		WHERE 
			FIND_IN_SET(id, p_salesdeliveryids) LIMIT 1
	) 
    AS tblWH    
    LEFT JOIN `warehousebin` WB ON WB.id = tblWH.warehousebinid
	LEFT JOIN `warehouse` WH ON WH.id = WB.warehouseid
	LEFT JOIN `state` ST ON ST.id = WH.stateid;

	RETURN @statecode;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_salesorder_hasdeliveryforinvoice`(
	p_salesorderid INT,
	p_companyid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @isExists  = 0;
    
    
		SELECT 
			COUNT(*) INTO @isExists
		FROM
			salesdelivery SOD
            
		LEFT JOIN salesinvoice SI ON FIND_IN_SET(SOD.id, SI.salesdeliveryids)
        WHERE 
        
			SI.id IS NULL AND SOD.salesorderid = p_salesorderid;
	
    
RETURN @isExists;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_salesorder_hasorderquantity`(
	p_salesorderid INT,
	p_companyid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @isExists  = 0;
    
    SELECT CASE WHEN tmpSOqty.quantity > 0 THEN 1 ELSE 0 END INTO @isExists FROM 
    (
		SELECT 
			quantity - IFNULL(fnc_salesorder_itemdeliveredqty(itemid, id), 0) as quantity
		FROM
			salesorderdetail SOD
		WHERE
			salesorderid = p_salesorderid and SOD.companyid = p_companyid
	) 
     AS tmpSOqty
     
    WHERE tmpSOqty.quantity > 0 LIMIT 1;
    
RETURN @isExists;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_salesorder_itemdeliveredqty`(
	p_itemid INT,
	p_salesorderdetailid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @sumqty  = 0;
    
    SELECT qty INTO @sumqty FROM (
		SELECT SUM(quantity) as qty FROM salesdeliverydetail
		WHERE salesorderdetailid = p_salesorderdetailid 
			AND itemid = p_itemid
	) 
    AS tblsumqty;

RETURN @sumqty;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_salesorder_itemdeliveredweight`(
	p_itemid INT,
	p_salesorderdetailid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @sumweight  = 0;
    
    SELECT qty INTO @sumweight FROM (
		SELECT SUM(IFNULL(weight, 0)) as qty FROM salesdeliverydetail
		WHERE salesorderdetailid = p_salesorderdetailid 
			AND itemid = p_itemid
	) 
    AS tblsumqty;

RETURN @sumweight;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_sales_overdue_amount`(
 p_start_date DATE,
 p_to_date DATE ) RETURNS decimal(15,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
    SET @sales_invoice_amount = 0;
	SELECT sum(grandtotal) INTO @sales_invoice_amount FROM salesinvoice WHERE pendingtotal != 0 AND deliverydate >= p_start_date AND deliverydate <= p_to_date;

RETURN @sales_invoice_amount;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_sales_overdue_invoice_count`(
 p_start_date DATE,
 p_to_date DATE ) RETURNS bigint(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
    SET @sales_invoice_count = 0;
	SELECT count(*) INTO @sales_invoice_count FROM salesinvoice WHERE deliverydate >= p_start_date AND deliverydate <= p_to_date AND pendingtotal != 0;

RETURN @sales_invoice_count;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_shedqty`(
	p_shedid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @shedqty = 0;
    
    if Exists(select * from breederbatchtransferdetail where toshedid = p_shedid) then
		select SUM(quantity) INTO @shedqty from breederbatchtransferdetail 
        where toshedid = p_shedid;
	else
		select SUM(quantity) INTO @shedqty from breederbatchplacementdetail
        where breedershedid = p_shedid;
    end if;

RETURN shedqty;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_shedwise_chickslivestock`(
	p_shedid INT,
    p_itemid INT,
    p_cbfdailytransactionid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
    SET @p_quantity = 0;
    SET @p_cbf_batchid = null;
    SET @p_shedid = null;
    
	/*SET @p_quantity = 0;
    SET @p_mortality = 0;
	SET @p_culls = 0;
    SET @p_breederbatchplacementid = 0;

    
    SELECT BBP.id into @p_breederbatchplacementid
    FROM breederdailytransaction BDT
    LEFT JOIN breederbatchplacement BBP ON BDT.breederbatchid = BBP.breederbatchid
    WHERE BDT.id = p_breederdailytransactionid LIMIT 1;
    
    
     SELECT quantity INTO @p_quantity
     FROM breederbatchplacementdetail 
     WHERE
        breederbatchplacementid = @p_breederbatchplacementid AND
		breedershedpenid = p_shedlineid AND
        itemid = p_itemid LIMIT 1;
        
	 SELECT totalmortality, totalculls INTO @p_mortality, @p_culls
     FROM breederdailymortality
     WHERE
     shedlineid = p_shedlineid AND
     itemid = p_itemid AND
     breederdailytransactionid = p_breederdailytransactionid LIMIT 1;
     
   RETURN (IFNULL(@p_quantity, 0) - (IFNULL(@p_mortality, 0) + IFNULL(@p_culls, 0)));
   */
   
	SELECT cbf_batchid into @p_cbf_batchid
    FROM cbf_dailytransaction 
    WHERE id = p_cbfdailytransactionid;
   
   SELECT live_batch_qty INTO @p_quantity 
   FROM cbf_batch_details CB
   LEFT JOIN cbf_procurementscheduledetail CPSD ON CPSD.batchid = CB.id
   WHERE
      CB.id = @p_cbf_batchid
      AND CPSD.cbfshedid = p_shedid
      AND CB.breed_id = p_itemid
      AND CB.live_batch_qty != 0;
      
      
	RETURN IFNULL(@p_quantity, 0);
    
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_slopeningcreditdebitbal`(
	p_partyid INT(11),
    p_fromdate DATE,
    p_type VARCHAR(100)
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingcreditdebitbal = null;
    
    IF(p_type = 'credit') THEN
        
			SELECT IFNULL(SUM(JED.cramount),0) INTO @openingcreditdebitbal
			FROM journalentry JE
			LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
			LEFT JOIN party P ON P.id = JED.partyid AND P.supplierledgerid = JED.acledgerid
			WHERE JE.voucherdate < p_fromdate AND P.id = p_partyid
            GROUP BY JED.partyid;
    
    ELSE  
        
			SELECT IFNULL(SUM(JED.dramount),0) INTO @openingcreditdebitbal
			FROM journalentry JE
			LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
            LEFT JOIN party P ON P.id = JED.partyid AND P.customerledgerid = JED.acledgerid
			WHERE JE.voucherdate < p_fromdate AND P.id = p_partyid
            GROUP BY JED.partyid;
    
    END IF;
    
    
RETURN IFNULL((select REPLACE(cast(@openingcreditdebitbal as CHAR(100)), '-', '')),0);

-- @openingcreditdebitbal;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_std_bodyweightcbf`(
 p_itemid INT(11),
 p_age INT(11),
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @bodyweight = 0;
    
		    SELECT IFNULL((SUM(CSCD.bodyweight)), 0) into @bodyweight
			FROM cbfstandardchart CSC
			LEFT JOIN cbfstandardchartdetail CSCD ON CSCD.cbfstandardchartid = CSC.id  
			WHERE CSC.breednameid = p_itemid AND
			CSCD.age = p_age ;
					
RETURN @bodyweight;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_std_fcr_cbf`(
 p_itemid INT(11),
 p_age INT(11),
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @fcr = 0;
    
		    SELECT IFNULL((SUM(CSCD.fcr)), 0) into @fcr
			FROM cbfstandardchart CSC
			LEFT JOIN cbfstandardchartdetail CSCD ON CSCD.cbfstandardchartid = CSC.id  
			WHERE CSC.breednameid = p_itemid AND
			CSCD.age = p_age ;
					
RETURN @fcr;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_std_feed_consumption`(
 p_batchid INT(11),
 p_transactiondate DATE,
 p_placementdate DATE,
 p_consumptiontypeid INT,
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @stdconsumptionqty = 0;
    
		    SELECT IFNULL((SUM(CDC.stdconsumption)), 0) into @stdconsumptionqty
			FROM cbf_dailyconsumption CDC
			LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDC.cbfdailytransactionid  AND CDC.consumptiontypeid = p_consumptiontypeid
			WHERE CDT.cbf_batchid = p_batchid AND
			CDT.transactiondate >= p_placementdate AND
			CDT.transactiondate <= p_transactiondate;
					
RETURN @stdconsumptionqty;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_std_feed_consumptioncbf`(
 p_itemid INT(11),
 p_age INT(11),
 p_companyid INT
 ) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	  SET @feedconsumption = 0;
    
		    SELECT IFNULL((SUM(CSCD.feedconsumption)), 0) into @feedconsumption
			FROM cbfstandardchart CSC
			LEFT JOIN cbfstandardchartdetail CSCD ON CSCD.cbfstandardchartid = CSC.id  
			WHERE CSC.breednameid = p_itemid AND
			CSCD.age = p_age ;
					
RETURN @feedconsumption;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_subscription_licenseused`(
	p_companysubscriptionid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @licenseused = 0;

	SELECT used INTO @licenseused FROM (
		SELECT COUNT(*) as used
		FROM userlicense 
		WHERE companysubscriptionid = p_companysubscriptionid
    ) AS licenseused;

RETURN @licenseused;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_supervisorallocation_employee`(
	p_lineid INT(11),
    p_companyid INT(11)
) RETURNS varchar(1000) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @employeename = null;    
  
    
    SELECT employeename INTO @employeename FROM (
    select 
    
	(SELECT GROUP_CONCAT(EP.employeename) FROM `employee` EP WHERE FIND_IN_SET(EP.id, IFNULL(BWS.empids,0))) AS employeename


    from cbf_branchwisesupervisordetail BWS
    LEFT JOIN employee E ON E.id = BWS.empids
    LEFT JOIN cbf_line L ON L.id = BWS.lineid
    
    where BWS.lineid = p_lineid
    AND BWS.companyid = p_companyid
    
    LIMIT 1
    ) TEMP;
    
    
RETURN @employeename;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_supervisorallocation_employee1`(
	p_lineid INT(11),
    p_companyid INT(11)
) RETURNS varchar(1000) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @employeename = null;    
   /* select empids INTO @empids 
    from cbf_branchwisesupervisordetail 
    where lineid = p_lineid;*/
    
    
   /* SELECT GROUP_CONCAT(employeename)  INTO @employeename
    FROM `employee` 
    WHERE 
    FIND_IN_SET(id, @empids);*/
    
    /*SELECT group_concat(employeename) INTO @employeename
    FROM `employee` 
    WHERE 
    FIND_IN_SET(id, @empids);*/
    
    
    SELECT employeename INTO @employeename FROM (
    select 
    
	(SELECT GROUP_CONCAT(EP.employeename) FROM `employee` EP WHERE FIND_IN_SET(EP.id, BWS.empids)) AS employeename


    from cbf_branchwisesupervisordetail BWS
    LEFT JOIN employee E ON E.id = BWS.empids
    LEFT JOIN cbf_line L ON L.id = BWS.lineid
    
    where BWS.lineid = p_lineid
    AND BWS.companyid = p_companyid
    ) TEMP;
    
    
RETURN 'TEST TEST';
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_taxes_byids`(
	p_taxids VARCHAR(200)
) RETURNS varchar(3000) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @taxnames = '';

	IF(NULLIF(p_taxids, '') IS NOT NULL) THEN

		SELECT 
			GROUP_CONCAT(P.taxname ORDER BY P.id SEPARATOR ',' ) INTO @taxnames 
		FROM 
			`tax` P WHERE FIND_IN_SET(id, p_taxids);
        
	END IF;

RETURN @taxnames;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_taxpercents_byids`(
	p_taxids VARCHAR(200)
) RETURNS varchar(3000) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @taxpercents = '';

	IF(NULLIF(p_taxids, '') IS NOT NULL) THEN

		SELECT 
			GROUP_CONCAT(P.taxpercent ORDER BY P.id SEPARATOR ',' ) INTO @taxpercents 
		FROM 
			`tax` P WHERE FIND_IN_SET(id, p_taxids);
        
	END IF;

RETURN @taxpercents;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_taxtypes_byids`(
	p_taxids VARCHAR(200)
) RETURNS varchar(3000) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @taxtypes = '';

	IF(NULLIF(p_taxids, '') IS NOT NULL) THEN

		SELECT 
			GROUP_CONCAT(R.refname ORDER BY P.id SEPARATOR ',' ) INTO @taxtypes
		FROM 
			`tax` P 
		INNER JOIN `reference` R ON P.taxtypeid = R.id
            WHERE FIND_IN_SET(P.id, p_taxids);
        
	END IF;

RETURN @taxtypes;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_test123`(
	p_lineid INT(11),
    p_companyid INT(11)
) RETURNS varchar(1000) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @employeename = null;    
   /* select empids INTO @empids 
    from cbf_branchwisesupervisordetail 
    where lineid = p_lineid;*/
    
    
   /* SELECT GROUP_CONCAT(employeename)  INTO @employeename
    FROM `employee` 
    WHERE 
    FIND_IN_SET(id, @empids);*/
    
    /*SELECT group_concat(employeename) INTO @employeename
    FROM `employee` 
    WHERE 
    FIND_IN_SET(id, @empids);*/
    
    
    SELECT employeename INTO @employeename FROM (
    select 
    
	(SELECT GROUP_CONCAT(EP.employeename) FROM `employee` EP WHERE FIND_IN_SET(EP.id, BWS.empids)) AS employeename


    from cbf_branchwisesupervisordetail BWS
    LEFT JOIN employee E ON E.id = BWS.empids
    LEFT JOIN cbf_line L ON L.id = BWS.lineid
    
    where BWS.lineid = p_lineid
    AND BWS.companyid = p_companyid
    ) TEMP;
    
    
RETURN @employeename;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_totalreceived_feed`(
    p_shedids VARCHAR(200),
    p_fromdate DATE,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @warehousebinids = null;
    SET @recivedquantity = 0;
    SET @defaultmalechickid = null;
	SET @defaultfemalechickid = null;
    
      SELECT  
		defaultmalechickid,defaultfemalechickid
		INTO @defaultmalechickid,@defaultfemalechickid
	FROM
		breedersetting
        
        WHERE 
			companyid = p_companyid limit 1;
            
            
    SELECT GROUP_CONCAT(warehousebinid) INTO @warehousebinids
	FROM breedershed
    WHERE FIND_IN_SET(id, p_shedids);
  
  
    SELECT IFNULL(SUM(quantity), 0) into @recivedquantity
    FROM materialmovement
    
    WHERE
	companyid = p_companyid AND
    transactiontypeid in(681, 682) AND
    FIND_IN_SET(towarehousebinid, @warehousebinids)
    AND transactiondate <= p_fromdate;
   --  AND itemid not in (@defaultmalechickid, @defaultfemalechickid);
    
    
   RETURN @recivedquantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_total_expenses_amount`(
 p_from_date DATE,
 p_to_date DATE,
 p_company_id INT(11)) RETURNS decimal(15,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @exp_amount = 0;
 SELECT
		   IFNULL(SUM(JED.cramount),0) INTO @exp_amount
	FROM chartofaccount COA
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id AND JED.companyid = p_company_id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid AND JE.companyid = p_company_id
    WHERE JE.voucherdate BETWEEN p_from_date AND p_to_date
    AND COA.companyid = p_company_id
    AND COA.categoryid = 5;
RETURN IFNULL(@exp_amount,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_total_revenu_amount`(
 p_from_date DATE,
 p_to_date DATE,
 p_company_id INT(11)) RETURNS decimal(15,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @revenu_amount = 0;
 SELECT
		   IFNULL(SUM(JED.cramount),0) INTO @revenu_amount
	FROM chartofaccount COA
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id AND JED.companyid = p_company_id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid AND JE.companyid = p_company_id
    WHERE JE.voucherdate BETWEEN p_from_date AND p_to_date
    AND COA.companyid = p_company_id
    AND COA.categoryid = 4;
RETURN IFNULL(@revenu_amount,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_transaction_date_wise_liveqty`(
	p_breederbatchid INT,
    p_breedershedid varchar(255),
    p_itemid INT,
    p_todate DATE,
    p_companyid INT
    
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @opening = 0;
    SET @totalcullsandmortality = 0;
    SET @transferedquantity = 0;
    SET @transferedinquantity = 0;
    SET @inward = 0;
    SET @recipt = 0;
    SET @placementdate = null;
    
    SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
  
    SELECT warhouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM breedershed
    WHERE FIND_IN_SET(id,p_breedershedid);
    
    

SELECT IFNULL(SUM(quantity), 0) into @totalcullsandmortality
    FROM materialmovement
    WHERE transactiondate <= p_todate AND
	companyid = p_companyid AND
	transactiondate >= @placementdate AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
  
  
	-- calculate transfered male/female quantity befor p_todate
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedquantity
    FROM materialmovement
    WHERE transactiondate <= p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
    
      
	-- calculate transfered in  male/female quantity befor p_todate
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedinquantity
    FROM materialmovement
    WHERE transactiondate <= p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
	SELECT IFNULL(SUM(quantity), 0) into @inward
    FROM materialmovement
    WHERE transactiondate <= p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
SELECT IFNULL(SUM(quantity), 0) into @recipt
    FROM materialmovement
    WHERE transactiondate <= p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
	SELECT IFNULL(SUM(quantity), 0) into @opening
    FROM materialmovement
    WHERE transactiondate <= p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 685 AND
    transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
SELECT (@inward+@recipt) INTO @openingbalance;
    
    RETURN (IFNULL(@openingbalance,0)+ IFNULL(@opening,0)+ IFNULL(@transferedinquantity,0))- IFNULL(@totalcullsandmortality, 0) - IFNULL(@transferedquantity, 0);
    -- RETURN @warehousebinid;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_transaction_date_wise_liveqty_cbf`(
	p_cbfbatchid INT,
    p_cbfshedid INT,
    p_itemid INT,
    p_todate DATE,
    p_companyid INT
    
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @totalcullsandmortality = 0;
    SET @transferedquantity = 0;
    SET @transferedinquantity = 0;
    SET @inward = 0;
    SET @recipt = 0;
    SET @placementdate = null;
    
    SELECT fnc_getplacementdatecbf(p_cbfbatchid,p_companyid) INTO @placementdate;
  
    select 
     WB.warehouseid,
    CFESD.warehousebinid INTO @warehouseid,@warehousebinid
    FROM cbf_farmerenquiry_sheddimensiondetail CFESD
    LEFT JOIN  warehousebin WB ON CFESD.warehousebinid =   WB.id
    WHERE CFESD.id =  p_cbfshedid;

SELECT IFNULL(SUM(quantity), 0) into @totalcullsandmortality
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
	transactiondate >= @placementdate AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
  
  
	-- calculate transfered male/female quantity befor p_todate
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedquantity
    FROM materialmovement
    WHERE transactiondate <= p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
    
      
	-- calculate transfered in  male/female quantity befor p_todate
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedinquantity
    FROM materialmovement
    WHERE transactiondate <= p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
	SELECT IFNULL(SUM(quantity), 0) into @inward
    FROM materialmovement
    WHERE transactiondate <= p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
SELECT IFNULL(SUM(quantity), 0) into @recipt
    FROM materialmovement
    WHERE transactiondate <= p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 685 AND
    transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
SELECT (@inward+@recipt) INTO @openingbalance;
    
	-- RETURN (IFNULL(@openingbalance,0)+ IFNULL(@transferedinquantity,0))- IFNULL(@totalcullsandmortality, 0) - IFNULL(@transferedquantity, 0);
	RETURN @totalcullsandmortality;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_transaction_date_wise_liveqty_ope`(
	p_breederbatchid INT,
    p_breedershedid varchar(255),
    p_itemid INT,
    p_todate DATE,
    p_companyid INT
    
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @opening = 0;
    SET @totalcullsandmortality = 0;
    SET @transferedquantity = 0;
    SET @transferedinquantity = 0;
    SET @inward = 0;
    SET @recipt = 0;
    SET @placementdate = null;
    
    SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
  
    SELECT warhouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM breedershed
    WHERE FIND_IN_SET(id,p_breedershedid);
    
    

SELECT IFNULL(SUM(quantity), 0) into @totalcullsandmortality
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
	transactiondate >= @placementdate AND
    -- DATE_SUB(transactiondate, INTERVAL 1 DAY) AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
  
  
	-- calculate transfered male/female quantity befor p_todate
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedquantity
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
    
      
	-- calculate transfered in  male/female quantity befor p_todate
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedinquantity
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
	SELECT IFNULL(SUM(quantity), 0) into @inward
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
SELECT IFNULL(SUM(quantity), 0) into @recipt
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
     SELECT IFNULL(SUM(quantity), 0) into @opening
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 685 AND
    transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
SELECT (@inward+@recipt) INTO @openingbalance;
    
    RETURN (IFNULL(@openingbalance,0)+ IFNULL(@opening,0)+ IFNULL(@transferedinquantity,0))- IFNULL(@totalcullsandmortality, 0)-IFNULL(@transferedquantity, 0);
    -- RETURN @warehousebinid;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_user_assignedlicenses`(
	p_userid INT
) RETURNS varchar(1000) CHARSET utf8
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @licenses = '';

	SELECT licenses INTO @licenses FROM (
		SELECT 
			GROUP_CONCAT(CS.licensetypename) AS licenses
		FROM userlicense UL
		LEFT JOIN companysubscription CS ON UL.companysubscriptionid = CS.id
		WHERE
			UL.userid = p_userid
	) 
	AS tbllicenses;
    
RETURN @licenses;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_user_assignedsubscriptionids`(
	p_userid INT
) RETURNS varchar(1000) CHARSET utf8
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @companysubscriptionid = 0;

	SELECT companysubscriptionid INTO @companysubscriptionid FROM (
		SELECT 
			GROUP_CONCAT(CS.id) AS companysubscriptionid
		FROM userlicense UL
		LEFT JOIN companysubscription CS ON UL.companysubscriptionid = CS.id
		WHERE
			UL.userid = p_userid
	) 
	AS tbllicenses;
    
RETURN @companysubscriptionid;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_user_roleids`(
	p_userid INT
) RETURNS varchar(1000) CHARSET utf8
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @roleids = '';

	SELECT roleids INTO @roleids FROM (
		SELECT 
			GROUP_CONCAT(roleid) AS roleids
		FROM userlicense
		WHERE
			userid = p_userid
	) 
	AS tbluserroleids;
    
RETURN @roleids;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnc_user_rolenames`(
	p_userid INT
) RETURNS varchar(1000) CHARSET utf8
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @rolenames = '';

	SELECT rolenames INTO @rolenames FROM (
		SELECT 
			GROUP_CONCAT(rolename) AS rolenames
		FROM userlicense UL
        LEFT JOIN role R ON UL.roleid = R.id
		WHERE
			userid = p_userid
	) 
	AS tbluserrolenames;
    
RETURN @rolenames;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fnk_permission_byids`(
	p_permissionids VARCHAR(500)
) RETURNS varchar(3000) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @permissionnames = '';

	IF(NULLIF(p_permissionids, '') IS NOT NULL) THEN

		SELECT 
			GROUP_CONCAT(P.permission ORDER BY P.id SEPARATOR ', ' ) INTO @permissionnames 
		FROM 
			`permission` P WHERE FIND_IN_SET(id, p_permissionids);
        
	END IF;

RETURN @permissionnames;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fuc_calculate_agewisestdcon`(
    p_age INT,
    p_itemid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @stdfeedconsumption = 0;
SET	@fwculls = 0;
    SET @weekend = null;
    
    SELECT IFNULL(CSCD.feedconsumption,0) INTO  @stdfeedconsumption
    
    
    FROM cbfstandardchart CSC 
    LEFT JOIN cbfstandardchartdetail CSCD ON CSCD.cbfstandardchartid = CSC.id
	 
    WHERE CSC.breednameid = p_itemid
    AND CSCD.age = p_age;
    
    
 RETURN @stdfeedconsumption;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fuc_calculate_agewisestdfcr`(
    p_age INT,
    p_itemid INT
   
) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @stdfcr = 0;
SET	@fwculls = 0;
SET @weekend = null;
    
    SELECT IFNULL(CSCD.fcr,0) INTO  @stdfcr
    
    
    FROM cbfstandardchart CSC 
    LEFT JOIN cbfstandardchartdetail CSCD ON CSCD.cbfstandardchartid = CSC.id
	 
    WHERE CSC.breednameid = p_itemid
    AND CSCD.age = p_age;
    
    
 RETURN @stdfcr;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fuc_calculate_avgweightfrodayweekwise`(
    p_lastweekdate DATE,
    p_cbf_batchid INT 
  
	
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @fwavgweight = 0;
SET @weekend = null;
    
    
    
  
    SELECT IFNULL(CDM.avgweight,0)
    INTO @fwavgweight
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
    WHERE CDT.id = CDM.cbfdailytransactionid AND
          CDT.cbf_batchid = p_cbf_batchid AND
          CDT.transactiondate = p_lastweekdate;
   
     
    IF(@fwavgweight = 0) THEN
      SELECT IFNULL(CDM.avgweight,0)
    INTO @fwavgweight
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid AND
          CDT.cbf_batchid = p_cbf_batchid AND
          CDT.transactiondate = DATE_SUB(p_lastweekdate,INTERVAL 1  DAY);
      END IF;   
      
       IF(@fwavgweight = 0) THEN
      SELECT IFNULL(CDM.avgweight,0)
    INTO @fwavgweight
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid AND
          CDT.cbf_batchid = p_cbf_batchid AND
          CDT.transactiondate = DATE_SUB(p_lastweekdate,INTERVAL 2  DAY);
      END IF;   
      
       IF(@fwavgweight = 0) THEN
      SELECT IFNULL(CDM.avgweight,0)
    INTO @fwavgweight
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid AND
          CDT.cbf_batchid = p_cbf_batchid AND
          CDT.transactiondate = DATE_SUB(p_lastweekdate,INTERVAL 3  DAY);
      END IF;   
      
       IF(@fwavgweight = 0) THEN
      SELECT IFNULL(CDM.avgweight,0)
    INTO @fwavgweight
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid AND
          CDT.cbf_batchid = p_cbf_batchid AND
          CDT.transactiondate = DATE_SUB(p_lastweekdate,INTERVAL 4  DAY);
      END IF;   
      
        IF(@fwavgweight = 0) THEN
      SELECT IFNULL(CDM.avgweight,0)
    INTO @fwavgweight
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid AND
          CDT.cbf_batchid = p_cbf_batchid AND
          CDT.transactiondate = DATE_SUB(p_lastweekdate,INTERVAL 5  DAY);
      END IF;   
      
    IF(@fwavgweight = 0) THEN
      SELECT IFNULL(CDM.avgweight,0)
    INTO @fwavgweight
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid AND
          CDT.cbf_batchid = p_cbf_batchid AND
          CDT.transactiondate = DATE_SUB(p_lastweekdate,INTERVAL 5  DAY);
      END IF;   
      
      IF(@fwavgweight = 0) THEN
      SELECT IFNULL(CDM.avgweight,0)
    INTO @fwavgweight
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid AND
          CDT.cbf_batchid = p_cbf_batchid AND
          CDT.transactiondate = DATE_SUB(p_lastweekdate,INTERVAL 5  DAY);
      END IF;   
      
       IF(@fwavgweight = 0) THEN
      SELECT IFNULL(CDM.avgweight,0)
    INTO @fwavgweight
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid AND
          CDT.cbf_batchid = p_cbf_batchid AND
          CDT.transactiondate = DATE_SUB(p_lastweekdate,INTERVAL 6  DAY);
      END IF;   


RETURN IFNULL(@fwavgweight,0);


END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fuc_calculate_feedconweekwise`(
    p_firstweekdate DATE,
    p_lastweekdate DATE,
    p_cbf_batchid INT,
    p_itemid INT,
	p_itemunitid INT
     
) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @fwconsumption = 0;
SET @opecon = 0;
SET @weekend = null;
    
    
    
    IF(p_itemunitid = 144) THEN
    SELECT IFNULL(SUM(CDC.quantity*50), 0)
    INTO @fwconsumption
    
    FROM cbf_dailyconsumption CDC 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDC.cbfdailytransactionid AND
          CDT.cbf_batchid = p_cbf_batchid AND
          -- CDC.itemid = p_itemid AND
          consumptiontypeid = 861 AND
          (CDT.transactiondate BETWEEN  p_firstweekdate AND p_lastweekdate);
     END IF;   
     
      IF(p_itemunitid = 145) THEN
    SELECT IFNULL(SUM(CDC.quantity*30), 0)
    INTO @fwconsumption
    
    FROM cbf_dailyconsumption CDC 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDC.cbfdailytransactionid AND
          CDT.cbf_batchid = p_cbf_batchid AND
          -- CDC.itemid = p_itemid AND
          consumptiontypeid = 861 AND
          (CDT.transactiondate BETWEEN  p_firstweekdate AND p_lastweekdate);
     END IF;    
     
      IF(p_itemunitid = 142) THEN
    SELECT IFNULL(SUM(CDC.quantity), 0)
    INTO @fwconsumption
    
    FROM cbf_dailyconsumption CDC 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDC.cbfdailytransactionid AND
          CDT.cbf_batchid = p_cbf_batchid AND
          -- CDC.itemid = p_itemid AND
          consumptiontypeid = 861 AND
          (CDT.transactiondate BETWEEN  p_firstweekdate AND p_lastweekdate);
     END IF;    
     
	
    /*select COBD.feedvalue INTO @opecon
    from cbf_openingbalance COB
    LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id
    WHERE COBD.cbfbatchid = p_cbf_batchid AND
    (COB.date BETWEEN  p_firstweekdate AND p_lastweekdate);*/
		
    
  
RETURN (IFNULL(@fwconsumption,0));


END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fuc_calculate_liveqty_agewise`(
    p_placement_date DATE,
    p_cbf_batchid INT,
    p_intervalno INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @fwmortality = 0;
    SET @weekend = null;
    SET @placeqty = null;
    SET @fweekculls= null;
    SET @liveqty= null;
    
    select batch_place_qty INTO @placeqty  from cbf_batch_details where id = p_cbf_batchid and batch_place_date = p_placement_date;

    
    SELECT SUM(CDM.totalmortality)
    INTO @fwmortality
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid
    AND (CDT.transactiondate BETWEEN  p_placement_date AND (DATE_ADD(FIRST_DAY_OF_WEEK(p_placement_date), INTERVAL((p_intervalno)-DAYOFWEEK(FIRST_DAY_OF_WEEK(p_placement_date))) DAY)));
    
    
    SELECT SUM(CDM.totalculls)
    INTO @fweekculls
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid
    AND (CDT.transactiondate BETWEEN  p_placement_date AND (DATE_ADD(FIRST_DAY_OF_WEEK(p_placement_date), INTERVAL((p_intervalno)-DAYOFWEEK(FIRST_DAY_OF_WEEK(p_placement_date))) DAY)));
    



RETURN (@placeqty-(IFNULL((@fweekculls),0)+ IFNULL((@fwmortality),0)));


END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fuc_calculate_maxavgweight`(
    p_lastweekdate DATE,
    p_cbf_batchid INT 
  
	
) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @fwavgweight = 0;
SET @weekend = null;
  
    SELECT MAX(CDM.avgweight)
    INTO @fwavgweight
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
    WHERE CDT.id = CDM.cbfdailytransactionid AND
          CDT.cbf_batchid = p_cbf_batchid; 
          
RETURN IFNULL(@fwavgweight,0);
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fuc_calculate_mortality`(
    p_placement_date DATE,
    p_cbf_batchid INT,
    p_intervalno INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @fwmortality = 0;
    SET @weekend = null;
    
    SELECT SUM(CDM.totalmortality)
    INTO @fwmortality
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid
    AND (CDT.transactiondate BETWEEN  '2020-08-01' AND (DATE_ADD(FIRST_DAY_OF_WEEK('2020-08-01'), INTERVAL((8)-DAYOFWEEK(FIRST_DAY_OF_WEEK('2020-08-01'))) DAY)));
    

RETURN @fwmortality;


END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fuc_calculate_mortalityfirstweek`(
    p_firstweekdate DATE,
    p_lastweekdate DATE,
    p_cbf_batchid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @fwmortality = 0;
SET	@fwculls = 0;
    SET @weekend = null;
    
    SELECT SUM(IFNULL(CDM.totalmortality,0)+IFNULl(CDM.totalculls,0))
    INTO @fwmortality
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid AND
          CDT.cbf_batchid = p_cbf_batchid AND
          (CDT.transactiondate BETWEEN  p_firstweekdate AND p_lastweekdate);
    
    
  SELECT 
	IFNULL(SUM(COBD.mortality),0) INTO @openingmortality
	FROM cbf_openingbalance COB 
	LEFT JOIN cbf_openingbalancedetail COBD ON COBD.cbfopeningbalanceid = COB.id 
    
    WHERE 
	COBD.cbfbatchid = p_cbf_batchid
    -- AND COBD.placementdate <= p_lastweekdate
    group by COBD.cbfbatchid;


RETURN (IFNULL(@fwmortality,0) + IFNULL(@openingmortality,0));


END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fuc_calculate_mortalityweekwise`(
    p_firstweekdate DATE,
    p_lastweekdate DATE,
    p_cbf_batchid INT,
    p_itemid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @fwmortality = 0;
SET	@fwculls = 0;
    SET @weekend = null;
    
    SELECT SUM(IFNULL(CDM.totalmortality,0)+IFNULl(CDM.totalculls,0))
    INTO @fwmortality
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid AND
          CDT.cbf_batchid = p_cbf_batchid AND
          CDM.itemid = p_itemid
    AND (CDT.transactiondate BETWEEN  p_firstweekdate AND p_lastweekdate);
    
    
    /* SELECT SUM(CDM.totalculls)
    INTO @fwculls
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid
    AND (CDT.transactiondate BETWEEN  p_firstweekdate AND p_lastweekdate);
    */

RETURN IFNULL(@fwmortality,0);


END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fuc_calculate_totalmortality`(
p_placement_date DATE,
p_cbf_batchid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @totalmortality = 0;
    SET @weekend = null;
    
    SELECT SUM(CDM.totalmortality)
    INTO @totalmortality
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid;
    
    

RETURN @totalmortality;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fuc_calculate_weightweekwise`(
    p_firstweekdate DATE,
    p_lastweekdate DATE,
    p_cbf_batchid INT,
    p_itemid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @fwavgweight = 0;
SET @weekend = null;
    
    SELECT SUM(IFNULL(CDM.avgweight,0))
    INTO @fwavgweight
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid AND
          CDT.cbf_batchid = p_cbf_batchid AND
          CDM.itemid = p_itemid
    AND (CDT.transactiondate BETWEEN  p_firstweekdate AND p_lastweekdate);
    
    
    /* SELECT SUM(CDM.totalculls)
    INTO @fwculls
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid
    AND (CDT.transactiondate BETWEEN  p_firstweekdate AND p_lastweekdate);
    */

RETURN IFNULL(@fwavgweight,0);


END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `func_layerprev_birdcost`(
	p_layerbatchid INT,
    p_layershedid INT,
    p_itemid INT,
    p_placementdate DATE,
    p_todate DATE,
    p_companyid INT
    
    
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @mortalityvalue = 0;
    
  
    SELECT warehouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM layershed
    WHERE id =  p_layershedid;
	-- calculate total culla and mortality for given batch before p_todate
  
  
  
	-- calculate transfered male/female quantity befor p_todate
    
	SELECT IFNULL((SUM(itemvalue)), 0) into @totalitemvalue
    FROM materialmovement
    WHERE
    transactiondate >= p_placementdate AND
    transactiondate < p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
    
  
        
    
    RETURN @totalitemvalue;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `func_prev_birdcost`(
	p_breederbatchid INT,
    p_breedershedid INT,
    p_maleitemid INT,
    p_femaleitemid INT,
    p_placementdate DATE,
    p_todate DATE,
    p_companyid INT
    
    
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @mortalityvalue = 0;
    
  
    SELECT warhouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM breedershed
    WHERE id =  p_breedershedid;
	-- calculate total culla and mortality for given batch before p_todate
  
  
  
	-- calculate transfered male/female quantity befor p_todate
    
	SELECT IFNULL((SUM(itemvalue)), 0) into @malevale
    FROM materialmovement
    WHERE
    transactiondate >= p_placementdate AND
    transactiondate < p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
     itemid = p_maleitemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
    
    SELECT IFNULL((SUM(itemvalue)), 0) into @femalevalue
    FROM materialmovement
    WHERE
    transactiondate >= p_placementdate AND
    transactiondate < p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
     itemid = p_femaleitemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
        
    
    RETURN (@malevale + @femalevalue);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_afteramortization_mortality`(
	p_batchid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @mortality = 0;
SET @ageinweeks = null;
SET @p_placementdate = null;
 SET @@sql_mode = '';
  SELECT fnc_getplacementdate(p_batchid,p_companyid) INTO @p_placementdate;

 
 SELECT TRUNCATE (((DATEDIFF(p_transactiondate,@p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 24)THEN
      SELECT date_add(@p_placementdate,INTERVAL 167 DAY) INTO @transactiondate;
      END IF;
   if(@transactiondate IS NOT NULL) THEN
	select ifnull((SUM(totalmortality+totalculls)),0) INTO @mortality FROM breederdailytransaction BDT
		LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id
		WHERE BDT.breederbatchid = 32
		AND  transactiondate >=  @transactiondate
		AND transactiondate  <= p_transactiondate;
	RETURN @mortality;
    END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_afteramortization_mortalitylayer`(
	p_batchid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @mortality = 0;
SET @ageinweeks = null;
SET @p_placementdate = null;
 SET @@sql_mode = '';
  SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @p_placementdate;

 
 SELECT TRUNCATE (((DATEDIFF(p_transactiondate,@p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 19)THEN
      SELECT date_add(@p_placementdate,INTERVAL 132 DAY) INTO @transactiondate;
      END IF;
   if(@transactiondate IS NOT NULL) THEN
	select ifnull((SUM(todaymortality+todayculls)),0) INTO @mortality FROM layerdailytransaction LDT
		LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id
		WHERE LDT.layerbatchid = p_batchid
		AND  transactiondate >=  @transactiondate
		AND transactiondate  <= p_transactiondate;
	RETURN @mortality;
    END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_afterlyaing_mortalitcost`(
	 p_batchid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS decimal(15,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @mortality = 0;
SET @ageinweeks = null;
SET @p_placementdate = null;
SET @morcost = 0;
 SET @@sql_mode = '';
 SET @birdcost = 0;
 SELECT fun_purchse_biredcost (p_batchid,p_companyid,p_transactiondate) INTO @biredprice;
  SELECT fnc_getplacementdate(p_batchid,p_companyid) INTO @p_placementdate;

 
 SELECT TRUNCATE (((DATEDIFF(p_transactiondate,@p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 24)THEN
      SELECT date_add(@p_placementdate,INTERVAL 167 DAY) INTO @transactiondate;
      END IF;
   if(@transactiondate IS NOT NULL) THEN
	select ifnull((SUM(totalmortality+totalculls)),0) INTO @mortality FROM breederdailytransaction BDT
		LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id
		WHERE BDT.breederbatchid = p_batchid
		AND  transactiondate >=  @transactiondate
		AND transactiondate  <= p_transactiondate;
	SELECT (@mortality*@biredprice) INTO @morcost;
	RETURN  @morcost;
    END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_afterlyaing_mortalitcost_layer`(
	p_batchid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS decimal(15,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @mortality = 0;
SET @ageinweeks = null;
SET @p_placementdate = null;
SET @morcost = 0;
 SET @@sql_mode = '';
 SET @birdcost = 0;
 SELECT fun_purchse_biredcost (p_batchid,p_companyid,p_transactiondate) INTO @biredprice;
  SELECT fnc_getplacementdate(p_batchid,p_companyid) INTO @p_placementdate;

 
 SELECT TRUNCATE (((DATEDIFF(p_transactiondate,@p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 19)THEN
      SELECT date_add(@p_placementdate,INTERVAL 132 DAY) INTO @transactiondate;
      END IF;
   if(@transactiondate IS NOT NULL) THEN
	select ifnull((SUM(todaymortality+todayculls)),0) INTO @mortality FROM layerdailytransaction LDT
		LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id
		WHERE LDT.layerbatchid = p_batchid
		AND  transactiondate >=  @transactiondate
		AND transactiondate  <= p_transactiondate;
	SELECT (@mortality*@biredprice) INTO @morcost;
	
    END IF;
RETURN  @morcost;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_amortizatiobvalue_forbreeder`(
 p_breederbatchid INT(11),
 p_transactiondate DATE
 ) RETURNS decimal(20,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @amortizationcost = 0;
SET @hatchingeggscollection = 0;
SET @amortizvalue = 0;
	 SELECT IFNULL((amortizationvalueofbird), 0) INTO @amortizationcost FROM amortization WHERE breederbatchid = p_breederbatchid; 
	  
	select IFNULL((SUM(ED.quantity)),0) INTO @hatchingeggscollection
		FROM eggscollection EC
		LEFT JOIN eggsdistributiondetail ED ON ED.eggscollectionid = EC.id AND ED.itemtypeid = 881
		WHERE EC.breederbatchid = p_breederbatchid
		AND EC.collectiondate <= p_transactiondate;
        
        SELECT (@hatchingeggscollection*@amortizationcost) INTO @amortizvalue;
    
	RETURN @amortizvalue;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_amortizatiobvalue_forlayer`(
 p_batchid INT(11),
 p_transactiondate DATE
 ) RETURNS decimal(20,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @amortizationcost = 0;
SET @hatchingeggscollection = 0;
SET @amortizvalue = 0;
	 SELECT IFNULL((amortizationvalueofbird), 0) INTO @amortizationcost FROM layeramortization WHERE layerbatchid = p_batchid; 
	  
	select IFNULL((SUM(LEDD.quantity)),0) INTO @hatchingeggscollection
		FROM layereggscollection LEC
		LEFT JOIN layereggsdistributiondetail LEDD ON LEDD.eggscollectionid = LEC.id AND LEDD.itemtypeid = 1132
		WHERE LEC.layerbatchid = p_batchid
		AND LEC.collectiondate <= p_transactiondate;
        
        SELECT (@hatchingeggscollection*@amortizationcost) INTO @amortizvalue;
    
	RETURN @amortizvalue;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_batchshed_eggdistributionqty`(
p_breederbatchid INT,
p_shedid VARCHAR(200),
p_itemid INT(11),
p_fromdate DATE,
p_todate DATE,
p_companyid INT
    
) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @itemqty= NUll;

select SUM(ED.quantity) INTO @itemqty
 FROM eggsdistributiondetail  ED
		LEFT JOIN item I ON ED.itemid = I.id
        LEFT JOIN eggscollection EC ON EC.id = ED.eggscollectionid
        LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid
        LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = ED.itemid
		
	WHERE ED.eggscollectionid in (select id from eggscollection  where  FIND_IN_SET(breederbatchid,p_breederbatchid) and FIND_IN_SET(shedid,p_shedid) AND statusid = 803)
	-- AND ED.collectiondate= p_collectiondate
    -- AND ED.collectiondate BETWEEN p_fromdate AND p_todate
    AND ED.collectiondate= p_todate
    AND ED.itemid=p_itemid
	AND  ED.statusid = 842;
    -- group by EC.collectiondate;

    RETURN @itemqty;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_batchshed_eggdistributionqtyitemtypeweekwise`(
p_breederbatchid INT,
p_shedid VARCHAR(200),
p_itemtypeid INT(11),
p_fromdate DATE,
p_todate DATE,
p_companyid INT
    
) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @itemqty= NUll;

select SUM(ED.quantity) INTO @itemqty
 FROM eggsdistributiondetail  ED
		LEFT JOIN item I ON ED.itemid = I.id
        LEFT JOIN eggscollection EC ON EC.id = ED.eggscollectionid
        LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid
        LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = ED.itemid
		
	WHERE ED.eggscollectionid in (select id from eggscollection  where  FIND_IN_SET(breederbatchid,p_breederbatchid) and FIND_IN_SET(shedid,p_shedid) AND statusid = 803)
	-- AND ED.collectiondate= p_collectiondate
    -- AND ED.collectiondate BETWEEN p_fromdate AND p_todate
	AND ED.collectiondate BETWEEN p_fromdate AND p_todate
    AND ED.itemtypeid = p_itemtypeid
	AND  ED.statusid = 842;
    -- group by EC.collectiondate;

    RETURN @itemqty;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_batchshed_eggdistributionqtyitemtypewise`(
p_breederbatchid INT,
p_shedid VARCHAR(200),
p_itemtypeid INT(11),
p_fromdate DATE,
p_todate DATE,
p_companyid INT
    
) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @itemqty= NUll;

select SUM(ED.quantity) INTO @itemqty
 FROM eggsdistributiondetail  ED
		LEFT JOIN item I ON ED.itemid = I.id
        LEFT JOIN eggscollection EC ON EC.id = ED.eggscollectionid
        LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid
        LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = ED.itemid
		
	WHERE ED.eggscollectionid in (select id from eggscollection  where  FIND_IN_SET(breederbatchid,p_breederbatchid) and FIND_IN_SET(shedid,p_shedid) AND statusid = 803)
	-- AND ED.collectiondate= p_collectiondate
    -- AND ED.collectiondate BETWEEN p_fromdate AND p_todate
    AND ED.collectiondate= p_todate
    AND ED.itemtypeid = p_itemtypeid
	AND  ED.statusid = 842;
    -- group by EC.collectiondate;

    RETURN @itemqty;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_batchshed_eggdistributionqtyitemwisetotal`(
p_breederbatchid INT,
p_shedid VARCHAR(200),
p_itemid INT(11),
p_fromdate DATE,
p_todate DATE,
p_companyid INT
    
) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @itemqty= NUll;

select SUM(ED.quantity) INTO @itemqty
 FROM eggsdistributiondetail  ED
		LEFT JOIN item I ON ED.itemid = I.id
        LEFT JOIN eggscollection EC ON EC.id = ED.eggscollectionid
        LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid
        LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = ED.itemid
		
	WHERE ED.eggscollectionid in (select id from eggscollection  where  FIND_IN_SET(breederbatchid,p_breederbatchid) and FIND_IN_SET(shedid,p_shedid) AND statusid = 803)
	-- AND ED.collectiondate= p_collectiondate
    AND ED.collectiondate BETWEEN p_fromdate AND p_todate
    AND ED.itemid=p_itemid
	AND  ED.statusid = 842;
    -- group by EC.collectiondate;

    RETURN @itemqty;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_batchshed_eggdistributionqtytotal`(
p_breederbatchid INT,
p_shedid VARCHAR(200),
-- p_itemid INT(11),
p_fromdate DATE,
p_todate DATE,
p_companyid INT
    
) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @itemqty= NUll;

select SUM(ED.quantity) INTO @itemqty
 FROM eggsdistributiondetail  ED
		LEFT JOIN item I ON ED.itemid = I.id
        LEFT JOIN eggscollection EC ON EC.id = ED.eggscollectionid
        LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid
        LEFT JOIN breederperformanceobjective BPO ON BPO.itemid = ED.itemid
		
	WHERE ED.eggscollectionid in (select id from eggscollection  where  FIND_IN_SET(breederbatchid,p_breederbatchid) and FIND_IN_SET(shedid,p_shedid) AND statusid = 803)
	-- AND ED.collectiondate= p_collectiondate
    AND ED.collectiondate BETWEEN p_fromdate AND p_todate
    -- AND ED.itemid=p_itemid
	AND  ED.statusid = 842;
    -- group by EC.collectiondate;

    RETURN @itemqty;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_batchshed_eggdistributionqtytotal_lyr`(
p_layerbatchid INT,
p_shedid VARCHAR(200),
p_fromdate DATE,
p_todate DATE,
p_companyid INT
    
) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @itemqty= NUll;

select SUM(ED.quantity) INTO @itemqty
 FROM layereggsdistributiondetail  ED
		LEFT JOIN item I ON ED.itemid = I.id
        LEFT JOIN layereggscollection EC ON EC.id = ED.eggscollectionid
        LEFT JOIN layereggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid
        LEFT JOIN layerperformanceobjective LPO ON LPO.itemid = ED.itemid
		
	WHERE ED.eggscollectionid in (select id from layereggscollection  where  FIND_IN_SET(layerbatchid,p_layerbatchid) and FIND_IN_SET(shedid,p_shedid) AND statusid = 1091)
    AND ED.collectiondate BETWEEN p_fromdate AND p_todate
	AND  ED.statusid = 1110;

    RETURN @itemqty;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_batch_ageindays`(
    p_from_date DATE,
    p_placement_date DATE,
    p_batch_id INT
    ) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @placementdate = NULl;
SET @fromdate = NULl;
SET @ageindays = NULl;

SELECT placement_date INTO @placementdate 

from cbf_chick_placement

WHERE batch_id = p_batch_id;


  SELECT DATEDIFF(p_from_date,@placementdate) INTO @ageindays;
 



RETURN @ageindays;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_batch_ageindaysbreeder`(
	p_transactiondate DATE,
    p_breederbatchid INT,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @placementdate = NULl;
SET @days = NULl;

select fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;


    SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@placementdate)%7)+1),0) INTO @days;
    
    RETURN @days;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_batch_ageindayslayer`(
	p_transactiondate DATE,
    p_layerbatchid INT,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @placementdate = NULl;
SET @days = NULl;

select fnc_getplacementdate_layer(p_layerbatchid,p_companyid) INTO @placementdate;


    SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@placementdate)%7)+1),0) INTO @days;
    
    RETURN @days;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_batch_ageinmonth`(
	p_transactiondate DATE,
    p_breederbatchid INT,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @placementdate = NULl;
SET @weekno = NULl;
      SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
      
	
    
    SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@placementdate)/30)+1),0) INTO @weekno;
    
    RETURN @weekno;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_batch_ageinweek`(
	p_transactiondate DATE,
    p_breederbatchid INT,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @placementdate = NULl;
SET @weekno = NULl;

select fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;


    SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@placementdate)/7)+1),0) INTO @weekno;
    
    RETURN @weekno;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_batch_ageinweekeggcollection`(
	p_transactiondate DATE,
    p_breederbatchid INT,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @placementdate = NULl;
SET @weekno = NULl;

select fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;


    SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@placementdate)/7)+1),0) INTO @weekno;
    
    RETURN @weekno;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_batch_ageinweek_layer`(
	p_transactiondate DATE,
    p_layerbatchid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @placementdate = NULl;
SET @weekno = NULl;
  
  SELECT placementdate INTO @placementdate 
  
	from layerbatchplacement
    
	WHERE layerbatchid = p_layerbatchid;
      
	
    
    SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@placementdate)/7)+1),0) INTO @weekno;
    
    RETURN @weekno;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_billdate`(
 p_itemid INT,
 p_warehouseids VARCHAR(200),
 p_transactiondate DATE,
 p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @billdate = null;
   SET @transactionid = null;
    
  
    SELECT 
    transactionid INTO @transactionid--  IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate = p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    FIND_IN_SET(towarehouseid, p_warehouseids);
    
	
    SELECT
	invoicedate INTO @billdate
    FROM purchaseinvoice
	 WHERE 
    grpono = @transactionid AND
	companyid = p_companyid ;

    
   /* SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);*/
    
   
   RETURN @billdate;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_billno`(
 p_itemid INT,
 p_warehouseids VARCHAR(200),
 p_transactiondate DATE,
 p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @billno = null;
   SET @transactionid = null;
    
  
    SELECT 
    transactionid INTO @transactionid--  IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate = p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    FIND_IN_SET(towarehouseid, p_warehouseids);
    
	
    SELECT
    id INTO @billno
    
    FROM purchaseinvoice
	 WHERE 
    grpono = @transactionid AND
	companyid = p_companyid ;

    
   /* SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);*/
    
   
   RETURN @billno;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_birdcost`(
	p_batchid INT,
    p_moduleid INT
) RETURNS decimal(15,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @@sql_mode = '';
    SET @birdcost = null;
    
    IF(p_moduleid = 721) THEN  
		IF EXISTS(SELECT id FROM breederbatchplacement WHERE breederbatchid = p_batchid) THEN
			SELECT ((IFNULL(PID.unitprice,0) * IFNULL(PID.quantity,0)) + (IFNULL(PID1.unitprice,0) * IFNULL(PID1.quantity,0))) INTO @birdcost FROM
			breederbatchplacement BBP
			INNER JOIN breederbatchplacementdetail BBPD ON BBPD.breederbatchplacementid = BBP.id 
			INNER JOIN purchaseinvoice PI ON PI.grpono = BBP.grpono
			INNER JOIN breederbatch B ON B.id = BBP.breederbatchid
			INNER JOIN purchaseinvoicedetail PID ON PI.id = PID.purchaseinvoiceid AND PID.itemid = B.maleitemid
			INNER JOIN purchaseinvoicedetail PID1 ON PI.id = PID1.purchaseinvoiceid AND PID1.itemid = B.femaleitemid
			WHERE B.id = p_batchid
			GROUP BY BBP.id;
		ELSE
			SELECT ((IFNULL(BMF.rate,0) * IFNULL(BMF.placeqty,0)) + (IFNULL(BMF1.rate,0) * IFNULL(BMF1.placeqty,0))) INTO @birdcost
			FROM breederbatchopening BBO
			INNER JOIN breederbatch B ON B.id = BBO.breederbatchid
			INNER JOIN breederbatchmalefemaleopeningdetail BMF ON BBO.id = BMF.breederbatchopeningid AND BMF.itemid = B.maleitemid
			INNER JOIN breederbatchmalefemaleopeningdetail BMF1 ON BBO.id = BMF1.breederbatchopeningid AND BMF1.itemid = B.femaleitemid
			WHERE B.id = p_batchid;
		END IF;  
	END IF;
RETURN @birdcost;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculatechickratefor_report`(
p_cbf_batchid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_chickrate = 0;

SELECT (MM.quantity/MM.itemvalue) into @p_chickrate
    FROM cbf_chick_placement CCP
    -- LEFT JOIN cbf_dailytransaction CDT ON CCP.transaction_id = CDT.id 
    LEFT JOIN materialmovement MM ON CCP.transaction_id = MM.transactionid
    
    WHERE MM.transactionid = CCP.transaction_id AND
          CCP.batch_id = p_cbf_batchid AND
          MM.transactiontypeid = 682;
         -- GROUP BY MM.transactiontypeid;
   
RETURN @p_chickrate;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_abc`(
p_transactiondate Date,
p_warehousebinid INT(11),
p_itemid INT(11),
p_transactionid  INT(11),
p_companyid INT(11)

) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @closingfeed = null;
SET @p_transferoutquantity = 0;
	
select fun_cbfcalculatefeedob(CDT.transactiondate,MM.towarehousebinid,MM.itemid) INTO @closingfeed
	    FROM cbf_dailytransaction CDT
		Left Join cbf_dailyconsumption CDC ON CDT.id = CDC.cbfdailytransactionid AND  CDC.consumptiontypeid = 861
        Left Join materialmovement MM ON CDT.id = MM.transactionid 

 WHERE  -- transactiondate < p_transactiondate AND
	    --  itemid = p_itemid AND
		  CDT.id = p_transactionid AND
        --  towarehousebinid = p_warehousebinid AND
          CDT.companyid = p_companyid;
          
SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
    transactiontypeid = 682 AND
	itemid = p_itemid AND
    fromwarehousebinid =  p_warehousebinid;          
        
	RETURN (@closingfeed - @p_transferoutquantity);


END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_agemortality`(
p_transactiondate DATE,
p_batch_id INT ) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @placementdate = NULl;
SET @weekno = NULl;

 SELECT    placement_date INTO @placementdate 
 
  
	from cbf_chick_placement 
     
  
    WHERE batch_id = p_batch_id;

SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@placementdate)/7)+1),0) INTO @weekno;
    
    RETURN @weekno;



END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_batchwiseweight`(
    p_placement_date DATE,
    p_cbf_batchid INT,
    p_todate DATE
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @fwweight = 0;
    SET @weekend = null;
    
    SELECT SUM(CDM.avgweight)
    INTO @fwweight
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDM.cbfdailytransactionid
	LEFT JOIN cbf_batch_details CBD ON CDT.cbf_batchid = CBD.id
    
    WHERE CDT.id = CDM.cbfdailytransactionid
          AND CBD.id = p_cbf_batchid
    AND (CDT.transactiondate BETWEEN  p_placement_date AND p_todate);
    

RETURN @fwweight;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_breederdailyliveqty`(
p_placement_date DATE,
p_transactiondate DATE,
p_breederbatchid INT,
p_itemid varchar(45),
p_shedid INT


) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @mortality = 0;
SET @culls = 0;
SET @qty = 0;
    
    SELECT SUM(BDM.totalmortality)  into @mortality
    FROM  breederdailymortality BDM
    LEFT JOIN breederdailytransaction BDT ON  BDT.breederbatchid = p_breederbatchid
    WHERE BDT.id = BDM.breederdailytransactionid AND
		  BDT.shedid = p_shedid AND
		  BDM.itemid = p_itemid AND
		  BDT.transactiondate BETWEEN p_placement_date AND p_transactiondate;
          -- GROUP BY BDM.itemid; 
		
        
    SELECT SUM(BDM.totalculls) into @culls
    FROM  breederdailymortality BDM
	 LEFT JOIN breederdailytransaction BDT ON  BDT.breederbatchid = p_breederbatchid
	 WHERE  BDT.shedid = p_shedid AND
            BDM.itemid = p_itemid AND
           BDT.id = BDM.breederdailytransactionid AND
		   BDT.transactiondate BETWEEN p_placement_date AND p_transactiondate
   GROUP BY BDM.itemid;
    
    SELECT (BBPD.quantity) into @qty
    FROM breederbatchplacement BBP 
    LEFT JOIN breederbatchplacementdetail BBPD ON BBPD.breederbatchplacementid = BBP.id
	WHERE 
		  BBP.breederbatchid = p_breederbatchid AND
          BBPD.breedershedid = p_shedid AND
          BBPD.itemid = p_itemid; 
	
RETURN  (@qty - (@mortality + @culls));    

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_cbfclosingbalance`(
p_transactiondate Date,
p_warehousebinid INT(11),
p_itemid INT(11)

 
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @openingbalance = null;
SET @p_transferoutquantity = 0;
	
    select
	  
      fun_cbfcalculatefeedob(CDT.transactiondate,MM.towarehousebinid,MM.itemid) INTO @openingbalance
       
	 FROM 
	  cbf_dailytransaction CDT

		Left Join cbf_dailyconsumption CDC ON CDT.id = CDC.cbfdailytransactionid AND  CDC.consumptiontypeid = 861
        Left Join materialmovement MM ON CDT.id = MM.transactionid 

	WHERE
	   -- transactiondate < p_transactiondate AND
       -- itemid = p_itemid AND
        CDT.companyid = p_companyid;

        
 SELECT 
 
 
    
	IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement MM
    Left Join cbf_dailytransaction CDT ON MM.transactiontypeid = CDT.id
    Left Join cbf_dailyconsumption CDC ON CDT.id = CDC.cbfdailytransactionid AND  CDC.consumptiontypeid = 861
    
    WHERE transactiondate < p_transactiondate AND
    transactiontypeid = 682 AND
	itemid = p_itemid AND
    fromwarehousebinid =  p_warehousebinid;          
        
	RETURN (@openingbalance - @p_transferoutquantity) ;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_CBFdailyliveqty`(
p_placement_date DATE,
p_transactiondate DATE,
p_cbfbatchid INT,
p_itemid INT


) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @mortality = 0;
SET @opemortality = 0;
SET @culls = 0;
SET @qty = 0;
    
    SELECT SUM(CDM.totalmortality)  into @mortality
    FROM  cbf_dailymortality CDM
    LEFT JOIN cbf_dailytransaction CDT ON  CDT.cbf_batchid = p_cbfbatchid
    WHERE CDT.id = CDM.cbfdailytransactionid AND
		--  BDT.shedid = p_shedid AND
		  CDM.itemid = p_itemid AND
		  CDT.transactiondate BETWEEN p_placement_date AND p_transactiondate
          GROUP BY CDM.itemid; 
          
    SELECT SUM(COBD.mortality)  into @opemortality
    FROM  cbf_openingbalance COB
    LEFT JOIN cbf_openingbalancedetail COBD ON  COBD.cbfopeningbalanceid = COB.id
    WHERE COBD.cbfbatchid = p_cbfbatchid AND
		  COB.breeditemid = p_itemid 
          GROUP BY COB.breeditemid;        
		
        
    SELECT SUM(CDM.totalculls) into @culls
    FROM  cbf_dailymortality CDM
	 LEFT JOIN cbf_dailytransaction CDT ON  CDT.cbf_batchid = p_cbfbatchid
	 WHERE  -- BDT.shedid = p_shedid AND
            CDM.itemid = p_itemid AND
           CDT.id = CDM.cbfdailytransactionid AND
		   CDT.transactiondate BETWEEN p_placement_date AND p_transactiondate
   GROUP BY CDM.itemid;
    
    SELECT (CBD.batch_place_qty) into @qty
    FROM cbf_batch_details CBD 
	WHERE 
		  CBD.id = p_cbfbatchid AND
          CBD.breed_id = p_itemid; 
	
RETURN  (@qty - (ifnull(@mortality,0) +ifnull(@culls,0)+ifnull(@opemortality,0)));    

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_cbfliveqty`(
p_placement_date DATE,
p_transactiondate DATE,
p_cbf_batchid INT,
p_itemid INT,
p_shedid INT

) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @mortality = 0;
SET @culls = 0;
SET @qty = 0;
SET @weekend = null;
    
    SELECT SUM(CDM.totalmortality)  into @mortality 
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
    WHERE CDT.id = CDM.cbfdailytransactionid AND
		  CDT.shedid = p_shedid AND
		  CDM.itemid = p_itemid AND
		  CDT.transactiondate BETWEEN p_placement_date AND p_transactiondate
         GROUP BY CDM.itemid; 
		
        
    SELECT SUM(CDM.totalculls) into @culls
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	WHERE CDT.id = CDM.cbfdailytransactionid AND
		  CDT.shedid = p_shedid AND
		  CDM.itemid = p_itemid AND
		  CDT.transactiondate BETWEEN p_placement_date AND p_transactiondate
    GROUP BY CDM.itemid; 
    
    SELECT (CBD.live_batch_qty) into @qty
    FROM cbf_batch_details CBD 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	WHERE CDT.cbf_batchid = CBD.id AND 
          CDT.shedid = p_shedid AND 
          CBD.breed_id = p_itemid
           GROUP BY  CBD.breed_id; 

RETURN  (@qty) - (@mortality + @culls);    

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_conforbird`(
p_placement_date DATE,
p_cbf_batchid INT

) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @consumption = 0;
    SET @weekend = null;
    
    SELECT SUM(CDC.quantity)
    INTO @consumption
    
    FROM cbf_dailyconsumption CDC 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	
    WHERE
    CDT.id = CDC.cbfdailytransactionid;
   
    

RETURN @consumption;



END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_cumulativestdfeed`(
 p_placement_date DATE,
 p_cbf_batchid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @cummulativestdfeed = 0;
    SET @weekend = null;
    
    SELECT SUM(CDC.stdconsumption)
    INTO @cummulativestdfeed
    
    FROM cbf_dailyconsumption CDC 
    LEFT JOIN cbf_dailytransaction CDT ON CDC.cbfdailytransactionid = CDT.id 
	 
    WHERE CDT.id = CDC.cbfdailytransactionid;
    
RETURN @cummulativestdfeed;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_dailyculls`(
p_placement_date DATE,
p_cbf_batchid INT

) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @culls = 0;
SET @weekend = null;
    
    SELECT SUM(CDM.totalculls)
    INTO @culls
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid;
    
RETURN @culls;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_dailyliveqty`(
p_placement_date DATE,
p_transactiondate DATE,
p_cbf_batchid INT,
p_transactionid INT

) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @mortality = 0;
SET @culls = 0;
SET @qty = 0;
SET @weekend = null;
    
    SELECT SUM(CDM.totalmortality)  into @mortality
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
    WHERE CDT.id = CDM.cbfdailytransactionid AND
		  CDT.transactiondate BETWEEN p_placement_date AND p_transactiondate
          GROUP BY CDT.cbf_batchid; 
		
        
    SELECT SUM(CDM.totalculls) into @culls
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	WHERE CDT.id = CDM.cbfdailytransactionid AND
		  CDT.transactiondate BETWEEN p_placement_date AND p_transactiondate
    GROUP BY CDT.cbf_batchid;
    
    SELECT (CBD.live_batch_qty) into @qty
    FROM cbf_batch_details CBD 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	WHERE CDT.cbf_batchid = CBD.id AND
		  CBD.batch_place_date BETWEEN p_placement_date AND p_transactiondate
	GROUP BY CDT.cbf_batchid;

RETURN  (@qty) - (@mortality + @culls);    

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_dailymortality`(
p_placement_date DATE,
p_cbf_batchid INT

) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @mortality = 0;
SET @weekend = null;
    
    SELECT SUM(CDM.totalmortality)
    INTO @mortality
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid;
    
RETURN @mortality;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_dailyweight`(
p_placement_date DATE,
p_cbf_batchid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @dailyweight = 0;
SET @weekend = null;
    
    SELECT SUM(CDM.avgweight)
    INTO @dailyweight
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid;
    
RETURN @dailyweight;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_feedconsumption`(
p_placement_date DATE,
    p_cbf_batchid INT,
    p_intervalno INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @fwconsumption = 0;
    SET @weekend = null;
    
    SELECT SUM(CDC.quantity)
    INTO @fwconsumption
    
    FROM cbf_dailyconsumption CDC 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	
    WHERE CDT.id = CDC.cbfdailytransactionid
    AND (CDT.transactiondate BETWEEN  p_placement_date AND (DATE_ADD(FIRST_DAY_OF_WEEK(p_placement_date), INTERVAL((p_intervalno)-DAYOFWEEK(FIRST_DAY_OF_WEEK(p_placement_date))) DAY)));
    

RETURN @fwconsumption;


RETURN 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_iuuseqty`(
p_productionorderid INT(11),
-- p_itemid INt (11),
p_companyid INT(11)

) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @issueqty = 0;
SET @weekend = null;
    
    SELECT SUM(FPID.issue_qty)
    INTO @issueqty
    
    FROM feedmill_production_issue FPI 
    LEFT JOIN feedmill_production_issuedetail FPID ON FPID.production_issue_id = FPI.id
	 
    WHERE 
			FPI.productionorder_id = p_productionorderid and
            FPI.companyid = p_companyid;
    
RETURN @issueqty;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_layerdailyliveqty`(
p_placement_date DATE,
p_transactiondate DATE,
p_layerbatchid INT,
p_itemid INT,
p_shedid INT


) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @mortality = 0;
SET @culls = 0;
SET @qty = 0;
    
    SELECT SUM(LDM.todaymortality)  into @mortality
    FROM  layerdailymortality LDM
    LEFT JOIN layerdailytransaction LDT ON  LDT.layerbatchid = p_layerbatchid
    WHERE LDT.id = LDM.layerdailytransactionid AND
		  LDT.shedid = p_shedid AND
		  LDM.itemid = p_itemid AND
		  LDT.transactiondate BETWEEN p_placement_date AND p_transactiondate
          GROUP BY LDM.itemid; 
		
        
    SELECT SUM(LDM.todayculls) into @culls
    FROM  layerdailymortality LDM
	LEFT JOIN layerdailytransaction LDT ON  LDT.layerbatchid = p_layerbatchid
	 WHERE   LDT.shedid = p_shedid AND
             LDM.itemid = p_itemid AND
		  LDT.transactiondate BETWEEN p_placement_date AND p_transactiondate
          GROUP BY LDM.itemid; 
    
    SELECT (LBPD.quantity) into @qty
    FROM layerbatchplacement LBP 
    LEFT JOIN layerbatchplacementdetail LBPD ON LBPD.layerbatchplacementid = LBP.id
	WHERE 
		  LBP.layerbatchid = p_layerbatchid AND
          LBPD.layershedid = p_shedid AND
          LBPD.itemid = p_itemid; 
	
RETURN  (@qty - (@mortality + @culls));    

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_receiptqty`(
p_productionorderid INT(11),
-- p_itemid INt (11),
p_companyid INT(11)

) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @receipt_qty = 0;
SET @weekend = null;
    
    SELECT SUM(FRFP.receipt_qty)
    INTO @receipt_qty
    
    FROM feedmill_receipt_from_production FRFP
	 
    WHERE 
			FRFP.productionorder_id = p_productionorderid and
            FRFP.companyid = p_companyid;
    
RETURN @receipt_qty;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_calculate_weight`(
 p_placement_date DATE,
    p_cbf_batchid INT,
    p_intervalno INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @fwweight = 0;
    SET @weekend = null;
    
    SELECT SUM(CDM.avgweight)
    INTO @fwweight
    
    FROM cbf_dailymortality CDM 
    LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = p_cbf_batchid
	 
    WHERE CDT.id = CDM.cbfdailytransactionid
    AND (CDT.transactiondate BETWEEN  p_placement_date AND (DATE_ADD(FIRST_DAY_OF_WEEK(p_placement_date), INTERVAL((p_intervalno)-DAYOFWEEK(FIRST_DAY_OF_WEEK(p_placement_date))) DAY)));
    

RETURN @fwweight;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_cbfcalculateaddreceitinqty_fordailysupervisor`(
 p_transactiondate Date,
 p_warehousebinid INT(11),
 p_itemid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
    
    SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
	SET @p_receiptquantity = 0;
    
  
    
SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
    transactiontypeid = 681 AND
    itemid = p_itemid AND
    towarehousebinid= p_warehousebinid;
    
SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    towarehousebinid = p_warehousebinid;    
        
SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
    transactiontypeid = 684 AND
     itemid = p_itemid AND
    towarehousebinid =  p_warehousebinid;  
               
    
RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity);    


RETURN 1;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_cbfcalculatefeedob`(
 p_transactiondate Date,
 p_warehouseid INT(11),
 p_warehousebinid INT(11),
 p_itemid INT(11),
 p_companyid INT(11)
 
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	 SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    SET @p_itemopningbalquantity = 0;
	
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE  
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    itemid = p_itemid AND
    towarehouseid= p_warehouseid AND
    towarehousebinid = p_warehousebinid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE 
	companyid = p_companyid AND
    transactiontypeid = 682 AND
	itemid = p_itemid AND
    towarehouseid = p_warehouseid AND
    towarehousebinid = p_warehousebinid ;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE 
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    fromwarehouseid = p_warehouseid AND
    fromwarehousebinid = p_warehousebinid ;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE 
	companyid = p_companyid AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
    fromwarehouseid = p_warehouseid AND
    fromwarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE 
	companyid = p_companyid AND
    transactiontypeid = 684 AND
     itemid = p_itemid AND
    towarehouseid = p_warehouseid AND
    towarehousebinid = p_warehousebinid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_itemopningbalquantity
    FROM materialmovement
    WHERE 
	 companyid = p_companyid AND
     transactiontypeid = 685 AND
     itemid = p_itemid AND
     towarehouseid = p_warehouseid AND
     towarehousebinid = p_warehousebinid;
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity+ @p_itemopningbalquantity) - (@p_issuequantity + @p_transferoutquantity);
   

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_cbfcalculatefeedob_cbf`(
 p_transactiondate Date,
 p_warehousebinid INT(11),
 p_itemid INT(11)
 
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_inwardquantity = 0;
SET @p_transferinquantity = 0;
SET @p_transferoutquantity = 0;
SET @p_issuequantity = 0;
SET @p_receiptquantity = 0;
    
  
    
SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
    transactiontypeid = 681 AND
    itemid = p_itemid AND
    towarehousebinid= p_warehousebinid;
    
SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    towarehousebinid = p_warehousebinid;    
    
SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    fromwarehousebinid =  p_warehousebinid;   
    
SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
    fromwarehousebinid =  p_warehousebinid;   
    
SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
    transactiontypeid = 684 AND
     itemid = p_itemid AND
    towarehousebinid =  p_warehousebinid;  
    
SELECT IFNULL(SUM(quantity), 0) into @p_itemquantity
    FROM materialmovement
     WHERE transactiondate <= p_transactiondate AND
    transactiontypeid = 685 AND
     itemid = p_itemid AND
   towarehousebinid =  p_warehousebinid;  
           
    
RETURN (@p_itemquantity + @p_inwardquantity + @p_transferinquantity + @p_receiptquantity) - (@p_issuequantity + @p_transferoutquantity);    


END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_cbfcalculate_costoflivebird`(
	p_transactiondate DATE,
	p_batch_id INT,
	p_type VARCHAR(45)
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

		SET @cost = null;

		-- FOR FEED
		SET @warehousebinid = null;
		SELECT SDD.warehousebinid INTO @warehousebinid
		FROM cbf_farmerenquiry_sheddimensiondetail SDD
		LEFT JOIN cbf_dailytransaction CDT ON CDT.shedid = SDD.id
		WHERE CDT.cbf_batchid = p_batch_id LIMIT 1;

	RETURN 1;

			-- for Feed
			--  SELECT SUM(CDC.quantity), 
				--   (SUM(quantity) * CS.feedcost) 
			IF(p_type = 'feed') THEN
				SELECT ((fnc_feedtransferin(@warehousebinid,CDC.itemid, p_companyid) - fnc_feedtransferout(@warehousebinid,CDC.itemid, p_companyid)) * CS.feedcost)
					   
				INTO @cost
					   
				FROM cbf_batch_details CB 
				LEFT JOIN coststructure CS ON CS.id = CB.scheme_id
				LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = CB.id
				LEFT JOIN cbf_dailyconsumption CDC ON CDC.cbfdailytransactionid = CDT.id
				
				WHERE CB.id = p_batch_id
				AND CDC.consumptiontypeid = 861
				AND CB.companyid = p_companyid
                AND CDT.transactiondate <= p_transactiondate
				
				LIMIT 1;
			END IF;
            
            -- MEDICINE
            
            IF(p_type = 'medicine') THEN
            
				SELECT (SUM(quantity) * CS.medicinecost) INTO @cost
					   
				FROM cbf_batch_details CB 
				LEFT JOIN coststructure CS ON CS.id = CB.scheme_id
				LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = CB.id
				LEFT JOIN cbf_dailyconsumption CDC ON CDC.cbfdailytransactionid = CDT.id
				
				WHERE CB.id = p_batch_id
				AND CDC.consumptiontypeid = 862
				AND CB.companyid = p_companyid
                AND CDT.transactiondate <= p_transactiondate
                
                 LIMIT 1;
                
			END IF;
			
            	-- FOR VACCINE
                
			IF(p_type = 'vaccine') THEN
		
				SELECT (SUM(quantity) * CS.vaccinecost) INTO @cost
					   
				FROM cbf_batch_details CB 
				LEFT JOIN coststructure CS ON CS.id = CB.scheme_id
				LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = CB.id
				LEFT JOIN cbf_dailyconsumption CDC ON CDC.cbfdailytransactionid = CDT.id
				
				WHERE CB.id = p_batch_id
				AND CDC.consumptiontypeid = 863
				AND CB.companyid = p_companyid
                AND CDT.transactiondate <= p_transactiondate
                
                 LIMIT 1;
                
			END IF;
		
RETURN @cost;		

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_cbfcalculate_costoflivebirdonactualcost`(
	p_transactiondate DATE,
	p_batch_id INT,
	p_type VARCHAR(45)
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

		SET @cost = null;

		-- FOR FEED
	/*	SET @warehousebinid = null;
		SELECT SDD.warehousebinid INTO @warehousebinid
		FROM cbf_farmerenquiry_sheddimensiondetail SDD
		LEFT JOIN cbf_dailytransaction CDT ON CDT.shedid = SDD.id
		WHERE CDT.cbf_batchid = p_batch_id LIMIT 1;

	RETURN 1;*/
    
			-- for Feed
			--  SELECT SUM(CDC.quantity), 
				--   (SUM(quantity) * CS.feedcost) 
			IF(p_type = 'feed') THEN
				SELECT CDC.itemvalue
					   INTO @cost
					   
				FROM cbf_batch_details CB 
				LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = CB.id
				LEFT JOIN cbf_dailyconsumption CDC ON CDC.cbfdailytransactionid = CDT.id
				
				WHERE CB.id = p_batch_id
				AND CDC.consumptiontypeid = 861
                AND CDT.transactiondate = p_transactiondate;
				
			-- LIMIT 1;
			END IF;
            
          -- MEDICINE
            
            IF(p_type = 'medicine') THEN
            
				SELECT CDC.itemvalue  INTO @cost
					   
				FROM cbf_batch_details CB 
				LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = CB.id
				LEFT JOIN cbf_dailyconsumption CDC ON CDC.cbfdailytransactionid = CDT.id
				
				WHERE CB.id = p_batch_id
				AND CDC.consumptiontypeid = 862
                AND CDT.transactiondate = p_transactiondate
                
                 LIMIT 1;
                
			END IF;
			
            	-- FOR VACCINE
                
			IF(p_type = 'vaccine') THEN
		
				SELECT CDC.itemvalue  INTO @cost
					   
				FROM cbf_batch_details CB 
				LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = CB.id
				LEFT JOIN cbf_dailyconsumption CDC ON CDC.cbfdailytransactionid = CDT.id
				
				WHERE CB.id = p_batch_id
				AND CDC.consumptiontypeid = 863
                AND CDT.transactiondate = p_transactiondate
                
                 LIMIT 1;
                
			END IF; 
		
RETURN @cost;		

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_cbf_cum_mortality`(
p_placement_date DATE,
p_transactiondate DATE,
p_cbf_batchid INT,
p_companyid INT

) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @mortality = 0;

		
    
    SELECT ifnull(SUM(CDM.totalmortality+CDM.totalculls),0) INTO @mortality
    
    FROM cbf_dailytransaction CDT  
    
    LEFT JOIN cbf_dailymortality CDM  ON CDT.id = CDM.cbfdailytransactionid
    
    WHERE 
			CDT.cbf_batchid = p_cbf_batchid
            AND
            CDT.transactiondate>=p_placement_date
            AND
            CDT.transactiondate<=p_transactiondate;
    
RETURN @mortality;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_cbf_live_biredcost`(
	p_bathid INT(11),
	p_companyid INT(11),
	p_transactiondate DATE
		
		
	) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

		SET @consumptioncost = null;
		SET @p_placementdate = null;
		SET @biredcost = 0;
		SET @purvalue = null;
		SET @overheadexp = 0;
		SET @goodsissuecost = 0;
		SET @salesvalue = 0;
        SET @sale_qty = 0;
        SET @administrationcost =0;
        SET @liveqty = null;
        
	select CB.sale_qty,(IFNULL(CS.administrationcost,0)*CB.batch_place_qty)   INTO @sale_qty,@administrationcost 
    from cbf_batch_details CB
    LEFT JOIN coststructure CS ON CS.id = CB.scheme_id
    LEFT JOIN coststructuredetail CSD ON CSD.coststructureid = CS.id
    where CB.id=p_bathid;
		   
	SELECT 
		(costperbird*batch_place_qty),
        fnc_cbf_dailyconsumption_value(id,p_transactiondate,p_companyid),
        (batch_place_qty-total_mortality),
		-- (batch_place_qty-(fun_cbf_cum_mortality(batch_place_date,p_transactiondate,id,p_companyid))),
		fun_overhed_exp(id,723,p_transactiondate,p_companyid) as overheadexp,
		fnc_getgoodsissue(id,723,p_transactiondate) as goodsissuecost,
		fnc_cbfbatchwise_salesvalue(id,723,p_transactiondate,p_companyid) INTO
		@purvalue,@consumptioncost,@liveqty,@overheadexp,@goodsissuecost,@salesvalue
	FROM cbf_batch_details WHERE id = p_bathid;
	SELECT 
  --  ((((@purvalue+@consumptioncost+@overheadexp+@goodsissuecost)-@salesvalue)))/@liveqty INTO @biredcost;
	((((@purvalue+@consumptioncost+@overheadexp+@goodsissuecost+@administrationcost))))/@liveqty INTO @biredcost;
				 
		
			  
	RETURN @biredcost;
    -- (@purvalue+@consumptioncost+@administrationcost);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_feedreqclosingbalance`(
    p_breederbatchid INT(11),
    p_itemid INT(11),
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @closingfeed = null;
	
 select
	  
      fnc_breederfeedopeningbalance(transactiondate,shedid,itemid,p_companyid) INTO @closingfeed
       
	 FROM 
	  breederdailytransaction BDT

		Left Join breederdailyconsumption BDC ON BDT.id = BDC.breederdailytransactionid AND  BDC.consumptiontypeid = 861

	WHERE
		BDT.breederbatchid = p_breederbatchid AND
        breederitemid = p_itemid AND
        BDT.companyid = p_companyid;
        
	RETURN @closingfeed;
 
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_feedstditemwise`(
    p_itemid INT,
    p_weekno INT,
    p_days INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @feedrequired = 0;
     
	SELECT ((feedconsumed/7) *p_days) INTO @feedrequired
	FROM
		breederfeedstandard BF
		LEFT JOIN breederfeedstandarddetail BFD ON BF.id = BFD.breederfeedstandardid
	WHERE
	breeditemid = p_itemid AND
	weeknumber = p_weekno;

RETURN IFNULL(@feedrequired, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_inventoryissuestock`(
 p_fromdate DATE,
 p_todate DATE,
 p_warehouseid VARCHAR(16383),
 p_itemid VARCHAR(16383)

) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_issuequantity = 0;


    
    SELECT ifnull(SUM(MM.quantity),0) into @p_issuequantity
    FROM materialmovement MM
    WHERE  MM.transactiondate BETWEEN p_fromdate AND p_todate AND
    transactiontypeid = 683 AND
	FIND_IN_SET(MM.itemid,p_itemid) AND
    FIND_IN_SET(fromwarehouseid,p_warehouseid)
    GROUP By MM.itemid ; 
    

RETURN @p_issuequantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_inventorysingletransferout`(
 p_fromdate DATE,
 p_todate DATE,
 p_warehouseid VARCHAR(16383),
 p_itemid VARCHAR(16383)

) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_transferoutquantity = 0;
SET @p_issuequantity = 0;
SET @transferedqty = 0;


SELECT ifnull(SUM(MM.quantity),0) into @p_transferoutquantity
    FROM materialmovement MM
    WHERE  MM.transactiondate BETWEEN p_fromdate AND p_todate AND
    transactiontypeid = 682 AND
	FIND_IN_SET(MM.itemid,p_itemid) AND
    
    FIND_IN_SET(fromwarehouseid, p_warehouseid)
    GROUP By MM.itemid ; 

RETURN @p_transferoutquantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_inventorytransferin`(
 p_transactiondate Date,
 p_warehousebinid VARCHAR(500),
 p_itemid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN


SET @p_receiptquantity = 0;

SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
     WHERE transactiondate = p_transactiondate AND
     transactiontypeid in(681, 682,684,685) AND
     itemid = p_itemid AND
     find_in_set(towarehousebinid,p_warehousebinid)
     GROUP BY itemid;  
    
 
RETURN @p_receiptquantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_inventorytransferinbreeder`(
 p_breederbatchid INT(11),
 p_transactiondate Date,
 p_breedershedid INT(11),
 p_itemid INT(11),
 p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN





SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @placementdate;
  
    SELECT warhouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM breedershed
    WHERE FIND_IN_SET(id,p_breedershedid);
    
SET @p_receiptquantity = 0;

SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
     WHERE transactiondate = p_transactiondate AND
     transactiontypeid in(681,684,685) AND
     itemid = p_itemid AND
     towarehousebinid =  @warehousebinid
     GROUP BY itemid;  
    
 
RETURN @p_receiptquantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_inventorytransferinlayer`(
 p_transactiondate Date,
 p_warehousebinid VARCHAR(11),
 p_itemid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN


SET @p_receiptquantity = 0;

SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
     WHERE transactiondate = p_transactiondate AND
     transactiontypeid in(681, 682,684,685) AND
     itemid = p_itemid AND
     find_in_set(towarehousebinid,p_warehousebinid)
     GROUP BY itemid;  
    
 
RETURN @p_receiptquantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_inventorytransferintilldate`(
 p_transactiondate Date,
 p_warehousebinid VARCHAR(500),
 p_itemid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN


SET @p_receiptquantity = 0;

SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
     WHERE transactiondate < p_transactiondate AND
     transactiontypeid in(681, 682,684,685) AND
     itemid = p_itemid AND
     find_in_set(towarehousebinid,p_warehousebinid)
     GROUP BY itemid;  
    
 
RETURN @p_receiptquantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_inventorytransferissue_out_stock`(
p_fromdate DATE,
p_todate DATE,
p_fromwarehouseid VARCHAR(500),
p_itemid INT(11),
p_type_is INT(11)
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_transferoutquantity = 0;
SET @transferedqty = 0;


SELECT ifnull(SUM(MM.quantity),0) into @p_transferoutquantity
    FROM materialmovement MM
    WHERE  MM.transactiondate BETWEEN p_fromdate AND p_todate AND
    transactiontypeid = p_type_is AND
     itemid = p_itemid AND
    find_in_set(MM.fromwarehouseid,p_fromwarehouseid)
    GROUP By MM.itemid ; 
    

SELECT (@p_transferoutquantity) INTO @transferedqty;

RETURN @transferedqty;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_inventorytransferout`(
 p_transactiondate Date,
 p_warehousebinid INT(11),
 p_itemid INT(11)
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_transferoutquantity = 0;
SET @p_issuequantity = 0;
SET @transferedqty = 0;

    
    SELECT  SUM(MM.quantity) into @p_issuequantity
    FROM materialmovement MM
    WHERE transactiondate = p_transactiondate AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
    fromwarehousebinid =  p_warehousebinid
    GROUP By MM.itemid ; 

SELECT (@p_issuequantity) INTO @transferedqty;

RETURN @p_issuequantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_inventorytransferoutissuue`(
 p_transactiondate Date,
  p_warehousebinid VARCHAR(500),
 p_itemid INT(11)
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_transferoutquantity = 0;
SET @p_issuequantity = 0;
SET @transferedqty = 0;

    
    SELECT  SUM(MM.quantity) into @p_issuequantity
    FROM materialmovement MM
    WHERE transactiondate = p_transactiondate 
	AND FIND_IN_SET(MM.transactiontypeid,'683,682')
    AND  itemid = p_itemid
    AND find_in_set(fromwarehousebinid,p_warehousebinid)
    GROUP By MM.itemid ; 


RETURN @p_issuequantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_inventorytransferoutlayer`(
 p_transactiondate Date,
 p_warehousebinid varchar(255),
 p_itemid INT(11)
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_issuequantity = 0;

    
    SELECT  SUM(MM.quantity) into @p_issuequantity
    FROM materialmovement MM
    WHERE transactiondate = p_transactiondate AND
	transactiontypeid in(682,683) AND
	itemid = p_itemid AND
    find_in_set(fromwarehousebinid,p_warehousebinid)
    GROUP By MM.itemid ; 



RETURN @p_issuequantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_inventorytransferoutStock`(
p_fromdate DATE,
p_todate DATE,
p_warehousebinid INT(11),
p_itemid INT(11)
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_transferoutquantity = 0;
SET @p_issuequantity = 0;
SET @transferedqty = 0;


SELECT ifnull(SUM(MM.quantity),0) into @p_transferoutquantity
    FROM materialmovement MM
    WHERE  MM.transactiondate BETWEEN p_fromdate AND p_todate AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    fromwarehousebinid =  p_warehousebinid
    GROUP By MM.itemid ; 
    
    SELECT ifnull(SUM(MM.quantity),0) into @p_issuequantity
    FROM materialmovement MM
    WHERE  MM.transactiondate BETWEEN p_fromdate AND p_todate AND
    transactiontypeid = 683 AND
	itemid = p_itemid AND
    fromwarehousebinid =  p_warehousebinid
    GROUP By MM.itemid ; 

SELECT (@p_transferoutquantity+@p_issuequantity) INTO @transferedqty;

RETURN @transferedqty;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_inventorytransferouttilldate`(
 p_transactiondate Date,
p_warehousebinid VARCHAR(500),
 p_itemid INT(11)
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_transferoutquantity = 0;
SET @p_issuequantity = 0;
SET @transferedqty = 0;

    
    SELECT  SUM(MM.quantity) into @p_issuequantity
    FROM materialmovement MM
    WHERE transactiondate <= p_transactiondate 
    AND FIND_IN_SET(MM.transactiontypeid,'683,682')
    AND itemid = p_itemid 
    AND find_in_set(fromwarehousebinid,p_warehousebinid)
    GROUP By MM.itemid ; 



RETURN @p_issuequantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_inventorytransferreceipt`(
 p_fromdate DATE,
 p_todate DATE,
 p_warehouseid VARCHAR(16383),
 p_itemid VARCHAR(16383)
) RETURNS decimal(11,0)
    READS SQL DATA
    DETERMINISTIC
BEGIN


SET @p_receiptquantity = 0;

    SELECT IFNULL(SUM(MM.quantity),0) into @p_receiptquantity
    FROM materialmovement MM 
	WHERE FIND_IN_SET(MM.itemid, p_itemid) AND
		  transactiontypeid = 684 AND
		  FIND_IN_SET(MM.towarehouseid,p_warehouseid) AND
		  MM.transactiondate BETWEEN p_fromdate AND p_todate
          GROUP By MM.itemid;  
          
          
    
		
	
      RETURN  (@p_receiptquantity);    
	
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_inventorytransfersinglein`(
 p_fromdate DATE,
 p_todate DATE,
 p_warehouseid VARCHAR(16383),
 p_itemid VARCHAR(16383)

) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_transferoutquantity = 0;
SET @p_issuequantity = 0;
SET @transferedqty = 0;


SELECT ifnull(SUM(MM.quantity),0) into @p_transferoutquantity
    FROM materialmovement MM
    WHERE  MM.transactiondate BETWEEN p_fromdate AND p_todate AND
    transactiontypeid = 682 AND
	FIND_IN_SET(MM.itemid,p_itemid) AND
    
    FIND_IN_SET(towarehouseid, p_warehouseid)
    GROUP By MM.itemid ; 

RETURN @p_transferoutquantity;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_itembatchclosingbalance`(
 p_itemid INT,
 p_itembatch VARCHAR(200),
 p_warehouseids VARCHAR(200),
 p_transactiondate DATE,
 p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
	itembatch  = p_itembatch AND
    FIND_IN_SET(towarehouseid, p_warehouseids);
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    itembatch  = p_itembatch AND
    FIND_IN_SET(towarehouseid, p_warehouseids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    itembatch  = p_itembatch AND
    FIND_IN_SET(fromwarehouseid, @p_warehouseids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE
    itemid = p_itemid AND 
    transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
    itembatch  = p_itembatch AND
    FIND_IN_SET(towarehouseid, @p_warehouseids);
    
   /* SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);*/
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_itemgroupwiseopeningbalance`(
	p_itemgroupids VARCHAR(200),
	p_warehousebinids VARCHAR(200),
	p_fromdate DATE
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    
    SET @itemids = null;
    SELECT GROUP_CONCAT(DISTINCT id) INTO @itemids 
    FROM item
    WHERE FIND_IN_SET(itemgroupid, p_itemgroupids);
  
    SELECT IFNULL(SUM(MM.quantity), 0) into @p_inwardquantity
    FROM materialmovement MM
    WHERE 
    FIND_IN_SET(MM.itemid, @itemids) AND
    MM.transactiontypeid = 681 AND
    FIND_IN_SET(MM.towarehousebinid, p_warehousebinids) AND
    MM.transactiondate < p_fromdate;
    
    
    SELECT IFNULL(SUM(MM.quantity), 0) into @p_transferinquantity
    FROM materialmovement MM
    WHERE 
    FIND_IN_SET(MM.itemid, @itemids) AND
    MM.transactiontypeid = 682 AND
    FIND_IN_SET(MM.towarehousebinid, p_warehousebinids) AND
    MM.transactiondate < p_fromdate;
    
    
    SELECT IFNULL(SUM(MM.quantity), 0) into @p_transferoutquantity
    FROM materialmovement MM
    WHERE 
    FIND_IN_SET(MM.itemid, @itemids) AND
    MM.transactiontypeid = 682 AND
    FIND_IN_SET(MM.fromwarehousebinid, p_warehousebinids) AND
    MM.transactiondate < p_fromdate;
    
    
    SELECT IFNULL(SUM(MM.quantity), 0) into @p_issuequantity
    FROM materialmovement MM
    WHERE 
    FIND_IN_SET(MM.itemid, @itemids) AND
    MM.transactiontypeid = 683 AND
    FIND_IN_SET(MM.fromwarehousebinid, p_warehousebinids) AND
    MM.transactiondate < p_fromdate;
    
    SELECT IFNULL(SUM(MM.quantity), 0) into @p_receiptquantity
    FROM materialmovement MM
    WHERE 
    FIND_IN_SET(MM.itemid, @itemids) AND
    MM.transactiontypeid = 684 AND
    FIND_IN_SET(MM.towarehousebinid, p_warehousebinids) AND
    MM.transactiondate < p_fromdate;
    
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity) - (@p_issuequantity + @p_transferoutquantity);
  
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_iteminquntity`(
 p_itemid VARCHAR(200),
 p_warehouseids VARCHAR(200),
 p_fromdate DATE,
 p_todate DATE,
 p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE 
     FIND_IN_SET(itemid, p_itemid) AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    FIND_IN_SET(towarehouseid, p_warehouseids) AND
	transactiondate BETWEEN p_fromdate AND p_todate
    group by itemid order by itemid; 
    
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE 
    FIND_IN_SET(itemid, p_itemid) AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    FIND_IN_SET(towarehouseid, p_warehouseids) AND
	transactiondate BETWEEN p_fromdate AND p_todate
    group by itemid order by itemid;
    

    

   RETURN (@p_inwardquantity + @p_transferinquantity);
      
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_itemwiseclosingbalance`(
 p_itemid INT,
 p_warehouseids VARCHAR(200),
 p_transactiondate DATE,
 p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    FIND_IN_SET(towarehouseid, p_warehouseids);
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    FIND_IN_SET(towarehouseid, p_warehouseids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    FIND_IN_SET(fromwarehouseid, @p_warehouseids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE
    itemid = p_itemid AND 
    transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
    FIND_IN_SET(towarehouseid, @p_warehouseids);
    
   /* SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);*/
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_itemwiseopeningbalance`(
p_itemid INT,
p_warehouseids VARCHAR(200),
p_fromdate DATE,
p_todate DATE,
p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    FIND_IN_SET(towarehouseid, p_warehouseids) AND
    transactiondate < p_fromdate 
    group by itemid order by itemid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    FIND_IN_SET(towarehouseid, p_warehouseids) AND
    transactiondate < p_fromdate
    group by itemid order by itemid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    FIND_IN_SET(fromwarehouseid, @p_warehouseids) AND
    transactiondate < p_fromdate
    group by itemid order by itemid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE
    itemid = p_itemid AND 
	companyid = p_companyid AND
    transactiontypeid = 683 AND
    FIND_IN_SET(towarehouseid, @p_warehouseids) AND
    transactiondate < p_fromdate
    group by itemid order by itemid; 
    
   
   
   RETURN (@p_inwardquantity + @p_transferinquantity) - (@p_issuequantity + @p_transferoutquantity);
  
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_itemwiseopeningbalanceforpurchase`(
P_itembatch VARCHAR(200),
p_warehouseids VARCHAR(200),
p_fromdate DATE,
p_companyid INT(11)

) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
    SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    SET @p_openingbalance = 0;
    
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE 
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    FIND_IN_SET(towarehouseid, p_warehouseids) AND
    transactiondate < p_fromdate 
    group by itemid order by itemid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE 
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    FIND_IN_SET(towarehouseid, p_warehouseids) AND
    transactiondate < p_fromdate
    group by itemid order by itemid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE 
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    FIND_IN_SET(fromwarehouseid, @p_warehouseids) AND
    transactiondate < p_fromdate
    group by itemid order by itemid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
    FIND_IN_SET(fromwarehouseid, @p_warehouseids) AND
    transactiondate < p_fromdate
    group by itemid order by itemid; 
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    FIND_IN_SET(towarehouseid, @p_warehouseids) AND
    transactiondate < p_fromdate
    group by itemid order by itemid; 
    
    SELECT IFNULL(SUM(quantity), 0) into @p_openingbalance
    FROM materialmovement
    WHERE
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 685 AND
    FIND_IN_SET(towarehouseid, @p_warehouseids) AND
    transactiondate < p_fromdate
    group by itemid order by itemid; 
    
   
   
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_openingbalance + @p_receiptquantity) - (@p_issuequantity + @p_transferoutquantity);
  

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_itemwiseOunt`(
 p_itemid VARCHAR(200),
 p_warehouseids VARCHAR(200),
 p_fromdate DATE,
 p_todate DATE,
 p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	 SET @p_issuequantity = 0;
    SET @p_transferoutquantity = 0;

    
    SELECT
    IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    
    WHERE 
     FIND_IN_SET(itemid, p_itemid) AND
	 FIND_IN_SET(fromwarehouseid, p_warehouseids) AND
    transactiontypeid = 682 AND
    transactiondate BETWEEN p_fromdate AND p_todate
    group by itemid order by itemid;
    -- companyid = p_companyid; 
    
    SELECT 
    IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    
    WHERE
     FIND_IN_SET(itemid, p_itemid) AND 
	 FIND_IN_SET(fromwarehouseid, p_warehouseids) AND
    transactiontypeid = 683 AND
    transactiondate BETWEEN p_fromdate AND p_todate
    group by itemid order by itemid;
    -- companyid = p_companyid;
    
  RETURN (@p_issuequantity + @p_transferoutquantity);
   
 --  RETURN @p_issuequantity;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_layerbatch_ageinmonth`(
	p_transactiondate DATE,
    p_layerbatchid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @placementdate = NULl;
SET @ageinmonth = NULl;
  
  SELECT placementdate INTO @placementdate 
  
	from layerbatchplacement
    
	WHERE layerbatchid = p_layerbatchid;
    
    SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@placementdate)/30)+1),0) INTO @ageinmonth;
    
    RETURN @ageinmonth;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_layerbatch_ageinweek`(
	p_transactiondate DATE,
    p_layerbatchid INT,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @placementdate = NULl;
SET @weekno = NULl;
  
  SELECT placementdate INTO @placementdate 
  
	from layerbatchplacement
    
	WHERE layerbatchid = p_layerbatchid
	AND   companyid = p_companyid;
      
	
    
    SELECT TRUNCATE(((DATEDIFF(p_transactiondate,@placementdate)/7)+1),0)INTO @weekno;
    
    RETURN @weekno;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_layerlive_biredcost`(
p_layerbatchid INT(11),
p_companyid INT(11),
p_transactiondate DATE
    
    
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @defaultfemalechickid = null;
	SET @femalepurchasecost= null;
	SET @femaleplacedqty = null;
	SET @consumptioncost = null;
	SET @femalebirdliveqty = NULL;
	SET @p_placementdate = null;
	SET @lyrbiredcost =0;
    SET @purchasecost = null;
    SET @purvalue = null;
    SET @overheadexp = 0;
    SET @goodsissuecost = 0;
    SET @p_transactiondate =  date_add(p_transactiondate, INTERVAL 1 DAY);
       

		   SELECT itemid
           INTO  @defaultfemalechickid
           FROM layerbatch WHERE id = p_layerbatchid AND companyid = p_companyid;
           
          SELECT fnc_getlayerplacementdate(p_layerbatchid,p_companyid) INTO @p_placementdate;
          
          if(@p_placementdate = @p_transactiondate) THEN
			  SELECT 
			   fnc_layerchicks_purchasecost(p_layerbatchid,p_companyid,@defaultfemalechickid) INTO
			   @lyrbiredcost;
			  --  SELECT @femalepurchasecost INTO @lyrbiredcost;
          ELSE 
			   SELECT 
			   fnc_layerchicks_purchasecost(p_layerbatchid,p_companyid,@defaultfemalechickid),
			   fnc_layerchicks_placementqty(p_layerbatchid,p_companyid,@defaultfemalechickid),
			   fnc_layerdaily_consumption_cost(p_layerbatchid,@p_placementdate,@p_transactiondate),
			   fnc_layerbatchwise_birdliveqty(p_layerbatchid,@defaultfemalechickid,@p_transactiondate,p_companyid) INTO
			    @femalepurchasecost,@femaleplacedqty,@consumptioncost,@femalebirdliveqty;
        
				SELECT (@femalepurchasecost*@femaleplacedqty) INTO @purvalue;
				SELECT fun_overhed_exp(p_layerbatchid,725,p_transactiondate,p_companyid) INTO @overheadexp;
                SELECT fnc_getgoodsissue(p_layerbatchid,725,p_transactiondate) INTO @goodsissuecost;
                SELECT fun_amortizatiobvalue_forlayer(p_layerbatchid,p_transactiondate) INTO @amortizationvalue;
                SELECT fnc_layerbatchwise_salesvalue(p_layerbatchid,725,p_transactiondate,p_companyid) INTO @salesvalue;
                SELECT ((@purvalue+@consumptioncost+@overheadexp+@goodsissuecost)-(@amortizationvalue+@salesvalue))/(@femalebirdliveqty) INTO @lyrbiredcost;
             
          END if;
          
          RETURN @lyrbiredcost;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_layer_bird_purchasecost`(
p_layerbatchid INT(11),
p_companyid INT(11),
p_transactiondate DATE
    
    
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	
	SET @lyrbiredcost= null;
	
       

           
        
          
          if(@p_placementdate = p_transactiondate) THEN
			  SELECT 
			   fnc_layerchicks_purchasecost(p_layerbatchid,p_companyid,@defaultfemalechickid) INTO
			   @lyrbiredcost;
			  --  SELECT @femalepurchasecost INTO @lyrbiredcost;
          ELSE 
			   SELECT 
			   fnc_layerchicks_purchasecost(p_layerbatchid,p_companyid,@defaultfemalechickid) INTO @lyrbiredcost;
			  
             
          END if;
          
          RETURN @lyrbiredcost;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_liftingschedule_totalweight`(
	p_scheduleid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @@sql_mode = ' ';
	SET @scheduledwt = 0;
    SET @deliveredwt = 0;
    
    SELECT IFNULL(SUM(approvedweight),0) INTO @scheduledwt
    FROM cbf_lifting_schedule_details
    WHERE lifting_schedule_id = p_scheduleid;
    
    SELECT IFNULL(SUM(totaldeliveredwt),0) INTO @deliveredwt
    FROM cbf_delivery_weights
    WHERE liftingscheduleid = p_scheduleid;
    
    SET @live_qty = 0;
    SELECT SUM(quantity) INTO @live_qty
    FROM cbf_batchbalance CBB
    LEFT JOIN cbf_lifting_schedule_details CLSD ON CLSD.cbf_batchid = CBB.cbfbatchid
    WHERE lifting_schedule_id = p_scheduleid;
    SET @scheduletrue = null;
    
    IF(@live_qty > 0) THEN
		IF(@scheduledwt > @deliveredwt OR @deliveredwt = 0) THEN
			SET @scheduletrue = 1;
        END IF;
	ELSE
		SET @scheduletrue = 0;
	END IF;

RETURN @scheduletrue;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_liveinqty`(
 p_transactiondate Date,
 p_warehousebinid INT(11),
 p_itemid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_transferinquantity = 0;
SET @p_inwardquantity = 0;
SET @p_receiptquantity = 0;
SET @p_itemquantity = 0;


    
    SELECT SUM(MM.quantity) into @p_transferinquantity
    FROM materialmovement MM 
    WHERE MM.itemid = p_itemid AND
		  transactiontypeid = 682 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate = p_transactiondate
          GROUP By MM.itemid; 
		
        
    SELECT SUM(MM.quantity) into @p_inwardquantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 681 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate = p_transactiondate
          GROUP By MM.itemid; 
    
    SELECT SUM(MM.quantity) into @p_receiptquantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 684 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate  = p_transactiondate
          GROUP By MM.itemid;  
          
          
    SELECT SUM(MM.quantity) into @p_itemquantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 685 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate = p_transactiondate
          GROUP By MM.itemid; 
		
	
RETURN  (@p_transferinquantity + @p_inwardquantity + @p_receiptquantity + @p_itemquantity);    

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_liveinqtystock`(
 p_fromdate DATE,
 p_todate DATE,
 p_warehousebinid INT(11),
 p_itemid INT(11)
) RETURNS decimal(11,0)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_transferinquantity = 0;
SET @p_inwardquantity = 0;
SET @p_receiptquantity = 0;
SET @p_itemquantity = 0;


    
    SELECT SUM(MM.quantity) into @p_transferinquantity
    FROM materialmovement MM 
    WHERE MM.itemid = p_itemid AND
		  transactiontypeid = 682 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate BETWEEN p_fromdate AND p_todate 
          GROUP By MM.itemid; 
		
        
    SELECT SUM(MM.quantity) into @p_inwardquantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 681 AND
		  MM.towarehousebinid = p_warehousebinid AND
	      MM.transactiondate BETWEEN p_fromdate AND p_todate 
          GROUP By MM.itemid; 
    
    SELECT SUM(MM.quantity) into @p_receiptquantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 684 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate BETWEEN p_fromdate AND p_todate 
          GROUP By MM.itemid;  
          
          
    SELECT SUM(MM.quantity) into @p_itemquantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 685 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate BETWEEN p_fromdate AND p_todate 
          GROUP By MM.itemid; 
		
	
RETURN  (@p_transferinquantity + @p_inwardquantity + @p_receiptquantity + @p_itemquantity);    

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_liveopeningbalance`(
p_transactiondate DATE,
p_warehousebinid INT(11),
p_itemid INT(11)
 ) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_transferinquantity = 0;
SET @p_inwardquantity = 0;
SET @p_receiptquantity = 0;
SET @p_itemquantity = 0;
SET @p_itemissuequantity = 0;
SET @p_transferoutquantity = 0;

    
    SELECT SUM(MM.quantity)  into @p_transferinquantity
    FROM materialmovement MM 
    WHERE MM.itemid = p_itemid AND
		  transactiontypeid = 682 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate < p_transactiondate
          GROUP BY MM.itemid ; 
		
        
    SELECT SUM(MM.quantity) into @p_inwardquantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 681 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate < p_transactiondate
           GROUP BY MM.itemid ; 
    
    
    SELECT SUM(MM.quantity) into @p_receiptquantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 684 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate  < p_transactiondate
		  GROUP BY MM.itemid ; 
          
          
    SELECT SUM(MM.quantity) into @p_itemquantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 685 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate < p_transactiondate
            GROUP BY MM.itemid;        
          
   SELECT SUM(MM.quantity) into @p_itemissuequantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 683 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate < p_transactiondate
            GROUP BY MM.itemid ;   
          
	SELECT SUM(MM.quantity) into @p_transferoutquantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 682 AND
		  MM.fromwarehousebinid = p_warehousebinid AND
		  MM.transactiondate < p_transactiondate
            GROUP BY MM.itemid ; 
	
RETURN  ((@p_transferinquantity + @p_inwardquantity + @p_receiptquantity + @p_itemquantity) - (@p_itemissuequantity+@p_transferoutquantity));    



END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_liveopeningbalancestock`(
p_fromdate DATE,
-- accepted varchar instead of int value for warehouseid (Savita)
p_warehouseid varchar(500),
p_itemid INT(11)
 ) RETURNS decimal(50,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_transferinquantity = 0;
SET @p_inwardquantity = 0;
SET @p_receiptquantity = 0;
SET @p_itemquantity = 0;
SET @p_issuequantity = 0;
SET @p_transferoutquantity = 0;

    
    SELECT ifnull(SUM(MM.quantity),0)  into @p_transferinquantity
    FROM materialmovement MM 
    WHERE MM.itemid = p_itemid AND
		  transactiontypeid = 682 AND
          FIND_IN_SET(MM.towarehouseid,p_warehouseid) AND
          MM.transactiondate < p_fromdate 
          GROUP BY MM.itemid ; 
		
        
    SELECT ifnull(SUM(MM.quantity),0) into @p_inwardquantity
    FROM materialmovement MM 
	WHERE MM.itemid = p_itemid AND
		   transactiontypeid = 681 AND
		   FIND_IN_SET(MM.towarehouseid,p_warehouseid) AND
		   MM.transactiondate < p_fromdate 
           GROUP BY MM.itemid; 
    
    
    SELECT ifnull(SUM(MM.quantity),0) into @p_receiptquantity
    FROM materialmovement MM 
	WHERE MM.itemid = p_itemid AND
		  transactiontypeid = 684 AND
	      FIND_IN_SET(MM.towarehouseid,p_warehouseid) AND
          MM.transactiondate < p_fromdate 
		  GROUP BY MM.itemid; 
          
          
    SELECT ifnull(SUM(MM.quantity),0) into @p_itemquantity
    FROM materialmovement MM 
	WHERE MM.itemid = p_itemid AND
		  transactiontypeid = 685 AND
		  FIND_IN_SET(MM.towarehouseid,p_warehouseid) AND
          MM.transactiondate < p_fromdate 
            GROUP BY MM.itemid;    
          
     SELECT SUM(MM.quantity) into @p_issuequantity
     FROM materialmovement MM
     WHERE  MM.transactiondate < p_fromdate AND
	 MM.itemid = p_itemid AND
	 transactiontypeid = 683 AND
     FIND_IN_SET(MM.fromwarehouseid,p_warehouseid) 
	 GROUP By MM.itemid ; 
    
          
	SELECT ifnull(SUM(MM.quantity),0) into @p_transferoutquantity
    FROM materialmovement MM 
	WHERE MM.itemid = p_itemid AND
		  transactiontypeid = 682 AND
		  FIND_IN_SET(MM.fromwarehouseid,p_warehouseid)AND
          MM.transactiondate < p_fromdate
		  GROUP BY MM.itemid ; 
	
  RETURN  ((@p_transferinquantity + @p_inwardquantity + @p_receiptquantity + @p_itemquantity) - (@p_issuequantity+@p_transferoutquantity));    

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_liveopeningbalancestockbinwise`(
p_fromdate DATE,
-- accepted varchar instead of int value for warehouseid (Savita)
p_warehouseid varchar(500),
p_itemid INT(11)
 ) RETURNS decimal(50,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_transferinquantity = 0;
SET @p_inwardquantity = 0;
SET @p_receiptquantity = 0;
SET @p_itemquantity = 0;
SET @p_issuequantity = 0;
SET @p_transferoutquantity = 0;

    
    SELECT ifnull(SUM(MM.quantity),0)  into @p_transferinquantity
    FROM materialmovement MM 
    WHERE MM.itemid = p_itemid AND
		  transactiontypeid = 682 AND
          FIND_IN_SET(MM.towarehouseid,p_warehouseid) AND
          MM.transactiondate < p_fromdate 
          GROUP BY MM.itemid ; 
		
        
    SELECT ifnull(SUM(MM.quantity),0) into @p_inwardquantity
    FROM materialmovement MM 
	WHERE MM.itemid = p_itemid AND
		   transactiontypeid = 681 AND
		   FIND_IN_SET(MM.towarehouseid,p_warehouseid) AND
		   MM.transactiondate < p_fromdate 
           GROUP BY MM.itemid; 
    
    
    SELECT ifnull(SUM(MM.quantity),0) into @p_receiptquantity
    FROM materialmovement MM 
	WHERE MM.itemid = p_itemid AND
		  transactiontypeid = 684 AND
	      FIND_IN_SET(MM.towarehouseid,p_warehouseid) AND
          MM.transactiondate < p_fromdate 
		  GROUP BY MM.itemid; 
          
          
    SELECT ifnull(SUM(MM.quantity),0) into @p_itemquantity
    FROM materialmovement MM 
	WHERE MM.itemid = p_itemid AND
		  transactiontypeid = 685 AND
		  FIND_IN_SET(MM.towarehouseid,p_warehouseid) AND
          MM.transactiondate < p_fromdate 
            GROUP BY MM.itemid;    
          
     SELECT SUM(MM.quantity) into @p_issuequantity
     FROM materialmovement MM
     WHERE  MM.transactiondate < p_fromdate AND
	 MM.itemid = p_itemid AND
	 transactiontypeid = 683 AND
     FIND_IN_SET(MM.fromwarehouseid,p_warehouseid) 
	 GROUP By MM.itemid ; 
    
          
	SELECT ifnull(SUM(MM.quantity),0) into @p_transferoutquantity
    FROM materialmovement MM 
	WHERE MM.itemid = p_itemid AND
		  transactiontypeid = 682 AND
		  FIND_IN_SET(MM.fromwarehouseid,p_warehouseid)AND
          MM.transactiondate < p_fromdate
		  GROUP BY MM.itemid ; 
	
  RETURN  ((@p_transferinquantity + @p_inwardquantity + @p_receiptquantity + @p_itemquantity) - (@p_issuequantity+@p_transferoutquantity));    

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_live_biredcost`(
p_breederbatchid INT(11),
p_companyid INT(11),
p_transactiondate DATE
    
    
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @defaultmalechickid = null;
	SET @defaultfemalechickid = null;
	SET @malepurchasecost = null;
	SET @femalepurchasecost= NUll;
	SET @maleplaceqty = NUll;
	SET @femaleplacedqty = NUll;
	SET @consumptioncost = null;
	SET @malebirdliveqty = NULL;
	SET @femalebirdliveqty = NULL;
	SET @p_placementdate = null;
	SET @biredcost = 0;
    SET @purchasecost = null;
    SET @purvalue = null;
    SET @overheadexp = 0;
    SET @goodsissuecost = 0;
    SET @amortizatiovvalue = 0;
    SET @salesvalue = 0;
    SET @p_transactiondate = date_add(p_transactiondate, INTERVAL 1 DAY);
       

		   SELECT maleitemid, femaleitemid
           INTO @defaultmalechickid, @defaultfemalechickid
           FROM breederbatch WHERE id = p_breederbatchid;
           
          SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @p_placementdate;
          
          if(@p_placementdate = @p_transactiondate) THEN
			  SELECT 
			   fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@defaultmalechickid),
			   fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@defaultfemalechickid) ,
			   fnc_chicks_placementqty(p_breederbatchid,p_companyid,@defaultmalechickid) ,
			   fnc_chicks_placementqty(p_breederbatchid,p_companyid,@defaultfemalechickid) INTO 
			   @malepurchasecost, @femalepurchasecost,@maleplaceqty, @femaleplacedqty;
			   SELECT (((@malepurchasecost*@maleplaceqty)+(@femalepurchasecost*@femaleplacedqty))/(@maleplaceqty+@femaleplacedqty)) INTO @biredcost;
          ELSE 
			   SELECT 
			   fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@defaultmalechickid),
			   fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@defaultfemalechickid) ,
			   fnc_chicks_placementqty(p_breederbatchid,p_companyid,@defaultmalechickid) ,
			   fnc_chicks_placementqty(p_breederbatchid,p_companyid,@defaultfemalechickid),
			   fnc_daily_consumption_cost(p_breederbatchid,@p_placementdate,@p_transactiondate),
			   fnc_breeder_batchwise_birdliveqty(p_breederbatchid,@defaultmalechickid,@p_transactiondate,p_companyid),
			   fnc_breeder_batchwise_birdliveqty(p_breederbatchid,@defaultfemalechickid,@p_transactiondate,p_companyid) INTO
			     @malepurchasecost, @femalepurchasecost,@maleplaceqty, @femaleplacedqty,@consumptioncost,@malebirdliveqty,@femalebirdliveqty;
        
				SELECT ((@malepurchasecost*@maleplaceqty)+(@femalepurchasecost*@femaleplacedqty)) INTO @purvalue;
				SELECT ((@malepurchasecost*@malebirdliveqty)+(@femalepurchasecost*@femalebirdliveqty)) INTO @purchasecost;
                SELECT fun_overhed_exp(p_breederbatchid,721,p_transactiondate,p_companyid) INTO @overheadexp;
				SELECT fnc_getgoodsissue(p_breederbatchid,721,p_transactiondate) INTO @goodsissuecost;
				SELECT fun_amortizatiobvalue_forbreeder(p_breederbatchid,p_transactiondate) INTO @amortizatiovvalue;
                SELECT fnc_breederbatchwise_salesvalue(p_breederbatchid,721,p_transactiondate,p_companyid) INTO @salesvalue;
				SELECT ((((@purvalue+@consumptioncost+@overheadexp+@goodsissuecost)-(@amortizatiovvalue+@salesvalue)))/(@femalebirdliveqty+@malebirdliveqty)) INTO @biredcost;
             
          END if;
          
          RETURN @biredcost;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_live_biredcost_for_nonproductivebird`(
	p_breederbatchid INT(11),
	p_companyid INT(11),
	p_transactiondate DATE
    
    
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @defaultmalechickid = null;
	SET @defaultfemalechickid = null;
	SET @malepurchasecost = null;
	SET @femalepurchasecost= NUll;
	SET @maleplaceqty = NUll;
	SET @femaleplacedqty = NUll;
	SET @consumptioncost = null;
	SET @malebirdliveqty = NULL;
	SET @femalebirdliveqty = NULL;
	SET @p_placementdate = null;
	SET @biredcost = 0;
    SET @purchasecost = null;
    SET @purvalue = null;
    SET @overheadexp = 0;
    SET @goodsissuecost = 0;
    SET @nonproductiovebirdqty = 0;
    SET @amortizatiovvalue = 0;
    SET @salesvalue = 0;
    SET @p_transactiondate = date_add(p_transactiondate, INTERVAL 1 DAY);
       

		   SELECT maleitemid, femaleitemid
           INTO @defaultmalechickid, @defaultfemalechickid
           FROM breederbatch WHERE id = p_breederbatchid;
           
          SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @p_placementdate;
          
          if(@p_placementdate = @p_transactiondate) THEN
			  SELECT 
			   fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@defaultmalechickid),
			   fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@defaultfemalechickid) ,
			   fnc_chicks_placementqty(p_breederbatchid,p_companyid,@defaultmalechickid) ,
			   fnc_chicks_placementqty(p_breederbatchid,p_companyid,@defaultfemalechickid) INTO 
			   @malepurchasecost, @femalepurchasecost,@maleplaceqty, @femaleplacedqty;
			   SELECT (((@malepurchasecost*@maleplaceqty)+(@femalepurchasecost*@femaleplacedqty))/(@maleplaceqty+@femaleplacedqty)) INTO @biredcost;
          ELSE 
			   SELECT 
			   fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@defaultmalechickid),
			   fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@defaultfemalechickid) ,
			   fnc_chicks_placementqty(p_breederbatchid,p_companyid,@defaultmalechickid) ,
			   fnc_chicks_placementqty(p_breederbatchid,p_companyid,@defaultfemalechickid),
			   fnc_daily_consumption_cost(p_breederbatchid,@p_placementdate,@p_transactiondate),
			   fnc_breeder_batchwise_birdliveqty(p_breederbatchid,@defaultmalechickid,@p_transactiondate,p_companyid),
			   fnc_breeder_batchwise_birdliveqty(p_breederbatchid,@defaultfemalechickid,@p_transactiondate,p_companyid) INTO
			     @malepurchasecost, @femalepurchasecost,@maleplaceqty, @femaleplacedqty,@consumptioncost,@malebirdliveqty,@femalebirdliveqty;
        
				SELECT ((@malepurchasecost*@maleplaceqty)+(@femalepurchasecost*@femaleplacedqty)) INTO @purvalue;
				SELECT ((@malepurchasecost*@malebirdliveqty)+(@femalepurchasecost*@femalebirdliveqty)) INTO @purchasecost;
                SELECT fun_overhed_exp(p_breederbatchid,721,p_transactiondate,p_companyid) INTO @overheadexp;
				SELECT fnc_getgoodsissue(p_breederbatchid,721,p_transactiondate) INTO @goodsissuecost;
				SELECT spc_getbatchwise_nonproductive_bird(p_breederbatchid,p_companyid,p_transactiondate,@defaultfemalechickid) INTO @nonproductiovebirdqty;
                 SELECT fun_amortizatiobvalue_forbreeder(p_breederbatchid,p_transactiondate) INTO @amortizatiovvalue;
                SELECT fnc_breederbatchwise_salesvalue(p_breederbatchid,721,p_transactiondate,p_companyid) INTO @salesvalue;
				SELECT (((@purvalue+@consumptioncost+@overheadexp+@goodsissuecost)-( @amortizatiovvalue+@salesvalue))/((@femalebirdliveqty+@malebirdliveqty)-(@malebirdliveqty+@nonproductiovebirdqty))) INTO @biredcost;
             
          END if;
          
          RETURN @biredcost;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_lyr_transaction_date_waise_liveqty`(
	p_layerbatchid INT,
    p_layershedid INT,
    p_itemid INT,
    p_todate DATE,
    p_companyid INT
    
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @totalcullsandmortality = 0;
    SET @transferedquantity = 0;
    SET @transferedinquantity = 0;
    SET @inward = 0;
    SET @reciptqty = 0;
    
  SELECT fnc_getlayerplacementdate(p_layerbatchid,p_companyid) INTO @placementdate;
    SELECT warehouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM layershed
    WHERE id =  p_layershedid;
    
	SELECT IFNULL(SUM(quantity), 0) into @totalcullsandmortality
    FROM materialmovement
    WHERE transactiondate <= p_todate AND
	companyid = p_companyid AND
	transactiondate >= @placementdate AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
  
  
	-- calculate transfered male/female quantity befor p_todate
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedquantity
    FROM materialmovement
    WHERE transactiondate <= p_todate AND
	companyid = p_companyid AND
	transactiondate >= @placementdate AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
        
        
        -- calculate transfered in male/female quantity befor p_todate
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedinquantity
    FROM materialmovement
    WHERE transactiondate <= p_todate AND
	companyid = p_companyid AND
	transactiondate >= @placementdate AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
 SELECT IFNULL(SUM(quantity), 0) into @inward
    FROM materialmovement
    WHERE transactiondate <= p_todate AND
	companyid = p_companyid AND
	transactiondate >= @placementdate AND
    transactiontypeid = 681 AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
     SELECT IFNULL(SUM(quantity), 0) into @recipt
    FROM materialmovement
    WHERE transactiondate <= p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
     SELECT IFNULL(SUM(quantity), 0) into @opening
    FROM materialmovement
    WHERE transactiondate <= p_todate AND
	companyid = p_companyid AND
	transactiondate >= @placementdate AND
    transactiontypeid = 685 AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
        
    SELECT (@inward+@reciptqty) INTO @openingbalance;
    
	RETURN (IFNULL(@openingbalance,0)+ IFNULL(@opening,0)+ IFNULL(@transferedinquantity,0))- IFNULL(@totalcullsandmortality, 0) - IFNULL(@transferedquantity, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_lyr_transaction_date_waise_liveqtyope`(
	p_layerbatchid INT,
    p_layershedid INT,
    p_itemid INT,
    p_todate DATE,
    p_companyid INT
    
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @totalcullsandmortality = 0;
    SET @transferedquantity = 0;
    SET @transferedinquantity = 0;
    SET @inward = 0;
    SET @reciptqty = 0;
    
  SELECT fnc_getlayerplacementdate(p_layerbatchid,p_companyid) INTO @placementdate;
    SELECT warehouseid,warehousebinid INTO @warehouseid,@warehousebinid
	FROM layershed
    WHERE id =  p_layershedid;
    
	SELECT IFNULL(SUM(quantity), 0) into @totalcullsandmortality
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
	transactiondate >= @placementdate AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
  
  
	-- calculate transfered male/female quantity befor p_todate
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedquantity
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
	transactiondate >= @placementdate AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
     fromwarehouseid = @warehouseid AND
    fromwarehousebinid =  @warehousebinid;
        
        
        -- calculate transfered in male/female quantity befor p_todate
    
	SELECT IFNULL(SUM(quantity), 0) into @transferedinquantity
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
	transactiondate >= @placementdate AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
 SELECT IFNULL(SUM(quantity), 0) into @inward
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
	transactiondate >= @placementdate AND
    transactiontypeid = 681 AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
     SELECT IFNULL(SUM(quantity), 0) into @recipt
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    transactiondate >=  @placementdate AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
     
     SELECT IFNULL(SUM(quantity), 0) into @opening
    FROM materialmovement
    WHERE transactiondate < p_todate AND
	companyid = p_companyid AND
	transactiondate >= @placementdate AND
    transactiontypeid = 685 AND
     itemid = p_itemid AND
     towarehouseid = @warehouseid AND
     towarehousebinid =  @warehousebinid;
        
    SELECT (@inward+@reciptqty) INTO @openingbalance;
    
	RETURN (IFNULL(@openingbalance,0)+ IFNULL(@opening,0)+ IFNULL(@transferedinquantity,0))- IFNULL(@totalcullsandmortality, 0) - IFNULL(@transferedquantity, 0);

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_openingbalance`(
p_transactiondate DATE,
p_warehousebinid INT(11),
p_itemid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @p_transferinquantity = 0;
SET @p_inwardquantity = 0;
SET @p_receiptquantity = 0;
SET @p_itemquantity = 0;
SET @p_itemissuequantity = 0;
SET @p_transferoutquantity = 0;

	SELECT SUM(MM.quantity)  into @p_transferinquantity
    FROM materialmovement MM 
    WHERE MM.itemid = p_itemid AND
		  transactiontypeid = 682 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate <= p_transactiondate
           GROUP BY MM.itemid;
          
          
   SELECT SUM(MM.quantity) into @p_inwardquantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 681 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate <= p_transactiondate
           GROUP BY MM.itemid ;     
           
   SELECT SUM(MM.quantity) into @p_receiptquantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 684 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate  <= p_transactiondate
		  GROUP BY MM.itemid ;   
          
   SELECT SUM(MM.quantity) into @p_itemquantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 685 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate <= p_transactiondate
            GROUP BY MM.itemid;        
          
   SELECT SUM(MM.quantity) into @p_itemissuequantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 683 AND
		  MM.towarehousebinid = p_warehousebinid AND
		  MM.transactiondate <= p_transactiondate
            GROUP BY MM.itemid ;   
          
	SELECT SUM(MM.quantity) into @p_transferoutquantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 682 AND
		  MM.fromwarehousebinid = p_warehousebinid AND
		  MM.transactiondate <= p_transactiondate
            GROUP BY MM.itemid ; 
	
RETURN  ((@p_transferinquantity + @p_inwardquantity + @p_receiptquantity + @p_itemquantity) - (@p_itemissuequantity+@p_transferoutquantity));    

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_overhed_exp`(
	p_batchid INT,
    p_moduleid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS decimal(20,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @overheadexp = 0;
SET @ageinweeks = null;
SET @p_placementdate = null;
 SET @@sql_mode = '';
 if(p_moduleid = 721) THEN
  SELECT fnc_getplacementdate(p_batchid,p_companyid) INTO @p_placementdate;
  END IF;
  if(p_moduleid = 725) THEN
  SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @p_placementdate;
  END IF;
  
  if(p_moduleid = 723) THEN
  SELECT fnc_getcbfplacementdate(p_batchid,p_companyid) INTO @p_placementdate;
  END IF;
 SELECT TRUNCATE (((DATEDIFF(p_transactiondate,@p_placementdate)/7)+1),0) INTO @ageinweeks;
      if(@ageinweeks > 24 AND p_moduleid = 721)THEN
      SELECT date_add(@p_placementdate,INTERVAL 167 DAY) INTO @transactiondate;
      END IF;
      if(@ageinweeks <= 24 AND p_moduleid = 721) THEN
       SELECT p_transactiondate INTO @transactiondate;
	  END IF;
      if(@ageinweeks > 19 AND p_moduleid = 725)THEN
      SELECT date_add(@p_placementdate,INTERVAL 132 DAY) INTO @transactiondate;
      END IF;
       if(@ageinweeks <= 19 AND p_moduleid = 725)THEN
       SELECT p_transactiondate INTO @transactiondate;
	  END IF;
   
	SELECT IFNULL(SUM(JA.dramount),0) INTO @overheadexp
	FROM journalentryfor_amortization JA
    WHERE 
		JA.batchid = p_batchid AND 
        JA.moduleid = p_moduleid AND
        JA.jedate <= @transactiondate
   group by JA.batchid;
	RETURN @overheadexp;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_overhed_expafter19week`(
	p_batchid INT,
    p_moduleid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS decimal(20,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @overheadexp = 0;
SET @ageinweeks = null;
SET @p_placementdate = null;
 SET @@sql_mode = '';
 
  SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @p_placementdate;
  
  
	SELECT IFNULL(SUM(JA.dramount),0) INTO @overheadexp
	FROM journalentryfor_amortization JA
    WHERE 
		JA.batchid = p_batchid AND 
        JA.moduleid = p_moduleid AND
        JA.jedate > p_transactiondate
   group by JA.batchid;
	RETURN @overheadexp;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_overhed_expafter24week`(
	p_batchid INT,
    p_moduleid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS decimal(20,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @overheadexp = 0;
SET @ageinweeks = null;
SET @p_placementdate = null;
 SET @@sql_mode = '';
 
  SELECT fnc_getplacementdate(p_batchid,p_companyid) INTO @p_placementdate;
  
  
	SELECT IFNULL(SUM(JA.dramount),0) INTO @overheadexp
	FROM journalentryfor_amortization JA
    WHERE 
		JA.batchid = p_batchid AND 
        JA.moduleid = p_moduleid AND
        JA.jedate > p_transactiondate
   group by JA.batchid;
	RETURN @overheadexp;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_overhed_expbefore19week`(
	p_batchid INT,
    p_moduleid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS decimal(20,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @overheadexp = 0;
SET @ageinweeks = null;
SET @p_placementdate = null;
 SET @@sql_mode = '';
 
  SELECT fnc_getlayerplacementdate(p_batchid,p_companyid) INTO @p_placementdate;
  
  
	SELECT IFNULL(SUM(JA.dramount),0) INTO @overheadexp
	FROM journalentryfor_amortization JA
    WHERE 
		JA.batchid = p_batchid AND 
        JA.moduleid = p_moduleid AND
        JA.jedate <= p_transactiondate
   group by JA.batchid;
	RETURN @overheadexp;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_overhed_expbefore24week`(
	p_batchid INT,
    p_moduleid INT,
    p_transactiondate DATE,
    p_companyid INT
    
) RETURNS decimal(20,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @overheadexp = 0;
SET @ageinweeks = null;
SET @p_placementdate = null;
 SET @@sql_mode = '';
 
  SELECT fnc_getplacementdate(p_batchid,p_companyid) INTO @p_placementdate;
  
  
	SELECT IFNULL(SUM(JA.dramount),0) INTO @overheadexp
	FROM journalentryfor_amortization JA
    WHERE 
		JA.batchid = p_batchid AND 
        JA.moduleid = p_moduleid AND
        JA.jedate <= p_transactiondate
   group by JA.batchid;
	RETURN @overheadexp;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_productionqty`(
p_breederbatchid VARCHAR(200),
p_shedid VARCHAR(200),
p_transactiondate DATE,
p_companyid INT
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	  SET @qty = 0;
      SET @placementdate = null;
     -- SELECT fnc_getcbfplacementdate(p_batchid,p_companyid) INTO @placementdate;
     
    
		SELECT IFNULL((SUM(ECD.quantity)), 0) into @qty
           
		FROM eggsdistributiondetail  ED
		LEFT JOIN item I ON ED.itemid = I.id
        LEFT JOIN eggscollection EC ON EC.id = ED.eggscollectionid
        LEFT JOIN employee E ON E.id = EC.createdby
        LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id -- AND ECD.shedid = ED.shedid			
			
            
	WHERE ED.eggscollectionid in (select id from eggscollection  where  FIND_IN_SET(breederbatchid,p_breederbatchid) and FIND_IN_SET(shedid,p_shedid) AND statusid = 803)
	AND ED.collectiondate = p_transactiondate
	AND  ED.statusid = 842;
    -- group by EC.id;
               
					
RETURN @qty;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_purchse_biredcost`(
p_breederbatchid INT(11),
p_companyid INT(11),
p_transactiondate DATE
    
    
) RETURNS decimal(30,6)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @defaultmalechickid = null;
	SET @defaultfemalechickid = null;
	SET @malepurchasecost = null;
	SET @femalepurchasecost= NUll;
	SET @maleplaceqty = NUll;
	SET @femaleplacedqty = NUll;
    SET @birdcost = null;
	
       

		   SELECT maleitemid, femaleitemid
           INTO @defaultmalechickid, @defaultfemalechickid
           FROM breederbatch WHERE id = p_breederbatchid;
           
          SELECT fnc_getplacementdate(p_breederbatchid,p_companyid) INTO @p_placementdate;
          
          if(@p_placementdate = p_transactiondate) THEN
			  SELECT 
			   fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@defaultmalechickid),
			   fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@defaultfemalechickid) ,
			   fnc_chicks_placementqty(p_breederbatchid,p_companyid,@defaultmalechickid) ,
			   fnc_chicks_placementqty(p_breederbatchid,p_companyid,@defaultfemalechickid) INTO 
			   @malepurchasecost, @femalepurchasecost,@maleplaceqty, @femaleplacedqty;
			   SELECT (((@malepurchasecost*@maleplaceqty)+(@femalepurchasecost*@femaleplacedqty))/(@maleplaceqty+@femaleplacedqty)) INTO @birdcost;
          ELSE 
			   SELECT 
			   fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@defaultmalechickid),
			   fnc_chicks_purchasecost(p_breederbatchid,p_companyid,@defaultfemalechickid) ,
			   fnc_chicks_placementqty(p_breederbatchid,p_companyid,@defaultmalechickid) ,
			   fnc_chicks_placementqty(p_breederbatchid,p_companyid,@defaultfemalechickid) INTO
			   @malepurchasecost, @femalepurchasecost,@maleplaceqty, @femaleplacedqty;
        
				SELECT ((@malepurchasecost*@maleplaceqty)+(@femalepurchasecost*@femaleplacedqty)) INTO @birdcost;
				
             
          END if;
          
          RETURN @biredcost;

END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `fun_transfer_in_quntity`(
 p_fromdate DATE,
 p_todate DATE,
-- accepted varchar instead of int value for warehouseid
 p_warehouseids VARCHAR(200),
 p_itemid VARCHAR(200),
 p_companyid INT(11)
) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
	SET @p_receiptquantity = 0;
    SET @p_itemopningquantity = 0;
    
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE 
     FIND_IN_SET(itemid, p_itemid) AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    find_in_set(towarehouseid,p_warehouseids) AND
	transactiondate BETWEEN p_fromdate AND p_todate
    group by itemid order by itemid; 
    
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE 
    FIND_IN_SET(itemid, p_itemid) AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    find_in_set(towarehouseid,p_warehouseids) AND
	transactiondate BETWEEN p_fromdate AND p_todate
    group by itemid order by itemid;
    
      SELECT SUM(MM.quantity) into @p_itemopningquantity
    FROM materialmovement MM 
	WHERE  MM.itemid = p_itemid AND
		  transactiontypeid = 685 AND
		  find_in_set(MM.towarehouseid,p_warehouseids) AND
		  MM.transactiondate BETWEEN p_fromdate AND p_todate 
          GROUP By MM.itemid; 
    

    

   RETURN (@p_inwardquantity + @p_transferinquantity+@p_itemopningquantity);
      
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `layer_batchwise_ce_eggscollection`(
 p_batchid INT,
 p_transactiondate DATE,
 p_companyid INT) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @ce_eggsqty = 0;
	SElECT
		SUM(LED.quantity) INTO @ce_eggsqty
		
	FROM 
		layereggscollection LEC
	inner join layereggsdistributiondetail LED ON LED.eggscollectionid = LEC.id AND LED.itemtypeid = 1132 AND LED.statusid = 1110
	WHERE LEC.layerbatchid = p_batchid AND LEC.collectiondate = p_transactiondate 
    AND LEC.companyid = p_companyid AND
    LEC.statusid = 1091 ;

RETURN @ce_eggsqty;

	
 
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `layer_batchwise_eggscollection`(
 p_batchid INT,
 p_transactiondate DATE,
 p_companyid INT) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @eggsqty = 0;
	SElECT
		SUM(LED.quantity) INTO @eggsqty
		
	FROM 
		layereggscollection LEC
		LEFT JOIN layereggscollectiondetail LED ON LED.eggscollectionid = LEC.id 
	WHERE LEC.layerbatchid = p_batchid AND LEC.collectiondate = p_transactiondate 
    AND LEC.companyid = p_companyid AND
    LEC.statusid = 1091 ;

RETURN @eggsqty;

	
 
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `lyr_datewise_body_weight`(
 p_layerbatchid INT,
 p_itemid INT,
 p_transactiondate DATE,
 p_companyid INT) RETURNS decimal(15,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @body_weight = null;
SELECT
       IFnull(LDM.avgweight,0) INTO  @body_weight
FROM layerdailytransaction LDT
Inner JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id  AND LDM.itemid = p_itemid

WHERE
		LDT.layerbatchid = p_layerbatchid
		AND LDT.transactiondate = p_transactiondate;
               
RETURN @body_weight;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `new_calculatefeed`(
 p_transactiondate Date,
 p_warehousebinid INT(11),
 p_itemid INT(11),
 p_companyid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    
SELECT GROUP_CONCAT(warehousebinid) INTO @warehousebinids
	FROM cbf_farmerenquiry_sheddimensiondetail
    WHERE warehousebinid =  p_warehousebinid;   
    
SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    itemid = p_itemid AND
    towarehousebinid= @warehousebinids;
    
SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    towarehousebinid = @warehousebinids;    
    
SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    fromwarehousebinid =  @warehousebinids;   
    
SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
    fromwarehousebinid =  @warehousebinids;   
    
SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate < p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
     itemid = p_itemid AND
    towarehousebinid =  @warehousebinids;  
    
SELECT IFNULL(SUM(quantity), 0) into @p_itemquantity
    FROM cbf_dailyconsumption
    WHERE companyid = p_companyid AND
    consumptiontypeid = 861 AND
     itemid = p_itemid;
           
    
RETURN (@p_itemquantity + @p_inwardquantity + @p_transferinquantity + @p_receiptquantity) - (@p_issuequantity + @p_transferoutquantity);    



END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `spc_getbatchwise_nonproductive_bird`(
	p_batchid INT,
    p_companyid INT,
    p_transactiondate DATE,
    p_itemid INT 
    ) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET  @nonproductivebirdqty = 0;
			select  IFNULL(SUM(quantity),0) INTO @nonproductivebirdqty FROM breederbatchtransfer BT
				LEFT JOIN breederbatchtransferdetail BTD ON BTD.breederbatchtransferid = BT.id AND BTD.itemid = p_itemid
				WHERE breederbatchid = p_batchid
				AND BTD.nonproductivebird = 1
				AND BT.companyid = p_companyid
            --    AND BT.transferdate <= p_transactiondate
			group by  BT.breederbatchid;

	RETURN @nonproductivebirdqty;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION `spc_getbatchwise_nonproductive_bird_layer`(
	p_batchid INT,
    p_companyid INT,
    p_transactiondate DATE,
    p_itemid INT 
    ) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET  @nonproductivebirdqty = 0;
			select  IFNULL(SUM(LTD.quantity),0) INTO @nonproductivebirdqty FROM layerbatchtransfer LT
				LEFT JOIN layerbatchtransferdetail LTD ON LTD.layerbatchtransferid = LT.id AND LTD.itemid = p_itemid
				WHERE layerbatchid = p_batchid
				AND LTD.nonproductivebird = 1
				AND LT.companyid = p_companyid
            --    AND BT.transferdate <= p_transactiondate
			group by  LT.layerbatchid;

	RETURN @nonproductivebirdqty;
END$$
DELIMITER ;



DROP procedure IF EXISTS `spc_salesdelivery_itemlivestock`;

DELIMITER $$

CREATE PROCEDURE `spc_salesdelivery_itemlivestock`(
    IN p_warehouseid INT,
    IN p_warehousebinid INT,
    IN p_itemgroupid INT,
    IN p_companyid INT
)
BEGIN

SET @@sql_mode = '';
    
SELECT I.id,
		MM.itemid,
		I.itemcode,
		I.itemgroupid,
		I.itemname,
		I.itemunitid,
		I.isgst,
		I.materialtypeid,
		I.hsnid,
		I.taxcategoryid,
		REF1.refname as taxcategory,
		MM.itembatch,
		IFNULL((SUM(MM.itemvalue)/SUM(MM.quantity)),0) as unitcost,
		CASE
			WHEN IFNULL(fnc_consumptionlivestock(itemid, p_warehouseid, p_warehousebinid, p_companyid),0) > 0 THEN fnc_consumptionlivestock(itemid, p_warehouseid, p_warehousebinid, p_companyid)
		END as stockquantity
	FROM
		materialmovement MM
		LEFT JOIN item I ON MM.itemid = I.id
		LEFT JOIN `reference` REF1 ON I.taxcategoryid = I.id
		-- LEFT JOIN hsnmaster HM ON I.hsnid = HM.id
	WHERE
		MM.towarehouseid = p_warehouseid
		AND MM.towarehousebinid = p_warehousebinid 
		AND I.itemgroupid = p_itemgroupid
		AND MM.companyid = p_companyid
   
    GROUP BY itemid;
        
END$$

DELIMITER ;


DROP procedure IF EXISTS `spc_factormaster_save`;

DELIMITER $$
CREATE PROCEDURE `spc_factormaster_save`(
 IN p_id INT(11),
 IN p_convertedunitid INT(11),
 IN p_baseunitid INT(11),
 IN p_factor INT(11),
 IN p_companyid INT(11),
 IN p_userid INT(11),
 OUT out_id INT
 )
BEGIN
SET @action = null;

 IF EXISTS(
            SELECT convertedunitid,baseunitid,factor from factormaster where (convertedunitid = p_convertedunitid AND baseunitid = p_baseunitid) 
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
BEGIN
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO factormaster(convertedunitid, baseunitid, factor,companyid)
        VALUES (p_convertedunitid, p_baseunitid, p_factor,p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE factormaster
        SET convertedunitid = p_convertedunitid,
			baseunitid = p_baseunitid,
            factor = p_factor,
            companyid = p_companyid,
            companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'factormaster', out_id, @action, p_userid);

END;
        
	END IF;

END$$

DELIMITER ;

DROP procedure IF EXISTS `spc_tax_save`;

DELIMITER $$
CREATE PROCEDURE `spc_tax_save`(
   IN p_id INT(11),
   IN p_taxcode VARCHAR(50),
   IN p_taxname VARCHAR(200),
   IN p_taxpercent DECIMAL(8,3),
   IN p_taxtypeid INT,
   IN p_combinedtaxes VARCHAR(100),
   IN p_inputledgerid INT(11),
   IN p_outputledgerid INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF EXISTS(
            SELECT taxcode, taxname from tax where LOWER(taxcode) = LOWER(p_taxcode) AND taxname = p_taxname
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE
		BEGIN
    
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO tax 
						(id, taxcode, taxname, taxpercent, taxtypeid, combinedtaxes, inputledgerid, outputledgerid, companyid)
					VALUES 
						(p_id,  p_taxcode, p_taxname, p_taxpercent, p_taxtypeid, p_combinedtaxes, p_inputledgerid, p_outputledgerid, p_companyid);
			  SET @action = 'INSERT';
			ELSE
			
				UPDATE tax
						SET taxcode = p_taxcode,
							taxname = p_taxname,
							taxpercent = p_taxpercent,
							taxtypeid = p_taxtypeid,
							combinedtaxes = p_combinedtaxes,
							inputledgerid = p_inputledgerid,
							outputledgerid = p_outputledgerid,
							companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
				   SET @action = 'UPDATE';     
						
						
			END IF;
			
			SELECT LAST_INSERT_ID() INTO out_id; 
			
		   -- record log
		   CALL spc_commonlog_save(p_companyid, 'tax', out_id, @action, p_userid);
		END;
	END IF;
END$$

DELIMITER ;

DROP procedure IF EXISTS `spc_costcenter_save`;

DELIMITER $$
CREATE PROCEDURE `spc_costcenter_save`(
   IN p_id INT(11),
   IN p_dimenssioncode VARCHAR(45),
   IN p_dimenssionname VARCHAR(100),
   IN p_description VARCHAR(300),
   IN p_isactive TINYINT(4),
   IN p_isparent TINYINT(4),
   IN p_parentid INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   IN p_accounts_dimensionid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF EXISTS(
            SELECT id from costcenter where LOWER(dimenssioncode) = LOWER(p_dimenssioncode) AND dimenssionname = p_dimenssionname
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE
		BEGIN
    
				IF(NULLIF(p_id, '0') IS NULL) THEN
				
					INSERT INTO costcenter 
							(id, dimenssioncode, dimenssionname, description, isactive, isparent, parentid, companyid, accounts_dimensionid)
						VALUES 
							(p_id, p_dimenssioncode, p_dimenssionname, p_description, p_isactive, p_isparent, p_parentid, p_companyid, p_accounts_dimensionid);
				  SET @action = 'INSERT';
				ELSE
				
					UPDATE costcenter
							SET dimenssioncode = p_dimenssioncode,
								dimenssionname = p_dimenssionname,
								description = p_description,
								isactive = p_isactive,
								isparent = p_isparent,
								parentid = p_parentid,
								companyid = p_companyid,
								accounts_dimensionid = p_accounts_dimensionid,
							id = LAST_INSERT_ID(id)
						WHERE
							id = p_id
							AND companyid = p_companyid;
					   SET @action = 'UPDATE';     
							
							
				END IF;
				
				SELECT LAST_INSERT_ID() INTO out_id; 
				
			   -- record log
			   CALL spc_commonlog_save(p_companyid, 'costcenter', out_id, @action, p_userid);
			END;
		END IF;
END$$

DELIMITER ;

DROP procedure IF EXISTS `spc_dimension_save`;

DELIMITER $$
CREATE PROCEDURE `spc_dimension_save`(
   IN p_id INT(11),
   IN p_dimensioncode VARCHAR(100),
   IN p_dimensionname VARCHAR(150),
   IN p_description VARCHAR(100),
   IN p_isactive TINYINT(4),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF EXISTS(
            SELECT id from accounts_dimension where LOWER(dimensionname) = LOWER(p_dimensionname) AND dimensioncode = p_dimensioncode
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE
		BEGIN
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO accounts_dimension 
						(id, dimensioncode,
						   dimensionname,
						   description,
						   isactive, companyid)
					VALUES 
						(p_id, p_dimensioncode,
						   p_dimensionname,
						   p_description,
						   p_isactive, p_companyid);
			  SET @action = 'INSERT';
			ELSE
			
				UPDATE accounts_dimension
						SET dimensioncode = p_dimensioncode,
							dimensionname = p_dimensionname,
							description = p_description,
							isactive = p_isactive,
							companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
				   SET @action = 'UPDATE';     
			END IF;
		
			SELECT LAST_INSERT_ID() INTO out_id; 
			
		   -- record log
		   CALL spc_commonlog_save(p_companyid, 'accounts_dimension', out_id, @action, p_userid);
   
		END;
    END IF;
END$$

DELIMITER ;

