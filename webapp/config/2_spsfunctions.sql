

CREATE PROCEDURE `spc_accountledgers_search`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		 id,
         coaname as ledgername,
         glcode
         
	FROM
		chartofaccount 
        
	WHERE
		 companyid = p_companyid
         AND coatypeid = 1003; -- ledger
END;



CREATE PROCEDURE `spc_acknowledgementslipdetail_delete`(
IN p_id INT(11)

)
BEGIN
DELETE
FROM feedmill_acknowledgementslipdetail
WHERE   id = p_id;

END;



CREATE PROCEDURE `spc_acknowledgementslipdetail_save`(
IN p_id INT(11),
    IN p_ackid INT(11),
    IN p_purchaseorderid DECIMAL(9,3),
    IN p_itemid DECIMAL(9,3),
    IN p_quantity INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_acknowledgementslipdetail(id,ackid,purchaseorderid,itemid,quantity,companyid)
        VALUES (p_id, p_ackid,p_purchaseorderid,p_itemid,p_quantity,p_companyid);
        
        SET @action = 'INSERT';
        
        ELSE
        UPDATE feedmill_acknowledgementslipdetail
        SET  id = p_id,
			 ackid = p_ackid,
            purchaseorderid = p_purchaseorderid,
            itemid = p_itemid,
            quantity = p_quantity,
            companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_acknowledgementslipdetail', out_id, @action, p_userid);




END;



CREATE PROCEDURE `spc_acknowledgementslipdetail_search`( 
IN p_ackid INT(11)
)
BEGIN
SELECT  ASD.id,
	    ASD.ackid,
        ASD.purchaseorderid,
        ASD.itemid,
        I.itemname,
        ASD.quantity
       
           
    FROM feedmill_acknowledgementslipdetail ASD
    LEFT JOIN item I ON ASD.itemid = I.id
    
    
    WHERE  
		 ASD.ackid = p_ackid;

END;



CREATE PROCEDURE `spc_acknowledgementslipdetail_select`(
IN p_id INT(11),
IN p_companyid INT(11)
)
BEGIN
SELECT id,
		   ackid,
           purchaseorderid,
           itemid,
           quantity,
           companyid
		
				
	FROM feedmill_acknowledgementslipdetail

	WHERE companyid = p_companyid
	AND	id = p_id;            

END;



CREATE PROCEDURE `spc_acknowledgementslip_delete`(
IN p_id INT(11))
BEGIN
DELETE
FROM feedmill_acknowledgementslip
WHERE   id = p_id;

END;



CREATE PROCEDURE `spc_acknowledgementslip_save`(
IN p_id INT(11),
IN p_slipdate DATE,
IN p_vehicleno VARCHAR(45),
IN p_vehicleweight DECIMAL(9,3),
IN p_receivedby VARCHAR(45),
IN p_materialweight DECIMAL(12,3),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT
)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_acknowledgementslip(id, slipdate,vehicleno,vehicleweight,receivedby,materialweight, companyid)
        VALUES (p_id, p_slipdate,p_vehicleno,p_vehicleweight,p_receivedby,p_materialweight, p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_acknowledgementslip
        SET slipdate = p_slipdate,
			vehicleno = p_vehicleno,
            vehicleweight = p_vehicleweight,
            receivedby = p_receivedby,
            materialweight = p_materialweight,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_acknowledgementslip', out_id, @action, p_userid);






END;



CREATE PROCEDURE `spc_acknowledgementslip_search`(
IN p_companyid INT(11) 
)
BEGIN
SELECT id,
           DATE_FORMAT(slipdate,'%d/%m/%Y') as slipdate,
           vehicleno,
           vehicleweight,
           receivedby,
           materialweight
           
	FROM feedmill_acknowledgementslip
    
    WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_acknowledgementslip_select`(
IN p_id INT(11),
IN p_companyid INT(11))
BEGIN
SELECT 		DATE_FORMAT(slipdate,'%d/%m/%Y') as slipdate,
		    vehicleno,
            vehicleweight,
            receivedby,
            materialweight,
            companyid
           
	FROM  feedmill_acknowledgementslip
    
    WHERE companyid = p_companyid
    AND id = p_id;

END;



CREATE PROCEDURE `spc_additionalincentive_delete`(
 IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM additionalincentive WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'additionalincentive', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_additionalincentive_save`(
   IN p_id INT(11),
   IN p_coststructureid INT(11),
   IN p_fromsellingrate DECIMAl(9,3),
   IN p_tosellingrate DECIMAL(9,3),
   IN p_incentive DECIMAl(9,3),
   IN p_maxincentive DECIMAL(9,3),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO additionalincentive 
				(coststructureid, fromsellingrate, tosellingrate, incentive, maxincentive, companyid)
			VALUES 
				(p_coststructureid, p_fromsellingrate, p_tosellingrate, p_incentive, p_maxincentive, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE additionalincentive
				SET coststructureid = p_coststructureid,
					fromsellingrate = p_fromsellingrate,
                    tosellingrate = p_tosellimgrate,
                    incentive = p_incentive,
                    maxincentive = p_maxincentive,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'additionalincentive', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_additionalincentive_search`(
  IN p_coststructureid INT
)
BEGIN

	SELECT 
		 id,
         coststructureid,
         fromsellingrate,
         tosellingrate, 
         incentive,
         maxincentive,
         companyid
         
	FROM
		additionalincentive 
        
	WHERE
	coststructureid = p_coststructureid;

END;



CREATE PROCEDURE `spc_additionalincentive_select`(
  IN p_id INT
)
BEGIN

	SELECT 
		 id,
         coststructureid,
         fromsellingrate,
         tosellingrate, 
         incentive,
         maxincentive,
         companyid
         
	FROM
		additionalincentive 
        
	WHERE
	 (
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_amortization_save`(
	IN p_id INT,
	IN p_breederbatchid INT,
    IN p_femalelivequantity INT,
    IN p_malelivequantity INT,
	IN p_eggsprediction INT,
    IN p_wipvalue INT,
    IN p_ageinweeks INT,
    IN p_ageindays INT,
    IN p_requiredbirdvalue DECIMAL(8,3),
    IN p_totaleggs INT,
    IN p_amortizationvalueofegg DECIMAL(8,3),
    IN p_amortizationvalueofbird DECIMAL(8,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
	IF NOT EXISTS(SELECT * FROM amortization WHERE breederbatchid = p_breederbatchid) THEN
    
		INSERT INTO amortization (
						id,
						amortizationdate,
						breederbatchid,
						femalelivequantity,
						malelivequantity,
						eggsprediction,
						wipvalue,
						ageinweeks,
                        ageindays,
						requiredbirdvalue,
						totaleggs,
						amortizationvalueofegg,
                        amortizationvalueofbird,
						companyid
					)
			VALUE 	(
						p_id,
						now(),
						p_breederbatchid,
						p_femalelivequantity,
						p_malelivequantity,
						p_eggsprediction,
						p_wipvalue,
						p_ageinweeks,
                        p_ageindays,
						p_requiredbirdvalue,
						p_totaleggs,
						p_amortizationvalueofegg,
                        p_amortizationvalueofbird,
						p_companyid
					);
    	    
            SET @action = 'INSERT';
    END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'amortization', out_id, @action, p_userid);


END;



CREATE PROCEDURE `spc_amortization_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
			A.id,
            DATE_FORMAT(A.amortizationdate,'%d/%m/%Y') as amortizationdate,
			A.breederbatchid,
            BB.batchname,
			A.femalelivequantity,
			A.malelivequantity,
			A.eggsprediction,
			A.wipvalue,
			A.ageinweeks,
            A.ageindays,
			A.requiredbirdvalue,
			A.totaleggs,
			A.amortizationvalueofegg,
            A.amortizationvalueofbird
			
	FROM amortization A
    LEFT JOIN breederbatch BB ON BB.id = A.breederbatchid


	WHERE A.companyid = p_companyid
	ORDER BY A.id DESC;

END;



CREATE PROCEDURE `spc_amortization_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

    SET @labourcharge = null;
    SET @overheadcost = null;
    
    SELECT labourcharge, overheadcost
    INTO @labourcharge, @overheadcost
    FROM breedersetting
    WHERE companyid = p_companyid;
    
	SELECT
			A.id,
            DATE_FORMAT(A.amortizationdate,'%d/%m/%Y') as amortizationdate,
			A.breederbatchid,
            BB.batchname,
			A.femalelivequantity,
			A.malelivequantity,
			A.eggsprediction,
			A.wipvalue,
			A.ageinweeks,
            A.ageindays,
			A.requiredbirdvalue,
            A.amortizationvalueofegg,
            A.amortizationvalueofbird,
			A.totaleggs,
            @labourcharge as labourcharge,
            @overheadcost as overheadcost,
            DATE_FORMAT(BBP.placementdate,'%d/%m/%Y') as placementdate
			
	FROM amortization A
    LEFT JOIN breederbatch BB ON BB.id = A.breederbatchid
    LEFT JOIN breederbatchplacement BBP ON A.breederbatchid = BBP.breederbatchid


	WHERE A.id = p_id;

END;



CREATE PROCEDURE `spc_amortization_wipdetail`(
	IN p_breederbatchid INT
)
BEGIN
     
     SET @maleitemid = NULL;
     SET @femaleitemid = NULL;
     SET @labourcharge = null;
     SET @overheadcost = null;
     SET @femalebirdcost = NULL;
     SET @malebirdcost = NULL;
     SET @femaleplaced = NULL;
	 SET @maleplaced = NULL;
     SET @femalemortality = NULL;
	 SET @malemortality = NULL;
	 SET @batchconsumptioncost = NULL;
     
     
     -- Default Male and Female itemids
     
		SELECT 
			defaultfemalechickid, defaultmalechickid, labourcharge, overheadcost 
			INTO 
            @femaleitemid, @maleitemid, @labourcharge, @overheadcost 
		FROM 
			breedersetting LIMIT 1;


	 -- Bird purchase cost
     
				
         SELECT 
			CASE WHEN itemid = @maleitemid THEN @malebirdcost:= unitprice  ELSE NULL END as malebirdcost,
			CASE WHEN itemid = @femaleitemid THEN @femalebirdcost:= unitprice ELSE NULL END as femalebirdcost
        FROM (
         
				SELECT itemid, GRD.unitprice as unitprice
				 
					FROM breederbatchplacement BBP 
					INNER JOIN grpo GR ON GR.id = BBP.grpono
					INNER JOIN grpodetail GRD ON GR.id = GRD.grpoid
				 WHERE
					BBP.breederbatchid = p_breederbatchid
			) AS TEMP;
            
     
	 -- Birds placed in batch
             
        SELECT 
			CASE WHEN itemid = @maleitemid THEN @maleplaced:= quantity  ELSE NULL END as maleplaced,
			CASE WHEN itemid = @femaleitemid THEN @femaleplaced:= quantity ELSE NULL END as femaleplaced
        FROM (
        
			SELECT itemid, SUM(BPD.quantity) as quantity
				FROM breederbatchplacement BP
				INNER JOIN breederbatchplacementdetail BPD ON BPD.breederbatchplacementid = BP.id
				WHERE
					BP.breederbatchid = p_breederbatchid
				GROUP BY itemid
			
			 ) AS TEMP;
             
   
     -- Live birds
             
        SELECT 
			CASE WHEN itemid = @maleitemid THEN @malemortality:= itemmortality  ELSE NULL END as malemortality,
			CASE WHEN itemid = @femaleitemid THEN @femalemortality:= itemmortality ELSE NULL END as femalemortality
        FROM (
				SELECT itemid, SUM(totalmortality) + SUM(totalculls) as itemmortality
					
					FROM breederdailytransaction BT
					INNER JOIN breederdailymortality BDM ON BT.id = BDM.breederdailytransactionid
				WHERE
					BT.breederbatchid = p_breederbatchid
				GROUP BY itemid
        ) AS TEMP;
            

	 -- Batch total consumption

		SELECT SUM(batchconsumption) INTO @batchconsumptioncost FROM (
			SELECT BC.quantity * I.unitcost AS batchconsumption
			FROM breederdailytransaction BT
				INNER JOIN breederdailyconsumption BC ON BT.id = BC.breederdailytransactionid
			  --  LEFT JOIN materialissuedetail MRD ON BT.issueid = MRD.materialissueid
                INNER JOIN item I ON I.id = BC.itemid
					-- also match consumption item itembatchid  = materialreceipt item itembatchid later on
			WHERE BT.breederbatchid = p_breederbatchid AND BT.statusid = 822
			-- GROUP BY BC.quantity 
		) AS batchconsumptiontable;

	
     -- 
    
	SELECT 	 
		CAST(@maleitemid AS SIGNED) AS maleitemid,
		CAST(@femaleitemid AS SIGNED) AS femaleitemid,
        CAST(IFNULL(@labourcharge,0) AS SIGNED) AS labourcharge,
		CAST(IFNULL(@overheadcost,0) AS SIGNED) AS overheadcost,
		CAST(@femalebirdcost AS SIGNED) AS femalebirdcost,
        CAST(@malebirdcost AS SIGNED) AS malebirdcost,
		CAST(@femaleplaced AS SIGNED) AS femaleplaced,
		CAST(@maleplaced AS SIGNED) AS maleplaced,
		CAST(IFNULL(@femalemortality,0) AS SIGNED) AS femalemortality,
		CAST(IFNULL(@malemortality,0) AS SIGNED) AS malemortality,
		-- CAST(((@femaleplaced + @maleplaced) - (@femalemortality + @malemortality)) AS SIGNED) AS livebirds,
		CAST(IFNULL(@batchconsumptioncost,0) AS SIGNED) AS batchconsumptioncost;
    

END;



CREATE PROCEDURE `spc_amortize_select`(
	IN p_companyid INT
)
BEGIN

	SELECT * FROM amortization
    
    WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_applicationsettings_save`(
   IN p_id INT(11),
   IN p_partywithmultipleroles SMALLINT(4),
   IN p_showdisplayprefix SMALLINT(4),
   IN p_recordsperpage INT(11),
   IN p_pdcreminder INT(11),
   IN p_creditperiodreminder INT(11),
   IN p_financialyearstartday INT(11),
   IN p_financialyearstartmonth INT(11),
   IN p_datedisplayformat VARCHAR(50),
   IN p_stocknamefields VARCHAR(500),
   IN p_requisitionapproval SMALLINT(4),
   IN p_poapproval SMALLINT(4),
   IN p_showmrpandassessment SMALLINT(4),
   IN p_purchaseenquiryprefix VARCHAR(50),
   IN p_purchaseorderprefix VARCHAR(50),
   IN p_purchasereturnprefix VARCHAR(50),
   IN p_quotationapproval SMALLINT(4),
   IN p_billapproval SMALLINT(4),
   IN p_proformainvoiceapproval SMALLINT(4),
   IN p_saleschallanapproval SMALLINT(4),
   IN p_salesquotationprefix VARCHAR(50),
   IN p_saleschallanprefix VARCHAR(50),
   IN p_salesbillprefix VARCHAR(50),
   IN p_servicebillprefix VARCHAR(50),
   IN p_proformainvoiceprefix VARCHAR(50),
   IN p_batchoutorder VARCHAR(50),
   IN p_calculatetaxbeforediscount SMALLINT(4),
   IN p_receiptvoucherapproval SMALLINT(4),
   IN p_paymentvoucherapproval SMALLINT(4),
   IN p_contravoucherapproval SMALLINT(4),
   IN p_journalvoucherapproval SMALLINT(4),
   IN p_receiptvoucherprefix VARCHAR(50),
   IN p_smtpserver VARCHAR(50),
   IN p_portno VARCHAR(15),
   IN p_host VARCHAR(100),
   IN p_emailid VARCHAR(100),
   IN p_password VARCHAR(50),
   IN p_emailretrycount INT(11),
   IN p_requiredssl SMALLINT(4),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT(11)
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO applicationsettings 
				(id, 
                partywithmultipleroles, 
                showdisplayprefix, 
                recordsperpage, 
                pdcreminder, 
                creditperiodreminder, 
                financialyearstartday, 
                financialyearstartmonth,
                datedisplayformat,
                stocknamefields,
                requisitionapproval,
                poapproval,
                showmrpandassessment,
                purchaseenquiryprefix,
                purchaseorderprefix,
                purchasereturnprefix,
                quotationapproval,
                billapproval,
                proformainvoiceapproval,
                saleschallanapproval,
                salesquotationprefix,
                saleschallanprefix,
                salesbillprefix,
                servicebillprefix,
                proformainvoiceprefix,
                batchoutorder,
                calculatetaxbeforediscount,
                receiptvoucherapproval,
                paymentvoucherapproval,
                contravoucherapproval,
                journalvoucherapproval,
                receiptvoucherprefix,
                smtpserver,
                portno,
                `host`,
                emailid,
                `password`,
                emailretrycount,
                requiredssl,
                companyid)
			VALUES 
				(p_id, 
				p_partywithmultipleroles,
                p_showdisplayprefix,
                p_recordsperpage,
                p_pdcreminder,
                p_creditperiodreminder,
                p_financialyearstartday,
                p_financialyearstartmonth,
                p_datedisplayformat,
                p_stocknamefields,
                p_requisitionapproval,
                p_poapproval,
                p_showmrpandassessment,
                p_purchaseenquiryprefix,
                p_purchaseorderprefix,
                p_purchasereturnprefix,
                p_quotationapproval,
                p_billapproval,
                p_proformainvoiceapproval,
                p_saleschallanapproval,
                p_salesquotationprefix,
                p_saleschallanprefix,
                p_salesbillprefix,
                p_servicebillprefix,
                p_proformainvoiceprefix,
                p_batchoutorder,
                p_calculatetaxbeforediscount,
                p_receiptvoucherapproval,
                p_paymentvoucherapproval,
                p_contravoucherapproval,
                p_journalvoucherapproval,
                p_receiptvoucherprefix,
                p_smtpserver,
                p_portno,
                p_host,
                p_emailid,
                p_password,
                p_emailretrycount,
                p_requiredssl,
                p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE applicationsettings
		SET partywithmultipleroles = p_partywithmultipleroles,
			showdisplayprefix = p_showdisplayprefix,
			recordsperpage = p_recordsperpage,
			pdcreminder = p_pdcreminder,
			creditperiodreminder = p_creditperiodreminder,
			financialyearstartday = p_financialyearstartday,
			financialyearstartmonth = p_financialyearstartmonth,
			datedisplayformat = p_datedisplayformat,
			stocknamefields = p_stocknamefields,
			requisitionapproval = p_requisitionapproval,
			poapproval = p_poapproval,
			showmrpandassessment = p_showmrpandassessment,
			purchaseenquiryprefix = p_purchaseenquiryprefix,
			purchaseorderprefix = p_purchaseorderprefix,
			purchasereturnprefix = p_purchasereturnprefix,
			quotationapproval = p_quotationapproval,
			billapproval = p_billapproval,
			proformainvoiceapproval = p_proformainvoiceapproval,
			saleschallanapproval = p_saleschallanapproval,
			salesquotationprefix = p_salesquotationprefix,
			saleschallanprefix = p_saleschallanprefix,
			salesbillprefix = p_salesbillprefix,
			servicebillprefix = p_servicebillprefix,
			proformainvoiceprefix = p_proformainvoiceprefix,
			batchoutorder = p_batchoutorder,
			calculatetaxbeforediscount = p_calculatetaxbeforediscount,
			receiptvoucherapproval = p_receiptvoucherapproval,
			paymentvoucherapproval = p_paymentvoucherapproval,
			contravoucherapproval = p_contravoucherapproval,
			journalvoucherapproval = p_journalvoucherapproval,
			receiptvoucherprefix = p_receiptvoucherprefix,
			smtpserver = p_smtpserver,
			portno = p_portno,
			`host` = p_host,
			emailid = p_emailid,
			`password` = p_password,
			emailretrycount = p_emailretrycount,
			requiredssl = p_requiredssl,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
 --  CALL spc_commonlog_save(p_companyid, 'applicationsettings', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_applicationsettings_search`(
	IN p_companyid INT
)
BEGIN

	/* for the boolean columns like partywithmultipleroles, 0 is selcted
       if column value is 1 (true) for the front end radio button 
	   selection  */
	SELECT
			id,
            CASE WHEN partywithmultipleroles = 1 THEN 0 ELSE 1 END as partywithmultipleroles,
			CASE WHEN showdisplayprefix = 1 THEN 0 ELSE 1 END as showdisplayprefix,
            recordsperpage,
            pdcreminder,
            creditperiodreminder,
            financialyearstartday,
            financialyearstartmonth,
            datedisplayformat,
            stocknamefields,
            CASE WHEN requisitionapproval = 1 THEN 0 ELSE 1 END as requisitionapproval,
            CASE WHEN poapproval = 1 THEN 0 ELSE 1 END as poapproval,
            CASE WHEN showmrpandassessment = 1 THEN 0 ELSE 1 END as showmrpandassessment,
            purchaseenquiryprefix,
            purchaseorderprefix,
            purchasereturnprefix,
            CASE WHEN quotationapproval = 1 THEN 0 ELSE 1 END as quotationapproval,
            CASE WHEN billapproval = 1 THEN 0 ELSE 1 END as billapproval,
            CASE WHEN proformainvoiceapproval = 1 THEN 0 ELSE 1 END as proformainvoiceapproval,
            CASE WHEN saleschallanapproval = 1 THEN 0 ELSE 1 END as saleschallanapproval,
            salesquotationprefix,
            saleschallanprefix,
            salesbillprefix,
            servicebillprefix,
            proformainvoiceprefix,
            batchoutorder,
            CASE WHEN calculatetaxbeforediscount = 1 THEN 0 ELSE 1 END as calculatetaxbeforediscount,
            CASE WHEN receiptvoucherapproval = 1 THEN 0 ELSE 1 END as receiptvoucherapproval,
            CASE WHEN paymentvoucherapproval = 1 THEN 0 ELSE 1 END as paymentvoucherapproval,
            CASE WHEN contravoucherapproval = 1 THEN 0 ELSE 1 END as contravoucherapproval,
            CASE WHEN journalvoucherapproval = 1 THEN 0 ELSE 1 END as journalvoucherapproval,
            receiptvoucherprefix,
            smtpserver,
            portno,
            `host`,
            emailid,
            `password`,
            emailretrycount,
            CASE WHEN requiredssl = 1 THEN 0 ELSE 1 END as requiredssl,
            companyid
			
	FROM applicationsettings 

	WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_apptransaction_search`(
	IN p_moduleid INT
)
BEGIN

	SELECT `id`,
		`moduleid`,
		`transactioncode`,
		`transactionname`,
		`productid`
	FROM `apptransaction`
    WHERE
		(p_moduleid is null OR moduleid = p_moduleid);
END;



CREATE PROCEDURE `spc_bankbookregister_report`(
	IN p_bankledgerid INT(11),
    IN p_fromdate DATE,
	IN p_todate DATE,
    IN p_companyid INT(11)
)
BEGIN

    SET @grandtotal = 'Grand Total';
    SET @cramount = null;
    SET @dramount = null;
    
    SELECT (select REPLACE(cast(IFNULL(SUM(JED.cramount),0) as CHAR(100)), '-', '')), 
		   IFNULL(SUM(JED.dramount),0)
    -- IFNULL(SUM(JED.cramount),0), IFNULL(SUM(JED.cramount),0)
    -- ;
    INTO @cramount, @dramount
    FROM journalentrydetail JED
    LEFT JOIN journalentry JE ON JED.journalentryid = JE.id
    WHERE JE.voucherdate BETWEEN p_fromdate AND p_todate;
    
    SELECT null as voucherdate,
		   null as jeid,
           null as vouchertypeid,
           null as refname,
           'Opening Balance' as narration,
           fnc_openingcreditdebitbal(JED.acledgerid, p_fromdate, 'debit') as dramount,
           fnc_openingcreditdebitbal(JED.acledgerid, p_fromdate, 'credit') as cramount,
           null chequeno,
		   null as chequedate,
           null as branchid,
           null as branchcode,
           null as branchname,
           null as bankid,
           null as acledgerid,
           null as glcode,
           null as partyid,
           null as partyname,
           ((fnc_openingcreditdebitbal(JED.acledgerid, p_fromdate, 'debit'))-(fnc_openingcreditdebitbal(JED.acledgerid, p_fromdate, 'credit'))) as closingbalance

           
	FROM journalentry JE
    LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    WHERE JE.companyid = p_companyid
    AND JED.acledgerid = p_bankledgerid
    GROUP BY JED.acledgerid
    
    UNION ALL

	SELECT DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate,
		   JE.id as jeid,
           JE.vouchertypeid,
           REF.refname,
           JED.narration,
           IFNULL(JED.dramount,0) as dramount,
           IFNULL(JED.cramount,0) as cramount,
           JE.chequeno,
		   DATE_FORMAT(JE.chequedate,'%d/%m/%Y') as chequedate,
           JE.branchid,
           BR.branchcode,
           BR.branchname,
           JE.bankid,
           JED.acledgerid,
           COA.glcode,
           JE.partyid,
           P.partyname,
           0 as closingbalance
           
	FROM journalentry JE
    
    INNER JOIN `reference` REF ON JE.vouchertypeid = REF.id
    INNER JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    INNER JOIN chartofaccount COA ON JED.acledgerid = COA.id
    INNER JOIN branch BR ON BR.id = JE.branchid
    INNER JOIN bank B ON B.id = JE.bankid
    INNER JOIN party P ON P.id = JE.partyid
    
    WHERE JED.acledgerid = p_bankledgerid
    AND JE.companyid = p_companyid
    AND JE.voucherdate BETWEEN p_fromdate AND p_todate
    
    GROUP BY JE.id
    
    UNION ALL
    
    SELECT null,
		   null,
           null,
           null,
           'Grand Total',
		   (fnc_openingcreditdebitbal(JED.acledgerid, p_fromdate, 'debit') + @dramount) as dramount,
           (fnc_openingcreditdebitbal(JED.acledgerid, p_fromdate, 'credit') + @cramount) as cramount,
           null,
		   null,
           null,
           null,
           null,
           null,
           null,
           null,
           null,
           null,
           ((fnc_openingcreditdebitbal(JED.acledgerid, p_fromdate, 'credit') + @cramount) -(fnc_openingcreditdebitbal(JED.acledgerid, p_fromdate, 'debit') + @dramount)) as closingbalance
           
	FROM journalentry JE
    LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    WHERE JE.companyid = p_companyid
    AND JED.acledgerid = p_bankledgerid
    GROUP BY JED.acledgerid;
END;



CREATE PROCEDURE `spc_bank_delete`(
	IN p_id INT(11)
)
BEGIN

	-- DELETE FROM bank WHERE id = p_id;
    
    UPDATE bank SET isdeleted = 1 WHERE id = p_id;

END;



CREATE PROCEDURE `spc_bank_save`(
   IN p_id INT(11),
   IN p_bankname VARCHAR(200),
   IN p_microcode VARCHAR(200),
   IN p_ifsccode VARCHAR(200),
   IN p_address VARCHAR(1000),
   IN p_phoneno VARCHAR(50),
   IN p_inactiveinyear VARCHAR(45),
   IN p_accounttypeid INT(11),
   IN p_accountledgerid INT(11),
   IN p_accountno VARCHAR(50),
   IN p_relationshipmanager VARCHAR(150),
   IN p_managercontactno VARCHAR(100),
   IN p_isdeleted TINYINT(4),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO bank 
				(id, bankname, microcode, ifsccode, address, 
                phoneno, inactiveinyear, accounttypeid, 
                accountledgerid, accountno, relationshipmanager, managercontactno, isdeleted, companyid)
			VALUES 
				(p_id, p_bankname, p_microcode, p_ifsccode, p_address, 
                p_phoneno, p_inactiveinyear, p_accounttypeid, 
                p_accountledgerid, p_accountno, p_relationshipmanager, p_managercontactno, 1, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE bank
				SET bankname = p_bankname,
					microcode = p_microcode,
                    ifsccode = p_ifsccode,
                    address = p_address,
                    phoneno = p_phoneno,
                    inactiveinyear = p_inactiveinyear,
                    accounttypeid = p_accounttypeid,
                    accountledgerid = p_accountledgerid,
                    accountno = p_accountno,
                    relationshipmanager = p_relationshipmanager,
                    managercontactno = p_managercontactno,
                    isdeleted = 1,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'bank', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_bank_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT B.id,
		   B.bankname,
           B.microcode,
           B.ifsccode,
           B.address,
           B.phoneno,
           B.inactiveinyear,
           B.accounttypeid,
           REF.refname,
           B.accountledgerid,
           COA.coaname,
           COA.glcode as bankglcode,
           B.accountno,
           B.relationshipmanager,
           B.managercontactno
           
	FROM bank B
    LEFT JOIN `reference` REF ON REF.id = B.accounttypeid
    LEFT JOIN chartofaccount COA ON COA.id = B.accountledgerid
    
    WHERE B.companyid = p_companyid
    AND B.isdeleted = 0;

END;



CREATE PROCEDURE `spc_bank_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT B.id,
		   B.bankname,
           B.microcode,
           B.ifsccode,
           B.address,
           B.phoneno,
           B.inactiveinyear,
           REF.refname,
           B.accountledgerid,
           B.accounttypeid,
           COA.coaname,
           COA.glcode as bankglcode,
           B.accountno,
           B.relationshipmanager,
           B.managercontactno
           
	FROM bank B
    LEFT JOIN `reference` REF ON REF.id = B.accounttypeid
    LEFT JOIN chartofaccount COA ON COA.id = B.accountledgerid
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND B.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		)
        AND B.isdeleted = 0;

END;



CREATE PROCEDURE `spc_batchdetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM batchdetail WHERE id = p_id;
END;



CREATE PROCEDURE `spc_batchdetail_save`(
	IN p_id INT,
    IN p_breederbatchid INT(11),
    IN p_currentbatchdate DATE,
    IN p_phaseid INT(11),
    IN p_ageindays INT(11),
    IN p_batchplacementdate DATE,
    IN p_firstdaydate DATE,
    IN p_batchstatusid INT(11),
	IN p_expectedphaseid INT(11),
	IN p_birdcost DECIMAL(9,3),
	IN p_maleitemid INT(11),
	IN p_maleplacedquantity INT(11),
	IN p_malelivequantity INT(11),
	IN p_malemortality INT(11),
	IN p_maleculls INT(11),
	IN p_malesalequantity INT(11),
	IN p_femaleitemid INT(11),
	IN p_femaleplacedquantity INT(11),
	IN p_femalelivequantity INT(11),
	IN p_femalemortality INT(11),
	IN p_femaleculls INT(11),
	IN p_femalesalequanity INT(11),
	IN p_totaleggscollection INT(11),
	IN p_companyid INT(11),
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO batchdetail( 
				id,
				breederbatchid,
				currentbatchdate,
				phaseid,
				ageindays,
				batchplacementdate,
				firstdaydate,
				batchstatusid,
				expectedphaseid,
				birdcost,
				maleitemid,
				maleplacedquantity,
				malelivequantity,
				malemortality,
				maleculls,
				malesalequantity,
				femaleitemid,
				femaleplacedquantity,
				femalelivequantity,
				femalemortality,
				femaleculls,
				femalesalequanity,
				totaleggscollection,
				companyid)
			VALUES 
				(p_id,
				p_breederbatchid,
				p_currentbatchdate,
				p_phaseid,
				p_ageindays,
				p_batchplacementdate,
				p_firstdaydate,
				p_batchstatusid,
				p_expectedphaseid,
				p_birdcost,
				p_maleitemid,
				p_maleplacedquantity,
				p_malelivequantity,
				p_malemortality,
				p_maleculls,
				p_malesalequantity,
				p_femaleitemid,
				p_femaleplacedquantity,
				p_femalelivequantity,
				p_femalemortality,
				p_femaleculls,
				p_femalesalequanity,
				p_totaleggscollection,
				p_companyid);
                
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE batchdetail
				SET breederbatchid = p_breederbatchid,
				currentbatchdate = p_currentbatchdate,
				phaseid = p_phaseid,
				ageindays = p_ageindays,
				batchplacementdate = p_batchplacementdate,
				firstdaydate = p_firstdaydate,
				batchstatusid = p_batchstatusid,
				expectedphaseid = p_expectedphaseid,
				birdcost = p_birdcost,
				maleitemid = p_maleitemid,
				maleplacedquantity = p_maleplacedquantity,
				malelivequantity = p_malelivequantity,
				malemortality = p_malemortality,
				maleculls = p_maleculls,
				malesalequantity = p_malesalequantity,
				femaleitemid = p_femaleitemid,
				femaleplacedquantity = p_femaleplacedquantity,
				femalelivequantity = p_femalelivequantity,
				femalemortality = p_femalemortality,
				femaleculls = p_femaleculls,
				femalesalequanity = p_femalesalequanity,
				totaleggscollection = p_totaleggscollection,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'batchdetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_batchdetail_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		BD.id,
		BD.breederbatchid,
		BD.currentbatchdate,
		BD.phaseid,
		BD.ageindays,
		DATE_FORMAT(BD.batchplacementdate,'%d/%m/%Y') as batchplacementdate,
		DATE_FORMAT(BD.firstdaydate,'%d/%m/%Y') as firstdaydate,
		BD.batchstatusid,
		BD.expectedphaseid,
		BD.birdcost,
		BD.maleitemid,
		BD.maleplacedquantity,
		BD.malelivequantity,
		BD.malemortality,
		BD.maleculls,
		BD.malesalequantity,
		BD.femaleitemid,
		BD.femaleplacedquantity,
		BD.femalelivequantity,
		BD.femalemortality,
		BD.femaleculls,
		BD.femalesalequanity,
		BD.totaleggscollection,
		BD.companyid
	
    FROM
		batchdetail BD
	
	WHERE
		BD.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_batchdetail_select`(
    IN p_id INT
)
BEGIN
    
    SELECT
		BD.id,
		BD.breederbatchid,
		BD.currentbatchdate,
		BD.phaseid,
		BD.ageindays,
		DATE_FORMAT(BD.batchplacementdate,'%d/%m/%Y') as batchplacementdate,
		DATE_FORMAT(BD.firstdaydate,'%d/%m/%Y') as firstdaydate,
		BD.batchstatusid,
		BD.expectedphaseid,
		BD.birdcost,
		BD.maleitemid,
		BD.maleplacedquantity,
		BD.malelivequantity,
		BD.malemortality,
		BD.maleculls,
		BD.malesalequantity,
		BD.femaleitemid,
		BD.femaleplacedquantity,
		BD.femalelivequantity,
		BD.femalemortality,
		BD.femaleculls,
		BD.femalesalequanity,
		BD.totaleggscollection,
		BD.companyid
	
    FROM
		batchdetail BD
	
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND BD.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
      
END;



CREATE PROCEDURE `spc_batchwise_productiondate`(
 In p_breederbatchid INT )
BEGIN
  
  	SELECT DATE_FORMAT(productionstartdate,'%d/%m/%Y') as productionstartdate
        from eggscollection 
        
        where
           breederbatchid =  p_breederbatchid
	order by id ASC limit 1;
  -- DATE_FORMAT(IFNULL(fnc_productionstartdate(p_breederbatchid),noW()),'%d/%m/%Y') as productionstartdate;
  
END;



CREATE PROCEDURE `spc_billofmaterialdetail_delete`(

 IN p_id INT(11),
 IN p_companyid INT(11),
 IN p_userid INT(11)
)
BEGIN

	DELETE FROM feedmill_billofmaterialdetail WHERE id = p_id;
	CALL spc_commonlog_save(p_companyid, 'feedmill_billofmaterialdetail', p_id, 'delete', p_userid);

END;



CREATE PROCEDURE `spc_billofmaterialdetail_save`(
    IN p_id INT(11),
    IN p_bomid INT(11),
    IN p_itemid INT(11),
    IN p_quantity DECIMAL(9,3),
    IN p_unitid INT(11),
	IN p_unitcost DECIMAL(9,3),
    IN p_parentid INT(11),
    IN P_materialtypeid int(11),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_billofmaterialdetail
        (bomid, itemid, quantity, unitid, unitcost, parentid, materialtypeid,companyid)
        VALUES (p_bomid, p_itemid, p_quantity, p_unitid, p_unitcost, p_parentid, p_materialtypeid, p_companyid);
        
        SET @action = 'INSERT';
        
        ELSE
        UPDATE feedmill_billofmaterialdetail
        SET bomid = p_bomid,
            itemid = p_itemid,
            quantity = p_quantity,
            unitid = p_unitid,
            unitcost = p_unitcost,
            parentid = p_parentid,
            materialtypeid = p_materialtypeid,
            companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_billofmaterialdetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_billofmaterialdetail_search`(
IN p_bomid INT(11))
BEGIN
SELECT BOMD.id,
	   BOMD.bomid,
       BOMD.itemid,
       BOMD.quantity,
       BOMD.unitid,
       BOMD.unitcost,
       BOMD.parentid,
       BOMD.materialtypeid,
	   I.itemname,
       I1.itemname as parentitemname,
	   R.refname as itemunitname,
       R1.refname as materialtype
   
           
    FROM feedmill_billofmaterialdetail BOMD
	LEFT JOIN item I ON BOMD.itemid = I.id
    LEFT JOIN item I1 ON BOMD.parentid = I1.id
    LEFT JOIN `reference` R ON BOMD.unitid = R.id
     LEFT JOIN `reference` R1 ON BOMD.materialtypeid = R1.id
    
    
    WHERE  
		  bomid = p_bomid;
          
          
   -- material requirment for BOM (tree table)       


WITH RECURSIVE feedmill_billofmaterial_path (id,itemid, parentid, itemname, parentitemname) AS
(
  SELECT  BMD.id, itemid, parentid, I.itemname, I1.itemname as parentitemname
    FROM feedmill_billofmaterialdetail BMD
    
     LEFT JOIN item I ON itemid = I.id
     LEFT JOIN item I1 ON parentid = I1.id
    WHERE bomid = p_bomid
    
  UNION ALL
  SELECT c.id, c.itemid, c.parentid, I.itemname, I1.itemname as parentitemname
    FROM feedmill_billofmaterialdetail c 
    INNER JOIN feedmill_billofmaterial_path cp ON cp.itemid = c.parentid
       LEFT JOIN item I ON c.itemid = I.id
       LEFT JOIN item I1 ON c.parentid = I1.id
)
SELECT BM.id, itemid, null as parentid, I.itemname, null as parentitemname

 FROM feedmill_billofmaterial BM
LEFT JOIN item I ON I.id = BM.itemid
WHERE BM.id = p_bomid 

UNION ALL
SELECT * FROM feedmill_billofmaterial_path

order by itemid;
/*WITH RECURSIVE feedmill_billofmaterial_path (isactive,id,itemid, parentid, itemname, parentitemname) AS
(
SELECT BM.isactive, BMD.id, BMD.itemid, BMD.parentid, I.itemname, I1.itemname as parentitemname
    FROM feedmill_billofmaterial BM
     LEFT JOIN feedmill_billofmaterialdetail BMD ON BM.id = BMD.bomid 
     LEFT JOIN item I ON BMD.itemid = I.id
     LEFT JOIN item I1 ON BMD.parentid = I1.id
    WHERE bomid = p_bomid AND BM.isactive = 1
     UNION ALL
  SELECT BM.isactive,c.id, c.itemid, c.parentid, I.itemname, I1.itemname as parentitemname
    FROM feedmill_billofmaterial BM
       LEFT JOIN feedmill_billofmaterialdetail c ON c.bomid = BM.id AND BM.isactive = 1
    INNER JOIN feedmill_billofmaterial_path cp ON cp.itemid = c.parentid
  
       LEFT JOIN item I ON c.itemid = I.id
       LEFT JOIN item I1 ON c.parentid = I1.id
)
SELECT BM.isactive,BM.id, itemid, null as parentid, I.itemname, null as parentitemname

 FROM feedmill_billofmaterial BM
LEFT JOIN item I ON I.id = BM.itemid
WHERE BM.id = p_bomid AND BM.isactive = 1

UNION ALL
SELECT * FROM feedmill_billofmaterial_path
order by itemid;*/

END;



CREATE PROCEDURE `spc_billofmaterialdetail_select`(
IN p_id INT(11),
IN p_companyid INT(11)

)
BEGIN
SELECT BOMD.id,
	   BOMD.bomid,
       BOMD.itemid,
       BOMD.quantity,
       BOMD.unitid,
       BOMD.unitcost,
       BOMD.parentid,
       BOMD.materialtypeid
				
	FROM feedmill_billofmaterialdetail

	WHERE companyid = p_companyid
	AND	id = p_id;            

END;



CREATE PROCEDURE `spc_billofmaterial_delete`(
IN p_id INT(11)
)
BEGIN
DELETE 
FROM		feedmill_billofmaterial
WHERE		id = p_id;

END;



CREATE PROCEDURE `spc_billofmaterial_save`(
IN p_id INT(11),
IN p_bomcode VARCHAR(100),
IN p_itemgroupid INT(11),
IN p_itemid INT(11),
IN p_quantity INT(11),
IN p_unitid INT(11),
IN p_unitcost DECIMAL(9,3),
IN p_bomdate DATE,
IN p_createdby INT(11),
IN p_isactive TINYINT(4),
IN p_note VARCHAR (200),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_billofmaterial
        (bomcode, itemgroupid, itemid, quantity, unitid, unitcost, bomdate, createdby, isactive, note, companyid)
        
        VALUES (p_bomcode, p_itemgroupid, p_itemid, p_quantity, p_unitid, p_unitcost, p_bomdate, p_createdby, p_isactive, p_note, p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_billofmaterial
        SET bomcode = p_bomcode,
			itemgroupid = p_itemgroupid,
			itemid = p_itemid,
			quantity = p_quantity,
            unitid = P_unitid,
            unitcost = p_unitcost,
            bomdate = p_bomdate,
            createdby = p_createdby,
            isactive = p_isactive,
            note = p_note,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    -- update item materialtypeid = 1502 (fineshgood)
     UPDATE item 
     SET materialtypeid=1502
     WHERE id = p_itemid;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_billofmaterial', out_id, @action, p_userid);



END;



CREATE PROCEDURE `spc_billofmaterial_search`(
IN p_companyid INT(11) )
BEGIN
SELECT 	    BOM.id,
			BOM.itemid,
			BOM.quantity,
			BOM.unitid,
            BOM.unitcost,
			BOM.createdby,
			BOM.isactive,
			BOM.note,
            I.itemname,
            EMP.employeename,
			DATE_FORMAT(BOM.bomdate,'%d/%m/%Y') as bomdate,
            R.refname as itemunitname,
            BOM.itemgroupid,
            IG.groupname,
            BOM.bomcode,
            I.itemcode
	
           
	FROM feedmill_billofmaterial BOM
    LEFT JOIN item I ON BOM.itemid = I.id
     LEFT JOIN employee EMP ON BOM.createdby = EMP.id
     LEFT JOIN `reference` R ON BOM.unitid = R.id
     LEFT JOIN itemgroup IG ON BOM.itemgroupid = IG.id
    
    WHERE BOM.companyid = p_companyid;


END;



CREATE PROCEDURE `spc_billofmaterial_select`(
    IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN
SELECT 	  BOM.id,
			BOM.itemid,
			BOM.quantity,
			BOM.unitid,
            BOM.unitcost,
			BOM.createdby,
			BOM.isactive,
			BOM.note,
            I.itemname,
            EMP.employeename,
			DATE_FORMAT(BOM.bomdate,'%d/%m/%Y') as bomdate,
            R.refname as itemunitname,
             BOM.itemgroupid,
            IG.groupname,
            BOM.bomcode
           
	FROM feedmill_billofmaterial BOM
    LEFT JOIN item I ON BOM.itemid = I.id
	LEFT JOIN employee EMP ON BOM.createdby = EMP.id
    LEFT JOIN `reference` R ON BOM.unitid = R.id
    LEFT JOIN itemgroup IG ON BOM.itemgroupid = IG.id
    
    WHERE BOM.companyid = p_companyid
    AND BOM.id = p_id;


END;



CREATE PROCEDURE `spc_branchwisefarmerenquiryshed_search`(
	IN p_branchid INT,
    IN p_shedstatusid INT,
    IN p_companyid INT
)
BEGIN

	 SELECT FE.id, 
			supervisor_id,
			DATE_FORMAT(enquiry_date,'%d/%m/%Y') as enquiry_date,
			farmer_name,
			farm_name,
			farm_type_id,
			address,
			mobile_no,
			incharge_name,
			shed_type_id,
			property_owner,
			age,
			occupation,
			branch_id,
            B.branchname,
            B.branchcode,
			line_id,
			rest_period,
			farm_area_length,
			farm_area_width,
			total_area,
			density,
			incharge_contact_no,
			water_facility_id,
			over_head_tank_capacity,
			over_head_tank_type_id,
			holding_tank_capacity,
			holding_tank_type_id,
			flooring_id,
			roofing_id,
			diesel_brooder,
			gas_brooder,
			cool_brooder,
			farm_partition,
			electric_brooder,
			wood_brooder,
			thermometer,
			spray_pump,
			road_facility_id,
			mseb_connection_id,
			feed_room_facility,
			curtain_type_id,
			cross_curtains,
			foggers,
			mortality_disposal_pit,
			generator,
			refrigerator,
			inverter,
			tus_storage_facility,
			thermos,
			out_side_curtains,
			ceiling_curtains,
			center_curtains,
			contract_type_id,
			reasons_for_disc_per,
			district,
			taluka,
			post,
			gat_sr_no,
			area,
			valuation,
			owner_name,
			chick_capacity,
			status_id,
            REF.refname as farmstatus,
			distance_from_branch,
			distance_from_feed_mill,
            FES.id as shedid,
            FES.shed_name,
            (FES.total_sq_ft/FE.density) as shedcapacity
                
		FROM cbf_farmerenquiry FE
        INNER JOIN cbf_farmerenquiry_sheddimensiondetail FES ON FES.farmerenquiryid = FE.id
        LEFT JOIN cbf_farmeragreement FA ON FA.farmerenquiryid = FE.id
        LEFT JOIN `reference` REF ON REF.id = FE.status_id
        LEFT JOIN branch B ON B.id = FE.branch_id 
        
        WHERE FE.branch_id = p_branchid AND FE.company_id = p_companyid
        AND FA.id is not null 
        AND FA.statusid = 2062
		AND FES.statusid = p_shedstatusid
        
        ORDER BY FE.id DESC;
END;



CREATE PROCEDURE `spc_branchwisesalesorder_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN
	SELECT a.*, 
	DATE_FORMAT(a.salesorderdate,'%d/%m/%Y') as salesorderdate,
    b.partyname as customerName,
    c.itemid,
    c.quantity,
    c.unitprice
    FROM salesorder a
    LEFT JOIN party b ON b.id = a.customerid
    LEFT JOIN salesorderdetail c ON c.salesorderid = a.id;
END;



CREATE PROCEDURE `spc_branch_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM branch WHERE id = p_id;

END;



CREATE PROCEDURE `spc_branch_save`(
   IN p_id INT(11),
   IN p_branchname VARCHAR(200),
   IN p_branchcode VARCHAR(200),
   IN p_isactive TINYINT(4),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO branch 
				(id, branchname, branchcode, isactive, companyid)
			VALUES 
				(p_id, p_branchname, p_branchcode, p_isactive, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE branch
				SET branchname = p_branchname,
					branchcode = p_branchcode,
                    isactive = p_isactive,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'branch', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_branch_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id, branchname, branchcode, isactive, companyid
           
	FROM branch
    
    WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_branch_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT id, branchname, branchcode, isactive, companyid
           
	FROM branch
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_breederbatchbalance_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederbatchbalance WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breederbatchbalance_save`(
	IN p_id INT(11),
    IN p_updateddate DATE,
    IN p_breederbatchid INT(11),
    IN p_breedershedid INT(11),
    IN p_breedershedpenid INT(11),
    IN p_itemid INT(11),
    IN p_quantity INT(11),
    -- IN p_mortality INT(11),
    -- IN p_culls INT(11),
    IN p_transactionname VARCHAR(45),
    IN p_companyid INT(11),
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederbatchbalance 
				(id, updateddate, breederbatchid, breedershedid, breedershedpenid, itemid, quantity, transactionname, companyid)
			VALUES 
				(p_id, p_updateddate, p_breederbatchid, p_breedershedid, p_breedershedpenid, p_itemid, p_quantity, p_transactionname, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE breederbatchbalance
				SET  updateddate = p_updateddate,
                breederbatchid = p_breederbatchid,
                breedershedid = p_breedershedid,
                breedershedpenid = p_breedershedpenid,
                itemid = p_itemid,
                quantity = p_quantity,
                transactionname = p_transactionname,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breederbatchbalance', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_breederbatchbalance_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
		   breederbatchid,
           breedershedid,
           breedershedpenid,
           quantity,
           companyid
    
    FROM breederbatchbalance
    
    WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_breederbatchbalance_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT id,
		   breederbatchid,
           breedershedid,
           breedershedpenid,
           quantity,
           companyid
    
    FROM breederbatchbalance
    
    WHERE (
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_breederbatchconsumptionopeningdetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM breederbatchconsumptionopeningdetail WHERE id = p_id;

END;



CREATE PROCEDURE `spc_breederbatchconsumptionopeningdetail_save`(
	 IN p_id INT(11),
     IN p_breederbatchopeningid INT(11),
     IN p_breeditemid INT(11),
     IN p_consumptiontypeid INT(11),
     IN p_consumptionitemid INT(11),
     IN p_quantity DECIMAL(9,3),
     IN p_rate DECIMAL(9,3),
     IN p_itemvalue DECIMAL(9,3),
     IN p_companyid INT(11),
     IN p_userid INT(11),
     OUT out_id INT
)
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
        INSERT INTO breederbatchconsumptionopeningdetail(
			id,
			breederbatchopeningid,
			breeditemid,
			consumptiontypeid,
			consumptionitemid,
			quantity,
			rate,
			itemvalue,
			companyid
        )
        
        VALUES(
			p_id,
			p_breederbatchopeningid,
			p_breeditemid,
			p_consumptiontypeid,
			p_consumptionitemid,
			p_quantity,
			p_rate,
			p_itemvalue,
			p_companyid
        );
        
        SET @action = 'INSERT';
        
    ELSE
		
        UPDATE breederbatchconsumptionopeningdetail
        SET breederbatchopeningid = p_breederbatchopeningid,
			breeditemid = p_breeditemid,
			consumptiontypeid = p_consumptiontypeid,
			consumptionitemid = p_consumptionitemid,
			quantity = p_quantity,
			rate = p_rate,
			itemvalue = p_itemvalue,
            id = LAST_INSERT_ID(id)
		WHERE
			id = p_id
            AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'breederbatchconsumptionopeningdetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_breederbatchconsumptionopeningdetail_search`(
	IN p_breederbatchopeningid INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
			breederbatchopeningid,
			breeditemid,
			consumptiontypeid,
			consumptionitemid,
			quantity,
			rate,
			itemvalue
            
	FROM breederbatchconsumptionopeningdetail
    
    WHERE breederbatchopeningid = p_breederbatchopeningid
    AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_breederbatchconsumptionopeningdetail_select`(
	IN p_id INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
			breederbatchopeningid,
			breeditemid,
			consumptiontypeid,
			consumptionitemid,
			quantity,
			rate,
			itemvalue
            
	FROM breederbatchconsumptionopeningdetail
    
    WHERE id = p_id
    AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_breederbatchdetail_report`(
	IN p_breederbatchid INT(11),
    IN p_fromdate DATE,
	IN p_todate DATE
 )
BEGIN

	SET @defaultmalechickid = null;
	SET @defaultfemalechickid = null;
    
       SELECT  
		maleitemid,femaleitemid
		INTO @defaultmalechickid,@defaultfemalechickid
	FROM
		breederbatch
        
        WHERE 
            id = p_breederbatchid limit 1;
   

     SELECT 
			BDT.id dailytransactionid,
            DATE_FORMAT(BDT.transactiondate ,'%d/%m/%Y') as `date`, 
			BDT.shedid,
			BS.shedname,
			fnc_batchwise_malefemaleopbal_tillgivendate(BDT.breederbatchid, BDT.shedid, @defaultmalechickid, BDT.transactiondate) as maleopeningbalance,
			fnc_batchwise_malefemaleopbal_tillgivendate(BDT.breederbatchid, BDT.shedid, @defaultfemalechickid, BDT.transactiondate) as femaleopeningbalance,
			fnc_batchwise_malefemaleculls_ongivendate(BDT.id, @defaultmalechickid) as maleculls,
			fnc_batchwise_malefemaleculls_ongivendate(BDT.id, @defaultfemalechickid) as femaleculls,
			fnc_batchwise_malefemalemortality_ongivendate(BDT.id, @defaultmalechickid) as malemortality,
			fnc_batchwise_malefemalemortality_ongivendate(BDT.id, @defaultfemalechickid) as femalemortality,
			fnc_batchshedwise_malefemale_transferedquantity(BDT.breederbatchid, BDT.shedid, @defaultmalechickid, BDT.transactiondate) as maletransferedquantity,
			fnc_batchshedwise_malefemale_transferedquantity(BDT.breederbatchid, BDT.shedid, @defaultfemalechickid, BDT.transactiondate) as femaletransferedquantity,
            fnc_calculate_cummalefemaleculls(BDT.breederbatchid, BDT.shedid, BDT.transactiondate) as cummalefemaleculls,
            fnc_calculate_cummalefemalemortality(BDT.breederbatchid, BDT.shedid, BDT.transactiondate) as cummalefemalemortality
 
	FROM
			breederdailytransaction BDT
			LEFT JOIN breedershed BS ON BS.id = BDT.shedid
    
	WHERE 
			BDT.breederbatchid = p_breederbatchid AND
			BDT.transactiondate BETWEEN p_fromdate AND p_todate;
    
END;



CREATE PROCEDURE `spc_breederbatchfinancialopeningdetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM breederbatchfinancialopeningdetail WHERE id = p_id;

END;



CREATE PROCEDURE `spc_breederbatchfinancialopeningdetail_save`(
	IN p_id INT(11),
    IN p_breederbatchopeningid INT(11),
    IN p_breedervalue DECIMAL(12,3),
    IN p_consumptionvalue DECIMAL(12,3),
    IN p_overheadexp DECIMAL(9,3),
    IN p_breedplaceqty DECIMAL(12,3),
    IN p_WIPaccountbalance DECIMAL(12,3),
    IN p_WIPperbird DECIMAL(12,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
        INSERT INTO breederbatchfinancialopeningdetail(
			id,
			breederbatchopeningid,
			breedervalue,
			consumptionvalue,
			overheadexp,
			breedplaceqty,
			WIPaccountbalance,
			WIPperbird,
			companyid
        )
        
        VALUES(
			p_id,
			p_breederbatchopeningid,
			p_breedervalue,
			p_consumptionvalue,
			p_overheadexp,
			p_breedplaceqty,
			p_WIPaccountbalance,
			p_WIPperbird,
			p_companyid
        );
        
        SET @action = 'INSERT';
        
    ELSE
		
        UPDATE breederbatchfinancialopeningdetail
        SET 
			breederbatchopeningid = p_breederbatchopeningid,
			breedervalue = p_breedervalue,
			consumptionvalue = p_consumptionvalue,
			overheadexp = p_overheadexp,
			breedplaceqty = p_breedplaceqty,
			WIPaccountbalance = p_WIPaccountbalance,
			WIPperbird = p_WIPperbird,
            id = LAST_INSERT_ID(id)
		WHERE
			id = p_id
            AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'breederbatchfinancialopeningdetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_breederbatchfinancialopeningdetail_search`(
	IN p_breederbatchopeningid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT
			id,
			breederbatchopeningid,
			breedervalue,
			consumptionvalue,
			overheadexp,
			breedplaceqty,
			WIPaccountbalance,
			WIPperbird,
			companyid
    
    FROM breederbatchfinancialopeningdetail
    
	WHERE breederbatchopeningid = p_breederbatchopeningid AND companyid = p_companyid;
END;



CREATE PROCEDURE `spc_breederbatchfinancialopeningdetail_select`(
	IN p_companyid INT(11),
    IN p_id INT(11)
)
BEGIN

	SELECT
			id,
			breederbatchopeningid,
			breedervalue,
			consumptionvalue,
			overheadexp,
			breedplaceqty,
			WIPaccountbalance,
			WIPperbird,
			companyid
    
    FROM breederbatchfinancialopeningdetail
    
	WHERE id = p_id AND companyid = p_companyid;
END;



CREATE PROCEDURE `spc_breederbatchlocationwiseopeningdetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM breederbatchlocationwiseopeningdetail WHERE id = p_id;

END;



CREATE PROCEDURE `spc_breederbatchlocationwiseopeningdetail_save`(
	IN p_id INT(11),
    IN p_breederbatchopeningid INT(11),
    IN p_itemtype TINYINT(4),
    IN p_itemid INT(11),
    IN p_balanceqty DECIMAL(12,3),
    IN p_locationid INT(11),
    IN p_shedid INT(11),
    IN p_shedpenid INT(11),
    IN p_penqty DECIMAL(12,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
        INSERT INTO breederbatchlocationwiseopeningdetail(
			id,
			breederbatchopeningid,
			itemid,
			balanceqty,
			locationid,
			shedid,
			shedpenid,
			penqty,
			companyid
        )
        
        VALUES(
			p_id,
			p_breederbatchopeningid,
			p_itemid,
			p_balanceqty,
			p_locationid,
			p_shedid,
			p_shedpenid,
			p_penqty,
			p_companyid
        );
        
        SET @action = 'INSERT';
        
    ELSE
		
        UPDATE breederbatchlocationwiseopeningdetail
        SET breederbatchopeningid = p_breederbatchopeningid,
			itemid = p_itemid,
			balanceqty = balanceqty,
			locationid = p_locationid,
			shedid = p_shedid,
			shedpenid = p_shedpenid,
			penqty = p_penqty,
            id = LAST_INSERT_ID(id)
		WHERE
			id = p_id
            AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    SET @out_balanceid = NULL;
	CALL spc_breederbatchbalance_save(
		NULL, (SELECT livebatchdate FROM breederbatchopening WHERE id = p_breederbatchopeningid),
        (SELECT breederbatchid FROM breederbatchopening WHERE id = p_breederbatchopeningid),
		p_shedid, p_shedpenid,  p_itemid, p_penqty, 'Breeder batch opening', p_companyid, 
		p_userid, @out_balanceid
	);
    
    -- UPDATE breeder batch male female ids
    
    IF(p_itemtype = 0) THEN 
		UPDATE breederbatch
		SET maleitemid = p_itemid
		WHERE id = (SELECT breederbatchid FROM breederbatchopening WHERE id = p_breederbatchopeningid);
	ELSE
		UPDATE breederbatch
		SET femaleitemid = p_itemid
		WHERE id = (SELECT breederbatchid FROM breederbatchopening WHERE id = p_breederbatchopeningid);
	END IF;
    
    -- update breedershed status to batch started = 14
    UPDATE breedershed SET statusid = 14 WHERE id = p_shedid;
    
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'breederbatchlocationwiseopeningdetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_breederbatchlocationwiseopeningdetail_search`(
	IN p_breederbatchopeningid INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
			breederbatchopeningid,
			itemid,
			balanceqty,
			locationid,
			shedid,
			shedpenid,
			penqty,
			companyid
            
	FROM breederbatchlocationwiseopeningdetail
    
    WHERE breederbatchopeningid = p_breederbatchopeningid AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_breederbatchlocationwiseopeningdetail_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,
			breederbatchopeningid,
			itemid,
			balanceqty,
			locationid,
			shedid,
			shedpenid,
			penqty,
			companyid
            
	FROM breederbatchlocationwiseopeningdetail
    
    WHERE companyid = p_companyid AND id = p_id;

END;



CREATE PROCEDURE `spc_breederbatchmalefemaleopeningdetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM breederbatchmalefemaleopeningdetail WHERE id = p_id;

END;



CREATE PROCEDURE `spc_breederbatchmalefemaleopeningdetail_save`(
   IN p_id INT(11),
   IN p_breederbatchopeningid INT(11),
   IN p_itemtype TINYINT(4),
   IN p_itemid INT(11),
   IN p_placeqty DECIMAL(12,3),
   IN p_rate DECIMAL(9,3),
   IN p_birdvalue DECIMAL(12,3),
   IN p_liveqty DECIMAL(12,3),
   IN p_mortality INT(11),
   IN p_culls INT(11),
   IN p_cullssaleqty INT(11),
   IN p_regularsale INT(11),
   IN p_totalsale INT(11),
   IN p_goodeggsqty INT(11),
   IN p_flooreggsqty INT(11),
   IN p_othereggsqty INT(11),
   IN p_totaleggs INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		INSERT INTO breederbatchmalefemaleopeningdetail(
           id,
		   breederbatchopeningid,
           itemtype,
		   itemid,
		   placeqty,
           rate,
           birdvalue,
		   liveqty,
		   mortality,
		   culls,
		   cullssaleqty,
		   regularsale,
		   totalsale,
		   goodeggsqty,
		   flooreggsqty,
           othereggsqty,
		   totaleggs,
		   companyid
        )
        
        VALUES(
		   p_id,
		   p_breederbatchopeningid,
           p_itemtype,
		   p_itemid,
		   p_placeqty,
           p_rate,
           p_birdvalue,
		   p_liveqty,
		   p_mortality,
		   p_culls,
		   p_cullssaleqty,
		   p_regularsale,
		   p_totalsale,
		   p_goodeggsqty,
		   p_flooreggsqty,
           p_othereggsqty,
		   p_totaleggs,
		   p_companyid
        );
        
        SET @action = 'INSERT';
    
    ELSE
    
		UPDATE breederbatchmalefemaleopeningdetail
        SET 
		   breederbatchopeningid = p_breederbatchopeningid,
           itemtype = p_itemtype,
		   itemid = p_itemid,
		   placeqty = p_placeqty,
           rate = p_rate,
           birdvalue = p_birdvalue,
		   liveqty = p_liveqty,
		   mortality = p_mortality,
		   culls = p_culls,
		   cullssaleqty = p_cullssaleqty,
		   regularsale = p_regularsale,
		   totalsale = p_totalsale,
		   goodeggsqty = p_goodeggsqty,
		   flooreggsqty = p_flooreggsqty,
           othereggsqty = p_othereggsqty,
		   totaleggs = p_totaleggs,
		   companyid = p_compnyid,
           id = LAST_INSERT_ID(id)
		WHERE
				id = p_id
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
    
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'breederbatchmalefemaleopeningdetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_breederbatchmalefemaleopeningdetail_search`(
	IN p_breederbatchopeningid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT 
		   breederbatchopeningid,
		   itemid,
		   placeqty,
           rate,
           birdvalue,
		   liveqty,
		   mortality,
		   culls,
		   cullssaleqty,
		   regularsale,
		   totalsale,
		   goodeggsqty,
		   flooreggsqty,
           othereggsqty,
		   totaleggs
    
    FROM breederbatchmalefemaleopeningdetail
    
    WHERE breederbatchopeningid = p_breederbatchopeningid AND companyid = p_companyid;


END;



CREATE PROCEDURE `spc_breederbatchmalefemaleopeningdetail_select`(
	IN p_companyid INT(11),
    IN p_id INT(11)
)
BEGIN

	SELECT 
		   breederbatchopeningid,
		   itemid,
		   placeqty,
           rate,
           birdvalue,
		   liveqty,
		   mortality,
		   culls,
		   cullssaleqty,
		   regularsale,
		   totalsale,
		   goodeggsqty,
		   flooreggsqty,
           othereggsqty,
		   totaleggs
    
    FROM breederbatchmalefemaleopeningdetail
    
    WHERE companyid = p_companyid AND id = p_id;


END;



CREATE PROCEDURE `spc_breederbatchopeningdetail_search`(
	IN p_breederbatchopeningid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	-- financial
	SELECT
			id,
			breederbatchopeningid,
			breedervalue,
			consumptionvalue,
			overheadexp,
			breedplaceqty,
			WIPaccountbalance,
			WIPperbird,
			companyid
    
    FROM breederbatchfinancialopeningdetail
    
	WHERE breederbatchopeningid = p_breederbatchopeningid AND companyid = p_companyid;
    
    
    -- locationwise
    SELECT BBL.id,
			BBL.breederbatchopeningid,
			BBL.itemid,
            I.itemname,
            I.itemcode,
			BBL.balanceqty,
			BBL.locationid,
            L.locationname,
			BBL.shedid,
            BS.shedname,
			BBL.shedpenid,
            BSL.linename,
			BBL.penqty,
			BBL.companyid
            
	FROM breederbatchlocationwiseopeningdetail BBL
    LEFT JOIN item I ON I.id = BBL.itemid
    LEFT JOIN breedershed BS ON BS.id = BBL.shedid
    LEFT JOIN breedershedline BSL ON BSL.id = BBL.shedpenid
    LEFT JOIN location L ON L.id = BBL.locationid
    
    WHERE BBL.breederbatchopeningid = p_breederbatchopeningid AND BBL.companyid = p_companyid;
    
    
    -- male female detail
    SELECT 
		   BBM.breederbatchopeningid,
           BBM.itemtype,
		   BBM.itemid,
           I.itemname,
           I.itemcode,
		   BBM.placeqty,
           BBM.rate,
           BBM.birdvalue,
		   BBM.liveqty,
		   BBM.mortality,
		   BBM.culls,
		   BBM.cullssaleqty,
		   BBM.regularsale,
		   BBM.totalsale,
		   BBM.goodeggsqty,
		   BBM.flooreggsqty,
           BBM.othereggsqty,
		   BBM.totaleggs
    
    FROM breederbatchmalefemaleopeningdetail BBM
    LEFT JOIN item I ON I.id = BBM.itemid
    
    WHERE BBM.breederbatchopeningid = p_breederbatchopeningid AND BBM.companyid = p_companyid;
    
    
    -- consumption detail
    SELECT  BBC.id,
			BBC.breederbatchopeningid,
			BBC.breeditemid,
			I.itemname as breeditemname,
			BBC.consumptiontypeid,
			BBC.consumptionitemid,
            I1.itemname as consumptionitemname,
			BBC.quantity,
			BBC.rate,
			BBC.itemvalue
            
	FROM breederbatchconsumptionopeningdetail BBC
    LEFT JOIN item I ON I.id = BBC.breeditemid
    LEFT JOIN item I1 ON I1.id = BBC.consumptionitemid
    
    WHERE BBC.breederbatchopeningid = p_breederbatchopeningid
    AND BBC.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_breederbatchopening_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM breederbatchopening WHERE id = p_id;
    DELETE FROM breederbatchfinancialopeningdetail WHERE breederbatchopeningid = p_id;
    DELETE FROM breederbatchlocationwiseopeningdetail WHERE breederbatchopeningid = p_id;
    DELETE FROM breederbatchmalefemaleopeningdetail WHERE breederbatchopeningid = p_id;
	DELETE FROM breederbatchconsumptionopeningdetail WHERE breederbatchopeningid = p_id;

END;



CREATE PROCEDURE `spc_breederbatchopening_save`(
   IN p_id INT(11),
   IN p_batchname VARCHAR(100),
   IN p_locationid INT(11),
   IN p_breederbatchid INT(11),
   IN p_livebatchdate DATE,
   IN p_phasestatusid INT(11),
   IN p_ageindays INT(11),
   IN p_ageinweeks DECIMAL(9,3),
   IN p_batchplacementdate DATE,
   IN p_firstdaydate DATE,
   IN p_batchstatusid INT(11),
   IN p_expectedphasestatusid INT(11),
   IN p_statusid INT(11),
   IN p_receiptremark VARCHAR(100),
   IN p_jeremark VARCHAR(100),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		-- Insert breederbatch
        SET @breederbatchid = null;
        CALL spc_breederbatch_save(
			NULL,
            p_locationid,
            NULL,
            p_batchname,
            NULL,
            222,
            0,
            p_companyid,
            p_userid,
            @breederbatchid
        );
    
		INSERT INTO breederbatchopening(
           id,
		   breederbatchid,
		   livebatchdate,
           phasestatusid,
           ageindays,
           ageinweeks,
		   batchplacementdate,
           firstdaydate,
           batchstatusid,
           expectedphasestatusid,
           statusid,
           receiptremark,
           jeremark,
           companyid
        )
        
        VALUES(
		   p_id,
		   @breederbatchid,
		   p_livebatchdate,
           p_phasestatusid,
           p_ageindays,
           p_ageinweeks,
		   p_batchplacementdate,
           p_firstdaydate,
           p_batchstatusid,
           p_expectedphasestatusid,
           p_statusid,
           p_receiptremark,
           p_jeremark,
           p_companyid
        );
        
        SET @action = 'INSERT';
    
    ELSE
    
		UPDATE breederbatchopening
        SET breederbatchid = p_breederbatchid,
		   livebatchdate = p_livebatchdate,
           phasestatusid = p_phasestatusid,
           ageindays = p_ageindays,
           ageinweeks = p_ageinweeks,
		   batchplacementdate = p_batchplacementdate,
           firstdaydate = p_firstdaydate,
           batchstatusid = p_batchstatusid,
           expectedphasestatusid = p_expectedphasestatusid,
           statusid = p_statusid,
           receiptremark = p_receiptremark,
           jeremark = p_jeremark,
           id = LAST_INSERT_ID(id)
		WHERE
				id = p_id
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
    
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'breederbatchopening', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_breederbatchopening_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT BBO.id,
		   BBO.breederbatchid,
           BB.locationid,
           L.locationname,
           L.locationcode,
		   BB.batchname,
		   DATE_FORMAT(BBO.livebatchdate,'%d/%m/%Y') as livebatchdate,
           BBO.phasestatusid,
           BBO.ageindays,
           BBO.ageinweeks,
		   DATE_FORMAT(BBO.batchplacementdate,'%d/%m/%Y') as batchplacementdate,
           DATE_FORMAT(BBO.firstdaydate,'%d/%m/%Y') as firstdaydate,
           BBO.batchstatusid,
           BBO.expectedphasestatusid,
           BBO.statusid,
           REF.refname,
           REF1.refname as batchstatus,
           BBO.receiptremark,
           BBO.jeremark
    FROM breederbatchopening BBO
    LEFT JOIN breederbatch BB ON BB.id = BBO.breederbatchid
    LEFT JOIN `reference` REF ON REF.id = BBO.statusid
    LEFT JOIN `reference` REF1 ON REF1.id = BBO.batchstatusid
    LEFT JOIN location L ON L.id = BB.locationid
    
    WHERE BBO.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_breederbatchopening_select`(
	IN p_id INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT BBO.breederbatchid,
		   BB.locationid,
           L.locationname,
           L.locationcode,
		   DATE_FORMAT(BBO.livebatchdate,'%d/%m/%Y') as livebatchdate,
           BBO.phasestatusid,
           BBO.ageindays,
           BBO.ageinweeks,
		   DATE_FORMAT(BBO.batchplacementdate,'%d/%m/%Y') as batchplacementdate,
           DATE_FORMAT(BBO.firstdaydate,'%d/%m/%Y') as firstdaydate,
           BBO.batchstatusid,
           BBO.expectedphasestatusid,
           BBO.statusid,
           BBO.receiptremark,
           BBO.jeremark
    FROM breederbatchopening BBO
    LEFT JOIN breederbatch BB ON BB.id = BBO.breederbatchid
    LEFT JOIN location L ON L.id = BB.locationid
    
    WHERE BBO.id = p_id AND BBO.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_breederbatchplacementdetail_bybreederbatchid`(
 IN p_companyid INT,
 IN p_breederbatchid INT
)
BEGIN
    
    SELECT
	BP.id,
    BPD.breedershedid,
    BP.breederbatchid,
    BS.shedname,
    L.locationcode,
	L.locationname
    
    FROM
		breederbatchplacement BP
        
	LEFT JOIN breederbatchplacementdetail BPD ON BPD.breederbatchplacementid = BP.id
    LEFT JOIN breedershed BS ON BPD.breedershedid =  BS.id 
	LEFT JOIN location L ON BS.locationid = L.id
    /*AND BP.breederbatchid = p_breederbatchid*/
    
   
    
	WHERE
    BPD.companyid = p_companyid
    AND BP.breederbatchid = p_breederbatchid
    
    GROUP BY BPD.breedershedid;
		
END;



CREATE PROCEDURE `spc_breederbatchplacementdetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederbatchplacementdetail WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breederbatchplacementdetail_save`(
    IN p_id INT,
    IN p_breederbatchplacementid INT(11),
    IN p_breedershedid INT(11),
    IN p_breedershedpenid INT(11),
    IN p_maleitemid INT(11),
	IN p_maleplacedquantity DECIMAL(9,3),
    IN p_femaleitemid INT(11),
    IN p_femaleplacedquantity DECIMAL(9,3),
    IN p_placementscheduledetailid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	SET @out_transferid = null;
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
   
	 -- to warehousebinid
		SET @towarehouseid = null;
        SELECT warhouseid INTO @towarehouseid FROM breedershed BS
        WHERE BS.id = p_breedershedid;
        
        -- from warehouseid
        SET @fromwarehouseid = null;
        SELECT towarehouseid INTO @fromwarehouseid FROM grpo
        WHERE id = (SELECT grpono FROM breederbatchplacement WHERE id = p_breederbatchplacementid);
        
		CALL spc_materialtransfer_save(
			NULL, 501, 501, 582, now(), now(),NULL,
			@fromwarehouseid, NULL, 623, 
            (SELECT breederbatchid FROM breederbatchplacement WHERE id = p_breederbatchplacementid),
            (SELECT breederbatchid FROM breederbatchplacement WHERE id = p_breederbatchplacementid),
            NULL, p_companyid, p_userid, @out_transferid
		);
        
    IF(p_maleplacedquantity > 0)THEN
    
    -- Do material transfer from cold room default bin(default hatchery warehouse) to particular setter warehouse
		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, @out_transferid, @towarehouseid, (SELECT warehousebinid FROM breedershed WHERE id = p_breedershedid), 
            p_maleitemid, (SELECT itemname FROM item WHERE id = p_maleitemid),
			p_maleplacedquantity, p_maleplacedquantity, 
			(SELECT refname FROM `reference` WHERE id = p_maleitemid),
			(SELECT breederbatchid FROM breederbatchplacement WHERE id = p_breederbatchplacementid),
            p_userid, p_companyid, @out_transferdetailid
		);
    
		INSERT INTO breederbatchplacementdetail (
				id,
				breederbatchplacementid,
				breedertypeid,
				breedershedid,
				breedershedpenid,
                itemid,
				quantity,
                placementscheduledetailid,
				companyid)
                
			VALUES (
				p_id,
                p_breederbatchplacementid,
                761,
                p_breedershedid,
                p_breedershedpenid,
                p_maleitemid,
                p_maleplacedquantity,
                p_placementscheduledetailid,
                p_companyid);
                
	END IF;
    
    IF(p_femaleplacedquantity > 0) THEN
    
    -- Do material transfer from cold room default bin(default hatchery warehouse) to particular setter warehouse

		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, @out_transferid, @towarehouseid, (SELECT warehousebinid FROM breedershed WHERE id = p_breedershedid), 
            p_femaleitemid, (SELECT itemname FROM item WHERE id = p_femaleitemid),
			p_femaleplacedquantity, p_femaleplacedquantity, 
			(SELECT refname FROM `reference` WHERE id = p_femaleitemid),
			(SELECT breederbatchid FROM breederbatchplacement WHERE id = p_breederbatchplacementid),
            p_userid, p_companyid, @out_transferdetailid
		);
    
			INSERT INTO breederbatchplacementdetail (
				id,
				breederbatchplacementid,
				breedertypeid,
				breedershedid,
				breedershedpenid,
                itemid,
				quantity,
                placementscheduledetailid,
				companyid)
                
			VALUES (
				p_id,
                p_breederbatchplacementid,
                762,
                p_breedershedid,
                p_breedershedpenid,
                p_femaleitemid,
                p_femaleplacedquantity,
                p_placementscheduledetailid,
                p_companyid);
                
                
	END IF;
		
        SET @action = 'INSERT';

	ELSE
    
		IF(p_maleplacedquantity > 0) THEN
			UPDATE breederbatchplacementdetail
				SET breederbatchplacementid = p_breederbatchplacementid, 
					breedertypeid = 761,
					breedershedid = p_breedershedid,
					breedershedpenid = p_breedershedpenid,
                    itemid = p_maleitemid,
					quantity = p_maleplacedquantity,
                    placementscheduledetailid = p_placementscheduledetailid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				SET @action = 'UPDATE'; 
		END IF;
    
		IF(p_femaleplacedquantity > 0) THEN
			UPDATE breederbatchplacementdetail
				SET breederbatchplacementid = p_breederbatchplacementid, 
					breedertypeid = 762,
					breedershedid = p_breedershedid,
					breedershedpenid = p_breedershedpenid,
                    itemid = p_femaleitemid,
					quantity = p_femaleplacedquantity,
                    placementscheduledetailid = p_placementscheduledetailid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				SET @action = 'UPDATE'; 
		END IF;
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- change the status of breeder shed as 14 = 'batch satrted'
    UPDATE breedershed SET statusid = 14 WHERE id = p_breedershedid;    
    
    -- update breederbatchbalance table
   IF(p_maleplacedquantity > 0) THEN
  
	SET @out_balanceid = NULL;
	CALL spc_breederbatchbalance_save(
		NULL, (SELECT placementdate FROM breederbatchplacement WHERE id = p_breederbatchplacementid),
        (SELECT breederbatchid FROM breederbatchplacement WHERE id = p_breederbatchplacementid),
		p_breedershedid, p_breedershedpenid,  p_maleitemid, p_maleplacedquantity, 'placement', p_companyid, 
		p_userid, @out_balanceid
	);
  
  END IF;
  
  
  IF(p_femaleplacedquantity > 0) THEN
  
	SET @out_balanceid1 = NULL;
	CALL spc_breederbatchbalance_save(
		NULL, (SELECT placementdate FROM breederbatchplacement WHERE id = p_breederbatchplacementid),
        (SELECT breederbatchid FROM breederbatchplacement WHERE id = p_breederbatchplacementid),
		p_breedershedid, p_breedershedpenid,  p_femaleitemid, p_femaleplacedquantity, 'placement', p_companyid, 
		p_userid, @out_balanceid1
	);
  
  END IF;
  
  -- Update male and female itemid in breederbatch table
  
  UPDATE breederbatch SET maleitemid = p_maleitemid
  WHERE id = (SELECT breederbatchid FROM breederbatchplacement WHERE id = p_breederbatchplacementid);
  
  UPDATE breederbatch SET femaleitemid = p_femaleitemid
  WHERE id = (SELECT breederbatchid FROM breederbatchplacement WHERE id = p_breederbatchplacementid);

	-- record log
   CALL spc_commonlog_save(p_companyid, 'breederbatchplacementdetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_breederbatchplacementdetail_search`(
    IN p_breederbatchplacementid INT
)
BEGIN
    
    SELECT
			BBPD.id,
			BBPD.breederbatchplacementid,
			BBPD.breedertypeid,
			BBPD.breedershedid,
            BS.shedname,
			BBPD.breedershedpenid,
            BSL.linename,
            BBPD.itemid,
			BBPD.quantity,
			BBPD.companyid,
            BBPD.placementscheduledetailid
         
    FROM
		breederbatchplacementdetail BBPD
        LEFT JOIN breedershed BS ON BS.id = BBPD.breedershedid
        LEFT JOIN breedershedline BSL ON BSL.id = BBPD.breedershedpenid
   	
	WHERE
		BBPD.breederbatchplacementid = p_breederbatchplacementid;
END;



CREATE PROCEDURE `spc_breederbatchplacementdetail_select`(
    IN p_breederbatchplacementid INT
)
BEGIN
    
    SELECT
			id,
			breederbatchplacementid,
			breedertypeid,
			breedershedid,
			breedershedpenid,
			quantity,
			companyid
         
    FROM
		breederbatchplacementdetail 
   	
	WHERE
		breederbatchplacementid = p_breederbatchplacementid;
END;



CREATE PROCEDURE `spc_breederbatchplacementshed_bybreederbatchid`(
	IN p_breederbatchid INT(11)
)
BEGIN

SELECT transferid, fromlocationid, placementdate, fromlocationname, breedershedid,shedname, phasestatusid, warhouseid, warehousebinid

FROM (
SELECT 
		   BBP.id as transferid,
           BBP.locationid as fromlocationid,
           DATE_FORMAT(BBP.placementdate,'%d/%m/%Y') as placementdate,
           L.locationname as fromlocationname,
           BBPD.breedershedid,
		   BS.shedname,
           BS.warhouseid,
           BS.warehousebinid,
           BBP.phasestatusid
           
			FROM breederbatchplacement BBP
			LEFT JOIN location L ON L.id = BBP.locationid
    LEFT JOIN breederbatchplacementdetail BBPD ON BBP.id = BBPD.breederbatchplacementid
    LEFT JOIN breedershed BS ON BS.id = BBPD.breedershedid
    
    WHERE BBP.breederbatchid = p_breederbatchid
    AND BS.statusid = 14
    
    -- GROUP BY BBPD.breedershedid
            
            
  UNION ALL
  
   SELECT
			 BBT.id as transferid,
			 BBT.tolocationid as fromlocationid,
			 DATE_FORMAT(BBP.placementdate,'%d/%m/%Y') as placementdate,
			 L.locationname as fromlocationname,
             BBTD.toshedid as breedershedid,
             BS.shedname,
             BS.warhouseid,
			 BS.warehousebinid,
             BBT.phasestatusid
            
	FROM breederbatchtransfer BBT
     LEFT JOIN location L ON L.id = BBT.tolocationid
     LEFT JOIN breederbatchtransferdetail BBTD ON BBT.id = BBTD.breederbatchtransferid
     LEFT JOIN breedershed BS ON BS.id = BBTD.toshedid
     LEFT JOIN breederbatchplacement BBP ON BBP.breederbatchid = BBT.breederbatchid
    
    WHERE BBT.breederbatchid = p_breederbatchid
    AND BS.statusid = 14
    
   --  GROUP BY BBTD.toshedid
       
      ) as temp
      
      GROUP BY breedershedid;
       
END;



CREATE PROCEDURE `spc_breederbatchplacement_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederbatchplacementdetail WHERE breederbatchplacementid = p_id;
	DELETE FROM breederbatchplacement WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breederbatchplacement_save`(
    IN p_id INT,
    IN p_locationid INT(11),
    IN p_breederbatchid INT(11),
    IN p_placementscheduleid INT(11),
    IN p_firstdaydate DATE,
    IN p_grpono INT(11),
    IN p_placementdate DATE,
   -- IN p_ageinweek DECIMAL(9,3),
    IN p_phasestatusid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederbatchplacement (
				id, 
                locationid,
                breederbatchid,
                placementscheduleid,
                firstdaydate,
                grpono,
                placementdate,
               -- ageinweek,
                phasestatusid,
                companyid)
			
            VALUES (
				p_id,
                p_locationid,
                p_breederbatchid,
                p_placementscheduleid,
                p_firstdaydate,
                p_grpono,
                p_placementdate,
               -- p_ageinweek,
                p_phasestatusid,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE breederbatchplacement
			SET locationid = p_locationid, 
				breederbatchid = p_breederbatchid,
                placementscheduleid = p_placementscheduleid,
                firstdaydate = p_firstdaydate,
                grpono = p_grpono,
                placementdate = p_placementdate,
               -- ageinweek = p_ageinweek,
                phasestatusid = p_phasestatusid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- change the status of breederplacementschedule shed as 703 = 'processed'
    UPDATE breederplacementschedule SET statusid = 703 WHERE id = p_placementscheduleid;
    
    -- update breeder batch statusid to 222 = 'batch started'
    UPDATE breederbatch SET statusid = 222 WHERE id = p_breederbatchid;
    
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'breederbatchplacement', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_breederbatchplacement_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
			BBP.id, 
			BBP.locationid,
            L.locationname,
			BBP.breederbatchid,
            BB.batchname,
			DATE_FORMAT(BBP.firstdaydate,'%d/%m/%Y') as firstdaydate,
			BBP.grpono,
			DATE_FORMAT(BBP.placementdate,'%d/%m/%Y') as placementdate,
			-- BBP.ageinweek,
			BBP.phasestatusid,
            BP.phasename as phasestatus,
			BBP.companyid,
            BBP.placementscheduleid
            
         
	FROM
		breederbatchplacement BBP
        LEFT JOIN breederphase BP ON BBP.phasestatusid = BP.id
        LEFT JOIN location L ON BBP.locationid = L.id
        LEFT JOIN breederbatch BB ON BBP.breederbatchid = BB.id
   	
	WHERE
		BBP.companyid = p_companyid
        
	ORDER BY BBP.id DESC;
END;



CREATE PROCEDURE `spc_breederbatchplacement_select`(
	IN p_id INT
)
BEGIN

	SELECT
			BBP.id, 
			BBP.locationid,
            L.locationname,
			BBP.breederbatchid,
            BB.batchname,
			DATE_FORMAT(BBP.firstdaydate,'%d/%m/%Y') as firstdaydate,
			BBP.grpono,
			DATE_FORMAT(BBP.placementdate,'%d/%m/%Y') as placementdate,
			-- BBP.ageinweek,
			BBP.phasestatusid,
            R.refname,
			BBP.companyid,
            BBP.placementscheduleid
            
         
	FROM
		breederbatchplacement BBP
        LEFT JOIN reference R ON BBP.phasestatusid = R.id
        LEFT JOIN location L ON BBP.locationid = L.id
        LEFT JOIN breederbatch BB ON BBP.breederbatchid = BB.id
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND BBP.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_breederbatchtransferdetails_bybreederbatchtransferid`(
    IN p_shedid INT(11),
    IN p_breederbatchid INT
)
BEGIN

	SET @shedqty = 0;
	SET @transferedqty = 0;
    SET @flag1 = NULL;
    
    SELECT SUM(quantity) INTO @shedqty FROM breederbatchtransferdetail WHERE toshedid = p_shedid;

	
	SELECT
		BBB.id,
		BBB.breedershedid,
		BS.shedname,
		BBB.breedershedpenid,
		BSL.linename,
		BBB.itemid,
		BBB.quantity,
		@shedqty AS totalshedqty
   
	FROM
		breederbatchbalance BBB
		LEFT JOIN breedershed BS ON BS.id = BBB.breedershedid
		LEFT JOIN breedershedline BSL ON BSL.id = BBB.breedershedpenid
	
	WHERE
		BBB.breederbatchid = p_breederbatchid
		 AND  BBB.breedershedid = p_shedid 
         AND BBB.quantity != 0;

END;



CREATE PROCEDURE `spc_breederbatchtransferdetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederbatchtransferdetail WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breederbatchtransferdetail_save`(
    IN p_id INT,
    IN p_breederbatchtransferid INT(11),
    IN p_toshedid INT(11),
    IN p_fromlineid INT(11),
    IN p_tolineid INT(11),
    IN p_maleitemid INT(11),
	IN p_maleplacedquantity INT,
    IN p_femaleitemid INT(11),
    IN p_femaleplacedquantity INT,
    IN p_companyid INT,
    In p_userid INT,
    IN p_transferid INT,
    IN p_breederbatchid INT,
    IN p_fromshedid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
     -- to warehousebinid
		SET @towarehouseid = null;
        SELECT warhouseid INTO @towarehouseid FROM breedershed
        WHERE id = p_toshedid;
        
        -- from warehouseid
        SET @fromwarehouseid = null;
        SELECT warhouseid INTO @fromwarehouseid FROM breedershed
        WHERE id = (SELECT fromshedid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid);
	
    IF(p_maleplacedquantity > 0)THEN
    
    -- Do material transfer from cold room default bin(default hatchery warehouse) to particular setter warehouse
		-- to warehousebinid
		/*SET @towarehousebinid = null;
        SELECT id INTO @towarehousebinid FROM warehousebin
        INNER JOIN breedershed BS ON BS.id = p_breedershedid
        WHERE warehouseid = BS.warehouseid;
        
        -- from warehouseid
        SET @fromwarehousebinid = null;
        select * from breederbatchplacement bbp
        inner join grpo g on g.id = bbp.grpono
        inner join warehousebin wb on wb.warehouseid = g.towarehouseid
        where bbp.id = p_breederbatchplacementid and wb.isdefault = 1;*/
        
        
		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, p_transferid,
            (SELECT warhouseid FROM breedershed WHERE id = p_toshedid), 
            (SELECT warehousebinid FROM breedershed WHERE id = p_toshedid),
            p_maleitemid, (SELECT itemname FROM item WHERE id = p_maleitemid),
			p_maleplacedquantity, p_maleplacedquantity, 
			(SELECT refname FROM `reference` WHERE id = p_maleitemid),
			(SELECT breederbatchid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
            p_userid, p_companyid, @out_transferdetailid
		);
    
		INSERT INTO breederbatchtransferdetail (
				id,
				breederbatchtransferid,
                toshedid,
				fromlineid,
                tolineid,
                itemid,
				quantity,
				companyid)
                
			VALUES (
				p_id,
                p_breederbatchtransferid,
                p_toshedid,
                p_fromlineid,
                p_tolineid,
                p_maleitemid,
                p_maleplacedquantity,
                p_companyid);
        
        -- update breederbatchbalance table to reflect live batch quantity
		UPDATE breederbatchbalance
        SET 
			updateddate = now(),
            quantity = (quantity - p_maleplacedquantity)
		WHERE
			breederbatchid = p_breederbatchid AND
            breedershedid = p_fromshedid AND
            breedershedpenid = p_fromlineid AND
            itemid = p_maleitemid AND
            quantity != 0;
                
	END IF;
    
    IF(p_femaleplacedquantity > 0) THEN
    
    SET @out_transferid1 = NULL;
        
		SET @out_transferdetailid1 = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, p_transferid,
            (SELECT warhouseid FROM breedershed WHERE id = p_toshedid), 
            (SELECT warehousebinid FROM breedershed WHERE id = p_toshedid),
            p_femaleitemid, (SELECT itemname FROM item WHERE id = p_maleitemid),
			p_femaleplacedquantity, p_femaleplacedquantity, 
			(SELECT refname FROM `reference` WHERE id = p_femaleitemid),
			(SELECT breederbatchid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
            p_userid, p_companyid, @out_transferdetailid1
		);
    
			INSERT INTO breederbatchtransferdetail (
				id,
				breederbatchtransferid,
                toshedid,
				fromlineid,
                tolineid,
                itemid,
				quantity,
				companyid)
                
			VALUES (
				p_id,
                p_breederbatchtransferid,
                p_toshedid,
                p_fromlineid,
                p_tolineid,
                p_femaleitemid,
                p_femaleplacedquantity,
                p_companyid);
           
		-- update breederbatchbalance table to reflect live batch quantity
		UPDATE breederbatchbalance
        SET 
			updateddate = now(),
            quantity = (quantity - p_femaleplacedquantity)
		WHERE
			breederbatchid = p_breederbatchid AND
            breedershedid = p_fromshedid AND
            breedershedpenid = p_fromlineid AND
            itemid = p_femaleitemid AND
             quantity != 0;
                
	END IF;
		
        SET @action = 'INSERT';

	ELSE
    
		IF(p_maleplacedquantity > 0) THEN
			UPDATE breederbatchtransferdetail
				SET
					breederbatchtransferid = p_breederbatchtransferid,
                    toshedid = p_toshedid,
					fromlineid = p_fromlineid,
					tolineid = p_tolineid,
					itemid = p_maleitemid,
					quantity = p_maleplacedquantity,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				SET @action = 'UPDATE'; 
                
		-- update breederbatchbalance table to reflect live batch quantity
		UPDATE breederbatchbalance
        SET 
			updateddate = now(),
            quantity = (quantity - p_maleplacedquantity)
		WHERE
			breederbatchid = p_breederbatchid AND
            breedershedid = p_fromshedid AND
            breedershedpenid = p_fromlineid AND
            itemid = p_maleitemid AND
			quantity != 0;
            
		END IF;
    
		IF(p_femaleplacedquantity > 0) THEN
			UPDATE breederbatchtransferdetail
				SET breederbatchtransferid = p_breederbatchtransferid,
					toshedid = p_toshedid,
					fromlineid = p_fromlineid,
					tolineid = p_tolineid,
					itemid = p_femaleitemid,
					quantity = p_femaleplacedquantity,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				SET @action = 'UPDATE'; 
                
		-- update breederbatchbalance table to reflect live batch quantity
		UPDATE breederbatchbalance
        SET 
			updateddate = now(),
            quantity = (quantity - p_femaleplacedquantity)
		WHERE
			breederbatchid = p_breederbatchid AND
            breedershedid = p_fromshedid AND
            breedershedpenid = p_fromlineid AND
            itemid = p_femaleitemid AND
			quantity != 0;
            
		END IF;
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
 
	-- update toshed status as 14 = 'Batch Started'
    UPDATE breedershed SET statusid = 14 WHERE id = p_toshedid;
  
  -- update breederbatchbalance table
  
	IF (p_maleplacedquantity > 0) THEN
	  SET @out_balanceid = NULL;
	  CALL spc_breederbatchbalance_save(
		NULL, (SELECT transferdate FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
         p_breederbatchid, p_toshedid, p_tolineid, p_maleitemid,
		 p_maleplacedquantity,'transfer', p_companyid, 
		 p_userid, @out_balanceid
	  );
      
	END IF;
    
    IF (p_femaleplacedquantity > 0) THEN
	  SET @out_balanceid = NULL;
	  CALL spc_breederbatchbalance_save(
		NULL, (SELECT transferdate FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
        p_breederbatchid, p_toshedid, p_tolineid, p_femaleitemid,
		 p_femaleplacedquantity,'transfer', p_companyid, 
		p_userid, @out_balanceid
	  );
      
	END IF; 

-- Set status as 11 = 'available' to from shed 
   
   SET @placeqty = 0;
   SET @transferqty = 0;
   select SUM(quantity) INTO @placeqty
    FROM breederbatchbalance
    WHERE 
    breedershedid = (SELECT fromshedid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid);
    
    
    /*select SUM(BBTD.quantity) INTO @transferqty
    from breederbatchtransfer BBT
    INNER JOIN breederbatchtransferdetail BBTD ON BBTD.breederbatchtransferid = BBT.id
    where fromshedid = (SELECT fromshedid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid);*/
    
    IF(@placeqty = 0) THEN
		UPDATE breedershed SET statusid = 11 WHERE id = (SELECT fromshedid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid);
    END IF;

	-- record log
   CALL spc_commonlog_save(p_companyid, 'breederbatchtransferdetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_breederbatchtransferdetail_search`(
    IN p_breederbatchtransferid INT
)
BEGIN
    
    SELECT
			BBTD.id,
			BBTD.breederbatchtransferid,
			BBT.fromshedid,
            BBTD.toshedid,
            BS2.shedname as toshedname,
			BBTD.fromlineid,
            BBTD.tolineid,
            BSL1.linename,
            BSL2.linename as tolinename,
            BBTD.itemid,
			BBTD.quantity,
			BBTD.companyid
         
    FROM
		breederbatchtransferdetail BBTD
        LEFT JOIN breederbatchtransfer BBT ON BBT.id = BBTD.breederbatchtransferid
        LEFT JOIN breedershedline BSL1 ON BSL1.id = BBTD.fromlineid
        LEFT JOIN breedershedline BSL2 ON BSL2.id = BBTD.tolineid
     --   LEFT JOIN breedershed BS1 ON BS1.id = BBTD.fromshedid
        LEFT JOIN breedershed BS2 ON BS2.id = BBTD.toshedid
   	
	WHERE
		BBTD.breederbatchtransferid = p_breederbatchtransferid;
END;



CREATE PROCEDURE `spc_breederbatchtransferdetail_select`(
    IN p_id INT
)
BEGIN
    
    SELECT
			BBTD.id,
			BBTD.breederbatchtransferid,
			BBTD.fromshedid,
            BS1.shedname,
			BBTD.fromlineid,
            BBTD.tolineid,
            BSL1.linename,
            BSL2.linename,
            BBTD.itemid,
			BBTD.quantity,
			BBTD.companyid
         
    FROM
		breederbatchtransferdetail BBTD
        LEFT JOIN breedershed BS1 ON BS1.id = BBTD.fromshedid
        LEFT JOIN breedershedline BSL1 ON BSL1.id = BBTD.fromlineid
        LEFT JOIN breedershedline BSL2 ON BSL2.id = BBTD.tolineid
   	
	WHERE
		BBTD.id = p_id;
END;



CREATE PROCEDURE `spc_breederbatchtransfer_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederbatchtransferdetail WHERE breederbatchtransferid = p_id;
	DELETE FROM breederbatchtransfer WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breederbatchtransfer_save`(
    IN p_id INT,
    IN p_fromlocationid INT(11),
    IN p_tolocationid INT(11),
    IN p_fromshedid INT(11),
	IN p_transferdate DATE,
    IN p_breederbatchid INT(11),
    IN p_phasestatusid INT(11),
    IN p_isshedtransfer TINYINT,
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT,
    OUT out_transferid INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		
		CALL spc_materialtransfer_save(
			NULL, 501, 501, 582, now(), now(),NULL,
			(SELECT warhouseid FROM breedershed WHERE id = p_fromshedid), NULL, 623, 
            p_breederbatchid, p_breederbatchid, 
            NULL, p_companyid, p_userid, out_transferid
		);
        
        
		INSERT INTO breederbatchtransfer (
				id, 
                fromlocationid,
                tolocationid,
                fromshedid,
                transferdate,
                breederbatchid,
                phasestatusid,
                isshedtransfer,
                companyid)
			
            VALUES (
				p_id, 
                p_fromlocationid,
                p_tolocationid,
                p_fromshedid,
                p_transferdate,
                p_breederbatchid,
                p_phasestatusid,
                p_isshedtransfer,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE breederbatchtransfer
			SET 
                fromlocationid = p_fromlocationid,
                tolocationid = p_tolocationid,
                fromshedid = p_fromshedid,
                transferdate = p_transferdate,
                breederbatchid = p_breederbatchid,
                phasestatusid = p_phasestatusid,
                isshedtransfer = p_isshedtransfer,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    
    SELECT LAST_INSERT_ID(), out_transferid INTO out_id, out_transferid;
    
    
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'breederbatchtransfer', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_breederbatchtransfer_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT         
            BBT.id, 
			BBT.fromlocationid,
            L1.locationname as fromlocationname,
			BBT.tolocationid,
            L2.locationname as tolocationname,
			DATE_FORMAT(BBT.transferdate,'%d/%m/%Y') as transferdate,
			BBT.breederbatchid,
            BB.batchname,
			BBT.phasestatusid,
			BBT.isshedtransfer,
			BBT.companyid,
            BBT.fromshedid,
            BS1.shedname as fromshedname,
            BBT.isshedtransfer
            
         
	FROM
		breederbatchtransfer BBT
        LEFT JOIN breederbatch BB ON BB.id = BBT.breederbatchid
        LEFT JOIN breedershed BS1 ON BS1.id = BBT.fromshedid
        LEFT JOIN location L1 ON L1.id = BBT.fromlocationid
        LEFT JOIN location L2 ON L2.id = BBT.fromlocationid
   	
	WHERE
		BBT.companyid = p_companyid
        
	ORDER BY BBT.id DESC;
END;



CREATE PROCEDURE `spc_breederbatchtransfer_select`(
    IN p_id INT
)
BEGIN
    
    SELECT         
            BBT.id, 
			BBT.fromlocationid,
			BBT.tolocationid,
            BBT.fromshedid,
            BBT.toshedid,
            BS1.shedname,
            BS2.shedname,
			DATE_FORMAT(BBT.transferdate,'%d/%m/%Y') as transferdate,
			BBT.breederbatchid,
			BBT.phasestatusid,
			BBT.isshedtransfer,
			BBT.companyid
            
         
	FROM
		breederbatchtransfer BBT
        LEFT JOIN breedershed BS1 ON BS1.id = BBT.fromshedid
        LEFT JOIN breedershed BS2 ON BS2.id = BBT.toshedid
   	
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND BBT.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
END;



CREATE PROCEDURE `spc_breederbatch_bylocation`(
	IN p_locationid INT(11),
    IN p_companyid INT(11)
)
BEGIN

SET @fromwarehouseid = null;
SET @fromwarehousename = null;


	SELECT BS.defaultchickwarehouseid, W1.warehousename 
    INTO 
    @fromwarehouseid, @fromwarehousename
    FROM breedersetting BS
    LEFT JOIN warehouse W1 ON W1.id = BS.defaultchickwarehouseid
    WHERE BS.companyid = p_companyid;
    
    

	SELECT BB.id,
		   BB.batchname,
           BB.locationid,
           L.locationname,
           BB.statusid,
           BF.phasename as batchstatus,
           BB.warehouseid,
           W.warehousename,
           @fromwarehouseid as fromwarehouseid,
		   @fromwarehousename as fromwarehousename
           
	FROM breederbatch BB
    LEFT JOIN location L ON L.id = BB.locationid
    LEFT JOIN breederphase BF ON BF.id = BB.statusid
    LEFT JOIN warehouse W ON W.id = BB.warehouseid
    
    WHERE BB.locationid = p_locationid
    AND BB.companyid = p_companyid
    
    ORDER BY BB.id DESC;
    
END;



CREATE PROCEDURE `spc_breederbatch_bystatusid`(
    IN p_companyid INT,
    IN p_statusid INT
)
BEGIN
    
    SELECT
		B.id,
        B.locationid,
        L.locationcode,
        L.locationname,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        DATE_FORMAT(BP.placementdate,'%d/%m/%Y') as batchplacementdate,
        WB.bincode,
        WB.binname,
        B.statusid,
        REF.refname as batchstatus
		
	
    FROM
		breederbatch B
	
    LEFT JOIN location L ON B.locationid = L.id
    LEFT JOIN warehouse W ON B.warehouseid = W.id
    LEFT JOIN warehousebin WB on B.binid = WB.id
    LEFT JOIN breederbatchplacement BP on B.id = BP.breederbatchid
    INNER JOIN `reference` REF ON REF.id = B.statusid
	
	WHERE
		B.companyid = p_companyid AND
        B.statusid = p_statusid
        
	ORDER BY B.id DESC;
	
END;



CREATE PROCEDURE `spc_breederbatch_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederbatch WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breederbatch_foramortization`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		B.id,
        L.locationcode,
        L.locationname,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        WB.bincode,
        WB.binname,
        B.statusid,
        REF.refname as batchstatus,
        DATE_FORMAT(BBP.placementdate,'%d/%m/%Y') as placementdate
	
    FROM
		breederbatch B
	
    LEFT JOIN location L ON B.locationid = L.id
    LEFT JOIN warehouse W ON B.warehouseid = W.id
    LEFT JOIN warehousebin WB on B.binid = WB.id
    LEFT JOIN `reference` REF ON REF.id = B.statusid
    INNER JOIN breederbatchplacement BBP ON B.id = BBP.breederbatchid
	LEFT JOIN amortization A ON B.id = A.breederbatchid
	
	WHERE
		B.companyid = p_companyid
        AND A.id is null 
		AND B.statusid = 222
		-- AND CAST(BBP.placementdate AS DATE) >= CAST(DATE_ADD(now(), INTERVAL 168 DAY) AS DATE);
        
	ORDER BY B.id DESC;
	
END;



CREATE PROCEDURE `spc_breederbatch_forbatchdetail`(
	IN p_companyid INT(11),
	IN p_breederbatchid INT(11)
)
BEGIN
	 SET @maleitemid = NULL;
     SET @maleitemname = NULL;
     SET @femaleitemid = NULL;
     SET @femaleitemname = NULL;
	 SET @femalebirdquantity = 0;
     SET @malebirdquantity = 0;
     SET @eggscollectionquantity = 0;
     SET @hatchingeggquantity = 0;
     SET @placementdate = NULL;
     SET @phaseid = NULL;
     SET @batchstatusid = NULL;
     SET @batchname = NULL;
     SET @batchstatus = NULL;
    
		SELECT 
			BB.maleitemid, BB.femaleitemid, I1.itemname, I2.itemname
			INTO 
            @femaleitemid, @maleitemid, @maleitemname, @femaleitemname
		FROM 
			breederbatch BB
            INNER JOIN item I1 ON I1.id = BB.maleitemid
            INNER JOIN item I2 ON I2.id = BB.femaleitemid
		WHERE BB.id = p_breederbatchid
		LIMIT 1;
    
     SELECT 
			
            CASE WHEN itemid = @maleitemid THEN @malebirdquantity:= quantity  ELSE NULL END as malebirdquantity,
			CASE WHEN itemid = @femaleitemid THEN @femalebirdquantity:= quantity ELSE NULL END as femalebirdquantity    
			
        FROM (
				select itemid,
                SUM(quantity) as quantity
                
				FROM breederbatch BB
					INNER JOIN `reference` REF1 ON REF1.id = BB.statusid
					INNER JOIN breederbatchplacement BBP ON BBP.breederbatchid = BB.id
					INNER JOIN breederbatchplacementdetail BBPD ON BBPD.breederbatchplacementid = BBP.id 
				WHERE BB.id = p_breederbatchid AND BB.companyid = p_companyid
				group by itemid 
        ) AS TEMP;
    
		SELECT  @placementdate := DATE_FORMAT(placementdate,'%d/%m/%Y') as placementdate,
				@firstdaydate := DATE_FORMAT(firstdaydate,'%d/%m/%Y') as firstdaydate,
                @phaseid := BBP.phasestatusid,
                @batchstatusid := BB.statusid,
                @batchstatus := REF.refname,
                @batchname := BB.batchname
                
		FROM breederbatchplacement BBP
        INNER JOIN breederbatch BB ON BB.id = BBP.breederbatchid
        LEFT JOIN `reference` REF ON REF.id = BB.statusid
        
        
        WHERE breederbatchid = p_breederbatchid;
		
		select sum(ECD.quantity) INTO @eggscollectionquantity from eggscollection EC 
		LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id
        WHERE breederbatchid= p_breederbatchid;
        
        SELECT SUM(EDD.quantity) INTO @hatchingeggquantity from eggsdistributiondetail EDD
        WHERE breederbatchid= p_breederbatchid AND EDD.itemtypeid = 881;
        
        select @maleitemid as maleitemid,
			   @maleitemname as maleitemname ,
			   @femaleitemid as femaleitemid, 
               @femaleitemname as femaleitemname ,
               @femalebirdquantity as femalequantity,
               @malebirdquantity as malequantity,
               @eggscollectionquantity as eggscollectionquantity, 
               @hatchingeggquantity as hatchingeggquantity,
               @placementdate as placementdate,
               @firstdaydate as firstdaydate,
               @batchstatusid as batchstatusid,
               @batchstatus as batchstatus,
               @batchname as batchname,
			   @phaseid as phaseid;
          
	
END;



CREATE PROCEDURE `spc_breederbatch_forbatchdetail1`(
	IN p_companyid INT(11),
	IN p_breederbatchid INT(11)
)
BEGIN
	SELECT 
		BB.id,
        BB.statusid,
        REF1.refname as breederbatchstatus,
        DATE_FORMAT(BBP.placementdate,'%d/%m/%Y') as placementdate,
		DATE_FORMAT(BBP.firstdaydate,'%d/%m/%Y') as firstdaydate,
        BBP.phasestatusid,
        REF2.refname as phasestatusname,
        BBPD.itemid,
        BBPD.quantity,
        BBPD.breedershedpenid,
        I.itemname,
        ECD.eggscollectionid,
        ECD.quantity as totaleggquantity,
        EDD.quantity as hatchingeggquantity
        
        -- 881
    
    FROM breederbatch BB
    INNER JOIN reference REF1 ON REF1.id = BB.statusid
    INNER JOIN breederbatchplacement BBP ON BBP.breederbatchid = BB.id
    INNER JOIN breederbatchplacementdetail BBPD ON BBPD.breederbatchplacementid = BBP.id
    INNER JOIN item I ON BBPD.itemid = I.id
    INNER JOIN reference REF2 ON REF2.id = BBP.phasestatusid
    /*INNER JOIN breederdailytransaction BDT ON BDT.breederbatchid = BB.id
    INNER JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id
    AND BDM.itemid = BBPD.itemid*/
    LEFT JOIN eggscollection EC ON EC.breederbatchid = BB.id
    LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id
    LEFT JOIN eggsdistributiondetail EDD ON EDD.eggscollectionid = EC.id
    AND EDD.itemtypeid = 881
    
    WHERE BB.id = p_breederbatchid AND
		  BB.companyid = p_companyid;
          
	
END;



CREATE PROCEDURE `spc_breederbatch_forlocation`(
	
    IN p_companyid INT(11),
    IN p_locationid VARCHAR(50)
)
BEGIN
SET  @location = p_locationid;
SET @fromwarehouseid = null;
SET @fromwarehousename = null;


	SELECT BS.defaultchickwarehouseid, W1.warehousename 
    INTO 
    @fromwarehouseid, @fromwarehousename
    FROM breedersetting BS
    LEFT JOIN warehouse W1 ON W1.id = BS.defaultchickwarehouseid
    WHERE BS.companyid = p_companyid;
    
    

	SELECT BB.id,
		   BB.batchname,
           BB.locationid,
           L.locationname,
           BB.statusid,
           BF.phasename as batchstatus,
           BB.warehouseid,
           W.warehousename,
           @fromwarehouseid as fromwarehouseid,
		   @fromwarehousename as fromwarehousename,
           DATE_FORMAT(BP.placementdate,'%d/%m/%Y') as placementdate
           
	FROM breederbatch BB
    LEFT JOIN location L ON L.id = BB.locationid
    LEFT JOIN breederphase BF ON BF.id = BB.statusid
    LEFT JOIN warehouse W ON W.id = BB.warehouseid
    LEFT JOIN breederbatchplacement BP ON BB.id = BP.breederbatchid
    
    WHERE 
     FIND_IN_SET(BB.locationid,@location) 
    -- BB.locationid = p_locationid
    AND BB.companyid = p_companyid;
    
END;



CREATE PROCEDURE `spc_breederbatch_locationwise`(
	IN p_locationid INT(11),
    IN p_statusid INT(11),
    IN p_companyid INT(11)
)
BEGIN

SET @fromwarehouseid = null;
SET @fromwarehousename = null;


	SELECT BS.defaultchickwarehouseid, W1.warehousename 
    INTO 
    @fromwarehouseid, @fromwarehousename
    FROM breedersetting BS
    LEFT JOIN warehouse W1 ON W1.id = BS.defaultchickwarehouseid
    WHERE BS.companyid = p_companyid;
    
    

	SELECT BB.id,
		   BB.batchname,
           BB.locationid,
           L.locationname,
           BB.statusid,
           BF.phasename as batchstatus,
           BB.warehouseid,
           W.warehousename,
           @fromwarehouseid as fromwarehouseid,
		   @fromwarehousename as fromwarehousename
           
	FROM breederbatch BB
    LEFT JOIN location L ON L.id = BB.locationid
    LEFT JOIN breederphase BF ON BF.id = BB.statusid
    LEFT JOIN warehouse W ON W.id = BB.warehouseid
    
    WHERE BB.locationid = p_locationid
    AND BB.statusid = p_statusid
    AND BB.companyid = p_companyid;
    
END;



CREATE PROCEDURE `spc_breederbatch_save`(
	IN p_id INT,
    IN p_locationid VARCHAR(100),
    IN p_warehouseid INT,
    IN p_batchname VARCHAR(200),
    IN p_binid INT,
    IN p_statusid INT(11),
    IN p_isNewFinancialYear TINYINT(4),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederbatch 
				(id, locationid, warehouseid, batchname, statusid, binid, isNewFinancialYear, maleitemid, femaleitemid, companyid)
			VALUES 
				(p_id, p_locationid, p_warehouseid, p_batchname, p_statusid, p_binid, p_isNewFinancialYear, NULL, NULL, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE breederbatch
				SET locationid = p_locationid, 
                warehouseid = p_warehouseid,
                batchname = p_batchname, 
                statusid = p_statusid,
                binid = p_binid,
                isNewFinancialYear = p_isNewFinancialYear,
                maleitemid = NULL,
                femaleitemid = NULL,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breederbatch', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_breederbatch_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		B.id,
        L.locationcode,
        L.locationname,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        WB.bincode,
        WB.binname,
        B.statusid,
        REF.refname as batchstatus,
        B.locationid
	
    FROM
		breederbatch B
	
    LEFT JOIN location L ON B.locationid = L.id
    LEFT JOIN warehouse W ON B.warehouseid = W.id
    LEFT JOIN warehousebin WB on B.binid = WB.id
    LEFT JOIN `reference` REF ON REF.id = B.statusid
	
	WHERE
		B.companyid = p_companyid
        
	ORDER BY B.id DESC;
	
END;



CREATE PROCEDURE `spc_breederbatch_select`(
	IN p_id INT
)
BEGIN
    
    SELECT
		B.id,
		B.locationid,
        L.locationcode,
        L.locationname,
        B.warehouseid,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        WB.bincode,
        WB.binname
	
    FROM
		breederbatch B
	
    LEFT JOIN location L ON B.locationid = L.id
    LEFT JOIN warehouse W ON B.warehouseid = W.id
    LEFT JOIN warehousebin WB on B.binid = WB.id
	
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND B.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
      

END;



CREATE PROCEDURE `spc_breederdailyconsumption_breederbatchwise`(
	IN p_companyid INT,
    IN p_breederbatchid INT
)
BEGIN
 
    SELECT
        BDC.id,
        BDC.breederdailytransactionid,
        BDC.consumptiontypeid,
        BDC.itemid,
        I.itemname,
        BDC.breedertypeid,
        BDC.shedlineid,
        BDC.quantity,
        BB.locationid,
        L.locationname,
        L.locationcode
     
    FROM
		breederdailyconsumption BDC
	LEFT JOIN breederdailytransaction BDT ON BDC.breederdailytransactionid = BDT.id
    INNER JOIN item I ON I.id = BDC.itemid
    INNER JOIN breederbatch BB ON BB.id = p_breederbatchid
    INNER JOIN location L ON L.id = BB.locationid
    
	WHERE
		BDC.companyid = p_companyid
        AND BDT.breederbatchid = p_breederbatchid;
END;



CREATE PROCEDURE `spc_breederdailyconsumption_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DELETE FROM breederdailyconsumption WHERE id = p_id;
    
	-- record log
	CALL spc_commonlog_save(p_companyid, 'breederdailyconsumption', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_breederdailyconsumption_save`(
	IN p_id INT,
    IN p_breederdailytransactionid INT,
    IN p_consumptiontypeid INT,
    IN p_itemid INT,
    IN p_shedlineid INT,
    IN p_isherbal INT,
    IN p_standardconsumption DECIMAL(9,3),
    IN p_quantity DECIMAL(9,3),
	IN p_warehouseid INT,
	IN p_issuedetailid INT,
    IN p_breederitemid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederdailyconsumption
				(breederdailytransactionid, 
				 consumptiontypeid, 
                 itemid, 
                 shedlineid, 
                 isherbal, 
                 standardconsumption,
                 quantity, 
                 issuedetailid,
                 breederitemid,
                 companyid)
			VALUES 
				(p_breederdailytransactionid, 
                 p_consumptiontypeid, 
                 p_itemid, 
                 p_shedlineid, 
                 p_isherbal, 
                 p_standardconsumption,
                 p_quantity,
                 p_issuedetailid,
                 p_breederitemid,
                 p_companyid);
      
      SET @action = 'INSERT';
      
	 
    ELSE
    
		UPDATE  breederdailyconsumption
				SET consumptiontypeid = p_consumptiontypeid, 
                itemid = p_itemid,
                shedlineid = p_shedlineid,
                isherbal = p_isherbal,
                standardconsumption = p_standardconsumption,
                quantity = p_quantity,
                issuedetailid = p_issuedetailid,
                breederitemid = p_breederitemid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   
    -- record log
    -- CALL spc_commonlog_save(p_companyid, 'breederdailyconsumption', out_id, @action, p_userid);
   
END;



CREATE PROCEDURE `spc_breederdailyconsumption_savejson`(
	IN p_breederdailytransactionid INT,
    IN p_dailyMortality json,
    IN p_feedConsumption json,
    IN p_medicineConsumption json,
    IN p_vaccineConsumption json,
	IN p_vitaminConsumption json,
    IN p_otherDetails json,
    OUT out_id INT
)
BEGIN

	-- save other details 
    
    SET @i = 0;
    
    SET @p_id = CASE WHEN JSON_EXTRACT(p_otherDetails, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.id'))) AS SIGNED) end;
	SET @out_id = null;
        
	CALL spc_breederdailyotherdetails_save(
        
	     @p_id,
		 p_breederdailytransactionid,
         JSON_UNQUOTE((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.lighton')))),
         JSON_UNQUOTE((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.lightoff')))),
		 CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.duration'))) AS DECIMAL(9,3)),
		 CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.temperature'))) AS DECIMAL(9,3)),
		 CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.humidity'))) AS DECIMAL(9,3)),
		 IF(json_type(json_extract(p_otherDetails, CONCAT('$.waterconsumption'))) = 'NULL', null, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.waterconsumption'))) AS DECIMAL(9,2))),
         CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.companyid'))) AS UNSIGNED INTEGER),
		 CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.userid'))) AS UNSIGNED INTEGER),
		 @out_id
	 );
     
    --  save daily mortality
    
	 SET @i = 0;
    
	 WHILE @i < JSON_LENGTH(p_dailyMortality) DO
    
		 SET @str = NULL;
         SELECT JSON_EXTRACT(p_dailyMortality,CONCAT('$[',@i,']')) INTO @str;
        
		 SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
		 SET @out_id = null;
        
		 CALL spc_breederdailymortality_save(
        
			 @p_id,
             p_breederdailytransactionid,
             (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.avgweight'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.totalmortality'))),
			 (SELECT JSON_EXTRACT(@str, CONCAT('$.mortalityreasonid'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.totalculls'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.cullsreasonid'))),
			 (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
		     (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			 @out_id
         );

		 SELECT @i + 1 INTO @i;
        
	  END WHILE;
    
    
    -- save daily feed consumption 
    
    SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_feedConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_feedConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_breederdailyconsumption_save(
        
			@p_id,
            p_breederdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
            -- if(json_type(json_extract(@str, CONCAT('$.breedertypeid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breedertypeid'))),
            if(json_type(json_extract(@str, CONCAT('$.shedlineid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.standardconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
			if(json_type(json_extract(@str, CONCAT('$.breederitemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breederitemid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    -- save daily medicine consumption
    
	SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_medicineConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_medicineConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_breederdailyconsumption_save(
        
			@p_id,
            p_breederdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
            if(json_type(json_extract(@str, CONCAT('$.shedlineid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.standardconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
             if(json_type(json_extract(@str, CONCAT('$.breederitemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breederitemid'))),
			(SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    -- save daily vaccine consumption
    
	SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_vaccineConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_vaccineConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_breederdailyconsumption_save(
        
			@p_id,
            p_breederdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
           --  if(json_type(json_extract(@str, CONCAT('$.breedertypeid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breedertypeid'))),
            if(json_type(json_extract(@str, CONCAT('$.shedlineid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.standardconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
             if(json_type(json_extract(@str, CONCAT('$.breederitemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breederitemid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    
    -- save daily vitamin comsumtion
    
     SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_vitaminConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_vitaminConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_breederdailyconsumption_save(
        
			@p_id,
            p_breederdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
           -- if(json_type(json_extract(@str, CONCAT('$.breedertypeid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breedertypeid'))),
            if(json_type(json_extract(@str, CONCAT('$.shedlineid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.standardconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
            if(json_type(json_extract(@str, CONCAT('$.breederitemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breederitemid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
END;



CREATE PROCEDURE `spc_breederdailyconsumption_select`(
	IN p_breederdailytransactionid INT
)
BEGIN
   
   SET @warehouseid = null;
   
   SELECT @warehouseid:=BS.warhouseid
   FROM breederdailytransaction BDT
   LEFT JOIN breedershed BS ON BDT.shedid = BS.id
   WHERE BDT.id = p_breederdailytransactionid;
   
   -- select feed consumption
   SELECT 
			BDC.id,
            BDC.breederdailytransactionid,
            BDC.consumptiontypeid,
            BDC.itemid,
            I.itemcode,
            I.itemname,
           -- R1.refname as breedertype,
            BDC.shedlineid,
            BSL.linename,
            BDC.isherbal,
            BDC.standardconsumption,
            BDC.quantity,
            BDC.breederitemid,
            R2.refname as unitname,
            I1.itemname as breederitemname,
            BDC.companyid,
            fnc_consumptionlivestock(BDC.itemid, @warehouseid, BDC.companyid) as instock,
            fnc_consumptionlivestock(BDC.itemid, @warehouseid, BDC.companyid) as instockforref
	
    FROM 
		breederdailyconsumption BDC
        LEFT JOIN item I On BDC.itemid = I.id
        LEFT JOIN item I1 On BDC.breederitemid = I1.id
       -- LEFT JOIN `reference` R1 ON BDC.breedertypeid = R1.id
        LEFT JOIN breedershedline BSL ON BDC.shedlineid = BSL.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		breederdailytransactionid = p_breederdailytransactionid AND
        consumptiontypeid = 861;
        
	
    -- select medicine consumption
   SELECT 
			BDC.id,
            BDC.breederdailytransactionid,
            BDC.consumptiontypeid,
            BDC.itemid,
            I.itemcode,
            I.itemname,
            BDC.breederitemid,
            I1.itemname as breederitemname,
          --   R1.refname as breedertype,
            BDC.shedlineid,
            BSL.linename,
            BDC.isherbal,
            BDC.standardconsumption,
            BDC.quantity,
            R2.refname as unitname,
            BDC.companyid,
            fnc_consumptionlivestock(BDC.itemid, @warehouseid, BDC.companyid) as instock,
            fnc_consumptionlivestock(BDC.itemid, @warehouseid, BDC.companyid) as instockforref
	
    FROM 
		breederdailyconsumption BDC
        LEFT JOIN item I On BDC.itemid = I.id
       -- LEFT JOIN `reference`R1 ON BDC.breedertypeid = R1.id
        LEFT JOIN breedershedline BSL ON BDC.shedlineid = BSL.id
		LEFT JOIN item I1 On BDC.breederitemid = I1.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		breederdailytransactionid = p_breederdailytransactionid AND
        consumptiontypeid = 862;
        
	-- select vaccine consumption
   SELECT 
			BDC.id,
            BDC.breederdailytransactionid,
            BDC.consumptiontypeid,
            BDC.itemid,
            I.itemcode,
            I.itemname,
            -- R1.refname as breedertype,
            BDC.shedlineid,
            BSL.linename,
            BDC.isherbal,
            BDC.standardconsumption,
            BDC.quantity,
            R2.refname as unitname,
            BDC.breederitemid,
            I1.itemname as breederitemname,
            BDC.companyid,
            fnc_consumptionlivestock(BDC.itemid, @warehouseid, BDC.companyid) as instock,
            fnc_consumptionlivestock(BDC.itemid, @warehouseid, BDC.companyid) as instockforref
  
  FROM 
		breederdailyconsumption BDC
        LEFT JOIN item I On BDC.itemid = I.id
        -- LEFT JOIN `reference` R1 ON BDC.breedertypeid = R1.id
        LEFT JOIN breedershedline BSL ON BDC.shedlineid = BSL.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
		LEFT JOIN item I1 On BDC.breederitemid = I1.id
        
	WHERE
		breederdailytransactionid = p_breederdailytransactionid AND
        consumptiontypeid = 863;
        
	-- select vitamin consumption
   SELECT 
			BDC.id,
            BDC.breederdailytransactionid,
            BDC.consumptiontypeid,
            BDC.itemid,
            I.itemcode,
            I.itemname,
           -- R1.refname as breedertype,
            BDC.shedlineid,
            BSL.linename,
            BDC.isherbal,
            BDC.breederitemid,
            I1.itemname as breederitemname,
            BDC.standardconsumption,
            BDC.quantity,
            R2.refname as unitname,
            BDC.companyid,
            fnc_consumptionlivestock(BDC.itemid, @warehouseid, BDC.companyid) as instock,
            fnc_consumptionlivestock(BDC.itemid, @warehouseid, BDC.companyid) as instockforref
	
    FROM 
		breederdailyconsumption BDC
        LEFT JOIN item I On BDC.itemid = I.id
       --  LEFT JOIN `reference` R1 ON BDC.breedertypeid = R1.id
        LEFT JOIN breedershedline BSL ON BDC.shedlineid = BSL.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
		LEFT JOIN item I1 On BDC.breederitemid = I1.id
        
	WHERE
		breederdailytransactionid = p_breederdailytransactionid AND
        consumptiontypeid = 864;
            
END;



CREATE PROCEDURE `spc_breederdailymortality_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN
    DELETE FROM breederdailymortality WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'breederdailymortality', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_breederdailymortality_save`(
	IN p_id INT,
    IN p_breederdailytransactionid INT,
    IN p_itemid INT,
    IN p_shedlineid INT,
    IN p_avgweight DECIMAL(9,3),
    IN p_totalmortality INT,
    IN p_mortalityreasonid INT,
    IN p_totalculls INT,
    IN p_cullsreasonid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederdailymortality
				(breederdailytransactionid, 
				 itemid, 
                 shedlineid, 
                 avgweight, 
                 totalmortality, 
                 mortalityreasonid, 
                 totalculls, 
                 cullsreasonid,
                 companyid)
			VALUES 
				(p_breederdailytransactionid, 
                 p_itemid, 
                 p_shedlineid, 
                 p_avgweight, 
                 p_totalmortality, 
                 p_mortalityreasonid,
                 p_totalculls, 
                 p_cullsreasonid,
                 p_companyid);
	  
      SET @action = 'INSERT';
	
    ELSE
    
		UPDATE  breederdailymortality
				SET breederdailytransactionid = p_breederdailytransactionid, 
                itemid = p_itemid,
                shedlineid = p_shedlineid, 
                avgweight = p_avgweight,
                totalmortality = p_totalmortality,
                mortalityreasonid = p_mortalityreasonid,
                totalculls = p_totalculls,
                cullsreasonid = p_cullsreasonid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederdailymortality', out_id, @action, p_userid);
   
END;



CREATE PROCEDURE `spc_breederdailyotherdetails_save`(
	IN p_id INT,
    IN p_breederdailytransactionid INT,
    IN p_lighton VARCHAR(30),
    IN p_lightoff VARCHAR(30),
    IN p_duration DECIMAL(9,2),
    IN p_temperature DECIMAL(9,3),
    IN p_humidity DECIMAL(9,3),
    IN p_waterconsumption DECIMAL(9,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
     
     
     SET p_lighton = TIME(STR_TO_DATE(p_lighton, '%h:%i %p' ));
	 SET p_lightoff = TIME(STR_TO_DATE(p_lightoff, '%h:%i %p' ));
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederdailyotherdetail
				(breederdailytransactionid, 
				 lighton, 
                 lightoff, 
                 duration, 
                 temperature, 
                 humidity, 
                 waterconsumption, 
                 companyid)
			VALUES 
				(p_breederdailytransactionid, 
				 p_lighton,
                 p_lightoff,
                 p_duration, 
                 p_temperature, 
                 p_humidity, 
                 p_waterconsumption,
                 p_companyid);
	  
      SET @action = 'INSERT';
	
    ELSE
    
		UPDATE  breederdailyotherdetail
				SET breederdailytransactionid = p_breederdailytransactionid, 
                lighton = p_lighton,
                lightoff = p_lightoff, 
                duration = p_duration,
                temperature = p_temperature,
                humidity = p_humidity,
                waterconsumption = p_waterconsumption,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederdailyotherdetails', out_id, @action, p_userid);
   
END;



CREATE PROCEDURE `spc_breederdailytransaction_bybreederbatchid`(
	IN p_breederbatchid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	
SET @maleitemid = NULL;
SET @femaleitemid = NULL;
SET @malemortality = 0;
SET @femalemortality = 0;
SET @maleculls = 0;
SET @femaleculls = 0;
SELECT  
			defaultfemalechickid, defaultmalechickid INTO @femaleitemid, @maleitemid
			
		FROM 
			breedersetting LIMIT 1;
            
            SELECT 
			
				CASE WHEN itemid = @maleitemid THEN @malemortality:= totalmortality ELSE NULL END as malemortality,
				CASE WHEN itemid = @femaleitemid THEN @femalemortality:= totalmortality ELSE NULL END as femalemortality
                
				FROM( SELECT
					  itemid, SUM(totalmortality) as totalmortality   
            
					  FROM breederdailytransaction BDT
					  LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id
    
					  WHERE breederbatchid = p_breederbatchid
    
				GROUP BY itemid) as totalmortality;
                
                
                SELECT 
			
				CASE WHEN itemid = @maleitemid THEN @maleculls:= totalculls ELSE NULL END as maleculls,
				CASE WHEN itemid = @femaleitemid THEN @femaleculls:= totalculls ELSE NULL END as femaleculls
                
				FROM( SELECT
					  itemid, SUM(totalculls) as totalculls    
            
					  FROM breederdailytransaction BDT
					  LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id
    
					  WHERE breederbatchid = p_breederbatchid
    
				GROUP BY itemid) as totalculls;
    
    SELECT 
			 IFNULL(@malemortality,0) AS malemortality,
			 IFNULL(@maleculls,0) AS maleculls,
             IFNULL(@femalemortality,0) AS femalemortality,
			 IFNULL(@femaleculls,0) AS femaleculls;
    

END;



CREATE PROCEDURE `spc_breederdailytransaction_issueconsumeditems`(
  IN p_dailytransactionid INT,
  IN p_outid INT
)
BEGIN
	DECLARE p_itemid INT;
	DECLARE p_itemname VARCHAR(200);
	DECLARE p_itemunitid INT;
	DECLARE p_unitcost INT;
	DECLARE p_totalmortality INT;
	DECLARE p_totalculls INT;
    DECLARE p_quantity INT;
    DECLARE p_companyid INT;
    DECLARE p_userid INT;
    DECLARE p_breederbatchid INT;
    DECLARE p_shedwarehousebinid INT;
    DECLARE p_warehouseid INT;
    DECLARE p_mortalityid INT;
    DECLARE p_consumptionid INT;
    DECLARE p_grpoid INT;
	DECLARE p_itembatch VARCHAR(300);
    DECLARE x INT;
	DECLARE i INT;
    DECLARE material_itemid INT;
    DECLARE material_itembatch VARCHAR(300);
    DECLARE material_quantity INT;
	SET @row_number = 0;
    SET @row_number1 = 0;
	SET @reccount = 0;
    SET @consumptionreccount = 0;
	SET x = 1;
    SET i = 1;
    SET @materialissue_outid = null;
    SET @materialissuedetail_outid = null;
    SET @movement_outid = null;
    SET @consumptionissue_outid = null;
    
    SELECT BDT.breederbatchid, BS.warehousebinid, BDT.companyid, BDT.approvedby, BS.warhouseid, BBP.grpono 
    INTO p_breederbatchid, p_shedwarehousebinid, p_companyid, p_userid, p_warehouseid, p_grpoid
    
    FROM breederdailytransaction BDT
    LEFT JOIN breedershed BS ON BDT.shedid = BS.id
    LEFT JOIN breederbatchplacement BBP ON BDT.breederbatchid = BBP.breederbatchid
    
    WHERE BDT.id = p_dailytransactionid;
    
	-- save issue parent record
	 CALL spc_materialissue_save(
			null, 
			NOW(), 
			381, 
			p_breederbatchid, 
			362, 
			'breeder daily culls and mortality', 
			p_userid, 
            p_warehouseid,
            p_shedwarehousebinid,
            null, 
			null, 
            p_companyid, 
            p_userid, 
            @materialissue_outid
		);
 
	UPDATE breederdailytransaction SET issueid = @materialissue_outid
	WHERE id = p_dailytransactionid;
        
	-- select mortality and culls detail for given daily transaction and issue them
		
		DROP TEMPORARY TABLE IF EXISTS tempmortality;
        
		CREATE TEMPORARY TABLE tempmortality
		SELECT 
			BDM.id,
			BDM.itemid, 
			I.itemname, 
			I.itemunitid,
			I.unitcost,
			totalmortality, 
			totalculls, 
			(@row_number := @row_number + 1) as `rank`
            
		FROM breederdailymortality BDM
		LEFT JOIN item I ON BDM.itemid = I.id
		WHERE BDM.breederdailytransactionid = p_dailytransactionid;
	 
		SELECT COUNT(*) INTO @reccount FROM tempmortality;
	 
		WHILE x  <= @reccount DO
			
			SELECT id, itemid, itemname, itemunitid, unitcost, totalmortality, totalculls
            INTO p_mortalityid, p_itemid, p_itemname, p_itemunitid, p_unitcost, p_totalmortality, p_totalculls
            FROM tempmortality WHERE `rank` = x;
            SET p_quantity = (p_totalmortality + p_totalculls);
		
			SELECT itembatch into p_itembatch
            FROM grpodetail WHERE grpoid = p_grpoid AND itemid = p_itemid;
            
			CALL spc_materialissuedetail_save(null, @materialissue_outid, p_itemid, p_itemname, p_quantity, p_unitcost, (p_quantity * p_unitcost), p_itemunitid, p_itembatch, p_companyid, p_userid, @materialissuedetail_outid);
			CALL spc_materialmovement_save(null, p_itemid, p_itembatch, 683, @materialissuedetail_outid, NOW(), p_quantity, p_warehouseid, p_shedwarehousebinid, null, null, null, p_companyid, p_userid,@movement_outid);
  
			UPDATE breederdailymortality SET issuedetailid = @materialissuedetail_outid
            WHERE id = p_mortalityid;
            
			SET  x = x + 1; 
		END WHILE;
	 
		DROP TEMPORARY TABLE tempmortality;
        
	
   -- select daily consumption for given daily transaction and issue them itembatch wise
   
   SET @reccount = 0;
   SET x = 1;
   SET @row_number = 0;
 
   
	DROP TEMPORARY TABLE IF EXISTS tempconsumption;
        
	CREATE TEMPORARY TABLE tempconsumption
	SELECT 
		BDC.id,
		BDC.itemid, 
		I.itemname, 
		I.itemunitid,
		I.unitcost,
		quantity, 
		(@row_number := @row_number + 1) as `rank`
	FROM breederdailyconsumption BDC
	LEFT JOIN item I ON BDC.itemid = I.id
	WHERE BDC.breederdailytransactionid = p_dailytransactionid;
	 
	SELECT COUNT(*) INTO @consumptionreccount FROM tempconsumption;
    
    
	WHILE x  <= @consumptionreccount DO
			
		SET p_consumptionid = null;
		SET p_itemid = null;
		SET p_itemname = null;
		SET p_itemunitid = null;
		SET p_unitcost = null;
		SET p_quantity = null;
        SET i = 1;
		SET @reccount = 0;
   
		SELECT id, itemid, itemname, itemunitid, unitcost, quantity
		INTO p_consumptionid, p_itemid, p_itemname, p_itemunitid, p_unitcost, p_quantity
		FROM tempconsumption WHERE `rank` = x;
         
	
        -- select itembatch and quantity from material movement for current item
        DROP TEMPORARY TABLE IF EXISTS tempitembatch;
        
		CREATE TEMPORARY TABLE tempitembatch
        
        SELECT itemid, itembatch, stockin, 
        fnc_itembatchstockout(itemid, IFNULL(itembatch,''), p_warehouseid) as stockout,
        (@row_number1 := @row_number1 + 1) as recordrank 
       FROM(
    
			SELECT itemid, itembatch, SUM(quantity) as stockin
			FROM materialmovement
			WHERE 
				itemid = p_itemid AND
				companyid = p_companyid AND
				towarehouseid = p_warehouseid AND
				transactiontypeid in (681,682,684)
				GROUP BY itemid, itembatch
			) stocktable; 
      
        
		SELECT COUNT(*) INTO @reccount FROM  tempitembatch;
        
        WHILE i  <= @reccount DO
        
			SET @issuequantity = 0;
			
			SELECT itemid, itembatch, (stockin - stockout) as quantity
			INTO  material_itemid, material_itembatch, material_quantity
			FROM  tempitembatch 
            WHERE recordrank = i;
			
             IF (p_quantity > 0 ) THEN
             
				IF (material_quantity >= p_quantity) THEN
					SET @issuequantity = p_quantity;
					SET p_quantity = 0;
				ELSE
					SET @issuequantity = p_quantity - material_quantity;
                END IF;
                
                  CALL spc_materialissuedetail_save(null, @materialissue_outid, p_itemid, p_itemname, @issuequantity, p_unitcost, (@issuequantity * p_unitcost), p_itemunitid, material_itembatch, p_companyid, p_userid, @materialissuedetail_outid);
				  CALL spc_materialmovement_save(null, p_itemid, material_itembatch, 683, @materialissuedetail_outid, NOW(), @issuequantity, p_warehouseid, p_shedwarehousebinid, null, null, null, p_companyid, p_userid,@movement_outid);
				  CALL spc_consumptionissue_save(null, p_itemid, p_consumptionid, @materialissuedetail_outid, @consumptionissue_outid);
              
              
            
            END IF;
            
        	SET  i = i + 1; 
	    END WHILE;
       
       DROP TEMPORARY TABLE tempitembatch;
       
	
		-- UPDATE breederdailyconsumption SET issuedetailid = @materialissuedetail_outid
        -- WHERE id = p_consumptionid;
            
			SET  x = x + 1; 
	END WHILE;
	 
	DROP TEMPORARY TABLE tempconsumption;
END;



CREATE PROCEDURE `spc_breederdailytransaction_save`(
	IN p_id INT,
    IN p_locationid INT,
    IN p_shedid INT,
    IN p_breederbatchid INT,
    IN p_createdby INT,
    IN p_transactiondate DATE,
    IN p_approvedby INT,
    IN p_approvaldate DATE,
    IN p_statusid INT,
    IN p_remark VARCHAR(500),
    IN p_warehouseid INT,
    IN p_issueid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;
     
	IF EXISTS(
		SELECT id from breederdailytransaction where breederbatchid = p_breederbatchid AND transactiondate = p_transactiondate AND shedid = p_shedid
				AND (
						(NULLIF(p_id, 0) IS NULL)
						-- OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id)
                    )
            
		) THEN BEGIN
        
		SELECT -1 INTO out_id;
	
	END;
            
    ELSEIF EXISTS(
		 SELECT id from breederdailytransaction where statusid = 821 AND locationid = p_locationid
			 AND (
				 (NULLIF(p_id, 0) IS NULL)
				    -- OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id)
				 )
            
		 ) THEN  BEGIN
        
	 SELECT -2 INTO out_id;
	
	 END;
    
    ELSE
    
    BEGIN
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
		
        IF (p_statusid = 822) THEN
			SET p_approvaldate = NOW();
        END IF;
        
        INSERT INTO breederdailytransaction 
				(shedid, 
				 breederbatchid, 
                 createdby, 
                 transactiondate, 
                 approvedby, 
                 approvaldate, 
                 statusid, 
                 remark, 
                 issueid,
                 companyid)
			VALUES 
				(p_shedid, 
                 p_breederbatchid, 
                 p_createdby, 
                 p_transactiondate, 
                 p_approvedby, 
                 p_approvaldate, 
                 p_statusid,
                 p_remark, 
                 @materialissue_outid,
                 p_companyid);
	  
      SET @action = 'INSERT';
        
    ELSE
    
		UPDATE  breederdailytransaction
				SET shedid = p_shedid, 
                breederbatchid = p_breederbatchid,
                transactiondate = p_transactiondate,
                approvedby = p_approvedby,
                approvaldate = p_approvaldate,
                statusid = p_statusid,
                remark = p_remark,
                issueid = p_issueid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
             
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
     CALL spc_commonlog_save(p_companyid, 'breederdailytransaction', out_id, @action, p_userid);
  
  END;
   
   END IF;
END;



CREATE PROCEDURE `spc_breederdailytransaction_search`(
	IN p_companyid INT
)
BEGIN
    
    SELECT
			BT.id,
            BT.shedid,
            BS.shedname,
            BT.breederbatchid,
            BB.batchname,
            DATE_FORMAT( BT.transactiondate,'%d/%m/%Y') as transactiondate,
            R.refname as `status`
		
    FROM
		breederdailytransaction BT
		LEFT JOIN breedershed BS ON BT.shedid = BS.id
        LEFT JOIN breederbatch BB ON BT.breederbatchid = BB.id
        LEFT JOIN `reference` R ON BT.statusid = R.id
    
	WHERE
		BT.companyid = p_companyid
        ORDER BY BT.id DESC;
END;



CREATE PROCEDURE `spc_breederdailytransaction_select`(
	IN p_id INT
)
BEGIN
    
    -- select breeder daily transaction details
    SELECT
		  BDT.id,
          shedid,
          BS.warhouseid as warehouseid,
          BS.warehousebinid,
          BS.shedname,
          BDT.breederbatchid,
          L.locationcode,
          L.locationname,
          BB.batchname,
		  DATE_FORMAT(BDT.transactiondate,'%d/%m/%Y') as transactiondate,
		  BDT.statusid,
          R.refname as `status`,
          U.username as createdbyname,
          BDT.remark,
          BDT.companyid,
          BDT.createdby,
		  BDT.createdby as userid,
          BDT.issueid,
          BBP.placementdate,
          BF.phasename as phasestatusname,
          BB.locationid
          
    FROM
		breederdailytransaction BDT
		LEFT JOIN breedershed BS ON BDT.shedid = BS.id
        LEFT JOIN breederbatch BB ON BDT.breederbatchid = BB.id
        LEFT JOIN `reference` R ON BDT.statusid = R.id
        LEFT JOIN `user1` U ON BDT.createdby = U.id
        LEFT JOIN location L ON BB.locationid = L.id
        LEFT JOIN breederbatchplacement BBP ON BDT.breederbatchid = BBP.breederbatchid
        LEFT JOIN breederphase BF on BBP.phasestatusid = BF.id

	WHERE
		 BDT.id = p_id;
         
         
	-- select breeder daily transaction other details
    
    SELECT
			id,
            breederdailytransactionid,
            TIME_FORMAT(lighton, '%h:%i %p') as lighton,
            TIME_FORMAT(lightoff, '%h:%i %p') as lightoff,
            duration,
            temperature,
            humidity,
            waterconsumption,
            companyid,
            (SELECT createdby FROM breederdailytransaction WHERE id = p_id) as userid 
    
    FROM
		breederdailyotherdetail 
        
	WHERE
		breederdailytransactionid = p_id;
        
	
	-- select breeder daily culls-mortality details
  
    SELECT
			BDM.id,
            BDM.breederdailytransactionid,
            BDM.itemid,
            I.itemcode,
            I.itemname,
            BDM.shedlineid,
            BSL.linename,
            BDM.avgweight,
            BDM.totalmortality,
            BDM.mortalityreasonid,
            BR1.reason as mortalityreason,
            BDM.totalculls,
            BDM.cullsreasonid,
            BR2.reason as cullsreason,
            BDM.companyid,
           -- fnc_linewise_chickslivestock(BDM.shedlineid, BDM.itemid, BDM.breederdailytransactionid) as instock,
           fnc_linewise_chickslivestock(BDM.shedlineid, BDM.itemid, BDM.breederdailytransactionid) as instock,
           
          -- fnc_linewise_chicksplacedtock(BDM.shedlineid, BDM.itemid, BDM.breederdailytransactionid) as instockforref,
          fnc_linewise_chickslivestock(BDM.shedlineid, BDM.itemid, BDM.breederdailytransactionid) as instockforref,
            BDM.issuedetailid
            
	FROM breederdailymortality BDM
    LEFT JOIN breederreasons BR1 ON BDM.mortalityreasonid = BR1.id
    LEFT JOIN breederreasons BR2 ON BDM.cullsreasonid = BR2.id
    LEFT JOIN item I ON BDM.itemid = I.id
    LEFT JOIN breedershedline BSL ON BDM.shedlineid = BSL.id
    
    WHERE
		BDM.breederdailytransactionid = p_id;
END;



CREATE PROCEDURE `spc_breederdailytransaction_updatebatchbalance`(
	IN p_breederdailytransactionid INT(11),
    OUT out_id INT
)
BEGIN
    
    DECLARE p_breederbatchid INT;
    DECLARE p_shedid INT;
    DECLARE p_shedlineid INT;
	DECLARE p_itemid INT;
	DECLARE p_totalmortality INT;
	DECLARE p_totalculls INT;
    DECLARE p_quantity INT;
	DECLARE x INT;
	SET @reccount = 0;
    SET @row_number = 0;
	SET x = 1;
    
    
	 DROP TEMPORARY TABLE IF EXISTS tempdailymortality;
        
		CREATE TEMPORARY TABLE tempdailymortality
        
		SELECT 
			BDT.breederbatchid,
            BDT.shedid,
            BDM.shedlineid,
			BDM.itemid, 
			totalmortality, 
			totalculls, 
			(@row_number := @row_number + 1) as `rank`
            
		FROM breederdailymortality BDM
		LEFT JOIN item I ON BDM.itemid = I.id
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
		WHERE BDM.breederdailytransactionid = p_breederdailytransactionid;
	 
		SELECT COUNT(*) INTO @reccount FROM tempdailymortality;
	 
		WHILE x  <= @reccount DO
    
			SET p_breederbatchid = null;
            SET p_shedid = null;
            SET p_shedlineid = null;
            SET p_itemid = null;
            SET p_totalmortality = null;
            SET p_totalculls = null;
            SET p_quantity = 0;
            
			SELECT breederbatchid, shedid, shedlineid, itemid, totalmortality, totalculls
            INTO p_breederbatchid, p_shedid, p_shedlineid, p_itemid, p_totalmortality, p_totalculls
            FROM tempdailymortality WHERE `rank` = x;
            
            SET p_quantity = (p_totalmortality + p_totalculls);
		
			UPDATE breederbatchbalance 
            SET 
				quantity = (quantity - p_quantity),
                updateddate = NOW()
                
            WHERE 
                breederbatchid = p_breederbatchid AND
                breedershedid = p_shedid AND
                breedershedpenid = p_shedlineid AND
                itemid = p_itemid AND
                quantity != 0;
            
            SELECT LAST_INSERT_ID() INTO out_id; 
            
			SET  x = x + 1; 
            
		END WHILE;
	 
		DROP TEMPORARY TABLE tempdailymortality;
    
    
   -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederbatchbalance', out_id, 'update', p_userid);

END;



CREATE PROCEDURE `spc_breederfeedstandarddetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederfeedstandarddetail WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breederfeedstandarddetail_feedconsumed_search`(
 IN p_week INT(11),
 IN p_itemid INT(11),
 IN p_breederitemid INT(11),
 IN p_companyid INT(11)
 )
BEGIN 

	SELECT BFS.id,
           BFSD.feedconsumed
           
	FROM breederfeedstandard BFS
    
    LEFT JOIN breederfeedstandarddetail BFSD ON BFSD.breederfeedstandardid =  BFS.id
  
    WHERE BFSD.weeknumber = p_week
    AND BFSD.itemid = p_itemid AND
    BFS.breeditemid = p_breederitemid AND
    BFS.companyid = p_companyid ;
    
END;



CREATE PROCEDURE `spc_breederfeedstandarddetail_save`(
    IN p_id INT,
    IN p_breederfeedstandardid INT(11),
    IN p_weeknumber TINYINT(4),
    IN p_itemid INT(11),
    IN p_feedconsumed DECIMAL(9,3),
	IN p_cumulativefeed DECIMAL(9,3),
    IN p_weeklybodyweight DECIMAL(9,3),
	IN p_weeklygain DECIMAL(9,3),
    IN p_phaseid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederfeedstandarddetail 
				(id, breederfeedstandardid, weeknumber, itemid, feedconsumed, cumulativefeed, weeklybodyweight, weeklygain, phaseid, companyid)
			VALUES 
				(p_id, p_breederfeedstandardid, p_weeknumber, p_itemid, p_feedconsumed, p_cumulativefeed, p_weeklybodyweight, p_weeklygain, p_phaseid, p_companyid);
		
        SET @action = 'INSERT';

	ELSE
    
		UPDATE breederfeedstandarddetail
			SET breederfeedstandardid = p_breederfeedstandardid, 
				weeknumber = p_weeknumber,
				itemid = p_itemid,
                feedconsumed = p_feedconsumed,
                cumulativefeed = p_cumulativefeed,
                weeklybodyweight = p_weeklybodyweight,
                weeklygain = p_weeklygain,
                phaseid = p_phaseid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
             SET @action = 'UPDATE';   
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	-- record log
   CALL spc_commonlog_save(p_companyid, 'breederfeedstandarddetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_breederfeedstandarddetail_select`(
	IN p_breederfeedstandardid INT
)
BEGIN

	SELECT
		 B.id,
         breederfeedstandardid,
         weeknumber,
		 itemid,
         feedconsumed,
         cumulativefeed,
         weeklybodyweight,
         weeklygain,
         phaseid,
         I.itemname,
         I.itemcode
        
	FROM
		breederfeedstandarddetail B
        LEFT JOIN item I ON B.itemid = I.id
        
	WHERE
		breederfeedstandardid = p_breederfeedstandardid;

END;



CREATE PROCEDURE `spc_breederfeedstandard_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederfeedstandarddetail WHERE breederfeedstandardid = p_id;
	DELETE FROM breederfeedstandard WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breederfeedstandard_save`(
    IN p_id INT,
    IN p_standardname VARCHAR(200),
    IN p_breednametypeid INT(11),
    IN p_breeditemid INT(11),
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederfeedstandard 
				(id, standardname, breednametypeid, breeditemid, fromdate, todate, companyid)
			VALUES 
				(p_id, p_standardname, p_breednametypeid, p_breeditemid, p_fromdate, p_todate, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE breederfeedstandard
			SET standardname = p_standardname, 
				breednametypeid = p_breednametypeid,
                breeditemid = p_breeditemid,
                fromdate = p_fromdate,
                todate = p_todate,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'breederfeedstandard', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_breederfeedstandard_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 BFS.id,
         BFS.standardname,
		 BFS.breednametypeid,
         BFS.breeditemid,
         I.itemname as breeditemname,
         DATE_FORMAT(BFS.fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(BFS.todate,'%d/%m/%Y') as todate
         
	FROM
		breederfeedstandard BFS
        LEFT JOIN item I ON I.id = BFS.breeditemid
   	
	WHERE
		BFS.companyid = p_companyid
        
	ORDER BY id DESC;
END;



CREATE PROCEDURE `spc_breederfeedstandard_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 BFS.id,
         BFS.standardname,
		 BFS.breednametypeid,
         BFS.breeditemid,
         I.itemname as breeditemname,
         DATE_FORMAT(BFS.fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(BFS.todate,'%d/%m/%Y') as todate
         
	FROM
		breederfeedstandard BFS
        LEFT JOIN item I ON I.id = BFS.breeditemid
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND BFS.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_breederperformanceobjective_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederperformanceobjective WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breederperformanceobjective_save`(
	IN p_id INT,
    IN p_itemid INT,
    IN p_ageinweek INT,
    IN p_livability DECIMAL(8,3),
    IN p_hdinpercent DECIMAL(8,3),
    IN p_heinpercent DECIMAL(8,3),
    IN p_hhpperweek DECIMAL(8,3),
    IN p_cumhhp DECIMAL(8,3),
	IN p_hhheperweek DECIMAL(8,3),
    IN p_cumhhhe DECIMAL(8,3),
    IN p_hatchinpercent DECIMAL(8,3),
    IN p_chicksperweek DECIMAL(8,3),
    IN p_cumchicks DECIMAL(8,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederperformanceobjective
				(itemid, ageinweek , livability, hdinpercent, 
                heinpercent, hhpperweek, cumhhp, hhheperweek, hatchinpercent, 
                cumhhhe, chicksperweek, cumchicks, companyid)
			VALUES 
				(p_itemid, p_ageinweek , p_livability, p_hdinpercent, 
                p_heinpercent, p_hhpperweek, p_cumhhp, p_hhheperweek, p_hatchinpercent, 
                p_cumhhhe, p_chicksperweek, p_cumchicks, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE breederperformanceobjective
			SET 
				itemid	=	p_itemid,
                ageinweek = p_ageinweek, 
                livability = p_livability,
                hdinpercent = p_hdinpercent, 
                heinpercent = p_heinpercent,
                cumhhp = p_cumhhp,
                hhpperweek = p_hhpperweek,
                hhheperweek = p_hhheperweek,
                hatchinpercent = p_hatchinpercent,
                cumhhhe = p_cumhhhe,
                chicksperweek = p_chicksperweek,
                cumchicks =p_cumchicks,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breederperformanceobjective', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_breederperformanceobjective_search`(
IN p_itemid INT
)
BEGIN
	SELECT id ,
		itemid,
        ageinweek,
        livability,
        hdinpercent,
        heinpercent,
        hhpperweek,
        cumhhp,
        hhheperweek,
        cumhhhe,
        hatchinpercent,
        chicksperweek,
        cumchicks,
        suggestedfeedingram,
        fertilityinpercent
	FROM breederperformanceobjective
    WHERE
    itemid = p_itemid;
END;



CREATE PROCEDURE `spc_breederperformanceobjective_select`(
IN p_id INT
)
BEGIN
	SELECT id,
		itemid,
		ageinweek,
		livability,
        hdinpercent,
        heinpercent,
        hhpperweek,
        cumhhp,
        hhheperweek,
		cumhhhe,
        hatchinpercent,
        chicksperweek,
        cumchicks,
        suggestedfeedingram,
        fertilityinpercent
        
	
    FROM  breederperformanceobjective 
	
    WHERE 
          id = p_id;

END;



CREATE PROCEDURE `spc_breederperformance_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederperformance WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breederperformance_save`(
	IN p_id INT,
    IN p_date date,
    IN p_week INT,
    IN p_totaleggspercenthw DECIMAL(8,3),
    IN p_hatcheggspercenthw DECIMAL(8,3),
    IN p_mortality DECIMAL(8,3),
    IN p_percentheweekly DECIMAL(8,3),
    IN p_totaleggshh DECIMAL(8,3),
    IN p_hatcheggshh DECIMAL(8,3),
    IN p_weeklypercenthatch DECIMAL(8,3),
    IN p_chickshh DECIMAL(8,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
    
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederperformance
				(date, week, totaleggspercenthw, hatcheggspercenthw, mortality , 
                percentheweekly, totaleggshh, hatcheggshh, 
                weeklypercenthatch, chickshh, companyid)
			VALUES 
				(p_date, p_week, p_totaleggspercenthw, p_hatcheggspercenthw, p_mortality, p_percentheweekly, 
                p_totaleggshh, p_hatcheggshh, p_weeklypercenthatch, p_chickshh,  
                p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE breederperformance
			SET 
				date	=	p_date,
				week	=	p_week,
                totaleggspercenthw = p_totaleggspercenthw,
                hatcheggspercenthw = p_hatcheggspercenthw, 
                mortality = p_mortality,
                percentheweekly = p_percentheweekly, 
                totaleggshh = p_totaleggshh,
                hatcheggshh = p_hatcheggshh,
                weeklypercenthatch = p_weeklypercenthatch,
                chickshh = p_chickshh,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breederperformance', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_breederperformance_search`(
IN p_companyid INT
)
BEGIN
	SELECT id ,
		week,
        date,
		totaleggspercenthw,
        hatcheggspercenthw,
        mortality,
        percentheweekly,
        totaleggshh,
        hatcheggshh,
        weeklypercenthatch,
        chickshh
        
	FROM breederperformance
    WHERE
    companyid = p_companyid
    
    ORDER BY id DESC;
END;



CREATE PROCEDURE `spc_breederperformance_select`(
IN p_id INT
)
BEGIN
	SELECT id,
		week,
        CONVERT(date,DATE) AS date,
		totaleggspercenthw,
		hatcheggspercenthw,
        mortality,
        percentheweekly,
        totaleggshh,
        hatcheggshh,
        weeklypercenthatch,
        chickshh
        
	
    FROM  breederperformance 
	
    WHERE 
          id = p_id;

END;



CREATE PROCEDURE `spc_breederphase_byweek`(
  IN p_week INT
  )
BEGIN
 SELECT id , phasename from breederphase
  
   WHERE fromweek <= p_week
   AND toweek >= p_week;
END;



CREATE PROCEDURE `spc_breederplacementscheduledetail_byrequestid`(
    IN p_placementscheduleid INT,
    IN p_grpono INT,
    IN p_companyid INT 
    )
BEGIN
	/*SET @grpono = null;
    
	SELECT G.id into @grpono
	FROM grpo G
		INNER JOIN breederplacementschedule BPS ON BPS.id = p_placementscheduleid
		INNER JOIN purchaseorder PO ON PO.purchaserequestid = BPS.requestid
		
	WHERE
		G.purchaseorderid = PO.id;*/
        
SELECT  BPD.id as placementscheduledetailid,
		BPD.placementscheduleid,
        BPD.breedershedid,
		BS.shedname as shedname,
        BSL.linename,
        BSL.id as breedershedpenid,
        BSL.capacity as linecapacity,
		BPD.maleproposalquantity,
		BPD.femaleproposalquantity,
		BPD.remark,
        GD.itemid,
        (GD.quantity) as quantity, 
        G.id as grpono
        
	FROM 
		breederplacementscheduledetail BPD
    
       LEFT JOIN breedershed BS ON BPD.breedershedid= BS.id
       LEFT JOIN breedershedline BSL ON BSL.breedershedid = BS.id
       LEFT JOIN breederplacementschedule BPS ON BPS.id = BPD.placementscheduleid
       LEFT JOIN purchaseorder PO ON PO.purchaserequestid = BPS.requestid
       LEFT JOIN grpo G ON G.purchaseorderid = PO.id
       LEFT JOIN grpodetail GD ON GD.grpoid = G.id

	
	WHERE
		BPD.placementscheduleid = p_placementscheduleid
        AND G.id = p_grpono
        AND BPD.companyid = p_companyid;
        

END;



CREATE PROCEDURE `spc_breederplacementscheduledetail_save`(
	IN p_id INT(11),
	IN p_placementscheduleid INT(11),
	IN p_shedreadyid INT(11),
	IN p_breedershedid INT(11),
	IN p_capacity INT(11),
	IN p_maleproposalquantity INT(11),
	IN p_femaleproposalquantity INT(11),
	IN p_remark	varchar(200),
	IN p_companyid INT(11),
    IN p_userid INT,
	OUT out_id INT
    )
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederplacementscheduledetail 
				(placementscheduleid, shedreadyid, breedershedid, capacity, maleproposalquantity, femaleproposalquantity, remark, companyid)
			VALUES 
				(p_placementscheduleid, p_shedreadyid, p_breedershedid, p_capacity, p_maleproposalquantity, p_femaleproposalquantity, p_remark, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE breederplacementscheduledetail
			SET placementscheduleid = p_placementscheduleid,
                shedreadyid = p_shedreadyid, 
                breedershedid = p_breedershedid,
                capacity = p_capacity, 
                maleproposalquantity = p_maleproposalquantity,
                femaleproposalquantity = p_femaleproposalquantity,
                remark = p_remark,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
			
             
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    -- update breeder shed status 13 = 'scheduled'
    UPDATE breedershed BS SET statusid = 13 where BS.id = p_breedershedid;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breederplacementscheduledetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_breederplacementscheduledetail_search`(
	IN p_placementscheduleid INT,
    IN p_companyid INT 
    )
BEGIN
        
SELECT  BPD.id,
		BPD.placementscheduleid,
		BS.shedname as shedname,
        BPD.shedreadyid,
        BPD.breedershedid,
		L.locationname,
        BPD.capacity,
		BPD.maleproposalquantity,
		BPD.femaleproposalquantity,
		BPD.remark,
		BPD.companyid
	FROM 
		breederplacementscheduledetail BPD
    
       INNER JOIN breedershed BS ON BPD.breedershedid= BS.id
       INNER JOIN location L ON BS.locationid = L.id
	
	
	WHERE
		BPD.placementscheduleid = p_placementscheduleid
        AND BPD.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_breederplacementschedule_availableforbatchplacement`(
IN p_companyid INT
)
BEGIN

	SELECT BP.id,
		DATE_FORMAT(schedulefordate,'%d/%m/%Y') as scheduledate,
		BP.batchid,
		BP.statusid,
		BP.createdby,
        UR.fullname AS schedulername,
        REF.refname AS statusname,
        BPD.breedershedid,
		BS.locationid,
        L.locationcode,
        L.locationname,
		BP.companyid
	FROM 
		breederplacementschedule BP
        LEFT JOIN `user` UR on BP.createdby = UR.id
        LEFT JOIN `reference` REF ON BP.statusid = REF.id
		LEFT JOIN breederplacementscheduledetail BPD ON BP.id = BPD.placementscheduleid
		INNER JOIN breedershed BS ON BPD.breedershedid = BS.id
		INNER JOIN location L ON BS.locationid = L.id
        LEFT JOIN breederbatchplacement BBP ON BBP.placementscheduleid = BP.id
		 LEFT JOIN purchaseorder PO ON PO.purchaserequestid = BP.requestid
		LEFT JOIN grpo GR ON GR.purchaseorderid = PO.id
	WHERE
		BP.companyid = p_companyid
        AND BBP.id is null 
        AND BP.statusid = 702 -- Approved
	   AND GR.id IS NOT NULL
	GROUP BY BP.id
    ORDER BY BP.id DESC;

END;



CREATE PROCEDURE `spc_breederplacementschedule_delete`(
	IN p_id INT
)
BEGIN

	DELETE FROM breederplacementschedule WHERE id = p_id;

END;



CREATE PROCEDURE `spc_breederplacementschedule_save`(
	
  IN p_id INT,
  IN p_date date,
  IN P_schedulefordate date,
  IN p_batchid INT,
  IN p_totalshedcapacity INT,
  IN p_totalmaleproposedqty INT,
  IN p_totalfemaleproposedqty INT,
  IN p_approvedby INT,
  IN p_approveddate DATE,
  IN p_remark VARCHAR(200),
  IN p_statusid INT,
  IN p_createdby INT,
  IN p_companyid INT,
  IN p_userid INT,
  OUT out_id INT
)
BEGIN

	SET @action = null;
    SET @defaultfemalechickid = null;
    SET @defaultmalechickid = null;
	SET @defaultfemaleitemname = null;
    SET @defaultfemaleitemunitid = null;
	SET @defaultmaleitemname = null;
    SET @defaultmaleitemunitid = null;
    
    -- Get default Male and Female chick item
    SELECT  
			defaultfemalechickid, IT1.itemname, IT1.itemunitid,
            defaultmalechickid, IT2.itemname ,IT2.itemunitid
			INTO @defaultfemalechickid,@defaultfemaleitemname,
            @defaultfemaleitemunitid, @defaultmalechickid,
            @defaultmaleitemname,@defaultmaleitemunitid 
	FROM
		breedersetting BS
	INNER JOIN item IT1 ON BS.defaultfemalechickid = IT1.id
    INNER JOIN item IT2 ON BS.defaultmalechickid = IT2.id
    WHERE 
		BS.companyid = p_companyid limit 1;
	
    
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederplacementschedule 
				(date, schedulefordate, batchid, totalshedcapacity, totalmaleproposedqty, totalfemaleproposedqty,
				approvedby, approveddate,remark, statusid, createdby, companyid)
			VALUES 
				(p_date, p_schedulefordate, p_batchid, p_totalshedcapacity, p_totalmaleproposedqty, p_totalfemaleproposedqty,
				p_approvedby, p_approveddate, p_remark, p_statusid, p_createdby, p_companyid);
		
         -- insert into purchaserequest 
         
         -- 541 is 'Breeder' Request source
         -- 91 is 'New' purchase request status
                
			SET @action = 'INSERT';

	ELSE
    
		UPDATE breederplacementschedule
			SET date = p_date,
				schedulefordate = p_schedulefordate,
				batchid = p_batchid,
				totalshedcapacity = p_totalshedcapacity,
				totalmaleproposedqty = p_totalmaleproposedqty,
                totalfemaleproposedqty = p_totalfemaleproposedqty,
                approvedby = p_approvedby,
				approveddate = p_approveddate,
                remark = p_remark,
				statusid = p_statusid,
				createdby = p_createdby,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
		
                SET @action = 'UPDATE';
	END IF;
    
    
	SELECT LAST_INSERT_ID() INTO out_id; 
    

		IF (p_statusid = 702) THEN  -- When status is 702 = 'Approved'
			
            SET @out_purreqid = null;
			CALL spc_purchaserequest_save(
				NULL, NUll,541, p_schedulefordate, p_createdby, p_approvedby, 
				'Chicks purchase request', 92, null,
				null, p_companyid, p_userid, @out_purreqid
			);
            
             -- SELECT LAST_INSERT_ID() INTO @outpurreqid1; 
				-- insert into purchaserequestDetail for female item 
				-- SET @outpurreqdetailid1 = NULL;
			CALL spc_purchaserequestdetail_save(
				 NULL, @out_purreqid, @defaultfemalechickid, @defaultfemaleitemname, 
                 p_totalfemaleproposedqty, @defaultfemaleitemunitid,1641, p_companyid, p_userid, 
                 @outpurreqdetailid1
			 );
             
              -- insert into purchaserequestDetail for male item 
			  -- SET @outpurreqdetailid1 = NULL;
                
			 CALL spc_purchaserequestdetail_save(
				NULL, @out_purreqid, @defaultmalechickid, @defaultmaleitemname, p_totalmaleproposedqty, 
                @defaultmaleitemunitid,1641, p_companyid, p_userid, @outpurreqdetailid1
			 );
                

			-- update the request id in breederplacementschedule table
			UPDATE breederplacementschedule SET requestid = @out_purreqid WHERE id = out_id;
    
		END IF;
    
    -- update shed stastus to 13 = 'scheduled'
    
    -- UPDATE breedershed SET statusid = 13 WHERE id = out_id;
    
    -- UPDATE breedershed SET statusid = 13 WHERE id in (CALL spc_common_splitstr_totable(p_breedershedids, ','));
    
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'breederplacementschedule', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_breederplacementschedule_search`(
IN p_companyid INT
)
BEGIN

	SELECT BP.id,
		DATE_FORMAT(schedulefordate,'%d/%m/%Y') as scheduledate,
		BP.batchid,
		BP.statusid,
		BP.createdby,
		-- UR.fullname AS schedulername,
        REF.refname AS statusname,
        BPD.breedershedid,
		BS.locationid,
        L.locationcode,
        L.locationname,
		BP.companyid
	FROM 
		breederplacementschedule BP
		-- LEFT JOIN user UR on BP.createdby = UR.id
        LEFT JOIN `reference` REF ON BP.statusid = REF.id
		LEFT JOIN breederplacementscheduledetail BPD ON BP.id = BPD.placementscheduleid
		INNER JOIN breedershed BS ON BPD.breedershedid = BS.id
		 INNER JOIN location L ON BS.locationid = L.id
	WHERE
		BP.companyid = p_companyid
        
	GROUP BY BP.id
    ORDER BY BP.id DESC;

END;



CREATE PROCEDURE `spc_breederplacementschedule_select`(
	IN p_schedulefordate DATE,
    IN p_id INT,
    IN p_companyid INT
)
BEGIN

	SELECT PS.id,
		BS.shedname as shedname,
        BS.locationid,
		L.locationname,
        L.locationcode,
		PS.batchid,
        BS.capacity,
        totalshedcapacity,
		totalfemaleproposedqty,
		totalmaleproposedqty,
		PS.statusid,
		DATE_FORMAT(schedulefordate,'%d/%m/%Y') as scheduledate,
        REF.refname AS statusname,
		PS.remark,
        PS.date,
		PS.companyid
	FROM 
		breederplacementschedule PS
    
       LEFT JOIN breederplacementscheduledetail BPD ON PS.id = BPD.placementscheduleid
       INNER JOIN breedershed BS ON BPD.breedershedid= BS.id
       INNER JOIN location L ON BS.locationid = L.id
       LEFT JOIN reference REF ON PS.statusid = REF.id
	
	
	WHERE
		PS.schedulefordate = p_schedulefordate
        AND PS.id = p_id
        AND PS.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_breederreasons_search`(
  IN p_companyid INT 
)
BEGIN
	SELECT BR.id,
		   typeid,
           R.refname as reasontype,
           reason
            
    FROM  breederreasons BR
    LEFT JOIN `reference` R ON BR.typeid = R.id
    
    WHERE 
          BR.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_breederreasons_select`(
  IN p_id INT 
)
BEGIN
	SELECT BR.id ,
		   BR.typeid,
           R.refname as reasontype,
           reason,
           companyid
            
    FROM  breederreasons BR
    LEFT JOIN `reference` R ON BR.typeid = R.id
    WHERE 
          BR.id = p_id;
END;



CREATE PROCEDURE `spc_breederreason_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN
  	DELETE FROM breederreasons WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'breederreasons', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_breederreason_save`(
	IN p_id INT,
    IN p_typeid INT,
	IN p_reason VARCHAR(300),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederreasons 
				(typeid, reason, companyid)
			VALUES 
				(p_typeid, p_reason, p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE breederreasons
			SET 
				typeid = p_typeid, 
                reason = p_reason, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';   
    
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breederreasons', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_breederscheduledetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederscheduledetail WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breederscheduledetail_save`(
    IN p_id INT,
    IN p_breederscheduleid INT(11),
    IN p_itemid INT(11),
    IN p_fromweek TINYINT(4),
    IN p_toweek TINYINT(4),
    IN p_weeknumber TINYINT(4),
    IN p_method VARCHAR(100),
    IN p_quantity DECIMAL(8,3),
    IN p_feedunitid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederscheduledetail 
				(id, breederscheduleid, itemid, fromweek, toweek, weeknumber, method, quantity, feedunitid, companyid)
			VALUES 
				(p_id, p_breederscheduleid, p_itemid, p_fromweek, p_toweek, p_weeknumber, p_method, p_quantity, p_feedunitid, p_companyid);
		
        SET @action = 'INSERT';

	ELSE
    
		UPDATE breederscheduledetail
			SET breederscheduleid = p_breederscheduleid, 
				itemid = p_itemid,
                fromweek = p_fromweek,
                toweek = p_toweek,
                weeknumber = p_weeknumber,
                method = p_method,
                quantity = p_quantity,
                feedunitid = p_feedunitid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
             SET @action = 'UPDATE';   
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	-- record log
   CALL spc_commonlog_save(p_companyid, 'breederscheduledetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_breederscheduledetail_search`(
    IN p_breederscheduleid INT
)
BEGIN
    
    SELECT
		 P.id,
         breederscheduleid,
		 itemid,
         fromweek,
         toweek,
         weeknumber,
         method,
         quantity,
         feedunitid,
         I.itemname
         
    FROM
		breederscheduledetail P
        INNER JOIN item I ON P.itemid = I.id
   	
	WHERE
		breederscheduleid = p_breederscheduleid;
END;



CREATE PROCEDURE `spc_breederscheduledetail_select`(
	IN p_breederscheduleid INT
)
BEGIN

	SELECT
		 B.id,
         breederscheduleid,
		 B.itemid,
         fromweek,
         toweek,
         weeknumber,
         method,
         quantity,
         feedunitid,
         I.itemname,
         I.itemcode,
         R.refname as itemunit
        
	FROM
		breederscheduledetail B
        LEFT JOIN item I ON B.itemid = I.id
        LEFT JOIN `reference` R ON I.itemunitid = R.id
        
	WHERE
		breederscheduleid = p_breederscheduleid;

END;



CREATE PROCEDURE `spc_breederschedulelocation_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederschedulelocation WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breederschedulelocation_save`(
    IN p_id INT,
    IN p_breederscheduleid INT(11),
    IN p_locationid INT(11),
    IN p_companyid INT,
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
    
		IF EXISTS(SELECT id FROM breederschedulelocation WHERE breederscheduleid = p_breederscheduleid)
			THEN
				BEGIN
					DELETE FROM breederschedulelocation WHERE breederscheduleid = p_breederscheduleid;
					
					INSERT INTO breederschedulelocation 
							(id, breederscheduleid, locationid, companyid)
						VALUES 
							(p_id, p_breederscheduleid, p_locationid, p_companyid);

					SET @action = 'INSERT';
                END;
        
		ELSE
			INSERT INTO breederschedulelocation 
					(id, breederscheduleid, locationid, companyid)
				VALUES 
					(p_id, p_breederscheduleid, p_locationid, p_companyid);

			SET @action = 'INSERT';
		END IF;
	ELSE
    
		UPDATE breederschedulelocation
			SET breederscheduleid = p_breederscheduleid, 
				locationid = p_locationid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
			SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'breederschedulelocation', out_id, @action, p_userid);


END;



CREATE PROCEDURE `spc_breederschedulelocation_search`(
    IN p_breederscheduleid INT
)
BEGIN
    
    SELECT
		 B.id,
         breederscheduleid,
		 locationid,
         L.locationname
        
	FROM
		breederschedulelocation B
        LEFT JOIN location L ON L.id = B.locationid
        
	WHERE
		breederscheduleid = p_breederscheduleid;
END;



CREATE PROCEDURE `spc_breederschedulelocation_select`(
	IN p_breederscheduleid INT
)
BEGIN

	SELECT
		 B.id,
         breederscheduleid,
		 locationid,
         L.locationname
        
	FROM
		breederschedulelocation B
        LEFT JOIN location L ON L.id = B.locationid
        
	WHERE
		breederscheduleid = p_breederscheduleid;

END;



CREATE PROCEDURE `spc_breederschedule_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breederscheduledetail WHERE breederscheduleid = p_id;
    DELETE FROM breederschedulelocation WHERE breederscheduleid = p_id;
	DELETE FROM breederschedule WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breederschedule_save`(
    IN p_id INT,
    IN p_schedulename VARCHAR(200),
    IN p_breederscheduletypeid INT(11),
    IN p_breednametypeid INT(11),
    IN p_breeditemid INT(11),
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_locationids VARCHAR(200),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederschedule 
				(id, schedulename, breederscheduletypeid, breednametypeid, breeditemid, fromdate, todate, locationids, companyid)
			VALUES 
				(p_id, p_schedulename, p_breederscheduletypeid, p_breednametypeid, p_breeditemid, p_fromdate, p_todate, p_locationids, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE breederschedule
			SET schedulename = p_schedulename, 
				breederscheduletypeid = p_breederscheduletypeid,
                breednametypeid = p_breednametypeid,
                breeditemid = p_breeditemid,
                fromdate = p_fromdate,
                todate = p_todate,
                locationids = p_locationids,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'breederschedule', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_breederschedule_search`(
    IN p_companyid INT,
    IN p_scheduletypeid INT
)
BEGIN
    
    SELECT
		 BS.id,
         BS.schedulename,
		 BS.breederscheduletypeid,
         BS.breednametypeid,
         BS.breeditemid,
         I.itemname,
         DATE_FORMAT(BS.fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(BS.todate,'%d/%m/%Y') as todate,
         locationids
        
	FROM
		breederschedule BS
        LEFT JOIN item I ON I.id = BS.breeditemid
   	
	WHERE
		BS.companyid = p_companyid AND breederscheduletypeid = p_scheduletypeid
        
	ORDER BY id DESC;
END;



CREATE PROCEDURE `spc_breederschedule_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 BS.id,
         BS.schedulename,
		 BS.breederscheduletypeid,
         BS.breednametypeid,
         BS.breeditemid,
         I.itemname as breeditemname,
         DATE_FORMAT(BS.fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(BS.todate,'%d/%m/%Y') as todate,
         locationids
        
	FROM
		breederschedule BS
        LEFT JOIN item I ON I.id = BS.breeditemid
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND BS.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_breedersetting_save`(
	IN p_id INT,
	IN p_shedrestperiod INT(11),
    IN p_defaultmalechickid INT(11),
	IN p_defaultmalechickcost DECIMAL(8,3),
    IN p_defaultfemalechickid INT(11),
    IN p_defaultfemalechickcost DECIMAL(8,3),
    IN p_defaultchickwarehouseid INT(11),
    IN p_defaultoutsidehatcherywarehouseid INT(11),
    IN p_malepercentage DECIMAL(9,3),
    IN p_labourcharge DECIMAL(8,3),
	IN p_overheadcost DECIMAL(8,3),
    IN p_eggspredictionperbird INT,
    IN p_hatchingitemgroupids VARCHAR(200),
    IN p_defaultcommercialeggsitemid INT,
    IN p_defaultcrackedeggsitemid INT,
    IN p_defaultdoubleyolkeggsitemid INT,
	IN p_standardeggcost DECIMAL(9,3),
    IN p_malestandardweight DECIMAL(9,3),
    IN p_femalestandardweight DECIMAL(9,3),
	IN p_feeditemgroupids VARCHAR(200),
	IN p_medicineitemgroupids VARCHAR(200),
	IN p_vaccineitemgroupids VARCHAR(200),
	IN p_vitaminitemgroupids VARCHAR(200),
    IN p_breeditemgroupids VARCHAR(200),
    IN p_chicksitemgroupids VARCHAR(200),
    IN p_hatchingeggscost DECIMAL(9,3),
    IN p_commercialeggscost DECIMAL(9,3),
    IN p_crackedeggscost DECIMAL(9,3),
    IN p_doubleyolkeggscost DECIMAL(9,3),
    IN p_costofgoodsoldledgerid INT(11),
    IN p_WIPledgerid INT(11),
    IN p_grpowithoutinvoiceledgerid INT(11),
    IN p_cashledgerid INT(11),
    IN p_freightledgerid INT(11),
    IN p_discountledgerid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breedersetting
				(id, 
                 shedrestperiod, 
                 defaultmalechickid,
                 defaultmalechickcost, 
                 defaultfemalechickid,
                 defaultfemalechickcost, 
                 defaultchickwarehouseid,
                 defaultoutsidehatcherywarehouseid,
                 malepercentage,
                 labourcharge,
				 overheadcost,
                 eggspredictionperbird,
                 hatchingitemgroupids,
                 defaultcommercialeggsitemid,
                 defaultcrackedeggsitemid,
                 defaultdoubleyolkeggsitemid,
                 standardeggcost,
                 malestandardweight,
                 femalestandardweight,
                 feeditemgroupids,
                 medicineitemgroupids,
                 vaccineitemgroupids,
                 vitaminitemgroupids,
                 breeditemgroupids,
                 chicksitemgroupids,
                 hatchingeggscost,
                 commercialeggscost,
                 crackedeggscost,
                 doubleyolkeggscost,
                 costofgoodsoldledgerid,
                 WIPledgerid,
                 grpowithoutinvoiceledgerid,
                 cashledgerid,
                 freightledgerid,
                 discountledgerid,
                 companyid
                 )
			VALUES 
				(p_id, 
                 p_shedrestperiod, 
                 p_defaultmalechickid,
                 p_defaultmalechickcost, 
                 p_defaultfemalechickid,
                 p_defaultfemalechickcost, 
                 p_defaultchickwarehouseid, 
                 p_defaultoutsidehatcherywarehouseid,
                 p_malepercentage,
                 p_labourcharge,
			     p_overheadcost,
                 p_eggspredictionperbird,
                 p_hatchingitemgroupids,
                 p_defaultcommercialeggsitemid,
                 p_defaultcrackedeggsitemid, 
                 p_defaultdoubleyolkeggsitemid,
                 p_standardeggcost,
                 p_malestandardweight,
                 p_femalestandardweight,
                 p_feeditemgroupids,
                 p_medicineitemgroupids,
                 p_vaccineitemgroupids,
                 p_vitaminitemgroupids,
                 p_breeditemgroupids,
                 p_chicksitemgroupids,
                 p_hatchingeggscost,
                 p_commercialeggscost,
                 p_crackedeggscost,
                 p_doubleyolkeggscost,
                 p_costofgoodsoldledgerid,
                 p_WIPledgerid,
                 p_grpowithoutinvoiceledgerid,
                 p_cashledgerid,
                 p_freightledgerid,
                 p_discountledgerid,
                 p_companyid);
		
        SET @action = 'INSERT';
          
	ELSE
    
		UPDATE breedersetting
				SET shedrestperiod = p_shedrestperiod,
                defaultmalechickid = p_defaultmalechickid,
                defaultmalechickcost = p_defaultmalechickcost,
                defaultfemalechickid = p_defaultfemalechickid,
                defaultfemalechickcost = p_defaultfemalechickcost,
                defaultchickwarehouseid = p_defaultchickwarehouseid,
                defaultoutsidehatcherywarehouseid = p_defaultoutsidehatcherywarehouseid,
                malepercentage = p_malepercentage,
                labourcharge = p_labourcharge,
				overheadcost = p_overheadcost,
                eggspredictionperbird = p_eggspredictionperbird,
                hatchingitemgroupids = p_hatchingitemgroupids,
                defaultcommercialeggsitemid = p_defaultcommercialeggsitemid,
                defaultcrackedeggsitemid = p_defaultcrackedeggsitemid,
                defaultdoubleyolkeggsitemid = p_defaultdoubleyolkeggsitemid,
                standardeggcost = p_standardeggcost,
                malestandardweight = p_malestandardweight,
                femalestandardweight = p_femalestandardweight,
                feeditemgroupids = p_feeditemgroupids,
                medicineitemgroupids = p_medicineitemgroupids,
                vaccineitemgroupids = p_vaccineitemgroupids,
                vitaminitemgroupids = p_vitaminitemgroupids,
                breeditemgroupids = p_breeditemgroupids,
                chicksitemgroupids = p_chicksitemgroupids,
				hatchingeggscost = p_hatchingeggscost,
				commercialeggscost = p_commercialeggscost,
				crackedeggscost = p_crackedeggscost,
				doubleyolkeggscost = p_doubleyolkeggscost,
                costofgoodsoldledgerid = p_costofgoodsoldledgerid,
                WIPledgerid = p_WIPledgerid,
                grpowithoutinvoiceledgerid = p_grpowithoutinvoiceledgerid,
                cashledgerid = p_cashledgerid,
				freightledgerid = p_freightledgerid,
                discountledgerid = p_discountledgerid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';     
         
	END IF;
    
      SELECT LAST_INSERT_ID() INTO out_id;
      
      -- record log
    --  CALL spc_commonlog_save(p_companyid, 'breedersetting', out_id, @action, p_userid);
   
END;



CREATE PROCEDURE `spc_breedersetting_search`(
	IN p_companyid INT
)
BEGIN
 
    SELECT
        BS.malepercentage,
        BS.defaultmalechickid,
        I1.itemcode as maleitemcode,
		I1.itemname as maleitemname,
        BS.defaultfemalechickid,   
        I2.itemcode as femaleitemcode,
        I2.itemname as femaleitemname,
        BS.labourcharge,
        BS.overheadcost,
        BS.eggspredictionperbird,
		BS.labourcharge,
		BS.overheadcost,
		BS.eggspredictionperbird,
		BS.standardeggcost,
		BS.malestandardweight,
		BS.femalestandardweight,
		BS.feeditemgroupids,
		BS.medicineitemgroupids,
		BS.vaccineitemgroupids,
		BS.vitaminitemgroupids,
        BS.breeditemgroupids,
        BS.chicksitemgroupids,
        BS.costofgoodsoldledgerid,
        BS.cashledgerid,
        BS.freightledgerid,
        BS.WIPledgerid,
        BS.grpowithoutinvoiceledgerid,
		BS.cashledgerid,
		BS.freightledgerid,
		BS.discountledgerid,
		COA1.coaname as goodledgername,
        COA1.glcode as goodglcode,
        COA2.coaname as birdledgername,
        COA2.glcode as birdglcode,
        COA3.coaname as grpowithoutinvoiceledgername,
        COA3.glcode as grpowithoutinvoiceglcode,
        COA4.coaname as cashledgername,
        COA4.glcode as cashglcode,
        COA5.coaname as freightledgername,
        COA5.glcode as freightglcode,
        COA6.coaname as discountledgername,
        COA6.glcode as discountglcode
     
    FROM
		breedersetting BS
	LEFT JOIN item I1 ON BS.defaultmalechickid = I1.id
    LEFT JOIN item I2 ON BS.defaultfemalechickid = I2.id
    
	LEFT JOIN chartofaccount COA1 ON COA1.id = BS.costofgoodsoldledgerid
    LEFT JOIN chartofaccount COA2 ON COA2.id = BS.WIPledgerid
    LEFT JOIN chartofaccount COA3 ON COA3.id = BS.grpowithoutinvoiceledgerid
    LEFT JOIN chartofaccount COA4 ON COA4.id = BS.cashledgerid
    LEFT JOIN chartofaccount COA5 ON COA5.id = BS.freightledgerid
    LEFT JOIN chartofaccount COA6 ON COA6.id = BS.discountledgerid
    
	WHERE
		BS.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_breedersetting_select`(
	IN p_companyid INT
)
BEGIN

	SELECT 
			BS.id, 
			BS.shedrestperiod, 
            BS.defaultmalechickid,
			BS.defaultmalechickcost, 
            BS.defaultfemalechickid,
			BS.defaultfemalechickcost, 
			BS.defaultchickwarehouseid, 
            BS.defaultoutsidehatcherywarehouseid, 
            BS.malepercentage,
            BS.hatchingitemgroupids,
            BS.defaultcommercialeggsitemid,
            BS.defaultcrackedeggsitemid,
            BS.defaultdoubleyolkeggsitemid,
            W.warehousename as defaultchickwarehousename,
            W1.warehousename as defaultOutsideHatcherywarehousename,
			BS.companyid,
            I1.itemname as defaultmalechickitem,
            I2.itemname as defaultfemalechickitem,
            I3.itemname as defaultcrackedeggsitemname,
           --  I4.itemname as defaulthatchingeggsitemname,
            I5.itemname as defaultcommercialeggsitemname,
            I6.itemname as defaultdoubleyolkeggsitemname,
            BS.labourcharge,
			BS.overheadcost,
            BS.eggspredictionperbird,
            BS.standardeggcost,
            BS.malestandardweight,
            BS.femalestandardweight,
            BS.feeditemgroupids,
            BS.medicineitemgroupids,
            BS.vaccineitemgroupids,
            BS.vitaminitemgroupids,
            BS.breeditemgroupids,
            BS.chicksitemgroupids,
			BS.hatchingeggscost,
		    BS.commercialeggscost,
		    BS.crackedeggscost,
		    BS.doubleyolkeggscost,
            BS.costofgoodsoldledgerid,
            COA1.coaname as goodledgername,
		    COA1.glcode as goodglcode,
		    COA2.coaname as birdledgername,
		    COA2.glcode as birdglcode,
			COA3.coaname as grpowithoutinvoiceledgername,
			COA3.glcode as grpowithoutinvoiceglcode,
            COA4.coaname as cashledgername,
			COA4.glcode as cashglcode,
			COA5.coaname as freightledgername,
			COA5.glcode as freightglcode,
            COA6.coaname as discountledgername,
			COA6.glcode as discountglcode,
			BS.cashledgerid,
			BS.freightledgerid,
			BS.WIPledgerid,
			BS.grpowithoutinvoiceledgerid,
			BS.cashledgerid,
			BS.freightledgerid,
			BS.discountledgerid
			
	FROM
			breedersetting BS
            LEFT JOIN warehouse W ON W.id = BS.defaultchickwarehouseid
            LEFT JOIN warehouse W1 ON W1.id = defaultoutsidehatcherywarehouseid
            
            LEFT JOIN item I1 ON I1.id = BS.defaultmalechickid
            LEFT JOIN item I2 ON I2.id = BS.defaultfemalechickid
			LEFT JOIN item I3 ON I3.id = BS.defaultcrackedeggsitemid
           -- LEFT JOIN item I4 ON I4.id = BS.defaulthatchingeggsitemid
            LEFT JOIN item I5 ON I5.id = BS.defaultcommercialeggsitemid
            LEFT JOIN item I6 ON I6.id = BS.defaultdoubleyolkeggsitemid
            
            LEFT JOIN chartofaccount COA1 ON COA1.id = BS.costofgoodsoldledgerid
			LEFT JOIN chartofaccount COA2 ON COA2.id = BS.WIPledgerid
			LEFT JOIN chartofaccount COA3 ON COA3.id = BS.grpowithoutinvoiceledgerid
            LEFT JOIN chartofaccount COA4 ON COA4.id = BS.cashledgerid
			LEFT JOIN chartofaccount COA5 ON COA5.id = BS.freightledgerid
            LEFT JOIN chartofaccount COA6 ON COA6.id = BS.discountledgerid

    WHERE
			BS.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_breedershedforreport_search`(
	IN p_breederbatchid INT(11)
)
BEGIN
	
SELECT   breedershedid,shedname

FROM (
SELECT 
           BBPD.breedershedid,
		   BS.shedname
          
           
			FROM breederbatchplacement BBP
			
    LEFT JOIN breederbatchplacementdetail BBPD ON BBP.id = BBPD.breederbatchplacementid
    LEFT JOIN breedershed BS ON BS.id = BBPD.breedershedid
    
    WHERE BBP.breederbatchid = p_breederbatchid
    
    GROUP BY BBPD.breedershedid
            
            
  UNION ALL
  
   SELECT 
             BBTD.toshedid as breedershedid,
             BS.shedname
             
            
	FROM breederbatchtransfer BBT
     LEFT JOIN breederbatchtransferdetail BBTD ON BBT.id = BBTD.breederbatchtransferid
     LEFT JOIN breedershed BS ON BS.id = BBTD.toshedid
     
    WHERE BBT.breederbatchid = p_breederbatchid
    
     GROUP BY BBTD.toshedid
       
      ) as temp
      
      GROUP BY breedershedid;
       
END;



CREATE PROCEDURE `spc_breedershedline_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breedershedline WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breedershedline_remainingcapacity`(
	IN p_tolineid INT(11)
)
BEGIN
	
    SET @tolinecapacity = NULL;
	SET @tolineusedquantity = NULL;
    
	if exists(SELECT * FROM breederbatchtransferdetail WHERE tolineid = p_tolineid) then
    
		SELECT BSL.capacity, IFNULL(SUM(BBTD.quantity), 0) INTO @tolinecapacity, @tolineusedquantity
		FROM breederbatchtransferdetail BBTD
        LEFT JOIN breedershedline BSL ON BSL.id = BBTD.tolineid
		WHERE 
				 BBTD.tolineid = p_tolineid;
    
    else
    
		SELECT capacity, 0 INTO @tolinecapacity, @tolineusedquantity
		FROM breedershedline 
		WHERE 
				 id = p_tolineid;
    
    end if;
    
  select IFNULL((@tolinecapacity - @tolineusedquantity), 0) as remainingcapacity;
		 -- IFNULL((@tolinecapacity), 0) as tolinecapacity;

END;



CREATE PROCEDURE `spc_breedershedline_save`(
	IN p_id INT,
    IN p_breedershedid INT,
    IN p_linename VARCHAR(50),
    IN p_description VARCHAR(500),
    IN p_capacity INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
SET @action = null;
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breedershedline
				(breedershedid, linename, description, capacity, companyid)
			VALUES 
				(p_breedershedid, p_linename, p_description, p_capacity, p_companyid);
		
            SET @action = 'INSERT';
		
	ELSE
    
		UPDATE breedershedline
				SET breedershedid = p_breedershedid, 
                linename = p_linename, 
                description = p_description,
                capacity = p_capacity,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;

	SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breedershedline', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_breedershedline_search`(
  IN p_breedershedid INT 
)
BEGIN
	SELECT id,
		   linename,
           breedershedid,
           description,
           capacity
            
    FROM  breedershedline
    WHERE 
          breedershedid = p_breedershedid;
END;



CREATE PROCEDURE `spc_breedershedline_select`(
  IN p_id INT 
)
BEGIN
	SELECT id,
           breedershedid,
		   linename,
		   description,
           capacity
            
    FROM  breedershedline
    WHERE 
          id = p_id;
END;



CREATE PROCEDURE `spc_breedershedparameter_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breedershedparameter WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breedershedparameter_save`(
	IN p_id INT,
    IN p_parametertypeid INT,
    IN p_parametername VARCHAR(200),
    IN p_requiredratio VARCHAR(50),
    IN p_ismandatory TINYINT(4),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breedershedparameter
				(id, parametertypeid, parametername, requiredratio, ismandatory, companyid)
			VALUES 
				(p_id, p_parametertypeid, p_parametername, p_requiredratio, p_ismandatory, p_companyid);
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE breedershedparameter
				SET parametertypeid = p_parametertypeid, 
                parametername = p_parametername, 
                requiredratio = p_requiredratio,
                ismandatory = p_ismandatory,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'breedershedparameter', out_id, @action, p_userid);

    

END;



CREATE PROCEDURE `spc_breedershedparameter_search`(
    IN p_companyid INT,
    IN p_parametertypeid INT
)
BEGIN

	SELECT 
		 id,
         parametername,
         requiredratio,
         ismandatory
	FROM
		breedershedparameter L
	
	WHERE
		companyid = p_companyid AND
        parametertypeid = p_parametertypeid;
END;



CREATE PROCEDURE `spc_breedershedparameter_select`(
  IN p_id INT 
)
BEGIN
	SELECT id,
		   parametertypeid,
		   parametername,
           requiredratio,
           ismandatory
            
    FROM  breedershedparameter 
    WHERE 
          id = p_id;
END;



CREATE PROCEDURE `spc_breedershedparameter_shedready`(
	IN p_companyid INT
)
BEGIN

	SELECT id as shedparameterid,
		   parametertypeid,
		   parametername,
           requiredratio,
           ismandatory
            
    FROM  breedershedparameter 
    WHERE 
          companyid = p_companyid;
END;



CREATE PROCEDURE `spc_breedershedpen_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breedershedpen WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breedershedpen_save`(
	IN p_id INT,
    IN p_breedershedid INT,
    IN p_penname VARCHAR(50),
    IN p_pendescription VARCHAR(500),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breedershedpen
				(id, breedershedid, penname, pendescription, companyid, createdby, createddate)
			VALUES 
				(p_id, p_breedershedid, p_penname, p_pendescription, p_companyid, p_userid, NOW());
		
	ELSE
    
		UPDATE breedershedpen
				SET breedershedid = p_breedershedid, 
                penname = p_penname, 
                pendescription = p_pendescription,
                companyid = p_companyid,
                modifiedby = p_userid,
                modifieddate = NOW(),
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    

END;



CREATE PROCEDURE `spc_breedershedpen_search`(
  IN p_breedershedid INT 
)
BEGIN
	SELECT id,
		   linename,
           breedershedid,
           description,
           active
            
    FROM  breedershedline
    WHERE 
          breedershedid = p_breedershedid;
END;



CREATE PROCEDURE `spc_breedershedpen_select`(
  IN p_id INT 
)
BEGIN
	SELECT id,
           breedershedid,
		   penname,
		   pendescription
            
    FROM  breedershedpen
    WHERE 
          id = p_id;
END;



CREATE PROCEDURE `spc_breedershedreadydetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breedershedreadydetail WHERE id = p_id;
END;



CREATE PROCEDURE `spc_breedershedreadydetail_save`(IN p_id INT,
	IN p_breedershedreadyid INT,
	IN p_parametertypeid INT,
	IN p_shedparameterid INT,
	IN p_isapplied TINYINT,
	IN p_remark VARCHAR(200),
	IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breedershedreadydetail
				(breedershedreadyid, parametertypeid, shedparameterid, isapplied,
					remark, companyid)
			VALUES 
				(p_breedershedreadyid, p_parametertypeid, p_shedparameterid, p_isapplied,
					p_remark, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE breedershedreadydetail
			SET 
				breedershedreadyid = p_breedershedreadyid, 
                parametertypeid = p_parametertypeid, 
                shedparameterid = p_shedparameterid, 
                isapplied = p_isapplied,
				remark = p_remark, 
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breedershedreadydetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_breedershedreadydetail_search`(
	IN p_breedershedreadyid INT
)
BEGIN

	SELECT id,
		breedershedreadyid,
		SD.parametertypeid,
        REF.refname as parametertypename,
		shedparameterid,
        SP.parametername,
		isapplied,
		remark
	FROM 
		breedershedreadydetail SD
        LEFT JOIN reference REF ON SD.breedershedreadyid = REF.id
        LEFT JOIN shedparameter SP ON SD.parametertypeid = SP.id
	WHERE
		breedershedreadyid = p_breedershedreadyid;

END;



CREATE PROCEDURE `spc_breedershedreadydetail_select`(
	IN p_breedershedreadyid INT
)
BEGIN

	SELECT
		BR.id,
		breedershedreadyid,
		BR.parametertypeid,
		shedparameterid,
        BP.parametername,
		isapplied,
        ismandatory,
		remark
		
        
	FROM
		breedershedreadydetail BR
        LEFT JOIN breedershedparameter BP ON BP.id = BR.shedparameterid
        
	WHERE
		breedershedreadyid = p_breedershedreadyid;

END;



CREATE PROCEDURE `spc_breedershedready_byloation_search`(
 IN p_locationid INT,
 IN p_companyid INT
)
BEGIN

	SELECT 
    
		shedreadyid,
        shedreadydata.breedershedid,
        locationname,
        locationid,
        shedname,
        capacity,
        createdby,
		statusid,
        statusname,
        username,
		companyid,
        DATE_FORMAT( maxbatch.placementdate,'%d/%m/%Y') as prevbatchdate,
		maxbatch.quantity as prevbatchquantity,
       --  breedershedstatusid as 'NO'
		'NO' as isscheduled
    
    FROM  (

				SELECT
					SR.id as shedreadyid,
					SR.breedershedid,
					L.locationname,
					S.locationid,
					S.shedname,
					S.capacity,
					SR.createdby,
					SR.statusid,
					REF.refname AS statusname,
					PR.partyname AS username,
					SR.companyid,
                    S.statusid as 'No'
					-- CASE WHEN  BPSD.breedershedid IS NULL THEN 'No' ELSE 'Yes' END AS isscheduled
					
				FROM
					breedershedready SR
					LEFT JOIN breedershed S ON SR.breedershedid = S.id
					LEFT JOIN location L ON S.locationid = L.id
					LEFT JOIN party PR ON SR.createdby = PR.id
					LEFT JOIN `reference` REF ON SR.statusid = REF.id
					-- LEFT JOIN breederplacementscheduledetail BPSD ON  BPSD.shedreadyid = SR.id 
					
					-- LEFT JOIN BATCHTABLE BPS ON  SR.breedershedid = BPS.breedershedid
					-- AND BPS.id = (select MAX(ID) FROM BATCHTABLE)
				
				WHERE
					SR.companyid = p_companyid AND
					S.statusid = 12 AND
					SR.statusid = 182 AND -- 'Approved'
					S.locationid = p_locationid
					
				ORDER BY 
					SR.createddate DESC

		) AS shedreadydata

			LEFT JOIN
					(
						SELECT BBP.id, BBP.placementdate, BBPD.breedershedid, SUM(BBPD.quantity) AS quantity 
							FROM breederbatchplacement BBP
							INNER JOIN breederbatchplacementdetail BBPD ON BBPD.breederbatchplacementid = BBP.id
						GROUP BY BBP.id, BBP.placementdate, BBPD.breedershedid
						
			) maxbatch ON maxbatch.breedershedid = shedreadydata.breedershedid

	group by  shedreadydata.breedershedid
	ORDER BY shedname;
    
	-- S.status in [11, 12] -- Available, Pending Approval
	-- AND (BPS.id IS NULL OR (BPS.status in [2, 4] )) -- Cancelled, Processed
    
END;



CREATE PROCEDURE `spc_breedershedready_byshedid`(
	IN p_breedershedid INT,
    IN p_companyid INT
)
BEGIN

	SELECT SR.id,
		SR.breedershedid,
		batchid,
		DATE_FORMAT(batchstartdate,'%d/%m/%Y') as batchstartdate,
		restperiod,
		createdby,
		DATE_FORMAT(createddate,'%d/%m/%Y') as createddate,
		DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
		SR.statusid,
        L.locationname,
        S.shedname,
        SR.createdby,
        P.partyname
		
	FROM 
		breedershedready SR
        LEFT JOIN breedershed S ON SR.breedershedid = S.id
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN partner P ON P.id = SR.createdby
    WHERE 
          SR.breedershedid = p_breedershedid
          and SR.companyid = p_companyid;
		
END;



CREATE PROCEDURE `spc_breedershedready_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM breedershedready WHERE id = p_id;
    DELETE FROM breedershedreadydetail WHERE breedershedreadyid = p_id;
END;



CREATE PROCEDURE `spc_breedershedready_save`(
	IN p_id int,
	IN p_breedershedid int,
	IN p_batchid int,
	IN p_batchstartdate date,
	IN p_restperiod int,
	IN p_createdby int,
	IN p_createddate date,
	IN p_finalcleaningdate date,
	IN p_statusid int,
	IN p_companyid int,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breedershedready
				(breedershedid, batchid, batchstartdate, restperiod,
					createdby, createddate, finalcleaningdate, statusid, companyid)
			VALUES 
				(p_breedershedid, p_batchid, p_batchstartdate, p_restperiod,
					p_createdby, p_createddate, p_finalcleaningdate, p_statusid, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE breedershedready
			SET 
				breedershedid = p_breedershedid,
				batchid = p_batchid,
				batchstartdate = p_batchstartdate,
				restperiod = p_restperiod,
				createdby = p_createdby,
				createddate = p_createddate,
				finalcleaningdate = p_finalcleaningdate,
				statusid = p_statusid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- Update shed status to 12 = 'Shed Ready'
    UPDATE breedershed SET statusid = 12 WHERE id = p_breedershedid;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breedershedready', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_breedershedready_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		SR.id,
		SR.breedershedid,
        L.locationname,
        S.shedname,
		batchid,
        BT.batchname,
		DATE_FORMAT(batchstartdate,'%d/%m/%Y') as batchstartdate,
		restperiod,
		createdby,
        UR.fullname AS username,
		DATE_FORMAT(SR.createddate,'%d/%m/%Y') as createddate,
		DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
		SR.statusid,
        REF.refname AS statusname,
		SR.companyid
        
	FROM
		breedershedready SR
        LEFT JOIN breedershed S ON SR.breedershedid = S.id
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN breederbatch BT ON SR.batchid = BT.id
        LEFT JOIN user UR on SR.createdby = UR.id
        LEFT JOIN `reference` REF ON SR.statusid = REF.id
   	
	WHERE
		SR.companyid = p_companyid
        
	ORDER BY SR.id DESC;
END;



CREATE PROCEDURE `spc_breedershedready_select`(
IN p_id INT
)
BEGIN

	SELECT SR.id,
		SR.breedershedid,
		batchid,
		DATE_FORMAT(batchstartdate,'%d/%m/%Y') as batchstartdate,
		restperiod,
		createdby,
		DATE_FORMAT(createddate,'%d/%m/%Y') as createddate,
		DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
		SR.statusid,
        L.locationname,
        S.shedname,
        SR.createdby,
        P.partyname
		
	FROM 
		breedershedready SR
        LEFT JOIN breedershed S ON SR.breedershedid = S.id
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN party P ON P.id = SR.createdby
    WHERE 
          SR.id = p_id;
END;



CREATE PROCEDURE `spc_breedershed_availablesheds_search`(
    IN p_companyid INT,
    IN p_statusid INT,
    IN p_locationid INT
)
BEGIN

	SELECT 
		id,
        statusid,
        shedname,
        locationid
        
	FROM
		breedershed
    
	WHERE
		statusid = p_statusid and
        locationid = p_locationid;
END;



CREATE PROCEDURE `spc_breedershed_batchwise_search`(
    IN p_companyid INT,
    IN p_breederbatchid INT
)
BEGIN


        
	SELECT 
    
		BBB.breederbatchid,
        BS.id as shedid,
        BS.shedname,
        BS.capacity,
		L.locationname,
        BS.warhouseid as warehouseid,
        BS.warehousebinid 
        
	FROM
		breederbatchbalance BBB
        
        LEFT JOIN breedershed BS ON BS.id = BBB.breedershedid
        LEFT JOIN location L ON BS.locationid = L.id
		
	WHERE
        BBB.breederbatchid = p_breederbatchid
		AND BBB.companyid = p_companyid
        AND BBB.quantity != 0
        GROUP BY BBB.breedershedid;
        
END;



CREATE PROCEDURE `spc_breedershed_batch_started`(
	IN p_locationid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT 
		BS.id,
        BS.statusid,
        BS.capacity,
        BS.shedname,
        R.refname,
        BS.locationid,
        L.locationname
        -- BSR.batchid
        
        
	FROM
		breedershed BS
        LEFT JOIN `reference` R ON R.id = BS.statusid
        LEFT JOIN location L ON BS.locationid = L.id
    
	WHERE BS.statusid = 14 AND
	BS.locationid = p_locationid
    AND BS.active = 1
    AND BS.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_breedershed_bystatusandlocation_search`(
  IN p_companyid INT,
  IN p_locationid INT(11),
  IN p_statusid INT
 )
BEGIN
	SELECT
		BS.id,
        BS.statusid,
        active,
        L.locationcode,
        L.locationname,
        shedname,
		R.refname as statusname
        
	FROM
		breedershed BS
        
	INNER JOIN location L ON BS.locationid = L.id
    INNER JOIN reference R ON BS.statusid = R.id

WHERE
		BS.companyid = p_companyid AND
        BS.statusid = p_statusid
        AND BS.locationid = p_locationid;
        
END;



CREATE PROCEDURE `spc_breedershed_bystatus_search`(
  IN p_companyid INT,
  IN p_statusid INT
 )
BEGIN
	SELECT
		BS.id,
        BS.statusid,
        active,
        L.locationcode,
        L.locationname,
        shedname,
		R.refname as statusname
        
	FROM
		breedershed BS
        
	INNER JOIN location L ON BS.locationid = L.id
    INNER JOIN reference R ON BS.statusid = R.id

WHERE
		BS.companyid = p_companyid AND
        BS.statusid = p_statusid;
        
END;



CREATE PROCEDURE `spc_breedershed_delete`(
	IN p_id INT
)
BEGIN
SET @Statusid = null;
SELECT statusid INTO @Statusid
 from breedershed 
 where id = p_id AND statusid = 11;
 IF(@Statusid IS NOT NUll) THEN
 BEGIN
     SELECT 1 as yes;
     DELETE FROM breedershedline WHERE breedershedid = p_id;
	DELETE FROM breedershed WHERE id = p_id;
 END;
 ELSE
  BEGIN
		SELECT 0 as yes;
			
		 END;
	END IF;
           
    END;



CREATE PROCEDURE `spc_breedershed_locationwise_search`(
    IN p_companyid INT,
    IN p_locationid INT
)
BEGIN

	SELECT 
		BS.id as shedid,
        BS.statusid,
        BS.capacity,
        BS.shedname,
        R.refname,
        L.locationname
        -- BSR.batchid
        
        
	FROM
		breedershed BS
        LEFT JOIN `reference` R ON R.id = BS.statusid
        LEFT JOIN location L ON L.id = BS.locationid
       --  LEFT JOIN breedershedready BSR ON BSR.breedershedid = BS.id AND BS.statusid = 13 -- 'batch started'
    
	WHERE
		 BS.statusid = 11 AND
        BS.locationid = p_locationid
        and BS.active = 1;
END;



CREATE PROCEDURE `spc_breedershed_prevnext`(
	IN p_id INT,
    IN p_order 

VARCHAR(10)
)
BEGIN
   
   IF(p_id = 0) THEN
   
     IF(p_order = 'desc') THEN  -- select last record
    
        SELECT
              id,
              locationid,
              statusid,
              shedname,
              active,
              capacity
        FROM 
             breedershed
             
	    ORDER BY id DESC LIMIT 1;

 
     ELSE --  select first record
        SELECT 
              id,
              locationid,
              statusid,
			  shedname,
              capacity,
              active
        FROM 
			 breedershed 
        
        ORDER BY id limit 1;
     
     END IF;
     
   ELSE 
   
	 IF(p_order = 'desc') THEN
     
      IF EXISTS( SELECT id,locationid, statusid, shedname capacity, active FROM breedershed WHERE id < p_id ORDER BY id DESC LIMIT 1) THEN
           SELECT 
                id,
                locationid,
                statusid,
                capacity,
                active
                shedname
           FROM breedershed 
           WHERE id < p_id 
           ORDER BY id DESC LIMIT 1;
           
	  ELSE
          
          SELECT 
               id,
               locationid,
               statusid,
               capacity,
               active,
               shedname
	      FROM 
              breedershed
           
	      WHERE id > p_id ORDER BY id DESC LIMIT 1;
          
	  END IF;
        
     ELSE
     
       IF EXISTS ( SELECT id,locationid,statusid,shedname,capacity,active FROM breedershed WHERE id > p_id ORDER BY id ASC LIMIT 1) THEN
          SELECT 
			   id,
               locationid,
               statusid,
               capacity,
               active,
               shedname
	      FROM 
              breedershed
           
	      WHERE id > p_id ORDER BY id ASC LIMIT 1;
          
       ELSE
          SELECT 
               id,
               locationid,
               statusid,
               capacity,
               active,
               shedname
          FROM breedershed 
          WHERE id < p_id ORDER BY id ASC LIMIT 1;
          
       END IF;
	
     END IF;
     
   END IF;
        
END;



CREATE PROCEDURE `spc_breedershed_save`(
	IN p_id INT,
    IN p_locationid INT,
    IN p_shedname VARCHAR(50),
    IN p_capacity INT,
    IN p_statusid VARCHAR(200),
    IN p_active TINYINT(4),
    IN p_warhouseid INT(11),
    IN p_warehousebinid INT(11),
    IN p_shedtypeid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action1 = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breedershed
				(locationid, shedname, capacity, statusid, active, warhouseid, warehousebinid, shedtypeid, companyid)
			VALUES 
				(p_locationid, p_shedname, p_capacity, p_statusid, p_active, p_warhouseid, NULL, p_shedtypeid, p_companyid);
			
            SET @action1 = 'INSERT';
            
		
	ELSE
    
		UPDATE breedershed
				SET
                locationid = p_locationid, 
                shedname = p_shedname, 
                capacity = p_capacity,
				statusid = p_statusid,
                active = p_active,
                warhouseid = p_warhouseid,
                warehousebinid = p_warehousebinid,
                shedtypeid = p_shedtypeid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action1 = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
      -- create one warehousebin for current shed
		SET @out_warehousebinid = NULL;
		CALL spc_warehousebin_save(
			NULL, p_warhouseid, CONCAT(p_shedname,'-BIN'), p_shedname,
			p_companyid, 0, p_userid, @out_warehousebinid
		);
		
		-- update warehouse bin id 
		
		UPDATE breedershed SET warehousebinid = @out_warehousebinid WHERE id = out_id;
            
	END IF;
   
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breedershed', out_id, @action1, p_userid);
END;



CREATE PROCEDURE `spc_breedershed_search`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		BS.id,
        BS.statusid,
        BS.active,
        L.locationcode,
        L.locationname,
        BS.shedname,
		BS.warhouseid,
        BS.warehousebinid,
        WB.binname,
        BS.shedtypeid
       
        -- R.refname
        
	FROM
		breedershed BS
        
	INNER JOIN location L ON BS.locationid = L.id
    LEFT JOIN warehousebin WB ON WB.id = BS.warehousebinid
   
    -- INNER JOIN reference R ON BS.statusid = R.id
    
	WHERE
		BS.companyid = p_companyid
        
	ORDER BY BS.id DESC;
END;



CREATE PROCEDURE `spc_breedershed_select`(
	IN p_id INT
)
BEGIN

	SELECT 
		BS.id,
		BS.locationid,
        L.locationcode,
        shedname,
        capacity,
        BS.active,
        statusid,
        BS.warhouseid,
        BS.warehousebinid,
        L.locationname,
        W.warehousename,
        W.warehousecode,
        WB.binname,
        WB.bincode,
        BS.shedtypeid,
        BS.companyid
        
	FROM
		breedershed BS
        
    INNER JOIN location L ON BS.locationid = L.id
	LEFT JOIN warehouse W ON BS.warhouseid = W.id
	LEFT JOIN warehousebin WB ON WB.id = BS.warehousebinid
	WHERE
	    BS.id = p_id;
		
END;



CREATE PROCEDURE `spc_breedershed_supplier_search`(
    IN p_companyid INT,
    IN p_roleid INT
)
BEGIN

	SELECT 
		id,
		username,
        roleid
        
	FROM
		user
    
	WHERE
		roleid = p_roleid;
END;



CREATE PROCEDURE `spc_candlingtestreport_select`(
	IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT
)
BEGIN
    
    SELECT
		  DATE_FORMAT(C.testdate,'%d/%m/%Y') as candlingdate,
		  C.batchid as settingno,
          C.id as testno,
          C.breederbatchid as batchno,
          C.setterid as setterno,
          S.settername,
          C.samplequantity as noofeggstested,
          C.trueinfertile as infertileeggs
       
    FROM
		candlingtest C
        
		LEFT JOIN setter S ON C.setterid = S.id
	
	WHERE
		C.testdate BETWEEN p_fromdate AND p_todate AND
        C.companyid = p_companyid;
      

END;



CREATE PROCEDURE `spc_candlingtestreport_select1`(
	IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT
)
BEGIN
    
    SET @row_number = 0;
    
    select 
    CASE WHEN (batchno = '') THEN '' ELSE (@row_number:=@row_number + 1)  END sqno, 
    TEMP.* from (
    
    SELECT 
        CASE WHEN (batchno = 'Grand Total') THEN '' ELSE batchno END batchno, 
		setterno, 
        
        CASE WHEN (hatchdate = 'Grand Total') THEN '' ELSE 
        DATE_FORMAT(hatchdate,'%d/%m/%Y')
        END hatchdate, 
        
        hatchno, 
        sourcename, 
        testno, 
        CASE WHEN (testdate = 'Grand Total') THEN '' ELSE 
        DATE_FORMAT(testdate,'%d/%m/%Y')
        END testdate, 
        ROUND(((infertileeggs * 100) / noofeggstested),2) as infertileeggspercent,
		chicksquantity, 
        stdeggsquantity,
        noofeggstested, 
        infertileeggs,
        ROUND(expectedchickspercent,2) AS expectedchickspercent
        
    FROM (
			SELECT 
				
				COALESCE(SB.id,'Grand Total') AS batchno,
				COALESCE(SB.setterid, 'Grand Total') setterno,
				COALESCE(CP.pulloutdate, '') AS hatchdate,
				COALESCE(HB.hatcherid, '') AS hatchno,
				COALESCE(REF1.refname, '') AS sourcename,
				COALESCE(C.id, '') AS testno,
				COALESCE(C.testdate, 'Grand Total') AS testdate,
				
				SUM(HB.actualquantity) AS chicksquantity,
				SUM(C.actualquantity) as stdeggsquantity,
				SUM(C.samplequantity) as noofeggstested,
				SUM(C.trueinfertile) AS infertileeggs,
				MAX(C.fertilitypercentage) as expectedchickspercent
				
			
			FROM
				setterbatch SB 
			
			
			LEFT JOIN hatcherbatch HB ON HB.setterbatchid = SB.id
			INNER JOIN candlingtest C ON C.setterbatchid = SB.id
			INNER JOIN reference REF1 ON SB.sourceid = REF1.id
            LEFT JOIN chickspullout CP ON CP.hatchbatchid = HB.id
			
             WHERE
				 HB.batchdate BETWEEN p_fromdate AND p_todate
				
            
			GROUP BY 
		   
			SB.id, 
			SB.setterid, 
			HB.batchdate, 
			HB.hatcherid, 
			C.id, 
			C.testdate,
			REF1.refname
			WITH ROLLUP
			
			HAVING sourcename != '' or  (sourcename = '' and  batchno = 'Grand Total') 
    ) 
    AS TEMP
    
    -- UNION
    
    -- SELECT 
		-- '' AS batchno,
		-- 'Grand Total' AS setterno, 
        -- '' AS hatchdate, 
        -- '' AS hatchno, 
        -- '' AS sourcename, 
        -- '' AS testno, 
        -- NULL,
        -- NULL,
        -- SUM(HB.actualquantity) AS chicksquantity,
        -- SUM(C.actualquantity) as stdeggsquantity,
        -- SUM(C.samplequantity) as noofeggstested,
        -- SUM(C.trueinfertile) AS infertileeggs,
		-- NULL
    
		-- FROM
			-- setterbatch SB 
		
			
		-- LEFT JOIN hatcherbatch HB ON HB.setterbatchid = SB.id
		-- INNER JOIN candlingtest C ON C.setterbatchid = SB.id
		-- INNER JOIN reference REF1 ON SB.sourceid = REF1.id
    
    ) AS TEMP;

END;



CREATE PROCEDURE `spc_candlingtest_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN
	DELETE FROM candlingtest WHERE id = p_id;
    
     -- record log
    CALL spc_commonlog_save(p_companyid, 'candlingtest', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_candlingtest_save`(
	IN p_id INT,
	IN p_batchid INT,
    IN p_setterid INT,
    IN p_breederbatchid INT,
    IN p_testdate DATE,
    IN p_actualquantity INT,
    IN p_samplequantity INT,
    IN p_trueinfertile INT,
    IN p_clears INT,
    IN p_bloodring INT,
    IN p_membrane INT,
    IN p_agemortality INT,
    IN p_fertility DECIMAL(8,3),
    IN p_fertilitypercentage DECIMAL(8,3),
	IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO candlingtest 
				(setterbatchid, setterid, breederbatchid, testdate, actualquantity, samplequantity, trueinfertile,
					clears, bloodring, membrane, agemortality, fertility, fertilitypercentage, companyid)
			VALUES 
				(p_batchid, p_setterid, p_breederbatchid, p_testdate, p_actualquantity, p_samplequantity, p_trueinfertile,
					p_clears, p_bloodring, p_membrane, p_agemortality, p_fertility, p_fertilitypercentage, p_companyid);
                    
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE candlingtest
				SET 
                setterbatchid = p_batchid,
				setterid = p_setterid,
                breederbatchid = p_breederbatchid,
				testdate = p_testdate,
				actualquantity = p_actualquantity,
				samplequantity = p_samplequantity,
				trueinfertile = p_trueinfertile,
				clears = p_clears,
				bloodring = p_bloodring,
				membrane = p_membrane,
				agemortality = p_agemortality,
				fertility = p_fertility,
				fertilitypercentage = p_fertilitypercentage,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'candlingtest', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_candlingtest_search`(
	IN p_companyid INT
)
BEGIN


	SELECT CT.id,
		setterbatchid as settingno,
        DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
        L.locationname,
        W.warehousename,
		DATE_FORMAT(testdate,'%d/%m/%Y') as testdate
        
	FROM 
		candlingtest CT
        LEFT JOIN setterbatch SB ON CT.setterbatchid = SB.id
        LEFT JOIN setter S ON CT.setterid = S.id     
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN warehouse W ON S.warehouseid = W.id
        
	WHERE
		CT.companyid = p_companyid
        -- GROUP BY CT.batchid;
        
	ORDER BY setterbatchid DESC;

END;



CREATE PROCEDURE `spc_candlingtest_select`(
	IN p_settingno INT
)
BEGIN

	SELECT CT.id,
		setterbatchid as settingno,
        DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
        L.locationname,
		CT.setterid,
        S.settername,
        BB.batchname as breederbatchname,
        CT.breederbatchid,
        W.warehousename,
		DATE_FORMAT(testdate,'%d/%m/%Y') as testdate,
		CT.actualquantity,
		samplequantity,
		trueinfertile,
		clears,
		bloodring,
		membrane,
		agemortality,
		fertility,
		fertilitypercentage,
        CT.actualquantity as settingquantity,
        SB.status as setterbatchstatus
        
	FROM
		candlingtest CT
        
		LEFT JOIN setterbatch SB ON CT.setterbatchid = SB.id
        LEFT JOIN setter S ON CT.setterid = S.id     
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN breederbatch BB on CT.breederbatchid = BB.id
		LEFT JOIN warehouse W ON S.warehouseid = W.id
        
	WHERE
		CT.setterbatchid = p_settingno;

END;



CREATE PROCEDURE `spc_cbfbatchdetails_branchwisereasyforsale`(
	IN p_branchid INT(11),
    IN p_fromweight DECIMAL(9,3),
    IN p_toweight DECIMAL(9,3),
    IN p_companyid INT(11)
)
BEGIN

	IF(p_fromweight = 0 AND p_toweight = 0)THEN
    
		SELECT CB.id as cbf_batchid,
			   FE.farmer_name,
			   CB.live_batch_qty,
               CDM.avgweight,
               (CB.live_batch_qty * CDM.avgweight) as batchsaleweight,
               FE.id as farmerenquiryid,
               0 as batchcost
               -- fnc_getChickCost(sourceid, transactionid, itemid) as chickCost
			   
		FROM cbf_batch_details CB
		LEFT JOIN cbf_farmerenquiry FE ON CB.farmer_enquiry_id = FE.id
		LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = CB.id
		LEFT JOIN cbf_dailymortality CDM ON CDM.cbfdailytransactionid = CDT.id
		
		WHERE CB.statusid = 3023
		AND FE.branch_id = p_branchid
		AND CB.companyid = p_companyid;
        
	ELSE
    
		SELECT CB.id as cbf_batchid,
			   FE.farmer_name,
			   CB.live_batch_qty,
               CDM.avgweight,
               (CB.live_batch_qty * CDM.avgweight) as batchsaleweight,
               FE.id as farmerenquiryid,
               0 as batchcost
			   
		FROM cbf_batch_details CB
		LEFT JOIN cbf_farmerenquiry FE ON CB.farmer_enquiry_id = FE.id
		LEFT JOIN cbf_dailytransaction CDT ON CDT.cbf_batchid = CB.id
		LEFT JOIN cbf_dailymortality CDM ON CDM.cbfdailytransactionid = CDT.id
		
		WHERE CB.statusid = 3023
		AND FE.branch_id = p_branchid
		AND CDM.avgweight BETWEEN p_fromweight AND p_toweight
		AND CB.companyid = p_companyid;
    
    END IF;

END;



CREATE PROCEDURE `spc_cbfbatchdetails_bystatusid`(
	IN p_statusid INT,
    IN p_companyid INT
)
BEGIN

	SELECT CB.id,
           CB.statusid,
           REF.refname,
           B.branchname
		   
	FROM cbf_batch_details CB
    LEFT JOIN cbf_farmerenquiry FE ON CB.farmer_enquiry_id = FE.id
    LEFT JOIN commonbranch B ON B.id = FE.branch_id
    LEFT JOIN `reference` REF ON REF.id = CB.statusid
    
    WHERE CB.statusid = p_statusid
    AND CB.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfbatchdetails_delete`(
  IN p_id INT,
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN
	DELETE FROM cbf_batch_details WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'cbf_batch_details', p_id, 'delete', p_userid);

END;



CREATE PROCEDURE `spc_cbfbatchdetails_save`(
	IN p_id INT(11),
    IN p_farmer_enquiry_id INT(11),
    IN p_batch_number VARCHAR(50),
    IN p_batch_qty  INT(11),
    IN p_batch_place_qty INT(11),
    IN p_live_batch_qty INT(11),
    IN p_breed_id INT(11),
    IN p_batch_schedule_id INT(11),
    IN p_line_supervisor_id INT(11),
    IN p_farm_rest_period INT(11),
    IN p_total_mortality INT(11),
    IN p_production_qty INT(11),
    IN p_excess_birds INT(11),
    IN p_shortage_chicks INT(11),
    IN p_current_density INT(11),
    IN p_processing_qty INT(11),
    IN p_batch_date DATE,
    IN p_batch_place_date DATE, 
    IN p_live_batch_date DATE,
    IN p_batch_lifting_date DATE,
    IN p_batch_close_date DATE,
    IN p_statusid INT(11),
    IN p_age INT(11),
    IN p_body_weight INT(11),
    IN p_culls INT(11),
    IN p_compensation INT(11),
    IN p_sale_qty INT(11),
    IN p_weak_chicks INT(11),
    IN p_batch_cost INT(11), 
    IN p_remark VARCHAR(250),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_batch_details(
                farmer_enquiry_id,
                batch_number,
                batch_qty ,
                batch_place_qty,
                live_batch_qty,
                breed_id,
                batch_schedule_id,
                line_supervisor_id,
                farm_rest_period,
                total_mortality,
                production_qty,
                excess_birds,
                shortage_chicks,
                current_density,
                processing_qty,
                batch_date,
                batch_place_date,
                live_batch_date,
                batch_lifting_date,
                batch_close_date,
                statusid,
                age,
                body_weight,
                culls,
                compensation,
                sale_qty,
                weak_chicks,
                batch_cost,
                remark,
                companyid
    )
			VALUES 
				(
                p_farmer_enquiry_id,
                p_batch_number,
                p_batch_qty ,
                p_batch_place_qty,
                p_live_batch_qty,
                p_breed_id,
                p_batch_schedule_id,
                p_line_supervisor_id,
                p_farm_rest_period,
                p_total_mortality,
                p_production_qty,
                p_excess_birds,
                p_shortage_chicks,
                p_current_density,
                p_processing_qty,
                p_batch_date,
                p_batch_place_date,
                p_live_batch_date,
                p_batch_lifting_date,
                p_batch_close_date,
                p_statusid,
                p_age,
                p_body_weight,
                p_culls,
                p_compensation,
                p_sale_qty,
                p_weak_chicks,
                p_batch_cost,
                p_remark,
                p_companyid
                );
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE cbf_batch_details
				SET farmer_enquiry_id = pfarmer_enquiry_id,
                batch_number = p_batch_number,
                batch_qty = p_batch_qty ,
                batch_place_qty = p_batch_place_qty,
                live_batch_qty = p_live_batch_qty,
                breed_id = p_breed_id,
                batch_schedule_id = p_batch_schedule_id,
                line_supervisor_id = p_line_supervisor_id,
                farm_rest_period = p_farm_rest_period,
                total_mortality = p_total_mortality,
                production_qty = p_production_qty,
                excess_birds = p_excess_birds,
                shortage_chicks = p_shortage_chicks,
                current_density = p_current_density,
                processing_qty = p_processing_qty,
                batch_date = p_batch_date,
                batch_place_date = p_batch_place_date,
                live_batch_date = p_live_batch_date,
                batch_lifting_date = p_batch_lifting_date,
                batch_close_date = p_batch_close_date,
                statusid = p_statusid,
                age = p_age,
                body_weight = p_body_weight,
                culls = p_culls,
                compensation = p_compensation,
                sale_qty = p_sale_qty,
                weak_chicks = p_weak_chicks,
                batch_cost = p_batch_cost,
                remark = p_remark,
                companyid = pcompanyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_batch_details', out_id, @action, p_userid);

    

END;



CREATE PROCEDURE `spc_cbfbatchdetails_search`(
	IN p_companyid INT
)
BEGIN
	SELECT * FROM cbf_batch_details WHERE companyid = p_companyid;
END;



CREATE PROCEDURE `spc_cbfbatchdetails_select`(
  IN p_id INT 
)
BEGIN
	SELECT  CB.id as cbf_batchid, 
		    CB.farmer_enquiry_id,
            FE.farmer_name,
            FE.farm_name,
			CB.batch_number,
			CB.batch_qty ,
			CB.batch_place_qty,
			CB.live_batch_qty,
			CB.breed_id,
            I.itemname as breedname,
			CB.batch_schedule_id,
			CB.line_supervisor_id,
            E.employeename,
			CB.farm_rest_period,
			CB.total_mortality,
			CB.production_qty,
			CB.excess_birds,
			CB.shortage_chicks,
			CB.current_density,
			CB.processing_qty,
			CB.statusid,
			CB.age,
			CB.body_weight,
			CB.culls,
			CB.compensation,
			CB.sale_qty,
			CB.weak_chicks,
			CB.batch_cost,
			CB.remark,
            CCP.placement_date,
            DATE_FORMAT(CB.batch_place_date,'%d/%m/%Y') as placementdate,
            DATE_FORMAT(CB.batch_date,'%d%m%y') as batch_date,
            DATE_FORMAT(CB.live_batch_date,'%d%m%y') as live_batch_date,
            DATE_FORMAT(CB.batch_lifting_date,'%d%m%y') as batch_lifting_date,
            DATE_FORMAT(CB.batch_close_date,'%d%m%y') as batch_close_date,
            FE.branch_id as branchid
    
    FROM cbf_batch_details CB
    LEFT JOIN cbf_chick_placement CCP ON CCP.batch_id = CB.id
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = CB.farmer_enquiry_id
    LEFT JOIN item I ON I.id = CB.breed_id
    LEFT JOIN employee E ON E.id = CB.line_supervisor_id
    
    WHERE CB.id = p_id;
END;



CREATE PROCEDURE `spc_cbfbirdsalesorderdetail_delete`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	DELETE FROM cbf_birdsalesorderdetail WHERE id = p_id AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfbirdsalesorderdetail_save`(
	IN p_id INT,
    IN p_cbfbirdsalesorderid INT,
    IN p_cbf_batchid INT,
    IN p_farmerenquiryid INT,
    IN p_batchsaleweight DECIMAL(12,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_birdsalesorderdetail 
				(id, cbfbirdsalesorderid, cbf_batchid, farmerenquiryid, batchsaleweight, companyid)
			VALUES 
				(p_id, p_cbfbirdsalesorderid, p_cbf_batchid, p_farmerenquiryid, p_batchsaleweight, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_birdsalesorderdetail
				SET cbfbirdsalesorderid = p_cbfbirdsalesorderid,
					cbf_batchid = p_cbf_batchid,
                    farmerenquiryid = p_farmerenquiryid,
                    batchsaleweight = p_batchsaleweight, 
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF((SELECT statusid FROM cbf_birdsalesorder WHERE id = p_cbfbirdsalesorderid) = 3082) THEN
		SET @salesdetailid = NULL;
		
		CALL spc_salesorderdetail_save(
			NULL, (SELECT stdsalesorderid FROM cbf_birdsalesorder WHERE id = p_cbfbirdsalesorderid),
			(SELECT breed_id FROM cbf_batch_details WHERE id = p_cbf_batchid), p_batchsaleweight, 1,
			p_batchsaleweight, 1, 142, (SELECT rateperkg FROM cbf_birdsalesorder WHERE id = p_cbfbirdsalesorderid), 
			NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL,
			NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL,
			(p_batchsaleweight * (SELECT rateperkg FROM cbf_birdsalesorder WHERE id = p_cbfbirdsalesorderid)), p_companyid, p_userid, @salesdetailid
		);
        
	END IF;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_birdsalesorderdetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_cbfbirdsalesorderdetail_search`(
	IN p_cbfbirdsalesorderid INT,
    IN p_companyid INT
)
BEGIN

	SELECT * FROM cbf_birdsalesorderdetail WHERE cbfbirdsalesorderid = p_cbfbirdsalesorderid AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfbirdsalesorderdetail_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN


	SELECT * FROM cbf_birdsalesorderdetail WHERE id = p_id AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfbirdsalesorder_delete`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	DELETE FROM cbf_birdsalesorderdetail WHERE cbfbirdsalesorderid = p_id AND companyid = p_companyid;
	DELETE FROM cbf_birdsalesorder WHERE id = p_id AND companyid = p_companyid;
    

END;



CREATE PROCEDURE `spc_cbfbirdsalesorder_save`(
	IN p_id INT,
    IN p_vendorid INT,
    IN p_branchid INT,
	IN p_orderdate DATE,
	IN p_totalsaleweight DECIMAL(12,3),
    IN p_rateperkg DECIMAL(9,3),
    IN p_fromweight DECIMAL(9,3),
    IN p_toweight DECIMAL(9,3),
    IN p_statusid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_birdsalesorder 
				(id, stdsalesorderid, vendorid, branchid, orderdate, 
                fromweight, toweight, totalsaleweight, rateperkg, statusid,
                companyid)
			VALUES 
				(p_id, NULL, p_vendorid, p_branchid, p_orderdate, 
                p_fromweight, p_toweight, p_totalsaleweight, p_rateperkg, p_statusid, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_birdsalesorder
				SET stdsalesorderid = p_stdsalesorderid,
					vendorid = p_vendorid,
                    branchid = p_branchid,
                    orderdate = p_orderdate, 
                    fromweight = p_fromweight,
                    toweight = p_toweight,
					totalsaleweight = p_totalsaleweight,
                    rateperkg = p_rateperkg,
                    statusid = p_statusid,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF(p_statusid = 3082) THEN
		SET @salesid = NULL;
		
		CALL spc_salesorder_save(
			NULL, 723, NULL, NULL, NULL,
			p_orderdate, NULL, NULL, p_orderdate, 
			1561, NULL, NULL, NULL,NULL, NULL, NULL, NULL,
			(p_totalsaleweight * p_rateperkg), NULL, NULL, 
			(p_totalsaleweight * p_rateperkg), NULL, NULL, 
			p_userid, 1362, p_companyid, p_userid, @salesid
		);
    
		-- update stdsalesorderid
		
		UPDATE cbf_birdsalesorder SET stdsalesorderid = @salesid WHERE id = out_id;
        
	END IF;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_birdsalesorder', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_cbfbirdsalesorder_search`(
	IN p_companyid INT
)
BEGIN

	SELECT CBS.id,
		   CBS.vendorid,
           CBS.branchid,
           DATE_FORMAT(CBS.orderdate,'%d/%m/%Y') as orderdate,
           CBS.totalsaleweight,
           CBS.statusid,
           REF.refname
           
	FROM cbf_birdsalesorder CBS
    LEFT JOIN `reference` REF ON REF.id = CBS.statusid
    
    WHERE CBS.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfbirdsalesorder_select`(
	IN p_id INT,
	IN p_companyid INT
)
BEGIN

	SELECT CBS.id,
		   CBS.vendorid,
           CBS.branchid,
           DATE_FORMAT(CBS.orderdate,'%d/%m/%Y') as orderdate,
           CBS.totalsaleweight,
           CBS.fromweight,
           CBS.toweight,
           CBS.rateperkg,
           CBS.statusid
           
	FROM cbf_birdsalesorder CBS
    
    WHERE CBS.id = p_id AND CBS.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfbranchwisesupervisordetails_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM cbf_branchwisesupervisordetail WHERE id = p_id;
END;



CREATE PROCEDURE `spc_cbfbranchwisesupervisordetails_save`(
	IN p_id INT,
    IN p_branchwisesupervisorid INT,
    IN p_empids VARCHAR(100),
    IN p_lineid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
		INSERT INTO cbf_branchwisesupervisordetail 
				(branchwisesupervisorid, 
                empids,
                lineid,
                companyid)
			VALUES 
				(p_branchwisesupervisorid, 
                p_empids,
                p_lineid,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE cbf_branchwisesupervisordetail
			SET branchwisesupervisorid = p_branchwisesupervisorid,
				empids = p_empids,
                lineid = p_lineid,
				companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_branchwisesupervisordetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_cbfbranchwisesupervisordetails_select`(
	IN p_branchwisesupervisorid INT,
    IN p_companyid INT
)
BEGIN
	select BWS.id,
		   (SELECT GROUP_CONCAT(employeename) FROM `employee` WHERE FIND_IN_SET(id, BWS.empids)) as employeename,
           lineid,
           E.employeename,
           L.linename
    
    from cbf_branchwisesupervisordetail BWS
    LEFT JOIN employee E ON E.id = BWS.empids
    LEFT JOIN cbf_line L ON L.id = BWS.lineid
    
    where branchwisesupervisorid = p_branchwisesupervisorid
    AND BWS.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_cbfbranchwisesupervisor_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM cbf_branchwisesupervisordetail WHERE branchwisesupervisorid = p_id;
	DELETE FROM cbf_branchwisesupervisor WHERE id = p_id;
END;



CREATE PROCEDURE `spc_cbfbranchwisesupervisor_save`(
	IN p_id INT,
    IN p_branchid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
		INSERT INTO cbf_branchwisesupervisor 
				(branchid, 
                companyid)
			VALUES 
				(p_branchid, 
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE cbf_branchwisesupervisor
			SET branchid = p_branchid, 
				company_id = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_branchwisesupervisor', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_cbfbranchwisesupervisor_select`(
	IN p_branchid INT,
	IN p_companyid INT
)
BEGIN
	select a.*, b.branchname, b.branchcode from cbf_branchwisesupervisor as a
    left OUTER join branch as b on a.branchid = b.id
    where ((p_branchid is null) or (a.branchid=p_branchid)) AND
    ((p_companyid is null) or (a.companyid=p_companyid));
END;



CREATE PROCEDURE `spc_cbfchickplacement_delete`(
  IN p_id INT,
  IN p_companyid INT
)
BEGIN
	DELETE FROM cbf_chick_placement WHERE id = p_id AND companyid = p_companyid;
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'cbf_chick_placement', p_id, 'delete', p_userid);

END;



CREATE PROCEDURE `spc_cbfchickplacement_save`(
	IN p_id INT(11),
    IN p_batch_id INT(11),
    IN p_sourceid INT(11),
    IN p_requestid INT(11),
    IN p_create_batch_schedule_id INT(11),
    IN p_placement_date DATE,
    IN p_first_day_date DATE,
    IN p_status_id INT(11),
    IN p_std_lifting_age INT(11),
    IN p_branch_id INT(11),
    IN p_farmer_enquiry_id INT(11),
    IN p_shed_id INT(11),
    IN p_chick_qty INT(11),
    IN p_week_chicks INT(11),
    IN p_free_qty INT(11),
    IN p_culls INT(11),
    IN p_shortage INT(11),
    IN p_mortality INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
    
		SET @warehouseid = null;
		SET @warehousebinid = null;
		
		SELECT SDD.warehousebinid, WB.warehouseid
		INTO @warehousebinid, @warehouseid
		FROM cbf_farmerenquiry_sheddimensiondetail SDD
		LEFT JOIN warehousebin WB ON WB.id = SDD.warehousebinid
		WHERE SDD.id = p_shed_id;
    
		IF(p_sourceid = 261)THEN
        
			SET @out_transferid = null;
            SET @out_transferdetailid = null;
            
            CALL spc_materialtransfer_save(
				NULL, 502, 501, 582, p_placement_date, p_placement_date,NULL,
				NULL, NULL,
				 622, NULL,
				p_batch_id, p_requestid, p_companyid, p_userid, @out_transferid
			);
			
			CALL spc_materialtransferdetail_save(
				NULL, @out_transferid,
				@warehouseid, @warehousebinid,
				(SELECT breedid FROM cbf_batch_details WHERE id = p_batch_id),
                (SELECT itemname FROM item WHERE id = (SELECT breedid FROM cbf_batch_details WHERE id = p_batch_id)),
				p_chick_qty, p_chick_qty, 
				NULL, p_batch_id, p_userid, p_companyid, @out_transferdetailid
			);
        
        ELSE
        
			SET @grpopoid = null;
			SET @grpodetailid = null;
			
			SET @vendorid = NULL;
			SET @poid = NULL;
			SET @podate = NULL;
			SET @discount = NULL;
			SELECT id, vendorid, podate, discount INTO @poid, @vendorid, @podate, @discount FROM purchaseorder WHERE purchaserequestid = p_requestid;
			
			CALL spc_grpo_save(
				NULL, NULL, p_placement_date, @vendorid,
				NULL, p_placement_date, @poid, @podate,
				NULL, NULL, NULL, NULL, @warehouseid, 
				@warehousebinid, @discount, 642, NULL, 0,
				NULL, p_companyid, p_userid, @grpopoid 
			);
			
            SET @podetailid = NULL;
            SET @unitprice = NULL;
            SET @itemdiscount = NULL;
            SET @taxpercent = NULL;
            SET @taxid = NULL;
            
            SET @itemid = NULL;
            SET @itemname = NULL;
            SET @batch_qty = NULL;
            SET @itemunitid = NULL;
            
            SELECT id, unitprice, itemdiscount, taxpercent, taxid 
            INTO @podetailid, @unitprice, @itemdiscount, @taxpercent, @taxid
            FROM purchaseorderdetail WHERE purchaseorderid = @poid LIMIT 1;
            
            SELECT CB.breed_id, I.itemname, CB.batch_qty, I.itemunitid
            INTO @itemid, @itemname, @batch_qty, @itemunitid
            FROM cbf_batch_details CB
            LEFT JOIN item I ON I.id = CB.breed_id
            WHERE CB.id = p_batch_id AND CB.companyid = p_companyid;
            
			CALL spc_grpodetail_save(
				NULL, @grpopoid, @podetailid, 
                @itemid, @itemname, @batch_qty,
                p_free_qty, @itemunitid, @unitprice,
                @itemdiscount, @taxpercent, @taxid,
                NULL, p_companyid, p_userid, @grpodetailid
			);
            
            SET @chicksmortalityid = NULL;
            
            CALL spc_cbfchicksmortality_save(
				NULL, @grpopoid, @itemid, p_culls,
                p_mortality, p_shortage, p_week_chicks,
                p_free_qty, p_companyid, p_userid, @chicksmortalityid
            );
        END IF;
        
	
		INSERT INTO cbf_chick_placement
				(batch_id, create_batch_schedule_id, transaction_id, placement_date, first_day_date, status_id, std_lifting_age, branch_id, farmer_enquiry_id, shed_id, chick_qty, week_chicks, free_qty, culls, shortage, mortality, company_id)
			VALUES 
				(p_batch_id, p_create_batch_schedule_id, NULL, p_placement_date, p_first_day_date, p_status_id, p_std_lifting_age, p_branch_id, p_farmer_enquiry_id, p_shed_id, p_chick_qty, p_week_chicks, p_free_qty, p_culls, p_shortage, p_mortality, p_companyid);
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE cbf_chick_placement
				SET batch_id = p_batch_id, 
                create_batch_schedule_id = p_create_batch_schedule_id, 
                transaction_id = p_transaction_id,
                placement_date = p_placement_date,
                first_day_date = p_first_day_date, 
                status_id = p_status_id,
                std_lifting_age = p_std_lifting_age, 
                branch_id = p_branch_id,
                farmer_enquiry_id = p_farmer_enquiry_id,
                shed_id = p_shed_id,
                chick_qty = p_chick_qty, 
                week_chicks = p_week_chicks, 
                free_qty = p_free_qty,
                culls = p_culls,
                shortage = p_shortage, 
                mortality = p_mortality,
                company_id = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- update transaction id as per sourceid
    IF(p_sourceid = 261)THEN
		UPDATE cbf_chick_placement SET transaction_id = @out_transferid WHERE id = out_id;
	ELSE
		UPDATE cbf_chick_placement SET transaction_id = @grpoid WHERE id = out_id;
    END IF;
    
    -- update batch status to 3022 as batch started
    if(out_id > 0)THEN
    
		UPDATE cbf_batch_details 
        SET statusid = 3022 ,
			culls = p_culls,
            weak_chicks = p_week_chicks,
            shortage_chicks = p_shortage,
            total_mortality = p_mortality,
            excess_birds = p_free_qty,
            live_batch_qty = p_chick_qty,
            batch_place_qty = p_chick_qty,
            batch_place_date = p_placement_date,
            line_supervisor_id = (SELECT supervisor_id FROM cbf_farmerenquiry WHERE id = p_farmer_enquiry_id),
            scheme_id = (SELECT schemeid FROM cbf_farmeragreement WHERE farmerenquiryid = p_farmer_enquiry_id)
        WHERE id = p_batch_id;
    END IF;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'cbffarmparameter', out_id, @action, p_userid);

    

END;



CREATE PROCEDURE `spc_cbfchickplacement_search`(
	IN p_companyid INT
)
BEGIN

	SELECT CP.id,
		   CP.batch_id,
		   DATE_FORMAT(CP.placement_date,'%d/%m/%Y') as placement_date,
		   DATE_FORMAT(CP.first_day_date,'%d/%m/%Y') as first_day_date,
           CP.branch_id,
           B.branchname,
           CP.farmer_enquiry_id,
           FE.farmer_name,
           CP.shed_id,
           SDD.shed_name,
           CP.chick_qty,
           REF.refname as sourcename,
           CB.batch_qty,
           CP.free_qty,
           (CP.week_chicks + CP.culls + CP.mortality + CP.shortage) as waste_qty
           
	FROM
		cbf_chick_placement CP
        LEFT JOIN commonbranch B ON B.id = CP.branch_id
        LEFT JOIN cbf_farmerenquiry FE ON FE.id = CP.farmer_enquiry_id
        LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CP.shed_id
        LEFT JOIN cbf_procurementscheduledetail PSD ON PSD.batchid = CP.batch_id
        LEFT JOIN `reference` REF ON REF.id = PSD.sourceid
        INNER JOIN cbf_batch_details CB ON CB.id = CP.batch_id
	WHERE
		CP.company_id = p_companyid;
END;



CREATE PROCEDURE `spc_cbfchickplacement_select`(
  IN p_id INT 
)
BEGIN
	SELECT * FROM  cbf_chick_placement WHERE id = p_id;
END;



CREATE PROCEDURE `spc_cbfchicksmortality_save`(
   IN p_id INT(11),
   IN p_grpoid INT(11),
   IN p_itemid VARCHAR(200),
   IN p_culls VARCHAR(200),
   IN p_mortality VARCHAR(1000),
   IN p_shortage VARCHAR(50),
   IN p_weak_chicks VARCHAR(45),
   IN p_freeqty INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_chicksmortality 
				(id, grpoid, itemid, culls, mortality, 
                shortage, weak_chicks, freeqty, companyid)
			VALUES 
				(p_id, p_grpoid, p_itemid, p_culls, p_mortality, 
                p_shortage, p_weak_chicks, p_freeqty, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_chicksmortality
				SET grpoid = p_grpoid,
                itemid = p_itemid,
                culls = p_culls,
                mortality = p_mortality, 
                shortage = p_shortage,
                weak_chicks = p_weak_chicks,
                freeqty = p_freeqty,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_chicksmortality', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_cbfdailyconsumption_cbfbatchwise`(
	IN p_companyid INT,
    IN p_batchid INT
)
BEGIN
 
    SELECT
        CDC.id,
        CDC.cbfdailytransactionid,
        CDC.consumptiontypeid,
        CDC.itemid,
        I.itemname,
        CDC.quantity,
        B.branchname
     
    FROM
		cbf_dailyconsumption CDC
	LEFT JOIN cbf_dailytransaction CDT ON CDC.cbfdailytransactionid = CDT.id
    INNER JOIN item I ON I.id = CDC.itemid
    INNER JOIN cbf_batch_details CB ON CB.id = p_batchid
    INNER JOIN cbf_farmerenquiry FE ON FE.id = CB.farmer_enquiry_id
    INNER JOIN commonbranch B ON B.id = FE.branch_id
    
	WHERE
		CDC.companyid = p_companyid
        AND CDT.cbf_batchid = p_batchid;
END;



CREATE PROCEDURE `spc_cbfdailyconsumption_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DELETE FROM cbf_dailyconsumption WHERE id = p_id;
    
	-- record log
	CALL spc_commonlog_save(p_companyid, 'cbf_dailyconsumption', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_cbfdailyconsumption_save`(
	IN p_id INT,
    IN p_cbfdailytransactionid INT,
    IN p_consumptiontypeid INT,
    IN p_itemid INT,
    IN p_isherbal INT,
    IN p_stdconsumption DECIMAL(9,3),
    IN p_quantity DECIMAL(9,3),
	IN p_issuedetailid INT,
    IN p_breeditemid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_dailyconsumption
				(cbfdailytransactionid, 
				 consumptiontypeid, 
                 itemid, 
                 isherbal, 
                 stdconsumption,
                 quantity, 
                 issuedetailid,
                 breeditemid,
                 companyid)
			VALUES 
				(p_cbfdailytransactionid, 
                 p_consumptiontypeid, 
                 p_itemid, 
                 p_isherbal, 
                 p_stdconsumption,
                 p_quantity,
                 p_issuedetailid,
                 p_breeditemid,
                 p_companyid);
      
      SET @action = 'INSERT';
      
	 
    ELSE
    
		UPDATE  cbf_dailyconsumption
				SET consumptiontypeid = p_consumptiontypeid, 
                itemid = p_itemid,
                isherbal = p_isherbal,
                stdconsumption = p_stdconsumption,
                quantity = p_quantity,
                issuedetailid = p_issuedetailid,
                breeditemid = p_breeditemid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   
    -- record log
    -- CALL spc_commonlog_save(p_companyid, 'breederdailyconsumption', out_id, @action, p_userid);
   
END;



CREATE PROCEDURE `spc_cbfdailyconsumption_savejson`(
	IN p_cbfdailytransactionid INT,
    IN p_dailyMortality json,
    IN p_feedConsumption json,
    IN p_medicineConsumption json,
    IN p_vaccineConsumption json,
	IN p_vitaminConsumption json,
    IN p_otherDetails json,
    OUT out_id INT
)
BEGIN

	-- save other details 
    
    SET @i = 0;
    
    SET @p_id = CASE WHEN JSON_EXTRACT(p_otherDetails, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.id'))) AS SIGNED) end;
	SET @out_id = null;
        
	CALL spc_cbfdailyotherdetails_save(
        
	     @p_id,
		 p_cbfdailytransactionid,
         JSON_UNQUOTE((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.lighton')))),
         JSON_UNQUOTE((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.lightoff')))),
		 CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.duration'))) AS DECIMAL(9,3)),
		 CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.temperature'))) AS DECIMAL(9,3)),
		 CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.humidity'))) AS DECIMAL(9,3)),
		 IF(json_type(json_extract(p_otherDetails, CONCAT('$.waterconsumption'))) = 'NULL', null, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.waterconsumption'))) AS DECIMAL(9,2))),
         CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.companyid'))) AS UNSIGNED INTEGER),
		 CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.userid'))) AS UNSIGNED INTEGER),
		 @out_id
	 );
     
    --  save daily mortality
    
	 SET @i = 0;
    
	 WHILE @i < JSON_LENGTH(p_dailyMortality) DO
    
		 SET @str = NULL;
         SELECT JSON_EXTRACT(p_dailyMortality,CONCAT('$[',@i,']')) INTO @str;
        
		 SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
		 SET @out_id = null;
        
		 CALL spc_cbfdailymortality_save(
        
			 @p_id,
             p_cbfdailytransactionid,
             (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.avgweight'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.totalmortality'))),
			 (SELECT JSON_EXTRACT(@str, CONCAT('$.mortalityreasonid'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.totalculls'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.cullsreasonid'))),
			 (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
		     (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			 @out_id
         );

		 SELECT @i + 1 INTO @i;
        
	  END WHILE;
    
    
    -- save daily feed consumption 
    
    SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_feedConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_feedConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_cbfdailyconsumption_save(
        
			@p_id,
            p_cbfdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
            -- if(json_type(json_extract(@str, CONCAT('$.breedertypeid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breedertypeid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.stdconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.stdconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
			if(json_type(json_extract(@str, CONCAT('$.breeditemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breeditemid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    -- save daily medicine consumption
    
	SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_medicineConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_medicineConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_cbfdailyconsumption_save(
        
			@p_id,
            p_cbfdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.stdconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.stdconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
             if(json_type(json_extract(@str, CONCAT('$.breeditemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breeditemid'))),
			(SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    -- save daily vaccine consumption
    
	SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_vaccineConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_vaccineConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_cbfdailyconsumption_save(
        
			@p_id,
            p_cbfdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
           --  if(json_type(json_extract(@str, CONCAT('$.breedertypeid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breedertypeid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.stdconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.stdconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
             if(json_type(json_extract(@str, CONCAT('$.breeditemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breeditemid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    
    -- save daily vitamin comsumtion
    
     SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_vitaminConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_vitaminConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_cbfdailyconsumption_save(
        
			@p_id,
            p_cbfdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
           -- if(json_type(json_extract(@str, CONCAT('$.breedertypeid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breedertypeid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.stdconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.stdconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
            if(json_type(json_extract(@str, CONCAT('$.breeditemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.breeditemid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
END;



CREATE PROCEDURE `spc_cbfdailyconsumption_select`(
	IN p_cbfdailytransactionid INT
)
BEGIN
   
   SET @warehouseid = null;
   
   SELECT @warehouseid:=WB.warehouseid
   FROM cbf_dailytransaction CDT
   LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON CDT.shedid = SDD.id
   INNER JOIN warehousebin WB ON WB.id = SDD.warehousebinid 
   WHERE CDT.id = p_cbfdailytransactionid;
   
   -- select feed consumption
   SELECT 
			CDC.id,
            CDC.cbfdailytransactionid,
            CDC.consumptiontypeid,
            CDC.itemid,
            I.itemcode,
            I.itemname,
           -- R1.refname as breedertype,
            CDC.isherbal,
            CDC.stdconsumption,
            CDC.quantity,
            CDC.breeditemid,
            R2.refname as unitname,
            I1.itemname as breederitemname,
            CDC.companyid,
            fnc_consumptionlivestock(CDC.itemid, @warehouseid, CDC.companyid) as instock,
            fnc_consumptionlivestock(CDC.itemid, @warehouseid, CDC.companyid) as instockforref
	
    FROM 
		cbf_dailyconsumption CDC
        LEFT JOIN item I On CDC.itemid = I.id
        LEFT JOIN item I1 On CDC.breeditemid = I1.id
       -- LEFT JOIN `reference` R1 ON BDC.breedertypeid = R1.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		CDC.cbfdailytransactionid = p_cbfdailytransactionid AND
        CDC.consumptiontypeid = 861;
        
	
    -- select medicine consumption
   SELECT 
			CDC.id,
            CDC.cbfdailytransactionid,
            CDC.consumptiontypeid,
            CDC.itemid,
            I.itemcode,
            I.itemname,
            CDC.breeditemid,
            I1.itemname as breederitemname,
          --   R1.refname as breedertype,
            CDC.isherbal,
            CDC.stdconsumption,
            CDC.quantity,
            R2.refname as unitname,
            CDC.companyid,
            fnc_consumptionlivestock(CDC.itemid, @warehouseid, CDC.companyid) as instock,
            fnc_consumptionlivestock(CDC.itemid, @warehouseid, CDC.companyid) as instockforref
	
    FROM 
		cbf_dailyconsumption CDC
        LEFT JOIN item I On CDC.itemid = I.id
       -- LEFT JOIN `reference`R1 ON BDC.breedertypeid = R1.id
	    LEFT JOIN item I1 On CDC.breeditemid = I1.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		CDC.cbfdailytransactionid = p_cbfdailytransactionid AND
        CDC.consumptiontypeid = 862;
        
	-- select vaccine consumption
   SELECT 
			CDC.id,
            CDC.cbfdailytransactionid,
            CDC.consumptiontypeid,
            CDC.itemid,
            I.itemcode,
            I.itemname,
            CDC.breeditemid,
            I1.itemname as breederitemname,
          --   R1.refname as breedertype,
            CDC.isherbal,
            CDC.stdconsumption,
            CDC.quantity,
            R2.refname as unitname,
            CDC.companyid,
            fnc_consumptionlivestock(CDC.itemid, @warehouseid, CDC.companyid) as instock,
            fnc_consumptionlivestock(CDC.itemid, @warehouseid, CDC.companyid) as instockforref
	
    FROM 
		cbf_dailyconsumption CDC
        LEFT JOIN item I On CDC.itemid = I.id
       -- LEFT JOIN `reference`R1 ON BDC.breedertypeid = R1.id
		LEFT JOIN item I1 On CDC.breeditemid = I1.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		CDC.cbfdailytransactionid = p_cbfdailytransactionid AND
        CDC.consumptiontypeid = 863;
        
	-- select vitamin consumption
   SELECT 
			CDC.id,
            CDC.cbfdailytransactionid,
            CDC.consumptiontypeid,
            CDC.itemid,
            I.itemcode,
            I.itemname,
            CDC.breeditemid,
            I1.itemname as breederitemname,
          --   R1.refname as breedertype,
            CDC.isherbal,
            CDC.stdconsumption,
            CDC.quantity,
            R2.refname as unitname,
            CDC.companyid,
            fnc_consumptionlivestock(CDC.itemid, @warehouseid, CDC.companyid) as instock,
            fnc_consumptionlivestock(CDC.itemid, @warehouseid, CDC.companyid) as instockforref
	
    FROM 
		cbf_dailyconsumption CDC
        LEFT JOIN item I On CDC.itemid = I.id
       -- LEFT JOIN `reference`R1 ON BDC.breedertypeid = R1.id
		LEFT JOIN item I1 On CDC.breeditemid = I1.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		CDC.cbfdailytransactionid = p_cbfdailytransactionid AND
        CDC.consumptiontypeid = 864;
            
END;



CREATE PROCEDURE `spc_cbfdailymortality_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN
    DELETE FROM cbf_dailymortality WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'cbf_dailymortality', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_cbfdailymortality_save`(
	IN p_id INT,
    IN p_cbfdailytransactionid INT,
    IN p_itemid INT,
    IN p_avgweight DECIMAL(9,3),
    IN p_totalmortality INT,
    IN p_mortalityreasonid INT,
    IN p_totalculls INT,
    IN p_cullsreasonid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_dailymortality
				(cbfdailytransactionid, 
				 itemid, 
                 avgweight, 
                 totalmortality, 
                 mortalityreasonid, 
                 totalculls, 
                 cullsreasonid,
                 companyid)
			VALUES 
				(p_cbfdailytransactionid, 
                 p_itemid, 
                 p_avgweight, 
                 p_totalmortality, 
                 p_mortalityreasonid,
                 p_totalculls, 
                 p_cullsreasonid,
                 p_companyid);
	  
      SET @action = 'INSERT';
	
    ELSE
    
		UPDATE  cbf_dailymortality
				SET cbfdailytransactionid = p_cbfdailytransactionid, 
                itemid = p_itemid,
                avgweight = p_avgweight,
                totalmortality = p_totalmortality,
                mortalityreasonid = p_mortalityreasonid,
                totalculls = p_totalculls,
                cullsreasonid = p_cullsreasonid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF((SELECT statusid FROM cbf_dailytransaction WHERE id = p_cbfdailytransactionid) = 3062)THEN
		UPDATE cbf_batch_details SET body_weight = p_avgweight
        WHERE id = (SELECT cbf_batchid FROM cbf_dailytransaction WHERE id = p_cbfdailytransactionid);
    END IF;
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederdailymortality', out_id, @action, p_userid);
   
END;



CREATE PROCEDURE `spc_cbfdailyotherdetails_save`(
	IN p_id INT,
    IN p_cbfdailytransactionid INT,
    IN p_lighton VARCHAR(30),
    IN p_lightoff VARCHAR(30),
    IN p_duration DECIMAL(9,2),
    IN p_temperature DECIMAL(9,3),
    IN p_humidity DECIMAL(9,3),
    IN p_waterconsumption DECIMAL(9,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
     
     
     SET p_lighton = TIME(STR_TO_DATE(p_lighton, '%h:%i %p' ));
	 SET p_lightoff = TIME(STR_TO_DATE(p_lightoff, '%h:%i %p' ));
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_dailyotherdetail
				(cbfdailytransactionid, 
				 lighton, 
                 lightoff, 
                 duration, 
                 temperature, 
                 humidity, 
                 waterconsumption, 
                 companyid)
			VALUES 
				(p_cbfdailytransactionid, 
				 p_lighton,
                 p_lightoff,
                 p_duration, 
                 p_temperature, 
                 p_humidity, 
                 p_waterconsumption,
                 p_companyid);
	  
      SET @action = 'INSERT';
	
    ELSE
    
		UPDATE  cbf_dailyotherdetail
				SET cbfdailytransactionid = p_cbfdailytransactionid, 
                lighton = p_lighton,
                lightoff = p_lightoff, 
                duration = p_duration,
                temperature = p_temperature,
                humidity = p_humidity,
                waterconsumption = p_waterconsumption,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederdailyotherdetails', out_id, @action, p_userid);
   
END;



CREATE PROCEDURE `spc_cbfdailytransaction_bycbfbatchid`(
	IN p_cbfbatchid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	
SET @breeditemid = NULL;
SET @mortality = 0;
SET @culls = 0;
	SELECT  
		breed_id INTO @breeditemid
		
	FROM 
		cbf_batch_details
        
	WHERE id = p_cbfbatchid LIMIT 1;
            
            SELECT 
			
				CASE WHEN itemid = @breeditemid THEN @mortality:= totalmortality ELSE NULL END as mortality
                
				FROM( SELECT
					  itemid, SUM(totalmortality) as totalmortality   
            
					  FROM cbf_dailytransaction CDT
					  LEFT JOIN cbf_dailymortality CDM ON CDM.cbfdailytransactionid = CDT.id
    
					  WHERE cbf_batchid = p_cbfbatchid
    
				GROUP BY itemid) as totalmortality;
                
                
                SELECT 
			
				CASE WHEN itemid = @breeditemid THEN @culls:= totalculls ELSE NULL END as culls
                
				FROM( SELECT
					  itemid, SUM(totalculls) as totalculls    
            
					   FROM cbf_dailytransaction CDT
					  LEFT JOIN cbf_dailymortality CDM ON CDM.cbfdailytransactionid = CDT.id
    
					  WHERE cbf_batchid = p_cbfbatchid
    
				GROUP BY itemid) as totalculls;
    
    SELECT 
			 IFNULL(@mortality,0) AS mortality,
			 IFNULL(@culls,0) AS culls;
    

END;



CREATE PROCEDURE `spc_cbfdailytransaction_issueconsumeditems`(
  IN p_dailytransactionid INT,
  IN p_outid INT
)
BEGIN
	DECLARE p_itemid INT;
	DECLARE p_itemname VARCHAR(200);
	DECLARE p_itemunitid INT;
	DECLARE p_unitcost INT;
	DECLARE p_totalmortality INT;
	DECLARE p_totalculls INT;
    DECLARE p_quantity INT;
    DECLARE p_companyid INT;
    DECLARE p_userid INT;
    DECLARE p_cbfbatchid INT;
    DECLARE p_shedwarehousebinid INT;
    DECLARE p_warehouseid INT;
    DECLARE p_mortalityid INT;
    DECLARE p_consumptionid INT;
    DECLARE p_transactionid INT;
	DECLARE p_sourceid INT;
	DECLARE p_itembatch VARCHAR(300);
    DECLARE x INT;
	DECLARE i INT;
    DECLARE material_itemid INT;
    DECLARE material_itembatch VARCHAR(300);
    DECLARE material_quantity INT;
	SET @row_number = 0;
    SET @row_number1 = 0;
	SET @reccount = 0;
    SET @consumptionreccount = 0;
	SET x = 1;
    SET i = 1;
    SET @materialissue_outid = null;
    SET @materialissuedetail_outid = null;
    SET @movement_outid = null;
    SET @consumptionissue_outid = null;
    
    SELECT CDT.cbf_batchid, SDD.warehousebinid, CDT.companyid, CDT.approvedby, WB.warehouseid, CCP.transaction_id, CPSD.sourceid
    INTO p_cbfbatchid, p_shedwarehousebinid, p_companyid, p_userid, p_warehouseid, p_transactionid, p_sourceid
    
    FROM cbf_dailytransaction CDT
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON CDT.shedid = SDD.id
	LEFT JOIN warehousebin WB ON WB.id = SDD.warehousebinid
    LEFT JOIN cbf_chick_placement CCP ON CDT.cbf_batchid = CCP.batch_id
	LEFT JOIN cbf_procurementscheduledetail CPSD ON CPSD.procurementscheduleid = CCP.create_batch_schedule_id
    
    WHERE CDT.id = p_dailytransactionid;
    
	-- save issue parent record
	 CALL spc_materialissue_save(
			null, 
			NOW(), 
			381, 
			p_cbfbatchid, 
			362, 
			'CBF daily culls and mortality', 
			p_userid, 
            p_warehouseid,
            p_shedwarehousebinid,
            null, 
			null, 
            p_companyid, 
            p_userid, 
            @materialissue_outid
		);
 
	UPDATE cbf_dailytransaction SET issueid = @materialissue_outid
	WHERE id = p_dailytransactionid;
        
	-- select mortality and culls detail for given daily transaction and issue them
		
		DROP TEMPORARY TABLE IF EXISTS tempmortality;
        
		CREATE TEMPORARY TABLE tempmortality
		SELECT 
			CDM.id,
			CDM.itemid, 
			I.itemname, 
			I.itemunitid,
			I.unitcost,
			totalmortality, 
			totalculls, 
			(@row_number := @row_number + 1) as `rank`
            
		FROM cbf_dailymortality CDM
		LEFT JOIN item I ON CDM.itemid = I.id
		WHERE CDM.cbfdailytransactionid = p_dailytransactionid;
	 
		SELECT COUNT(*) INTO @reccount FROM tempmortality;
	 
		WHILE x  <= @reccount DO
			
			SELECT id, itemid, itemname, itemunitid, unitcost, totalmortality, totalculls
            INTO p_mortalityid, p_itemid, p_itemname, p_itemunitid, p_unitcost, p_totalmortality, p_totalculls
            FROM tempmortality WHERE `rank` = x;
            SET p_quantity = (p_totalmortality + p_totalculls);
		
			if(p_sourceid = 261)THEN
				SELECT itembatch into p_itembatch
                FROM materialtransferdetail WHERE materialtransferid = p_transactionid AND itemid = p_itemid;
            ELSE
				SELECT itembatch into p_itembatch
				FROM grpodetail WHERE grpoid = p_transactionid AND itemid = p_itemid;
			END IF;
            
			CALL spc_materialissuedetail_save(null, @materialissue_outid, p_itemid, p_itemname, p_quantity, p_unitcost, (p_quantity * p_unitcost), p_itemunitid, p_itembatch, p_companyid, p_userid, @materialissuedetail_outid);
			CALL spc_materialmovement_save(null, p_itemid, p_itembatch, 683, @materialissuedetail_outid, NOW(), p_quantity, p_warehouseid, p_shedwarehousebinid, null, null, null, p_companyid, p_userid,@movement_outid);
  
			UPDATE cbf_dailymortality SET issuedetailid = @materialissuedetail_outid
            WHERE id = p_mortalityid;
            
			SET  x = x + 1; 
		END WHILE;
	 
		DROP TEMPORARY TABLE tempmortality;
        
	
   -- select daily consumption for given daily transaction and issue them itembatch wise
   
   SET @reccount = 0;
   SET x = 1;
   SET @row_number = 0;
 
   
	DROP TEMPORARY TABLE IF EXISTS tempconsumption;
        
	CREATE TEMPORARY TABLE tempconsumption
	SELECT 
		CDC.id,
		CDC.itemid, 
		I.itemname, 
		I.itemunitid,
		I.unitcost,
		quantity, 
		(@row_number := @row_number + 1) as `rank`
	FROM cbf_dailyconsumption CDC
	LEFT JOIN item I ON CDC.itemid = I.id
	WHERE CDC.cbfdailytransactionid = p_dailytransactionid;
	 
	SELECT COUNT(*) INTO @consumptionreccount FROM tempconsumption;
    
    
	WHILE x  <= @consumptionreccount DO
			
		SET p_consumptionid = null;
		SET p_itemid = null;
		SET p_itemname = null;
		SET p_itemunitid = null;
		SET p_unitcost = null;
		SET p_quantity = null;
        SET i = 1;
		SET @reccount = 0;
   
		SELECT id, itemid, itemname, itemunitid, unitcost, quantity
		INTO p_consumptionid, p_itemid, p_itemname, p_itemunitid, p_unitcost, p_quantity
		FROM tempconsumption WHERE `rank` = x;
         
	
        -- select itembatch and quantity from material movement for current item
        DROP TEMPORARY TABLE IF EXISTS tempitembatch;
        
		CREATE TEMPORARY TABLE tempitembatch
        
        SELECT itemid, itembatch, stockin, 
        fnc_itembatchstockout(itemid, IFNULL(itembatch,''), p_warehouseid) as stockout,
        (@row_number1 := @row_number1 + 1) as recordrank 
       FROM(
    
			SELECT itemid, itembatch, SUM(quantity) as stockin
			FROM materialmovement
			WHERE 
				itemid = p_itemid AND
				companyid = p_companyid AND
				towarehouseid = p_warehouseid AND
				transactiontypeid in (681,682,684)
				GROUP BY itemid, itembatch
			) stocktable; 
      
        
		SELECT COUNT(*) INTO @reccount FROM  tempitembatch;
        
        WHILE i  <= @reccount DO
        
			SET @issuequantity = 0;
			
			SELECT itemid, itembatch, (stockin - stockout) as quantity
			INTO  material_itemid, material_itembatch, material_quantity
			FROM  tempitembatch 
            WHERE recordrank = i;
			
             IF (p_quantity > 0 ) THEN
             
				IF (material_quantity >= p_quantity) THEN
					SET @issuequantity = p_quantity;
					SET p_quantity = 0;
				ELSE
					SET @issuequantity = p_quantity - material_quantity;
                END IF;
                
                  CALL spc_materialissuedetail_save(null, @materialissue_outid, p_itemid, p_itemname, @issuequantity, p_unitcost, (@issuequantity * p_unitcost), p_itemunitid, material_itembatch, p_companyid, p_userid, @materialissuedetail_outid);
				  CALL spc_materialmovement_save(null, p_itemid, material_itembatch, 683, @materialissuedetail_outid, NOW(), @issuequantity, p_warehouseid, p_shedwarehousebinid, null, null, null, p_companyid, p_userid,@movement_outid);
				  CALL spc_consumptionissue_save(null, p_itemid, p_consumptionid, @materialissuedetail_outid, @consumptionissue_outid);
              
              
            
            END IF;
            
        	SET  i = i + 1; 
	    END WHILE;
       
       DROP TEMPORARY TABLE tempitembatch;
       
	
		-- UPDATE breederdailyconsumption SET issuedetailid = @materialissuedetail_outid
        -- WHERE id = p_consumptionid;
            
			SET  x = x + 1; 
	END WHILE;
	 
	DROP TEMPORARY TABLE tempconsumption;
END;



CREATE PROCEDURE `spc_cbfdailytransaction_save`(
	IN p_id INT,
    IN p_branchid INT,
    IN p_shedid INT,
    IN p_cbf_batchid INT,
    IN p_createdby INT,
    IN p_transactiondate DATE,
    IN p_approvedby INT,
    IN p_approvaldate DATE,
    IN p_statusid INT,
    IN p_remark VARCHAR(500),
    IN p_readyforsale TINYINT(4),
    IN p_warehouseid INT,
    IN p_issueid INT,
    IN p_age INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;
     
	IF EXISTS(
		SELECT id from cbf_dailytransaction where cbf_batchid = p_cbf_batchid AND transactiondate = p_transactiondate AND shedid = p_shedid
				AND (
						(NULLIF(p_id, 0) IS NULL)
						-- OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id)
                    )
            
		) THEN BEGIN
        
		SELECT -1 INTO out_id;
	
	END;
            
    ELSEIF EXISTS(
		 SELECT id from cbf_dailytransaction where statusid = 3061 AND branchid = p_branchid
			 AND (
				 (NULLIF(p_id, 0) IS NULL)
				    -- OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id)
				 )
            
		 ) THEN  BEGIN
        
	 SELECT -2 INTO out_id;
	
	 END;
    
    ELSE
    
    BEGIN
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
		
        IF (p_statusid = 822) THEN
			SET p_approvaldate = NOW();
        END IF;
        
        INSERT INTO cbf_dailytransaction 
				(branchid,shedid, 
				 cbf_batchid, 
                 createdby, 
                 transactiondate, 
                 approvedby, 
                 approvaldate, 
                 statusid, 
                 remark, 
                 readyforsale,
                 issueid,
                 companyid)
			VALUES 
				(p_branchid,p_shedid, 
                 p_cbf_batchid, 
                 p_createdby, 
                 p_transactiondate, 
                 p_approvedby, 
                 p_approvaldate, 
                 p_statusid,
                 p_remark, 
                 p_readyforsale,
                 @materialissue_outid,
                 p_companyid);
	  
      SET @action = 'INSERT';
        
    ELSE
    
		UPDATE  cbf_dailytransaction
				SET branchid = p_branchid, 
                shedid = p_shedid, 
                cbf_batchid = p_cbf_batchid,
                transactiondate = p_transactiondate,
                approvedby = p_approvedby,
                approvaldate = p_approvaldate,
                statusid = p_statusid,
                remark = p_remark,
                readyforsale = p_readyforsale,
                issueid = p_issueid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
             
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    SET @cbf_batchid = NULL;
    SET @mortality = NULL;
	SET @culls = NULL;
    SET @live_batch_qty = NULL;
    
	SELECT CDM.totalmortality, CDM.totalculls, CDT.cbf_batchid
    INTO @mortality, @culls, @cbf_batchid
	FROM cbf_dailymortality CDM
	LEFT JOIN cbf_dailytransaction CDT ON CDT.id = p_id
    LEFT JOIN cbf_batch_details CB ON CB.id = CDT.cbf_batchid
	WHERE CDM.cbfdailytransactionid = p_id;
    
    IF(out_id > 0 AND p_statusid = 3062)THEN
		UPDATE cbf_batch_details 
		SET
			culls = (culls + @culls),
			total_mortality = (total_mortality + @mortality),
            live_batch_qty = live_batch_qty - ((culls + @culls) + (total_mortality + @mortality)),
            age = p_age,
            live_batch_date = p_transactiondate
		WHERE id = @cbf_batchid;
        
        -- update batch status as ready for sale
        IF(p_readyforsale = 1)THEN
			UPDATE cbf_batch_details SET statusid = 3023 WHERE id = p_cbf_batchid;
        END IF;
    END IF;
    
    -- record log
     CALL spc_commonlog_save(p_companyid, 'cbf_dailytransaction', out_id, @action, p_userid);
  
  END;
   
   END IF;
END;



CREATE PROCEDURE `spc_cbfdailytransaction_search`(
	IN p_companyid INT
)
BEGIN
    
    SELECT
			CT.id,
            CT.shedid,
            SDD.shed_name as shedname,
            CT.cbf_batchid,
            DATE_FORMAT( CT.transactiondate,'%d/%m/%Y') as transactiondate,
            R.refname as `status`,
            CT.readyforsale,
            CT.statusid
		
    FROM
		cbf_dailytransaction CT
		LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON CT.shedid = SDD.id
        LEFT JOIN `reference` R ON CT.statusid = R.id
    
	WHERE
		CT.companyid = p_companyid
        ORDER BY CT.id DESC;
END;



CREATE PROCEDURE `spc_cbfdailytransaction_select`(
	IN p_id INT
)
BEGIN
    
    -- select breeder daily transaction details
    SELECT
		  CDT.id,
          CDT.branchid,
          shedid,
          WB.warehouseid,
          SDD.warehousebinid,
          SDD.shed_name,
          FE.id as farmerenquiryid,
          FE.farmer_name,
          CDT.cbf_batchid,
          B.branchcode,
          B.branchname,
		  DATE_FORMAT(CDT.transactiondate,'%d/%m/%Y') as transactiondate,
		  CDT.statusid,
          R.refname,
          U.username as createdbyname,
          CDT.remark,
          CDT.companyid,
          CDT.createdby,
		  CDT.createdby as userid,
          CDT.issueid,
          CCP.placement_date,
          CDT.readyforsale
    FROM
		cbf_dailytransaction CDT
		LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON CDT.shedid = SDD.id
        INNER JOIN cbf_farmerenquiry FE ON FE.id = SDD.farmerenquiryid
        LEFT JOIN warehousebin WB ON WB.id = SDD.warehousebinid
        LEFT JOIN `reference` R ON CDT.statusid = R.id
        LEFT JOIN `user1` U ON CDT.createdby = U.id
        LEFT JOIN commonbranch B ON B.id = CDT.branchid
        LEFT JOIN cbf_chick_placement CCP ON CDT.cbf_batchid = CCP.batch_id

	WHERE
		 CDT.id = p_id;
         
         
	-- select breeder daily transaction other details
    
    SELECT
			id,
            cbfdailytransactionid,
            TIME_FORMAT(lighton, '%h:%i %p') as lighton,
            TIME_FORMAT(lightoff, '%h:%i %p') as lightoff,
            duration,
            temperature,
            humidity,
            waterconsumption,
            companyid,
            (SELECT createdby FROM cbf_dailytransaction WHERE id = p_id) as userid 
    
    FROM
		cbf_dailyotherdetail 
        
	WHERE
		cbfdailytransactionid = p_id;
        
	
	-- select breeder daily culls-mortality details
  
    SELECT
			CDM.id,
            CDM.cbfdailytransactionid,
            CDM.itemid,
            I.itemcode,
            I.itemname,
            CDM.avgweight,
            CDM.totalmortality,
            CDM.mortalityreasonid,
            CR1.reason as mortalityreason,
            CDM.totalculls,
            CDM.cullsreasonid,
            CR2.reason as cullsreason,
            CDM.companyid,
            fnc_shedwise_chickslivestock(CDT.shedid, CDM.itemid, CDM.cbfdailytransactionid) as instock,
            fnc_shedwise_chickslivestock(CDT.shedid, CDM.itemid, CDM.cbfdailytransactionid) as instockforref,
            CDM.issuedetailid
            
	FROM cbf_dailymortality CDM
    LEFT JOIN cbf_dailytransaction CDT ON CDT.id = CDM.cbfdailytransactionid
    LEFT JOIN cbf_reasons CR1 ON CDM.mortalityreasonid = CR1.id
    LEFT JOIN cbf_reasons CR2 ON CDM.cullsreasonid = CR2.id
    LEFT JOIN item I ON CDM.itemid = I.id
    
    WHERE
		CDM.cbfdailytransactionid = p_id;
END;



CREATE PROCEDURE `spc_cbfdocumentcollectiondetails_delete`(
IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_documentcollectiondetails WHERE id = p_id;

END;



CREATE PROCEDURE `spc_cbfdocumentcollectiondetails_save`(
	IN p_id INT(11),
    IN p_document_collection_id INT(11),
    IN p_document_id INT(11),
    IN p_image_url VARCHAR(250),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_documentcollectiondetails
				(id, document_collection_id, document_id, image_url, company_id)
			VALUES 
				(p_id, p_document_collection_id, p_document_id, p_image_url, p_companyid);
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE cbf_documentcollectiondetails
				SET document_collection_id = p_document_collection_id, 
                document_id = p_document_id,
                image_url = p_image_url,
                company_id = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'cbf_documentcollectiondetails', out_id, @action, p_userid);

    

END;



CREATE PROCEDURE `spc_cbfdocumentcollectiondetails_search`(
	IN p_companyid INT(11)
)
BEGIN
	SELECT * FROM cbf_documentcollectiondetails WHERE companyid = p_companyid;
END;



CREATE PROCEDURE `spc_cbfdocumentcollectiondetails_select`(
	IN p_id INT(11),
    IN p_document_collection_id INT,
    IN p_companyid INT(11)
)
BEGIN
	SELECT * FROM cbf_documentcollectiondetails
    WHERE id = p_id
    AND document_collection_id = p_document_collection_id
    AND companyid = p_companyid;
END;



CREATE PROCEDURE `spc_cbfdocumentcollection_delete`(
IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_documentcollection WHERE id = p_id;

END;



CREATE PROCEDURE `spc_cbfdocumentcollection_save`(
	IN p_id INT(11),
    IN p_enquiry_id INT(11),
    IN p_status_id INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_documentcollection
				(id, enquiry_id, status_id, companyid)
			VALUES 
				(p_id, p_enquiry_id, p_status_id, p_companyid);
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE cbf_documentcollection
				SET enquiry_id = p_enquiry_id, 
                status_id = p_status_id, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'cbf_documentcollection', out_id, @action, p_userid);

    

END;



CREATE PROCEDURE `spc_cbfdocumentcollection_search`(
	IN p_companyid INT(11)
)
BEGIN
	SELECT * FROM cbf_documentcollection WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfdocumentcollection_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN
	SELECT * FROM cbf_documentcollection
    WHERE id = p_id
    AND companyid = p_companyid;
END;



CREATE PROCEDURE `spc_cbffarmenquirydetail_search`(
	IN p_farmerenquiryid INT(11),
    IN p_companyid INT(11) 
)
BEGIN

	-- water analysis
	SELECT FW.id, 
		   water_parameter_id,
		   result,
           W.name,
           W.unit,
           W.stdspecification
           
	FROM cbf_farmerenquiry_wateranalysis FW
    LEFT JOIN waterparameter W ON W.id = FW.water_parameter_id
    
    WHERE FW.farmerenquiryid = p_farmerenquiryid
    AND FW.companyid = p_companyid;
    
    -- Shed dimension detail
    SELECT id, 
		   shed_name,
			width,
			length,
			total_sq_ft,
			side_wall_height,
			wire_mash_height,
			side_height,
			center_height,
			foundation_height,
			dist_bet_shed,
			dist_from_branch,
			dist_from_feed_mill,
            statusid
            
	FROM cbf_farmerenquiry_sheddimensiondetail
    
    WHERE farmerenquiryid = p_farmerenquiryid
    AND companyid = p_companyid;
    
    
    -- Equipment details
    SELECT FEE.id, 
		   FEE.equipment_id,
		   FEE.fulfillment_qty,
		   FEE.fulfillment,
           FP.parametername,
           FP.requiredratio
           
	FROM cbf_farmerenquiry_equipmentdetail FEE
    LEFT JOIN cbffarmparameter FP ON FP.id = FEE.equipment_id
    
    WHERE FEE.farmerenquiryid = p_farmerenquiryid
    AND FEE.companyid = p_companyid;
    
    
    -- Previous performance history
    SELECT id, 
		     contract_type_id,
			 company_name,
			 batches_grown,
			 avg_body_weight,
			 fcr,
			 mortality,
			 eef,
			 rearing_charges
             
	FROM cbf_farmerenquiry_prevperformancehistory
    
    WHERE farmerenquiryid = p_farmerenquiryid
    AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbffarmeragreementdocumentdetails_delete`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	DELETE FROM cbf_farmeragreement_documentdetails WHERE id = p_id AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbffarmeragreementdocumentdetails_save`(
	IN p_id INT(11),
	IN p_farmeragreementid INT(11),
	IN p_documentid INT(11),
	IN p_iscollected TINYINT(4),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_farmeragreement_documentdetails 
				(id, farmeragreementid, documentid, iscollected, companyid)
			VALUES 
				(p_id, p_farmeragreementid, p_documentid, p_iscollected, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_farmeragreement_documentdetails
				SET farmeragreementid = p_farmeragreementid,
                documentid = p_documentid,
                iscollected = p_iscollected,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_farmeragreement_documentdetails', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_cbffarmeragreementdocumentdetails_search`(
	IN p_farmeragreementid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT FAD.id, farmeragreementid, documentid, iscollected, D.documentname
    
    FROM cbf_farmeragreement_documentdetails FAD
    LEFT JOIN document D ON D.id = FAD.documentid
    
    WHERE FAD.farmeragreementid = p_farmeragreementid
    AND FAD.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbffarmeragreementdocumentdetails_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT FAD.id, farmeragreementid, documentid, iscollected, D.documentname
    
    FROM cbf_farmeragreement_documentdetails FAD
    LEFT JOIN document D ON D.id = FAD.documentid
    
    WHERE FAD.id = p_id
    AND FAD.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbffarmeragreement_delete`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	DELETE FROM cbf_farmeragreement_documentdetails WHERE farmeragreementid = p_id AND companyid = p_companyid;
    DELETE FROM cbf_farmeragreement WHERE id = p_id AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbffarmeragreement_save`(
	IN p_id INT(11),
	IN p_farmerenquiryid INT(11),
    IN p_farmer_name VARCHAR(100),
	IN p_description varchar(100),
    IN p_emailid VARCHAR(150),
	IN p_agreementmethodid INT(11),
	IN p_agreementtypeid INT(11),
	IN p_startdate DATE,
	IN p_enddate DATE,
	IN p_terminationdate DATE,
	IN p_signingdate DATE,
	IN p_schemeid INT(11),
	IN p_statusid INT(11),
	IN p_remark varchar(150),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_farmeragreement 
				(partyid, farmerenquiryid, description, emailid, agreementmethodid,
                agreementtypeid, startdate, enddate, terminationdate, signingdate, 
                schemeid, statusid, remark, companyid)
			VALUES 
				(null, p_farmerenquiryid, p_description, p_emailid, p_agreementmethodid,
                p_agreementtypeid, p_startdate, p_enddate, p_terminationdate, p_signingdate, 
                p_schemeid, p_statusid, p_remark, p_companyid);
	  SET @action = 'INSERT';
      
      
	ELSE
    
		UPDATE cbf_farmeragreement
				SET
                farmerenquiryid = p_farmerenquiryid,
                description = p_description,
                emailid = p_emailid,
                agreementmethodid = p_agreementmethodid,
                agreementtypeid = p_agreementtypeid,
                startdate = p_startdate,
                enddate = p_enddate,
                terminationdate = p_terminationdate,
                signingdate = p_signingdate, 
                schemeid = p_schemeid,
                statusid = p_statusid,
                remark = p_remark,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- Create new party with role farmer = 34
    
    SET @mobileno = null;
    SET @address = null;
    SET @cityid = NULL;
    SET @supplierledgerid = null;
    
    SELECT mobile_no, address, cityid INTO @mobileno, @address, @cityid FROM cbf_farmerenquiry WHERE id = p_farmerenquiryid;
    
    SELECT supplierledgerid INTO @supplierledgerid FROM cbfsetting WHERE companyid = p_companyid LIMIT 1;
    
    SET @out_partyid = NULL;
	CALL spc_party_save(
		NULL, p_farmer_name, 34, @mobileno,
        NULL, NULL, NULL, NULL, NULL, p_emailid,
        NULL, NULL, NULL, NULL, NULL, 1, @supplierledgerid, NULL,
		p_companyid, p_userid, @out_partyid
	);
    
    -- update partyid in cbf_farmeragreement table
    UPDATE cbf_farmeragreement SET partyid = @out_partyid WHERE id = out_id;
    
    -- create party address
    SET @out_partyaddressid = NULL;
    CALL spc_partyaddress_save(
		NULL, @out_partyid, NULL, @address,
        @cityid, (SELECT stateid FROM city WHERE id = @cityid),
        (SELECT countryid FROM state WHERE id = (SELECT stateid FROM city WHERE id = @cityid)),
        NULL, NULL, NULL, NULL,
        p_companyid, p_userid, @out_partyaddressid
    );
    
    -- create party contact
    SET @out_partycontactid = NULL;
    CALL spc_partycontact_save(
		NULL, @out_partyid, @mobileno, NULL, 
        p_companyid, p_userid, @out_partycontactid
    );
    
    -- update shed status in farmer enquiry as shed ready = 2082
   /* BEGIN
    
		DECLARE n INT DEFAULT 0;
		DECLARE i INT DEFAULT 0;
		SELECT COUNT(*) INTO n FROM cbf_farmerenquiry_sheddimensiondetail WHERE farmerenquiryid = p_farmerenquiryid;
        
        WHILE i<n DO 
        
			UPDATE cbf_farmerenquiry_sheddimensiondetail SET statusid = 2082 WHERE farmerenquiryid = p_farmerenquiryid;
            
			SET i = i + 1;
		END WHILE;
    
    END;*/
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_farmeragreement', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_cbffarmeragreement_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT FA.id,
		   FA.partyid, 
           P.partyname as farmer_name,
           farmerenquiryid, 
           description, 
           agreementmethodid,
		   agreementtypeid, 
           DATE_FORMAT(startdate,'%d/%m/%Y') as startdate,
           DATE_FORMAT(enddate,'%d/%m/%Y') as enddate,
           DATE_FORMAT(terminationdate,'%d/%m/%Y') as terminationdate,
           DATE_FORMAT(signingdate,'%d/%m/%Y') as signingdate,
		   schemeid, 
           CS.name as scheme_name,
           statusid, 
           remark,
           REF.refname,
           FA.emailid
                
	FROM cbf_farmeragreement FA
    LEFT JOIN `reference` REF ON REF.id = FA.statusid
    LEFT JOIN coststructure CS ON CS.id = FA.schemeid
    LEFT JOIN party P ON P.id = FA.partyid
    
    WHERE FA.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbffarmeragreement_select`(
	IN p_id INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
		   partyid, 
           farmerenquiryid, 
           description, 
           agreementmethodid,
		   agreementtypeid, 
           DATE_FORMAT(startdate,'%d/%m/%Y') as startdate,
           DATE_FORMAT(enddate,'%d/%m/%Y') as enddate,
           DATE_FORMAT(terminationdate,'%d/%m/%Y') as terminationdate,
           DATE_FORMAT(signingdate,'%d/%m/%Y') as signingdate,
		   schemeid, 
           statusid, 
           remark,
           emailid
                
	FROM cbf_farmeragreement
    
    WHERE id = p_id AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbffarmerenquiryequipmentdetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_farmerenquiry_equipmentdetail WHERE id = p_id;

END;



CREATE PROCEDURE `spc_cbffarmerenquiryequipmentdetail_save`(
   IN p_id INT(11),
   IN p_farmerenquiryid INT(11),
   IN p_equipment_id INT(11),
   IN p_fulfillment_qty DECIMAL(12,3),
   IN p_fulfillment TINYINT(4),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_farmerenquiry_equipmentdetail
				(id,
				 farmerenquiryid,
				 equipment_id,
				 fulfillment_qty,
				 fulfillment,
                 companyid)
			VALUES 
				(p_id,
				 p_farmerenquiryid,
				 p_equipment_id,
				 p_fulfillment_qty,
				 p_fulfillment,
                 p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_farmerenquiry_equipmentdetail
				SET 
					 farmerenquiryid = p_farmerenquiryid,
					 equipment_id = p_equipment_id,
					 fulfillment_qty = p_fulfillment_qty,
					 fulfillment = p_fulfillment,
					 companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_farmerenquiry_equipmentdetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_cbffarmerenquiryequipmentdetail_search`(
	IN p_farmerenquiryid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,equipment_id,
		   fulfillment_qty,
		   fulfillment
           
	FROM cbf_farmerenquiry_equipmentdetail
    
    WHERE farmerenquiryid = p_farmerenquiryid
    AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbffarmerenquiryequipmentdetail_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,equipment_id,
		   fulfillment_qty,
		   fulfillment
           
	FROM cbf_farmerenquiry_equipmentdetail
    
    WHERE id = p_id
    AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbffarmerenquiryprevperformancehistory_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_farmerenquiry_prevperformancehistory WHERE id = p_id;

END;



CREATE PROCEDURE `spc_cbffarmerenquiryprevperformancehistory_save`(
   IN p_id INT(11),
   IN p_farmerenquiryid INT(11),
   IN p_contract_type_id INT(11),
   IN p_company_name VARCHAR(100),
   IN p_batches_grown VARCHAR(45),
   IN p_avg_body_weight DECIMAL(9,3),
   IN p_fcr DECIMAL(9,3),
   IN p_mortality DECIMAL(9,3),
   IN p_eef DECIMAL(9,3),
   IN p_rearing_charges DECIMAL(9,3),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_farmerenquiry_prevperformancehistory
				(id,
				 farmerenquiryid,
				 contract_type_id,
				 company_name,
				 batches_grown,
				 avg_body_weight,
				 fcr,
				 mortality,
				 eef,
				 rearing_charges,
                 companyid)
			VALUES 
				(p_id,
				 p_farmerenquiryid,
				 p_contract_type_id,
				 p_company_name,
				 p_batches_grown,
				 p_avg_body_weight,
				 p_fcr,
				 p_mortality,
				 p_eef,
				 p_rearing_charges,
                 p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_farmerenquiry_prevperformancehistory
				SET 
					 farmerenquiryid = p_farmerenquiryid,
					 contract_type_id = p_contract_type_id,
					 company_name = p_company_name,
					 batches_grown = p_batches_grown,
					 avg_body_weight = p_avg_body_weight,
					 fcr = p_fcr,
					 mortality = p_mortality,
					 eef = p_eef,
					 rearing_charges = p_rearing_charges,
					 companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_farmerenquiry_prevperformancehistory', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_cbffarmerenquiryprevperformancehistory_search`(
	IN p_farmerenquiryid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,contract_type_id,
			 company_name,
			 batches_grown,
			 avg_body_weight,
			 fcr,
			 mortality,
			 eef,
			 rearing_charges
             
	FROM cbf_farmerenquiry_prevperformancehistory
    
    WHERE farmerenquiryid = p_farmerenquiryid
    AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbffarmerenquiryprevperformancehistory_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,contract_type_id,
			 company_name,
			 batches_grown,
			 avg_body_weight,
			 fcr,
			 mortality,
			 eef,
			 rearing_charges
             
	FROM cbf_farmerenquiry_prevperformancehistory
    
    WHERE id = p_id
    AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbffarmerenquirysheddimensiondetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_farmerenquiry_sheddimensiondetail where id = p_id;

END;



CREATE PROCEDURE `spc_cbffarmerenquirysheddimensiondetail_save`(
   IN p_id INT(11),
   IN p_farmerenquiryid INT(11),
   IN p_shed_name VARCHAR(100),
   IN p_width DECIMAL(9,3),
   IN p_length DECIMAL(9,3),
   IN p_total_sq_ft DECIMAL(12,3),
   IN p_side_wall_height DECIMAL(9,3),
   IN p_wire_mash_height DECIMAL(9,3),
   IN p_side_height DECIMAL(9,3),
   IN p_center_height DECIMAL(9,3),
   IN p_foundation_height DECIMAL(9,3),
   IN p_dist_bet_shed DECIMAL(9,3),
   IN p_dist_from_branch DECIMAL(9,3),
   IN p_dist_from_feed_mill DECIMAL(9,3),
   IN p_statusid INT(11),
   IN p_warehousebinid INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_farmerenquiry_sheddimensiondetail 
				(id,
				 farmerenquiryid,
				 shed_name,
				 width,
				 length,
				 total_sq_ft,
				 side_wall_height,
				 wire_mash_height,
				 side_height,
				 center_height,
				 foundation_height,
				 dist_bet_shed,
				 dist_from_branch,
				 dist_from_feed_mill,
                 statusid,
                 warehousebinid,
                 companyid)
			VALUES 
				(p_id,
				 p_farmerenquiryid,
				 p_shed_name,
				 p_width,
				 p_length,
				 p_total_sq_ft,
				 p_side_wall_height,
				 p_wire_mash_height,
				 p_side_height,
				 p_center_height,
				 p_foundation_height,
				 p_dist_bet_shed,
				 p_dist_from_branch,
				 p_dist_from_feed_mill,
                 p_statusid,
                 NULL,
                 p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_farmerenquiry_sheddimensiondetail
				SET 
					 farmerenquiryid = p_farmerenquiryid,
					 shed_name = p_shed_name,
					 width = p_width,
					 length = p_length,
					 total_sq_ft = p_total_sq_ft,
					 side_wall_height = p_side_wall_height,
					 wire_mash_height = p_wire_mash_height,
					 side_height = p_side_height,
					 center_height = p_center_height,
					 foundation_height = p_foundation_height,
					 dist_bet_shed = p_dist_bet_shed,
					 dist_from_branch = p_dist_from_branch,
					 dist_from_feed_mill = p_dist_from_feed_mill,
                     statusid = p_statusid,
                     warehousebinid = p_warehousebinid,
					 companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
      -- create one warehousebin for current shed
		SET @out_warehousebinid = NULL;
		CALL spc_warehousebin_save(
			NULL, p_warhouseid, CONCAT(p_shed_name,'-BIN'), p_shed_name,
			p_companyid, 0, p_userid, @out_warehousebinid
		);
		
		-- update warehouse bin id 
		
		UPDATE cbf_farmerenquiry_sheddimensiondetail SET warehousebinid = @out_warehousebinid WHERE id = out_id;
            
	END IF;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_farmerenquiry_sheddimensiondetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_cbffarmerenquirysheddimensiondetail_search`(
	IN p_farmerenquiryid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,shed_name,
			width,
			length,
			total_sq_ft,
			side_wall_height,
			wire_mash_height,
			side_height,
			center_height,
			foundation_height,
			dist_bet_shed,
			dist_from_branch,
			dist_from_feed_mill,
            statusid
            
	FROM cbf_farmerenquiry_sheddimensiondetail
    
    WHERE farmerenquiryid = p_farmerenquiryid
    AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbffarmerenquirysheddimensiondetail_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,shed_name,
			width,
			length,
			total_sq_ft,
			side_wall_height,
			wire_mash_height,
			side_height,
			center_height,
			foundation_height,
			dist_bet_shed,
			dist_from_branch,
			dist_from_feed_mill,
            statusid
            
	FROM cbf_farmerenquiry_sheddimensiondetail
    
    WHERE id = p_id
    AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbffarmerenquirywateranalysis_delete`(
	 IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_farmerenquiry_wateranalysis WHERE id = p_id;

END;



CREATE PROCEDURE `spc_cbffarmerenquirywateranalysis_save`(
   IN p_id INT(11),
   IN p_farmerenquiryid INT(11),
   IN p_water_parameter_id INT(11),
   IN p_result DECIMAL(9,3),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_farmerenquiry_wateranalysis 
				(id,
				 farmerenquiryid,
				 water_parameter_id,
				 result,
                 companyid)
			VALUES 
				(p_id,
				 p_farmerenquiryid,
				 p_water_parameter_id,
				 p_result,
                 p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_farmerenquiry_wateranalysis
				SET 
					 farmerenquiryid = p_farmerenquiryid,
					 water_parameter_id = p_water_parameter_id,
					 result = p_result,
					 companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_farmerenquiry_wateranalysis', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_cbffarmerenquirywateranalysis_search`(
	IN p_farmerenquiryid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,
		   water_parameter_id,
		   result,
           W.name
           
	FROM cbf_farmerenquiry_wateranalysis FW
    LEFT JOIN waterparameter W ON W.id = FW.water_parameter_id
    
    WHERE FW.farmerenquiryid = p_farmerenquiryid
    AND FW.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbffarmerenquirywateranalysis_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id, 
		   water_parameter_id,
		   result,
           W.name
           
	FROM cbf_farmerenquiry_wateranalysis FW
    LEFT JOIN waterparameter W ON W.id = FW.water_parameter_id
    
    WHERE FW.id = p_id
    AND FW.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbffarmer_enquiry_delete`(
  IN p_id INT
)
BEGIN
	DELETE FROM cbf_farmerenquiry WHERE id = p_id;
    
    -- record log
    -- CALL spc_commonlog_save(p_companyid, 'cbf_farmerenquiry', p_id, 'delete', p_userid);

END;



CREATE PROCEDURE `spc_cbffarmer_enquiry_save`(
	IN p_id INT,
    IN p_supervisor_id INT,
    IN p_enquiry_date DATE,
    IN p_farmer_name VARCHAR(250),
    IN p_farm_name VARCHAR(250),
    IN p_farm_type_id INT,
    IN p_address VARCHAR(250),
    IN p_mobile_no VARCHAR(200),
    IN p_incharge_name VARCHAR(250),
    IN p_shed_type_id INT,
    IN p_property_owner VARCHAR(250),
    IN p_age INT,
    IN p_occupation VARCHAR(250),
    IN p_branch_id INT,
    IN p_line_id INT,
    IN p_rest_period INT,
    IN p_farm_area_length DECIMAL(12,3),
    IN p_farm_area_width DECIMAL(12,3),
    IN p_total_area DECIMAL(12,3),
    IN p_density DECIMAL(12,3),
    IN p_incharge_contact_no VARCHAR(200),
    IN p_water_facility_id INT,
    IN p_over_head_tank_capacity DECIMAL(12,3),
    IN p_over_head_tank_type_id INT,
    IN p_holding_tank_capacity DECIMAL(12,3),
    IN p_holding_tank_type_id INT,
    IN p_flooring_id INT,
    IN p_roofing_id INT,
    IN p_diesel_brooder INT,
    IN p_gas_brooder INT,
    IN p_cool_brooder INT,
    IN p_farm_partition INT,
    IN p_electric_brooder INT,
    IN p_wood_brooder INT,
    IN p_thermometer INT,
    IN p_spray_pump INT,
    IN p_road_facility_id INT,
    IN p_mseb_connection_id INT,
    IN p_feed_room_facility INT,
    IN p_curtain_type_id INT,
    IN p_cross_curtains TINYINT,
    IN p_foggers TINYINT,
    IN p_mortality_disposal_pit TINYINT,
    IN p_generator TINYINT,
    IN p_refrigerator TINYINT,
    IN p_inverter TINYINT,
    IN p_tus_storage_facility TINYINT,
    IN p_thermos TINYINT,
    IN p_out_side_curtains TINYINT,
    IN p_ceiling_curtains TINYINT,
    IN p_center_curtains TINYINT,
    IN p_contract_type_id INT,
    IN p_reasons_for_disc_per VARCHAR(250),
    IN p_district VARCHAR(250),
    IN p_taluka VARCHAR(250),
    IN p_post VARCHAR(250),
    IN p_gat_sr_no VARCHAR(250),
    IN p_area DECIMAL(12,3),
    IN p_valuation DECIMAL(12,3),
    IN p_owner_name VARCHAR(250),
    IN p_chick_capacity DECIMAL(12,3),
    IN p_status_id INT,
    IN p_distance_from_branch DECIMAL(12,3),
    IN p_distance_from_feed_mill DECIMAL(12,3),
    IN p_cityid INT,
    IN p_company_id INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
		INSERT INTO cbf_farmerenquiry 
				(id, 
                supervisor_id,
                enquiry_date,
                farmer_name,
                farm_name,
                farm_type_id,
                address,
                mobile_no,
                incharge_name,
                shed_type_id,
                property_owner,
                age,
                occupation,
                branch_id,
                line_id,
                rest_period,
                farm_area_length,
                farm_area_width,
                total_area,
                density,
                incharge_contact_no,
                water_facility_id,
                over_head_tank_capacity,
                over_head_tank_type_id,
                holding_tank_capacity,
                holding_tank_type_id,
                flooring_id,
                roofing_id,
                diesel_brooder,
                gas_brooder,
                cool_brooder,
                farm_partition,
                electric_brooder,
                wood_brooder,
                thermometer,
                spray_pump,
                road_facility_id,
                mseb_connection_id,
                feed_room_facility,
                curtain_type_id,
                cross_curtains,
                foggers,
                mortality_disposal_pit,
                generator,
                refrigerator,
                inverter,
                tus_storage_facility,
                thermos,
                out_side_curtains,
                ceiling_curtains,
                center_curtains,
                contract_type_id,
                reasons_for_disc_per,
                cityid,
                district,
                taluka,
                post,
                gat_sr_no,
                area,
                valuation,
                owner_name,
                chick_capacity,
                status_id,
                distance_from_branch,
                distance_from_feed_mill,
                company_id)
			VALUES 
				(p_id,
                p_supervisor_id,
                p_enquiry_date,
                p_farmer_name,
                p_farm_name,
                p_farm_type_id,
                p_address,
                p_mobile_no,
                p_incharge_name,
                p_shed_type_id,
                p_property_owner,
                p_age,
                p_occupation,
                p_branch_id,
                p_line_id,
                p_rest_period,
                p_farm_area_length,
                p_farm_area_width,
                p_total_area,
                p_density,
                p_incharge_contact_no,
                p_water_facility_id,
                p_over_head_tank_capacity,
                p_over_head_tank_type_id,
                p_holding_tank_capacity,
                p_holding_tank_type_id,
                p_flooring_id,
                p_roofing_id,
                p_diesel_brooder,
                p_gas_brooder,
                p_cool_brooder,
                p_farm_partition,
                p_electric_brooder,
                p_wood_brooder,
                p_thermometer,
                p_spray_pump,
                p_road_facility_id,
                p_mseb_connection_id,
                p_feed_room_facility,
                p_curtain_type_id,
                p_cross_curtains,
                p_foggers,
                p_mortality_disposal_pit,
                p_generator,
                p_refrigerator,
                p_inverter,
                p_tus_storage_facility,
                p_thermos,
                p_out_side_curtains,
                p_ceiling_curtains,
                p_center_curtains,
                p_contract_type_id,
                p_reasons_for_disc_per,
                p_cityid,
                p_district,
                p_taluka,
                p_post,
                p_gat_sr_no,
                p_area,
                p_valuation,
                p_owner_name,
                p_chick_capacity,
                p_status_id,
                p_distance_from_branch,
                p_distance_from_feed_mill,
                p_company_id);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE cbf_farmerenquiry
			SET supervisor_id = p_supervisor_id,
                enquiry_date = p_enquiry_date,
                farmer_name = p_farmer_name,
                farm_name = p_farm_name,
                farm_type_id = p_farm_type_id,
                address = p_address,
                mobile_no = p_mobile_no,
                incharge_name = p_incharge_name,
                shed_type_id = p_shed_type_id,
                property_owner = p_property_owner,
                age = p_age,
                occupation = p_occupation,
                branch_id = p_branch_id,
                line_id = p_line_id,
                rest_period = p_rest_period,
                farm_area_length = p_farm_area_length,
                farm_area_width = p_farm_area_width,
                total_area = p_total_area,
                density = p_density,
                incharge_contact_no = p_incharge_contact_no,
                water_facility_id = p_water_facility_id,
                over_head_tank_capacity = p_over_head_tank_capacity,
                over_head_tank_type_id = p_over_head_tank_type_id,
                holding_tank_capacity = p_holding_tank_capacity,
                holding_tank_type_id = p_holding_tank_type_id,
                flooring_id = p_flooring_id,
                roofing_id = p_roofing_id,
                diesel_brooder = p_diesel_brooder,
                gas_brooder = p_gas_brooder,
                cool_brooder = p_cool_brooder,
                farm_partition = p_farm_partition,
                electric_brooder = p_electric_brooder,
                wood_brooder = p_wood_brooder,
                thermometer = p_thermometer,
                spray_pump = p_spray_pump,
                road_facility_id = p_road_facility_id,
                mseb_connection_id = p_mseb_connection_id,
                feed_room_facility = p_feed_room_facility,
                curtain_type_id = p_curtain_type_id,
                cross_curtains = p_cross_curtains,
                foggers = p_foggers,
                mortality_disposal_pit = p_mortality_disposal_pit,
                generator = p_generator,
                refrigerator = p_refrigerator,
                inverter = p_inverter,
                tus_storage_facility = p_tus_storage_facility,
                thermos = p_thermos,
                out_side_curtains = p_out_side_curtains,
                ceiling_curtains = p_ceiling_curtains,
                center_curtains = p_center_curtains,
                contract_type_id = p_contract_type_id,
                reasons_for_disc_per = p_reasons_for_disc_per,
                cityid = p_cityid,
                district = p_district,
                taluka = p_taluka,
                post = p_post,
                gat_sr_no = p_gat_sr_no,
                area = p_area,
                valuation = p_valuation,
                owner_name = p_owner_name,
                chick_capacity = p_chick_capacity,
                status_id = p_status_id,
                distance_from_branch = p_distance_from_branch,
                distance_from_feed_mill = p_distance_from_feed_mill,
                company_id = p_company_id,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND company_id = p_company_id;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
  -- CALL spc_commonlog_save(p_company_id, 'cbf_farmerenquiry', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_cbffarmer_enquiry_search`(
	IN p_companyid VARCHAR(250)
)
BEGIN
	/*select a.*, DATE_FORMAT(a.enquiry_date,'%d/%m/%Y') as enquiry_date, b.branchname, b.branchcode, c.id as supervisor_id, c.employeename as supervisor_name,
    d.id as shedtype_id, d.shedtype, e.id as status_id, e.refname as status from cbf_farmerenquiry as a 
    left OUTER join branch as b on a.branch_id = b.id
    left OUTER join employee as c on a.supervisor_id = c.id
    left OUTER join cbfshedtype as d on a.shed_type_id = d.id
    left OUTER join `reference` as e on a.status_id = e.id
    where ((p_branchid is null) or (a.branch_id=p_branchid)) AND
    ((p_companyid is null) or (a.company_id=p_companyid))
    order by a.id asc;*/
    
    SELECT FE.id, 
			supervisor_id,
			DATE_FORMAT(enquiry_date,'%d/%m/%Y') as enquiry_date,
			farmer_name,
			farm_name,
			farm_type_id,
			address,
			mobile_no,
			incharge_name,
			shed_type_id,
			property_owner,
			age,
			occupation,
			branch_id,
            B.branchname,
            B.branchcode,
			line_id,
			rest_period,
			farm_area_length,
			farm_area_width,
			total_area,
			density,
			incharge_contact_no,
			water_facility_id,
			over_head_tank_capacity,
			over_head_tank_type_id,
			holding_tank_capacity,
			holding_tank_type_id,
			flooring_id,
			roofing_id,
			diesel_brooder,
			gas_brooder,
			cool_brooder,
			farm_partition,
			electric_brooder,
			wood_brooder,
			thermometer,
			spray_pump,
			road_facility_id,
			mseb_connection_id,
			feed_room_facility,
			curtain_type_id,
			cross_curtains,
			foggers,
			mortality_disposal_pit,
			generator,
			refrigerator,
			inverter,
			tus_storage_facility,
			thermos,
			out_side_curtains,
			ceiling_curtains,
			center_curtains,
			contract_type_id,
			reasons_for_disc_per,
			district,
			taluka,
			post,
			gat_sr_no,
			area,
			valuation,
			owner_name,
			chick_capacity,
			status_id,
			distance_from_branch,
			distance_from_feed_mill
                
		FROM cbf_farmerenquiry FE
        LEFT JOIN commonbranch B ON B.id = FE.branch_id 
        
        WHERE FE.company_id = p_companyid
        
        ORDER BY FE.id DESC;
END;



CREATE PROCEDURE `spc_cbffarmer_enquiry_select`(
	IN p_id VARCHAR(250),
	IN p_companyid VARCHAR(250)
)
BEGIN
	/*select a.*, DATE_FORMAT(a.enquiry_date,'%d/%m/%Y') as enquiry_date, b.branchname, b.branchcode, c.id as supervisor_id, c.employeename as supervisor_name,
    d.id as shedtype_id, d.shedtype, e.id as status_id, e.refname as status from cbf_farmerenquiry as a 
    left OUTER join branch as b on a.branch_id = b.id
    left OUTER join employee as c on a.supervisor_id = c.id
    left OUTER join cbfshedtype as d on a.shed_type_id = d.id
    left OUTER join `reference` as e on a.status_id = e.id
    where ((p_branchid is null) or (a.branch_id=p_branchid)) AND
    ((p_companyid is null) or (a.company_id=p_companyid))
    order by a.id asc;*/
    
    SELECT id, 
                supervisor_id,
                DATE_FORMAT(enquiry_date,'%d/%m/%Y') as enquiry_date,
                farmer_name,
                farm_name,
                farm_type_id,
                address,
                mobile_no,
                incharge_name,
                shed_type_id,
                property_owner,
                age,
                occupation,
                branch_id,
                line_id,
                rest_period,
                farm_area_length,
                farm_area_width,
                total_area,
                density,
                incharge_contact_no,
                water_facility_id,
                over_head_tank_capacity,
                over_head_tank_type_id,
                holding_tank_capacity,
                holding_tank_type_id,
                flooring_id,
                roofing_id,
                diesel_brooder,
                gas_brooder,
                cool_brooder,
                farm_partition,
                electric_brooder,
                wood_brooder,
                thermometer,
                spray_pump,
                road_facility_id,
                mseb_connection_id,
                feed_room_facility,
                curtain_type_id,
                cross_curtains,
                foggers,
                mortality_disposal_pit,
                generator,
                refrigerator,
                inverter,
                tus_storage_facility,
                thermos,
                out_side_curtains,
                ceiling_curtains,
                center_curtains,
                contract_type_id,
                reasons_for_disc_per,
                district,
                taluka,
                post,
                gat_sr_no,
                area,
                valuation,
                owner_name,
                chick_capacity,
                status_id,
                distance_from_branch,
                distance_from_feed_mill
                
		FROM cbf_farmerenquiry
        
        WHERE id = p_id AND company_id = p_companyid;
END;



CREATE PROCEDURE `spc_cbffarmer_enquiry_withagreement`(
	IN p_companyid INT(11),
    IN p_branchid INT(11)
)
BEGIN
    
    SELECT  FE.id as farmerenquiryid,
			supervisor_id,
			DATE_FORMAT(enquiry_date,'%d/%m/%Y') as enquiry_date,
			farmer_name,
			farm_name,
			farm_type_id,
			address,
			mobile_no,
			incharge_name,
			shed_type_id,
			property_owner,
			age,
			occupation,
			branch_id,
            B.branchname,
            B.branchcode,
			line_id,
			rest_period,
			farm_area_length,
			farm_area_width,
			total_area,
			density,
			incharge_contact_no,
			water_facility_id,
			over_head_tank_capacity,
			over_head_tank_type_id,
			holding_tank_capacity,
			holding_tank_type_id,
			flooring_id,
			roofing_id,
			diesel_brooder,
			gas_brooder,
			cool_brooder,
			farm_partition,
			electric_brooder,
			wood_brooder,
			thermometer,
			spray_pump,
			road_facility_id,
			mseb_connection_id,
			feed_room_facility,
			curtain_type_id,
			cross_curtains,
			foggers,
			mortality_disposal_pit,
			generator,
			refrigerator,
			inverter,
			tus_storage_facility,
			thermos,
			out_side_curtains,
			ceiling_curtains,
			center_curtains,
			contract_type_id,
			reasons_for_disc_per,
			district,
			taluka,
			post,
			gat_sr_no,
			area,
			valuation,
			owner_name,
			chick_capacity,
			status_id,
			distance_from_branch,
			distance_from_feed_mill,
            FA.partyid
                
		FROM cbf_farmerenquiry FE
        LEFT JOIN cbf_farmeragreement FA ON FA.farmerenquiryid = FE.id
        LEFT JOIN commonbranch B ON B.id = FE.branch_id 
        
        WHERE FE.company_id = p_companyid
        AND FA.id is not null 
        AND FA.statusid = 2062
        AND FE.branch_id = p_branchid
        
        ORDER BY FE.id DESC;
END;



CREATE PROCEDURE `spc_cbffarmer_enquiry_withoutagreement`(
	IN p_companyid VARCHAR(250)
)
BEGIN
    
    SELECT FE.id, 
			supervisor_id,
			DATE_FORMAT(enquiry_date,'%d/%m/%Y') as enquiry_date,
			farmer_name,
			farm_name,
			farm_type_id,
			address,
			mobile_no,
			incharge_name,
			shed_type_id,
			property_owner,
			age,
			occupation,
			branch_id,
            B.branchname,
            B.branchcode,
			line_id,
			rest_period,
			farm_area_length,
			farm_area_width,
			total_area,
			density,
			incharge_contact_no,
			water_facility_id,
			over_head_tank_capacity,
			over_head_tank_type_id,
			holding_tank_capacity,
			holding_tank_type_id,
			flooring_id,
			roofing_id,
			diesel_brooder,
			gas_brooder,
			cool_brooder,
			farm_partition,
			electric_brooder,
			wood_brooder,
			thermometer,
			spray_pump,
			road_facility_id,
			mseb_connection_id,
			feed_room_facility,
			curtain_type_id,
			cross_curtains,
			foggers,
			mortality_disposal_pit,
			generator,
			refrigerator,
			inverter,
			tus_storage_facility,
			thermos,
			out_side_curtains,
			ceiling_curtains,
			center_curtains,
			contract_type_id,
			reasons_for_disc_per,
			district,
			taluka,
			post,
			gat_sr_no,
			area,
			valuation,
			owner_name,
			chick_capacity,
			status_id,
			distance_from_branch,
			distance_from_feed_mill
                
		FROM cbf_farmerenquiry FE
        LEFT JOIN cbf_farmeragreement FA ON FA.farmerenquiryid = FE.id
        LEFT JOIN commonbranch B ON B.id = FE.branch_id 
        
        WHERE FE.company_id = p_companyid
        AND FA.id is null 
		AND FE.status_id = 1722
        
        ORDER BY FE.id DESC;
END;



CREATE PROCEDURE `spc_cbffarmparameter_byparametertype`(
  IN p_parametertypeid INT,
  IN p_companyid INT
)
BEGIN
	SELECT id,
		   parametertypeid,
		   parametername,
           requiredratio,
           ismandatory
            
    FROM  cbffarmparameter 
    WHERE 
          parametertypeid = p_parametertypeid
          AND companyid = p_companyid;
END;



CREATE PROCEDURE `spc_cbffarmparameter_delete`(
  IN p_id INT,
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN
	DELETE FROM cbffarmparameter WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'cbffarmparameter', p_id, 'delete', p_userid);

END;



CREATE PROCEDURE `spc_cbffarmparameter_save`(
	IN p_id INT(11),
    IN p_parametertypeid INT(11),
    IN p_parametername VARCHAR(200),
    IN p_requiredratio VARCHAR(50),
    IN p_ismandatory TINYINT(4),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbffarmparameter
				(parametertypeid, parametername, requiredratio, ismandatory, companyid)
			VALUES 
				(p_parametertypeid, p_parametername, p_requiredratio, p_ismandatory, p_companyid);
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE cbffarmparameter
				SET parametertypeid = p_parametertypeid, 
                parametername = p_parametername, 
                requiredratio = p_requiredratio,
                ismandatory = p_ismandatory,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'cbffarmparameter', out_id, @action, p_userid);

    

END;



CREATE PROCEDURE `spc_cbffarmparameter_search`(
    IN p_companyid INT,
    IN p_parametertypeid INT
)
BEGIN

	SELECT 
		 id,
         parametername,
         requiredratio,
         ismandatory
	FROM
		cbffarmparameter 
	
	WHERE
		companyid = p_companyid AND
        parametertypeid = p_parametertypeid;
END;



CREATE PROCEDURE `spc_cbffarmparameter_select`(
  IN p_id INT 
)
BEGIN
	SELECT id,
		   parametertypeid,
		   parametername,
           requiredratio,
           ismandatory
            
    FROM  cbffarmparameter 
    WHERE 
          id = p_id;
END;



CREATE PROCEDURE `spc_cbffarmparameter_shedready`(
	IN p_companyid INT
)
BEGIN

	SELECT id as cbfparameterid,
		   parametertypeid,
		   parametername,
           requiredratio,
           ismandatory,
           0 as isapplied,
           null as remark
            
    FROM  cbffarmparameter 
    WHERE 
          companyid = p_companyid;
END;



CREATE PROCEDURE `spc_cbfincentiveschemedetail_search`(
	IN p_incentiveschemeid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	-- employee position
    
	SELECT ISE.id,
		   ISE.incentiveschemeid,
           ISE.employeeid,
           E.employeename,
           ISE.position,
           ISE.percentage
           
	FROM cbf_incentivescheme_employeeorposition ISE
    LEFT JOIN employee E ON E.id = ISE.employeeid
    
    WHERE ISE.incentiveschemeid = p_incentiveschemeid
    AND ISE.companyid = p_companyid;

	-- rate per kg on eef
    
    SELECT ISR.id,
		   ISR.incentiveschemeid, 
           ISR.fromeef, 
           ISR.toeef, 
           ISR.rateperkg
    
    FROM cbf_incentivescheme_rateperkgoneef ISR
    
    WHERE ISR.incentiveschemeid = p_incentiveschemeid
    AND ISR.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfincentivescheme_delete`(
	IN p_id INT(11)
)
BEGIN

    DELETE FROM cbf_incentivescheme_rateperkgoneef WHERE incentiveschemeid = p_id;
    DELETE FROM cbf_incentivescheme_employeeorposition WHERE incentiveschemeid = p_id;
    DELETE FROM cbf_incentivescheme WHERE id = p_id;

END;



CREATE PROCEDURE `spc_cbfincentivescheme_employeeorposition_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_incentivescheme_employeeorposition WHERE id = p_id;

END;



CREATE PROCEDURE `spc_cbfincentivescheme_employeeorposition_save`(
	IN p_id INT(11),
	IN p_incentiveschemeid INT(11),
	IN p_employeeid INT(11),
	IN p_position VARCHAR(100),
	IN p_percentage DECIMAL(9,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_incentivescheme_employeeorposition 
				(id, incentiveschemeid, employeeid, `position`, percentage, companyid)
			VALUES 
				(p_id, p_incentiveschemeid, p_employeeid, p_position, p_percentage, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_incentivescheme_employeeorposition
				SET incentiveschemeid = p_incentiveschemeid,
					employeeid = p_employeeid,
                    `position` = p_position,
                    percentage = p_percentage,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_incentivescheme_employeeorposition', out_id, @action, p_userid);



END;



CREATE PROCEDURE `spc_cbfincentivescheme_employeeorposition_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT ISE.id,
		   ISE.incentiveschemeid,
           ISE.employeeid,
           E.employeename,
           ISE.position,
           ISE.percentage
           
	FROM cbf_incentivescheme_employeeorposition ISE
    LEFT JOIN employee E ON E.id = ISE.employeeid
    
    WHERE ISE.id = p_id
    AND ISE.companyid = p_companyid;
    

END;



CREATE PROCEDURE `spc_cbfincentivescheme_rateperkgoneef_delete`(
	 IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_incentivescheme_rateperkgoneef WHERE id = p_id;

END;



CREATE PROCEDURE `spc_cbfincentivescheme_rateperkgoneef_save`(
	IN p_id INT(11),
    IN p_incentiveschemeid INT(11),
    IN p_fromeef DECIMAL(9,3),
    IN p_toeef DECIMAL(9,3),
    IN p_rateperkg DECIMAL(9,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_incentivescheme_rateperkgoneef 
				(id, incentiveschemeid, fromeef, toeef, rateperkg, companyid)
			VALUES 
				(p_id, p_incentiveschemeid, p_fromeef, p_toeef, p_rateperkg, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_incentivescheme_rateperkgoneef
				SET incentiveschemeid = p_incentiveschemeid,
					fromeef = p_fromeef,
                    toeef = p_toeef,
                    rateperkg = p_rateperkg,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_incentivescheme_rateperkgoneef', out_id, @action, p_userid);


END;



CREATE PROCEDURE `spc_cbfincentivescheme_rateperkgoneef_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT ISR.id,
		   ISR.incentiveschemeid,
           ISR.fromeef,
           ISR.toeef,
           ISR.rateperkg,
           ISR.companyid
           
	FROM cbf_incentivescheme_rateperkgoneef ISR
    
    WHERE ISR.id = p_id
    AND ISR.companyid = p_comanyid;

END;



CREATE PROCEDURE `spc_cbfincentivescheme_save`(
	IN p_id INT(11),
    IN p_schemeapplyby INT(11),
	IN p_schemename VARCHAR(100),
	IN p_breeditemid INT(11),
	IN p_branchid INT(11),
	IN p_fromdate DATE,
	IN p_todate DATE,
	IN p_applyto VARCHAR(150),
	IN p_isbyfunctionapplicable TINYINT(4),
    IN p_applybyemployee TINYINT(4),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_incentivescheme 
				(id, schemeapplyby, schemename, breeditemid, branchid, fromdate, 
                todate, applyto, isbyfunctionapplicable, applybyemployee, companyid)
			VALUES 
				(p_id, p_schemeapplyby, p_schemename, p_breeditemid, p_branchid, p_fromdate, 
                p_todate, p_applyto, p_isbyfunctionapplicable, p_applybyemployee, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbf_incentivescheme
				SET schemeapplyby = p_schemeapplyby,
					schemename = p_schemename,
					breeditemid = p_breeditemid,
					branchid = p_branchid,
					fromdate = p_fromdate, 
					todate = p_todate,
					applyto = p_applyto,
					isbyfunctionapplicable = p_isbyfunctionapplicable,
                    applybyemployee = p_applybyemployee,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_incentivescheme', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_cbfincentivescheme_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT ISM.id,
		   ISM.schemeapplyby,
		   ISM.schemename,
           ISM.breeditemid,
           I.itemname as breeditemname,
		   ISM.branchid,         
           B.branchname,
           DATE_FORMAT(ISM.fromdate,'%d/%m/%Y') as fromdate,
           DATE_FORMAT(ISM.todate,'%d/%m/%Y') as todate,
           ISM.applyto,
           ISM.isbyfunctionapplicable,
           ISM.applybyemployee
           
	FROM cbf_incentivescheme ISM
    LEFT JOIN item I ON I.id = ISM.breeditemid
    LEFT JOIN branch B ON B.id = ISM.branchid
    
    WHERE ISM.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfincentivescheme_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT ISM.id,
		   ISM.schemeapplyby,
		   ISM.schemename,
           ISM.breeditemid,
           I.itemname,
           ISM.branchid,
           B.branchname,
           ISM.fromdate,
           ISM.todate,
           ISM.applyto,
           ISM.isbyfunctionapplicable,
           ISM.applybyemployee
           
	FROM cbf_incentivescheme ISM
    
    WHERE ISM.id = p_id
    AND ISM.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfliftingscheduledetails_delete`(
  IN p_id INT,
  IN p_company_id INT
)
BEGIN
	DELETE FROM cbf_lifting_schedule_details WHERE id = p_id AND company_id = p_company_id;
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'cbf_chick_placement', p_id, 'delete', p_userid);

END;



CREATE PROCEDURE `spc_cbfliftingscheduledetails_save`(
	IN p_id INT(11),
    IN p_lifting_schedule_id INT(11),
    IN p_order_id INT(11),
    IN p_company_id INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_lifting_schedule_details(
                lifting_schedule_id,
                order_id,
                company_id
    )
			VALUES 
				(
                p_lifting_schedule_id,
                p_order_id,
                p_company_id
                );
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE cbf_lifting_schedule_details
				SET lifting_schedule_id = p_lifting_schedule_id,
                order_id = p_order_id,
                company_id = p_company_id,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND company_id = p_company_id;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   CALL spc_commonlog_save(p_company_id, 'cbf_lifting_schedule_details', out_id, @action, p_userid);

    

END;



CREATE PROCEDURE `spc_cbfliftingscheduledetails_search`(
	IN p_company_id INT
)
BEGIN
	
	SELECT * FROM cbf_lifting_schedule_details WHERE company_id = p_company_id;
END;



CREATE PROCEDURE `spc_cbfliftingscheduledetails_select`(
  IN p_id INT 
)
BEGIN
	SELECT * FROM cbf_lifting_schedule_details WHERE id = p_id;
END;



CREATE PROCEDURE `spc_cbfliftingschedule_delete`(
  IN p_id INT,
  IN p_company_id INT
)
BEGIN
	DELETE FROM cbf_lifting_schedule WHERE id = p_id AND company_id = p_company_id;
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'cbf_chick_placement', p_id, 'delete', p_userid);

END;



CREATE PROCEDURE `spc_cbfliftingschedule_save`(
	IN p_id INT(11),
    IN p_branch_id INT(11),
    IN p_schedule_date DATE,
    IN p_status_id  INT(11),
    IN p_company_id INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_lifting_schedule(
                branch_id,
                schedule_date,
                status_id,
                company_id
    )
			VALUES 
				(
                p_branch_id,
                p_schedule_date,
                p_status_id,
                p_company_id
                );
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE cbf_lifting_schedule
				SET branch_id = p_branch_id,
                schedule_date = p_schedule_date,
                status_id = p_status_id,
                company_id = p_company_id,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND company_id = p_company_id;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   CALL spc_commonlog_save(p_company_id, 'cbf_batch_details', out_id, @action, p_userid);

    

END;



CREATE PROCEDURE `spc_cbfliftingschedule_search`(
	IN p_company_id INT
)
BEGIN
	
	SELECT * FROM cbf_lifting_schedule WHERE company_id = p_company_id;
END;



CREATE PROCEDURE `spc_cbfliftingschedule_select`(
  IN p_id INT 
)
BEGIN
	SELECT * FROM  cbf_lifting_schedule WHERE id = p_id;
END;



CREATE PROCEDURE `spc_cbfline_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM cbf_line WHERE id = p_id;

END;



CREATE PROCEDURE `spc_cbfline_save`(
   IN p_id INT(11),
   IN p_branchid INT(11),
   IN p_linename VARCHAR(100),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF EXISTS(
            SELECT linename from cbf_line where LOWER(linename) = LOWER(p_linename)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    
		BEGIN
		
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO cbf_line 
						(id, branchid, linename, companyid)
					VALUES 
						(p_id, p_branchid, p_linename, p_companyid);
			  SET @action = 'INSERT';
			ELSE
			
				UPDATE cbf_line
						SET branchid = p_branchid,
							linename = p_linename,
							companyid = p_companyid,
							id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
				   SET @action = 'UPDATE';     
						
						
			END IF;
			
			SELECT LAST_INSERT_ID() INTO out_id; 
			
			-- record log
			CALL spc_commonlog_save(p_companyid, 'cbf_line', out_id, @action, p_userid);

		END;
     
   END IF;

END;



CREATE PROCEDURE `spc_cbfline_search`(
	IN p_companyid INT(11),
    IN p_branchid INT(11)
)
BEGIN
	
    SELECT L.id,
		   L.branchid,
           B.branchname,
           L.linename,
           B.branchcode,
		   fnc_supervisorallocation_employee(L.id,p_companyid) as employeename
	
    FROM cbf_line L
    LEFT JOIN branch B ON B.id = L.branchid
    
    WHERE 
    ((p_branchid is null) or (L.branchid=p_branchid))
    AND L.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfline_select`(
	IN p_companyid INT(11),
    IN p_id INT(11),
    IN p_branchid INT(11)
)
BEGIN

	SELECT L.id,
		   L.branchid,
           B.branchname,
           L.linename,
           B.branchcode
	
    FROM cbf_line L
    LEFT JOIN branch B ON B.id = L.branchid
    
    WHERE L.id = p_id
    AND L.branchid = p_branchid
    AND L.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfprocurementscheduledetail_bybatchid`(
	IN p_batchid INT(11),
    IN p_companyid INT(11)
)
BEGIN

		SELECT PSD.id as procurementscheduledetailid,
			   PSD.procurementscheduleid as create_batch_schedule_id,
			   PSD.cbfshedid as shed_id,
			   SDD.shed_name,
			   PSD.chicksitemid,
			   I.itemname,
			   PSD.chicksproposalquantity,
			   PSD.sourceid,
               REF.refname as sourcename,
			   PSD.requestid,
			   PSD.batchid as batch_id,
			   CB.farmer_enquiry_id,
               CB.batch_qty,
               FE.farmer_name,
               FE.branch_id,
               B.branchname,
               fnc_cbfPlacementMaterialStatus(p_batchid, p_companyid) as materialreceiptstatus,
               fnc_cbfPlacementTransactionId(PSD.sourceid, PSD.requestid) as request_id,
               DATE_FORMAT(now(),'%d/%m/%Y') as placement_date,
               DATE_FORMAT(now(),'%d/%m/%Y') as first_day_date,
               fnc_cbffreechicks(PSD.sourceid, PSD.requestid, CB.batch_qty) as free_qty,
               0 as shortage,
               0 as mortality,
               0 as culls,
               0 as week_chicks,
               0 as std_lifting_age
			   
		FROM cbf_procurementscheduledetail PSD
		LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = PSD.cbfshedid
		LEFT JOIN item I ON I.id = PSD.chicksitemid
		LEFT JOIN cbf_batch_details CB ON CB.id = PSD.batchid
        LEFT JOIN `reference` REF ON REF.id = PSD.sourceid
        LEFT JOIN cbf_farmerenquiry FE ON FE.id = CB.farmer_enquiry_id
        LEFT JOIN commonbranch B ON B.id = FE.branch_id
		
		WHERE PSD.batchid = p_batchid
		AND PSD.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_cbfprocurementscheduledetail_delete`(
	IN p_id INT,
    IN p_company_id INT
)
BEGIN
	DELETE FROM cbf_procurementscheduledetail WHERE id = p_id AND companyid = p_companyid;
END;



CREATE PROCEDURE `spc_cbfprocurementscheduledetail_save`(
	IN p_id INT,
    IN p_procurementscheduleid INT,
    IN p_shedreadyid INT,
    IN p_cbfshedid INT,
    IN p_capacity INT,
    IN p_chicksitemid INT,
    IN p_chicksproposalquantity INT,
    IN p_sourceid INT,
    IN p_requestid INT,
    IN p_batchid INT,
    IN p_remark VARCHAR(150),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
		INSERT INTO cbf_procurementscheduledetail
				(id, 
                procurementscheduleid,
                shedreadyid,
                cbfshedid,
                capacity,
                chicksitemid,
                chicksproposalquantity,
                sourceid,
                requestid,
                batchid,
                remark,
                companyid)
			VALUES 
				(p_id,
                p_procurementscheduleid,
                p_shedreadyid,
                p_cbfshedid,
                p_capacity,
                p_chicksitemid,
                p_chicksproposalquantity,
                p_sourceid,
                p_requestid,
                p_batchid,
                p_remark,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE cbf_procurementscheduledetail
			SET procurementscheduleid = p_procurementscheduleid,
                shedreadyid = p_shedreadyid,
                cbfshedid = p_cbfshedid,
                capacity = p_capacity,
                chicksitemid = p_chicksitemid,
                chicksproposalquantity = p_chicksproposalquantity,
                sourceid = p_sourceid,
                requestid = p_requestid,
                batchid = p_batchid,
                remark = p_remark,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
     -- update CBF shed status 2083 = 'scheduled'
    UPDATE cbf_farmerenquiry_sheddimensiondetail SET statusid = 2083 where id = p_cbfshedid;
    
    -- get procurement schedule status
    SET @statusid = null;
    
    SET @farmerenquiryid = null;
    
    SELECT statusid INTO @statusid FROM cbf_procurementschedule CPS WHERE CPS.id = p_procurementscheduleid;
    
    SELECT farmerenquiryid INTO @farmerenquiryid FROM cbf_farmerenquiry_sheddimensiondetail CSD WHERE CSD.id = p_cbfshedid;
    
    IF(@statusid = 3002)THEN -- schedule is approved
    
		-- create CBF batch
        IF(out_id > 0)THEN
        
			SET @batch_id = null;
            CALL spc_cbfbatchdetails_save(
				null, @farmerenquiryid,
                null, p_chicksproposalquantity, null,
                null, p_chicksitemid, p_procurementscheduleid, null,
                (SELECT id FROM cbf_shedready WHERE id = p_shedreadyid ), 
                null, null, null, null, (SELECT density FROM cbf_farmerenquiry WHERE id = @farmerenquiryid),
                null, (SELECT `date` FROM cbf_procurementschedule WHERE id = p_procurementscheduleid), null, null, null,
                null, 3021, null, null,
                null, null, null, null,
                null, 'CBF batch', p_companyid, p_userid,
                @batch_id
            );
            
            IF(@batch_id > 0) THEN
				UPDATE cbf_procurementscheduledetail
                SET batchid = @batch_id
                WHERE id = out_id;
			END IF;
            
        END IF;
    
		IF(out_id > 0 AND p_sourceid = 261)THEN -- source is OWN then do material request
			
            SET @out_materialRequestId = null;
			SET @out_materialrequestdetailid = null;
          
		    CALL spc_materialrequest_save(
				null, 503, 502, 444, now(),
				(SELECT schedulefordate FROM cbf_procurementschedule WHERE id = p_procurementscheduleid),
				'Chicks request from system',
				-- (SELECT warehouseid FROM setter WHERE id = p_setterid), 
                -- (SELECT warehousebinid FROM setter WHERE id = p_setterid),
                NULL,
                NULL,
                null, null,
				null,
				p_companyid ,
				p_userid,
                @out_materialRequestId
			);
		
            CALL spc_materialrequestdetail_save(
				null, 
                @out_materialRequestId,
                p_chicksitemid,
                (SELECT itemname FROM item WHERE id = p_chicksitemid),
                p_chicksproposalquantity,
                (SELECT itemunitid FROM item WHERE id = p_chicksitemid),
                p_companyid,
				p_userid,
                @out_materialrequestdetailid
			);
            
            IF(@out_materialRequestId > 0) THEN
				UPDATE cbf_procurementscheduledetail
                SET requestid = @out_materialRequestId
                WHERE id = out_id;
			END IF;
            
			SET @out_purchaseRequestId = null;
			SET @out_purchaserequestdetailid = null;
          
		ELSE IF(out_id > 0 AND p_sourceid = 262) THEN
				 CALL spc_purchaserequest_save(
					null,
					null,
					543,
					now(),
					p_userid,
					null,
					'Chicks purchase request',
					92,
					null,
					null,
					p_companyid,
					p_userid,
					@out_purchaseRequestId
				 );
				 
				 CALL spc_purchaserequestdetail_save(
					null,
					@out_purchaseRequestId,
					p_chicksitemid,
					(SELECT itemname FROM item WHERE id = p_chicksitemid),
					p_chicksproposalquantity,
					(SELECT itemunitid FROM item WHERE id = p_chicksitemid),
					1641,
					p_companyid,
					p_userid,
					@out_purchaserequestdetailid
				 );
				 
				IF(@out_purchaseRequestId > 0) THEN
					UPDATE cbf_procurementscheduledetail
					SET requestid =@out_purchaseRequestId
					WHERE id = out_id;
				END IF;
			END IF;
		END IF;
    
    END IF;
    
END;



CREATE PROCEDURE `spc_cbfprocurementscheduledetail_search`(
	IN p_procurementscheduleid INT,
    IN p_companyid INT
)
BEGIN
	SELECT CPSD.id,
		   CPSD.procurementscheduleid,
           CPSD.shedreadyid,
           CPSD.cbfshedid,
           SDD.shed_name,
           CPSD.capacity,
           CPSD.chicksitemid,
           I.itemname,
           CPSD.chicksproposalquantity,
           CPSD.sourceid,
           CPSD.batchid,
           CPSD.remark,
           CPSD.requestid,
           REF.refname as scheduleSts
    
    FROM cbf_procurementscheduledetail CPSD
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CPSD.cbfshedid
    LEFT JOIN `reference` REF ON REF.id = SDD.statusid
    LEFT JOIN item I ON I.id = CPSD.chicksitemid
    
    WHERE CPSD.procurementscheduleid = p_procurementscheduleid AND CPSD.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_cbfprocurementscheduledetail_select`(
	IN p_id INT,
	IN p_companyid INT	
)
BEGIN
	SELECT CPSD.id,
		   CPSD.procurementscheduleid,
           CPSD.shedreadyid,
           CPSD.cbfshedid,
           SDD.shed_name,
           CPSD.capacity,
           CPSD.chicksitemid,
           I.itemname,
           CPSD.chicksproposalquantity,
           CPSD.sourceid,
           CPSD.batchid,
           CPSD.remark,
           CPSD.requestid
    
    FROM cbf_procurementscheduledetail CPSD
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = CPSD.cbfshedid
    LEFT JOIN item I ON I.id = CPSD.chicksitemid 
    
    WHERE CPSD.id = p_id AND CPSD.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_cbfprocurementschedule_delete`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN
	DELETE FROM cbf_procurementschedule WHERE id = p_id;
END;



CREATE PROCEDURE `spc_cbfprocurementschedule_save`(
	IN p_id INT,
    IN p_date DATE,
    IN p_schedulefordate DATE,
    IN p_totalshedcapacity INT,
    IN p_totalchicksquantity INT,
    IN p_approvedby INT,
    IN p_approveddate DATE,
    IN p_remark VARCHAR(150),
    IN p_createdby INT,
    IN p_branchid INT,
    IN p_statusid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
		INSERT INTO cbf_procurementschedule
				(id, 
                `date`,
                schedulefordate,
                totalshedcapacity,
                totalchicksquantity,
                approvedby,
                approveddate,
                remark,
                createdby,
                branchid,
                statusid,
                companyid)
			VALUES 
				(p_id,
                p_date,
                p_schedulefordate,
                p_totalshedcapacity,
                p_totalchicksquantity,
                p_approvedby,
                p_approveddate,
                p_remark,
                p_createdby,
                p_branchid,
                p_statusid,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE cbf_procurementschedule
			SET `date` = p_date,
                schedulefordate = p_schedulefordate,
                totalshedcapacity = p_totalshedcapacity,
                totalchicksquantity = p_totalchicksquantity,
                approvedby = p_approvedby,
                approveddate = p_approveddate,
                remark = p_remark,
                createdby = p_createdby,
                branchid = p_branchid,
                statusid = p_statusid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
END;



CREATE PROCEDURE `spc_cbfprocurementschedule_search`(
	IN p_companyid VARCHAR(250)
)
BEGIN
	SELECT  CPS.id, 
			`date`,
			DATE_FORMAT(CPS.schedulefordate,'%d/%m/%Y') as schedulefordate,
			CPS.totalshedcapacity,
			CPS.totalchicksquantity,
			CPS.approvedby,
			CPS.approveddate,
			CPS.remark,
			CPS.createdby,
			CPS.statusid, 
            REF.refname,
            B.branchname,
            B.branchcode,
            CPS.branchid
	
    FROM cbf_procurementschedule CPS
    LEFT JOIN commonbranch B ON B.id = CPS.branchid
    LEFT JOIN `reference` REF ON REF.id = CPS.statusid
    
    WHERE CPS.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_cbfprocurementschedule_select`(
	IN p_id INT,
	IN p_companyid INT	
)
BEGIN
	SELECT CPS.id, 
			`date`,
			DATE_FORMAT(CPS.schedulefordate,'%d/%m/%Y') as schedulefordate,
			CPS.totalshedcapacity,
			CPS.totalchicksquantity,
			CPS.approvedby,
			CPS.approveddate,
			CPS.remark,
			CPS.createdby,
			CPS.statusid, 
            REF.refname,
            B.branchname,
            B.branchcode,
            CPS.branchid
	
    FROM cbf_procurementschedule CPS
    LEFT JOIN commonbranch B ON B.id = CPS.branchid
    LEFT JOIN `reference` REF ON REF.id = CPS.statusid
    
    WHERE CPS.id = p_id AND CPS.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_cbfreasons_search`(
  IN p_companyid INT 
)
BEGIN
	SELECT CR.id,
		   typeid,
           R.refname as reasontype,
           reason
            
    FROM  cbf_reasons CR
    LEFT JOIN `reference` R ON CR.typeid = R.id
    
    WHERE 
          CR.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_cbfreasons_select`(
  IN p_id INT 
)
BEGIN
	SELECT CR.id ,
		   CR.typeid,
           R.refname as reasontype,
           reason,
           companyid
            
    FROM  cbf_reasons CR
    LEFT JOIN `reference` R ON BR.typeid = R.id
    WHERE 
          CR.id = p_id;
END;



CREATE PROCEDURE `spc_cbfreason_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN
  	DELETE FROM cbf_reasons WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'cbf_reasons', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_cbfreason_save`(
	IN p_id INT,
    IN p_typeid INT,
	IN p_reason VARCHAR(300),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_reasons 
				(typeid, reason, companyid)
			VALUES 
				(p_typeid, p_reason, p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE cbf_reasons
			SET 
				typeid = p_typeid, 
                reason = p_reason, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';   
    
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_reasons', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_cbfscheduledetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM cbfscheduledetail WHERE id = p_id;
END;



CREATE PROCEDURE `spc_cbfscheduledetail_save`(
    IN p_id INT,
    IN p_cbfscheduleid INT(11),
    IN p_itemid INT(11),
    IN p_fromage TINYINT(4),
    IN p_toage TINYINT(4),
    IN p_ageindays TINYINT(4),
    IN p_method VARCHAR(200),
    IN p_quantity DECIMAL(8,3),
    IN p_itemunitid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbfscheduledetail 
				(id, 
                cbfscheduleid, 
                itemid, 
                fromage, 
                toage, 
                ageindays, 
                method, 
                quantity, 
                itemunitid, 
                companyid)
			VALUES 
				(p_id, 
                p_cbfscheduleid, 
                p_itemid, 
                p_fromage, 
                p_toage, 
                p_ageindays, 
                p_method, 
                p_quantity, 
                p_itemunitid, 
                p_companyid);
		
        SET @action = 'INSERT';

	ELSE
    
		UPDATE cbfscheduledetail
			SET cbfscheduleid = p_cbfscheduleid, 
				itemid = p_itemid,
                fromage = p_fromage,
                toage = p_toage,
                ageindays = p_ageindays,
                method = p_method,
                quantity = p_quantity,
                itemunitid = p_itemunitid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
             SET @action = 'UPDATE';   
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	-- record log
   CALL spc_commonlog_save(p_companyid, 'cbfscheduledetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_cbfscheduledetail_select`(
	IN p_cbfscheduleid INT
)
BEGIN

	SELECT
		 CSD.id,
         cbfscheduleid,
		 CSD.itemid,
         fromage,
         toage,
         ageindays,
         method,
         quantity,
         CSD.itemunitid,
         I.itemname,
         I.itemcode,
         R.refname as itemunitname
        
	FROM
		cbfscheduledetail CSD
        LEFT JOIN item I ON CSD.itemid = I.id
        LEFT JOIN `reference` R ON I.itemunitid = R.id
        
	WHERE
		cbfscheduleid = p_cbfscheduleid;

END;



CREATE PROCEDURE `spc_cbfschedule_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM cbfscheduledetail WHERE cbfscheduleid = p_id;
	DELETE FROM cbfschedule WHERE id = p_id;
END;



CREATE PROCEDURE `spc_cbfschedule_save`(
    IN p_id INT,
    IN p_schedulename VARCHAR(200),
    IN p_cbfscheduletypeid INT(11),
    IN p_breednameid INT(11),
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_locationids VARCHAR(200),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbfschedule 
				(id, 
                schedulename, 
                cbfscheduletypeid, 
                breednameid, 
                fromdate, 
                todate, 
                locationids, 
                companyid)
			VALUES 
				(p_id, 
                p_schedulename, 
                p_cbfscheduletypeid, 
                p_breednameid, 
                p_fromdate, 
                p_todate, 
                p_locationids, 
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE cbfschedule
			SET schedulename = p_schedulename, 
				cbfscheduletypeid = p_cbfscheduletypeid,
                breednameid = p_breednameid,
                fromdate = p_fromdate,
                todate = p_todate,
                locationids = p_locationids,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'cbfschedule', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_cbfschedule_search`(
    IN p_companyid INT,
    IN p_scheduletypeid INT
)
BEGIN
    
    SELECT
		 CS.id,
         CS.schedulename,
		 CS.cbfscheduletypeid,
         CS.breednameid,
         I.itemname,
         DATE_FORMAT(CS.fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(CS.todate,'%d/%m/%Y') as todate,
         locationids
        
	FROM
		cbfschedule CS
        LEFT JOIN item I ON I.id = CS.breednameid
   	
	WHERE
		CS.companyid = p_companyid AND 
        cbfscheduletypeid = p_scheduletypeid
        
	ORDER BY id DESC;
END;



CREATE PROCEDURE `spc_cbfschedule_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 CS.id,
         CS.schedulename,
		 CS.cbfscheduletypeid,
         CS.breednameid,
         I.itemname as breeditemname,
         DATE_FORMAT(CS.fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(CS.todate,'%d/%m/%Y') as todate,
         locationids
        
	FROM
		cbfschedule CS
        LEFT JOIN item I ON I.id = CS.breednameid
	WHERE
		CS.id = p_id;	
END;



CREATE PROCEDURE `spc_cbfseeting_search`(
IN p_companyid INT
)
BEGIN
 
    SELECT
        CS.id,
		CS.defaultchickitemid,
		CS.standardweight,
		CS.shedrestperiod,
		CS.defaultchickcost,
		CS.labourcharge,
		CS.overheadcost,
		CS.defaultcbfwarehouseid,
		CS.feeditemgroupids,
		CS.medicineitemgroupids,
		CS.vaccineitemgroupids,
		CS.vitaminitemgroupids,
		CS.breeditemgroupids,
		CS.chicksitemgroupids,
		I1.itemcode as femaleitemcode,
        I1.itemname as defaultchickitemname,
		W.warehousename as defaultcbfwarehousename,
        CS.supplierledgerid,
        COA.coaname as supplierledgername,
        COA.glcode as supplierglcode
     
    FROM
		cbfsetting CS
            LEFT JOIN item I1 ON CS.defaultchickitemid = I1.id
            LEFT JOIN warehouse W ON W.id = CS.defaultcbfwarehouseid
            LEFT JOIN chartofaccount COA ON COA.id = CS.supplierledgerid
    
	WHERE
		CS.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_cbfsetting_save`(
    IN p_id INT(11),
	IN p_defaultchickitemid INT(11),
	IN p_standardweight DECIMAL(9,3),
	IN p_shedrestperiod INT(11),
	IN p_defaultchickcost DECIMAL(9,3),
	IN p_labourcharge DECIMAL(9,3),
	IN p_overheadcost DECIMAL(9,3),
	IN p_defaultcbfwarehouseid INT(11),
	IN p_feeditemgroupids VARCHAR(200),
	IN p_medicineitemgroupids VARCHAR(200),
	IN p_vaccineitemgroupids VARCHAR(200),
	IN p_vitaminitemgroupids VARCHAR(200),
	IN p_breeditemgroupids VARCHAR(200),
	IN p_chicksitemgroupids VARCHAR(200),
    IN p_supplierledgerid INT(11),
	IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbfsetting 
				(
                defaultchickitemid,
				standardweight,
				shedrestperiod,
				defaultchickcost,
				labourcharge,
				overheadcost,
				defaultcbfwarehouseid,
				feeditemgroupids,
				medicineitemgroupids,
				vaccineitemgroupids,
				vitaminitemgroupids,
				breeditemgroupids,
				chicksitemgroupids,
                supplierledgerid,
                companyid
              )
			VALUES 
				(
                    p_defaultchickitemid,
					p_standardweight,
					p_shedrestperiod,
					p_defaultchickcost,
					p_labourcharge,
					p_overheadcost,
					p_defaultcbfwarehouseid,
					p_feeditemgroupids,
					p_medicineitemgroupids,
					p_vaccineitemgroupids,
					p_vitaminitemgroupids,
					p_breeditemgroupids,
					p_chicksitemgroupids,
                    p_supplierledgerid,
					p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbfsetting
				SET defaultchickitemid = p_defaultchickitemid,
					standardweight = p_standardweight,
					shedrestperiod = p_shedrestperiod,
					defaultchickcost = p_defaultchickcost,
					labourcharge = p_labourcharge,
					overheadcost = p_overheadcost,
					defaultcbfwarehouseid = p_defaultcbfwarehouseid,
					feeditemgroupids = p_feeditemgroupids,
					medicineitemgroupids = p_medicineitemgroupids,
					vaccineitemgroupids = p_vaccineitemgroupids,
					vitaminitemgroupids = p_vitaminitemgroupids,
					breeditemgroupids = p_breeditemgroupids,
					chicksitemgroupids = p_chicksitemgroupids,
                    supplierledgerid = p_supplierledgerid,
					companyid = p_companyid,
				    id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbfsetting', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_cbfshedreadydetail_delete`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	DELETE FROM cbf_shedreadydetail WHERE id = p_id AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfshedreadydetail_save`(
	IN p_id INT,
	IN p_cbfshedreadyid INT,
	IN p_parametertypeid INT,
	IN p_shedparameterid INT,
	IN p_isapplied TINYINT,
	IN p_remark VARCHAR(200),
	IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_shedreadydetail
				(cbfshedreadyid, parametertypeid, shedparameterid, isapplied,
					remark, companyid)
			VALUES 
				(p_cbfshedreadyid, p_parametertypeid, p_shedparameterid, p_isapplied,
					p_remark, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE cbf_shedreadydetail
			SET 
				cbfshedreadyid = p_cbfshedreadyid, 
                parametertypeid = p_parametertypeid, 
                shedparameterid = p_shedparameterid, 
                isapplied = p_isapplied,
				remark = p_remark, 
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_shedreadydetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_cbfshedreadydetail_search`(
	IN p_cbfshedreadyid INT(11),
    IN p_companyid INT
)
BEGIN

	SELECT SRD.id,
		   SRD.cbfshedreadyid,
           SRD.parametertypeid,
           SRD.shedparameterid as cbfparameterid,
           SRD.isapplied,
		   SRD.remark,
           FP.ismandatory
    
    FROM cbf_shedreadydetail SRD
    LEFT JOIN cbffarmparameter FP ON FP.id = SRD.shedparameterid
    
    WHERE cbfshedreadyid = p_cbfshedreadyid
    AND companyid = p_companyid;
    

END;



CREATE PROCEDURE `spc_cbfshedreadydetail_select`(
	IN p_cbfshedreadyid INT(11),
    IN p_companyid INT
)
BEGIN

	SELECT SRD.id,
		   SRD.cbfshedreadyid,
           SRD.parametertypeid,
           SRD.shedparameterid as cbfparameterid,
           SRD.isapplied,
		   SRD.remark,
           FP.ismandatory,
           FP.parametername
    
    FROM cbf_shedreadydetail SRD
    LEFT JOIN cbffarmparameter FP ON FP.id = SRD.shedparameterid
    
    WHERE SRD.cbfshedreadyid = p_cbfshedreadyid
    AND SRD.companyid = p_companyid;
    

END;



CREATE PROCEDURE `spc_cbfshedready_branchwise`(
	 IN p_branchid INT,
     IN p_shedreadystatus INT,
     IN p_companyid INT
)
BEGIN

	SELECT SR.id as shedreadyid,
		   FES.id as shedid,
           FES.shed_name,
           (FES.total_sq_ft/FE.density) as capacity
           
	FROM cbf_shedready SR
    LEFT JOIN cbf_farmerenquiry FE ON FE.branch_id = p_branchid
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail FES ON FES.farmerenquiryid = FE.id
    -- LEFT JOIN cbf_procurementschedule CPS ON CPS.cbfshedid = FES.id
    
    WHERE SR.companyid = p_companyid
    AND SR.statusid = p_shedreadystatus
    AND FES.statusid = 2082 -- shed ready
    
    GROUP BY FES.id;

END;



CREATE PROCEDURE `spc_cbfshedready_delete`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN
	
    DELETE FROM cbf_shedreadydetail WHERE cbfshedreadyid = p_id AND companyid = p_companyid;
	DELETE FROM cbf_shedready WHERE id = p_id AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfshedready_save`(
	IN p_id int,
	IN p_shedid int,
	IN p_restperiod int,
	IN p_createdby int,
	IN p_createddate date,
	IN p_finalcleaningdate date,
	IN p_statusid int,
	IN p_companyid int,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbf_shedready
				(shedid, restperiod, createdby, createddate, finalcleaningdate, statusid, companyid)
			VALUES 
				(p_shedid, p_restperiod, p_createdby, p_createddate, p_finalcleaningdate, p_statusid, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE cbf_shedready
			SET 
				shedid = p_shedid,
				restperiod = p_restperiod,
				createdby = p_createdby,
				createddate = p_createddate,
				finalcleaningdate = p_finalcleaningdate,
				statusid = p_statusid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    IF(p_statusid = 2041) THEN
		
        -- Update shed status to 2082 = 'Shed Ready'
		UPDATE cbf_farmerenquiry_sheddimensiondetail SET statusid = 2082 WHERE id = p_shedid;
        
    END IF;
    
  
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbf_shedready', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_cbfshedready_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT SR.id, 
		   SR.shedid, 
           FES.shed_name,
           B.branchname,
           B.branchcode, 
           restperiod, 
           createdby, 
           DATE_FORMAT(SR.createddate,'%d/%m/%Y') as createddate,
           DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
           SR.statusid,
           REF.refname as shedstatus
	
    FROM cbf_shedready SR
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail FES ON FES.id = SR.shedid
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = FES.farmerenquiryid
    LEFT JOIN commonbranch B ON B.id = FE.branch_id
    LEFT JOIN `reference` REF ON REF.id = SR.id
    
    WHERE SR.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfshedready_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT SR.id, 
		   SR.shedid, 
           FES.shed_name,
           B.branchname,
           B.branchcode,
           restperiod, 
           createdby, 
           DATE_FORMAT(SR.createddate,'%d/%m/%Y') as createddate,
           DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
           SR.statusid,
           REF.refname as shedreadystatus,
           'Approved' as farmstatus,
           FE.chick_capacity
	
    FROM cbf_shedready SR
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail FES ON FES.id = SR.shedid
    LEFT JOIN cbf_farmerenquiry FE ON FE.id = FES.farmerenquiryid
    LEFT JOIN commonbranch B ON B.id = FE.branch_id
    LEFT JOIN `reference` REF ON REF.id = SR.statusid
    
    WHERE SR.id = p_id AND SR.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfshedtype_delete`( 
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM cbfshedtype WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'cbfshedtype', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_cbfshedtype_save`(
 IN p_id INT(11),
 IN p_shedtype VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO cbfshedtype
              (shedtype, companyid)
       VALUES
            (p_shedtype, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE cbfshedtype 
   
	SET shedtype = p_shedtype,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbfshedtype', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_cbfshedtype_search`( 
 IN p_companyid INT(11)
)
BEGIN

	SELECT id, shedtype, companyid
           
	FROM cbfshedtype
    
    WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_cbfshedtype_select`(
  IN p_id INT(11)
)
BEGIN

	SELECT id, shedtype, companyid
           
	FROM cbfshedtype
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_cbfstandardchartdetail_delete`(
   IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM cbfstandardchartdetail WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'cbfstandardchartdetail', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_cbfstandardchartdetail_feedconsumed_search`(
 IN p_age INT(11),
 IN p_itemid INT(11),
 IN p_breednameid INT(11),
 IN p_companyid INT(11)
 )
BEGIN 

	SELECT CSC.id,
           CSCD.feedconsumption as standardconsumption
           
	FROM cbfstandardchart CSC
    
    LEFT JOIN cbfstandardchartdetail CSCD ON CSCD.cbfstandardchartid =  CSC.id
  
    WHERE CSCD.age = p_age
    AND CSCD.itemid = p_itemid AND
    CSC.breednameid = p_breednameid AND
    CSC.companyid = p_companyid ;
    
END;



CREATE PROCEDURE `spc_cbfstandardchartdetail_save`(
   IN p_id INT(11),
   IN p_cbfstandardchartid INT(11),
   IN p_itemid INT(11),
   IN p_age INT(11),
   IN p_mortality INT(11),
   IN p_feedconsumption DECIMAL(9,3),
   IN p_cumulativefeed DECIMAl(9,3),
   IN p_bodyweight DECIMAL(9,3),
   In p_fcr DECIMAL(9,3),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbfstandardchartdetail 
				(cbfstandardchartid, itemid, age, mortality, feedconsumption, cumulativefeed, bodyweight, fcr, companyid)
			VALUES 
				(p_cbfstandardchartid, p_itemid, p_age, p_mortality, p_feedconsumption, p_cumulativefeed, p_bodyweight, p_fcr, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbfstandardchartdetail
        
				SET cbfstandardchartid = p_cbfstandardchartid,
					itemid = p_itemid,
                    age = p_age,
                    mortality = p_mortality,
                    feedconsumption = p_feedconsumption,
                    cumulativefeed = p_cumulativefeed,
                    bodyweight = p_bodyweight,
                    fcr = p_fcr,
					companyid = p_companyid,
				     id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbfstandardchartdetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_cbfstandardchartdetail_search`(
  IN p_cbfstandardchartid INT
)
BEGIN

	SELECT 
		 cscd.id,
         cscd.itemid, 
         cscd.age, 
         cscd.mortality,
         cscd.feedconsumption, 
         cscd.cumulativefeed,
         cscd.bodyweight,
         cscd.fcr, 
         cscd.companyid,
         I.itemname,
         I.itemcode
         
	FROM
		cbfstandardchartdetail cscd
         LEFT JOIN item I ON I.id = cscd.itemid
        
	WHERE
	 cscd.cbfstandardchartid = p_cbfstandardchartid;

END;



CREATE PROCEDURE `spc_cbfstandardchartdetail_select`(
  IN p_id INT
)
BEGIN

	SELECT 
		 cscd.id,
         cscd.cbfstandardchartid,
         cscd.itemid, 
         cscd.age, 
         cscd.mortality,
         cscd.feedconsumption, 
         cscd.cumulativefeed,
         cscd.bodyweight,
         cscd.fcr, 
         cscd.companyid
         
	FROM
		cbfstandardchartdetail cscd 
        
	WHERE
	 (
			NULLIF(p_id, '') IS NOT NULL AND cscd.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_cbfstandardchart_delete`(
   IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM cbfstandardchart WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'cbfstandardchart', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_cbfstandardchart_save`(
   IN p_id INT(11),
   IN p_chartname VArCHAR(200),
   IN p_breednameid INT(11),
   IN p_locationids VARCHAR(200),
   IN p_fromdate DATE,
   IN p_todate DATE,
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO cbfstandardchart 
				(chartname, breednameid, locationids, fromdate, todate, companyid)
			VALUES 
				(p_chartname, p_breednameid, p_locationids, p_fromdate, p_todate, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE cbfstandardchart
				SET chartname = p_chartname,
					breednameid = p_breednameid,
                    locationids = p_locationids,
                    fromdate = p_fromdate,
                    todate = p_todate,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'cbfstandardchart', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_cbfstandardchart_search`(
IN p_companyid INt(11)
)
BEGIN
 SELECT
       CSC.id ,
	   CSC.chartname, 
	   CSC.breednameid, 
	   CSC.locationids,
       I.itemname as breeditemname,
	   DATE_FORMAT(CSC.fromdate,'%d/%m/%Y') as fromdate,
	   DATE_FORMAT(CSC.todate,'%d/%m/%Y') as todate
   
  FROM
  
  cbfstandardchart CSC
  
   LEFT JOIN item I ON I.id = CSC.breednameid
  
  WHERE
  CSC.companyid = p_companyid
  order by CSC.id  desc;
  
 
END;



CREATE PROCEDURE `spc_cbfstandardchart_select`(
IN p_id INT(11)
)
BEGIN
 SELECT
       CSC.id ,
	   CSC.chartname, 
	   CSC.breednameid, 
	   CSC.locationids,
       I.itemname as breeditemname,
	   DATE_FORMAT(CSC.fromdate,'%d/%m/%Y') as fromdate,
	   DATE_FORMAT(CSC.todate,'%d/%m/%Y') as todate
   
  FROM
  
  cbfstandardchart CSC
  
   LEFT JOIN item I ON I.id = CSC.breednameid
  
  WHERE
    (
			NULLIF(p_id, '') IS NOT NULL AND CSC.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

  
 
END;



CREATE PROCEDURE `spc_chartofaccoint_getallledgers`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,coaname as ledgername, glcode 
    FROM chartofaccount 
    WHERE companyid = p_companyid AND coatypeid = 1003 AND is_deleted = 0 AND isactive = 1;

END;



CREATE PROCEDURE `spc_chartofaccount_cashledgers`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
		   coaname as ledgername,
           glcode
           
	FROM chartofaccount
    
    WHERE coatypeid = 1003
    AND iscashacc = 1
    AND categoryid = 1
    AND companyid = p_companyid
	AND is_deleted = 0
     AND isactive = 1;

END;



CREATE PROCEDURE `spc_chartofaccount_categoriwiseledgers`(
	IN p_categoryid INT(110),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,
		   coaname,
           glcode
           
	FROM chartofaccount
    
    WHERE categoryid = p_categoryid
    AND companyid = p_companyid
    AND coatypeid = 1003
     AND is_deleted = 0
      AND isactive = 1; -- get only ledgers

END;



CREATE PROCEDURE `spc_chartofaccount_delete`(
	IN p_id INT(11)
)
BEGIN

	-- DELETE FROM chartofaccount WHERE id = p_id;
    
    UPDATE chartofaccount SET is_deleted = 1 WHERE id = p_id;

END;



CREATE PROCEDURE `spc_chartofaccount_getgroups`(
	IN p_categoryid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT COA.id,
		   COA.categoryid,
           COA.coaname,
           COA.glcode,
           COA.coatypeid,
           COA.isparent,
           COA.groupid,
           COA.iscontrolacc,
           COA.isblockmanualposting,
           COA.iscashacc,
           COA.isproject,
           COA.projectid,
           CC.category
    
    FROM chartofaccount COA
    LEFT JOIN coacategory CC ON CC.id = COA.categoryid
    
    WHERE COA.categoryid = p_categoryid
    AND COA.companyid = p_companyid
     AND COA.coatypeid != 1003
      AND COA.is_deleted = 0;

END;



CREATE PROCEDURE `spc_chartofaccount_ledgerswithnocontrolaccount`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
		   coaname as ledgername,
           glcode
           
	FROM chartofaccount
    
    WHERE coatypeid = 1003
    AND iscontrolacc = 0
    AND companyid = p_companyid
	AND is_deleted = 0
     AND isactive = 1;

END;



CREATE PROCEDURE `spc_chartofaccount_save`(
	IN p_id INT(11),
    IN p_categoryid INT(11),
    IN p_coaname VARCHAR(150),
    IN p_glcode VARCHAR(100),
    IN p_coatypeid INT(11),
    IN p_isparent TINYINT(4),
    IN p_groupid INT(11),
    IN p_iscontrolacc TINYINT(4),
    IN p_isblockmanualposting TINYINT(4),
    IN p_iscashacc TINYINT(4),
    IN p_isproject TINYINT(4),
    IN p_projectid INT(11),
    IN p_isactive TINYINT(4),
    IN p_iscostcenterapplicable TINYINT(4),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO chartofaccount 
				(id, categoryid, coaname, glcode, coatypeid, isparent, groupid, iscontrolacc,
                 isblockmanualposting, iscashacc, isproject, projectid, is_deleted, isactive, iscostcenterapplicable, companyid)
			VALUES 
				(p_id, p_categoryid, p_coaname, p_glcode, p_coatypeid, p_isparent, p_groupid, p_iscontrolacc,
                 p_isblockmanualposting, p_iscashacc, p_isproject, p_projectid, 0, p_isactive, p_iscostcenterapplicable, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE chartofaccount
				SET categoryid = p_categoryid,
					coaname = p_coaname,
                    glcode = p_glcode,
                    coatypeid = p_coatypeid,
                    isparent = p_isparent,
                    groupid = p_groupid,
                    iscontrolacc = p_iscontrolacc,
                    isblockmanualposting = p_isblockmanualposting,
                    isproject = p_isproject,
                    iscashacc = p_iscashacc,
                    projectid = p_projectid,
					isactive = p_isactive,
                    iscostcenterapplicable = p_iscostcenterapplicable,
                    is_deleted = 0,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'chartofaccount', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_chartofaccount_search`(
	IN p_companyid INT(11),
    IN p_categoryid INT(11)
)
BEGIN

SELECT * FROM chartofaccount
WHERE companyid = p_companyid
AND categoryid = p_categoryid AND is_deleted = 0;

END;



CREATE PROCEDURE `spc_chartofaccount_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT COA.id,
		   COA.categoryid,
           COA.coaname,
           COA.glcode,
           COA.coatypeid,
           COA.isparent,
           COA.groupid,
           COA.iscontrolacc,
           COA.isblockmanualposting,
           COA.iscashacc,
           COA.isproject,
           COA.projectid,
           COA.isactive,
           COA.iscostcenterapplicable,
		   CC.category,
           REF.refname
           
	FROM chartofaccount COA
    LEFT JOIN coacategory CC ON CC.id = COA.categoryid
    LEFT JOIN `reference` REF ON REF.id = COA.coatypeid
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND COA.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		)
         AND COA.is_deleted = 0;

END;



CREATE PROCEDURE `spc_checklist_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM checklist WHERE id = p_id;
END;



CREATE PROCEDURE `spc_checklist_save`(
	IN p_id INT,
    IN p_sequence INT,
    IN p_checkname VARCHAR(200),
    IN p_ismandatory INT,
    IN p_companyid INT,
    IN p_userid INT,
	OUT out_id INT
)
BEGIN

SET @action = null;
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO checklist 
				(sequence, checkname, ismandatory, companyid)
			VALUES 
				(p_sequence, p_checkname, p_ismandatory, p_companyid);
			 
			SET @action = 'INSERT';
	ELSE
    
		UPDATE checklist
			SET checkname = p_checkname, 
				sequence = p_sequence,
                ismandatory = p_ismandatory,
                companyid = p_companyid
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'checklist', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_checklist_search`(
    IN p_companyid INT
)
BEGIN

	SELECT
		id,
        sequence,
		checkname,
        ismandatory       
	
    FROM
		checklist
	WHERE
		companyid = p_companyid;

END;



CREATE PROCEDURE `spc_checklist_select`(
	IN p_id INT
)
BEGIN

	SELECT
		id,
		checkname,
		sequence,
        ismandatory,
        companyid
	
    FROM
		checklist
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
       
END;



CREATE PROCEDURE `spc_chickseconomyreport_select`(
	IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT
)
BEGIN
    
    SET @row_number = 0;
    
    SELECT
		  (@row_number:=@row_number + 1) AS sqno,
 		  DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
          DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as hatchdate,
		  C.setterbatchid as settingno,
          REF1.refname AS sourcename,
          SB.availablequantity as noofeggsreceived,
          SB.actualquantity as noofeggsset,
          C.totalhatch as noofchicksreceived,
          ROUND(((IFNULL(C.totalhatch, 0) * 100) / IFNULL(SB.actualquantity, 1)),2) hatchpercent,		    
          C.sellable as completequantity,
          ROUND(((IFNULL(C.sellable, 0) * 100) / IFNULL(C.totalhatch, 1)),2) saleablepercent,		    
          C.sellable AS deliveredchicks,
          0 AS delloss,
          0 AS hatchrate,
          0 AS amount,
          0 AS adminexp,
          0 AS totaladminexp,
          0 AS totalchicksexp,
          0 AS perchicksexp
    FROM
		chickspullout C
		LEFT JOIN setterbatch SB ON C.setterbatchid = SB.id
        LEFT JOIN reference REF1 ON SB.sourceid = REF1.id
        LEFT JOIN hatcherbatch HB ON C.hatchbatchid = HB.id
		
	  WHERE
		 C.pulloutdate BETWEEN p_fromdate AND p_todate AND
         C.companyid = p_companyid;
      

END;



CREATE PROCEDURE `spc_chicksmortality_bygrpo`(
	IN p_companyid INT,
    IN p_grpono INT
)
BEGIN
	 SELECT  CM.id,
	         CM.culls,
             CM.mortality,
             CM.shortage,
             CM.grpono,
             CM.freeqty,
            -- GD.quantity,
            (SELECT SUM(quantity) from grpodetail where grpoid = p_grpono ) as quantity,
             CM.itemid
            
	 FROM chicksmortality CM
   --  LEFT JOIN grpodetail GD ON GD.grpoid = CM.grpono
    
     WHERE CM.companyid = p_companyid
	  AND CM.grpono = p_grpono;
		
END;



CREATE PROCEDURE `spc_chicksmortality_save`(
	IN p_id INT,
    IN p_grpono INT(11),
    IN p_itemid INT(11),
    IN p_culls INT(11),
    IN p_mortality INT(11),
    IN p_shortage INT(11),
    IN p_freeqty INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO chicksmortality 
				(id, grpono, itemid, culls, mortality, shortage, freeqty, companyid)
			VALUES 
				(p_id, p_grpono, p_itemid, p_culls, p_mortality, p_shortage, p_freeqty, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE chicksmortality
				SET grpono = p_grpono, 
                itemid = p_itemid,
                culls = p_culls,
                mortality = p_mortality, 
                shortage = p_shortage,
                freeqty = p_freeqty,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'chicksmortality', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_chicksmortality_select`(
	IN p_id INT
)
BEGIN
    
    SELECT
		id, 
        grpono, 
        culls, 
        mortality, 
        shortage, 
        freeqty,
        companyid,
        itemid
	
    FROM
		chicksmortality 
	
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
      

END;



CREATE PROCEDURE `spc_chickspullout_byitembatch`(
 IN p_itembatchid INT
 )
BEGIN

	SELECT
		id as pulloutid,
		sellable,
		itembatchid
        
	FROM
		chickspullout
        
	WHERE
		itembatchid = p_itembatchid;

END;



CREATE PROCEDURE `spc_chickspullout_delete`(
	IN p_id int,
	IN p_companyid INT,
	IN p_userid INT
)
BEGIN
	DELETE FROM chickspullout WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'chickspullout', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_chickspullout_save`(
		IN p_id INT,
		IN p_locationid INT,
		IN p_hatchbatchid INT,
		IN p_pulloutdate date,
		IN p_setterbatchid INT,
		IN p_breederbatchid INT,
		IN p_itemid INT,
		IN p_hatcherquantity INT,
		IN p_infertile INT,
		IN p_deadingerm INT,
		IN p_earlymortality INT,
		IN p_middlemortality INT,
		IN p_deadinshell INT,
		IN p_LCM INT,
		IN p_burst INT,
		IN p_totalhatch INT,
		IN p_culls INT,
		IN p_sellable INT,
		IN p_itembatchid INT,
		IN p_unitcost decimal(9,3),
		IN p_totalcost decimal(9,3),
		IN p_itemunitid INT,
        IN p_warehouselocationid INT,
        IN p_itemname VARCHAR(100),
        IN p_eggsunitcost decimal(9,3),
		IN p_eggstotalcost decimal(9,3),
		IN p_eggsitemunitid INT,
        IN p_fromwarehouseid INT,
        IN p_eggsitemid INT,
        IN p_itembatchidformatissue VARCHAR(100),
        IN p_eggsitemname VARCHAR(100),
		IN p_companyid INT,
		IN p_userid INT,
        OUT out_id INT
)
BEGIN

	-- Get hatchery setting default values
    
	SELECT  
			@defaulthatcherywhfordoc:= defaulthatcherywhfordoc,
            @overheadcostperegg:= IFNULL(overheadcostperegg, 0),
            @docledgerid := docledgerid,
            @overheadexpenseglid := overheadexpenseglid,
            @WIPeggledgerid := WIPeggledgerid
	FROM
		hatcherysettings HS
        
    WHERE 
		HS.companyid = p_companyid;
        
	SET @action = null;
    SET @chickspulloutid = null;
    SET @matissueid = null;
	SET @matissueiddetailsid = null;
    SET @matreceid = null;
    
    -- create itembatch for material receipt
    SET @itembatch = null;
    SET @itemgroup = null;
        
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		INSERT INTO chickspullout
				(locationid, hatchbatchid, pulloutdate, setterbatchid, breederbatchid, itemid,
                hatcherquantity, infertile, deadingerm, earlymortality, 
                middlemortality, deadinshell, LCM, burst, totalhatch,
                culls, sellable, itembatchid, unitcost, totalcost, warehouselocationid, 
                itemunitid, companyid)
			VALUES 
				(p_locationid, p_hatchbatchid, p_pulloutdate, p_setterbatchid, p_breederbatchid, p_itemid,
                p_hatcherquantity, p_infertile, p_deadingerm, p_earlymortality, p_middlemortality, p_deadinshell, p_LCM, 
                p_burst, p_totalhatch, p_culls, p_sellable, p_itembatchid,
                p_unitcost, p_totalcost, p_warehouselocationid, p_itemunitid, p_companyid);
                
		SET @chickspulloutid  = last_insert_id(); 
        
		-- Make material issue entry for damaged eggs
        SET @out_issueid = NULL;
		CALL spc_materialissue_save(
			NULL, now(), 382, p_hatchbatchid, 362, NULL,
			p_userid, p_fromwarehouseid, 
            (SELECT warehousebinid FROM hatcher WHERE id = (SELECT hatcherid FROM hatcherbatch WHERE id = p_hatchbatchid)), 
            p_userid, NOW(),
			p_companyid, p_userid, @out_issueid
		);
                            
		
		SET @out_issuedetailid = NULL;
		CALL spc_materialissuedetail_save(
			NULL, @out_issueid, p_eggsitemid, p_eggsitemname,
			p_hatcherquantity, p_eggsunitcost, p_eggstotalcost,
			p_eggsitemunitid, p_itembatchidformatissue,
			p_companyid, p_userid, @out_issuedetailid
		);
                
        -- Make material movement entry for material issue
        SET @out_movid = NULL;
		CALL spc_materialmovement_save(
			NULL, p_eggsitemid, p_itembatchidformatissue, 683,
			@out_issueid, p_pulloutdate, p_hatcherquantity,
			p_fromwarehouseid, 
            (SELECT warehousebinid FROM hatcher WHERE id = (SELECT hatcherid FROM hatcherbatch WHERE id = p_hatchbatchid)), 
            p_warehouselocationid,
            (SELECT id FROM warehousebin WHERE warehouseid = p_warehouselocationid AND isdefault = 1),
			p_eggstotalcost, p_companyid, p_userid, @out_movid
		);
		
		-- Make material receipt entry for DOC
		SET @out_recid = NULL;
		CALL spc_materialreceipt_save(
			NULL, now(), 342, p_hatchbatchid, 322, NULL,
			p_userid, p_userid, NOW(), p_companyid,
			p_userid, @out_recid
		);
		
        
        -- create itembatch for material receipt
        
        select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch from item I
		INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

		WHERE I.id = p_itemid;
        
        SELECT @itembatch;
        
        -- update new chicks pullout entry with updated itembatch
        UPDATE chickspullout SET itembatchid = @itembatch WHERE id = @chickspulloutid;
        
        -- Material receipt detail entry
        SET @out_recdetailid = NULL;
		CALL spc_materialreceiptdetail_save(
			NULL, @out_recid, p_itemid, p_itemname, p_sellable,
            p_unitcost, p_totalcost, p_itemunitid, @itembatch,
			p_warehouselocationid,
            (SELECT id FROM warehousebin WHERE warehouseid = p_warehouselocationid AND isdefault = 1),
            p_companyid,
			p_userid, NULL, @out_recdetailid
		);
              
		-- Make material movement entry for material receipt
        SET @out_movid1 = NULL;
		CALL spc_materialmovement_save(
			NULL, p_itemid, @itembatch, 684,
			@out_recid, p_pulloutdate, p_sellable,
			p_warehouselocationid,
            (SELECT id FROM warehousebin WHERE warehouseid = p_warehouselocationid AND isdefault = 1),
            NULL, NULL,
			p_totalcost, p_companyid, p_userid, @out_movid1
		);
              
		 -- get item group id from the item id and update itemgroup table
        SELECT itemgroupid INTO @itemgroup FROM item WHERE id = p_itemid;
        
        UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
        
        WHERE id = @itemgroup;
        
		UPDATE hatcherbatch
            set statusid = 303
			where id = p_hatchbatchid;  
            
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE chickspullout
			SET 
				locationid = p_locationid,
				hatchbatchid = p_hatchbatchid,
				pulloutdate = p_pulloutdate,
				setterbatchid = p_setterbatchid,
				breederbatchid = p_breederbatchid,
				itemid = p_itemid,
				hatcherquantity = p_hatcherquantity,
				infertile = p_infertile,
				deadingerm = p_deadingerm,
				earlymortality = p_earlymortality,
				middlemortality = p_middlemortality,
				deadinshell = p_deadinshell,
				LCM = p_LCM,
				burst = p_burst,
				totalhatch = p_totalhatch,
				culls =p_culls,
				sellable = p_sellable,
				itembatchid = @itembatch,
				unitcost = p_unitcost,
				totalcost = p_totalcost,
				itemunitid = p_itemunitid,
                warehouselocationid = p_warehouselocationid,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    
    -- JE for WIP egg ledger to sellable chick and waste chicks ledger
        SET @jeid = null;
		CALL spc_journalentry_save(
			NULL,
			NULL,
			1297,
			NULL,
			p_pulloutdate,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
            NULL,
            341,
			NULL,
			'Chicks pullout',
			NULL,
			NULL,
			NULL,
			out_id,
			'Chicks pullout',
			p_companyid,
			p_userid,
			@jeid
		);
        
        -- credit WIP eggs item - ledger
        SET @jedetailid = null;
        CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			@WIPeggledgerid,
            0,
            p_hatchbatchid,
			NULL,
			NULL,
			0,
			(p_hatcherquantity * @overheadcostperegg),
			NULL,
			NULL,
			NULL,
			@itemid,
			NULL,
			'Chicks pullout',
			p_companyid,
			p_userid,
			@jedetailid
		 );
		 
		 -- Debit to sellable chick - Ledger
		
		 SET @jedetailid1 = null;
		 CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
            @docledgerid,
            0,
            p_hatchbatchid,
			NULL,
			NULL,
			p_totalcost,
			0,
			NULL,
			NULL,
			NULL,
			@itemid,
			NULL,
			'Chicks pullout',
			p_companyid,
			p_userid,
			@jedetailid1
		 );
         
         -- Debit to expense - Ledger
		
		 SET @jedetailid2 = null;
		 CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
            @overheadexpenseglid,
            0,
            p_hatchbatchid,
			NULL,
			NULL,
			((p_infertile + p_deadingerm + p_earlymortality + p_middlemortality + p_deadinshell + p_LCM, 
               p_burst + p_culls) * @overheadcostperegg),
			0,
			NULL,
			NULL,
			NULL,
			@itemid,
			NULL,
			'Chicks pullout',
			p_companyid,
			p_userid,
			@jedetailid2
		 );
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'chickspullout', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_chickspullout_search`(
-- IN p_companyid INT,
IN p_hatchbatchid INT
)
BEGIN

	SELECT
		C.id,
		C.locationid,
		hatchbatchid,
		pulloutdate,
		setterbatchid,
		C.breederbatchid,
		C.itemid,
		hatcherquantity,
		infertile,
		deadingerm,
		earlymortality,
		middlemortality,
		deadinshell,
		LCM,
		burst,
		totalhatch,
		culls,
		sellable,
		itembatchid,
		C.unitcost,
		totalcost,
		C.itemunitid,
        I.itemname,
        B.batchname,
        C.companyid,
        C.warehouselocationid,
        W.warehousename,
        R.refname as itemunitname
        
        
        
   FROM chickspullout C
        
		LEFT JOIN breederbatch B ON C.breederbatchid = B.id
        LEFT JOIN item I ON C.itemid = I.id
        LEFT JOIN warehouse W ON W.id = warehouselocationid
        LEFT JOIN reference R ON R.id = C.itemunitid
	
   WHERE
    
	-- C.companyid = p_companyid
		-- and
     hatchbatchid = p_hatchbatchid;
    
END;



CREATE PROCEDURE `spc_chickspullout_select`(
	IN p_id INT
 )
BEGIN

	SELECT
		CP.id as pulloutid,
		CP.sellable,
		CP.itembatchid,
        CP.warehouselocationid,
        W.warehousename
        
	FROM
		chickspullout CP
        LEFT JOIN warehouse W ON W.id = CP.warehouselocationid
        
	WHERE
		CP.id = p_id;

END;



CREATE PROCEDURE `spc_city_ddl`(
)
BEGIN

	SELECT id,
		   stateid,
           cityname
           
	FROM city;
   
END;



CREATE PROCEDURE `spc_city_search`(
	IN p_stateid INT(11)
)
BEGIN

	SELECT id,
		   stateid,
           citycode,
           cityname
           
	FROM city
    
    WHERE stateid = p_stateid;

END;



CREATE PROCEDURE `spc_coacategory_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DELETE FROM coacategory WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'coacategory', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_coacategory_save`(
	IN p_id INT,
	IN p_category VARCHAR(100),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO coacategory 
				(category, companyid)
			VALUES 
				(p_category, p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE coacategory
			SET 
				category = p_category, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';   
    
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'coacategory', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_coacategory_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
			id,
            category
			
	FROM coacategory
    
	WHERE companyid = p_companyid;
	
END;



CREATE PROCEDURE `spc_coacategory_select`(
	IN p_id INT
)
BEGIN

	SELECT
			id,
            category
			
	FROM coacategory
    
	WHERE id = p_id;
	
END;



CREATE PROCEDURE `spc_commonbranchline_delete`(
 IN p_id INT(11),
 IN p_compnayid INT(11),
 IN p_userid INT(11)
)
BEGIN

	DELETE FROM commonbranchline WHERE id = p_id;
	CALL spc_commonlog_save(p_companyid, 'commonbranchline', p_id, 'delete', p_userid);

END;



CREATE PROCEDURE `spc_commonbranchline_save`(
 IN p_id INT(11),
 IN p_branchid INT(11),
 IN p_linename VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT(11),
 OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO commonbranchline 
				(branchid, linename, companyid)
			VALUES 
				(p_branchid, p_linename, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE commonbranchline
				SET 
					branchid = p_branchid,
					linename = p_linename,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'commonbranchline', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_commonbranchline_search`(
 IN p_branchid INT(11)
)
BEGIN

	SELECT id, branchid, linename, companyid
           
	FROM commonbranchline
  
		WHERE branchid = p_branchid;

END;



CREATE PROCEDURE `spc_commonbranchline_select`( 
   IN p_id INT(11)
)
BEGIN

	SELECT id, branchid, linename, companyid
           
	FROM commonbranchline
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_commonbranch_delete`(
 IN p_id INT(11),
 IN p_companyid INT(11),
 IN p_userid INT(11)
)
BEGIN

	DELETE FROM commonbranch WHERE id = p_id;
	CALL spc_commonlog_save(p_companyid, 'commonbranch', p_id, 'delete', p_userid);

END;



CREATE PROCEDURE `spc_commonbranch_save`(
   IN p_id INT(11),
   IN p_branchcode VARCHAR(200),
   IN p_branchname VARCHAR(200),
   IN p_isactive TINYINT(4),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO commonbranch 
				(branchcode, branchname, isactive, companyid)
			VALUES 
				(p_branchcode, p_branchname, p_isactive, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE commonbranch
				SET 
					branchcode = p_branchcode,
					branchname = p_branchname,
                    isactive = p_isactive,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'commonbranch', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_commonbranch_search`(
IN p_companyid INT(11)
)
BEGIN

	SELECT id, branchname, branchcode, isactive, companyid
           
	FROM commonbranch
    
    WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_commonbranch_select`(
  IN p_id INT(11)
)
BEGIN

	SELECT id, branchname, branchcode, isactive, companyid
           
	FROM commonbranch
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_commonlog_save`(
	IN p_companyid INT,
    IN p_tablename VARCHAR(100),
    IN p_id INT,
    IN p_action VARCHAR(30),
    IN p_createdby INT
)
BEGIN

	SET @retJson = NULL;
	CALL spc_commonlog_tablerowjson(p_tablename, p_id, @retJson);

	INSERT INTO commonlog 
		(companyid,tablename, rowdata, action, createdby, createddate)
	VALUES
		(p_companyid,p_tablename, @retJson, p_action, p_createdby, now());

END;



CREATE PROCEDURE `spc_commonlog_tablerowjson`(
	IN p_tablename VARCHAR(100),
    IN p_id INT,
    OUT out_JSON json
)
BEGIN

	SET @strJson = NULL;

	SELECT 
		group_concat(concat("'", COLUMN_NAME, "', ", COLUMN_NAME) separator ',')
	INTO    
		@cols
	FROM
		information_schema.columns
	WHERE
		TABLE_NAME = p_tablename and TABLE_SCHEMA = database();
        

	SET @strquery = concat('select json_object(', @cols, ') into @strJson from ', p_tablename);

	IF p_id IS NOT NULL THEN
		SET @strquery = concat(@strquery, ' where id = ', p_id);
	END IF;
    
	SET @strquery = concat(@strquery, ';');
    
	PREPARE statement FROM @strquery;
	EXECUTE statement;
	DEALLOCATE PREPARE statement;
    
    SET out_JSON = @strJson;

END;



CREATE PROCEDURE `spc_common_nextprevrecord`(
	IN p_id INT,
    IN p_tablename varchar(100),
    IN p_action VARCHAR(10),
    IN p_companyid INT,
    OUT out_returnid INT
)
BEGIN

	SET @returnid = null;
 	SET @strquery = null;
    
		IF(p_id IS NULL) THEN
			SET p_id = 0;
		END IF;
        			
		SET @strquery = concat('SELECT id into @returnid FROM ', p_tablename, ' WHERE ');
		SET @strquery = concat(@strquery, ' (IFNULL(' , p_id , ', 0) != 0 && ''' , p_action , ''' = ''PREV'' && id < ',p_id,')');
		SET @strquery = concat(@strquery, ' OR ');
		SET @strquery = concat(@strquery, ' (IFNULL(' , p_id , ', 0) != 0 && ''' , p_action ,''' = ''NEXT'' && id > ',p_id,')');
		SET @strquery = concat(@strquery, ' OR ');
		SET @strquery = concat(@strquery, ' (IFNULL(' , p_id , ', 0) = 0 && (''' , p_action , ''' = ''PREV''  ||  ''' , p_action , ''' = ''NEXT'' )) ');
		
		IF(IFNULL(p_companyid, 0) != 0) THEN
			SET @strquery = concat(@strquery, ' AND companyid = ' , p_companyid );
		END IF;
      
		IF(p_action = 'PREV') THEN
			SET @strquery = concat(@strquery, ' ORDER BY id DESC ');
		END IF;
        
        SET @strquery = concat(@strquery, ' LIMIT 1;');

           
     PREPARE statement FROM @strquery;
	 EXECUTE statement;
	 DEALLOCATE PREPARE statement;

		-- SET out_query = @strquery;

	 IF(IFNULL(@returnid, 0) != 0) THEN
	 SET out_returnid = @returnid;
     ELSE
	 SET out_returnid = p_id;
     END IF;

END;



CREATE PROCEDURE `spc_common_splitstr_totable`(
    IN `INPUTSTR` TEXT CHARSET utf8mb4, 
    IN `SEPARATR` TEXT CHARSET utf8mb4
)
BEGIN

	SET @I = 1;
    SET @SEP = SEPARATR;
    SET @VARSTR = INPUTSTR;
    
    SET @N = FORMAT((LENGTH(@VARSTR)-LENGTH(REPLACE(@VARSTR, @SEP, '')))/LENGTH(@SEP), 0)+1;
   
    CREATE TEMPORARY TABLE IF NOT EXISTS splt_table_002(P1 VARCHAR(100) NULL);
	TRUNCATE TABLE splt_table_002;
    
    label1: LOOP
    
		SET @TEMP = SUBSTRING_INDEX(SUBSTRING_INDEX(@VARSTR, @SEP, 1), ',' , -1);
        -- SELECT @TEMP;
        insert into splt_table_002 (`P1`) SELECT @TEMP;
        SET @I = @I + 1;
        
        SET @pos = POSITION(@SEP IN @VARSTR); 
		SET @VARSTR = SUBSTRING(@VARSTR, @pos + 1 , length(@VARSTR)); 
       
        IF @N >= @I THEN
          ITERATE label1;
        END IF;
        
        LEAVE label1;
        
      END LOOP label1;
      
    SELECT * FROM splt_table_002;           

END;



CREATE PROCEDURE `spc_companysubscription_activelicenses`(
	IN p_companyid INT
)
BEGIN

	SELECT
		`id`,
		`companyid`,
		`productid`,
		`licensetypeid`,
		`licensetypename`,
        DATE_FORMAT(activationdate,'%d/%m/%Y') as activationdate,
		`frequencytypeid`,
		`frequencytypename`,
        DATE_FORMAT(expirydate,'%d/%m/%Y') as expirydate,
		`value`,
        fnc_subscription_licenseused(id) as licenseused,
		`statusid`
	FROM
		companysubscription CS
	WHERE
		companyid = p_companyid;
END;



CREATE PROCEDURE `spc_companysubscription_save`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_productid INT,
    IN p_subscriptionid INT,
    IN p_subscriptiontypeid INT,
    IN p_licensetypeid INT,
    IN p_licensetypename VARCHAR(100),
    IN p_activationdate DATE,
    IN p_frequencytypeid INT,
    IN p_frequencytypename VARCHAR(100),
    IN p_value INT,
    IN p_expirydate DATE,
    IN p_statusid INT,
    IN p_statusname VARCHAR(100),
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO companysubscription 
				(
					
					`companyid`,
					`productid`,
                    `subscriptionid`,
                    `subscriptiontypeid`,
					`licensetypeid`,
                    `licensetypename`,
					`activationdate`,
					`frequencytypeid`,
                    `frequencytypename`,
					`value`,
					`expirydate`,
                    `statusid`,
                    `statusname`
				)
			VALUES 
				(	
					
					p_companyid,
					p_productid,
                    p_subscriptionid,
                    p_subscriptiontypeid,
					p_licensetypeid,
                    p_licensetypename,
					p_activationdate,
					p_frequencytypeid,
                    p_frequencytypename,
					p_value,
					p_expirydate,
                    p_statusid,
                    p_statusname
				);
                
		SET @action = 'INSERT';
      
	ELSE
    
		UPDATE companysubscription
        
				SET 
					companyid = p_companyid,
					productid = p_productid,
					subscriptionid = p_subscriptionid,
                    subscriptiontypeid = p_subscriptiontypeid,
					licensetypeid = p_licensetypeid,
                    licensetypename = p_licensetypename,
					activationdate = p_activationdate,
					frequencytypeid = p_frequencytypeid,
                    frequencytypename = p_frequencytypename,
					`value` = p_value,
					expirydate = p_expirydate,
                    statusid = p_statusid,
                    statusname = p_statusname,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id;
                
		SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 

END;



CREATE PROCEDURE `spc_companysubscription_savejson`(
	IN p_companyid INT,
    IN p_productid INT,
    IN p_companydata json,
    IN p_subscriptions json,
    IN p_roles json,
    IN p_roleaccess json,
    OUT out_id INT
)
BEGIN
    
    -- save company details
    
    SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_companydata) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_companydata,CONCAT('$[',@i,']')) INTO @str;
        
		INSERT INTO company (id, companyname, companycode, email) 
		values (null,
			JSON_UNQUOTE(if(json_type(JSON_EXTRACT(@str, CONCAT('$.companyname'))) = 'NULL', null,JSON_EXTRACT(@str, CONCAT('$.companyname')))),
            JSON_UNQUOTE(if(json_type(JSON_EXTRACT(@str, CONCAT('$.companycode'))) = 'NULL', null,JSON_EXTRACT(@str, CONCAT('$.companycode')))),
            JSON_UNQUOTE(if(json_type(JSON_EXTRACT(@str, CONCAT('$.email'))) = 'NULL', null,JSON_EXTRACT(@str, CONCAT('$.email'))))
        );
        
        
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    
    -- save daily feed consumption 
    
    SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_subscriptions) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_subscriptions,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
		
        CALL spc_companysubscription_save(
			null,
            CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))) AS UNSIGNED INTEGER),
            CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.productid'))) AS UNSIGNED INTEGER),
            CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.subscriptionid'))) AS UNSIGNED INTEGER),
            CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.subscriptiontypeid'))) AS UNSIGNED INTEGER),
            CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.licensetypeid'))) AS UNSIGNED INTEGER),
            JSON_UNQUOTE(if(json_type(JSON_EXTRACT(@str, CONCAT('$.licensetypename'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.licensetypename')))),
            JSON_UNQUOTE(JSON_EXTRACT(@str, CONCAT('$.activationdate'))),
            CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.frequencytypeid'))) AS UNSIGNED INTEGER),
            JSON_UNQUOTE(if(json_type(JSON_EXTRACT(@str, CONCAT('$.frequencytypename'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.frequencytypename')))),
            CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.value'))) AS UNSIGNED INTEGER),
            JSON_UNQUOTE(JSON_EXTRACT(@str, CONCAT('$.expirydate'))),
            if(json_type(JSON_EXTRACT(@str, CONCAT('$.statusid'))) = 'NULL',null, CAST(JSON_EXTRACT(@str, CONCAT('$.statusid')) AS UNSIGNED INTEGER )),
            JSON_UNQUOTE(if(json_type(JSON_EXTRACT(@str, CONCAT('$.statusname'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.statusname')))),
            1,
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    -- save Roles assigned to company
   
    -- save Roles assigned to company
    
	SET @i = 0;
    
    select 'length', JSON_LENGTH(p_roles);
    
    WHILE @i < JSON_LENGTH(p_roles) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_roles,CONCAT('$[',@i,']')) INTO @str;
			
        INSERT INTO `role`(`id`,`rolename`, `description`, `licensetypeid`)
			VALUES 
				(
					null,
					JSON_UNQUOTE(if(json_type(JSON_EXTRACT(@str, CONCAT('$.rolename'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.rolename')))),
				JSON_UNQUOTE(if(json_type(JSON_EXTRACT(@str, CONCAT('$.description'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.description')))),
				CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.licensetypeid'))) AS SIGNED)
                );
            		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    
    -- save role access
    
	SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_roleaccess) DO
    
    	SET @str = NULL;
		SELECT JSON_UNQUOTE(JSON_EXTRACT(p_roleaccess,CONCAT('$[',@i,']'))) INTO @str;
        
        INSERT INTO roleaccess (id, roleid, entityid, entitytypeid, permissions, checked, parentid)
			VALUES 
				(	
					null,
					CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.roleid'))) AS SIGNED),            
					CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.entityid'))) AS SIGNED),            
					CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.entitytypeid'))) AS SIGNED),            
					JSON_UNQUOTE(if(json_type(json_extract(@str, CONCAT('$.permissions'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.permissions')))),
					JSON_UNQUOTE(if(json_type(json_extract(@str, CONCAT('$.checked'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.checked')))),
					if(json_type(json_extract(@str, CONCAT('$.parentid'))) = 'NULL',null,CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.parentid'))) AS UNSIGNED INTEGER))
				);
        
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    
    
END;



CREATE PROCEDURE `spc_companysubscription_userlicenseDdl`(
	IN p_userid INT,
	IN p_companyid INT
)
BEGIN


	SELECT 	tblLicenses.id,  licensetypename,  licenseleft, UL.userid 
    FROM
	(
		SELECT
			id,
			licensetypename,
			`value` - fnc_subscription_licenseused(id) AS licenseleft
		FROM
			companysubscription
		WHERE
			companyid = p_companyid 
	)
    AS tblLicenses
    
    LEFT JOIN userlicense UL ON UL.companysubscriptionid = tblLicenses.id
				AND UL.userid = p_userid
    WHERE 
		licenseleft > 0 
        OR (UL.userid IS NOT NULL AND licenseleft = 0);
    

END;



CREATE PROCEDURE `spc_company_select`(
IN p_companyid INT
)
BEGIN
SELECT 
	 id,
	 companyname,
     companycode,
     description,
     email,
     contactno1,
     contactno2,
     address,
     state,
     statecode,
     city,
     countrycode,
     pincode
     
	FROM
    company 
    WHERE
    id = p_companyid;
END;



CREATE PROCEDURE `spc_consumptionissue_save`(
	IN p_id INT,
	IN p_itemid INT,
    IN p_consumptionid INT,
    IN p_issuedetailid INT,
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO consumptionissue
				(itemid, 
				 consumptionid, 
                 issuedetailid)
			VALUES 
				(p_itemid, 
                 p_consumptionid, 
                 p_issuedetailid);
      
    ELSE
    
		UPDATE  consumptionissue
				SET itemid = p_itemid, 
                consumptionid = p_consumptionid,
                issuedetailid = p_issuedetailid, 
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id;
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
   
END;



CREATE PROCEDURE `spc_costcenter_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM costcenter WHERE id = p_id;

END;



CREATE PROCEDURE `spc_costcenter_parentcostcenter`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id, dimenssioncode, dimenssionname, description, isactive, isparent, parentid
           
	FROM costcenter
    
    WHERE companyid = p_companyid
    AND isparent = 1;

END;



CREATE PROCEDURE `spc_costcenter_save`(
   IN p_id INT(11),
   IN p_dimenssioncode VARCHAR(45),
   IN p_dimenssionname VARCHAR(100),
   IN p_description VARCHAR(300),
   IN p_isactive TINYINT(4),
   IN p_isparent TINYINT(4),
   IN p_parentid INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO costcenter 
				(id, dimenssioncode, dimenssionname, description, isactive, isparent, parentid, companyid)
			VALUES 
				(p_id, p_dimenssioncode, p_dimenssionname, p_description, p_isactive, p_isparent, p_parentid, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE costcenter
				SET dimenssioncode = p_dimenssioncode,
					dimenssionname = p_dimenssionname,
					description = p_description,
                    isactive = p_isactive,
                    isparent = p_isparent,
                    parentid = p_parentid,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'costcenter', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_costcenter_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id, dimenssioncode, dimenssionname, description, isactive, isparent, parentid
           
	FROM costcenter
    
    WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_costcenter_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT id, dimenssioncode, dimenssionname, description, isactive, isparent, parentid
           
	FROM costcenter
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_coststructuredetail_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM coststructuredetail WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'coststructuredetail', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_coststructuredetail_save`(
IN p_id INT(11),
IN p_coststructureid INT(11),
IN p_fromavgweight DECIMAL(9,3),
IN p_toavgaeight DECIMAL(9,3),
IN p_productioncost DECIMAL(9,3),
IN p_rearingcharge DECIMAL(9,3),
IN p_fcr DECIMAL(9,3),
In p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT
)
BEGIN
SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO coststructuredetail
              (coststructureid, fromavgweight, toavgaeight, productioncost, rearingcharge, fcr, companyid)
       VALUES
            (p_coststructureid, p_fromavgweight, p_toavgaeight, p_productioncost, p_rearingcharge, p_fcr, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE coststructuredetail 
   
	SET coststructureid = p_coststructureid,
        fromavgweight = p_fromavgweight,
        toavgaeight = p_toavgaeight,
        productioncost =p_productioncost,
        rearingcharge = p_rearingcharge,
        fcr = p_fcr,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'coststructuredetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_coststructuredetail_search`(
 IN p_coststructureid INT
)
BEGIN

	SELECT 
		 id,
         coststructureid,
         fromavgweight,
         toavgaeight,
         productioncost,
         rearingcharge,
         fcr,
         companyid
         
	FROM
		coststructuredetail 
        
	WHERE
		 coststructureid = p_coststructureid;
END;



CREATE PROCEDURE `spc_coststructuredetail_select`(
IN p_id INT
)
BEGIN

	SELECT 
		 id,
         coststructureid,
         fromavgweight,
         toavgaeight, 
         productioncost,
         rearingcharge,
         fcr,
         companyid
         
	FROM
		coststructuredetail 
        
	WHERE
	 (
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_coststructure_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM coststructure WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'coststructure', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_coststructure_save`(
  IN p_id INT(11),
  IN p_name VARCHAR(200),
  IN p_chickcost DECIMAL(9,3),
  IN p_administrationcost DECIMAL(9,3),
  IN p_fromdate DATE,
  IN p_todate DATE,
  IN p_mortalitydeduction DECIMAL(9,3),
  IN p_feedcost DECIMAL(9,3),
  IN p_medicinecost DECIMAL(9,3),
  IN p_vaccinecost DECIMAl(9,3),
  IN p_changeformula TINYINT(4),
  IN p_onbird TINYINT(4),
  IN p_birdincentiveperkg DECIMAL(9,3),
  IN p_birdincentiveperbird DECIMAl(9,3),
  IN p_birdincentivepercentage DECIMAL(9,3),
  IN p_productionincentive DECIMAl(9,3),
  IN p_costexceeds DECIMAL(9,3),
  IN p_mortalityweek DECIMAL(9,3),
  IN p_mortalitypercentage DECIMAL(9,3),
  IN p_cummulativeper DECIMAl(9,3),
  IN p_firstweekmortalityper DECIMAl(9,3),
  IN p_shortrecovery DECIMAL(9,3),
  IN p_minrearingcharges DECIMAl(9,3),
  IN p_exbirdincentive DECIMAl(9,3),
  IN p_totalmortality INT,
  IN p_incentiveperkg DECIMAl(9,3),
  In p_shortrecoveryper DECIMAL(9,3),
  IN p_companyid INT(11),
  IN p_userid INT,
  OUT out_id INT
  )
BEGIN
SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO coststructure
				(name, chickcost, administrationcost, fromdate,
                todate, mortalitydeduction,feedcost, medicinecost, 
                vaccinecost, changeformula, onbird, birdincentiveperkg, 
                birdincentiveperbird, birdincentivepercentage, productionincentive,
                costexceeds, mortalityweek, mortalitypercentage, cummulativeper,
                firstweekmortalityper, shortrecovery, minrearingcharges,
                exbirdincentive, totalmortality, incentiveperkg,
				shortrecoveryper ,companyid)
			VALUES 
				(p_name, p_chickcost, p_administrationcost, p_fromdate,
                p_todate, p_mortalitydeduction, p_feedcost, p_medicinecost,
                p_vaccinecost, p_changeformula, p_onbird, p_birdincentiveperkg,
                p_birdincentiveperbird, p_birdincentivepercentage, p_productionincentive,
				p_costexceeds, p_mortalityweek, p_mortalitypercentage, p_cummulativeper,
                p_firstweekmortalityper, p_shortrecovery, p_minrearingcharges,
                p_exbirdincentive, p_totalmortality, p_incentiveperkg,
				p_shortrecoveryper, p_companyid);
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE coststructure
				SET name = p_name,
                chickcost = p_chickcost,
                administrationcost = p_administrationcost,
                fromdate = p_fromdate,
                todate = p_todate,
                mortalitydeduction = p_mortalitydeduction,
                feedcost = p_feedcost,
                medicinecost = p_medicinecost, 
                vaccinecost = p_vaccinecost,
                changeformula = p_changeformula,
                onbird = p_onbird, 
                birdincentiveperkg = p_birdincentiveperkg, 
                birdincentiveperbird = p_birdincentiveperbird,
                birdincentivepercentage = birdincentivepercentage, 
                productionincentive = p_productionincentive,
				costexceeds = p_costexceeds,
                mortalityweek = p_mortalityweek, 
                mortalitypercentage = p_mortalitypercentage,
                cummulativeper = p_cummulativeper,
                firstweekmortalityper = p_firstweekmortalityper,
                shortrecovery = p_shortrecovery,
                minrearingcharges = p_minrearingcharges,
                exbirdincentive = p_exbirdincentive,
                totalmortality = p_totalmortality, 
                incentiveperkg = p_incentiveperkg,
                shortrecoveryper = p_shortrecoveryper,
				companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'coststructure', out_id, @action, p_userid);

    

END;



CREATE PROCEDURE `spc_coststructure_search`(
 IN p_companyid INT
)
BEGIN

	SELECT id,
		 name, chickcost, 
         administrationcost, 
		 DATE_FORMAT(fromdate,'%d/%m/%Y') as fromdate,
		 DATE_FORMAT(todate,'%d/%m/%Y') as todate, mortalitydeduction,
         feedcost, medicinecost, 
         vaccinecost, changeformula,
         onbird, birdincentiveperkg, 
		 birdincentiveperbird, birdincentivepercentage,
         productionincentive,
         costexceeds, mortalityweek,
         mortalitypercentage, cummulativeper,
		firstweekmortalityper, shortrecovery, 
        minrearingcharges, exbirdincentive,
        totalmortality, incentiveperkg, shortrecoveryper
		 companyid
	FROM
		coststructure 
	
	WHERE
		companyid = p_companyid; 
END;



CREATE PROCEDURE `spc_coststructure_select`(
 IN p_id INT
)
BEGIN

	SELECT id,
		 name, chickcost, 
         administrationcost,
         DATE_FORMAT(fromdate,'%d/%m/%Y') as fromdate,
		 DATE_FORMAT(todate,'%d/%m/%Y') as todate, mortalitydeduction,
         feedcost, medicinecost, 
         vaccinecost, changeformula,
         onbird, birdincentiveperkg, 
		 birdincentiveperbird, birdincentivepercentage,
         productionincentive,
         costexceeds, mortalityweek, mortalitypercentage, cummulativeper,
		 firstweekmortalityper, shortrecovery, minrearingcharges,
		 exbirdincentive, totalmortality, incentiveperkg,shortrecoveryper
		 companyid
	FROM
		coststructure 
	
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
END;



CREATE PROCEDURE `spc_country_search`(
    
)
BEGIN
    
    SELECT
		 id,
         countrycode,
         countryname
	
    FROM
		country;
END;



CREATE PROCEDURE `spc_country_select`(
	IN p_id INT
)
BEGIN

	SELECT
		id,
		countrycode,
        countryname
        
	FROM
		country
        
	WHERE
		  (
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
        
END;



CREATE PROCEDURE `spc_dailybrodGrowReport_serch`(
 IN p_breederbatchid INT,
 IN p_shedids varchar(300), 
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_companyid INT)
BEGIN

	-- SET p_shedids = '47,49';
	SET @defaultmalechickid = null;
	SET @defaultfemalechickid = null;
    SET @maleopbal = NULL;
	SET @femaleopbal = NULL;
	SET @femalemortality = NULL;
    SET @femalemortality = NULL;
	SET @maleculls = NULL;
    SET @femaleculls = NULL;
	SET @bodyweightmaleact = NULL;
    SET @bodyweightfemaleact = NULL;
    SET @itemgroupid = NUll;
    SET @bodyweightmalestd = null;
	SET @bodyweightfemalestd = null;
    SET @placementdate = NOW();
    
    SELECT  
		maleitemid,femaleitemid
		INTO @defaultmalechickid,@defaultfemalechickid
	FROM
		breederbatch
        
        WHERE 
            id = p_breederbatchid AND
			companyid = p_companyid limit 1;


     SELECT  
		 malestandardweight,femalestandardweight
	FROM
		breedersetting
        WHERE 
			companyid = p_companyid limit 1;


		SELECT
				BDT.breederbatchid, 
				BDT.shedid, 
                BDM.shedlineid,
				DATE_FORMAT(BDT.transactiondate, '%d/%m/%Y') as transactiondate,
				BDM.itemid,
                BS.shedname,
				CASE WHEN BDM.itemid = @defaultmalechickid THEN  IFNULL(fnc_batchwise_malefemaleopbalance(p_breederbatchid, BDT.shedid, @defaultmalechickid ,BDT.transactiondate), 0) ELSE 0 END as maleclosingbalance,
                CASE WHEN BDM.itemid = @defaultfemalechickid THEN  IFNULL(fnc_batchwise_malefemaleopbalance(p_breederbatchid, BDT.shedid, @defaultfemalechickid ,BDT.transactiondate), 0) ELSE 0 END as femaleclosingbalance,
                CASE WHEN BDM.itemid = @defaultmalechickid THEN BDM.totalmortality ELSE 0 END as malemortality,
				CASE WHEN BDM.itemid = @defaultfemalechickid THEN BDM.totalmortality ELSE 0 END as femalemortality,
                CASE WHEN BDM.itemid = @defaultmalechickid THEN BDM.totalculls ELSE 0 END as maleculls,
				CASE WHEN BDM.itemid = @defaultfemalechickid THEN BDM.totalculls ELSE 0 END as femaleculls,
				CASE WHEN BDM.itemid = @defaultmalechickid THEN BDM.avgweight ELSE 0 END as maleactualweight,
				CASE WHEN BDM.itemid = @defaultfemalechickid THEN BDM.avgweight ELSE 0 END as femaleactualweight,
                fnc_calculate_received_feed(BDT.shedid,BDC.itemid, BDT.transactiondate, p_companyid) as receivedfeed,
                fnc_breederfeedopeningbalance(BDT.transactiondate,BDT.shedid,BDC.itemid ,p_companyid) as totalreceivedfeed,
				fnc_calculate_transfered_feed(BDT.shedid,BDC.itemid, BDT.transactiondate, p_companyid) as transferedfeed,
			 	fnc_calculate_malefemale_feedconsumption(BDT.id,@defaultmalechickid) as malefeedconsumption,
                fnc_calculate_malefemale_feedconsumption(BDT.id,@defaultfemalechickid) as femalefeedconsumption,
                CASE WHEN BDM.itemid = @defaultmalechickid THEN  IFNULL(fnc_cummulative_malefemalemortality(p_breederbatchid, BDT.shedid, @defaultmalechickid ,BDT.transactiondate), 0) ELSE 0 END as cumulativemalemortality,
                CASE WHEN BDM.itemid = @defaultfemalechickid THEN  IFNULL(fnc_cummulative_malefemalemortality(p_breederbatchid, BDT.shedid, @defaultfemalechickid ,BDT.transactiondate), 0) ELSE 0 END as cumulativefemalemortality,
				CASE WHEN BDM.itemid = @defaultmalechickid THEN  IFNULL(fnc_cummulative_malefemaleculls(p_breederbatchid, BDT.shedid, @defaultmalechickid ,BDT.transactiondate), 0) ELSE 0 END as cumulativemaleculls,
                CASE WHEN BDM.itemid = @defaultfemalechickid THEN  IFNULL(fnc_cummulative_malefemaleculls(p_breederbatchid, BDT.shedid, @defaultfemalechickid ,BDT.transactiondate), 0) ELSE 0 END as cumulativefemaleculls,
                CASE WHEN BDM.itemid = @defaultmalechickid THEN  IFNULL(fnc_batchopningbalance(p_breederbatchid, BDT.shedid, @defaultmalechickid ), 0) ELSE 0 END as batchmaleopeningbal,
                CASE WHEN BDM.itemid = @defaultfemalechickid THEN  IFNULL(fnc_batchopningbalance(p_breederbatchid, BDT.shedid, @defaultfemalechickid), 0) ELSE 0 END as batchfemaleopningbal,
				fnc_cummulativefeed(p_breederbatchid,BDC.itemid, BDT.shedid,BDT.transactiondate,p_companyid) as cummulativefeedconsumption
                
                -- fnc_cummulativefeed
	    FROM breederdailytransaction BDT
        LEFT JOIN breederdailymortality BDM ON BDM.breederdailytransactionid = BDT.id
        LEFT JOIN breederdailyconsumption BDC ON BDC.breederdailytransactionid = BDT.id AND BDC.consumptiontypeid = 861
         LEFT JOIN breedershed BS ON BDT.shedid = BS.id
        
        WHERE
				BDT.breederbatchid = p_breederbatchid
                AND FIND_IN_SET(BDT.shedid, p_shedids)
				AND BDT.transactiondate between p_fromdate AND p_todate
              
                order by BDT.breederbatchid, BDT.shedid, BDT.transactiondate, BDM.itemid;
    
    END;



CREATE PROCEDURE `spc_dailyconsumption_report`(
 IN p_batchid INT,
 IN p_fromdate Date,
 IN p_todate Date,
 IN p_companyid INT)
BEGIN

	SET @batchwarehouseid = null;
 
	SELECT 
		warehouseid INTO @batchwarehouseid
	FROM
		breederbatch 
	WHERE
		id = p_batchid;
        
	SELECT 
		BC.itemid,
		IG.id as itemgroupid,
		IG.groupname,
		I.itemname,
		 DATE_FORMAT(BDT.transactiondate,'%d/%m/%Y')  as `date`,
		fnc_calculate_itemopeningbalance_tillgivendate(BC.itemid, @batchwarehouseid, BDT.transactiondate, p_companyid) as openingbalance,
		fnc_calculate_receivedfeedquantity_ongivendate(BC.itemid, @batchwarehouseid, BDT.transactiondate, p_companyid) as receivedquantity,
		fnc_calculate_outfeedquantity_ongivendate(BC.itemid, @batchwarehouseid, BDT.transactiondate, p_companyid) as outquantity,
		BC.quantity as consumedquantity,
        fnc_calculate_cumconsumedquantity(p_batchid, BC.itemid, BDT.transactiondate, p_companyid) as cumconsumedquantity
        
		-- (Openingbalance + receivedquantity) - (outquantity + consumedquantity) as closingbalance
    
    
	FROM breederdailyconsumption BC
		 LEFT JOIN breederdailytransaction BDT ON BC.breederdailytransactionid = BDT.id
         LEFT JOIN item I ON I.id = BC.itemid
         LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
 
	WHERE
		BDT.breederbatchid = p_batchid AND
		BDT.transactiondate >= p_fromdate AND BDT.transactiondate <= p_todate AND
        BDT.companyid = p_companyid
    
	ORDER BY 
		-- IG.id, I.itemname, BDT.transactiondate;
         BDT.transactiondate;
        
END;



CREATE PROCEDURE `spc_daybook_report`(
IN p_date DATE,
IN p_companyid INT
)
BEGIN
   SELECT
   JE.id as vouchernumber,
   DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as date,
   JE.partyid,
   JE.narration,
   JED.acledgerid as particular,
   JE.vouchertypeid,
   JED.dramount as dramount,
   JED.cramount as cramount,
   R.refname as vouchertype,
   P.partyname
   
FROM
		journalentry JE
	
    LEFT JOIN journalentrydetail JED ON JE.id = JED.journalentryid
	LEFT JOIN `reference` R ON  JE.vouchertypeid = R.id
    LEFT JOIN party P ON  JE.partyid = P.id
   
	
	WHERE
		voucherdate = p_date AND
        JE.companyid = p_companyid;
      

END;



CREATE PROCEDURE `spc_deduction_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM deduction WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'deduction', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_deduction_save`(
   IN p_id INT(11),
   IN p_coststructureid INT(11),
   IN p_fromdays INT(11),
   IN p_todays INT(11),
   IN p_perratebird DECIMAl(9,3),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO deduction 
				(coststructureid, fromdays, todays, perratebird, companyid)
			VALUES 
				(p_coststructureid, p_fromdays, p_todays, p_perratebird, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE deduction
				SET coststructureid = p_coststructureid,
					fromdays = p_fromdays,
                    todays = p_todays,
                    perratebird = p_perratebird,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'deduction', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_deduction_search`(
 IN p_coststructureid INT
)
BEGIN

	SELECT 
		 id,
         coststructureid,
         fromdays,
         todays,
         perratebird,
         companyid
         
	FROM
		deduction 
        
	WHERE
		 coststructureid = p_coststructureid;
END;



CREATE PROCEDURE `spc_deduction_select`(
  IN p_id INT
)
BEGIN

	SELECT 
		 id,
         coststructureid,
         fromdays,
         todays,
         perratebird,
         companyid
         
	FROM
		deduction 
        
	WHERE
		  (
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
END;



CREATE PROCEDURE `spc_density_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM density WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'density', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_density_save`(
 IN p_id INT(11),
 IN p_locationid INT(11),
 IN p_shedtypeid VARCHAR(200),
 IN p_densityperbird Decimal(9,3),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO density
              (locationid, shedtypeid, densityperbird, companyid)
       VALUES
            (p_locationid, p_shedtypeid, p_densityperbird, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE density 
   
	SET 
		locationid = p_locationid,
		shedtypeid = p_shedtypeid,
		densityperbird = p_densityperbird,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'density', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_density_search`( 

 IN p_companyid INT(11)
)
BEGIN

	SELECT
    D.id,
    D.locationid,
    D.shedtypeid,
    D.densityperbird,
    D.companyid,
    L.locationname,
    ST.shedtype
           
	FROM density D
     LEFT JOIN location L ON L.id = D.locationid
     LEFT JOIN cbfshedtype ST ON ST.id = D.shedtypeid
    
    WHERE D.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_density_select`(
 IN p_id INT(11)
)
BEGIN

	SELECT
    D.id,
    D.locationid,
    D.shedtypeid,
    D.densityperbird,
    D.companyid,
    L.locationname,
    ST.shedtype
           
	FROM density D
     LEFT JOIN location L ON L.id = D.locationid
     LEFT JOIN cbfshedtype ST ON ST.id = D.shedtypeid
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND D.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_dimension_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM accounts_dimension WHERE id = p_id;

END;



CREATE PROCEDURE `spc_dimension_save`(
   IN p_id INT(11),
   IN p_dimensioncode VARCHAR(100),
   IN p_dimensionname VARCHAR(150),
   IN p_description VARCHAR(100),
   IN p_isactive TINYINT(4),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO accounts_dimension 
				(id, dimensioncode,
				   dimensionname,
				   description,
				   isactive, companyid)
			VALUES 
				(p_id, p_dimensioncode,
				   p_dimensionname,
				   p_description,
				   p_isactive, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE accounts_dimension
				SET dimensioncode = p_dimensioncode,
				    dimensionname = p_dimensionname,
			        description = p_description,
			        isactive = p_isactive,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'accounts_dimension', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_dimension_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
		   dimensioncode,
           dimensionname,
           description,
           isactive
           
    FROM accounts_dimension


	WHERE companyid = p_companyid;
    

END;



CREATE PROCEDURE `spc_dimension_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT id,
		   dimensioncode,
           dimensionname,
           description,
           isactive
           
    FROM accounts_dimension


	WHERE id = p_id;
    

END;



CREATE PROCEDURE `spc_diseasedetail_delete`(  
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM diseasedetail WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'diseasedetail', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_diseasedetail_save`(
 IN p_id INT(11),
 IN p_diseaseid INT(11),
 IN p_treatment VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO diseasedetail
              (diseaseid, treatment, companyid)
       VALUES
            (p_diseaseid, p_treatment, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE diseasedetail 
   
	SET diseaseid = p_diseaseid,
        treatment = p_treatment,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'diseasedetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_diseasedetail_search`(
IN p_diseaseid INT(11)
)
BEGIN

	SELECT id, treatment, companyid
           
	FROM diseasedetail
    
    WHERE diseaseid  = p_diseaseid ;

END;



CREATE PROCEDURE `spc_disease_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM disease WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'disease', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_disease_save`(
 IN p_id INT(11),
 IN p_diseasename VARCHAR(200),
 IN p_diagnosis VARCHAR(200),
 IN p_organid INT(11),
 IN p_lesionid INT(11),
 IN p_symptomsid INT(11),
 IN p_remark varchar(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO disease
              (diseasename, diagnosis, organid, lesionid, symptomsid, remark, companyid)
       VALUES
            (p_diseasename, p_diagnosis, p_organid, p_lesionid, p_symptomsid, p_remark, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE disease 
   
	SET diseasename = p_diseasename,
		diagnosis = p_diagnosis,
        organid = p_organid,
        lesionid = p_lesionid,
        symptomsid = p_symptomsid,
        remark = p_remark,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'disease', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_disease_search`(
IN p_companyid INT(11)
)
BEGIN

	SELECT 
		D.id,
		diseasename,
		diagnosis,
		D.organid,
		D.lesionid,
		D.symptomsid,
		D.companyid,
		O.organname,
		LD.lesionname,
        D.remark,
		SD.symptomsname
           
	FROM disease D
    
    LEFT JOIN organ O ON O.id = D.organid
    LEFT JOIN lesiondetail LD ON LD.lesionid = D.lesionid
    LEFT JOIN symptomsdetail SD ON SD.symptomsid = D.symptomsid
    
    WHERE D.companyid = p_companyid
    
    order by SD.id DESC;
 
END;



CREATE PROCEDURE `spc_disease_select`( 
IN p_id INT(11)
)
BEGIN

	SELECT id,
		   diseasename,
		   diagnosis,
		   organid,
		   lesionid,
		   symptomsid,
           remark,
		   companyid
				   
	FROM disease
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_document_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM document WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'document', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_document_save`(
 IN p_id INT(11),
 IN p_documentname VARCHAR(200),
 IN p_ismandatory TINYINT,
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO document
              (documentname, ismandatory, companyid)
       VALUES
            (p_documentname, p_ismandatory, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE document 
   
	SET documentname = p_documentname,
        ismandatory = p_ismandatory,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'document', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_document_search`(
  IN p_companyid INT(11)
)
BEGIN

	SELECT id, documentname, ismandatory, companyid
           
	FROM document
    
    WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_document_select`( 
   IN p_id INT(11)
)
BEGIN

	SELECT id, documentname, ismandatory, companyid
           
	FROM document
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_eggscollectiondetail_save`(
	IN p_Id INT(11),
	IN p_eggscollectionid INT(11),
	IN p_shedid INT(11),
	IN p_shedlineid INT(11),
    IN p_quantity INT(11),
    IN p_stdquantity INT(11),
    IN p_time VARCHAR(50),
    IN p_companyid INT(11),
    IN p_userid INT,
	OUT out_id INT
)
BEGIN
SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO eggscollectiondetail 
				(eggscollectionid, shedid, shedlineid, quantity, stdquantity, time, companyid)
			VALUES 
				(p_eggscollectionid, p_shedid, p_shedlineid, p_quantity, p_stdquantity, p_time, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE eggscollectiondetail
        
			SET eggscollectionid = p_eggscollectionid,	
				shedid	= p_shedid,
				shedlineid	 = p_shedlineid,
				quantity = p_quantity,
                stdquantity = p_stdquantity,
                time = p_time,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
			
             
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
   -- record log
   CALL spc_commonlog_save(p_companyid, 'eggscollectiondetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_eggscollectiondetail_select`(
 IN p_eggscollectionid INT ,
 IN p_companyid INT)
BEGIN

	SELECT 
		EGD.id,
        EGD.eggscollectionid,
        shedid,
        shedlineid,
        quantity,
        stdquantity,
        time,
        SL.linename,
        EGD.companyid
        
        
	FROM
		eggscollectiondetail EGD
    
    LEFT JOIN breedershedline SL ON EGD.shedlineid = SL.id
    
	WHERE
		EGD.eggscollectionid = p_eggscollectionid AND
        EGD.companyid = p_companyid; 
END;



CREATE PROCEDURE `spc_eggscollectionion_sum`(
 IN p_fromdate  DATE,
 IN p_todate DATE,
 IN p_breederbatchid INT,
 IN  p_shedid INT
 )
BEGIN
 SELECT
          EC.id,
          Ec.collectiondate,
		  ECD.quantity as collectionqty,
		  -- ED.itemid,
          --  case when itemid = '9' then ED.quantity  else NULL end as "Hatching Eggs",
          -- case when itemid = '10' then ED.quantity   else NULL end as "Commercial Eggs",
          -- case when itemid = '3' then ED.quantity   else NULL end as "Cracked Eggs",
           -- case when itemid = '11' then ED.quantity  else NULL end as "Double Yolk",
		   ED.quantity as itemquantity,
		  I.itemname
          
       
    FROM
		eggscollection EC
        
		 LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id
         LEFT JOIN eggsdistributiondetail ED ON ED.eggscollectionid = EC.id 
		 LEFT JOIN item I ON ED.itemid = I.id
	
	WHERE
		EC.breederbatchid = p_breederbatchid AND
        EC.shedid = p_shedid AND
		EC.collectiondate BETWEEN p_fromdate AND p_todate
		group by Ec.collectiondate ;
END;



CREATE PROCEDURE `spc_eggscollection_approve_select`(
	p_breederbatchid INT,
	p_shedid INT,
	p_companyid int
 )
BEGIN

	SET @isapproved = 0;

 
	SELECT 
  
    CASE when ED.statusid = 842 then 
	 @isapproved := 1 else 
     @isapproved := 0 end as isapproved
  -- ED.statusid
  
	FROM
		
        eggscollection EC
        LEFT JOIN eggsdistributiondetail ED ON EC.id = ED.eggscollectionid
									AND EC.shedid = ED.shedid
        
	WHERE
        ED.shedid =  p_shedid
        AND EC.breederbatchid = p_breederbatchid
        AND ED.companyid = p_companyid
        order by ED.id DESC
         limit 1;
     
    
END;



CREATE PROCEDURE `spc_eggscollection_breederbatch_search`(
 IN p_companyid INT,
 IN p_locationid varchar(200)
 )
BEGIN 
SET @location = p_locationid;

 SELECT
		  EC.id,
		  EC.breederbatchid,
		  BB.batchname,
		  L.locationcode,
		  L.locationname,
		  W.warehousecode,
		  W.warehousename,
		  BB.statusid,
		  REF.refname as batchstatus
          
       
    FROM
		eggscollection EC
        
		 LEFT JOIN breederbatch BB ON EC.breederbatchid =BB.id AND 
         FIND_IN_SET(BB.locationid,@location) 
		 LEFT JOIN location L ON BB.locationid = L.id 
		 LEFT JOIN warehouse W ON BB.warehouseid = W.id
		 INNER JOIN `reference`REF ON REF.id = BB.statusid
	
	WHERE
        EC.companyid = p_companyid 
        
        GROUP BY EC.breederbatchid;
END;



CREATE PROCEDURE `spc_eggscollection_byshed_select`(
IN p_shedid INT,
IN p_cpmapnyid INT
)
BEGIN

	SELECT 
		EG.id,
        EG.breederbatchid,
        EG.shedid,
        EG.createdby,
		DATE_FORMAT(BP.placementdate,'%d/%m/%Y') as batchplacementdate,
		DATE_FORMAT(EG.collectiondate,'%d/%m/%Y') as collectiondate,
        DATE_FORMAT(EG.productionstartdate,'%d/%m/%Y') as productionstartdate,
        EG.productionweek,
        EG.approvedby,
        EG.approvaldate,
        EG.statusid,
        EG.remark,
        EG.companyid,
        S.shedname,
        REF.refname as statusname,
        BB.batchname,
		(SELECT IF( EXISTS(
             SELECT id
             FROM eggsdistributiondetail
             WHERE eggscollectionid = EG.id AND statusid = 842), 'YES','NO') ) as isDistributiondone
        
        
	FROM
		eggscollection EG
		LEFT JOIN breedershed S ON EG.shedid = S.id
        LEFT JOIN `reference` REF ON EG.statusid = REF.id
        LEft JOIN breederbatch BB ON EG.breederbatchid = BB.id
        LEft JOIN breederbatchplacement BP ON EG.breederbatchid = BP.breederbatchid
		
	WHERE
		EG.shedid = p_shedid AND
        EG.companyid = p_cpmapnyid 
        ;
END;



CREATE PROCEDURE `spc_eggscollection_forshed`(
 IN p_breederbatchid VARCHAR(200)
 )
BEGIN
SET @breederbatch = p_breederbatchid;
 SELECT 
    EC.Shedid,
    S.shedname,
    REF.refname as statusname
    
    
    FROM
		eggscollection EC
        
		LEFT JOIN breedershed S ON EC.shedid = S.id
        LEFT JOIN `reference` REF ON EC.statusid = REF.id
	
	WHERE
		
        FIND_IN_SET(EC.breederbatchid,@breederbatch) 
        group by  EC.Shedid;
END;



CREATE PROCEDURE `spc_eggscollection_forshedwise_select`(
 IN p_companyid INT
)
BEGIN

	SET @defaultcommercialeggsitemid = null;
    SET @defaultcrackedeggsitemid = NULL;
	SET @defaultdoubleyolkeggsitemid = NULL;
    SET @hatchingitemgroupids = NULL;
    
    SELECT  
		defaultcommercialeggsitemid,defaultcrackedeggsitemid,defaultdoubleyolkeggsitemid,hatchingitemgroupids
		INTO @defaultcommercialeggsitemid,@defaultcrackedeggsitemid,@defaultdoubleyolkeggsitemid,@hatchingitemgroupids
	FROM
		breedersetting
	WHERE companyid = p_companyid;

	DROP TEMPORARY TABLE IF EXISTS eggsitem;
	-- CREATE TEMPORARY TABLE tmppurregreport
    create temporary table eggsitem
		(	id INT(11) ,
			itemid INT(11) not null,
            itemtypeid INT(11),
			quantity INT(11) ,
			avgweight INT(11),
			remark VARCHAR(200)
		);
insert into eggsitem
(itemid, itemtypeid, quantity,avgweight) VALUES
(@defaultcommercialeggsitemid,882, 0, 0);
insert into eggsitem
(itemid, itemtypeid, quantity,avgweight) VALUES
(@defaultcrackedeggsitemid, 883, 0, 0);
insert into eggsitem
(itemid, itemtypeid, quantity,avgweight) VALUES
(@defaultdoubleyolkeggsitemid, 884, 0, 0);

SELECT EI.id,itemid, itemtypeid, quantity, avgweight, remark, I1.itemname from eggsitem EI
LEFT JOIN item I1 ON EI.itemid = I1.id

UNION all

SELECT
	 null as id,
	id as itemid,
    881 as itemtypeid,
	'0' as quantity,
	'0' as avgweight,
	null as remark,
	itemname
FRom item
WHERE itemgroupid = @hatchingitemgroupids;
END;



CREATE PROCEDURE `spc_eggscollection_groupbydate_search`(
IN p_companyid INT
)
BEGIN

 SELECT
	EC.id as eggscollectionid,
    DATE_FORMAT( EC.collectiondate,'%d/%m/%Y') as collectiondate,
    EC.breederbatchid,
    EC.shedid,
    EC.statusid, 
    sum(ECD.quantity) AS totalquantity,
    R.refname as statusname,
    BR.batchname,
    BS.shedname
    
FROM 
	eggscollection EC

INNER JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id
 LEFT JOIN reference R ON EC.statusid = R.id
 LEFT JOIN breederbatch BR ON EC.breederbatchid= BR.id
 LEFT JOIN breedershed BS ON EC.shedid= BS.id 

WHERE EC.statusid = 803 AND
EC.companyid = p_companyid
GROUP BY EC.id,
    EC.collectiondate,
    EC.breederbatchid,
    EC.shedid,
    EC.statusid, 
    R.refname
    
 ORDER by EC.id desc;

END;



CREATE PROCEDURE `spc_eggscollection_report`(
IN p_breederbatchid VARCHAR(200),
IN p_shedid VARCHAR(200),
IN p_fromdate DATE,
IN p_todate DATE,
IN p_frequency VARCHAR(50),
IN p_companyid INT


)
BEGIN

    SET @breederbatchid = p_breederbatchid;
    SET @shedid = p_shedid;
	SET @hatchingitemgroupids = null;
	SET @defaultcommercialeggsitemid = null;
	SET @defaultcrackedeggsitemid = null;
	SET @defaultdoubleyolkeggsitemid = null;
    SET @hatchqty = NULL;
	SET @commerqty = NULL;
	SET @creackedqty = NULL;
	SET @doubleyolkqty = NULL;
	SET @hatchingeggsA = NULl;
    SET @itemid = null;
    
    SELECT  
		hatchingitemgroupids,defaultcommercialeggsitemid,
		defaultcrackedeggsitemid,defaultdoubleyolkeggsitemid
		INTO @hatchingitemgroupids,@defaultcommercialeggsitemid,
		@defaultcrackedeggsitemid, @defaultdoubleyolkeggsitemid
        
	FROM
		breedersetting
        
        WHERE 
			companyid = p_companyid limit 1;
            
          
if(p_frequency = 'day')then   

   SELECT
		 SUM(ECD.quantity) as Quantity,
         DATE_FORMAT( EC.collectiondate,'%d/%m/%Y') as collectiondate
		 
       
    FROM
		eggscollection EC
        
		 LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id 
	
	WHERE
		 FIND_IN_SET(  EC.breederbatchid,@breederbatchid) AND
        FIND_IN_SET( EC.shedid,@shedid) AND
		EC.collectiondate BETWEEN p_fromdate AND p_todate AND
        EC.companyid = p_companyid AND
        EC.statusid = 803
		group by EC.collectiondate;

 

         
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(itemid INT(11),
itemname VARCHAR(200),
eggscollectionid INT(11),
Collectiondate VARCHAR(200),
quantity VARCHAR(200));

INSERT INTO tempmortality1 
 select 
	itemid,
     REPLACE(I.itemname, ' ', '-')as itemname,
	eggscollectionid,
   DATE_FORMAT(collectiondate,'%d/%m/%Y') as Collectiondate,
	quantity
	 
		FROM eggsdistributiondetail ED
		LEFT JOIN item I ON ED.itemid = I.id
		
	WHERE eggscollectionid in (select id from eggscollection where  FIND_IN_SET(breederbatchid,@breederbatchid) and FIND_IN_SET(shedid,@shedid) AND statusid = 803)
	AND collectiondate BETWEEN p_fromdate AND p_todate 
	AND  statusid = 842;


SELECT * FROM tempmortality1;

SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality1;
SET @sql = CONCAT('SELECT Collectiondate, ', @sql, ' 
                  FROM tempmortality1 
                   GROUP BY Collectiondate');

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
        
        
	END IF;
         
         
         
	 if(p_frequency = 'week') then
     	SELECT sum(collectionqty) as Quantity, DATE_FORMAT(week_start,'%d/%m/%Y') as week_start, DATE_FORMAT(week_end,'%d/%m/%Y') as week_end  from (
	SELECT
		 SUM(ECD.quantity) as collectionqty,
		   EC.collectiondate, FIRST_DAY_OF_WEEK(Ec.collectiondate) AS week_start,
           
           DATE_ADD(FIRST_DAY_OF_WEEK(EC.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(EC.collectiondate))) DAY)
            AS week_end
         
    FROM
		eggscollection EC
        
		 LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id 
	
	WHERE
		FIND_IN_SET(  EC.breederbatchid,@breederbatchid) AND
        FIND_IN_SET( EC.shedid,@shedid) AND
		EC.collectiondate BETWEEN p_fromdate AND p_todate AND
        EC.companyid = p_companyid AND
        EC.statusid = 803
		group by EC.collectiondate, FIRST_DAY_OF_WEEK(EC.collectiondate) ,
        DATE_ADD(FIRST_DAY_OF_WEEK(EC.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(EC.collectiondate))) DAY)
        
	) as temp 
    group by week_start, week_end
    order by week_start;


        
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(itemid INT(11),
itemname VARCHAR(200),
eggscollectionid INT(11),
week_start VARCHAR(200),
week_end varchar(200),
quantity VARCHAR(200));

INSERT INTO tempmortality1 
select 
        itemid,
        REPLACE(I.itemname, ' ', '-')as itemname,
        eggscollectionid,
        DATE_FORMAT(FIRST_DAY_OF_WEEK(collectiondate),'%d/%m/%Y') AS week_start,
        DATE_FORMAT(DATE_ADD(FIRST_DAY_OF_WEEK(collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(collectiondate))) DAY),'%d/%m/%Y')
            AS week_end,
            quantity
       
            FROM eggsdistributiondetail ED
            LEFT JOIN item I ON ED.itemid = I.id
		WHERE eggscollectionid in (select id from eggscollection where FIND_IN_SET(breederbatchid,@breederbatchid) and FIND_IN_SET(shedid,@shedid) and statusid=803)
		AND collectiondate  BETWEEN p_fromdate AND p_todate AND  statusid = 842;
      --   group by week_start, week_end
      -- order by week_start;

SELECT * FROM tempmortality1;

SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality1;
SET @sql = CONCAT('SELECT week_start, week_end, ', @sql, ' 
                  FROM tempmortality1 
                   GROUP BY week_start');

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
    
	  END IF;
      
     if (p_frequency='month') then
       
     SELECT
		 SUM(ECD.quantity) as Quantity,
		   MONTHNAME(EC.collectiondate) as  month
         
          
       
    FROM
		eggscollection EC
        
		 LEFT JOIN eggscollectiondetail ECD ON ECD.eggscollectionid = EC.id 
	
	WHERE
		 FIND_IN_SET(  EC.breederbatchid,@breederbatchid) AND
        FIND_IN_SET( EC.shedid,@shedid) AND
		EC.collectiondate BETWEEN p_fromdate AND p_todate AND
        EC.companyid = p_companyid AND
        EC.statusid = 803
		group by   MONTHNAME(EC.collectiondate) ;
               
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(itemid INT(11),
itemname VARCHAR(200),
eggscollectionid INT(11),
Month VARCHAR(200),
quantity VARCHAR(200));

INSERT INTO tempmortality1 
select 
	 itemid,
	 REPLACE(I.itemname, ' ', '-')as itemname,
	 eggscollectionid,
     MONTHNAME(collectiondate) as Month,
     quantity
      
            FROM eggsdistributiondetail ED
             LEFT JOIN item I ON ED.itemid = I.id
		WHERE eggscollectionid in (select id from eggscollection  where FIND_IN_SET(breederbatchid,@breederbatchid) and FIND_IN_SET(shedid,@shedid) AND  statusid = 803)
		AND collectiondate BETWEEN p_fromdate AND p_todate
         AND  statusid = 842;

SELECT * FROM tempmortality1;

SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality1;
SET @sql = CONCAT('SELECT Month, ', @sql, ' 
                  FROM tempmortality1 
                   GROUP BY Month');

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
        
        END IF;
        
END;



CREATE PROCEDURE `spc_eggscollection_save`(

	IN p_id INT(11)	,
	IN p_breederbatchid INT(11),
	IN p_shedid INT(11),
	IN p_createdby INT(11),
	IN p_collectiondate DATE,	
	IN P_productionstartdate DATE,
	IN p_approvedby INT(11),
	IN p_approvaldate date,	
	IN p_statusid INT(11),	
	IN P_remark varchar(200),	
	IN p_companyid INT(11),
	IN p_userid INT,
	OUT out_id INT
    )
BEGIN
    SET @action = null;
    SET @defaultchickwarehouseid = null;
    
    -- Get default Male and Female chick item
    SELECT  
			defaultchickwarehouseid
			INTO @defaultchickwarehouseid
	FROM
		breedersetting BS
    WHERE 
		BS.companyid = p_companyid limit 1;
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO eggscollection 
				(breederbatchid, shedid, createdby, collectiondate, productionstartdate, approvedby, 
                approvaldate, statusid, remark, companyid )
			VALUES 
				(p_breederbatchid, p_shedid, p_createdby, p_collectiondate, p_productionstartdate, p_approvedby, p_approvaldate, 
                p_statusid, p_remark, p_companyid );
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE eggscollection
        
			SET breederbatchid = p_breederbatchid, 
				shedid = p_shedid,
                createdby = p_createdby,
				collectiondate = p_collectiondate,
				productionstartdate = p_productionstartdate,
				approvedby = p_approvedby, 
				approvaldate = p_approvaldate,
				statusid = p_statusid, 
				remark = p_remark,  
				companyid  = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
			
             
           SET @action = 'UPDATE';     
                
		-- update towarehouseid when statusid is 803 = 'transfer & approved
        UPDATE eggscollection SET towarehouseid = @defaultchickwarehouseid where statusid = 803;
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
   -- record log
   CALL spc_commonlog_save(p_companyid, 'eggscollection', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_eggscollection_search`(
IN p_companyid INT
)
BEGIN
  SELECT
		EG.id,
        DATE_FORMAT( EG.collectiondate,'%d/%m/%Y') as collectiondate,
        EG.statusid,
        EG.shedid,
        R.refname as statusname,
        BS.shedname,
        EG.companyid
	
    FROM
		eggscollection EG
        
        LEFT JOIN reference R ON EG.statusid = R.id
        LEFT JOIN breedershed BS ON EG.shedid = BS.id
	
	WHERE
		EG.companyid = p_companyid
		
        ORDER by EG.id desc;
END;



CREATE PROCEDURE `spc_eggscollection_select`(
IN p_collectiondate date,
IN p_id INT,
IN p_cpmapnyid INT
)
BEGIN

	SELECT 
		EG.id,
        EG.breederbatchid,
        EG.shedid,
        EG.createdby,
         DATE_FORMAT(BP.placementdate,'%d/%m/%Y') as batchplacementdate,
		DATE_FORMAT(EG.collectiondate,'%d/%m/%Y') as collectiondate,
        DATE_FORMAT(EG.productionstartdate,'%d/%m/%Y') as productionstartdate,
        EG.productionweek,
        EG.approvedby,
        EG.approvaldate,
        EG.statusid,
        EG.remark,
        EG.companyid,
        S.shedname,
        REF.refname as statusname,
        BB.batchname
        
        
	FROM
		eggscollection EG
		LEFT JOIN breedershed S ON EG.shedid = S.id
        LEFT JOIN reference REF ON EG.statusid = REF.id
        LEft JOIN breederbatch BB ON EG.breederbatchid = BB.id
        LEft JOIN breederbatchplacement BP ON EG.breederbatchid = BP.breederbatchid
    
	WHERE
		EG.collectiondate = p_collectiondate AND
        EG.id = p_id AND
        EG.companyid = p_cpmapnyid 
        
         ORDER by EG.id desc;
END;



CREATE PROCEDURE `spc_eggsdistributiondetail_fortransfertohatchery`(
	IN p_breederbatchid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	/*IF EXISTS(SELECT itembatchid FROM eggtransfertohatcherydetail ETHD
			  LEFT JOIN eggtransfertohatchery ETH ON ETH.id = ETHD.eggtransfertohatcheryid
			  WHERE ETH.breederbatchid = p_breederbatchid
			  GROUP BY ETHD.itembatchid) THEN
              
		BEGIN
        
			SELECT ETHD.itembatchid,
				   SUM(ETHD.transferquantity) as transferquantity
                   
			FROM eggtransfertohatcherydetail ETHD
             LEFT JOIN eggtransfertohatchery ETH ON ETH.id = ETHD.eggtransfertohatcheryid
            
             WHERE ETH.breederbatchid = p_breederbatchid
            
            GROUP BY ETHD.itembatchid;
        
        END;


	ELSE*/
		
		SELECT EDD.itembatchid,
			   EDD.itemid,
			   EDD.breederbatchid,
			   EDD.itemtypeid,
			   I.itemcode,
			   I.itemname,
			   fnc_eggsdistributiondetail_itembatch(EDD.itembatchid,p_companyid) as receivedquantity
			   
		FROM eggsdistributiondetail EDD
		
		LEFT JOIN item I ON I.id = EDD.itemid
		
		WHERE EDD.breederbatchid = p_breederbatchid
		AND EDD.itemtypeid = 881 -- hatching eggs
		AND EDD.statusid = 842
		AND EDD.companyid = p_companyid; 
    
  --  END IF;
    

END;



CREATE PROCEDURE `spc_eggsdistributiondetail_save`(
	IN p_id INT(11),
	IN p_eggscollectionid INT(11),
	IN p_shedid	INT(11),
    IN p_itemtypeid INT(11),
	IN p_itemid INT(11),
	IN p_quantity INT(11),
	IN p_avgweight DECIMAL(9,3),
    IN p_statusid INT(11),
    IN p_collectiondate DATE,
    IN p_breederbatchid INT(11),
    IN p_remark VARCHAR(200),
	IN p_companyid INT(11),
    IN p_userid INT,
	OUT out_id INT
	)
BEGIN
SET @action = null;
-- create itembatch for eggsdistributiondetail
    
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
       BEGIN
        -- IF(p_quantity !=0) THEN
	
		INSERT INTO eggsdistributiondetail 
				(eggscollectionid, shedid, itemtypeid, itemid, quantity, avgweight, statusid, collectiondate, breederbatchid, remark, companyid )
			VALUES 
				(p_eggscollectionid, p_shedid, p_itemtypeid, p_itemid, p_quantity, p_avgweight, p_statusid, p_collectiondate, p_breederbatchid,p_remark, p_companyid);
	  
       SELECT LAST_INSERT_ID() INTO out_id; 
    
    SET @action = 'INSERT';
   -- END IF;
      END;
	ELSE
        BEGIN
		   -- IF(p_quantity !=0) THEN
			UPDATE eggsdistributiondetail
			
				SET eggscollectionid = p_eggscollectionid,	
					shedid = p_shedid,
					itemtypeid = p_itemtypeid,
					itemid = p_itemid,
					quantity = p_quantity,
					avgweight = p_avgweight,
					statusid  = p_statusid ,
					collectiondate = p_collectiondate,
					breederbatchid = p_breederbatchid,
					remark = p_remark,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				 
			   SET @action = 'UPDATE';    
               
                SELECT LAST_INSERT_ID() INTO out_id; 
		-- END IF;
	   END;       
	
    END IF;
    SELECT 0 INTO out_id; 
    
    -- update breederbatch status = 223 'complete'
    /*IF (p_statusid = 842) THEN
		UPDATE breederbatch SET statusid = 223 WHERE id = p_breederbatchid;
    END IF;*/
    
    /*IF (p_statusid = 842) THEN
    IF(p_quantity !=0) THEN
		CALL spc_materialrecptdetail_byeggsdistribution_save(p_id, p_eggscollectionid,p_itemid,p_quantity,p_companyid,p_userid);
        END IF;
    END IF;*/
    
        
   -- record log
   
   IF(@action != null) then
   CALL spc_commonlog_save(p_companyid, 'eggsdistributiondetail', out_id, @action, p_userid);
    
    END IF;
END;



CREATE PROCEDURE `spc_eggsdistributiondetail_select`(
  IN p_eggscollectionid INT(11),
  IN p_collectiondate DATE,
  IN p_companyid INT(11)
  )
BEGIN

    SELECT
			ED.id,
            itemtypeid,
			itemid,
            quantity,
            avgweight,
            statusid,
            I.itemname,
			REF.refname,
            ED.remark,
			ED.companyid
         
    FROM
		eggsdistributiondetail ED
        
        LEFT JOIN item I ON ED.itemid =I.id
        LEFT JOIN `reference` REF ON ED.statusid = REF.id
   	
	WHERE
		ED.eggscollectionid = p_eggscollectionid AND
		ED.collectiondate = p_collectiondate AND
        ED.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_eggsgrade_delete`(
	IN p_id INT
   
)
BEGIN
	DELETE FROM eggsgrade WHERE id = p_id;
END;



CREATE PROCEDURE `spc_eggsgrade_save`(
	IN p_id INT,
    IN p_gradename VARCHAR(100),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO eggsgrade 
				(gradename, companyid)
			VALUES 
				(p_gradename, p_companyid);
                
			SET @action = 'INSERT';

	ELSE
    
		UPDATE eggsgrade
			SET gradename = p_gradename, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
    
	  SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'eggsgrade', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_eggsgrade_search`(
  IN p_companyid INT 
)
BEGIN
	SELECT id ,
		   gradename
            
    FROM  eggsgrade 
    WHERE 
          companyid = p_companyid;
END;



CREATE PROCEDURE `spc_eggsgrade_select`(
  IN p_id INT 
)
BEGIN
	SELECT id ,
           gradename
            
    FROM  eggsgrade 
    WHERE 
          id = p_id;
END;



CREATE PROCEDURE `spc_eggtransfertohatcherydetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM eggtransfertohatcherydetail WHERE id = p_id;
END;



CREATE PROCEDURE `spc_eggtransfertohatcherydetail_save`(
	IN p_id INT(11),
    IN p_eggtransfertohatcheryid INT(11),
    IN p_itemid INT(11),
    IN p_itembatchid VARCHAR(45),
    IN p_receivedquantity INT(11),
    IN p_transferquantity INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
	
IF(p_transferquantity > 0) THEN

    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		INSERT INTO eggtransfertohatcherydetail (
				id, 
                eggtransfertohatcheryid,
                itemid,
                itembatchid,
                receivedquantity,
                transferquantity,
                companyid)
			
            VALUES (
				p_id, 
                p_eggtransfertohatcheryid,
                p_itemid,
                p_itembatchid,
                p_receivedquantity,
                p_transferquantity,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE eggtransfertohatcherydetail
			SET eggtransfertohatcheryid = p_eggtransfertohatcheryid,
				itemid = p_itemid,
                itembatchid = p_itembatchid,
                receivedquantity = p_receivedquantity,
                transferquantity = p_transferquantity,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- material transfer entry for egg transfer from breeder to hatchery if status is approved
    SET @transferdate = null;
    SET @fromwarehouseid = null;
    SET @towarehouseid = null;
    SET @parentstatusid = null;
    SET @breederbatchid = null;
    SELECT transferdate, fromwarehouseid, towarehouseid, statusid, breederbatchid
    INTO @transferdate, @fromwarehouseid, @towarehouseid, @parentstatusid, @breederbatchid
    FROM eggtransfertohatchery WHERE id = p_eggtransfertohatcheryid;
    
    IF(@parentstatusid = 902) THEN
    
    
		SET @out_transferid = NULL;
		CALL spc_materialtransfer_save(
			NULL, 501, 502, 581, 
            @transferdate, @transferdate, NULL,
			@fromwarehouseid, (SELECT id FROM warehousebin WHERE warehouseid = @fromwarehouseid AND isdefault = 1),
            621, @breederbatchid, NULL, 
            NULL, p_companyid, p_userid, @out_transferid
		);
        
		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, @out_transferid, @towarehouseid, 
            (SELECT id FROM warehousebin WHERE warehouseid = @towarehouseid AND isdefault = 1),
            p_itemid, (SELECT itemname FROM item WHERE id = p_itemid),
			p_receivedquantity, p_transferquantity, 
			(SELECT refname FROM `reference` WHERE id = (SELECT itemunitid FROM item WHERE id = p_itemid)),
			p_itembatchid, p_userid, p_companyid, @out_transferdetailid
		);
        
	-- material issue for user eggs
		SET @out_issueid = NULL;
		CALL spc_materialissue_save(
			NULL, @transferdate, 381, @breederbatchid, 362, NULL,
			p_userid, @fromwarehouseid, 
            (SELECT id FROM warehousebin WHERE warehouseid = @fromwarehouseid AND isdefault = 1),
            p_userid, @transferdate,
			p_companyid, p_userid, @out_issueid
		);
                            
		-- Itembatch details
		SET @out_issuedetailid = NULL;
		CALL spc_materialissuedetail_save(
			NULL, @out_issueid, p_itemid, (SELECT itemname FROM item WHERE id = p_itemid),
			p_transferquantity, (SELECT unitcost FROM item WHERE id = p_itemid), 
			(p_transferquantity * (SELECT unitcost FROM item WHERE id = p_itemid)),
			NULL, p_itembatchid,
			p_companyid, p_userid, @out_issuedetailid
		);

		-- material movement entry for material issue
		SET @out_movid1 = NULL;
		CALL spc_materialmovement_save(
			NULL, p_itemid, p_itembatchid, 683,
			@out_issueid, @transferdate, p_transferquantity,
			@fromwarehouseid, (SELECT id FROM warehousebin WHERE warehouseid = @fromwarehouseid AND isdefault = 1), 
            @towarehouseid, (SELECT id FROM warehousebin WHERE warehouseid = @towarehouseid AND isdefault = 1),
			(p_transferquantity * (SELECT unitcost FROM item WHERE id = p_itemid)),
			p_companyid, p_userid, @out_movid1
		);
        
        -- subtract issue quantity from material receipt table
        -- SET @receiptquantity = (p_receivedquantity - p_transferquantity);
        -- UPDATE materialreceiptdetail SET receiptquantity = @receiptquantity WHERE itembatch = p_itembatchid;
        
         -- record log
		CALL spc_commonlog_save(p_companyid, 'eggtransfertohatcherydetail', out_id, @action, p_userid);
        
    END IF;
    ELSE 
		
		 SELECT 0 INTO out_id; 
    END IF;
    
   
	

END;



CREATE PROCEDURE `spc_eggtransfertohatcherydetail_search`(
     IN p_eggtransfertohatcheryid INT
)
BEGIN
    
    SELECT
			id, 
			eggtransfertohatcheryid,
			itemid,
			itembatchid,
            receivedquantity,
			transferquantity,
			companyid
            
         
	FROM
		eggtransfertohatcherydetail 
   	
	WHERE
		eggtransfertohatcheryid = p_eggtransfertohatcheryid;
END;



CREATE PROCEDURE `spc_eggtransfertohatcherydetail_select`(
    IN p_id INT
)
BEGIN
    
    SELECT
			id, 
			eggtransfertohatcheryid,
			itemid,
			itembatchid,
			transferquantity,
			companyid
            
         
	FROM
		eggtransfertohatcherydetail 
   	
	WHERE
		id = p_id;
END;



CREATE PROCEDURE `spc_eggtransfertohatchery_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM eggtransfertohatcherydetail WHERE eggtransfertohatcheryid = p_id;
	DELETE FROM eggtransfertohatchery WHERE id = p_id;
END;



CREATE PROCEDURE `spc_eggtransfertohatchery_save`(
	IN p_id INT(11),
    IN p_locationid INT(11),
    IN p_fromwarehouseid INT(11),
    IN p_towarehouseid INT(11),
    IN p_breederbatchid INT(11),
    IN p_totaltransferquantity INT(11),
    IN p_outtime VARCHAR(45),
    IN p_transferdate DATE,
    IN p_drivername VARCHAR(100),
    IN p_drivermobileno VARCHAR(100),
    IN p_vehicleno VARCHAR(50),
    IN p_isoutsidehatchery TINYINT,
    IN p_statusid INT(11),
    IN p_remark VARCHAR(150),
    IN p_issueremark VARCHAR(150),
    IN p_receiptremark VARCHAR(150),
    IN p_servicepoid INT(11),
    IN p_userid INT(11),
    IN p_companyid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO eggtransfertohatchery (
				id, 
                locationid,
                fromwarehouseid,
                towarehouseid,
                breederbatchid,
                totaltransferquantity,
                outtime,
                transferdate,
                drivername,
				drivermobileno,
                vehicleno,
                isoutsidehatchery,
                statusid,
                remark,
                issueremark,
                receiptremark,
                servicepoid,
                companyid)
			
            VALUES (
				p_id, 
                p_locationid,
                p_fromwarehouseid,
                p_towarehouseid,
                p_breederbatchid,
                p_totaltransferquantity,
                p_outtime,
                p_transferdate,
                p_drivername,
				p_drivermobileno,
                p_vehicleno,
                p_isoutsidehatchery,
                p_statusid,
                p_remark,
                p_issueremark,
                p_receiptremark,
                p_servicepoid,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE eggtransfertohatchery
			SET locationid = p_locationid,
                fromwarehouseid = p_fromwarehouseid,
                towarehouseid = p_towarehouseid,
                breederbatchid = p_breederbatchid,
                totaltransferquantity = p_totaltransferquantity,
                outtime = p_outtime,
                transferdate = p_transferdate,
                drivername = p_drivername,
				drivermobileno = p_drivermobileno,
                vehicleno = p_vehicleno,
                isoutsidehatchery = p_isoutsidehatchery,
                statusid = p_statusid,
                remark = p_remark,
                issueremark = p_issueremark,
                receiptremark = p_receiptremark,
                servicepoid = p_servicepoid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'eggtransfertohatchery', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_eggtransfertohatchery_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
			ETH.id, 
			ETH.locationid,
			ETH.fromwarehouseid,
            W1.warehousename as fromwarehousename,
			ETH.towarehouseid,
            W2.warehousename as towarehousename,
			ETH.breederbatchid,
            BB.batchname,
			ETH.totaltransferquantity,
			ETH.outtime,
			DATE_FORMAT(ETH.transferdate,'%d/%m/%Y') as transferdate,
			ETH.drivername,
			ETH.drivermobileno,
			ETH.vehicleno,
			ETH.isoutsidehatchery,
			ETH.statusid,
            REF.refname as statusname,
            ETH.servicepoid,
			ETH.companyid
            
         
	FROM
		eggtransfertohatchery ETH
        LEFT JOIN breederbatch BB ON BB.id = ETH.breederbatchid
        LEFT JOIN warehouse W1 ON W1.id = ETH.fromwarehouseid
        LEFT JOIN warehouse W2 ON W2.id = ETH.towarehouseid
        LEFT JOIN `reference` REF ON REF.id = ETH.statusid
   	
	WHERE
		ETH.companyid = p_companyid
        
	  ORDER BY ETH.id DESC;
END;



CREATE PROCEDURE `spc_eggtransfertohatchery_select`(
   IN p_id INT
)
BEGIN

	SELECT
			ETH.id, 
			ETH.locationid,
            L.locationname,
			ETH.fromwarehouseid,
            W1.warehousename as fromwarehousename,
			ETH.towarehouseid,
            W2.warehousename as towarehousename,
			ETH.breederbatchid,
            BB.batchname,
			ETH.totaltransferquantity,
			ETH.outtime,
			DATE_FORMAT(ETH.transferdate,'%d/%m/%Y') as transferdate,
			ETH.drivername,
			ETH.drivermobileno,
			ETH.vehicleno,
			ETH.isoutsidehatchery,
			ETH.statusid,
            REF.refname,
			ETH.companyid,
            ETH.remark,
			ETH.issueremark,
            ETH.receiptremark,
            ETH.servicepoid
            
         
	FROM
		eggtransfertohatchery ETH
        LEFT JOIN breederbatch BB ON BB.id = ETH.breederbatchid
		LEFT JOIN warehouse W1 ON W1.id = ETH.fromwarehouseid
        LEFT JOIN warehouse W2 ON W2.id = ETH.towarehouseid
		LEFT JOIN `reference` REF ON REF.id = ETH.statusid
        LEFT JOIN location L ON L.id = ETH.locationid
       
   	WHERE
		ETH.id = p_id
	    ORDER BY ETH.id DESC;
        
        
	  
    -- select transfer to hatchery detail
     SELECT
			ETDH.id, 
			ETDH.eggtransfertohatcheryid,
			ETDH.itemid,
			ETDH.itembatchid,
            ETDH.receivedquantity,
			ETDH.transferquantity,
			ETDH.companyid,
            I.itemname,
            I.itemcode
            
         
	FROM
		eggtransfertohatcherydetail  ETDH
        LEFT JOIN item I ON ETDH.itemid = I.id
   	
	WHERE
		ETDH.eggtransfertohatcheryid = p_id;
        
        
	-- select temprature detail
	SELECT
			ETV.id, 
			ETV.eggtransfertohatcheryid,
			TIME_FORMAT(ETV.transfertime, '%h:%i %p') as transfertime,
			ETV.temprature,
			ETV.companyid
         
	FROM
		eggtransfervehicletemprature ETV
   	
	WHERE
		ETV.eggtransfertohatcheryid = p_id;
	
END;



CREATE PROCEDURE `spc_eggtransfervehicletemprature_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM eggtransfervehicletemprature WHERE id = p_id;
END;



CREATE PROCEDURE `spc_eggtransfervehicletemprature_save`(
	IN p_id INT(11),
    IN p_eggtransfertohatcheryid INT(11),
    IN p_transfertime VARCHAR(45),
    IN p_temprature DECIMAL(18,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO eggtransfervehicletemprature (
				id, 
                eggtransfertohatcheryid,
                transfertime,
                temprature,
                companyid)
			
            VALUES (
				p_id, 
                p_eggtransfertohatcheryid,
                TIME(STR_TO_DATE(p_transfertime, '%h:%i %p' )),
                p_temprature,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE eggtransfervehicletemprature
			SET eggtransfertohatcheryid = p_eggtransfertohatcheryid,
				transfertime = TIME(STR_TO_DATE(p_transfertime, '%h:%i %p' )),
                temprature = p_temprature,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'eggtransfervehicletemprature', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_eggtransfervehicletemprature_search`(
    IN p_eggtransfertohatcheryid INT
)
BEGIN
    
    SELECT
			id, 
			eggtransfertohatcheryid,
			-- transfertime,
			TIME_FORMAT(transfertime, '%h:%i %p') as transfertime,
			temprature,
			companyid
            
         
	FROM
		eggtransfervehicletemprature 
   	
	WHERE
		eggtransfertohatcheryid = p_eggtransfertohatcheryid;
END;



CREATE PROCEDURE `spc_eggtransfervehicletemprature_select`(
    IN p_id INT
)
BEGIN
    
    SELECT
			id, 
			eggtransfertohatcheryid,
			itemid,
			itembatchid,
			transferquantity,
			companyid
            
         
	FROM
		eggtransfervehicletemprature 
   	
	WHERE
		id = p_id;
END;



CREATE PROCEDURE `spc_employee_byrole`(
	IN p_roleid VARCHAR(100),
    IN p_companyid INT
)
BEGIN

	SELECT id,
		   employeename
           
	FROM employee 
    
    WHERE FIND_IN_SET(p_roleid, emproleids)
	AND isactive = 1
    AND companyid = p_companyid;
END;



CREATE PROCEDURE `spc_employee_ddl`(
	IN p_typeid INT,
	IN p_companyid INT(11)
)
BEGIN

	SELECT id, employeename
           
	FROM employee
    
    WHERE isactive = 1 AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_employee_delete`(
	IN p_id INT(11),
    IN p_compayid INT(11),
    IN p_userid INt(11)
)
BEGIN

	DELETE FROM employee WHERE id = p_id;
      CALL spc_commonlog_save(p_companyid, 'employee', out_id, 'Delete', p_userid);

END;



CREATE PROCEDURE `spc_employee_save`(
   IN p_id INT(11),
   IN p_employeename VARCHAR(200),
   IN p_emailid VARCHAR(200),
   IN p_mobileno VARCHAR(15),
   IN p_isactive TINYINT(4),
   IN p_emproleids VARCHAR(45),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO employee 
				(employeename, emailid, mobileno, isactive, emproleids, companyid)
			VALUES 
				(p_employeename, p_emailid, p_mobileno, p_isactive, p_emproleids, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE employee
				SET employeename = p_employeename,
					emailid = p_emailid,
                    mobileno = p_mobileno,
                    isactive = p_isactive,
                    emproleids = p_emproleids,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'employee', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_employee_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,employeename, emailid, mobileno, isactive,emproleids, companyid
           
	FROM employee
    
    WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_employee_select`(
IN p_id INT(11)
)
BEGIN

	SELECT EMP.id,employeename, emailid, mobileno, isactive, emproleids, companyid,
    R.refname
           
	FROM employee EMP
    left join `reference` R ON R.id = EMP.emproleids
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND EMP.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_entity_search`()
BEGIN

	SELECT 
		E.`id`,
		E.`entityname`,
		E.`displayname`,
		E.`entitytypeid`,
        REF1.`refname` AS entitytype,
		E.`pagekey`,
		E.`parentid`,
        E1.displayname as parent,
        E1.entityname as parentcode,
		E.`displayorder`,
		E.`description`,
		E.`additionaldesc`,
        'Unchecked' as checked,
        '' as permissions
	FROM 
		`entity` E
	LEFT JOIN `reference` REF1 ON REF1.id = E.entitytypeid
    LEFT JOIN `entity` E1 ON E.parentid = E1.id
	ORDER BY `id`;

END;



CREATE PROCEDURE `spc_entity_searchbyrole`(
	IN p_roleid INT
)
BEGIN

	SELECT 
		E.`id`,
		E.`entityname`,
		E.`displayname`,
		E.`entitytypeid`,
        REF1.`refname` AS entitytype,
		E.`pagekey`,
		E.`parentid`,
        E1.displayname as parent,
        E1.entityname as parentcode,
		E.`displayorder`,
		E.`description`,
		E.`additionaldesc`,
        CASE WHEN NULLIF(RA.checked, '') IS NULL THEN 'Unchecked' ELSE RA.checked END as checked,
        CASE WHEN RA.permissions IS NULL THEN '' ELSE RA.permissions END as permissions,
        fnk_permission_byids(RA.permissions) AS permissionnames
	FROM 
		`entity` E
        
	LEFT JOIN `reference` REF1 ON REF1.id = E.entitytypeid
    LEFT JOIN `entity` E1 ON E.parentid = E1.id
    LEFT JOIN `roleaccess` RA ON RA.entityid = E.id AND RA.roleid = p_roleid
    
	ORDER BY E.`id`;

END;



CREATE PROCEDURE `spc_entity_searchbyuserrole`(
	IN p_userid INT
)
BEGIN

	SELECT 
		E.`id`,
		E.`entityname`,
		E.`displayname`,
		E.`entitytypeid`,
        REF1.`refname` AS entitytype,
		E.`pagekey`,
		E.`parentid`,
        E1.displayname as parent,
        E1.entityname as parentcode,
		E.`displayorder`,
		E.`description`,
		E.`additionaldesc`,
        CASE WHEN NULLIF(RA.checked, '') IS NULL THEN 'Unchecked' ELSE RA.checked END as checked,
        CASE WHEN RA.permissions IS NULL THEN '' ELSE RA.permissions END as permissions,
        fnk_permission_byids(RA.permissions) AS permissionnames
	FROM 
		`entity` E
        
	LEFT JOIN `reference` REF1 ON REF1.id = E.entitytypeid
    LEFT JOIN `entity` E1 ON E.parentid = E1.id
    LEFT JOIN `roleaccess` RA ON RA.entityid = E.id
    INNER JOIN `userlicense` UL ON UL.roleid = RA.roleid AND UL.userid = p_userid
	ORDER BY E.`id`;

END;



CREATE PROCEDURE `spc_ErrorLog`(
	p_ErrorProcedure varchar(200),
	p_ErrorMessage varchar(500),
	p_ErrorParams TEXT
)
BEGIN
	insert into DBErrors 
			(ErrorTime, ErrorProcedure, ErrorMessage, ErrorParams)
		values 
			(now(), p_ErrorProcedure, p_ErrorMessage, p_ErrorParams);
END;



CREATE PROCEDURE `spc_farmerenquirywise_cbfbatches`(
	IN p_farmerenquiryid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT CB.id,
		   SDD.id as shedid,
           SDD.shed_name,
           SDD.warehousebinid,
           WB.warehouseid
    
	FROM cbf_procurementscheduledetail PSD
    LEFT JOIN cbf_farmerenquiry_sheddimensiondetail SDD ON SDD.id = PSD.cbfshedid  
    LEFT JOIN warehousebin WB ON WB.id = SDD.warehousebinid
    LEFT JOIN cbf_batch_details CB ON CB.id = PSD.batchid
    
    WHERE SDD.farmerenquiryid = p_farmerenquiryid
    AND PSD.companyid = p_companyid
    AND CB.statusid = 3022;

END;



CREATE PROCEDURE `spc_farmgrade_delete`(  
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM farmgrade WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'farmgrade', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_farmgrade_save`( 
 IN p_id INT(11),
 IN p_categoryid INT(11),
 IN p_locationid INT(11),
 IN p_grade VARCHAR(200),
 IN p_fromeef INT(11),
 IN p_toeef INT(11),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO farmgrade
              (categoryid, locationid, grade, fromeef, toeef, companyid)
       VALUES
            (p_categoryid, p_locationid, p_grade, p_fromeef, p_toeef, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE farmgrade 
   
	SET categoryid = p_categoryid,
		locationid = p_locationid,
		grade = p_grade,
		fromeef = p_fromeef,
        toeef = p_toeef,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'farmgrade', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_farmgrade_search`(
  IN p_companyid INT(11)
)
BEGIN

	SELECT FG.id,
    categoryid,
    locationid, 
    grade,
    fromeef, 
    toeef,
    FG.companyid,
    L.locationname,
    FT.farmtype as categoryname

	FROM farmgrade FG
    
     LEFT JOIN farmtype FT ON FT.id = FG.categoryid
	 LEFT JOIN location L ON L.id = FG.locationid
    
    WHERE FG.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_farmgrade_select`( 
 IN p_id INT(11)
)
BEGIN

	SELECT FG.id, 
    FG.categoryid,
    FT.farmtype as categoryname,
    FG.locationid, 
    L.locationname,
    grade, 
    fromeef, 
    toeef, 
    FG.companyid
           
	FROM farmgrade FG
    
        LEFT JOIN farmtype FT ON FT.id = FG.categoryid
        LEFT JOIN location L ON L.id = FG.locationid
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND FG.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_farmtype_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM farmtype WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'farmtype', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_farmtype_save`(
 IN p_id INT(11),
 IN p_farmtype VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO farmtype
              (farmtype, companyid)
       VALUES
            (p_farmtype, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE farmtype 
   
	SET farmtype = p_farmtype,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'farmtype', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_farmtype_search`(	
 IN p_companyid INT(11)
)
BEGIN

	SELECT id, farmtype, companyid
           
	FROM farmtype
    
    WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_farmtype_select`(
  IN p_id INT(11)
)
BEGIN

	SELECT id, farmtype, companyid
           
	FROM farmtype
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_feedmillsetting_delete`(
IN p_id INT(11))
BEGIN

DELETE
FROM feedmill_feedmillsetting
WHERE   id = p_id;

END;



CREATE PROCEDURE `spc_feedmillsetting_save`(
IN p_id INT(11),
IN p_tolerencepercentage DECIMAL(9,3),
IN p_additionalcost DECIMAL(9,3),
IN p_wipledgerid INT(11),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT
)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_feedmillsetting(id,tolerencepercentage ,additionalcost,wipledgerid, companyid)
        VALUES (p_id, p_tolerencepercentage,p_additionalcost,p_wipledgerid, p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_feedmillsetting
        SET tolerencepercentage = p_tolerencepercentage,
			additionalcost = p_additionalcost,
            wipledgerid = p_wipledgerid,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_feedmillsetting', out_id, @action, p_userid);



END;



CREATE PROCEDURE `spc_feedmillsetting_search`(
IN p_companyid INT(11)
)
BEGIN
SELECT 		FMS.id,
            FMS.tolerencepercentage,
			FMS.additionalcost,
            FMS.wipledgerid,
			COA.coaname,
            COA.glcode
           
	FROM feedmill_feedmillsetting FMS
	LEFT JOIN chartofaccount COA ON COA.id = FMS.wipledgerid
    
    WHERE FMS.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_feedmillsetting_select`(
IN p_id INT(11),
IN p_companyid INT(11))
BEGIN

SELECT 		tolerencepercentage,
			additionalcost,
            wipledgerid
            companyid
           
	FROM  feedmill_feedmillsetting
    
    WHERE companyid = p_companyid
    AND id = p_id;



END;



CREATE PROCEDURE `spc_feedmill_billofmaterial_byitemid`(
 IN p_itemid INT(11),
  IN p_companyid INT(11)
  )
BEGIN
	SELECT id As bomid
    
		FROM feedmill_billofmaterial 
    
    WHERE 
		itemid = p_itemid 
        AND
		companyid = p_companyid ;
      
END;



CREATE PROCEDURE `spc_feedmill_itemidbatch_byitemid`(
 IN p_itemid INT(11),
 IN p_warehouseid INT(11),
 IN p_companyid INT(11)
 )
BEGIN
 SELECT MOM.id,
		MOM.itembatch,
        MOM.itemid,
		fnc_feedmill_itembatchbalance(p_itemid, p_warehouseid, p_companyid)as batch_qty,
        (MOM.itemvalue/MOM.quantity) as batch_unitcost,
        I.itemname,
        MOM.towarehouseid as warehouse_id,
		MOM.towarehousebinid as warehousebin_id
        
 
 FROM materialmovement MOM 
 
	LEFT JOIN item I ON MOM.itemid = I.id
    
  where MOM.towarehouseid = p_warehouseid AND
		MOM.itemid = p_itemid  AND
         FIND_IN_SET(MOM.transactiontypeid, '681,684') AND
         MOM.companyid = p_companyid;
	

END;



CREATE PROCEDURE `spc_feedmill_production_issuedetail_delete`(
 
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM feedmill_production_issuedetail WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'feedmill_production_issuedetail', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_feedmill_production_issuedetail_save`(
IN p_id INT(11),
IN p_production_issue_id INT(11),
IN p_itemid INT(11),
IN p_itembatch VARCHAR(200),
IN p_warehouse_id INT(11),
IN p_warehousebin_id INT(11),
IN p_issue_qty DECIMAl(12,3),
IN p_batch_qty DECIMAl(12,3),
IN p_batch_unitcost DECIMAL(12,3),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_production_issuedetail
        (
			production_issue_id,
			itemid,	
			itembatch,	
			warehouse_id,	
			warehousebin_id,
			issue_qty,
            batch_qty,
            batch_unitcost,
			companyid		
		)
        
        VALUES 
        (
			p_production_issue_id,
			p_itemid,	
			p_itembatch,	
			p_warehouse_id,	
			p_warehousebin_id,
			p_issue_qty,
            p_batch_qty,
            p_batch_unitcost,
			p_companyid
		);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_production_issuedetail
        
        SET production_issue_id = p_production_issue_id,
			itemid = p_itemid,
			itembatch = p_itembatch,
			warehouse_id = p_warehouse_id,
            warehousebin_id = p_warehousebin_id,
            issue_qty= p_issue_qty,
            batch_qty = p_batch_qty,
            batch_unitcost  = p_batch_unitcost,
            companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
     SELECT LAST_INSERT_ID() INTO OUT_ID;
    
  if( p_issue_qty is not null) then
   SET @productionorderid = null; 
   SET @pendingplannedqty= null; 
   SET @status_id = null;
   -- select productionorederid from feedmill_production_issue
    select productionorder_id, pendingplannedqty, status_id  INTO @productionorderid ,@pendingplannedqty, @status_id
		 from feedmill_production_issue FPI
         LEFt JOIN feedmill_productionorderdetail FPD ON FPD.productionorderid = FPI.productionorder_id AND
			FPD.itemid = p_itemid
		 where FPI.id = p_production_issue_id ;
     
  
      -- update productionorrder Detail pending qty
     UPDATE feedmill_productionorderdetail FPOD
     SET pendingplannedqty = @pendingplannedqty - p_issue_qty
     WHERE FPOD.itemid = p_itemid AND FPOD.productionorderid = @productionorderid ;
     
  if(@status_id = 1962) then
      SET @out_movid = NULL;
			CALL spc_materialmovement_save(
				NULL, p_itemid, p_itembatch, 682,
				p_production_issue_id, now(), p_issue_qty,
				 p_warehouse_id, p_warehousebin_id,NULL, NULL,
				(p_issue_qty * p_batch_unitcost),
				p_companyid, p_userid, @out_movid
			);
	END if;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_production_issuedetail', out_id, @action, p_userid);
END IF;


END;



CREATE PROCEDURE `spc_feedmill_production_issuedetail_search`(
 IN p_production_issue_id INT(11),
 IN p_companyid INT(11) 
 )
BEGIN

SELECT 	    
			FDI.id,	
			production_issue_id,
			itemid,	
			FDI.itembatch,	
			warehouse_id,	
			warehousebin_id,	
			issue_qty,	
			FDI.companyid,
            I.itemname,
			batch_qty,
            batch_unitcost
			
	
           
	FROM feedmill_production_issuedetail FDI
    LEFT JOIN item I ON FDI.itemid = I.id
    
    
    WHERE 
		FDI.production_issue_id = p_production_issue_id 
		AND
		FDI.companyid = p_companyid;


END;



CREATE PROCEDURE `spc_feedmill_production_issuedetail_select`(
 IN id INT(11),
 IN p_companyid INT(11) 
 )
BEGIN

SELECT 	    
			id,	
			production_issue_id,
			itemid,	
			itembatch,	
			warehouse_id,	
			warehousebin_id,	
			issue_qty,
			companyid,
			batch_qty,
            batch_unitcost
			
	
           
	FROM feedmill_production_issuedetail
    
    
    WHERE 
		id = id 
		AND
		companyid = p_companyid;


END;



CREATE PROCEDURE `spc_feedmill_production_issue_delete`(
 
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM feedmill_production_issue WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'feedmill_production_issue', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_feedmill_production_issue_save`(
IN p_id INT(11),
IN p_production_issue_no varchar(45),
IN p_productionorder_id INT(11),
IN p_issue_date DATE,
IN p_status_id INT(11),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_production_issue
        (
			production_issue_no,
			productionorder_id,
			issue_date,	
			status_id,	
			companyid	
		)
        
        VALUES 
        (
			p_production_issue_no,
			p_productionorder_id,
			p_issue_date,	
			p_status_id,	
			p_companyid
		);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_production_issue
        
        SET production_issue_no = p_production_issue_no,
			productionorder_id = p_productionorder_id,
			issue_date = p_issue_date,
			status_id = p_status_id,
            companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_production_issue', out_id, @action, p_userid);



END;



CREATE PROCEDURE `spc_feedmill_production_issue_search`(
 IN p_companyid INT(11) 
 )
BEGIN

SELECT 	    
			FPI.id,	
			production_issue_no,
			productionorder_id	,
			DATE_FORMAT(issue_date	,'%d/%m/%Y') as issue_date,
			FPI.status_id,
			R.refname as status,
            FPO.productionorderno,
             I.itemname as productname
			
	
           
	FROM feedmill_production_issue FPI
    
     LEFT JOIN `reference` R ON FPI.status_id = R.id
     LEFT JOIN feedmill_productionorder FPO ON FPI.productionorder_id = FPO.id
      LEFT JOIN item I ON FPO.productionno = I.id
    
    WHERE FPI.companyid = p_companyid;


END;



CREATE PROCEDURE `spc_feedmill_production_issue_select`(
 IN p_id INT(11),
 IN p_companyid INT(11) 
 )
BEGIN

SELECT 	    
			FPI.id,	
			production_issue_no,
			productionorder_id	,
			DATE_FORMAT(issue_date	,'%d/%m/%Y') as issue_date,
			FPI.status_id,
			R.refname as status	
			
	
           
	FROM feedmill_production_issue FPI
    
     LEFT JOIN `reference` R ON FPI.status_id = R.id
    
    WHERE FPI.id = p_id AND
         FPI.companyid = p_companyid;


END;



CREATE PROCEDURE `spc_feedmill_receipt_from_production_delete`(
 IN p_id INT(11),
 IN p_companyid INT(11),
 IN p_userid INT(11)
)
BEGIN

	DELETE FROM feedmill_receipt_from_production WHERE id = p_id;
	CALL spc_commonlog_save(p_companyid, 'feedmill_receipt_from_production', p_id, 'delete', p_userid);

END;



CREATE PROCEDURE `spc_feedmill_receipt_from_production_save`(
	IN p_id	INT(11),
	IN p_production_receipt_no VARCHAR(45),
	IN p_productionorder_id INT(11),
	IN p_receipt_date DATE,
	IN p_itemid	INT(11),
	IN p_receipt_qty DECIMAL(12,3),
	IN p_status_id INT(11),
	IN p_unit_cost	DECIMAL(9,3),
	IN p_item_totalcost	DECIMAL(12,3),
	IN p_itembatch	VARCHAR(200),
	IN p_towarehouse_id INT(11),
	IN p_towarehousebin_id INT(11),
	IN p_remark	VARCHAR(200),
    IN p_balance_qty DECIMAL(12,3),
	IN p_companyid INT(11),
	IN p_userid INT(11),
	OUT out_id INT
)
BEGIN

	SET @action = null;
    SET @receiptid = null;
    
  
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_receipt_from_production 
			   (	
					production_receipt_no,	
					productionorder_id,	
					receipt_date,	
					itemid,	
					receipt_qty,
					status_id,		
					unit_cost,	
					item_totalcost,	
					itembatch,	
					towarehouse_id,	
					towarehousebin_id,	
					remark,
                    balance_qty,
					companyid
                )
			VALUES 
				 (  p_production_receipt_no,	
					p_productionorder_id,	
					p_receipt_date,	
					p_itemid,	
					p_receipt_qty,
					p_status_id,		
					p_unit_cost,	
					p_item_totalcost,	
					@itembatch,	
					p_towarehouse_id,	
					p_towarehousebin_id,	
					p_remark,
                    p_balance_qty,
					p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE feedmill_receipt_from_production
				SET production_receipt_no = p_production_receipt_no,	
					productionorder_id = p_productionorder_id,	
					receipt_date = p_receipt_date,	
					itemid = p_itemid,	
					receipt_qty = p_receipt_qty,
					status_id = p_status_id,		
					unit_cost = p_unit_cost,	
					item_totalcost = p_item_totalcost,	
					itembatch = p_itembatch,	
					towarehouse_id = p_towarehouse_id,	
					towarehousebin_id = p_towarehousebin_id,	
					remark = p_remark,	
                    balance_qty = p_balance_qty,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;

     SELECT LAST_INSERT_ID() INTO @receiptid; 
    
     -- update production order status closed when baance qty = 0
    SET @statusid = 1702;
		if(p_balance_qty = 0)then
		SET @statusid = 1703;
    END IF;
    
    
    UPDATE feedmill_productionorder FPO
    SET FPO.receipt_pendingqty = p_balance_qty,
		FPO.statusid = @statusid
    where FPO.id = p_productionorder_id;
    
 if(p_status_id = 2022)then
      
       SET @itembatch = null;
	  SET @itemgroup = null;
    -- create itembatch 
      select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch from item I
		INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

			WHERE I.id = p_itemid;
        
			UPDATE  feedmill_receipt_from_production RPO
			SET itembatch = @itembatch
				where RPO.id= p_id;
            
        
              -- get item group id from the item id and update itemgroup table
        SELECT itemgroupid INTO @itemgroup FROM item WHERE id = p_itemid;
        
        UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
        
        WHERE id = @itemgroup;
    
    
 -- material movment for receipt
  SET @out_movid = NULL;
			CALL spc_materialmovement_save(
				NULL, p_itemid,  @itembatch, 684,
				@receiptid, now(), p_receipt_qty,NULL, NULL,
				 p_towarehouse_id, p_towarehousebin_id,
				p_item_totalcost,p_companyid, p_userid, @out_movid
			);
	END IF;
    
    SELECT @receiptid INTO out_id; 
    
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_receipt_from_production', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_feedmill_receipt_from_production_search`( 
  IN p_companyid INT(11)
  )
BEGIN
   SELECT   FRFP.id,	
			FRFP.production_receipt_no,
			FRFP.productionorder_id,
            DATE_FORMAT(FRFP.receipt_date,'%d/%m/%Y') as receipt_date,
			FRFP.itemid,	
			receipt_qty,	
			FRFP.status_id,	
			FRFP.unit_cost,	
			FRFP.item_totalcost,	
			FRFP.itembatch,	
			FRFP.towarehouse_id,	
			FRFP.towarehousebin_id,	
			FRFP.remark,	
			FRFP.companyid,
            I.itemname,
            I.itemunitid,
            FPO.productionorderno
            
     FROM  feedmill_receipt_from_production  FRFP
     
     LEFT JOIN item I ON FRFP.itemid = I.id 
     LEFT JOIN feedmill_productionorder FPO ON FRFP.productionorder_id = FPO.id
     
     WHERE FRFP.companyid = p_companyid;
   
END;



CREATE PROCEDURE `spc_feedmill_receipt_from_production_select`( 
  IN p_id INT(11),
  IN p_companyid INT(11)
  )
BEGIN
   SELECT   FRFP.id,	
			FRFP.production_receipt_no,
			FRFP.productionorder_id,	
			FRFP.receipt_date,	
			FRFP.itemid,	
			receipt_qty,
            FRFP.status_id,
			FRFP.unit_cost,	
			FRFP.item_totalcost,	
			FRFP.itembatch,	
			FRFP.towarehouse_id,	
			FRFP.towarehousebin_id,	
			FRFP.remark,	
			FRFP.companyid,
            I.itemname,
            I.itemunitid,
            R.refname as itemunitname,
            FPO.plannedqty,
            FPO.receipt_pendingqty as balance_qty
            
     FROM  feedmill_receipt_from_production  FRFP
     
     LEFT JOIN item I ON FRFP.itemid = I.id 
     LEFT JOIN `reference` R ON I.itemunitid = R.id
      LEFT JOIN feedmill_productionorder FPO ON FRFP.productionorder_id = FPO.id
     
     WHERE  FRFP.id = p_id AND
			FRFP.companyid = p_companyid;
   
END;



CREATE PROCEDURE `spc_feedrequiredplan_report`(
 In p_warehouseid INT(11),
 IN p_breederbatchid varchar(200),
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_companyid INT (11)
 )
BEGIN
   SET @breederbtachid = p_breederbatchid;
   
   SELECT breederbatchid,scheduledate, itemid, quantity, 
   birdebalance, flockage, requiredage,secondwqeekno,firstweekno,
   firstremaingdays,weekdaysdiff,(weekdiff+firstweekno)as weekdiff,seconremaingdays,
   fun_feedstditemwise(itemid,firstweekno,firstremaingdays) as firesfeed,
   fun_feedstditemwise(itemid,secondwqeekno,seconremaingdays) as secfeed,
   fun_feedstditemwise(itemid,(weekdiff+firstweekno),weekdaysdiff) as tiredfeed,
   partyname,
   itemname,
   firstday,
   secondday,firstdaydiff,seconddaydiff,
   IFNULL(closingbalnce,0) as closingbalnce
  

   
   FROM(
   SELECT 
   BBP.breederbatchid as breederbatchid,
   DATE_FORMAT( BBP.placementdate,'%d/%m/%Y') as scheduledate,
   BBPD.itemid as itemid,
   BBPD.quantity as quantity,
   (BBPD.quantity-IFNULL(fnc_biredbalance(BBP.breederbatchid,BBPD.itemid, BBP.placementdate, p_fromdate),0)) as birdebalance,
   (FORMAT(FLOOR(datediff( p_fromdate,BBP.placementdate)/7 ),0))as flockage,
   (FORMAT(FLOOR(datediff( p_todate,BBP.placementdate)/7 ),0))as requiredage,
    MOD((datediff( p_fromdate,BBP.placementdate)),7) as firstday,
    MOD((datediff( p_todate,BBP.placementdate)),7) as secondday,
   datediff( p_todate,BBP.placementdate) as firstdaydiff,
   datediff( p_fromdate,BBP.placementdate) as seconddaydiff,
	(FORMAT(FLOOR(datediff( p_todate,BBP.placementdate)/7 ),0)+1)as secondwqeekno,
    (FORMAT(FLOOR(datediff( p_fromdate,BBP.placementdate)/7 ),0)+1)as firstweekno,
    (7-MOD((datediff( p_fromdate,BBP.placementdate)),7)) as firstremaingdays,
    (7-MOD((datediff( p_todate,BBP.placementdate)),7)) as seconremaingdays,
     (((FORMAT(FLOOR(datediff( p_todate,BBP.placementdate)/7 ),0)-FORMAT(FLOOR(datediff( p_fromdate,BBP.placementdate)/7 ),0)+1)*7)-1)as weekdaysdiff,
    -- (((FORMAT(FLOOR(datediff( p_todate,BBP.placementdate)/7 ),0)-FORMAT(FLOOR(datediff( p_fromdate,BBP.placementdate)/7 ),0)) -1)*7)as weekdaysdiff,)
   ((FORMAT(FLOOR(datediff( p_todate,BBP.placementdate)/7 ),0)-FORMAT(FLOOR(datediff( p_fromdate,BBP.placementdate)/7 ),0))-1)as weekdiff,
    PR.partyname as partyname,
	I.itemname as itemname,
	fun_feedreqclosingbalance(BBP.breederbatchid,BBPD.itemid,p_companyid) as closingbalnce
   
   FROM
   breederbatchplacement BBP
   LEFT JOIN breederbatchplacementdetail BBPD ON BBP.id = BBPD.breederbatchplacementid
   LEFT JOIN grpo GR ON GR.id = BBP.grpono
   LEFT JOIN party PR ON PR.id = GR.supplierid
    LEFT JOIN item I ON I.id = itemid
   
   
   WHERE 
			FIND_IN_SET(BBP.breederbatchid,@breederbtachid) AND
			-- BBP.placementdate BETWEEN p_fromdate AND p_todate AND
            BBP.companyid = p_companyid) as temp;
END;



CREATE PROCEDURE `spc_financialyeardocseries_newseries`(
	IN p_doccode VARCHAR(200),
    IN p_companyid INT,
    OUT out_seriesid VARCHAR(50)
)
BEGIN

	SET @dbtableaffected = '', @seriescolumn = '', @typecolumn = '', @startwith = '';
    SET @endto = '', @prefix = '', @length = '', @companyid = 0;
    
    SELECT 
		DS.dbtableaffected, DS.seriescolumn, DS.typecolumn, startwith, endto, prefix, length
		INTO 
		@dbtableaffected, @seriescolumn, @typecolumn, @startwith, @endto, @prefix, @length
	FROM
		docseries DS
	LEFT JOIN financialyeardocseries FYS ON DS.id = FYS.docseriesid
	WHERE
		DS.doccode = p_doccode;
        
    SET @maxid = NULL;
    SET @seriesno = NULL;
    
    -- SET @qery = CONCAT("SELECT id, ", @seriescolumn ," INTO @maxid, @seriesno FROM ", @dbtableaffected, " WHERE companyid = ", p_companyid ," AND NULLIF(" , @seriescolumn , ", '') IS NOT NULL ORDER BY id DESC Limit 1;");
    SET @qery = CONCAT("SELECT id, ", @seriescolumn ," INTO @maxid, @seriesno FROM ", @dbtableaffected, " WHERE companyid = ", p_companyid ," ORDER BY id DESC Limit 1;");
    
	PREPARE stmt1 FROM @qery; 
	EXECUTE stmt1; 
	DEALLOCATE PREPARE stmt1; 
    
    SET @maxno = 0;
    SET @isno = 0;
    
    -- select @maxid, @seriesno;
    
    IF(@seriesno IS NOT NULL) THEN
    
		-- select '@seriesno IS NOT NULL';
    
		SELECT REPLACE(CAST(@seriesno as CHAR(100)), @prefix, '') INTO @maxno;
        
        -- select @maxno;
		
        -- Check value is number
		SELECT @maxno REGEXP '^[0-9]+$' INTO @isno;
        
        IF(@isno = 1) THEN -- check is number
        
			-- select '@isno check is number';
        
			SET @incno = (CONVERT(@maxno, UNSIGNED INTEGER) + 1);
           
			IF(@incno >= @startwith AND @incno <= @endto) THEN -- check number is between Start and End number
				
                -- select '@incno >= @startwith AND @incno <= @endto';
                
                -- Set Zeros in series
				SET @zerocount = @length - (CHAR_LENGTH(@prefix) + CHAR_LENGTH(@incno));
                SET @zerostr = '';
				SET @xcnt = 1;
				 WHILE @xcnt  <= @zerocount DO
					SET @zerostr = concat(@zerostr,'0');
				    SET @xcnt = @xcnt + 1; 
				 END WHILE;
                 
				-- select @length, CHAR_LENGTH(@prefix), CHAR_LENGTH(@incno), @incno, @zerostr;
            
				SELECT CONCAT(@prefix, @zerostr, @incno) INTO out_seriesid;
                
                -- select out_seriesid;
            
            END IF;
            
		END IF;

	ELSE
    
		SET @zerocount = @length - (CHAR_LENGTH(@prefix) + CHAR_LENGTH(@startwith));
                 SET @zerostr = '';
				 SET @xcnt = 1;
				 WHILE @xcnt  <= @zerocount DO
					SET @zerostr = concat(@zerostr,'0');
				    SET @xcnt = @xcnt + 1; 
				 END WHILE;
            
			SELECT CONCAT(@prefix, @zerostr, @startwith) INTO out_seriesid;
        
    END IF;
    
END;



CREATE PROCEDURE `spc_financialyeardocseries_save`(
   IN p_id INT(11),
   IN p_docseriesid INT,
   IN p_docname VARCHAR(200),
   IN p_doccode VARCHAR(200),
   IN p_length INT,
   IN p_startwith INT,
   IN p_endto INT,
   IN p_prefix VARCHAR(20),
   IN p_financialyearsettingid INT,
   IN p_default INT,
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO financialyeardocseries
						(`id`,
						`docseriesid`,
						`docname`,
						`doccode`,
						`length`,
						`startwith`,
						`endto`,
						`prefix`,
						`financialyearsettingid`,
						`default`,
						`companyid`,
                        `createdby`,
                        `createddate`)
					VALUES 
							(
							p_id, p_docseriesid, p_docname, p_doccode, p_length, p_startwith,
							p_endto, p_prefix, p_financialyearsettingid, p_default, p_companyid,
                            p_userid, now());
						
			  SET @action = 'INSERT';
			ELSE
			
				UPDATE financialyeardocseries
						SET 
							docseriesid = p_docseriesid,
							docname = p_docname,
							doccode = p_doccode,
							length = p_length,
							startwith = p_startwith,
							endto = p_endto,
							prefix = p_prefix,
							financialyearsettingid = p_financialyearsettingid,
							`default` = p_default,
                            `modifiedby` = p_userid,
                            `modifieddate` = now(),
							companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
                        
                        
				   SET @action = 'UPDATE';     
						
						
			END IF;
			
			SELECT LAST_INSERT_ID() INTO out_id; 
			
		   -- record log
		   -- CALL spc_commonlog_save(p_companyid, 'financialyeardocseries', out_id, @action, p_userid);

	
END;



CREATE PROCEDURE `spc_financialyeardocseries_search`(
	IN p_financialyearsettingid INT,
    IN p_companyid INT
)
BEGIN

	SELECT
		FDS.id,
        DS.id as docseriesid,
        DS.docname,
        DS.doccode,
        FDS.length,
        FDS.startwith,
        FDS.endto,
        FDS.prefix,
        FDS.financialyearsettingid,
        FDS.`default`,
        CASE WHEN FDS.id IS NULL THEN 'Navigation' ELSE 'Inactive' END AS Navigation
        
	FROM
		docseries DS
	LEFT JOIN financialyeardocseries FDS ON DS.id = docseriesid 
			AND FDS.companyid = p_companyid
			AND FDS.financialyearsettingid = p_financialyearsettingid
    LEFT JOIN financialyearsetting FYS ON FYS.id = FDS.financialyearsettingid;
    	
END;



CREATE PROCEDURE `spc_financialyearsetting_save`(
   IN p_id INT(11),
   IN p_yearname NVARCHAR(50),
   IN p_yearcode NVARCHAR(20),
   IN p_startfrom DATE,
   IN p_endto DATE,
   IN p_active TINYINT,
   IN p_statusid INT,
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    SET @errorexists = 0;
    
    if (EXISTS(SELECT * FROM financialyearsetting WHERE 
		(p_id IS NULL AND (yearname = p_yearname OR yearcode = p_yearcode))
        OR
        (p_id IS NOT NULL AND (p_id != id AND (yearname = p_yearname OR yearcode = p_yearcode)))
    )) THEN
    
		SET @errorexists = -1;
    
    ELSEIF(EXISTS(SELECT * FROM financialyearsetting WHERE 
		(p_id IS NULL AND ((p_startfrom BETWEEN startfrom AND endto) OR (p_endto BETWEEN startfrom AND endto)))
        OR
        (p_id IS NOT NULL AND (p_id != id AND ((p_startfrom BETWEEN startfrom AND endto) OR (p_endto BETWEEN startfrom AND endto))))
    )) THEN
    
		SET @errorexists = -2;
    
    END IF;
    
    
    IF(@errorexists = 0) THEN
    
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO financialyearsetting 
						(`id`,
						`yearname`,
						`yearcode`,
						`startfrom`,
						`endto`,
						`active`,
						`statusid`,
						`createdby`,
						`createddate`,
						`companyid`)
					VALUES 
						(p_id, p_yearname, p_yearcode, p_startfrom, p_endto, p_active,p_statusid,  p_userid, now(), p_companyid);
						
			  SET @action = 'INSERT';
			ELSE
			
				UPDATE financialyearsetting
						SET yearname = p_yearname,
							yearcode = p_yearcode,
							startfrom = p_startfrom,
							endto = p_endto,
							statusid = p_statusid,
							modifiedby = p_userid,
							modifieddate = now(),
							active = p_active,
							companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
				   SET @action = 'UPDATE';     
						
						
			END IF;
			
			SELECT LAST_INSERT_ID() INTO out_id; 
			
		   -- record log
		   CALL spc_commonlog_save(p_companyid, 'financialyearsetting', out_id, @action, p_userid);

	 ELSE
    
	 SELECT @errorexists INTO out_id;

	 END IF;
END;



CREATE PROCEDURE `spc_financialyearsetting_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
		FY.`id`,
		FY.`yearname`,
		FY.`yearcode`,
         DATE_FORMAT(startfrom,'%d/%m/%Y') as startfrom,
         DATE_FORMAT(endto,'%d/%m/%Y') as endto,
		FY.`statusid`,
         REF1.refname as `statusname`,
		FY.`createdby`,
		FY.`createddate`,
		FY.`modifiedby`,
		FY.`modifieddate`,
        FY.`active`,
        FY.`companyid`
	FROM
		financialyearsetting FY
	LEFT JOIN `reference` REF1 ON FY.statusid = REF1.id
	WHERE
		FY.companyid = p_companyid;
    
END;



CREATE PROCEDURE `spc_financialyearsetting_select`(
	IN p_id INT
)
BEGIN

	SELECT
		`id`,
		`yearname`,
		`yearcode`,
		 DATE_FORMAT(startfrom,'%d/%m/%Y') as startfrom,
         DATE_FORMAT(endto,'%d/%m/%Y') as endto,
		`statusid`,
		`createdby`,
		`createddate`,
		`modifiedby`,
		`modifieddate`,
        `active`,
        `companyid`
	FROM
		financialyearsetting
	WHERE
		id = p_id;
    
END;



CREATE PROCEDURE `spc_financialyearsetting_validyears`(
	IN p_companyid INT
)
BEGIN

	SELECT
		id,
		yearname,
        yearcode,
        DATE_FORMAT(startfrom,'%d/%m/%Y') as startfrom,
        DATE_FORMAT(endto,'%d/%m/%Y') as endto
	FROM
		financialyearsetting
	WHERE
		statusid = 6021; -- 6021 is Open

END;



CREATE PROCEDURE `spc_flockgather_report`(
 IN p_batchid INT,
 IN p_companyid INT
 )
BEGIN
	SET @feeditemgroupids = null;
	SET @medicineitemgroupids = null;
	SET @vaccineitemgroupids = null;
	SET @vitaminitemgroupids = null;
    SET @chicksitemgroupids = null;
    SELECT  
		feeditemgroupids,medicineitemgroupids,
		vaccineitemgroupids,vitaminitemgroupids,
        chicksitemgroupids
		INTO @feeditemgroupids,@medicineitemgroupids,
		@vaccineitemgroupids, @vitaminitemgroupids,
        @chicksitemgroupids
        
	FROM
		breedersetting
        
        WHERE 
			companyid = p_companyid limit 1;
    	
    SET @itemgroupid = concat(@feeditemgroupids,',',@medicineitemgroupids, ',',@vaccineitemgroupids, ',',@vitaminitemgroupids, ',',@chicksitemgroupids);
    SELECT
		  MT.id,
          MT.tobatchid as batchid,
		  DATE_FORMAT(MT.transferdate,'%d/%m/%Y') as date,
          itemid,
          I.itemgroupid,
          MTD.itemname,
          SUM(transferedquantity) as quantity,
          I.unitcost,
           (SUM(transferedquantity)*I.unitcost)as ammount,
          CONCAT(IG.groupname , ' In') as groupname
       
    FROM
		materialtransfer MT
        
		 LEFT JOIN materialtransferdetails MTD ON MT.id =MTD.materialtransferid
         
         INNER JOIN item I ON  MTD.itemid = I.id  AND  
         FIND_IN_SET(I.itemgroupid,@itemgroupid) 
        LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id 
          
         
	
	WHERE
		MT.tobatchid = p_batchid AND 
		MT.companyid = p_companyid AND transfersource = 501 -- 501 is breeder source 
        group by itemid;
        
            SET @itemgroupid = concat(@feeditemgroupids,',',@medicineitemgroupids, ',',@vaccineitemgroupids, ',',@vitaminitemgroupids, ',',@chicksitemgroupids);
    SELECT
			MI.id,
			MI.batchid,
			DATE_FORMAT(MI.issuedate,'%d/%m/%Y') as date,
			itemid,
			I.itemgroupid,
			MID.itemname,
			SUM(issuequantity) as quantity,
			I.unitcost,
			(SUM(issuequantity)*I.unitcost)as ammount,
            CONCAT(IG.groupname ,' Out') as groupname
       
    FROM
		materialissue MI
        
		 LEFT JOIN materialissuedetail MID ON MI.id = MID.materialissueid
         INNER JOIN item I ON  MID.itemid = I.id  AND  
         FIND_IN_SET(I.itemgroupid,@itemgroupid)
         LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id 
         
	
	WHERE
		MI.batchid = p_batchid AND 
		MI.companyid = p_companyid AND issuetypeid = 381
        group by itemid;
END;



CREATE PROCEDURE `spc_freightdetail_save`(
		IN p_id INT,
        IN p_purchaseinvoiceid INT,
		IN p_freighttypeid INT,
        IN p_freightamount DECIMAL(9,3),
        IN p_taxid INT,
        IN p_taxpercent DECIMAL(9,3),
		IN p_cgstid INT(11),
		IN p_cgstpercent DECIMAL(9,3),
		IN p_cgstamount DECIMAL(9,3),
		IN p_sgstid INT(11),
		IN p_sgstpercent DECIMAL(9,3),
		IN p_sgstamount DECIMAL(9,3),
		IN p_igstid INT(11),
		IN p_igstpercent DECIMAL(9,3),
		IN p_igstamount DECIMAL(9,3),
		IN p_utgstid INT(11),
		IN p_utgstpercent DECIMAL(9,3),
		IN p_utgstamount DECIMAL(9,3),
        IN p_companyid INT,
		IN p_userid INT,
		OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO freightdetail 
				(purchaseinvoiceid, freighttypeid, freightamount,
               taxid,taxpercent,cgstid, cgstpercent,
               cgstamount,sgstid,sgstpercent,sgstamount,
               igstid,igstpercent,igstamount,utgstid,
               utgstpercent,utgstamount, companyid)
			VALUES 
				(p_purchaseinvoiceid, p_freighttypeid, p_freightamount,
                p_taxid,p_taxpercent,p_cgstid,p_cgstpercent, 
                p_cgstamount, p_sgstid,p_sgstpercent, p_sgstamount,
                p_igstid,p_igstpercent,p_igstamount,
                p_utgstid,p_utgstpercent, p_utgstamount, p_companyid);
                
            SET @action = 'INSERT';
	ELSE
    
		UPDATE freightdetail
				SET
                purchaseinvoiceid = p_purchaseinvoiceid, 
                freighttypeid = p_freighttypeid, 
                freightamount = p_freightamount,
				taxid = p_taxid,
                taxpercent= p_taxpercent,
                cgstid = p_cgstid,
                cgstpercent= p_cgstpercent,
                cgstamount = p_cgstamount,
                sgstid = p_sgstid,
                sgstpercent =p_sgstpercent,
                sgstamount =p_sgstamount,
                igstid = p_igstid,
                igstpercent =p_igstpercent,
                igstamount = p_igstamount,
                utgstid = p_utgstid,
                utgstpercent =p_utgstpercent,
                utgstamount = p_utgstamount,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
    CALL spc_commonlog_save(p_companyid, 'freightdetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_freightdetail_search`(
	IN p_purchaseinvoiceid INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
		FD.id as freightdetailid,
        FD.freighttypeid,
        purchaseinvoiceid,
        freightamount,
        taxpercent,
        taxid,
		FR.freightname as freighttype,
		FD.taxpercent,
	    FD.cgstpercent,
        FD.cgstamount,
        FD.sgstpercent,
        FD.sgstamount,
        FD.igstpercent,
		FD.igstamount,
        FD.utgstpercent,
        FD.utgstamount,
        FD.sgstid,
	    FD.cgstid,
	    FD.igstid,
	    FD.utgstid
        
        
	
	FROM 
		freightdetail FD
        
	 LEFT JOIN freight FR ON FD.freighttypeid = FR.id
    
    
	WHERE 
		 FD.purchaseinvoiceid = p_purchaseinvoiceid
         AND FD.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_freight_ddl`(
	IN p_companyid INT
)
BEGIN

	SELECT
		`id`,
		`freightname`,
		`companyid`
	FROM
		`freight` 
        
	WHERE
		companyid = p_companyid;
END;



CREATE PROCEDURE `spc_freight_save`(
   IN p_id INT(11),
   IN p_freightname VARCHAR(200),
   IN p_remark VARCHAR(500),
   IN p_inputledgerid INT(11),
   IN p_outputledgerid INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO freight 
				(id, freightname, remark, inputledgerid, outputledgerid, companyid)
			VALUES 
				(p_id,  p_freightname, p_remark, p_inputledgerid, p_outputledgerid, p_companyid);
                
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE freight
				SET freightname = p_freightname,
					remark = p_remark,
                    inputledgerid = p_inputledgerid,
                    outputledgerid = p_outputledgerid,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'freight', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_freight_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
		F.`id`,
		F.`freightname`,
		F.`remark`,
		F.inputledgerid, 
         COA1.coaname as inputledgername,
         F.outputledgerid,
         COA2.coaname as outputledgername,
		F.`companyid`
	FROM
		`freight` F
        
	LEFT JOIN `chartofaccount` COA1 ON COA1.id = F.inputledgerid
    LEFT JOIN `chartofaccount` COA2 ON COA2.id = F.outputledgerid
    
	WHERE
		F.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_freight_select`(
	IN p_id INT
)
BEGIN

	SELECT
		`id`,
		`freightname`,
		`remark`,
		`inputledgerid`,
		`outputledgerid`,
		`companyid`
	FROM
		`freight`
	WHERE
		id = p_id;
END;



CREATE PROCEDURE `spc_genledgertb_report`(
	IN p_branchid INT(11),
	IN p_fromdate DATE,
	IN p_todate DATE,
    IN p_companyid INT(11)
)
BEGIN

	 SET @openingdramount = null;
     SET @openingcramount = null;

	SELECT JED.id,
		   JED.journalentryid,
           JED.acledgerid,
           COA.glcode,
           COA.coaname as ledgername,
          -- ((IFNULL((SELECT openingbalance FROM ledgeropeningbalance WHERE ledgerid = JED.acledgerid),0)) + (SELECT SUM(JED.dramount) FROM journalentrydetail WHERE JE.voucherdate < p_fromdate)) as openingdramount,
          -- ((IFNULL((SELECT openingbalance FROM ledgeropeningbalance WHERE ledgerid = JED.acledgerid),0)) - (SELECT SUM(JED.cramount) FROM journalentrydetail WHERE JE.voucherdate < p_fromdate)) as openingcramount,
           IFNULL(fnc_openingcreditdebitbal(JED.acledgerid, p_fromdate, 'debit'),0) as openingdramount,
           IFNULL(fnc_openingcreditdebitbal(JED.acledgerid, p_fromdate, 'credit'),0) as openingcramount,
           IFNULL(SUM(JED.dramount),0) as dramount,
           IFNULL(SUM(JED.cramount),0) as cramount
           
	FROM journalentry JE
    
    LEFT JOIN journalentrydetail JED ON JE.id = JED.journalentryid
    LEFT JOIN chartofaccount COA ON JED.acledgerid = COA.id
    
    WHERE JE.voucherdate BETWEEN p_fromdate AND p_todate
    AND JE.branchid = p_branchid
    AND JE.companyid = p_companyid
    
    GROUP BY JED.acledgerid;

END;



CREATE PROCEDURE `spc_getavailablesetters_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		SB.id as batchno,
        SB.setterid,
        S.settername,
        SB.slotid,
        SS.slotname,
		L.locationname,
        SB.actualquantity,
		BB.batchname as breederbatchname,
        DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as batchstartdate
	
    FROM
		setterbatch SB
	
    LEFT JOIN setter S ON SB.setterid = S.id
    LEFT JOIN setterslots SS ON SB.slotid = SS.id
    LEFT JOIN breederbatch BB on SB.breederbatchid = BB.id
	LEFT JOIN location L ON S.locationid = L.id
        
	WHERE
		SB.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_getbreederbatchbalance_instoke`(
    IN p_shedid INT,
    IN p_week INT,
    IN p_breederbatchid INT
)
BEGIN

 SET @DefaultFemaleChiksid = NULL;
 SET @instock = NULL;
 
/* SELECT 
   defaultfemalechickid INTO @DefaultFemaleChiksid
   FROM breedersetting
   WHERE companyid = 1 limit 1;*/
SELECT 
   femaleitemid INTO @DefaultFemaleChiksid
   FROM breederbatch
   WHERE id = p_breederbatchid;
    
   SELECT 
       hhpperweek
   
   FROM breederperformanceobjective
   
   WHERE ageinweek = p_week AND itemid =@DefaultFemaleChiksid;

	
     SELECT 
         CASE WHEN BBB.itemid =@DefaultFemaleChiksid THEN @instock:= BBB.quantity ELSE 0 END as instock,
            I.itemcode,
            I.itemname
			
    FROM
		breederbatchbalance BBB
       LEFT JOIN breedershedline BSL ON BBB.breedershedpenid = BSL.id
        LEFT JOIN item I ON BBB.itemid = I.id
   	
	WHERE
		BBB.breedershedid = p_shedid AND
        BBB.quantity != 0;
END;



CREATE PROCEDURE `spc_getbreederreasons`(
   IN p_typeid INT,
   IN p_companyid INT
)
BEGIN
    
    SELECT
		 id,
         reason
	
    FROM
		breederreasons

	WHERE
		companyid = p_companyid AND
        typeid = p_typeid;
	
END;



CREATE PROCEDURE `spc_getcandlingtest`(
	IN p_id INT
)
BEGIN

	SELECT CT.id,
		setterbatchid as settingno,
        DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
        L.locationname,
		CT.setterid,
        S.settername,
        BB.batchname as breederbatchname,
        CT.breederbatchid,
        W.warehousename,
		DATE_FORMAT(testdate,'%d/%m/%Y') as testdate,
		CT.actualquantity,
		samplequantity,
		trueinfertile,
		clears,
		bloodring,
		membrane,
		agemortality,
		fertility,
		fertilitypercentage,
        CT.actualquantity as settingquantity
        
	FROM
		candlingtest CT
        
		LEFT JOIN setterbatch SB ON CT.setterbatchid = SB.id
        LEFT JOIN setter S ON CT.setterid = S.id     
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN breederbatch BB on CT.breederbatchid = BB.id
		LEFT JOIN warehouse W ON S.warehouseid = W.id
        
	WHERE
		CT.id = p_id;

END;



CREATE PROCEDURE `spc_getcbfdailytransaction_byshedid`(
 In p_shedid INT,
 In p_companyid INT 
 )
begin
set @approved = "no";
 IF(EXISTS (SELECT id FROM cbf_dailytransaction WHERE shedid = p_shedid AND 
       statusid = 3061 AND 
       companyid = p_companyid )) then
        SET @approved = "yes";
   end if;
   select @approved as approved;
END;



CREATE PROCEDURE `spc_getcbfreasons`(
   IN p_typeid INT,
   IN p_companyid INT
)
BEGIN
    
    SELECT
		 id,
         reason
	
    FROM
		cbf_reasons

	WHERE
		companyid = p_companyid AND
        typeid = p_typeid;
	
END;



CREATE PROCEDURE `spc_getcurrenthatcherysettings`(
    IN p_companyid INT,
    IN p_restperiod INT,
    IN p_locationid INT
)
BEGIN
     SELECT
		S.id as setterid,
        S.settername,
        S.capacity as settercapacity,
        CASE WHEN (SB.batchdate IS NULL) THEN NULL ELSE DATE_FORMAT(SB.batchdate,'%d/%m/%Y') END as batchstartdate,
        CASE WHEN (SB.batchdate IS NULL) THEN NULL ELSE DATE_FORMAT(DATE_ADD(SB.batchdate, INTERVAL 18 DAY),'%d/%m/%Y') END as batchenddate,
        CASE WHEN (SB.batchdate IS NULL) THEN NULL ELSE DATE_FORMAT(DATE_ADD(SB.batchdate, INTERVAL 18 + p_restperiod DAY),'%d/%m/%Y') END as setteravailabledate,
        SB.id as setterbatchid,
		fnc_checkissetterscheduled(S.id, p_companyid) as isscheduled,
		-- DATE_FORMAT(fnc_getScheduleDate(SB.detailsid),'%d/%m/%Y') as scheduleddate
		CASE WHEN (SB.detailsid IS NULL) THEN NULL ELSE DATE_FORMAT(fnc_getScheduleDate(S.id, IFNULL(SB.detailsid,0)),'%d/%m/%Y') END as scheduleddate
    FROM
		setter S
		LEFT JOIN setterbatch SB ON S.id = SB.setterid
      
	WHERE
		S.companyid = p_companyid AND
        S.locationid = p_locationid;
END;



CREATE PROCEDURE `spc_getdailytransaction_byshedid`(
 In p_shedid INT,
 In p_companyid INT 
 )
begin
set @approved = "no";
 IF(EXISTS (SELECT id FROM breederdailytransaction WHERE shedid = p_shedid AND 
       statusid = 821 AND 
       companyid = p_companyid )) then
        SET @approved = "yes";
   end if;
   select @approved as approved;
END;



CREATE PROCEDURE `spc_getlayerbatchbalance_instoke`(
    IN p_shedid INT,
    IN p_week INT
)
BEGIN
    
   SELECT 
       curhhp
   
   FROM layerperformanceobjective
   
   WHERE ageinweek = p_week;

	
     SELECT
			LBB.itemid,
            I.itemcode,
            I.itemname,
			LBB.quantity as instock
			
    FROM
		layerbatchbalance LBB
        LEFT JOIN layershedline LSL ON LBB.layershedlineid = LSL.id
        LEFT JOIN item I ON LBB.itemid = I.id
   	
	WHERE
		LBB.layershedid = p_shedid AND
        LBB.quantity != 0;
END;



CREATE PROCEDURE `spc_getlayerdailytransaction_byshedid`(
 In p_shedid INT,
 In p_companyid INT 
 )
begin
set @approved = "no";
 IF(EXISTS (SELECT id FROM layerdailytransaction WHERE shedid = p_shedid AND 
       statusid = 1169 AND 
       companyid = p_companyid )) then
        SET @approved = "yes";
   end if;
   select @approved as approved;
END;



CREATE PROCEDURE `spc_getlayereggs_bylayersetting`(
 IN p_companyid INT
)
BEGIN

	SET @defaulttableeggsitemid = null;
    SET @defaultcrackedeggsitemid = NULL;
	SET @defaultdamageeggsitemid = NULL;
    SET @defaultpulleteggsitemid = NULL;
    
    SELECT  
		defaulttableeggsitemid,defaultcrackedeggsitemid,defaultdamageeggsitemid,defaultpulleteggsitemid
		INTO @defaulttableeggsitemid,@defaultcrackedeggsitemid,@defaultdamageeggsitemid,@defaultpulleteggsitemid
	FROM
	layersetting
	WHERE companyid = p_companyid;

	-- CREATE TEMPORARY TABLE tmppurregreport
    create temporary table layereggsitem
		(	id INT(11) ,
			itemid INT(11) not null,
            itemtypeid INT(11),
			quantity INT(11) ,
			avgweight INT(11),
			remark VARCHAR(200)
		);
insert into layereggsitem
(itemid, itemtypeid, quantity,avgweight) VALUES
(@defaulttableeggsitemid,1129, 0, 0);
insert into layereggsitem
(itemid, itemtypeid, quantity,avgweight) VALUES
(@defaultcrackedeggsitemid, 1130, 0, 0);
insert into layereggsitem
(itemid, itemtypeid, quantity,avgweight) VALUES
(@defaultdamageeggsitemid, 1131, 0, 0);
insert into layereggsitem
(itemid, itemtypeid, quantity,avgweight) VALUES
(@defaultpulleteggsitemid, 1132, 0, 0);

SELECT EI.id,itemid, itemtypeid, quantity, avgweight, remark, I1.itemname from layereggsitem EI
LEFT JOIN item I1 ON EI.itemid = I1.id;

END;



CREATE PROCEDURE `spc_getlayerreasons`(
   IN p_typeid INT,
   IN p_companyid INT
)
BEGIN
    
    SELECT
		 id,
         reason
	
    FROM
		layerreasons

	WHERE
		companyid = p_companyid AND
        typeid = p_typeid;
	
END;



CREATE PROCEDURE `spc_getlayerShedWisePlacementDetails`(
    IN p_shedid INT
)
BEGIN
    
   
	
     SELECT
			LBB.layershedid,
			LBB.layershedlineid as shedlineid,
            LSL.linename,
			LBB.itemid,
            I.itemcode,
            I.itemname,
			LBB.quantity as instock
			
    FROM
		layerbatchbalance LBB
        LEFT JOIN layershedline LSL ON LBB.layershedlineid = LSL.id
        LEFT JOIN item I ON LBB.itemid = I.id
   	
	WHERE
		LBB.layershedid = p_shedid AND
        LBB.quantity != 0 
        group by LBB.layershedlineid;
END;



CREATE PROCEDURE `spc_getsetterbatches_byscheduleid`(
	IN p_hatcheryscheduleid INT,
    IN p_companyid INT
)
BEGIN

	SELECT
		SB.id as settingno,
        SB.setterid,
        L.id as locationid,
		L.locationname,
		BB.batchname as breederbatchname,
		S.settername,
        DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
        SB.scheduleid,
        SB.status,
        R.refname,
        SB.itembatchid
	
    FROM
		setterbatch SB
	
    LEFT JOIN setter S ON SB.setterid = S.id
    LEFT JOIN breederbatch BB on SB.breederbatchid = BB.id
	LEFT JOIN location L ON S.locationid = L.id
    LEFT JOIN reference R ON R.id = SB.status    
        
	WHERE
		SB.companyid = p_companyid
        and SB.scheduleid = p_hatcheryscheduleid;
END;



CREATE PROCEDURE `spc_getShedWiseCbfPlacementDetails`(
    IN p_shedid INT
)
BEGIN
	
     SELECT
			CCP.shed_id,
			CB.breed_id,
            I.itemcode,
            I.itemname,
			SUM(CB.live_batch_qty) as instock,
            SUM(CB.live_batch_qty) as instockforref,
            CCP.placement_date as placementdate
			
    FROM
		cbf_chick_placement CCP
        LEFT JOIN cbf_batch_details CB ON CB.id = CCP.batch_id
        LEFT JOIN item I ON CB.breed_id = I.id
   	
	WHERE
		CCP.shed_id = p_shedid
	
    GROUP BY CB.breed_id;
END;



CREATE PROCEDURE `spc_getShedWisePlacementDetails`(
    IN p_shedid INT
)
BEGIN
    
 
        
	
     SELECT
			BBB.breedershedid,
			BBB.breedershedpenid as shedlineid,
            BSL.linename,
			BBB.itemid,
            I.itemcode,
            I.itemname,
			SUM(BBB.quantity) as instock
			
    FROM
		breederbatchbalance BBB
        LEFT JOIN breedershedline BSL ON BBB.breedershedpenid = BSL.id
        LEFT JOIN item I ON BBB.itemid = I.id
   	
	WHERE
		BBB.breedershedid = p_shedid -- AND
       -- BBB.quantity != 0
       GROUP BY BBB.itemid;
END;



CREATE PROCEDURE `spc_gettreedata`()
BEGIN


select  id,
        name,
        type,
        parentid 
from    (select * from temp1
         order by parentid, id) products_sorted,
        (select @pv := '1') initialisation
where   find_in_set(parentid, @pv)
and     length(@pv := concat(@pv, ',', id));


SELECT GROUP_CONCAT(lv SEPARATOR ',') FROM (
	SELECT @pv:=(SELECT GROUP_CONCAT(id SEPARATOR ',') FROM temp1 
    WHERE parentid IN (@pv)) AS lv FROM temp1 
JOIN
	(SELECT @pv:=1)tmp
	WHERE parentid IN (@pv)) a;


END;



CREATE PROCEDURE `spc_get_itemlivestock`(
   IN p_itemid INT,
   -- IN p_warehouseid INT,
	IN p_warehousebinid INT,
   IN p_companyid INT
)
BEGIN
    
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    SET @unitcost = 0;
    SET @unitname = null;
  
    SELECT IFNULL(SUM(MM.quantity), 0), IFNULL(IFNULL(SUM(MM.itemvalue), 0)/IFNULL(SUM(MM.quantity), 0),0), REF.refname into @p_inwardquantity, @unitcost, @unitname
    FROM materialmovement MM
    LEFT JOIN item I ON I.id = p_itemid
    LEFT JOIN `reference` REF ON REF.id = I.itemunitid
    WHERE MM.itemid = p_itemid AND
	MM.companyid = p_companyid AND
    MM.transactiontypeid = 681 AND
    MM.towarehousebinid = p_warehousebinid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    towarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    fromwarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
    fromwarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    towarehousebinid = p_warehousebinid;
    
   
   SELECT cast((@p_inwardquantity + @p_transferinquantity + @p_receiptquantity) - (@p_issuequantity + @p_transferoutquantity) as decimal(10,2)) as instock,
   @unitcost as unitcost,
   @unitname as unitname;
	
END;



CREATE PROCEDURE `spc_grpodetail_byservicepo_search`(
IN p_grpoid INT
)
BEGIN

	SELECT 
		GD.id as grpodetailid,
		GD.grpoid,
        GD.quantity,
		GD.itemid,
		GD.itemname,
        GD.unitprice,
        GD.itemdiscount,
        GD.taxpercent,
        GD.taxid,
        GD.freequantity,
		GD.itemunitid,
		REF1.refname,
        GD.quantity requiredquantity,
		GD.remark,
        GD.itembatch
	FROM 
		grpodetail GD
        
		 LEFT JOIN reference REF1 ON GD.itemunitid = REF1.id
         LEFT JOIN grpo G ON G.id = GD.grpoid
         
        
	WHERE
		GD.grpoid = p_grpoid;

END;



CREATE PROCEDURE `spc_grpodetail_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN


	-- SourceNo 262  ==> 'Purchased'

	DELETE FROM grpodetail
		WHERE 
			id = p_id
			AND NOT EXISTS (
				SELECT id FROM setterbatch SB
					INNER JOIN grpo GR ON GR.id = SB.sourcedeliveryid
                    INNER JOIN grpodetail GD ON GR.id = GD.grpoid
					WHERE SB.sourcedeliveryid = GR.id AND sourceid = 262
            );
    
    
	IF NOT EXISTS(SELECT * FROM grpodetail WHERE id = p_id) THEN
    
		-- record log
		CALL spc_commonlog_save(p_companyid, 'grpodetail', p_id, 'delete', p_userid);
        
        SET out_id = p_id;
	else
		SET out_id = -1;
        
	END IF;

END;



CREATE PROCEDURE `spc_grpodetail_save`(
	IN p_id INT,
	IN p_grpoid INT,
    IN p_purchaseorderdetailid INT,
    IN p_itemid INT,
    IN p_itemname VARCHAR(200),
    IN p_quantity DECIMAL(15,3),
    IN p_freequantity DECIMAL(15,3),
    IN p_itemunitid INT,
    IN P_unitprice INT,
    IN p_itemdiscount INT,
    IN p_taxpercent INT,
    IN p_taxid INT,
    IN p_remark VARCHAR(100),
    In p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	-- create itembatch for GRPO
    SET @itembatch = null;
    SET @itemgroup = null;

	SET @action = null;
    
    SET @servicepoid = null;
   select servicepoid INTO @servicepoid from grpo where id = p_grpoid;
    
     -- create itembatch for material receipt
        
	select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch from item I
	INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

	WHERE I.id = p_itemid;
	
	SELECT @itembatch;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO grpodetail 
				(grpoid, itemid, itemname, quantity, freequantity, itemunitid, remark, itembatch, unitprice, itemdiscount, taxpercent, taxid, companyid)
			VALUES 
				(p_grpoid, p_itemid, p_itemname, p_quantity, p_freequantity, p_itemunitid, p_remark, @itembatch, p_unitprice, p_itemdiscount, p_taxpercent, p_taxid, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE grpodetail
			SET grpoid = p_grpoid, 
				itemid = p_itemid, 
                itemname = p_itemname, 
                quantity = p_quantity, 
                freequantity = p_freequantity,
                itemunitid = p_itemunitid, 
                remark = p_remark,
                itembatch = @itembatch,
                unitprice = p_unitprice,
                itemdiscount = p_itemdiscount,
                taxpercent = p_taxpercent,
                taxid = p_taxid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    
   -- material recpt entry for servicepo
   
   
    if(@servicepoid IS NOT NULL) THEN
  
   SET @out_recid = NULL;
		CALL spc_materialreceipt_save(
			NULL, (SELECT grpodate FROM grpo WHERE id = p_grpoid),
            341, null, 322, NULL, p_userid,
            p_userid,(SELECT grpodate FROM grpo WHERE id = p_grpoid),
            p_companyid, p_userid, @out_recid
		);
        
         -- Material receipt Detail entry for servicepo
         SET @out_recdetailid = NULL;
         SET @itemgroup1 = null;
              /*  SET @itembatch1 = null;
				
				 -- create itembatch for material receipt
				
				select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) 
                INTO @itembatch1 from item I
				INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

				WHERE I.id = p_itemid;*/
				
	-- SELECT @itembatch1;
		CALL spc_materialreceiptdetail_save(
			NULL, @out_recid, p_itemid, p_itemname, p_quantity, P_unitprice,
            (p_quantity * P_unitprice), p_itemunitid, @itembatch,
			(SELECT towarehouseid FROM grpo WHERE id = p_grpoid)
            , p_companyid, p_userid, NULL, @out_recdetailid
		);
        
        
        -- get item group id from the item id and update itemgroup table
	SELECT itemgroupid INTO @itemgroup1 FROM item WHERE id = p_itemid;
	
	UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
	
	WHERE id = @itemgroup1;
    
    -- material movement entry for material receipt
		SET @out_movid1 = NULL;
		CALL spc_materialmovement_save(
			NULL, p_itemid, @itembatch, 684,
			out_recid, now(), p_quantity,
			NULL, NULL, (SELECT towarehouseid FROM grpo WHERE id = p_grpoid), NULL,
			(p_quantity * P_unitprice),
			p_companyid, p_userid, @out_movid1
		);
    
	 END IF;
     
     if((SELECT statusid FROM grpo WHERE id = p_grpoid) = 642) THEN
		
        SET @totalgrpoqty = null;
        
        SELECT SUM(quantity) INTO @totalgrpoqty FROM grpodetail
        WHERE grpoid = p_grpoid;
        
        IF(@totalgrpoqty <= (SELECT SUM(quantity) FROM purchaseorderdetail 
        WHERE purchaseorderid = (SELECT purchaseorderid FROM grpo WHERE id = p_grpoid)))
        
        THEN
       
			-- get item group id from the item id and update itemgroup table
			SELECT itemgroupid INTO @itemgroup FROM item WHERE id = p_itemid;
			
			UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
			
			WHERE id = @itemgroup;
			
			SELECT LAST_INSERT_ID() INTO out_id; 
			
			
			-- material movement entry for grpo
			SET @out_movid = NULL;
			CALL spc_materialmovement_save(
				NULL, p_itemid, @itembatch, 681,
				p_grpoid, now(), p_quantity,
				NULL, NULL, (SELECT towarehouseid FROM grpo WHERE id = p_grpoid),
				(SELECT towarehousebinid FROM grpo WHERE id = p_grpoid),
				(p_quantity * p_unitprice),
				p_companyid, p_userid, @out_movid
			);
			
			-- update pending grpo  quantity
			 SET @podQty = NULL;
             SET @mortalityqty = null;
			 
			 SELECT pendinggrpoquantity INTO @podQty FROM purchaseorderdetail WHERE id = p_purchaseorderdetailid;
             
             SET @totalshortage = 0;
             
             if exists(select id from chicksmortality where grpono = p_grpoid limit 1) THEN
				 
				 SELECT IFNULL((culls + mortality + shortage),0) INTO @totalshortage
				 FROM chicksmortality 
				 WHERE grpono = p_grpoid
				 AND itemid = p_itemid;
                 
			else
            
				select 0 into @totalshortage;
                
			end if;
				 
			 UPDATE purchaseorderdetail 
			 SET pendinggrpoquantity = (@podQty - (p_quantity+@totalshortage))
			 WHERE id = p_purchaseorderdetailid;
             
		ELSE
        
			SELECT -1 INTO out_id;
             
		END IF;
     
     END IF;
   
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'grpodetail', out_id, @action, p_userid);


END;



CREATE PROCEDURE `spc_grpodetail_search`(
	IN p_grpoid INT
)
BEGIN

	SELECT 
		GD.id as grpodetailid,
		GD.grpoid,
        GD.quantity,
		GD.itemid,
        IG.groupname,
		GD.itemname,
        GD.unitprice,
        GD.itemdiscount,
        GD.taxpercent,
        GD.taxid,
        GD.freequantity,
		GD.itemunitid,
		REF1.refname,
		GD.remark,
        GD.itembatch,
        POD.quantity as requiredquantity,
        POD.purchaseorderid,
        POD.pendinggrpoquantity,
        POD.id as purchaseorderdetailid,
        POD.taxpercent,
	    POD.cgstpercent,
        POD.cgstamount,
        POD.sgstpercent,
        POD.sgstamount,
        POD.igstpercent,
		POD.igstamount,
        POD.utgstpercent,
        POD.utgstamount,
        POD.sgstid,
	    POD.cgstid,
	    POD.igstid,
	    POD.utgstid
	FROM 
		grpodetail GD
        
		 LEFT JOIN `reference` REF1 ON GD.itemunitid = REF1.id
         LEFT JOIN grpo G ON G.id = GD.grpoid
         LEFT JOIN purchaseorderdetail POD ON POD.purchaseorderid = G.purchaseorderid
         AND POD.itemid = GD.itemid
         LEFT JOIN itemgroup IG ON IG.id = GD.itemid
        
	WHERE
		GD.grpoid = p_grpoid;

END;



CREATE PROCEDURE `spc_grpodetail_select`(
	IN p_id INT
)
BEGIN

	SELECT 
		id,
		grpoid,
		itemid,
		itemname,
		quantity,
		itemunitid,
		remark,
        itembatch
	FROM 
		grpodetail
        
	WHERE
		id = p_id;

END;



CREATE PROCEDURE `spc_grpoids_bylayerplacementschedule`(
	 IN p_placementscheduleid INT,
     IN p_companyid INT
     
)
BEGIN

SELECT LPD.id as placementscheduledetailid,
		LPD.placementscheduleid,
        G.id as grpono,
        G.purchaseorderid,
        DATE_FORMAT(G.grpodate,'%d/%m/%Y') as grpodate,
        G.statusid,
        REF.refname as statusname,
        G.remark,
        PO.purchaserequestid
       -- PT.partyname as suppliername
        
	FROM 
		layerplacementscheduledetail LPD
    
       INNER JOIN layerplacementschedule LPS ON LPS.id = LPD.placementscheduleid
       INNER JOIN purchaseorder PO ON PO.purchaserequestid = LPS.requestid
       INNER JOIN grpo G ON G.purchaseorderid = PO.id AND G.statusid = 642
       INNER JOIN grpodetail GD ON GD.grpoid = G.id  
       INNER JOIN `reference` REF ON REF.id = G.statusid
     --  INNER JOIN partner PT ON G.supplierid = PT.id

	
	WHERE
		LPD.placementscheduleid = p_placementscheduleid
        AND LPD.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_grpoids_byplacementschedule`(
	 IN p_placementscheduleid INT,
     IN p_companyid INT
     
)
BEGIN

SELECT BPD.id as placementscheduledetailid,
		BPD.placementscheduleid,
        G.id as grpono,
        G.purchaseorderid,
		DATE_FORMAT(G.grpodate,'%d/%m/%Y') as grpodate,
		-- G.grpodate,
        G.statusid,
        REF.refname as statusname,
        G.remark,
        PO.purchaserequestid
       -- PT.partyname as suppliername
        
	FROM 
		breederplacementscheduledetail BPD
    
       INNER JOIN breederplacementschedule BPS ON BPS.id = BPD.placementscheduleid
       INNER JOIN purchaseorder PO ON PO.purchaserequestid = BPS.requestid
       INNER JOIN grpo G ON G.purchaseorderid = PO.id
       INNER JOIN grpodetail GD ON GD.grpoid = G.id
       INNER JOIN `reference` REF ON REF.id = G.statusid
      -- INNER JOIN partner PT ON G.supplierid = PT.id

	
	WHERE
		BPD.placementscheduleid = p_placementscheduleid
        AND BPD.companyid = p_companyid
		
        GROUP BY G.id;

END;



CREATE PROCEDURE `spc_grpo_bypurchaserequestid`(
	IN p_purchaserequestid INT,
    IN p_companyid INT
)
BEGIN

	SELECT  GR.id,
			GR.supplierid,
            PT.partyname as suppliername,
            GR.companyid,
            PR.tobatchid,
            PRD.quantity,
            GRD.itembatch,
            G.towarehousebinid
            
            
	FROM grpo GR
    
    LEFT JOIN partner PT ON PT.id = GR.supplierid
    LEFT JOIN purchaseorder PO ON PO.id = GR.purchaseorderid
    INNER JOIN purchaserequest PR ON PR.id = PO.purchaserequestid        
	LEFT JOIN purchaserequestdetail PRD ON PRD.purchaserequestid = PR.id
    LEFT JOIN grpodetail GRD ON GRD.grpoid = GR.id
    
    WHERE
		GR.companyid = p_companyid
        and PO.purchaserequestid = p_purchaserequestid
        
	 GROUP BY GR.id;
END;



CREATE PROCEDURE `spc_grpo_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	-- SourceNo 262  ==> 'Purchased'

	DELETE FROM grpo
		WHERE 
			id = p_id
			AND NOT EXISTS (
				SELECT id FROM setterbatch
					WHERE sourcedeliveryid = p_id AND sourceid = 262
            );
    
    
	IF NOT EXISTS(SELECT * FROM grpo WHERE id = p_id) THEN
    
		-- record log
		CALL spc_commonlog_save(p_companyid, 'grpo', p_id, 'delete', p_userid);
	
		SET out_id = p_id;
        
	else
    
		SET out_id = -1;
    
	END IF;

END;



CREATE PROCEDURE `spc_grpo_save`(
		IN p_id INT,
        IN p_grpono VARCHAR(30),
		IN p_grpodate DATE,
		IN p_supplierid INT,
		IN p_referenceno VARCHAR(30),
		IN p_referencedate DATE,
		IN p_purchaseorderid INT,
		IN p_purchaseorderdate DATE,
		IN p_modeoftransfer INT(11),
		IN p_vehiclenumber VARCHAR(15),
		IN p_subject VARCHAR(200),
		IN p_remark VARCHAR(500),
        IN p_towarehouseid INT,
        IN p_towarehousebinid INT,
        IN p_discount DECIMAL(8,3),
		IN p_statusid INT,
        IN p_servicepoid INT(11),
        IN p_isservice TINYINT,
        IN p_ackid INT(11),
		IN p_companyid INT,
        IN p_userid INT,
		OUT out_id INT
)
BEGIN

	SET @action = null;
      
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		INSERT INTO grpo 
                (grpono, grpodate, supplierid, referenceno, referencedate, 
                purchaseorderid, purchaseorderdate, modeoftransfer, 
                vehiclenumber, subject, remark, statusid, towarehouseid, 
                towarehousebinid, discount, servicepoid, isservice, ackid, companyid)                
			VALUES 
				(p_grpono, p_grpodate, p_supplierid, p_referenceno, p_referencedate, 
                p_purchaseorderid, p_purchaseorderdate, p_modeoftransfer, 
                p_vehiclenumber, p_subject, p_remark, p_statusid, p_towarehouseid, 
                -- (SELECT id FROM warehousebin WHERE warehouseid = p_towarehouseid AND isdefault = 1 LIMIT 1),
                p_towarehousebinid, p_discount, p_servicepoid, p_isservice, p_ackid, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE grpo
			SET 
				grpono = p_grpono,
				grpodate = p_grpodate,
				supplierid = p_supplierid,
				referenceno = p_referenceno,
				referencedate = p_referencedate,
				purchaseorderid = p_purchaseorderid,
				purchaseorderdate = p_purchaseorderdate,
				modeoftransfer = p_modeoftransfer,
				vehiclenumber = p_vehiclenumber,
				subject = p_subject,
				remark = p_remark,
                towarehouseid = p_towarehouseid,
                towarehousebinid = p_towarehousebinid,
                discount = p_discount,
				statusid = p_statusid,
                servicepoid = p_servicepoid,
                isservice = p_isservice,
                ackid = p_ackid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                       
			SET @action = 'UPDATE';
            
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- journal entry for WIP bird
/*    SET @jeid = NULL;
   CALL spc_journalentry1_save(
		NULL, 
        p_grpodate,
        );
  */ 
   
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'grpo', out_id, @action, p_userid);
   
END;



CREATE PROCEDURE `spc_grpo_search`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		GR.id,
		DATE_FORMAT(grpodate,'%d/%m/%Y') as grpodate,
		GR.supplierid,
        PT.partyname as suppliername,
		GR.referenceno,
		DATE_FORMAT(referencedate,'%d/%m/%Y') as referencedate,
		GR.purchaseorderid,
		DATE_FORMAT(purchaseorderdate,'%d/%m/%Y') as purchaseorderdate,
		GR.modeoftransfer,
		GR.vehiclenumber,
		GR.subject,
		GR.remark,
		GR.statusid,
        GR.discount,
        REF1.refname as statusname,
		GR.companyid,
        GR.towarehouseid,
        W.warehousename,
        GR.servicepoid,
        GR.isservice,
        PO.purchaserequestid,
        PO.purchaseorderno,
        W.locationid,
        L.locationname,
        WB.binname as towarehousebinname,
        GR.towarehousebinid,
        GR.grpono
	FROM 
		grpo GR
	
    LEFT JOIN party PT ON GR.supplierid = PT.id
    LEFT JOIN `reference` REF1 ON REF1.id = GR.statusid
    LEFT JOIN warehouse W ON W.id = GR.towarehouseid
    LEFT JOIN warehousebin WB ON WB.id = GR.towarehousebinid
    LEFT JOIN purchaseorder PO ON PO.id = GR.purchaseorderid
    LEFT JOIN location L ON L.id = W.locationid
    
    WHERE
		GR.companyid = p_companyid
        
	ORDER BY 
		GR.id DESC;

END;



CREATE PROCEDURE `spc_grpo_searchbystatus`(
 --  IN p_statusid INT,
  IN p_companyid INT
)
BEGIN

	SELECT 
		GR.id,
		DATE_FORMAT(grpodate,'%d/%m/%Y') as grpodate,
		GR.supplierid,
        PT.partyname as suppliername,
		GR.referenceno,
		DATE_FORMAT(GR.referencedate,'%d/%m/%Y') as referencedate,
		GR.purchaseorderid,
		DATE_FORMAT(purchaseorderdate,'%d/%m/%Y') as purchaseorderdate,
		GR.modeoftransfer,
		GR.vehiclenumber,
		GR.subject,
		GR.remark,
		GR.statusid,
        GR.discount,
        REF1.refname as statusname,
		GR.companyid,
        GR.towarehouseid,
        W.warehousename,
        PO.purchaserequestid,
		PO.transactiontypeid,
        PO.deliveryfromaddressid,
        PO.deliverytowarehouseid,
		PO.deliveryfromstatecode,
        PO.deliverytostatecode,
        PA.address as delfromfulladdress,
        WH1.address as warehousefulladdress,
        ST.isunionterritory as warehouseisunionterritory,
        ST1.isunionterritory as deliveryfromisunionterritory,
        GR.towarehousebinid,
        WB.binname as towarehousebinname

	FROM 
		grpo GR
	
    LEFT JOIN party PT ON GR.supplierid  = PT.id
    LEFT JOIN `reference` REF1 ON REF1.id = GR.statusid
    LEFT JOIN warehouse W ON W.id = GR.towarehouseid
    LEFT JOIN warehousebin WB ON WB.id = GR.towarehousebinid
    LEFT JOIN purchaseorder PO ON PO.id = GR.purchaseorderid
    LEFT JOIN partyaddress PA ON PO.deliveryfromaddressid = PA.id
	LEFT JOIN warehouse WH1 ON PO.deliverytowarehouseid = WH1.id
    LEFT JOIN `state` ST ON WH1.stateid = ST.id
	LEFT JOIN `state` ST1 ON PA.stateid = ST1.id
    LEFT JOIN purchaseinvoice PI ON PI.grpono = GR.id 
    
    WHERE
		-- GR.statusid = p_statusid
		GR.companyid = p_companyid  AND
        PI.id is null
        
	ORDER BY 
		GR.id DESC;

END;



CREATE PROCEDURE `spc_grpo_select`(
	IN p_id INT
)
BEGIN

	SELECT 
		G.id,
		DATE_FORMAT(G.grpodate,'%d/%m/%Y') as grpodate,
		G.supplierid,
		G.referenceno,
        DATE_FORMAT(G.referencedate,'%d/%m/%Y') as referencedate,
		G.purchaseorderid,
        DATE_FORMAT(G.purchaseorderdate,'%d/%m/%Y') as purchaseorderdate,
		G.modeoftransfer,
		G.vehiclenumber,
		G.subject,
		G.remark,
		G.statusid,
        PO.purchaserequestid,
		G.companyid,
        G.towarehouseid,
        W.locationid,
        L.locationname,
        G.towarehousebinid
	FROM 
		grpo G
        LEFT JOIN purchaseorder PO ON PO.id = G.purchaseorderid
        LEFT JOIN warehouse W ON W.id = G.towarehouseid
        LEFT JOIN location L ON L.id = W.locationid
    WHERE
		G.id = p_id;

END;



CREATE PROCEDURE `spc_hatcherbatchforcurrentlocation_search`(
    IN p_companyid INT,
    IN p_locationid INT
)
BEGIN
    SET @defaulteggsitemid = null,
		@defaultdocitemid = null,
		@ddefaulthatcherywhfordoc = null,
        @overheadcostperegg = null,
        @docstandardcost = null,
        @defaulthatcherywhforeggs = null;
    
    
   SELECT @defaulteggsitemid:= defaulteggsitemid,
		  @defaultdocitemid:= defaultdocitemid,
		  @defaulthatcherywhfordoc:= defaulthatcherywhfordoc,
		  @defaulthatcherywhforeggs:= defaulthatcherywhforeggs,
          @docstandardcost:= docstandardcost,
          @overheadcostperegg:= overheadcostperegg
          
	FROM
		hatcherysettings 
	
    WHERE 
		companyid = p_companyid;
		
    
    SELECT
		HB.id as hatcherbatchno,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as hatcherbatchdate,
        HB.hatcherid,
        H.hatchername,
        HB.setterbatchid,
        HB.actualquantity,
        H.capacity,
        W.warehousename,
        W1.warehousename,
		H.locationid,
        S.breederbatchid,
        S.sourceid,
        B.batchname as breederbatchname,
        @defaulteggsitemid AS eggsitemid,
        @defaultdocitemid as docitemid,
        @defaulthatcherywhfordoc as wharehouseid,
		@defaulthatcherywhforeggs as eggswharehouseid,
        @docstandardcost as defaultdoccost,
        @overheadcostperegg as defaulteggscost,
        I.itemname as docitemname,
        I1.itemname as eggsitemname,
        I.unitcost,
        I.itemunitid,
        I1.unitcost as eggsunitcost,
        I.itemunitid as eggsitemunitid,
        I1.itemunitid as eggsitemunitid,
        R2.refname as itemunitname,
        S.itembatch as itembatchidformatissue,
        DATE_FORMAT(DATE_ADD(S.batchdate, INTERVAL 21 DAY),'%d/%m/%Y') as settingbatchdate
        
	
    FROM
		hatcherbatch HB
	
    LEFT JOIN hatcher H ON HB.hatcherid = H.id
	LEFT JOIN warehouse W ON W.id = @defaulthatcherywhfordoc
    LEFT JOIN warehouse W1 ON W1.id = @defaulthatcherywhforeggs
    LEFT JOIN reference R1 ON R1.id = HB.statusid
	LEFT JOIN setterbatch S ON S.id = HB.setterbatchid
    LEFT JOIN breederbatch B ON  S.breederbatchid = B.id 
    LEFT JOIN item I ON  I.id =  @defaultdocitemid
    LEFT JOIN item I1 ON  I1.id =  @defaulteggsitemid
    LEFT JOIN reference R2 ON R2.id = I.itemunitid
    
    
        
	WHERE
		HB.companyid = p_companyid
        AND H.locationid = p_locationid
        -- 302 = In Progress
        AND  HB.statusid = 302
        
	ORDER BY HB.id DESC;
END;



CREATE PROCEDURE `spc_hatcherbatch_availablesetters_search`(
    IN p_companyid INT,
    IN p_locationid INT
)
BEGIN

	SELECT 
		id,
        locationid,
        settername
        
	FROM
		setter
    
	WHERE
		active = 1 and
        locationid = p_locationid;
END;



CREATE PROCEDURE `spc_hatcherbatch_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM hatcherbatch WHERE id = p_id;
END;



CREATE PROCEDURE `spc_hatcherbatch_remainingcapacity`(
	IN p_setterbatchid INT,
	IN p_hatcherid INT
)
BEGIN

	SET @setterbatchusedquantity = NULL;
    SET @setterbatchactualquantity = NULL;
    SET @hatcherusedquantity = NULL;
    SET @hatchercapacity = NULL;
    
    
           
	       
	SELECT
        SB.actualquantity, sum(IFNULL(HB.actualquantity,0)) 
        INTO @setterbatchactualquantity, @setterbatchusedquantity
	FROM
		setterbatch SB
	
    LEFT JOIN hatcherbatch HB ON SB.id = HB.setterbatchid
    
	WHERE
		SB.id =  p_setterbatchid
        
	GROUP BY 
		SB.actualquantity;
		
	
    -- hatcher used quantity
     
	
	SELECT IFNULL(capacity, 0) INTO @hatchercapacity FROM hatcher  WHERE id = p_hatcherid;

	SELECT IFNULL(SUM(HB.actualquantity), 0) INTO @hatcherusedquantity
		FROM hatcherbatch HB
		inner join hatcher H ON HB.hatcherid = H.id
		WHERE 
				 HB.hatcherid = p_hatcherid
                 AND HB.statusid = 302; 
			   -- AND HB.setterbatchid = p_setterbatchid;
    
    
	SELECT 
		IFNULL(@setterbatchactualquantity, 0) AS setterbatchactualquantity,
		IFNULL(@setterbatchusedquantity, 0) AS setterbatchusedquantity,
		IFNULL(@hatchercapacity,0) AS hatchercapacity,
		@hatcherusedquantity AS hatcherusedquantity;
	
	
END;



CREATE PROCEDURE `spc_hatcherbatch_save`(
	IN p_id INT,
    IN p_hatcherid INT,
    IN p_setterid INT,
    IN p_setterbatchid INT,
    IN p_hatchercapacity INT,
    IN p_actualquantity INT,
    IN p_batchdate DATE,
    IN p_statusid INT,
    IN p_completiondate DATE,
    IN p_itembatch VARCHAR(100),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	-- Get hatchery setting default values
    
	SELECT  @defaulteggsitemid:= defaulteggsitemid,
			@defaulthatcherywhforeggs:= defaulthatcherywhforeggs,
			@overheadcostperegg:= IFNULL(overheadcostperegg, 0),
            @eggsitemname:=I.itemname,
            @itemunitid:=IFNULL(I.itemunitid,0),
            @WIPeggledgerid := WIPeggledgerid
	FROM
		hatcherysettings HS
        
        LEFT JOIN item I ON I.id = @defaulteggsitemid
    WHERE 
		HS.companyid = p_companyid;

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		-- Do material transfer from setter warehouse to particular hatcher warehouse
        SET @out_transferid = NULL;
		CALL spc_materialtransfer_save(
			NULL, 502, 502, 582, p_batchdate, p_batchdate,NULL,
			(SELECT warehouseid FROM setter WHERE id = p_setterid), NULL,
             621, p_setterbatchid,
			NULL, NULL, p_companyid, p_userid, @out_transferid
		);
        
		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, @out_transferid,
            (SELECT warehouseid FROM hatcher WHERE id = p_hatcherid), NULL,
            @defaulteggsitemid, @eggsitemname,
			p_actualquantity, p_actualquantity, 
			(SELECT refname FROM `reference` WHERE id = @itemunitid),
			p_itembatch, p_userid, p_companyid, @out_transferdetailid
		);
	
		-- Material Issue from setter warehouse to hatcher warehouse
		/*SET @out_issueid1 = NULL;
		CALL spc_materialissue_save(
			NULL, p_batchdate, 382, p_setterbatchid, 362, NULL,
			p_userid, (SELECT warehouseid FROM setter WHERE id = p_setterid),
            p_userid, p_batchdate, p_companyid, p_userid, @out_issueid1
		);
                            
		-- Itembatch details
		SET @out_issuedetailid1 = NULL;
		CALL spc_materialissuedetail_save(
			NULL, @out_issueid1, @defaulteggsitemid, (SELECT itemname FROM item WHERE id = @defaulteggsitemid),
			p_actualquantity, (SELECT unitcost FROM item WHERE id = @defaulteggsitemid), 
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			NULL, p_itembatch,
			p_companyid, p_userid, @out_issuedetailid1
		);

		-- material movement entry for material issue
		SET @out_movid2 = NULL;
		CALL spc_materialmovement_save(
			NULL, @defaulteggsitemid, p_itembatch, 683,
			@out_issueid1, p_batchdate, p_actualquantity,
			(SELECT warehouseid FROM setter WHERE id = p_setterid), NULL,
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			p_companyid, p_userid, @out_movid2
		);
        
        -- Make material receipt entry for Transfered eggs
		SET @out_recid = NULL;
		CALL spc_materialreceipt_save(
			NULL, p_batchdate, 342, NULL, 322, NULL,
			p_userid, p_userid, p_batchdate, p_companyid,
			p_userid, @out_recid
		);
        
        SET @out_recdetailid = NULL;
        CALL spc_materialreceiptdetail_save(
			NULL, @out_recid, @defaulteggsitemid, (SELECT itemname FROM item WHERE id = @defaulteggsitemid), 
			p_actualquantity, (SELECT unitcost FROM item WHERE id = @defaulteggsitemid), 
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			(SELECT itemunitid FROM item WHERE id = @defaulteggsitemid), NULL,
			(SELECT warehouseid FROM hatcher WHERE id = p_hatcherid), p_companyid,
			p_userid, NULL, @out_recdetailid
		);
        
        -- material movement entry for material receipt
		SET @out_movid3 = NULL;
		CALL spc_materialmovement_save(
			NULL, @defaulteggsitemid, NULL, 684,
			@out_recid, p_batchdate, p_actualquantity,
			(SELECT warehouseid FROM setter WHERE id = p_setterid), (SELECT warehouseid FROM hatcher WHERE id = p_hatcherid),
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			p_companyid, p_userid, @out_movid3
		);*/
    
		-- Create hatcher batch
	
		INSERT INTO hatcherbatch 
				(id, hatcherid, setterid, setterbatchid, hatchercapacity, actualquantity, batchdate, statusid, completiondate, companyid)
			VALUES 
				(p_id, p_hatcherid, p_setterid, p_setterbatchid, p_hatchercapacity, p_actualquantity, p_batchdate, p_statusid, p_completiondate, p_companyid);
                
                
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE hatcherbatch
				SET hatcherid = p_hatcherid, 
                setterid = p_setterid,
                setterbatchid = p_setterbatchid, 
                hatchercapacity = p_hatchercapacity,
                actualquantity = p_actualquantity,
                batchdate = p_batchdate,
                statusid = p_statusid,
                completiondate = p_completiondate,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- JE for WIP egg ledger to cracked egg ledger
        SET @jeid = null;
		CALL spc_journalentry_save(
			NULL,
			NULL,
			1297,
			NULL,
			p_batchdate,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
            NULL,
            342,
			NULL,
			'Transfer WIP eggs to hatcher',
			NULL,
			NULL,
			NULL,
			out_id,
			'Transfer WIP eggs to hatcher',
			p_companyid,
			p_userid,
			@jeid
		);
        
        -- credit WIP eggs item - ledger
        SET @jedetailid = null;
        CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
			@WIPeggledgerid,
            0,
            p_setterbatchid,
			NULL,
			NULL,
            NULL,
			NULL,
			NULL,
			0,
			(p_crackedquantity * @overheadcostperegg),
			NULL,
			NULL,
			NULL,
			@itemid,
			NULL,
			'Hatcher batch',
			p_companyid,
			p_userid,
			@jedetailid
		 );
		 
		 -- Debit to cracked egg - Ledger
		
		 SET @jedetailid1 = null;
		 CALL spc_journalentrydetail_save( 
			NULL,
			@jeid,
            @WIPeggledgerid,
            0,
            p_setterbatchid,
			NULL,
			NULL,
            NULL,
			NULL,
			NULL,
			(p_crackedquantity * @overheadcostperegg),
			0,
			NULL,
			NULL,
			NULL,
			@itemid,
			NULL,
			'Hatcher batch',
			p_companyid,
			p_userid,
			@jedetailid1
		 );
    
    UPDATE materialreceipt SET batchid = out_id WHERE id = @out_recid;
    
    -- Setter batch completed only when setterusedquantity is Zero (0)
    
    SET @setterbatchactualquantity = NULL;
    SET @setterbatchusedquantity = NULL;
    
    SELECT 
		@setterbatchactualquantity:= SB.actualquantity,
		@setterbatchusedquantity := sum(IFNULL(HB.actualquantity, 0))
	FROM
		setterbatch SB 
	
	LEFT JOIN hatcherbatch HB ON SB.id = HB.setterbatchid
	WHERE
		SB.id = p_setterbatchid
	GROUP BY
		SB.actualquantity;
        
	
    
    -- Update setter batch status to 'completed'
    if(@setterbatchactualquantity = @setterbatchusedquantity) THEN
		UPDATE setterbatch set status = 283 where id = p_setterbatchid;         	
    END IF;
    
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'hatcherbatch', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_hatcherbatch_search`(
    IN p_companyid INT
)
BEGIN
    
   -- SELECT
	-- HB.id as hatchingno,
	-- hatcherid,
	-- setterid,
	-- setterbatchid,
	-- setterquantity,
	-- hatchercapacity,
	-- cracked,
	-- burst,
	-- clears,
    --    actual,
	-- DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as batchdate,
	-- HB.statusid,
    --    R.refname,
    --    DATE_FORMAT(HB.completiondate,'%d/%m/%Y') as completiondate,
     --   HB.companyid
	
    -- FROM
	-- hatcherbatch HB
     --   LEFT JOIN reference R ON R.id = HB.statusid
	
	-- WHERE
	-- HB.companyid = p_companyid;
    
      SELECT
		HB.id as hatcherbatchno,
        HB.hatcherid,
        L.id as locationid,
		L.locationname,
		H.hatchername,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as hatchingbatchdate,
        HB.setterbatchid as settingno,
        HB.statusid,
        R.refname,
        HB.setterid,
        HB.hatchercapacity,
        HB.actualquantity,
        SB.actualquantity as setterbatchqty
	
    FROM
		hatcherbatch HB
	
    LEFT JOIN hatcher H ON HB.hatcherid = H.id
    -- LEFT JOIN breederbatch BB on HB.breederbatchid = BB.id
	LEFT JOIN location L ON H.locationid = L.id
    LEFT JOIN `reference` R ON R.id = HB.statusid
    LEFT JOIN setterbatch SB ON SB.id = HB.setterbatchid
        
	WHERE
		HB.companyid = p_companyid
        and HB.statusid = 302
	
    GROUP BY HB.setterbatchid
    
    ORDER BY HB.id DESC;
    
END;



CREATE PROCEDURE `spc_hatcherbatch_search_completehatcherbatch`(
IN p_companyid INT)
BEGIN
   SET 	@defaulteggsitemid = null,
		@defaultdocitemid = null,
		@ddefaulthatcherywhfordoc = null,
        @overheadcostperegg = null,
        @docstandardcost = null,
        @defaulthatcherywhforeggs = null;
        
SELECT @defaulteggsitemid:= defaulteggsitemid,
		  @defaultdocitemid:= defaultdocitemid,
		  @defaulthatcherywhfordoc:= defaulthatcherywhfordoc,
		  @defaulthatcherywhforeggs:= defaulthatcherywhforeggs,
          @docstandardcost:= docstandardcost,
          @overheadcostperegg:= overheadcostperegg
          
	FROM
		hatcherysettings 
	
    WHERE 
		companyid = p_companyid;
		
   
 SELECT
		HB.id as hatcherbatchno,
        HB.hatcherid,
		L.locationname,
        H.locationid,
		H.hatchername,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as hatcherbatchdate,
        HB.setterbatchid as settingno,
        HB.statusid,
        R1.refname,
        HB.setterid,
        HB.hatchercapacity,
		HB.actualquantity,
        S.breederbatchid,
		B.batchname as breederbatchname,
        R1.refname as status,
		@defaulteggsitemid AS eggsitemid,
        @defaultdocitemid as docitemid,
        @defaulthatcherywhfordoc as wharehouseid,
		@defaulthatcherywhforeggs as eggswharehouseid,
        @docstandardcost as defaultdoccost,
        @overheadcostperegg as defaulteggscost,
        I.itemname as docitemname,
        I1.itemname as eggsitemname,
        I.unitcost,
        I.itemunitid,
        I1.unitcost as eggsunitcost,
        I.itemunitid as eggsitemunitid,
        I1.itemunitid as eggsitemunitid,
        W.warehousename,
        W1.warehousename,
        R2.refname as itemunitname,
		S.itembatch as itembatchidformatissue
        
	
    FROM
		hatcherbatch HB
	
    LEFT JOIN hatcher H ON HB.hatcherid = H.id
    LEFT JOIN setterbatch S ON S.id = HB.setterbatchid
    LEFT JOIN breederbatch B ON  S.breederbatchid = B.id 
	LEFT JOIN location L ON H.locationid = L.id
    LEFT JOIN `reference` R1 ON R1.id = HB.statusid
    LEFT JOIN warehouse W ON W.id = @defaulthatcherywhfordoc
    LEFT JOIN warehouse W1 ON W1.id = @defaulthatcherywhforeggs
	LEFT JOIN item I ON  I.id =  @defaultdocitemid
    LEFT JOIN item I1 ON  I1.id =  @defaulteggsitemid
    LEFT JOIN `reference` R2 ON R2.id = I.itemunitid
    
        
	WHERE
		HB.companyid = p_companyid
        -- 302 = In Progress
        AND  HB.statusid = 303
        
	ORDER BY HB.id DESC;
	
END;



CREATE PROCEDURE `spc_hatcherbatch_select`(
	-- IN p_setterid INT
    IN p_setterbatchid INT
)
BEGIN

    SELECT
		HB.id as hatcherbatchno,
		HB.hatcherid,
		HB.setterid,
        S.settername,
        H.hatchername,
		HB.setterbatchid as settingno,
		HB.hatchercapacity,
        HB.actualquantity,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as hatchingbatchdate,
		HB.statusid,
        R.refname,
        DATE_FORMAT(HB.completiondate,'%d/%m/%Y') as completiondate
        
	
    FROM
		hatcherbatch HB
        
		LEFT JOIN setter S ON S.id = HB.setterid
        LEFT JOIN reference R ON R.id = HB.statusid
		LEFT JOIN setterbatch SB ON SB.id = HB.setterbatchid
        LEFT JOIN hatcher H ON H.id = HB.hatcherid
	
	WHERE
		-- (
			-- NULLIF(p_id, '') IS NOT NULL AND HB.id = p_id 
            -- OR NULLIF(p_id, '') IS NULL
		-- );
        
        HB.setterbatchid = p_setterbatchid
        
	 ORDER BY HB.batchdate DESC;
		
	

END;



CREATE PROCEDURE `spc_hatcherdailytransaction_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN
	DELETE FROM hatcherdailytransaction WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'hatcherdailytransaction', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_hatcherdailytransaction_save`(
	IN p_id INT,
    IN p_hatcherid INT,
    IN p_hatcherbatchid INT,
    IN p_date DATE,
    IN p_time VARCHAR(50),
    IN p_temperature DECIMAL(18,3),
    IN p_humidity DECIMAL(18,3),
    IN p_remark VARCHAR(500),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
SET @action = null;
    
	IF EXISTS(
            SELECT id from hatcherdailytransaction 
            where date > p_date AND hatcherbatchid = p_hatcherbatchid
			AND (
				  (NULLIF(p_id, 0) IS NULL)
				 -- OR 
				 -- (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id)
                )
            
            ) THEN  
            BEGIN
        
				SELECT -1 INTO out_id;
	
			 END;
            
	ELSEIF EXISTS(
            SELECT id from hatcherdailytransaction where date = p_date AND time = p_time
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN  BEGIN
        
				SELECT -2 INTO out_id;
	
			 END;
             
    ELSE 
    
BEGIN
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO hatcherdailytransaction 
				(hatcherid, hatcherbatchid, date, time, temperature, humidity, remark, companyid)
			VALUES 
				(p_hatcherid, p_hatcherbatchid, p_date, p_time, p_temperature, p_humidity, p_remark, p_companyid);
	  
      SET @action = 'INSERT';
	
    ELSE
    
		UPDATE hatcherdailytransaction
				SET hatcherid = p_hatcherid, 
                hatcherbatchid = p_hatcherbatchid,
                date = p_date, 
                time = p_time,
                temperature = p_temperature,
                humidity = p_humidity,
                remark = p_remark,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'hatcherdailytransaction', out_id, @action, p_userid);
   END;
   
   END IF;
END;



CREATE PROCEDURE `spc_hatcherdailytransaction_search`(
	IN p_hatcherbatchid INT,
    IN p_companyid INT
)
BEGIN
    
    SELECT
			HT.id,
            HT.hatcherid,
            H.hatchername,
            H.locationid,
			L.locationname,
            HT.hatcherbatchid,
			DATE_FORMAT(HT.date,'%d/%m/%Y') as date,
            time,
            temperature,
            humidity,
            remark
			
    FROM
		hatcherdailytransaction HT
	
    LEFT JOIN hatcher H ON HT.hatcherid = H.id
	LEFT JOIN location L ON H.locationid = L.id
          
	WHERE
		HT.companyid = p_companyid AND 
        HT.hatcherbatchid = p_hatcherbatchid;
END;



CREATE PROCEDURE `spc_hatcherdailytransaction_select`(
	IN p_id INT
)
BEGIN
	SELECT 	id,
			hatcherid,
			hatcherbatchid,
            DATE_FORMAT(date,'%d/%m/%Y') as date,
			time,
			temperature,
			humidity,
			remark
        
	
    FROM  hatcherdailytransaction 
	
    WHERE 
          id = p_id;

END;



CREATE PROCEDURE `spc_hatcherforcurrentlocation_search`(
    IN p_companyid INT,
    IN p_locationid INT
)
BEGIN

	SELECT 
		id,
        locationid,
        hatchername,
        capacity
        
	FROM
		hatcher
    
	WHERE
		isActive = 1 and
        companyid = p_companyid and
        locationid = p_locationid
        
	ORDER BY id DESC;
END;



CREATE PROCEDURE `spc_hatcheryaccountsettings_save`(
	IN p_id INT,
	IN p_locationid INT,
    IN p_arinvoicegl INT,
    IN p_arinvoicetaxid INT,
    IN p_outsidehatcheryprocessinggl INT,
    IN p_inventoryrevaluationgl INT,
    IN p_fumigationglforowneggs INT,
    IN p_fumigationglforoutsideeggs INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO hatcheryaccountsettings
				 (id, locationid, arinvoicegl, arinvoicetaxid, outsidehatcheryprocessinggl, inventoryrevaluationgl, fumigationglforowneggs, fumigationglforoutsideeggs, companyid)
                VALUES 
				(p_id, p_locationid, p_arinvoicegl, p_arinvoicetaxid, p_outsidehatcheryprocessinggl, p_inventoryrevaluationgl, p_fumigationglforowneggs, p_fumigationglforoutsideeggs, p_companyid);
		
        SET @action = 'INSERT';
          
	ELSE
	
		UPDATE hatcheryaccountsettings
				SET locationid = p_locationid, 
                arinvoicegl = p_arinvoicegl, 
                arinvoicetaxid = p_arinvoicetaxid,
                outsidehatcheryprocessinggl = p_outsidehatcheryprocessinggl,
                inventoryrevaluationgl = p_inventoryrevaluationgl,
                fumigationglforowneggs = p_fumigationglforowneggs,
                fumigationglforoutsideeggs = p_fumigationglforoutsideeggs,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';     
			
	END IF;
    
     SELECT LAST_INSERT_ID() INTO out_id;
     
     -- record log
    CALL spc_commonlog_save(p_companyid, 'hatcheryaccountsettings', out_id, @action, p_userid);
   
END;



CREATE PROCEDURE `spc_hatcheryaccountsettings_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		HS.id,
        L.locationname,
        LD1.ledgercode as arinvoicegl,
        T.taxcode as arinvoicetax,
        LD2.ledgercode as outsidehatcheryprocessinggl,
        LD3.ledgercode as inventoryrevaluationgl,
        LD4.ledgercode as fumigationglforowneggs,
        LD5.ledgercode as fumigationglforoutsideeggs
       
    FROM
		hatcheryaccountsettings HS
	
    INNER JOIN location L ON HS.locationid = L.id
    INNER JOIN ledgers LD1 ON HS.arinvoicegl = LD1.id
     INNER JOIN tax T ON HS.arinvoicetaxid = T.id
    INNER JOIN ledgers LD2 ON HS.outsidehatcheryprocessinggl = LD2.id
    INNER JOIN ledgers LD3 ON HS.inventoryrevaluationgl = LD3.id
    INNER JOIN ledgers LD4 ON HS.fumigationglforowneggs = LD4.id
    INNER JOIN ledgers LD5 ON HS.fumigationglforoutsideeggs = LD5.id
   
  
	WHERE
		HS.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_hatcheryaccountsetting_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN
	DELETE FROM hatcheryaccountsettings WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'hatcheryaccountsettings', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_hatcheryaccountsetting_select`(
	IN p_id INT
)
BEGIN
    
    SELECT
		  HS.id,
          HS.locationid,
          L.locationname,
          HS.arinvoicegl,
          LD1.ledgercode as arinvoiceglcode,
		  HS.arinvoicetaxid,
          T.taxcode,
          HS.outsidehatcheryprocessinggl,
          LD2.ledgercode as outsidehatcheryprocessingglcode,
          HS.inventoryrevaluationgl,
          LD3.ledgercode as inventoryrevaluationglcode,
          HS.fumigationglforowneggs,
          LD4.ledgercode as fumigationglforowneggscode,
          HS.fumigationglforoutsideeggs,
          LD5.ledgercode as fumigationglforoutsideeggscode
	
    FROM
		hatcheryaccountsettings HS
	
        INNER JOIN location L ON HS.locationid = L.id
        INNER JOIN ledgers LD1 ON HS.arinvoicegl = LD1.id
        INNER JOIN tax T ON HS.arinvoicetaxid = T.id
        INNER JOIN ledgers LD2 ON HS.outsidehatcheryprocessinggl = LD2.id
        INNER JOIN ledgers LD3 ON HS.inventoryrevaluationgl = LD3.id
        INNER JOIN ledgers LD4 ON HS.fumigationglforowneggs = LD4.id
        INNER JOIN ledgers LD5 ON HS.fumigationglforoutsideeggs = LD5.id

	WHERE
		HS.id = p_id;
      

END;



CREATE PROCEDURE `spc_hatcherydashboard_availablesettercapacity`(
	IN p_companyid INT
)
BEGIN

	SELECT
        IFNULL(SUM(S.capacity), 0) AS availablesettercapacity
    FROM
		setter S
		LEFT JOIN setterbatch SB ON S.id = SB.setterid
	WHERE
		DATE_ADD(SB.batchdate, INTERVAL 18 DAY) = curdate()
		AND S.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_hatcherydashboard_expecteddoc`(
    IN p_hatcherdays INT,
    IN p_companyid INT
)
BEGIN

	SELECT IFNULL(sum(actualquantity), 0) AS expecteddoc
    FROM 
		hatcherbatch HB
	LEFT JOIN chickspullout CPO ON HB.id = CPO.hatchbatchid
	WHERE
		-- hatcherbatches whose chickspullout not done yet
		CPO.id IS NULL 
        -- Current date must be greater than batchdate + 3 days
		AND batchdate <= DATE_ADD(curdate(), INTERVAL -p_hatcherdays DAY)
		AND HB.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_hatcherydashboard_expectedeggs`(
    IN p_companyid INT
)
BEGIN

	SELECT IFNULL(sum(HSD.plannedquantity), 0) AS expectedeggs
    FROM 
		hatcheryschedule HS
	INNER JOIN hatcheryscheduledetail HSD ON HS.id = HSD.hatcheryscheduleid
	WHERE
		scheduledfordate = curdate()
		AND HS.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_hatcherydashboard_hatchability`(
	IN p_fromDate DATE,
    IN p_toDate DATE,
    IN p_companyid INT
)
BEGIN

	SELECT hc.*, 
    
    CASE WHEN hc.totalhatchpercent < 60 THEN 'Error'
			WHEN hc.totalhatchpercent between 60 and 70 THEN 'Neutral'
			WHEN hc.totalhatchpercent between 70 and 85 THEN 'Critical'
			WHEN hc.totalhatchpercent between 85 and 100 THEN 'Good'
		ELSE 'Neutral'
			END AS valuecolor
    FROM (


		SELECT hatchability.*, 
			ROUND(((totalhatch * 100) / actualquantity),2) AS totalhatchpercent,
			ROUND(((sellable * 100) / totalhatch),2) AS sellablepercent
		FROM
		(
			SELECT 
				SUM(capacity) AS capacity, 
				SUM(actualquantity) AS actualquantity,  
				SUM(totalhatch) AS totalhatch,
				SUM(sellable) AS sellable
			FROM
				setterbatch SB
			INNER JOIN setter S ON S.id = SB.setterid
			INNER JOIN chickspullout CPO ON SB.id = CPO.setterbatchid
			WHERE
				SB.status = 283
				AND (pulloutdate BETWEEN p_fromDate AND p_toDate)
				AND SB.companyid = p_companyid
		 )   
		 
		AS hatchability
    )
    AS hc;
    
        
END;



CREATE PROCEDURE `spc_hatcherydashboard_lastdayproduction`(
	IN p_companyid INT	
)
BEGIN

	SELECT 
		IFNULL(SUM(sellable), 0) AS lastdayproduction 
    FROM 
		chickspullout 
    
    WHERE pulloutdate = DATE_ADD(curdate(), INTERVAL -1 DAY)
		AND companyid = p_companyid;
END;



CREATE PROCEDURE `spc_hatcherydashboard_Tiles`(
    IN p_hatcherdays INT,
    IN p_companyid INT
)
BEGIN

	SET @currDate = curdate();
    
    SET @currYear = YEAR(curdate());
    SET @fincStartDate = NULL;
    SET @fincEndDate = NULL;
    SET @monStartDate = DATE_ADD(DATE_ADD(LAST_DAY(curdate()), INTERVAL 1 DAY), INTERVAL - 1 MONTH);
    SET @monEndDate = LAST_DAY(curdate());
    
    IF(MONTH(curdate()) <= 3) THEN
		
        SET @fincStartDate = concat((YEAR(curdate()) - 1), '-04-01');
        SET @fincEndDate = concat(YEAR(curdate()) , '-03-31');
        
    ELSE
		SET @fincStartDate = concat(YEAR(curdate()) , '-04-01');
        SET @fincEndDate = concat((YEAR(curdate()) + 1) , '-03-31');
    END IF;
    
    

	-- Hatchability % (yearly)
    CALL spc_hatcherydashboard_hatchability(@fincStartDate, @fincEndDate, p_companyid);
    
    -- Hatchability % (current Month)
    CALL spc_hatcherydashboard_hatchability(@monStartDate, @monEndDate, p_companyid);
    
    -- Expected Eggs for current date
    CALL spc_hatcherydashboard_expectedeggs(p_companyid);
    
    -- Expected DOC for current date
	CALL spc_hatcherydashboard_expecteddoc(p_hatcherdays, p_companyid);
    
    -- Total setter capacity available for current date
    CALL spc_hatcherydashboard_availablesettercapacity(p_companyid);
    
    -- Last day production for chickspullout
    CALL spc_hatcherydashboard_lastdayproduction(p_companyid);
    
    
END;



CREATE PROCEDURE `spc_hatcheryscheduledetail_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN

    DELETE FROM hatcheryscheduledetail WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'hatcheryscheduledetail', p_id, 'delete', p_userid);

END;



CREATE PROCEDURE `spc_hatcheryscheduledetail_ismaterialreceived`(
	IN p_sourceid INT,
    IN p_requestid INT,
    OUT out_id INT
)
BEGIN

SET @returnid = null;
SET @isPO = null;

if(p_sourceid = 261) THEN -- OWN

	SELECT 
		id INTO @returnid
	FROM 
		materialtransfer
	WHERE
		requestid = p_requestid;
        
	-- GROUP BY requestid;
   
elseif(p_sourceid = 262) THEN -- PURCHASED
	
    SELECT id INTO @isPO FROM purchaseorder 
		WHERE 
			purchaserequestid = p_requestid
            
		GROUP BY purchaserequestid;
    
	SELECT GR.id INTO @returnid FROM purchaseorder PO
		INNER JOIN grpo GR ON GR.purchaseorderid = PO.id
		WHERE
			PO.purchaserequestid = p_requestid
            
		GROUP BY PO.purchaserequestid;
END IF;


	IF @returnid IS NOT NULL THEN
		SET out_id = @returnid;
	ELSEIF @isPO IS NOT NULL THEN
		SET out_id = -2;
    ELSE
		SET out_id = -1;
    END IF;


END;



CREATE PROCEDURE `spc_hatcheryscheduledetail_ismaterialreceived1`(
	IN p_sourceid INT,
    IN p_requestid INT,
    OUT out_id INT
)
BEGIN

SET @returnid = null;
SET @isPO = null;

if(p_sourceid = 261) THEN -- OWN

	SELECT 
		id INTO @returnid
	FROM 
		materialtransfer
	WHERE
		requestid = p_requestid;
   
elseif(p_sourceid = 262) THEN -- PURCHASED
	
    SELECT id INTO @isPO FROM purchaseorder 
		WHERE 
			purchaserequestid = p_requestid;
    
	SELECT GR.id INTO @returnid FROM purchaseorder PO
		INNER JOIN grpo GR ON GR.purchaseorderid = PO.id
		WHERE
			PO.purchaserequestid = p_requestid;
END IF;


	IF @returnid IS NOT NULL THEN
		SET out_id = @returnid;
	ELSEIF @isPO IS NOT NULL THEN
		SET out_id = -2;
    ELSE
		SET out_id = -1;
    END IF;


END;



CREATE PROCEDURE `spc_hatcheryscheduledetail_save`(
		IN p_id INT,
		IN p_hatcheryscheduleid INT,
		IN p_setterid INT,
		IN p_capacity INT,
		IN p_planned INT,
		IN p_sourceid INT,
        IN p_statusid INT,
        IN p_approvedby INT,
        IN p_approveddate DATE,
		IN p_companyid INT,
        In p_userid INT,
		OUT out_id INT
)
BEGIN

	SET @action = null;
     SET @defaulteggsitemid = null,
		 @itemname = null,
		 @unitid = null;
    
   SELECT @defaulteggsitemid:= defaulteggsitemid,
		  @itemname:= I.itemname,
		  @unitid:= I.itemunitid
          
	FROM
		hatcherysettings HS
        LEFT JOIN item I ON HS.defaulteggsitemid = I.id
	
    WHERE 
		HS.companyid = p_companyid;
        
        
        
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO hatcheryscheduledetail 
				(hatcheryscheduleid, setterid, settercapacity, plannedquantity, sourceid, statusid, approvedby, approveddate, companyid)
			VALUES 
				(p_hatcheryscheduleid, p_setterid, p_capacity, p_planned, p_sourceid, p_statusid, p_approvedby, p_approveddate, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE hatcheryscheduledetail
			SET 
				hatcheryscheduleid = p_hatcheryscheduleid, 
				setterid = p_setterid, 
				settercapacity = p_capacity, 
				plannedquantity = p_planned, 
				sourceid = p_sourceid, 
                statusid = p_statusid,
                approvedby = p_approvedby,
                approveddate = p_approveddate,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 


    -- if existing record has 'New' status but not 'Approved'/'Cancelled'
    IF p_statusid = 242 THEN  -- AND EXISTS(SELECT id FROM hatcheryscheduledetail WHERE statusid NOT IN(242,243) AND id = out_id) THEN
		
        -- if source is Own, generate material transfer request
		IF (out_id > 0 AND p_statusid = 242 AND p_sourceid = 261) THEN
		
          SET @out_materialRequestId = null;
          SET @out_materialrequestdetailid = null;
          
		    CALL spc_materialrequest_save(
				null, 502, 501, 444, now(),
				(SELECT scheduledfordate FROM hatcheryschedule WHERE id = p_hatcheryscheduleid),
				'Eggs request from system',
				(SELECT warehouseid FROM setter WHERE id = p_setterid), 
                (SELECT warehousebinid FROM setter WHERE id = p_setterid),
                null, null,
				null,
				p_companyid ,
				p_userid,
                @out_materialRequestId
			);
		
            CALL spc_materialrequestdetail_save(
				null, 
                @out_materialRequestId,
                @defaulteggsitemid,
                @itemname,
                p_planned,
                @unitid,
                p_companyid,
				p_userid,
                @out_materialrequestdetailid
			);
            
            IF(@out_materialRequestId > 0) THEN
				UPDATE hatcheryscheduledetail
                SET requestid = @out_materialRequestId
                WHERE id = out_id;
            END IF;
            
        -- If source is Purchase, generate purchase request
		 SET @out_purchaseRequestId = null;
		SET @out_purchaserequestdetailid = null;
          
        ELSE IF(out_id > 0 AND p_statusid = 242 AND p_sourceid = 262) THEN
			 CALL spc_purchaserequest_save(
				null,
                null,
                542,
                now(),
                p_userid,
                null,
                'Eggs purchase request',
                92,
                null,
                null,
                p_companyid,
                p_userid,
                @out_purchaseRequestId
             );
             
             CALL spc_purchaserequestdetail_save(
				null,
                @out_purchaseRequestId,
                @defaulteggsitemid,
                @itemname,
                p_planned,
                @unitid,
                null,
                p_companyid,
                p_userid,
                @out_purchaserequestdetailid
             );
             
			IF(@out_purchaseRequestId > 0) THEN
				UPDATE hatcheryscheduledetail
                SET requestid =@out_purchaseRequestId
                WHERE id = out_id;
            END IF;
            
		END IF;
        
     END IF;
     
   END IF;
    
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'hatcheryscheduledetail', out_id, @action, p_userid);


END;



CREATE PROCEDURE `spc_hatcheryscheduledetail_search`(
	IN p_hatcheryscheduleid INT
)
BEGIN

	SELECT HSD.id,
		HSD.hatcheryscheduleid,
		HSD.setterid,
        S.settername,
        HSD.settercapacity,
        HSD.plannedquantity,
		HSD.sourceid,
        REF1.refname as `source`,
        HSD.statusid,
        REF2.refname as `status`,
        HSD.approvedby,
        U.fullname as approvedbyname,
        HSD.approveddate,
		HSD.companyid,
        HSD.requestid
	FROM 
		hatcheryscheduledetail HSD
	
    LEFT JOIN setter S ON HSD.setterid = S.id
    LEFT JOIN `reference` REF1 ON HSD.sourceid = REF1.id
	LEFT JOIN `reference` REF2 ON HSD.statusid = REF2.id
    LEFT JOIN `user` U ON HSD.approvedby = U.id
     
	WHERE
		HSD.hatcheryscheduleid = p_hatcheryscheduleid; 
END;



CREATE PROCEDURE `spc_hatcheryscheduledetail_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
        id as detailsid,
		hatcheryscheduleid,
		setterid,
		capacity,
		planned,
		sourceid,
        statusid,
		companyid
	FROM 
		hatcheryscheduledetail
	WHERE
		id = p_id AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_hatcheryschedule_availableforsetterbatch`(
	IN p_companyid INT
)
BEGIN
select 
		HS.id,
		DATE_FORMAT(scheduledate,'%d/%m/%Y') as scheduledate,
        DATE_FORMAT(scheduledfordate,'%d/%m/%Y') as scheduledfordate,
		HS.locationid,
        L.locationname,
		restperiod,
        R.refname as sourcename
        
	from hatcheryschedule HS
    
		INNER JOIN hatcheryscheduledetail HSD ON HSD.hatcheryscheduleid = HS.id
        LEFT JOIN `reference` R ON HSD.sourceid = R.id
		LEFT JOIN setterbatch SB ON HSD.id = SB.detailsid 
        LEFT JOIN location L ON L.id = HS.locationid
    
    WHERE SB.id is NULL 
		  and HS.companyid = p_companyid
		  and HSD.statusid = 242 
          -- status 242 is 'approved'
          
	GROUP BY HS.id
    
    ORDER BY HS.id DESC;
END;



CREATE PROCEDURE `spc_hatcheryschedule_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT,
	OUT out_id INT
)
BEGIN

	-- DELETE FROM hatcheryschedule WHERE id = p_id;
    -- DELETE FROM hatcheryscheduledetail WHERE hatcheryscheduleid = p_id;
    
    -- record log
    -- CALL spc_commonlog_save(p_companyid, 'hatcheryschedule', p_id, 'delete', p_userid);


    IF EXISTS(
				SELECT id from hatcheryscheduledetail where hatcheryscheduleid = p_id and statusid IN (242, 243)
             ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    
		BEGIN
			DELETE FROM hatcheryscheduledetail WHERE hatcheryscheduleid = p_id;
			DELETE FROM hatcheryschedule WHERE id = p_id;
             
	    	 SELECT p_id INTO out_id;
			 
		END;
     
   END IF;
   
   	-- record log
	CALL spc_commonlog_save(p_companyid, 'hatcheryschedule', p_id, 'delete', p_userid);	
    
END;



CREATE PROCEDURE `spc_hatcheryschedule_save`(
	IN p_id INT,
    IN p_scheduledate DATE,
    IN p_scheduledfordate DATE,
    IN p_locationid INT,
    IN p_restperiod INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO hatcheryschedule 
				(id, scheduledate, scheduledfordate, locationid, restperiod, companyid)
			VALUES 
				(p_id, p_scheduledate, p_scheduledfordate, p_locationid, p_restperiod, p_companyid);
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE hatcheryschedule
				SET scheduledate = p_scheduledate, 
                scheduledfordate = p_scheduledfordate,
                locationid = p_locationid, 
                restperiod = p_restperiod,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'hatcheryschedule', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_hatcheryschedule_search`(
	IN p_companyid INT
)
BEGIN

	SELECT 
		HS.id,
		DATE_FORMAT(scheduledate,'%d/%m/%Y') as scheduledate,
        DATE_FORMAT(scheduledfordate,'%d/%m/%Y') as scheduledfordate,
        L.locationname,
		restperiod,
        CASE WHEN (fnc_hatchery_status(HS.id) = 1) THEN 'Pending For Approval'
        ELSE 'Processed' END  as schedulestatus
	
	FROM 
		hatcheryschedule HS
    
        LEFT JOIN location L ON HS.locationid = L.id
 
	WHERE
		HS.companyid = p_companyid
	ORDER BY
		HS.id DESC;

END;



CREATE PROCEDURE `spc_hatcheryschedule_select`(
	IN p_id INT
)
BEGIN
        SELECT 
		HS.id,
		DATE_FORMAT(scheduledate,'%d/%m/%Y') as scheduledate,
        DATE_FORMAT(scheduledfordate,'%d/%m/%Y') as scheduledfordate,
		HS.locationid,
        L.locationname,
		restperiod
		-- HS.statusid,
       -- REF.refname as status,
	FROM 
		hatcheryschedule HS
    
    LEFT JOIN location L ON HS.locationid = L.id
   -- LEFT JOIN reference REF ON REF.id = HS.statusid
  
    
	WHERE
		HS.id = p_id;
END;



CREATE PROCEDURE `spc_hatcherysettings_save`(
	IN p_id INT,
	IN p_servicecharges DECIMAL(8,3),
	IN p_gapinsetting INT,
    IN p_fertilityinpercent DECIMAL(8,3),
    IN p_settingdaysperiod INT,
    IN p_hatchingdaysperiod INT,
    IN p_biproductrequiredid INT,
    IN p_warehouselocationid INT,
    IN p_candlingdaysperiod INT,
    IN p_overheadcostperegg DECIMAL(8,3),
    IN p_docstandardcost DECIMAL(8,3),
    IN p_overheadexpenseglid INT,
    IN p_defaulteggsitemid INT,
    IN p_defaultdocitemid INT,
    IN p_defaultcrackedeggsitemid INT,
    IN p_defaultbursteggsitemid INT, 
    IN p_defaultcleareggsitemid INT,
    IN p_defaulthatcherywhforeggs INT,
    IN p_defaulthatcherywhfordoc INT,
    IN p_companyid INT,
    IN p_crackedeggscost DECIMAL(8,3),
	IN p_loadchargeperegg DECIMAL(8,3),
	IN p_vaccinateddoccost DECIMAL(8,3),
    IN p_costofgoodsoldledgerid INT(11),
    IN p_WIPledgerid INT(11),
    IN p_grpowithoutinvoiceledgerid INT(11),
    IN p_cashledgerid INT(11),
    IN p_freightledgerid INT(11),
    IN p_discountledgerid INT(11),
    IN p_docledgerid INT(11),
    IN p_vaccineitemgroupids VARCHAR(200),
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO hatcherysettings
				(id, 
                 servicecharges, 
                 gapinsetting, 
                 fertilityinpercent, 
                 settingdaysperiod, 
                 hatchingdaysperiod, 
                 biproductrequiredid,
                 warehouselocationid,
                 candlingdaysperiod, 
                 overheadcostperegg, 
                 docstandardcost,
                 overheadexpenseglid, 
                 defaulteggsitemid,
                 defaultdocitemid,
                 defaultcrackedeggsitemid,
                 defaultbursteggsitemid,
                 defaultcleareggsitemid,
                 defaulthatcherywhforeggs,
                 defaulthatcherywhfordoc,
                 companyid,
                 crackedeggscost,
				 loadchargeperegg,
				 vaccinateddoccost,
                 costofgoodsoldledgerid,
                 WIPeggledgerid,
                 grpowithoutinvoiceledgerid,
				 cashledgerid,
				 freightledgerid,
				 discountledgerid,
                 docledgerid,
                 vaccineitemgroupids)
			VALUES 
				(p_id, 
                 p_servicecharges, 
                 p_gapinsetting, 
                 p_fertilityinpercent, 
                 p_settingdaysperiod, 
                 p_hatchingdaysperiod, 
                 p_biproductrequiredid, 
                 p_warehouselocationid, 
                 p_candlingdaysperiod, 
                 p_overheadcostperegg, 
                 p_docstandardcost,
                 p_overheadexpenseglid, 
                 p_defaulteggsitemid,
				 p_defaultdocitemid,
                 p_defaultcrackedeggsitemid,
				 p_defaultbursteggsitemid, 
				 p_defaultcleareggsitemid,
				 p_defaulthatcherywhforeggs,
				 p_defaulthatcherywhfordoc,
                 p_companyid,
                 p_crackedeggscost,
				 p_loadchargeperegg,
				 p_vaccinateddoccost,
                 p_costofgoodsoldledgerid,
                 p_WIPledgerid,
                 p_grpowithoutinvoiceledgerid,
				 p_cashledgerid,
				 p_freightledgerid,
				 p_discountledgerid,
                 p_docledgerid,
                 p_vaccineitemgroupids);
		
        SET @action = 'INSERT';
          
	ELSE
    
		UPDATE hatcherysettings
				SET servicecharges = p_servicecharges, 
                gapinsetting = p_gapinsetting, 
                fertilityinpercent = p_fertilityinpercent,
                settingdaysperiod = p_settingdaysperiod,
                hatchingdaysperiod = p_hatchingdaysperiod,
                biproductrequiredid = p_biproductrequiredid,
                warehouselocationid = p_warehouselocationid,
                candlingdaysperiod = p_candlingdaysperiod,
                overheadcostperegg = p_overheadcostperegg,
				docstandardcost = p_docstandardcost,
                overheadexpenseglid = p_overheadexpenseglid,
				defaulteggsitemid = p_defaulteggsitemid,
				defaultdocitemid = p_defaultdocitemid,
				defaultcrackedeggsitemid = p_defaultcrackedeggsitemid,
				defaultbursteggsitemid = p_defaultbursteggsitemid, 
				defaultcleareggsitemid = p_defaultcleareggsitemid,
				defaulthatcherywhforeggs = p_defaulthatcherywhforeggs,
				defaulthatcherywhfordoc = p_defaulthatcherywhfordoc,
                companyid = p_companyid,
                crackedeggscost = p_crackedeggscost,
				loadchargeperegg = p_loadchargeperegg,
				vaccinateddoccost = p_vaccinateddoccost,
                costofgoodsoldledgerid = p_costofgoodsoldledgerid,
				WIPeggledgerid = p_WIPledgerid,
                grpowithoutinvoiceledgerid = p_grpowithoutinvoiceledgerid,
				cashledgerid = p_cashledgerid,
				freightledgerid = p_freightledgerid,
				discountledgerid = p_discountledgerid,
                docledgerid = p_docledgerid,
                vaccineitemgroupids = p_vaccineitemgroupids,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';     
         
	END IF;
    
      SELECT LAST_INSERT_ID() INTO out_id;
      
      -- record log
      CALL spc_commonlog_save(p_companyid, 'hatcherysettings', out_id, @action, p_userid);
   
END;



CREATE PROCEDURE `spc_hatcherysettings_select`(
	IN p_companyid INT
)
BEGIN

	SELECT 
			HS.id,
		    servicecharges,
		    gapinsetting,
            fertilityinpercent,
			settingdaysperiod,
            hatchingdaysperiod,
            biproductrequiredid,
			warehouselocationid,
            L.locationname,
            candlingdaysperiod,
			overheadcostperegg,
            docstandardcost,
            overheadexpenseglid,
            defaulteggsitemid,
            costofgoodsoldledgerid,
			 WIPeggledgerid,
			 grpowithoutinvoiceledgerid,
			 cashledgerid,
			 freightledgerid,
			 discountledgerid,
			 docledgerid,
            I1.itemname as defaulteggsitemname,
            defaultdocitemid,
            I2.itemname as defaultdocitemname,
            defaultcrackedeggsitemid,
            I3.itemname as defaultcrackedeggsitemname,
            defaultbursteggsitemid,
            I4.itemname as defaultbursteggsitemname,
            defaultcleareggsitemid,
            I5.itemname as defaultcleareggsitemname,
            defaulthatcherywhforeggs,
            WS1.warehousename as defaulthatcherywhforeggsname,
            WS1.warehousecode as defaulthatcherywhforeggscode,
            defaulthatcherywhfordoc,
            WS2.warehousename as defaulthatcherywhfordocname,
            WS2.warehousename as defaulthatcherywhfordoccode,
            HS.crackedeggscost,
            HS.loadchargeperegg,
            HS.vaccinateddoccost,
            HS.costofgoodsoldledgerid,
			HS.cashledgerid,
			HS.freightledgerid,
			COA1.coaname as goodledgername,
			COA1.glcode as goodglcode,
			COA2.coaname as eggledgername,
			COA2.glcode as eggglcode,
			COA3.coaname as grpowithoutinvoiceledgername,
			COA3.glcode as grpowithoutinvoiceglcode,
			COA4.coaname as cashledgername,
			COA4.glcode as cashglcode,
			COA5.coaname as freightledgername,
			COA5.glcode as freightglcode,
			COA6.coaname as discountledgername,
			COA6.glcode as discountglcode,
            COA7.coaname as expenseledgername,
			COA7.glcode as expenseglcode,
            COA8.coaname as docledgername,
			COA8.glcode as docglcode,
            HS.vaccineitemgroupids
			
	FROM
			hatcherysettings HS
            INNER JOIN location L ON HS.warehouselocationid = L.id
		    INNER JOIN ledgers LD ON HS.overheadexpenseglid = LD.id
            INNER JOIN item I1 ON HS.defaulteggsitemid = I1.id
            INNER JOIN item I2 ON HS.defaultdocitemid = I2.id
			INNER JOIN item I3 ON HS.defaultcrackedeggsitemid = I3.id
            INNER JOIN item I4 ON HS.defaultbursteggsitemid = I4.id
            INNER JOIN item I5 ON HS.defaultcleareggsitemid = I5.id
            INNER JOIN warehouse WS1 ON HS.defaulthatcherywhforeggs = WS1.id
            INNER JOIN warehouse WS2 ON HS.defaulthatcherywhfordoc = WS2.id
            
            LEFT JOIN chartofaccount COA1 ON COA1.id = HS.costofgoodsoldledgerid
			LEFT JOIN chartofaccount COA2 ON COA2.id = HS.WIPeggledgerid
			LEFT JOIN chartofaccount COA3 ON COA3.id = HS.grpowithoutinvoiceledgerid
			LEFT JOIN chartofaccount COA4 ON COA4.id = HS.cashledgerid
			LEFT JOIN chartofaccount COA5 ON COA5.id = HS.freightledgerid
			LEFT JOIN chartofaccount COA6 ON COA6.id = HS.discountledgerid
			LEFT JOIN chartofaccount COA7 ON COA7.id = HS.overheadexpenseglid
			LEFT JOIN chartofaccount COA8 ON COA8.id = HS.docledgerid
    WHERE
			HS.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_hatcher_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN
	DELETE FROM hatcher WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'hatcher', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_hatcher_save`(
	IN p_id INT,
    IN p_hatchername VARCHAR(150),
    IN p_capacity INT,
    IN p_locationid INT,
    IN p_warehouseid INT,
	IN p_isactive INT,
    IN p_details VARCHAR(500),
    IN p_typeid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
     
	IF EXISTS(
            SELECT hatchername from hatcher where LOWER(hatchername) = LOWER(p_hatchername)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 

      BEGIN 
      
	      IF(NULLIF(p_id, '0') IS NULL) THEN

		     INSERT INTO hatcher
				   (id, hatchername, capacity, locationid, warehouseid, isactive, details, typeid, companyid)
			   VALUES 
				   (p_id, p_hatchername, p_capacity, p_locationid, p_warehouseid, p_isactive, p_details, p_typeid, p_companyid);
		
             SET @action = 'INSERT';
 
	      ELSE
    
			 UPDATE hatcher
				SET hatchername = p_hatchername, 
					capacity = p_capacity, 
					locationid = p_locationid,
					warehouseid = p_warehouseid,
					isactive = p_isactive,
					details = p_details,
					typeid = p_typeid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
                
				WHERE
					id = p_id
					AND companyid = p_companyid;
                
				SET @action = 'UPDATE'; 
         
			END IF;
    
			SELECT LAST_INSERT_ID() INTO out_id;
            
            -- Create default warehousebin
            SET @out_warehousebinid = NULL;
			CALL spc_warehousebin_save(
				NULL, p_warehouseid, CONCAT(p_hatchername,'-BIN'), p_hatchername,
				p_companyid, 0, p_userid, @out_warehousebinid
			);
            
            -- update warehouse bin id 
    
			UPDATE hatcher SET warehousebinid = @out_warehousebinid WHERE id = out_id;
            
			-- record log
			CALL spc_commonlog_save(p_companyid, 'hatcher', out_id, @action, p_userid);
		END;
        
   END IF;
END;



CREATE PROCEDURE `spc_hatcher_search`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		   H.id,
           hatchername,
           capacity,
           L.locationname,
           W.warehousename,
           R.refname as machinetype,
           isactive
           
	FROM
		 hatcher H
         
         INNER JOIN location L on H.locationid = L.id
         INNER JOIN warehouse W on H.warehouseid = W.id
         INNER JOIN reference R on H.typeid = R.id
         
	WHERE
		 H.companyid = p_companyid;
         
END;



CREATE PROCEDURE `spc_hatcher_select`(
	IN p_id INT
)
BEGIN

	SELECT 
		    H.id,
		    hatchername,
            capacity,
			H.locationid,
            L.locationname,
			H.warehouseid,
            W.warehousename,
			isactive,
            details,
            typeid
			
	FROM
			hatcher H
            INNER JOIN location L ON H.locationid = L.id
            INNER JOIN warehouse W ON H.warehouseid = W.id
    
	WHERE
		    H.id = p_id;
END;



CREATE PROCEDURE `spc_hatchingeggscategory_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM hatchingeggscategory WHERE id = p_id;
END;



CREATE PROCEDURE `spc_hatchingeggscategory_save`(
    IN p_id INT,
    IN p_categoryname VARCHAR(200),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO hatchingeggscategory 
				(categoryname, companyid)
			VALUES 
				(p_categoryname, p_companyid);
			
            SET @action = 'INSERT';

	ELSE
    
		UPDATE hatchingeggscategory
			SET categoryname = p_categoryname, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
	
			SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'hatchingeggscategory', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_hatchingeggscategory_search`(
    IN p_companyid INT
)
BEGIN

	SELECT
		id,
		categoryname
    FROM
		hatchingeggscategory
	WHERE
		companyid = p_companyid;

END;



CREATE PROCEDURE `spc_hatchingeggscategory_select`(
	IN p_id INT
)
BEGIN

	SELECT
		id,
		categoryname,
        companyid
	
    FROM
		hatchingeggscategory
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_hatchreport_select`(
	IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT
)
BEGIN
    
    SELECT
		HB.id,
		HB.hatcherid,
        H.hatchername,
		HB.setterid,
        S.settername,
		HB.setterbatchid,
		setterquantity,
		hatchercapacity,
		cracked,
		burst,
		clears,
        actual,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as batchdate,
		HB.statusid,
        R.refname,
        DATE_FORMAT(HB.completiondate,'%d/%m/%Y') as completiondate
	
    FROM
		hatcherbatch HB
        
        LEFT JOIN hatcher H ON H.id = HB.hatcherid
		LEFT JOIN setter S ON S.id = HB.setterid
        LEFT JOIN reference R ON R.id = HB.statusid
		LEFT JOIN setterbatch SB ON SB.id = HB.setterbatchid
	
	WHERE
		companyid = HB.p_companyid AND
		HB.batchdate BETWEEN p_fromdate AND p_todate;
      

END;



CREATE PROCEDURE `spc_hatchreport_select1`(
	IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT
)
BEGIN

	SET @row_number = 0;

	SELECT
		(@row_number:=@row_number + 1) AS sqno,
		HB.id as hatcherbatchid,
		HB.hatcherid,
        H.hatchername,
		HB.setterid,
        S.settername,
		HB.setterbatchid,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as hatcherbatchdate,
        HB.statusid,
        REF.refname AS statusname,
        REF1.refname AS sourcename,
        DATE_FORMAT(HB.completiondate,'%d/%m/%Y') as hatchercompletiondate,
        SB.actualquantity as noofeggsset,
        CPO.totalhatch as noofchicksreceived,
        CPO.culls,
        ROUND(((IFNULL(CPO.totalhatch, 1) * 100) / IFNULL(SB.actualquantity, 1)),2) noofchicksreceivedpercent,
        CPO.culls,
        ROUND(((IFNULL(CPO.culls, 1) * 100) / IFNULL(CPO.totalhatch, 1)), 2) cullspercent,		
        CPO.sellable,
        ROUND((((IFNULL(CPO.totalhatch, 1) - IFNULL(CPO.culls, 0)) * 100) / IFNULL(CPO.totalhatch, 1)), 2) sellablepercent
        
        -- (IFNULL(CPO.hatcherquantity,0) - (IFNULL(CPO.infertile, 0) + IFNULL(CPO.deadingerm,0) + IFNULL(CPO.earlymortality,0) + IFNULL(CPO.middleemortality,0) + IFNULL(CPO.deadinshell,0) + IFNULL(CPO.LCM,0) + IFNULL(CPO.burst,0)) AS totalhatch,
        
	
    FROM
		hatcherbatch HB
        
		INNER JOIN hatcher H ON H.id = HB.hatcherid
		INNER JOIN setter S ON S.id = HB.setterid
		INNER JOIN reference REF ON REF.id = HB.statusid
		INNER JOIN setterbatch SB ON SB.id = HB.setterbatchid
        LEFT JOIN reference REF1 ON REF1.id = SB.sourceid
		INNER JOIN chickspullout CPO ON HB.id = CPO.hatchbatchid
    
	WHERE
		HB.companyid = p_companyid 
         
        AND HB.batchdate BETWEEN p_fromdate AND p_todate
        
	ORDER BY HB.batchdate, @row_number;
END;



CREATE PROCEDURE `spc_hsnmaster_ddl`(
	IN p_companyid INT
)
BEGIN

	SELECT
		`id`,
		`chapterid`,
        `description`
	FROM
		`hsnmaster`
	WHERE
		companyid = p_companyid;
END;



CREATE PROCEDURE `spc_hsnmaster_save`(
   IN p_id INT(11),
   IN p_chapter VARCHAR(10),
   IN p_heading VARCHAR(10),
   IN p_subheading VARCHAR(10),
   IN p_description VARCHAR(200),
   IN p_chapterid VARCHAR(40),
   IN p_chapterformatted VARCHAR(40),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;

    
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO hsnmaster 
						(`id`,
						`chapter`,
						`heading`,
						`subheading`,
						`description`,
						`chapterid`,
						`chapterformatted`,
						`companyid`)
					VALUES 
						(p_id, p_chapter, p_heading, p_subheading, p_description, p_chapterid,p_chapterformatted, p_companyid);
						
			  SET @action = 'INSERT';
			ELSE
			
				UPDATE hsnmaster
						SET chapter = p_chapter,
							heading = p_heading,
							subheading = p_subheading,
							description = p_description,
							chapterid = p_chapterid,
							chapterformatted = p_chapterformatted,
							companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
				   
                   SET @action = 'UPDATE';     
						
			END IF;
			
			SELECT LAST_INSERT_ID() INTO out_id; 
			
		   -- record log
		   CALL spc_commonlog_save(p_companyid, 'hsnmaster', out_id, @action, p_userid);

	
END;



CREATE PROCEDURE `spc_hsnmaster_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
		`id`,
		`chapter`,
		`heading`,
		`subheading`,
		`description`,
		`chapterid`,
		`chapterformatted`,
		`companyid`
	FROM
		`hsnmaster`
	WHERE
		companyid = p_companyid;
END;



CREATE PROCEDURE `spc_hsnmaster_select`(
	IN p_id INT
)
BEGIN

	SELECT
		`id`,
		`chapter`,
		`heading`,
		`subheading`,
		`description`,
		`chapterid`,
		`chapterformatted`,
		`companyid`
	FROM
		`hsnmaster`
	WHERE
		id = p_id;
END;



CREATE PROCEDURE `spc_incomingoutgoingpaymentdetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM incomingoutgoingpaymentdetail WHERE id = p_id;

END;



CREATE PROCEDURE `spc_incomingoutgoingpaymentdetail_save`(
	IN p_id INT(11),
    IN p_incomingoutgoingpaymentid INT(11),
    IN p_partyroleid INT(11),
    IN p_billno VARCHAR(100),
    IN p_billdate DATE,
    IN p_orderno VARCHAR(100),
    IN p_chequeno VARCHAR(100),
    IN p_bankid INT(11),
    IN p_billamount DECIMAL(9,3),
    IN p_receiptorpaidamount DECIMAL(9,3),
    IN p_pendingamount DECIMAL(9,3),
    IN p_voucheramount DECIMAL(9,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO incomingoutgoingpaymentdetail 
				(id, incomingoutgoingpaymentid, billno, billdate, orderno,
                chequeno, bankid, billamount, receiptorpaidamount,
                pendingamount, voucheramount, companyid)
			VALUES 
				(p_id, p_incomingoutgoingpaymentid, p_billno, p_billdate, p_orderno,
                p_chequeno, p_bankid,p_billamount, p_receiptorpaidamount,
                p_pendingamount, p_voucheramount, p_companyid);
                
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE incomingoutgoingpaymentdetail
				SET incomingoutgoingpaymentid = p_incomingoutgoingpaymentid,
                billno = p_billno,
                billdate = p_billdate,
                orderno = p_orderno,
                chequeno = p_chequeno,
                bankid = p_bankid,
                billamount = p_billamount,
                receiptorpaidamount = p_receiptorpaidamount,
                pendingamount = p_pendingamount,
                voucheramount = p_voucheramount,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- update pending invoice quantity
    
    if(p_partyroleid = 1251) THEN
    
		UPDATE purchaseinvoice SET pendingtotal = (p_billamount - p_receiptorpaidamount) WHERE id = p_billno;
	
    END IF;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'incomingoutgoingpaymentdetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_incomingoutgoingpaymentdetail_search`(
	IN p_incomingoutgoingpaymentid INT(11)
)
BEGIN

	SELECT id,
		   incomingoutgoingpaymentid,
           billno,
           DATE_FORMAT(billdate,'%d/%m/%Y') as billdate,
           orderno,
           chequeno,
           bankid,
           billamount,
           receiptorpaidamount,
           pendingamount,
           voucheramount,
           companyid
           
    
    FROM incomingoutgoingpaymentdetail
    
    WHERE incomingoutgoingpaymentid = p_incomingoutgoingpaymentid;

END;



CREATE PROCEDURE `spc_incomingoutgoingpaymentdetail_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT * FROM incomingoutgoingpaymentdetail WHERE id = p_id;

END;



CREATE PROCEDURE `spc_incomingoutgoingpayment_bypaymenttypeid`(
	IN p_paymenttypeid INT(11),
    IN p_companyid INT(11)
)
BEGIN
    SELECT IOP.id,
		   IOP.vouchermodeid,
           REF1.refname as vouchermode,
		   DATE_FORMAT(IOP.voucherdate,'%d/%m/%Y') as voucherdate,
           IOP.paymentsubject,
           IOP.paymenttypeid,
           IOP.partyid,
           P.partyname,
           IOP.ledgerid,
           COA.coaname as ledgername,
           COA.glcode,
           IOP.paymentamount,
           IOP.byhand,
           IOP.narration
           
    FROM incomingoutgoingpayment IOP
    LEFT JOIN chartofaccount COA ON COA.id = IOP.ledgerid
    LEFT JOIN `reference` REF1 ON REF1.id = IOP.vouchermodeid
    -- LEFT JOIN `reference` REF2 ON REF2.id = IOP.paymenttypeid
    LEFT JOIN party P ON P.id = IOP.partyid
    
    WHERE IOP.paymenttypeid = p_paymenttypeid
    AND IOP.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_incomingoutgoingpayment_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM incomingoutgoingpaymentdetail WHERE incomingoutgoingpaymentid = p_id;
	DELETE FROM incomingoutgoingpayment WHERE id = p_id;

END;



CREATE PROCEDURE `spc_incomingoutgoingpayment_save`(
	IN p_id INT(11),
    IN p_vouchermodeid INT(11),
    IN p_voucherdate DATE,
    IN p_paymentsubject VARCHAR(100),
    IN p_paymenttypeid INT(11),
    IN p_partyid INT(11),
    IN p_ledgerid INT(11),
    IN p_paymentamount DECIMAL(9,3),
    IN p_byhand TINYINT(4),
    IN p_narration VARCHAR(100),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO incomingoutgoingpayment 
				(id, vouchermodeid, voucherdate, paymentsubject, paymenttypeid,
                partyid, ledgerid, paymentamount, byhand,
                narration, companyid)
			VALUES 
				(p_id, p_vouchermodeid, p_voucherdate, p_paymentsubject, p_paymenttypeid,
                p_partyid, p_ledgerid, p_paymentamount, p_byhand,
                p_narration, p_companyid);
                
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE incomingoutgoingpayment
				SET vouchermodeid = p_vouchermodeid,
                voucherdate = p_voucherdate,
                paymentsubject = p_paymentsubject,
                paymenttypeid = p_paymenttypeid,
                partyid = p_partyid,
                ledgerid = pledgerid,
                paymentamount = p_paymentamount,
                byhand = p_byhand,
                narration = p_narration,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'incomingoutgoingpayment', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_incomingoutgoingpayment_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT * FROM incomingoutgoingpayment WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_incomingoutgoingpayment_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT * FROM incomingoutgoingpayment WHERE id = p_id;

END;



CREATE PROCEDURE `spc_indirectcostheads_delete`(
IN p_id INT(11)
)
BEGIN
DELETE 
FROM feedmill_indirectcostheads
WhERE

		id = p_id;


END;



CREATE PROCEDURE `spc_indirectcostheads_save`(
IN p_id INT(11),
IN p_resourcename VARCHAR(45),
IN p_ledgerid INT(11),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT
     )
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_indirectcostheads(id, resourcename,ledgerid, companyid)
        VALUES (p_id, p_resourcename,p_ledgerid, p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_indirectcostheads
        SET resourcename = p_resourcename,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_indirectcostheads', out_id, @action, p_userid);




END;



CREATE PROCEDURE `spc_indirectcostheads_search`(
IN p_companyid INT(11)
)
BEGIN
SELECT ICH.id,
		ICH.resourcename,
        ICH.ledgerid,
        ICH.companyid,
        COA.coaname as ledgername,
        COA.glcode
        
FROM feedmill_indirectcostheads ICH
LEFT JOIN chartofaccount COA ON COA.id = ICH.ledgerid      
WHERE
		ICH.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_indirectcostheads_select`(
IN p_id INt(11),
IN p_companyid INT(11)
)
BEGIN
SELECT ICH.id,
		ICH.resourcename,
        ICH.ledgerid,
        ICH.companyid,
        COA.coaname as ledgername,
        COA.glcode
        
FROM feedmill_indirectcostheads ICH
LEFT JOIN chartofaccount COA ON COA.id = ICH.ledgerid  
WHERE 
			ICH.id = p_id
           AND ICH.companyid = p_companyid; 

END;



CREATE PROCEDURE `spc_invoice_byvendorid`(
	IN p_vendorid INT(11),
    IN p_type VARCHAR(50),
    IN p_companyid INT(11)
)
BEGIN

	IF(p_type = 'Supplier') THEN
		SELECT PI.id, 
			   DATE_FORMAT(PI.invoicedate,'%d/%m/%Y') as invoicedate,
			   PI.vendorid,
			   PI.grpono,
			   PI.pendingtotal,
			   PI.remark,
			   G.purchaseorderid as orderid
		
		FROM purchaseinvoice PI
		LEFT JOIN grpo G ON G.id = PI.grpono
		
		WHERE PI.vendorid = p_vendorid
		AND PI.companyid = p_companyid;
        
	END IF;
    
    IF(p_type = 'Customer') THEN
    
		SELECT SI.id,
			   DATE_FORMAT(SI.salesinvoicedate,'%d/%m/%Y') as salesinvoicedate,
               SI.customerid as vendorid,
               SI.remark,
               SI.pendingtotal,
               SI.salesorderid,
               P.partyname
               
		FROM salesinvoice SI
        LEFT JOIN party P ON P.id = SI.customerid
        
        WHERE SI.customerid = p_vendorid
        AND SI.companyid = p_companyid;
               
    
    END IF;

END;



CREATE PROCEDURE `spc_issuetypehatcherbatches_search`( 
	IN p_companyid INT
)
BEGIN
   
    SELECT
		HB.id as hatcherbatchno,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as settingdate,
        HB.hatcherid,
        H.hatchername,
        HB.setterbatchid,
        HB.actualquantity
	
    FROM
		Hatcherbatch HB
	
    LEFT JOIN hatcher H ON HB.hatcherid = H.id
	LEFT JOIN warehouse W ON H.warehouseid = W.id
    LEFT JOIN reference R ON R.id = HB.statusid
	
    
        
	WHERE
		HB.companyid = p_companyid
        -- 302 = In Progress
        AND  R.id = 302;
END;



CREATE PROCEDURE `spc_itembyinvoicetype_search`(
 IN p_itemgroupid varchar(100),
 IN p_invoicetypeid INT(11),
 IN p_companyid INT(11)
)
BEGIN

	SELECT 
		I.id,
		itemcode,
		itemname,
		itemunitid,
		unitcost,
		R.refname as itemunitname,
         isgst, 
        case when isgst = 1 then true else false END as isgstbool,
        case when active = 1 then true else false END as activebool,
        materialtypeid, 
        R1.refname as materialtypename,
        hsnid, 
        H.chapterid,
        H.description as hsndescription,
        taxcategoryid,
        R2.refname as taxcategoryname
        
		
		FROM
		  item I
		   LEFT JOIN `reference` R ON R.id = I.itemunitid
		   LEFT JOIN `reference` R1 ON R1.id = I.materialtypeid
		   LEFT JOIN `reference` R2 ON R2.id = I.taxcategoryid
		   LEFT JOIN `hsnmaster` H ON H.id = I.hsnid
	WHERE
	   FIND_IN_SET(itemgroupid, p_itemgroupid) AND
       ((p_invoicetypeid = 1562 AND FIND_IN_SET(I.taxcategoryid, '1523')) 
		OR (p_invoicetypeid = 1561 AND FIND_IN_SET(I.taxcategoryid, '1521,1522' ))) 
		AND I.companyid = p_companyid;
  
END;



CREATE PROCEDURE `spc_itembyitemgroups_search`(
 IN p_itemgroupid varchar(100),
 IN p_companyid INT(11)
)
BEGIN

	SELECT 
		I.id,
		itemcode,
		itemname,
		itemunitid,
		unitcost,
		R.refname as itemunitname,
         isgst, 
        case when isgst = 1 then true else false END as isgstbool,
        case when active = 1 then true else false END as activebool,
        materialtypeid, 
        R1.refname as materialtypename,
        hsnid, 
        H.chapterid,
        H.description as hsndescription,
        taxcategoryid,
        R2.refname as taxcategoryname
        
		
		FROM
		  item I
		   LEFT JOIN `reference` R ON R.id = I.itemunitid
		   LEFT JOIN `reference` R1 ON R1.id = I.materialtypeid
		   LEFT JOIN `reference` R2 ON R2.id = I.taxcategoryid
		   LEFT JOIN `hsnmaster` H ON H.id = I.hsnid
	WHERE
	   FIND_IN_SET(itemgroupid, p_itemgroupid) AND
	   I.companyid = p_companyid;
  
END;



CREATE PROCEDURE `spc_itembytexcategory_search`(
 IN p_itemgroupid varchar(100),
 IN p_taxcategoryid INT(11),
 IN p_companyid INT(11)
)
BEGIN

	SELECT 
		I.id,
		itemcode,
		itemname,
		itemunitid,
		unitcost,
		R.refname as itemunitname,
         isgst, 
        case when isgst = 1 then true else false END as isgstbool,
        case when active = 1 then true else false END as activebool,
        materialtypeid, 
        R1.refname as materialtypename,
        hsnid, 
        H.chapterid,
        H.description as hsndescription,
        taxcategoryid,
        R2.refname as taxcategoryname
        
		
		FROM
		  item I
		   LEFT JOIN `reference` R ON R.id = I.itemunitid
		   LEFT JOIN `reference` R1 ON R1.id = I.materialtypeid
		   LEFT JOIN `reference` R2 ON R2.id = I.taxcategoryid
		   LEFT JOIN `hsnmaster` H ON H.id = I.hsnid
	WHERE
	   FIND_IN_SET(itemgroupid, p_itemgroupid) AND
       ( p_taxcategoryid is null OR I.taxcategoryid = p_taxcategoryid) AND
	   I.companyid = p_companyid;
  
END;



CREATE PROCEDURE `spc_itemgroup_ddl`(
  IN p_companyid INT 
)
BEGIN
	SELECT id ,
		   groupname
                  
    FROM  itemgroup 
    WHERE 
          companyid = p_companyid;
END;



CREATE PROCEDURE `spc_itemgroup_delete`(
IN p_id INT
)
BEGIN
	DELETE FROM itemgroup WHERE id = p_id;
END;



CREATE PROCEDURE `spc_itemgroup_save`(
	IN p_id INT,
    IN p_groupname VARCHAR(100),
    IN p_seriesstartwith INT(11),
    IN p_seriesprefix VARCHAR(20),
    IN p_seriesseparator VARCHAR(5),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	
    SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO itemgroup 
				(id, groupname, seriesstartwith, seriesprefix, seriesseparator, companyid)
			VALUES 
				(p_id, p_groupname, p_seriesstartwith, p_seriesprefix, p_seriesseparator, p_companyid);
			
            SET @action = 'INSERT';
	ELSE
    
		UPDATE itemgroup
			SET groupname = p_groupname,  
				seriesstartwith = p_seriesstartwith,
                seriesprefix = p_seriesprefix,
                seriesseparator = p_seriesseparator,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';
    
	END IF;
    
	SELECT LAST_INSERT_ID() INTO out_id;
    
     -- record log
   CALL spc_commonlog_save(p_companyid, 'itemgroup', out_id, @action, p_userid);


END;



CREATE PROCEDURE `spc_itemgroup_search`(
  IN p_companyid INT 
)
BEGIN
	SELECT id ,
		   groupname,
           groupname,
		   seriesstartwith,
		   seriesprefix,
		   seriesseparator
            
    FROM  itemgroup 
    WHERE 
          companyid = p_companyid;
END;



CREATE PROCEDURE `spc_itemgroup_select`(
IN p_id INT
)
BEGIN
	SELECT id,
		groupname,
        seriesstartwith,
		seriesprefix,
		seriesseparator
	
    FROM  itemgroup 
	
    WHERE 
          id = p_id;
        
END;



CREATE PROCEDURE `spc_itemidbybillofmaterialdetail_search`(
IN p_itemid INT(11),
IN p_companyid INT(11) )
BEGIN
SELECT 	     
			 I.itemcode,
			 I.itemname,
             BOMD.quantity,
             BOMD.unitcost,
             BOMD.unitid,
			 R.refname as itemunitname,
			 BOMD.itemid
    
	FROM feedmill_billofmaterial BOM
    LEFT JOIN feedmill_billofmaterialdetail BOMD ON BOM.id = BOMD.bomid
    LEFT JOIN item I ON BOMD.itemid = I.id
    LEFT JOIN `reference` R ON BOMD.unitid = R.id
   
    
    
    WHERE BOM.companyid = p_companyid AND
			 BOM.itemid = p_itemid;


END;



CREATE PROCEDURE `spc_itemsubgroup_report`(
 IN p_warehouseids varchar(200),
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_companyid INT(11)
 )
BEGIN
SET @warehouseids = p_warehouseids;

 SELECT 
     M.itemid,
	 DATE_FORMAT(M.transactiondate,'%d/%m/%Y') as date,
     I.itemname,
     I.itemcode,
     I.manufacturer,
     I.itemgroupid,
     IG.groupname,
     M.itembatch batchno,
     fun_itembatchclosingbalance(M.itemid,M.itembatch,@warehouseids, transactiondate, p_companyid) as closingstock,
     (M.itemvalue/M.quantity) as unitcost
    
  FROM materialmovement M
  LEFT JOIN item I ON M.itemid = I.id
  LEFT JOIN itemgroup IG ON IG.id= I.itemgroupid
WHERE
	 transactiondate BETWEEN p_fromdate AND p_todate AND
       FIND_IN_SET(transactiontypeid, '681,682')  AND
       FIND_IN_SET(towarehouseid, p_warehouseids) 
       
       order by I.itemgroupid,M.itemid;
       
   
END;



CREATE PROCEDURE `spc_itemwisestock_report`(
 IN p_itemid INT(11),
 IN p_warehouseids varchar(200),
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_companyid INT(11)
 )
BEGIN
SET @warehouseids = p_warehouseids;
SET @billdate = null;
SET @transactiondate = null;

 SELECT 
   DATE_FORMAT( transactiondate,'%d/%m/%Y') as date,
	fun_itemwiseclosingbalance(p_itemid,@warehouseids, transactiondate, p_companyid) as closingstock,
	fun_iteminquntity(p_itemid,@warehouseids, transactiondate, p_companyid) as inqty,
    fun_itemwiseOunt(p_itemid,@warehouseids, transactiondate, p_companyid) as outqty,
   fun_billno(p_itemid,@warehouseids, transactiondate, p_companyid) as billno
   
	-- fun_billdate(p_itemid,@warehouseids, transactiondate, p_companyid) as billdate1
     -- 
     
    
  FROM materialmovement M
  
WHERE
	M.itemid = p_itemid AND
	 transactiondate BETWEEN p_fromdate AND p_todate
     group by transactiondate order by transactiondate;
    

END;



CREATE PROCEDURE `spc_item_bymaterialtype`(
 IN p_materialtypeid varchar(100),
 IN p_companyid INT(11)
)
BEGIN

	SELECT 
		I.id,
		itemcode,
		itemname,
		itemunitid,
		unitcost,
		R.refname as itemunitname,
        materialtypeid, 
        R1.refname as materialtypename
        
		
		FROM
		  item I
		   LEFT JOIN `reference` R ON R.id = I.itemunitid
		   LEFT JOIN `reference` R1 ON R1.id = I.materialtypeid
	WHERE
	   FIND_IN_SET(materialtypeid, p_materialtypeid) AND
	   I.companyid = p_companyid;
  
END;



CREATE PROCEDURE `spc_item_ddl`(
IN p_companyid INT
)
BEGIN
	SELECT I.id ,
		itemcode,
        itemname,
        unitcost,
        I.itemunitid,
        R.refname as unitname
        
	FROM item I
    
		LEFT JOIN reference R ON I.itemunitid = R.id
    
    WHERE
    I.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_item_delete`(
IN p_id INT
)
BEGIN
	DELETE FROM item WHERE id = p_id;
END;



CREATE PROCEDURE `spc_item_getavgweight`(
	IN p_itemid INT,
    IN p_companyid INT
)
BEGIN

	SELECT avgweight FROM breederdailymortality 
    WHERE 
		itemid = p_itemid 
		AND companyid = p_companyid 
    ORDER BY itemid desc LIMIT 1;

END;



CREATE PROCEDURE `spc_item_lastpurchasecost`(
 IN p_itemid INT(11),
 IN p_companyid INT(11)
)
BEGIN

       
       SELECT unitprice as lastpurchaseprice
          
          FROM 
          
          grpodetail 
          
          WHERE
          
          itemid = p_itemid  AND
          companyid = p_companyid
          order by id DESC  LIMIT 1;
  
END;



CREATE PROCEDURE `spc_item_livestock`(
	IN p_itemid INT,
	IN p_warehouseid INT,
    IN p_companyid INT
)
BEGIN

	SELECT fnc_consumptionlivestock(p_itemid, p_warehouseid, p_companyid) as stockquantity;
		        
END;



CREATE PROCEDURE `spc_item_save`(
	IN p_id INT,
    IN p_itemgroupid INT,
    IN p_itemcode VARCHAR(20),
    IN p_itemname VARCHAR(200),
    IN p_description VARCHAR(500),
    IN p_manufacturer VARCHAR(200),
    IN p_itemunitid INT,
    IN p_active TINYINT,
    IN p_unitcost DECIMAL(9,3),
    IN p_ledgerid INT(11),
    IN p_isgst TINYINT,
    IN p_materialtypeid INT(11),
    IN p_hsnid INT(11),
    IN p_taxcategoryid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO item 
				(id, itemgroupid, itemcode, itemname, description, manufacturer, itemunitid, active, unitcost, ledgerid, isgst, materialtypeid, hsnid, taxcategoryid, companyid)
			VALUES 
				(p_id, p_itemgroupid, p_itemcode, p_itemname, p_description, p_manufacturer, p_itemunitid, p_active, p_unitcost, p_ledgerid, p_isgst, p_materialtypeid, p_hsnid, p_taxcategoryid, p_companyid);
	
			SET @action = 'INSERT';
    
    ELSE
    
		UPDATE item
			SET itemgroupid = p_itemgroupid,
				itemcode = p_itemcode, 
                itemname = p_itemname, 
                description = p_description,
                manufacturer = p_manufacturer,
                itemunitid = p_itemunitid,
                active = p_active,
                unitcost = p_unitcost,
                ledgerid = p_ledgerid,
                isgst = p_isgst,
                materialtypeid = p_materialtypeid,
                hsnid = p_hsnid,
                taxcategoryid = p_taxcategoryid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';
    
	END IF;
    
	SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'item', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_item_search`(
IN p_companyid INT
)
BEGIN
	SELECT I.id ,
		itemgroupid,
		itemcode,
        itemname,
        I.description,
        manufacturer,
        active,
        itemunitid,
        unitcost,
        R.refname as itemunitname,
        isgst, 
        case when isgst = 1 then true else false END as isgstbool,
        case when active = 1 then true else false END as activebool,
        materialtypeid, 
        R1.refname as materialtypename,
        hsnid, 
        H.chapterid,
        H.description as hsndescription,
        taxcategoryid,
        R2.refname as taxcategoryname
        
	FROM item I
    
    LEFT JOIN `reference` R ON R.id = I.itemunitid
    LEFT JOIN `reference` R1 ON R1.id = I.materialtypeid
    LEFT JOIN `reference` R2 ON R2.id = I.taxcategoryid
    LEFT JOIN `hsnmaster` H ON H.id = I.hsnid
    WHERE
    I.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_item_select`(
IN p_id INT
)
BEGIN
	SELECT I.id,
		I.itemgroupid,
		I.itemcode,	
		I.itemname,
        I.description,
        I.manufacturer,
        I.active,
        I.itemunitid,
        I.unitcost,
        IG.groupname,
        I.isgst, 
        I.materialtypeid, 
        I.hsnid, 
        I.taxcategoryid
        
	
    FROM  item I
    LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
	
    WHERE 
          I.id = p_id;

END;



CREATE PROCEDURE `spc_item_warehouseaddresses`(
	IN p_moduleid INT,
	IN p_companyid INT
)
BEGIN

	SELECT 
		WH.id,
		WH.warehousecode,
        WH.warehousename,
        WH.shiptoname,
        WH.address,
        WH.cityid,
		CT.`cityname`,
        WH.stateid,
        S.statename,
		S.statecode,
        S.isunionterritory,
        WH.countryid,
        C.countryname,
        WH.zipcode,
        WH.companyid
	FROM
		warehouse WH
        
	LEFT JOIN city CT ON WH.cityid = CT.id
    LEFT JOIN state S ON WH.stateid = S.id
    LEFT JOIN country C ON WH.countryid = C.id
	WHERE
		(p_moduleid is null OR moduleid = p_moduleid) AND active = 1 AND WH.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_journalentry1_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM journalentry1 WHERE id = p_id;
    DELETE FROM journalentrydetail1 WHERE journalentryid = p_id;

END;



CREATE PROCEDURE `spc_journalentry1_save`(
	IN p_id INT(11),
    IN p_journalentrydate DATE,
    IN p_vouchertypeid INT(11),
    IN p_narration VARCHAR(100),
    IN p_referenceid INT(11),
    IN p_moduleid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
    
)
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO journalentry1 
				(id, journalentrydate, vouchertypeid, narration, referenceid, moduleid, companyid)
			VALUES 
				(p_id, p_journalentrydate, p_vouchertypeid, p_narration, p_referenceid, p_moduleid, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE journalentry1
				SET journalentrydate = p_journalentrydate,
                    vouchertypeid = p_vouchertypeid,
                    narration = p_narration,
                    referenceid = p_referenceid,
                    moduleid = p_moduleid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'journalentry1', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_journalentry1_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT JE.id,
		   DATE_FORMAT(JE.journalentrydate,'%d/%m/%Y') as journalentrydate,
           JE.vouchertypeid,
           REF.refname as vouchertype,
           JE.narration,
           JE.referenceid,
           JE.moduleid,
           REF1.refname as module
           
	FROM journalentry1 JE 
    LEFT JOIN `reference` REF ON REF.id = JE.vouchertypeid
    LEFT JOIN `reference` REF1 ON REF1.id = JE.moduleid
    
    WHERE JE.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_journalentry1_select`(
	 IN p_id INT(11)
)
BEGIN

	SELECT id,
           DATE_FORMAT(journalentrydate,'%d/%m/%Y') as journalentrydate,
           vouchertypeid,
           narration,
           referenceid,
           moduleid
	FROM journalentry1 
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);


END;



CREATE PROCEDURE `spc_journalentrydetail1_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM journalentrydetail1 WHERE id = p_id;

END;



CREATE PROCEDURE `spc_journalentrydetail1_save`(
	IN p_id INT(11),
    IN p_journalentryid INT(11),
    IN p_batchid INT(11),
    IN p_locationid INT(11),
    IN p_shedid INT(11),
    IN p_partyroleid INT(11),
    IN p_partyid INT(11),
    IN p_ledgerid INT(11),
    IN p_creditamount DECIMAL(12,3),
    IN p_debitamount DECIMAL(12,3),
    IN p_narration VARCHAR(100),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO journalentrydetail1 
				(id, journalentryid, batchid, locationid, shedid,
                partyroleid, partyid, ledgerid,
                creditamount, debitamount, narration, companyid)
			VALUES 
				(p_id, p_journalentryid, p_batchid, p_locationid, p_shedid,
                p_partyroleid, p_partyid, p_ledgerid,
                p_creditamount, p_debitamount, p_narration, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE journalentrydetail1
				SET journalentryid = p_journalentryid,
					batchid = p_batchid,
                    locationid = p_locationid,
                    shedid = p_shedid,
                    partyroleid = p_partyroleid,
                    partyid = p_partyid,
                    ledgerid = p_ledgerid,
                    creditamount = p_creditamount,
                    debitamount = p_debitamount,
                    narration = p_narration,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'journalentrydetail1', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_journalentrydetail1_search`(
	IN p_journalentryid INT(11)
)
BEGIN

	SELECT JED.id,
		   JED.journalentryid, 
           JED.partyroleid, 
           JED.partyid, 
           P.partyname,
           JED.ledgerid,
           COA.coaname as ledgername,
           COA.glcode,
		   JED.creditamount, 
           JED.debitamount, 
           JED.narration
                
	FROM journalentrydetail1 JED
    LEFT JOIN party P ON P.id = JED.partyid
    LEFT JOIN chartofaccount COA ON COA.id = JED.ledgerid
    
    WHERE JED.journalentryid = p_journalentryid;

END;



CREATE PROCEDURE `spc_journalentrydetail1_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT id, journalentryid, partyroleid, partyid, ledgerid,
                creditamount, debitamount, narration
                
	FROM journalentrydetail1
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_journalentrydetail_delete`(
	IN p_id INT
)
BEGIN

	DELETE FROM journalentrydetail WHERE id = p_id;

END;



CREATE PROCEDURE `spc_journalentrydetail_save`(
	IN p_id INT(11),
    IN p_journalentryid INT(11),
    IN p_acledgerid INT(11),
    IN p_iscostcenter TINYINT(4),
    IN p_costcenterorprojectid INT(11),
    IN p_parenttype VARCHAR(45),
    IN p_parentno VARCHAR(45),
    IN p_billno INT(11),
    IN p_billdate DATE,
    IN p_billamount DECIMAL(12,3),
    IN p_dramount DECIMAL(15,3),
    IN p_cramount DECIMAL(15,3),
    IN p_entrycode VARCHAR(45),
    IN p_partyid INT(11),
    IN p_entrytype VARCHAR(45),
    IN p_loadonitemid INT(11),
    IN p_subledgertypeid INT(11),
    IN p_narration VARCHAR(100),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO journalentrydetail 
				(id,
                journalentryid,
                acledgerid,
                iscostcenter,
                costcenterorprojectid,
                parenttype,
                parentno,
                billno,
                billdate,
                billamount,
                dramount,
                cramount,
                entrycode,
                partyid,
                entrytype,
                loadonitemid,
                subledgertypeid,
                narration,
                companyid)
			VALUES 
				(p_id,
                p_journalentryid,
                p_acledgerid,
                p_iscostcenter,
                p_costcenterorprojectid,
                p_parenttype,
                p_parentno,
                p_billno,
                p_billdate,
                p_billamount,
                p_dramount,
                p_cramount,
                p_entrycode,
                p_partyid,
                p_entrytype,
                p_loadonitemid,
                p_subledgertypeid,
                p_narration,
                p_companyid);
                
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE journalentrydetail
				SET journalentryid = p_journalentryid,
                acledgerid = p_acledgerid,
                iscostcenter = p_iscostcenter,
                costcenterorprojectid = p_costcenterorprojectid,
                parenttype = p_parenttype,
                parentno = p_parentno,
                billno = p_billno,
                billdate = p_billdate,
                billamount = p_billamount,
                dramount = p_dramount,
                cramount = p_cramount,
                entrycode = p_entrycode,
                partyid = p_partyid,
                entrytype = p_entrytype,
                loadonitemid = p_loadonitemid,
                subledgertypeid = p_subledgertypeid,
                narration = p_narration,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
   -- IF(p_subledgertypeid = 1251 && ) THEN
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'journalentrydetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_journalentrydetail_search`(
	IN p_journalentryid INT(11)
)
BEGIN

	SELECT JED.id,
		   JED.acledgerid,
           COA.coaname as ledgername,
           COA.glcode,
           JED.cramount,
           JED.dramount,
           P.partyname
    
    FROM journalentrydetail JED
    LEFT JOIN party P ON P.id = JED.partyid
    LEFT JOIN CHARTOFACCOUNT COA ON COA.id = JED.acledgerid
    
    WHERE journalentryid = p_journalentryid;

END;



CREATE PROCEDURE `spc_journalentrydetail_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT * FROM journalentrydetail WHERE id = p_id;

END;



CREATE PROCEDURE `spc_journalentry_delete`(
	IN p_id INT
)
BEGIN

	DELETE FROM journalentrydetail WHERE journalentryid = p_id;
	DELETE FROM journalentry WHERE id = p_id;

END;



CREATE PROCEDURE `spc_journalentry_save`(
	IN p_id INT(11),
    IN p_disp_bucketid INT(11),
    IN p_vouchertypeid INT(11),
    IN p_vouchermodeid INT(11),
    IN p_voucherdate DATE,
    IN p_bankdate DATE,
    IN p_branchid INT(11),
    IN p_uservoucherno VARCHAR(100),
    IN p_chequeno VARCHAR(100),
    IN p_chequedate DATE,
    IN p_byhand VARCHAR(100),
    IN p_deletestatusid INT(11),
    IN p_partyid INT(11),
    IN p_partycode VARCHAR(100),
    IN p_subledgertypeid INT(11),
    IN p_dimensionid INT(11),
    IN p_moduleid INT(11),
    IN p_approvestatusid INT(11),
    IN p_journalentrysubject VARCHAR(100),
    IN p_addressto VARCHAR(100),
    IN p_financialyear VARCHAR(100),
    IN p_bankid INT(11),
    IN p_transactionid INT(11),
    IN p_narration VARCHAR(100),
    IN p_companyid INT(11),
    IN p_userid INT(11),
	OUT out_id INT
)
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO journalentry 
				(id,
                disp_bucketid,
                vouchertypeid,
                vouchermodeid,
                voucherdate,
                bankdate,
                branchid,
                uservoucherno,
                chequeno,
                chequedate,
                byhand, 
                deletestatusid,
                partyid,
                partycode,
                subledgertypeid,
                dimensionid,
                moduleid,
                approvestatusid,
                journalentrysubject,
                addressto, 
                financialyear,
                bankid,
                transactionid,
                narration,
                companyid)
			VALUES 
				(p_id,
                p_disp_bucketid,
                p_vouchertypeid,
                p_vouchermodeid,
                p_voucherdate,
                p_bankdate,
                p_branchid,
                p_uservoucherno,
                p_chequeno,
                p_chequedate,
                p_byhand, 
                p_deletestatusid,
                p_partyid,
                p_partycode,
                p_subledgertypeid,
                p_dimensionid,
                p_moduleid,
                p_approvestatusid,
                p_journalentrysubject,
                p_addressto, 
                p_financialyear,
                p_bankid,
                p_transactionid,
                p_narration,
                p_companyid);
                
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE journalentry
				SET disp_bucketid = p_disp_bucketid,
                vouchertypeid = p_vouchertypeid,
                vouchermodeid = p_vouchermodeid,
                voucherdate = p_voucherdate,
                bankdate = p_bankdate,
                branchid = p_branchid,
                uservoucherno = p_uservoucherno,
                chequeno = p_chequeno,
                chequedate = p_chequedate,
                byhand = p_byhand, 
                deletestatusid = p_deletestatusid,
                partyid = p_partyid,
                partycode = p_partycode,
                subledgertypeid = p_subledgertypeid, 
				dimensionid = p_dimensionid, 
                moduleid = p_moduleid,
                approvestatusid = p_approvestatusid,
                journalentrysubject = p_journalentrysubject,
                addressto = p_addressto, 
                financialyear = p_financialyear,
                bankid = p_bankid,
                transactionid = p_transactionid,
                narration = p_narration,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'journalentry', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_journalentry_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT JE.vouchertypeid,
		   REF.refname,
		   JE.id,
		   JE.vouchermodeid, 
           DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate, 
           DATE_FORMAT(JE.bankdate,'%d/%m/%Y') as bankdate,
           JE.chequeno, 
           DATE_FORMAT(JE.chequedate,'%d/%m/%Y') as chequedate, 
           JE.byhand, 
           JE.partyid, 
           JE.partycode, 
           JE.subledgertypeid, 
		   JE.approvestatusid, 
           JE.journalentrysubject, 
           JE.addressto, 
		   JE.financialyear, 
           JE.bankid, 
           JE.narration
           
    FROM journalentry JE 
    LEFT JOIN `reference` REF ON JE.vouchertypeid = REF.id
    
    WHERE JE.companyid = p_companyid
    
    ORDER BY JE.id desc;

END;



CREATE PROCEDURE `spc_journalentry_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT * FROM journalentry WHERE id = p_id;

END;



CREATE PROCEDURE `spc_jsontest`(
	-- IN p_consumptiondetail json,
)
BEGIN


	-- SELECT p_consumptiondetail;
	-- SELECT JSON_EXTRACT(p_consumptiondetail);

	-- SELECT p_consumptiondetail->'$.test';

	-- SELECT JSON_EXTRACT(p_consumptiondetail, CONCAT('$.test')) AS fishes;



	SET @jsonstring = '[{ "test" : null, "test1" : "test 13"}, { "test" : 2, "test1" : "test 12"}]';

	-- SELECT p_consumptiondetail->'$.test';

	set @i = 0;

	WHILE @i < JSON_LENGTH(@jsonstring) DO
		
        SET @ival = NULL;
        
        SELECT JSON_EXTRACT(@jsonstring,CONCAT('$[',@i,']')) INTO @ival;
        
        SELECT @ival AS TEST;
        
		SELECT 
			  case when JSON_EXTRACT(@ival,CONCAT('$.test')) is null then 1111 else 2222 end as test,
			   JSON_EXTRACT(@ival,CONCAT('$.test1')) as test1,
               JSON_EXTRACT(@ival,CONCAT('$.test')) as test,
               JSON_EXTRACT(@ival,CONCAT('$.test')) as test;
		
		SELECT @i + 1 INTO @i;
	END WHILE;

END;



CREATE PROCEDURE `spc_layeramortization_save`(
	IN p_id INT,
	IN p_layerbatchid INT,
    IN p_femalelivequantity INT,
	IN p_eggsprediction INT,
    IN p_wipvalue INT,
    IN p_ageinweeks INT,
    IN p_ageindays INT,
    IN p_requiredbirdvalue DECIMAL(8,3),
    IN p_totaleggs INT,
    IN p_amortizationvalueofegg DECIMAL(8,3),
    IN p_amortizationvalueofbird DECIMAL(8,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
	IF NOT EXISTS(SELECT * FROM layeramortization WHERE layerbatchid = p_layerbatchid) THEN
    
		INSERT INTO layeramortization (
						id,
						amortizationdate,
						layerbatchid,
						femalelivequantity,
						eggsprediction,
						wipvalue,
						ageinweeks,
                        ageindays,
						requiredbirdvalue,
						totaleggs,
						amortizationvalueofegg,
                        amortizationvalueofbird,
						companyid
					)
			VALUE 	(
						p_id,
						now(),
						p_layerbatchid,
						p_femalelivequantity,
						p_eggsprediction,
						p_wipvalue,
						p_ageinweeks,
                        p_ageindays,
						p_requiredbirdvalue,
						p_totaleggs,
						p_amortizationvalueofegg,
                        p_amortizationvalueofbird,
						p_companyid
					);
    	    
            SET @action = 'INSERT';
    END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'layeramortization', out_id, @action, p_userid);


END;



CREATE PROCEDURE `spc_layeramortization_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
			A.id,
            DATE_FORMAT(A.amortizationdate,'%d/%m/%Y') as amortizationdate,
			A.layerbatchid,
            LB.batchname,
			A.femalelivequantity,
			A.eggsprediction,
			A.wipvalue,
			A.ageinweeks,
            A.ageindays,
			A.requiredbirdvalue,
			A.totaleggs,
			A.amortizationvalueofegg,
            A.amortizationvalueofbird
			
	FROM layeramortization A
    LEFT JOIN layerbatch LB ON LB.id = A.layerbatchid


	WHERE A.companyid = p_companyid
	ORDER BY A.id DESC;

END;



CREATE PROCEDURE `spc_layeramortization_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

    SET @labourcharge = null;
    SET @overheadcost = null;
    
    SELECT labourcharge, overheadcost
    INTO @labourcharge, @overheadcost
    FROM layersetting
    WHERE companyid = p_companyid;
    
	SELECT
			A.id,
            DATE_FORMAT(A.amortizationdate,'%d/%m/%Y') as amortizationdate,
			A.layerbatchid,
            LB.batchname,
			A.femalelivequantity,
			A.eggsprediction,
			A.wipvalue,
			A.ageinweeks,
            A.ageindays,
			A.requiredbirdvalue,
            A.amortizationvalueofegg,
            A.amortizationvalueofbird,
			A.totaleggs,
            @labourcharge as labourcharge,
            @overheadcost as overheadcost,
            DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as placementdate
			
	FROM layeramortization A
    LEFT JOIN layerbatch LB ON LB.id = A.layerbatchid
    LEFT JOIN layerbatchplacement LBP ON A.layerbatchid = LBP.layerbatchid


	WHERE A.id = p_id;

END;



CREATE PROCEDURE `spc_layeramortization_wipdetail`(
	IN p_layerbatchid INT
)
BEGIN
     
     SET @femaleitemid = NULL;
     SET @labourcharge = null;
     SET @overheadcost = null;
     SET @femalebirdcost = NULL;
     SET @femaleplaced = NULL;
     SET @femalemortality = NULL;
	 SET @batchconsumptioncost = NULL;
     
     
     -- Default  Female itemids
     
		SELECT 
			defaultfemalechickid, labourcharge, overheadcost 
			INTO 
            @femaleitemid, @labourcharge, @overheadcost 
		FROM 
			layersetting LIMIT 1;


	 -- Bird purchase cost
     
				
         SELECT 
			CASE WHEN itemid = @femaleitemid THEN @femalebirdcost:= unitprice ELSE NULL END as femalebirdcost
        FROM (
         
				SELECT itemid, GRD.unitprice as unitprice
				 
					FROM layerbatchplacement LBP 
					INNER JOIN grpo GR ON GR.id = LBP.grpono
					INNER JOIN grpodetail GRD ON GR.id = GRD.grpoid
				 WHERE
					LBP.layerbatchid = p_layerbatchid
			) AS TEMP;
            
     
	 -- Birds placed in batch
             
        SELECT

			CASE WHEN itemid = @femaleitemid THEN @femaleplaced:= quantity ELSE NULL END as femaleplaced
        FROM (
        
			SELECT itemid, SUM(LBPD.quantity) as quantity
				FROM layerbatchplacement LBP
				INNER JOIN layerbatchplacementdetail LBPD ON LBPD.layerbatchplacementid = LBP.id
				WHERE
					LBP.layerbatchid = p_layerbatchid
				GROUP BY itemid
			
			 ) AS TEMP;
             
   
     -- Live birds
             
        SELECT 
			
			CASE WHEN itemid = @femaleitemid THEN @femalemortality:= itemmortality ELSE NULL END as femalemortality
        FROM (
				SELECT itemid, SUM(todaymortality) + SUM(todayculls) as itemmortality
					
					FROM layerdailytransaction LT
					INNER JOIN layerdailymortality LDM ON LT.id = LDM.layerdailytransactionid
				WHERE
					LT.layerbatchid = p_layerbatchid
				GROUP BY itemid
        ) AS TEMP;
            

	 -- Batch total consumption

		SELECT SUM(batchconsumption) INTO @batchconsumptioncost FROM (
			SELECT LC.consumptionquantity * I.unitcost AS batchconsumption
			FROM layerdailytransaction LT
				INNER JOIN layerdailyconsumption LC ON LT.id = LC.layerdailytransactionid
			 
                INNER JOIN item I ON I.id = LC.itemid
					-- also match consumption item itembatchid  = materialreceipt item itembatchid later on
			WHERE LT.layerbatchid = p_layerbatchid AND LT.statusid = 1170
			-- GROUP BY BC.quantity 
		) AS batchconsumptiontable;

	
     -- 
    
	SELECT 	 
		CAST(@femaleitemid AS SIGNED) AS femaleitemid,
        CAST(IFNULL(@labourcharge,0) AS SIGNED) AS labourcharge,
		CAST(IFNULL(@overheadcost,0) AS SIGNED) AS overheadcost,
		CAST(@femalebirdcost AS SIGNED) AS femalebirdcost,
		CAST(@femaleplaced AS SIGNED) AS femaleplaced,
		CAST(IFNULL(@femalemortality,0) AS SIGNED) AS femalemortality,
		CAST(IFNULL(@batchconsumptioncost,0) AS SIGNED) AS batchconsumptioncost;
    

END;



CREATE PROCEDURE `spc_layerbatchbalance_save`(
    IN p_id INT(11),
    IN p_updateddate DATE,
    IN p_layerbatchid INT(11),
    IN p_layershedid INT(11),
    IN p_layershedlineid INT(11),
    IN p_itemid INT(11),
    IN p_quantity INT(11),
    -- IN p_mortality INT(11),
    -- IN p_culls INT(11),
    IN p_transactionname VARCHAR(45),
    IN p_companyid INT(11),
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerbatchbalance 
				(id, updateddate, layerbatchid, layershedid, layershedlineid, itemid, quantity, transactionname, companyid)
			VALUES 
				(p_id, p_updateddate, p_layerbatchid, p_layershedid, p_layershedlineid, p_itemid, p_quantity, p_transactionname, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE layerbatchbalance
				SET  updateddate = p_updateddate,
                layerbatchid = p_layerbatchid,
                layershedid = p_layershedid,
                layershedlineid = p_layershedlineid,
                itemid = p_itemid,
                quantity = p_quantity,
                transactionname = p_transactionname,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layerbatchbalance', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layerbatchplacementdetail_bybreederbatchid`(
 IN p_companyid INT,
 IN p_layerbatchid INT
)
BEGIN
    
    SELECT
	LBP.id,
    LBPD.layershedid,
    LBP.layerbatchid,
    LS.shedname,
    L.locationcode,
	L.locationname
    
    FROM
		layerbatchplacement LBP
        
	LEFT JOIN layerbatchplacementdetail LBPD ON LBPD.layerbatchplacementid = LBP.id
    LEFT JOIN layershed LS ON LBPD.layershedid =  LS.id 
	LEFT JOIN location L ON LS.locationid = L.id
    /*AND BP.breederbatchid = p_breederbatchid*/
    
   
    
	WHERE
    LBPD.companyid = p_companyid
    AND LBP.layerbatchid = p_layerbatchid
    
    GROUP BY LBPD.layershedid;
		
END;



CREATE PROCEDURE `spc_layerbatchplacementdetail_save`(
	IN p_id INT,
    IN p_layerbatchplacementid INT(11),
    IN p_layershedid INT(11),
    IN p_layershedlineid INT(11),
    IN p_itemid INT(11),
    IN p_placedquantity DECIMAL(9,3),
    IN p_placementscheduledetailid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	SET @out_transferid = null;
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
   
	 -- to warehousebinid
		SET @towarehouseid = null;
        SELECT warehouseid INTO @towarehouseid FROM layershed LS
        WHERE LS.id = p_layershedid;
        
        -- from warehouseid
        SET @fromwarehouseid = null;
        SELECT towarehouseid INTO @fromwarehouseid FROM grpo
        WHERE id = (SELECT grpono FROM layerbatchplacement WHERE id = p_layerbatchplacementid);
        
		CALL spc_materialtransfer_save(
			NULL, 505, 505, 582, now(), now(),NULL,
			@fromwarehouseid, NULL, 624, 
            (SELECT layerbatchid FROM layerbatchplacement WHERE id = p_layerbatchplacementid),
            (SELECT layerbatchid FROM layerbatchplacement WHERE id = p_layerbatchplacementid),
            NULL, p_companyid, p_userid, @out_transferid
		);
        

    
    -- Do material transfer from cold room default bin(default hatchery warehouse) to particular setter warehouse
		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, @out_transferid, @towarehouseid, (SELECT warehousebinid FROM layershed WHERE id = p_layershedid), 
            p_itemid, (SELECT itemname FROM item WHERE id = p_itemid),
			p_placedquantity, p_placedquantity, 
			(SELECT refname FROM `reference` WHERE id = p_itemid),
			(SELECT layerbatchid FROM layerbatchplacement WHERE id = p_layerbatchplacementid),
            p_userid, p_companyid, @out_transferdetailid
		);
    
		INSERT INTO layerbatchplacementdetail (
				id,
				layerbatchplacementid,
				layertypeid,
				layershedid,
				layershedlineid,
                itemid,
				quantity,
                placementscheduledetailid,
				companyid)
                
			VALUES (
				p_id,
                p_layerbatchplacementid,
                762,
                p_layershedid,
                p_layershedlineid,
                p_itemid,
                p_placedquantity,
                p_placementscheduledetailid,
                p_companyid);
                

    
        SET @action = 'INSERT';

	ELSE
    
		
			UPDATE layerbatchplacementdetail
				SET layerbatchplacementid = p_layerbatchplacementid, 
					layertypeid = 762,
					layershedid = p_layershedid,
					layershedlineid = p_layershedlineid,
                    itemid = p_itemid,
					quantity = p_placedquantity,
                    placementscheduledetailid = p_placementscheduledetailid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				SET @action = 'UPDATE'; 
		 
		
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- change the status of layer shed as 924 = 'batch satrted'
    UPDATE layershed SET statusid = 924 WHERE id = p_layershedid;    
    
     -- update layerbatchbalance table
  
    -- Update male and female itemid layerbatch table
  
  UPDATE layerbatch SET itemid = p_itemid
  WHERE id = (SELECT layerbatchid FROM layerbatchplacement WHERE id = p_layerbatchplacementid);

  
	SET @out_balanceid1 = NULL;
	CALL spc_layerbatchbalance_save(
		NULL, (SELECT placementdate FROM layerbatchplacement WHERE id = p_layerbatchplacementid),
        (SELECT layerbatchid FROM layerbatchplacement WHERE id = p_layerbatchplacementid),
		p_layershedid, p_layershedlineid,  p_itemid, p_placedquantity, 'placement', p_companyid, 
		p_userid, @out_balanceid1
	);
  

	-- record log
   CALL spc_commonlog_save(p_companyid, 'layerbatchplacementdetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layerbatchplacementdetail_search`(
 IN p_layerbatchplacementid INT
)
BEGIN
    
    SELECT
			LBPD.id,
			LBPD.layerbatchplacementid,
			LBPD.layertypeid,
			LBPD.layershedid,
            LS.shedname,
			LBPD.layershedlineid,
            LSL.linename,
            LBPD.itemid,
			LBPD.quantity as placedquantity,
			LBPD.companyid,
            LBPD.placementscheduledetailid,
            LSL.capacity as linecapacity
         
    FROM
		layerbatchplacementdetail LBPD
        LEFT JOIN layershed LS ON LS.id = LBPD.layershedid
        LEFT JOIN layershedline LSL ON LSL.id = LBPD.layershedlineid
   	
	WHERE
		LBPD.layerbatchplacementid = p_layerbatchplacementid;
END;



CREATE PROCEDURE `spc_layerbatchplacementshed_bylayerbatchid`(
	IN p_layerbatchid INT
)
BEGIN

SELECT transferid, fromlocationid, placementdate, fromlocationname, layershedid,shedname, phasestatusid, warehouseid, warehousebinid

FROM (
SELECT 
		   LBP.id as transferid,
           LBP.locationid as fromlocationid,
           DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as placementdate,
           L.locationname as fromlocationname,
           LBPD.layershedid,
		   LS.shedname,
           LS.warehouseid,
           LS.warehousebinid,
           LBP.phasestatusid
           
			FROM layerbatchplacement LBP
			LEFT JOIN location L ON L.id = LBP.locationid
    LEFT JOIN layerbatchplacementdetail LBPD ON LBP.id = LBPD.layerbatchplacementid
    LEFT JOIN layershed LS ON LS.id = LBPD.layershedid
    
    WHERE LBP.layerbatchid = p_layerbatchid
    AND LS.statusid = 924
    
    -- GROUP BY BBPD.breedershedid
            
            
  UNION ALL
  
   SELECT
			 LBT.id as transferid,
			 LBT.tolocationid as fromlocationid,
			 DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as placementdate,
			 L.locationname as fromlocationname,
             LBTD.toshedid as layershedid,
             LS.shedname,
             LS.warehouseid,
			 LS.warehousebinid,
             LBT.phasestatusid
            
	FROM layerbatchtransfer LBT
     LEFT JOIN location L ON L.id = LBT.tolocationid
     LEFT JOIN layerbatchtransferdetail LBTD ON LBT.id = LBTD.layerbatchtransferid
     LEFT JOIN layershed LS ON LS.id = LBTD.toshedid
     LEFT JOIN layerbatchplacement LBP ON LBP.layerbatchid = LBT.layerbatchid
    
    WHERE LBT.layerbatchid = p_layerbatchid
    AND LS.statusid = 924
    
   --  GROUP BY BBTD.toshedid
       
      ) as temp
      
      GROUP BY layershedid;
       
END;



CREATE PROCEDURE `spc_layerbatchplacement_delete`(	IN p_id INT
)
BEGIN
	DELETE FROM layerbatchplacementdetail WHERE layerbatchplacementid = p_id;
	DELETE FROM layerbatchplacement WHERE id = p_id;
END;



CREATE PROCEDURE `spc_layerbatchplacement_save`(
    IN p_id INT,
    IN p_locationid INT(11),
    IN p_layerbatchid INT(11),
    IN p_placementscheduleid INT(11),
    IN p_firstdaydate DATE,
    IN p_grpono INT(11),
    IN p_placementdate DATE,
    IN p_phasestatusid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerbatchplacement (
				id, 
                locationid,
                layerbatchid,
                placementscheduleid,
                firstdaydate,
                grpono,
                placementdate,
               -- ageinweek,
                phasestatusid,
                companyid)
			
            VALUES (
				p_id,
                p_locationid,
                p_layerbatchid,
                p_placementscheduleid,
                p_firstdaydate,
                p_grpono,
                p_placementdate,
               -- p_ageinweek,
                p_phasestatusid,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE layerbatchplacement
			SET locationid = p_locationid, 
				layerbatchid = p_layerbatchid,
                placementscheduleid = p_placementscheduleid,
                firstdaydate = p_firstdaydate,
                grpono = p_grpono,
                placementdate = p_placementdate,
               -- ageinweek = p_ageinweek,
                phasestatusid = p_phasestatusid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- change the status of layerplacementschedule shed as 1045 = 'processed'
    UPDATE layerplacementschedule SET statusid = 1045 WHERE id = p_placementscheduleid;
    

    UPDATE layerbatch SET statusid = 982 WHERE id = p_layerbatchid;
    
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'layerbatchplacement', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layerbatchplacement_search`(
 IN p_companyid INT
)
BEGIN
    
    SELECT
			LBP.id, 
			LBP.locationid,
            L.locationname,
			LBP.layerbatchid,
            LB.batchname,
			DATE_FORMAT(LBP.firstdaydate,'%d/%m/%Y') as firstdaydate,
			LBP.grpono,
			DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as placementdate,
			-- BBP.ageinweek,
			LBP.phasestatusid,
            LP.phasename as phasestatus,
			LBP.companyid,
            LBP.placementscheduleid
            
         
	FROM
		layerbatchplacement LBP
        LEFT JOIN layerphase LP ON LBP.phasestatusid = LP.id
        LEFT JOIN location L ON LBP.locationid = L.id
        LEFT JOIN layerbatch LB ON LBP.layerbatchid = LB.id
   	
	WHERE
		LBP.companyid = p_companyid
        
	ORDER BY LBP.id DESC;
END;



CREATE PROCEDURE `spc_layerbatchplacement_select`(IN p_id INT
)
BEGIN

	SELECT
			LBP.id, 
			LBP.locationid,
            L.locationname,
			LBP.layerbatchid,
			LB.batchname,
			DATE_FORMAT(LBP.firstdaydate,'%d/%m/%Y') as firstdaydate,
			LBP.grpono,
			DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as placementdate,
			-- BBP.ageinweek,
			LBP.phasestatusid,
            R.refname,
			LBP.companyid,
            LBP.placementscheduleid
            
         
	FROM
		layerbatchplacement LBP
        LEFT JOIN `reference` R ON LBP.phasestatusid = R.id
        LEFT JOIN location L ON LBP.locationid = L.id
        LEFT JOIN layerbatch LB ON LBP.breederbatchid =  LB.id
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND LBP.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
END;



CREATE PROCEDURE `spc_layerbatchtransferdetails_bylayerbatchtransferid`(
    IN p_shedid INT(11),
    IN p_layerbatchid INT
)
BEGIN

	SET @shedqty = 0;
	SET @transferedqty = 0;
    SET @flag1 = NULL;
    
    SELECT SUM(quantity) INTO @shedqty FROM layerbatchtransferdetail WHERE toshedid = p_shedid;

	
	SELECT
		LBB.id,
		LBB.layershedid,
		LS.shedname,
		LBB.layershedlineid,
		LSL.linename,
		LBB.itemid,
		LBB.quantity,
		@shedqty AS totalshedqty
   
	FROM
		layerbatchbalance LBB
		LEFT JOIN layershed LS ON LS.id = LBB.layershedid
		LEFT JOIN layershedline LSL ON LSL.id = LBB.layershedlineid
	
	WHERE
		LBB.layerbatchid = p_layerbatchid
		 AND  LBB.layershedid = p_shedid 
         AND LBB.quantity != 0;

END;



CREATE PROCEDURE `spc_layerbatchtransferdetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM layerbatchtransferdetail WHERE id = p_id;
END;



CREATE PROCEDURE `spc_layerbatchtransferdetail_save`(
    IN p_id INT,
    IN p_layerbatchtransferid INT(11),
    IN p_toshedid INT(11),
    IN p_fromlineid INT(11),
    IN p_tolineid INT(11),
    IN p_itemid INT(11),
	IN p_quantity INT,
    IN p_companyid INT,
    In p_userid INT,
    IN p_transferid INT,
    IN p_layerbatchid INT,
    IN p_fromshedid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
     -- to warehousebinid
		SET @towarehouseid = null;
        SELECT warehouseid INTO @towarehouseid FROM layershed
        WHERE id = p_toshedid;
        
        -- from warehouseid
        SET @fromwarehouseid = null;
        SELECT warehouseid INTO @fromwarehouseid FROM layershed
        WHERE id = (SELECT fromshedid FROM layerbatchtransfer WHERE id = p_layerbatchtransferid);
	
    IF(p_quantity > 0)THEN
        
		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, p_transferid,
            (SELECT warehouseid FROM layershed WHERE id = p_toshedid), 
            (SELECT warehousebinid FROM layershed WHERE id = p_toshedid),
            p_itemid, (SELECT itemname FROM item WHERE id = p_itemid),
			p_quantity, p_quantity, 
			(SELECT refname FROM `reference` WHERE id = p_itemid),
			(SELECT layerbatchid FROM layerbatchtransfer WHERE id = p_layerbatchtransferid),
            p_userid, p_companyid, @out_transferdetailid
		);
    
		INSERT INTO layerbatchtransferdetail (
				id,
				layerbatchtransferid,
                toshedid,
				fromlineid,
                tolineid,
                itemid,
				quantity,
				companyid)
                
			VALUES (
				p_id,
                p_layerbatchtransferid,
                p_toshedid,
                p_fromlineid,
                p_tolineid,
                p_itemid,
                p_quantity,
                p_companyid);
        
        -- update layerbatchbalance table to reflect live batch quantity
		UPDATE layerbatchbalance
        SET 
			updateddate = now(),
            quantity = (quantity - p_quantity)
		WHERE
			layerbatchid = p_layerbatchid AND
            layershedid = p_fromshedid AND
            layershedlineid = p_fromlineid AND
            itemid = p_itemid AND
            quantity != 0;
                
	END IF;
    ELSE
		IF(p_quantity > 0) THEN
			UPDATE layerbatchtransferdetail
				SET
					layerbatchtransferid = p_layerbatchtransferid,
                    toshedid = p_toshedid,
					fromlineid = p_fromlineid,
					tolineid = p_tolineid,
					itemid = p_itemid,
					quantity = p_quantity,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				SET @action = 'UPDATE'; 
                
		-- update layerbatchbalance table to reflect live batch quantity
		UPDATE layerbatchbalance
        SET 
			updateddate = now(),
            quantity = (quantity - p_quantity)
		WHERE
			layerbatchid = p_layerbatchid AND
            layershedid = p_fromshedid AND
            layershedlineid = p_fromlineid AND
            itemid = p_itemid AND
			quantity != 0;
            
		END IF;
        
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
 
	-- update toshed status as 924 = 'Batch Started'
    UPDATE layershed SET statusid = 924 WHERE id = p_toshedid;
  
   IF (p_quantity > 0) THEN
	  SET @out_balanceid = NULL;
	  CALL spc_layerbatchbalance_save(
		NULL, (SELECT transferdate FROM layerbatchtransfer WHERE id = p_layerbatchtransferid),
        p_layerbatchid, p_toshedid, p_tolineid, p_itemid,
		 p_quantity,'transfer', p_companyid, 
		p_userid, @out_balanceid
	  );
      
	END IF; 
 
    
  

   
   SET @qty = 0;
   SET @transferqty = 0;
   select SUM(quantity) INTO @qty
    FROM layerbatchbalance
    WHERE 
    layershedid = (SELECT fromshedid FROM layerbatchtransfer WHERE id = p_layerbatchtransferid);
    
    
    
    
    IF(@qty = 0) THEN
		UPDATE layershed SET statusid = 921 WHERE id = (SELECT fromshedid FROM layerbatchtransfer WHERE id = p_layerbatchtransferid);
    END IF;

	-- record log
   CALL spc_commonlog_save(p_companyid, 'layerbatchtransferdetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layerbatchtransferdetail_search`(
    IN p_layerbatchtransferid INT
)
BEGIN
    
    SELECT
			LBTD.id,
			LBTD.layerbatchtransferid,
			LBT.fromshedid,
            LBTD.toshedid,
            LS2.shedname as toshedname,
			LBTD.fromlineid,
            LBTD.tolineid,
            LSL1.linename,
            LSL2.linename as tolinename,
            LBTD.itemid,
			LBTD.quantity,
			LBTD.companyid
         
    FROM
		layerbatchtransferdetail LBTD
        LEFT JOIN layerbatchtransfer LBT ON LBT.id = LBTD.layerbatchtransferid
        LEFT JOIN layershedline LSL1 ON LSL1.id = LBTD.fromlineid
        LEFT JOIN layershedline LSL2 ON LSL2.id = LBTD.tolineid
     --   LEFT JOIN breedershed BS1 ON BS1.id = BBTD.fromshedid
        LEFT JOIN layershed LS2 ON LS2.id = LBTD.toshedid
   	
	WHERE
		LBTD.layerbatchtransferid = p_layerbatchtransferid;
END;



CREATE PROCEDURE `spc_layerbatchtransferdetail_select`(
    IN p_id INT
)
BEGIN
    
    SELECT
			LBTD.id,
			LBTD.layerbatchtransferid,
			LBTD.fromshedid,
            LS1.shedname,
			LBTD.fromlineid,
            LBTD.tolineid,
            LSL1.linename,
            LSL2.linename,
            LBTD.itemid,
			LBTD.quantity,
			LBTD.companyid
         
    FROM
		layerbatchtransferdetail LBTD
        LEFT JOIN layershed LS1 ON LS1.id = LBTD.fromshedid
        LEFT JOIN layershedline LSL1 ON LSL1.id = LBTD.fromlineid
        LEFT JOIN layershedline LSL2 ON LSL2.id = LBTD.tolineid
   	
	WHERE
		LBTD.id = p_id;
END;



CREATE PROCEDURE `spc_layerbatchtransfer_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM layerbatchtransferdetail WHERE layerbatchtransferid = p_id;
	DELETE FROM layerbatchtransfer WHERE id = p_id;
END;



CREATE PROCEDURE `spc_layerbatchtransfer_save`(
    IN p_id INT(11),
    IN p_fromlocationid INT(11),
    IN p_tolocationid INT(11),
    IN p_fromshedid INT(11),
	IN p_transferdate DATE,
    IN p_layerbatchid INT(11),
    IN p_phasestatusid INT(11),
    IN p_isshedtransfer TINYINT,
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT,
    OUT out_transferid INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		
		CALL spc_materialtransfer_save(
			NULL, 505, 505, 582, now(), now(),NULL,
			(SELECT warehouseid FROM layershed WHERE id = p_fromshedid), NULL, 624, 
            p_layerbatchid, p_layerbatchid, 
            NULL, p_companyid, p_userid, out_transferid
		);
        
        
		INSERT INTO layerbatchtransfer (
				id, 
                fromlocationid,
                tolocationid,
                fromshedid,
                transferdate,
                layerbatchid,
                phasestatusid,
                isshedtransfer,
                companyid)
			
            VALUES (
				p_id, 
                p_fromlocationid,
                p_tolocationid,
                p_fromshedid,
                p_transferdate,
                p_layerbatchid,
                p_phasestatusid,
                p_isshedtransfer,
                p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE layerbatchtransfer
			SET 
                fromlocationid = p_fromlocationid,
                tolocationid = p_tolocationid,
                fromshedid = p_fromshedid,
                transferdate = p_transferdate,
                layerbatchid = p_layerbatchid,
                phasestatusid = p_phasestatusid,
                isshedtransfer = p_isshedtransfer,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    
    SELECT LAST_INSERT_ID(), out_transferid INTO out_id, out_transferid;
    
    
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'layerbatchtransfer', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layerbatchtransfer_search`(

    IN p_companyid INT
)
BEGIN
    
    SELECT         
            LBT.id, 
			LBT.fromlocationid,
            L1.locationname as fromlocationname,
			LBT.tolocationid,
            L2.locationname as tolocationname,
			DATE_FORMAT(LBT.transferdate,'%d/%m/%Y') as transferdate,
			LBT.layerbatchid,
            LB.batchname,
			LBT.phasestatusid,
			LBT.isshedtransfer,
			LBT.companyid,
            LBT.fromshedid,
            LS.shedname as fromshedname,
            LBT.isshedtransfer
            
         
	FROM
		layerbatchtransfer LBT
        LEFT JOIN layerbatch LB ON LB.id = LBT.layerbatchid
        LEFT JOIN layershed LS ON LS.id = LBT.fromshedid
        LEFT JOIN location L1 ON L1.id = LBT.fromlocationid
        LEFT JOIN location L2 ON L2.id = LBT.fromlocationid
   	
	WHERE
		LBT.companyid = p_companyid
        
	ORDER BY LBT.id DESC;
END;



CREATE PROCEDURE `spc_layerbatchtransfer_select`(
    IN p_id INT
)
BEGIN
    
    SELECT         
            LBT.id, 
			LBT.fromlocationid,
			LBT.tolocationid,
            LBT.fromshedid,
            LBT.toshedid,
            LS1.shedname,
            LS2.shedname,
			DATE_FORMAT(LBT.transferdate,'%d/%m/%Y') as transferdate,
			LBT.layerbatchid,
			LBT.phasestatusid,
			LBT.isshedtransfer,
			LBT.companyid
            
         
	FROM
		layerbatchtransfer LBT
        LEFT JOIN layershed LS1 ON LS1.id = LBT.fromshedid
        LEFT JOIN layershed LS2 ON LS2.id = LBT.toshedid
   	
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND LBT.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
END;



CREATE PROCEDURE `spc_layerbatch_bylocation`(
    IN p_companyid INT(11),
	IN p_locationid INT(11)
    
)
BEGIN

SET @fromwarehouseid = null;
SET @fromwarehousename = null;


	SELECT LS.defaultwarehouseid, W1.warehousename 
    INTO 
    @fromwarehouseid, @fromwarehousename
    FROM layersetting LS
    LEFT JOIN warehouse W1 ON W1.id = LS.defaultwarehouseid
    WHERE LS.companyid = p_companyid;
    
    

	SELECT LB.id,
		   LB.batchname,
           LB.locationid,
           L.locationname,
           LB.statusid,
           LP.phasename as batchstatus,
           LB.warehouseid,
           W.warehousename,
           @fromwarehouseid as fromwarehouseid,
		   @fromwarehousename as fromwarehousename,
           LBP.placementdate
           
	FROM layerbatch LB
    LEFT JOIN location L ON L.id = LB.locationid
    LEFT JOIN layerphase LP ON LP.id = LB.statusid
    LEFT JOIN warehouse W ON W.id = LB.warehouseid
    LEFT JOIN layerbatchplacement LBP ON LB.id = LBP.layerbatchid
    
    WHERE LB.locationid = p_locationid
    AND LB.companyid = p_companyid
    GROUP BY LB.id
    ORDER BY LB.id DESC;
    
END;



CREATE PROCEDURE `spc_layerbatch_bystatusid`( 
    IN p_companyid INT,
    IN p_statusid INT
)
BEGIN
    
    SELECT
		LB.id,
        LB.locationid,
        L.locationcode,
        L.locationname,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        DATE_FORMAT(LP.placementdate,'%d/%m/%Y') as batchplacementdate,
        WB.bincode,
        WB.binname,
        LB.statusid,
        REF.refname as batchstatus
	
    FROM
		layerbatch LB
	
    LEFT JOIN location L ON LB.locationid = L.id
    LEFT JOIN warehouse W ON LB.warehouseid = W.id
    LEFT JOIN warehousebin WB on LB.binid = WB.id
    LEFT JOIN layerbatchplacement LP on LB.id = LP.layerbatchid
    INNER JOIN `reference` REF ON REF.id = LB.statusid
	
	WHERE
		LB.companyid = p_companyid AND
        LB.statusid = p_statusid
        
    GROUP BY LB.id
    ORDER BY LB.id DESC;
	END;



CREATE PROCEDURE `spc_layerbatch_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM layerbatch WHERE id = p_id;
END;



CREATE PROCEDURE `spc_layerbatch_foramortization`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		LB.id,
        L.locationcode,
        L.locationname,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        WB.bincode,
        WB.binname,
        LB.statusid,
        REF.refname as batchstatus,
        DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as placementdate
	
    FROM
		layerbatch LB
	
    LEFT JOIN location L ON LB.locationid = L.id
    LEFT JOIN warehouse W ON LB.warehouseid = W.id
    LEFT JOIN warehousebin WB on LB.binid = WB.id
    LEFT JOIN `reference` REF ON REF.id = LB.statusid
    INNER JOIN layerbatchplacement LBP ON LB.id = LBP.layerbatchid
	LEFT JOIN layeramortization LA ON LB.id = LA.layerbatchid
	
	WHERE
		LB.companyid = p_companyid
         AND LA.id is null 
		AND LB.statusid = 982
		-- AND CAST(BBP.placementdate AS DATE) >= CAST(DATE_ADD(now(), INTERVAL 168 DAY) AS DATE);
        
	ORDER BY LB.id DESC;

END;



CREATE PROCEDURE `spc_layerbatch_forbatchdetail`(
	IN p_companyid INT(11),
	IN p_layerbatchid INT(11)
)
BEGIN
     SET @femaleitemid = NULL;
     SET @femaleitemname = NULL;
	 SET @femalebirdquantity = 0;
     SET @eggscollectionquantity = 0;
     SET @tableeggquantity = 0;
     SET @placementdate = NULL;
     SET @phaseid = NULL;
     SET @batchstatusid = NULL;
     SET @batchname = NULL;
    
		SELECT 
			LB.itemid, I.itemname
			INTO 
             @femaleitemid, @femaleitemname
		FROM 
			layerbatch LB 
            INNER JOIN item I ON I.id = LB.itemid
		where LB.id = p_layerbatchid
            
		LIMIT 1;
    
     SELECT 
			
			CASE WHEN itemid = @femaleitemid THEN @femalebirdquantity:= quantity ELSE NULL END as femalebirdquantity    
			
        FROM (
				select LBPD.itemid,
                SUM(LBPD.quantity) as quantity
                
				FROM layerbatch LB
					INNER JOIN `reference` REF1 ON REF1.id = LB.statusid
					INNER JOIN layerbatchplacement LBP ON LBP.layerbatchid = LB.id
					INNER JOIN layerbatchplacementdetail LBPD ON LBPD.layerbatchplacementid = LBP.id 
				WHERE LB.id = p_layerbatchid AND LB.companyid = p_companyid
				group by LBPD.itemid 
        ) AS TEMP;
    
		SELECT  @placementdate := DATE_FORMAT(placementdate,'%d/%m/%Y') as placementdate,
				@firstdaydate := DATE_FORMAT(firstdaydate,'%d/%m/%Y') as firstdaydate,
                @phaseid := LBP.phasestatusid,
                @batchstatusid := LB.statusid,
                @batchname := LB.batchname
                
		FROM layerbatchplacement LBP
        INNER JOIN layerbatch LB ON LB.id = LBP.layerbatchid
        
        
        WHERE layerbatchid = p_layerbatchid;
		
		select sum(LECD.quantity) INTO @eggscollectionquantity from layereggscollection LEC 
		LEFT JOIN layereggscollectiondetail LECD ON LECD.eggscollectionid = LEC.id
        WHERE layerbatchid= p_layerbatchid;
        
        SELECT SUM(LEDD.quantity) INTO @tableeggquantity from layereggsdistributiondetail LEDD
        WHERE layerbatchid= p_layerbatchid AND LEDD.itemtypeid = 1129;
        
        select
			 
			   @femaleitemid as femaleitemid, 
               @femaleitemname as femaleitemname ,
               @femalebirdquantity as femalequantity,
               @eggscollectionquantity as eggscollectionquantity, 
               @tableeggquantity as tableeggquantity,
               @placementdate as placementdate,
               @firstdaydate as firstdaydate,
               @batchstatusid as batchstatusid,
               @batchname as batchname,
			   @phaseid as phaseid;
          
	
END;



CREATE PROCEDURE `spc_layerbatch_inprogresslocationwise`(
	IN p_locationid INT,
    IN p_companyid INT
)
BEGIN

	SELECT
		LB.id,
        L.locationname,
        W.warehousename,
        batchname,
        R.refname as `status`,
        LBP.placementdate,
         DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as formattedplacementdate,
        LP.phasename as phasestatusname,
        DATE_FORMAT(DATE_ADD((SELECT transactiondate FROM layerdailytransaction WHERE layerbatchid = LB.id ORDER BY transactiondate DESC LIMIT 1), INTERVAL 1 DAY),'%d/%m/%Y') AS lasttransactiondate
	
    FROM
		layerbatch LB
	
    LEFT JOIN location L ON LB.locationid = L.id
    LEFT JOIN warehouse W ON LB.warehouseid = W.id
    LEFT JOIN `reference` R ON LB.statusid = R.id
    LEFT JOIN layerbatchplacement LBP ON LB.id = LBP.layerbatchid
	LEFT JOIN layerphase LP ON LBP.phasestatusid = LP.id
	
	WHERE
		LB.companyid = p_companyid
        AND LB.statusid = 982
        AND LB.locationid = p_locationid
        group by LB.id
        ORDER BY LB.id DESC;

END;



CREATE PROCEDURE `spc_layerbatch_save`(
	IN p_id INT,
    IN p_locationid VARCHAR(100),
    IN p_warehouseid INT,
    IN p_batchname VARCHAR(200),
    IN p_binid INT,
    IN p_statusid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerbatch 
				(locationid, warehouseid, batchname, statusid, binid, companyid)
			VALUES 
				( p_locationid, p_warehouseid, p_batchname, p_statusid, p_binid, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE layerbatch
				SET locationid = p_locationid, 
                warehouseid = p_warehouseid,
                batchname = p_batchname, 
                statusid = p_statusid,
                binid = p_binid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layerbatch', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_layerbatch_search`(
  IN p_companyid INT
)
BEGIN
    
    SELECT
		LB.id,
		LB.locationid,
        L.locationcode,
        L.locationname,
        LB.warehouseid,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        WB.bincode,
        WB.binname,
        LB.statusid,
        REF.refname as batchstatus
	
    FROM
		layerbatch LB
	
    LEFT JOIN location L ON LB.locationid = L.id
    LEFT JOIN warehouse W ON LB.warehouseid = W.id
    LEFT JOIN warehousebin WB on LB.binid = WB.id
     LEFT JOIN `reference` REF ON REF.id = LB.statusid
	
	WHERE
		LB.companyid = p_companyid;
      

END;



CREATE PROCEDURE `spc_layerbatch_select`(
  IN p_id INT
)
BEGIN
    
    SELECT
		LB.id,
		LB.locationid,
        L.locationcode,
        L.locationname,
        LB.warehouseid,
        W.warehousecode,
        W.warehousename,
        batchname,
        binid,
        WB.bincode,
        WB.binname,
        LB.statusid
	
    FROM
		layerbatch LB
	
    LEFT JOIN location L ON LB.locationid = L.id
    LEFT JOIN warehouse W ON LB.warehouseid = W.id
    LEFT JOIN warehousebin WB on LB.binid = WB.id
	
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND LB.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
      

END;



CREATE PROCEDURE `spc_layerchicksmortality_bygrpo`(
	IN p_companyid INT,
    IN p_grpono INT
)
BEGIN
	 SELECT  LCM.id,
	         LCM.culls,
             LCM.mortality,
             LCM.shortage,
             LCM.grpono,
             LCM.freeqty,
            -- GD.quantity,
            (SELECT SUM(quantity) from grpodetail where grpoid = p_grpono ) as quantity,
             LCM.itemid
            
	 FROM layerchicksmortality LCM
   --  LEFT JOIN grpodetail GD ON GD.grpoid = CM.grpono
    
     WHERE LCM.companyid = p_companyid
	  AND LCM.grpono = p_grpono;
		
END;



CREATE PROCEDURE `spc_layerchicksmortality_save`(
	IN p_id INT,
    IN p_grpono INT(11),
    IN p_itemid INT(11),
    IN p_culls INT(11),
    IN p_mortality INT(11),
    IN p_shortage INT(11),
    IN p_freeqty INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerchicksmortality 
				(grpono, itemid, culls, mortality, shortage, freeqty, companyid)
			VALUES 
				(p_grpono, p_itemid, p_culls, p_mortality, p_shortage, p_freeqty, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE layerchicksmortality
				SET grpono = p_grpono, 
                itemid = p_itemid,
                culls = p_culls,
                mortality = p_mortality, 
                shortage = p_shortage,
                freeqty = p_freeqty,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layerchicksmortality', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_layerconsumptionissue_save`(
	IN p_id INT,
	IN p_itemid INT,
    IN p_consumptionid INT,
    IN p_issuedetailid INT,
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerconsumptionissue
				(itemid, 
				 consumptionid, 
                 issuedetailid)
			VALUES 
				(p_itemid, 
                 p_consumptionid, 
                 p_issuedetailid);
      
    ELSE
    
		UPDATE  layerconsumptionissue
				SET itemid = p_itemid, 
                consumptionid = p_consumptionid,
                issuedetailid = p_issuedetailid, 
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id;
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
   
END;



CREATE PROCEDURE `spc_layerdailybrodGrowReport_search`(
 IN p_layerbatchid INT,
 IN p_shedids varchar(300), 
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_companyid INT)
BEGIN

	SET @defaultfemalechickid = null;
	SET @openingbalance = NULL;
	SET @mortality = NULL;
    SET @culls = NULL;
    SET@sexingerrorquantity = NULL;
    SET @bodyweightfemaleact = NULL;
    SET @itemgroupid = NUll;
	SET @bodyweightfemalestd = null;
    SET @placementdate = NOW();
    
    SELECT  
		itemid
		INTO @defaultfemalechickid
	FROM
		layerbatch
        
        WHERE 
            id = p_layerbatchid AND
			companyid = p_companyid limit 1;


     SELECT  
		 femalestandardweight
	FROM
		layersetting
        WHERE 
			companyid = p_companyid limit 1;


		SELECT
				LDT.layerbatchid, 
				LDT.shedid, 
                LDM.shedlineid,
                LS.shedname,
				DATE_FORMAT(LDT.transactiondate, '%d/%m/%Y') as transactiondate,
				LDM.itemid,
                CASE WHEN LDM.itemid = @defaultfemalechickid THEN  IFNULL(fnc_layerbatchwise_malefemaleopbalance(p_layerbatchid, LDT.shedid, LDM.itemid ,LDT.transactiondate), 0) ELSE 0 END as femaleclosingbalance,
				CASE WHEN LDM.itemid = @defaultfemalechickid THEN LDM.todaymortality ELSE 0 END as femalemortality,
				CASE WHEN LDM.itemid = @defaultfemalechickid THEN LDM.todayculls ELSE 0 END as femaleculls,
                CASE WHEN LDM.itemid = @defaultfemalechickid THEN LDM.sexingerrorquantity ELSE 0 END as sexingerrorquantity,
				CASE WHEN LDM.itemid = @defaultfemalechickid THEN LDM.avgweight ELSE 0 END as femaleactualweight,
                fnc_calculate_layer_received_feed(LDT.shedid,LDC.itemid,LDT.transactiondate, p_companyid) as receivedfeed,
				fnc_calculate_layer_transfered_feed(LDT.shedid,LDC.itemid,LDT.transactiondate, p_companyid) as transferedfeed,
                fnc_calculate_layerfemale_feedconsumption(LDT.id) as femalefeedconsumption,
				fnc_layerfeedopeningbalance(LDT.transactiondate,LDT.shedid,LDC.itemid ,p_companyid) as totalreceivedfeed,
				CASE WHEN LDM.itemid = @defaultfemalechickid THEN  IFNULL(fnc_lyr_cummulative_femalemortality(p_layerbatchid, LDT.shedid, @defaultfemalechickid ,LDT.transactiondate), 0) ELSE 0 END as cumulativefemalemortality,
                CASE WHEN LDM.itemid = @defaultfemalechickid THEN  IFNULL(fnc_lyr_cummulative_femaleculls(p_layerbatchid, LDT.shedid, @defaultfemalechickid ,LDT.transactiondate), 0) ELSE 0 END as cumulativefemaleculls,
				CASE WHEN LDM.itemid = @defaultfemalechickid THEN  IFNULL(fnc_lyr_cummulative_femalesexingerror(p_layerbatchid, LDT.shedid, @defaultfemalechickid ,LDT.transactiondate), 0) ELSE 0 END as cumusexingerrorquantity,
                 CASE WHEN LDM.itemid = @defaultfemalechickid THEN  IFNULL(fnc_lyr_batchopningbalance(p_layerbatchid, LDT.shedid, @defaultfemalechickid), 0) ELSE 0 END as batchfemaleopningbal,
                 fnc_lyr_cummulativefeed(p_layerbatchid, LDC.itemid,LDT.shedid,LDT.transactiondate,p_companyid ) as cummulativefeedconsumption
                
	    FROM layerdailytransaction LDT
        LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id
		LEFT JOIN layerdailyconsumption LDC ON LDC.layerdailytransactionid = LDT.id AND LDC.consumptiontypeid = 1149
		LEFT JOIN layershed LS ON LDT.shedid = LS.id
        WHERE
				LDT.layerbatchid = p_layerbatchid
                AND FIND_IN_SET(LDT.shedid, p_shedids)
				AND LDT.transactiondate between p_fromdate AND p_todate
                order by LDT.layerbatchid, LDT.shedid, LDM.itemid;
    
    END;



CREATE PROCEDURE `spc_layerdailyconsumption_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DELETE FROM layerdailyconsumption WHERE id = p_id;
    
	-- record log
	CALL spc_commonlog_save(p_companyid, 'layerdailyconsumption', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_layerdailyconsumption_layerbatchwise`(
	IN p_companyid INT,
    IN p_layerbatchid INT
)
BEGIN
 
    SELECT
        LDC.id,
        LDC.layerdailytransactionid,
        LDC.consumptiontypeid,
        LDC.itemid,
        I.itemname,
        LDC.layertypeid,
        LDC.shedlineid,
        LDC.quantity,
        LB.locationid,
        L.locationname,
        L.locationcode
     
    FROM
		layerdailyconsumption LDC
	LEFT JOIN layerdailytransaction LDT ON LDC.layerdailytransactionid = LDT.id
    INNER JOIN item I ON I.id = LDC.itemid
    INNER JOIN layerbatch LB ON LB.id = p_layerbatchid
    INNER JOIN location L ON L.id = LB.locationid
    
	WHERE
		LDC.companyid = p_companyid
        AND LDT.layerbatchid = p_layerbatchid;
END;



CREATE PROCEDURE `spc_layerdailyconsumption_report`(
 IN p_batchid INT,
 IN p_fromdate Date,
 IN p_todate Date,
 IN p_companyid INT)
BEGIN

	SET @batchwarehouseid = null;
 
	SELECT 
		warehouseid INTO @batchwarehouseid
	FROM
		layerbatch 
	WHERE
		id = p_batchid;
        
	SELECT 
		LC.itemid,
		IG.id as itemgroupid,
		IG.groupname,
		I.itemname,
		 DATE_FORMAT(LDT.transactiondate,'%d/%m/%Y')  as `date`,
		fnc_calculate_itemopeningbalance_tillgivendate(LC.itemid, @batchwarehouseid, LDT.transactiondate, p_companyid) as openingbalance,
		fnc_calculate_receivedfeedquantity_ongivendate(LC.itemid, @batchwarehouseid, LDT.transactiondate, p_companyid) as receivedquantity,
		fnc_calculate_outfeedquantity_ongivendate(LC.itemid, @batchwarehouseid, LDT.transactiondate, p_companyid) as outquantity,
		LC.consumptionquantity as consumedquantity,
        fnc_calculate_layercumconsumedquantity(p_batchid, LC.itemid, LDT.transactiondate, p_companyid) as cumconsumedquantity
        
	FROM layerdailyconsumption LC
		 LEFT JOIN layerdailytransaction LDT ON LC.layerdailytransactionid = LDT.id
         LEFT JOIN item I ON I.id = LC.itemid
         LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
 
	WHERE
		LDT.layerbatchid = p_batchid AND
		LDT.transactiondate >= p_fromdate AND LDT.transactiondate <= p_todate AND
        LDT.companyid = p_companyid
    
	ORDER BY 
		-- IG.id, I.itemname, BDT.transactiondate;
         LDT.transactiondate;
        
END;



CREATE PROCEDURE `spc_layerdailyconsumption_save`(
	IN p_id INT,
    IN p_layerdailytransactionid INT,
    IN p_consumptiontypeid INT,
    IN p_itemid INT,
    IN p_shedlineid INT,
    IN p_standardconsumption DECIMAL(9,3),
    IN p_consumptionquantity DECIMAL(9,3),
	IN p_warehouseid INT,
	IN p_issuedetailid INT,
	IN p_isherbal INT,
    IN p_layeritemid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerdailyconsumption
				(layerdailytransactionid, 
				 consumptiontypeid, 
                 itemid,  
                 shedlineid, 
                 standardconsumption,
                 consumptionquantity, 
                 issuedetailid,
                 isherbal,
                 layeritemid,
                 companyid)
			VALUES 
				(p_layerdailytransactionid, 
                 p_consumptiontypeid, 
                 p_itemid,  
                 p_shedlineid,
                 p_standardconsumption,
                 p_consumptionquantity,
                 p_issuedetailid,
                 p_isherbal,
                 p_layeritemid,
                 p_companyid);
      
      SET @action = 'INSERT';
      
	 
    ELSE
    
		UPDATE  layerdailyconsumption
				SET consumptiontypeid = p_consumptiontypeid, 
                itemid = p_itemid, 
                shedlineid = p_shedlineid,
                standardconsumption = p_standardconsumption,
                consumptionquantity = p_consumptionquantity,
                issuedetailid = p_issuedetailid,
                isherbal = p_isherbal,
                layeritemid = p_layeritemid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   
    -- record log
    -- CALL spc_commonlog_save(p_companyid, 'layerdailyconsumption', out_id, @action, p_userid);
   
END;



CREATE PROCEDURE `spc_layerdailyconsumption_savejson`(
	  IN p_layerdailytransactionid INT,
      IN p_dailyMortality json,
	  IN p_feedConsumption json,
      IN p_medicineConsumption json,
      IN p_vaccineConsumption json,
	  IN p_vitaminConsumption json,
      IN p_otherDetails json,
      OUT out_id INT
)
BEGIN

	-- save other details 
    
    SET @i = 0;
    
    SET @p_id = CASE WHEN JSON_EXTRACT(p_otherDetails, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.id'))) AS SIGNED) end;
	SET @out_id = null;
        
	CALL spc_layerdailyotherdetails_save(
        
	     @p_id,
		 p_layerdailytransactionid,
         JSON_UNQUOTE((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.lighton')))),
         JSON_UNQUOTE((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.lightoff')))),
		 CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.duration'))) AS DECIMAL(9,3)),
		 CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.temperature'))) AS DECIMAL(9,3)),
		 CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.humidity'))) AS DECIMAL(9,3)),
		 IF(json_type(json_extract(p_otherDetails, CONCAT('$.waterconsumption'))) = 'NULL', null, CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.waterconsumption'))) AS DECIMAL(9,2))),
         CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.companyid'))) AS UNSIGNED INTEGER),
		 CAST((SELECT JSON_EXTRACT(p_otherDetails, CONCAT('$.userid'))) AS UNSIGNED INTEGER),
		 @out_id
	 );
     
    --  save daily mortality
    
	 SET @i = 0;
    
	 WHILE @i < JSON_LENGTH(p_dailyMortality) DO
    
		 SET @str = NULL;
         SELECT JSON_EXTRACT(p_dailyMortality,CONCAT('$[',@i,']')) INTO @str;
        
		 SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
		 SET @out_id = null;
        
		 CALL spc_layerdailymortality_save(
        
			 @p_id,
             p_layerdailytransactionid,
             (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.avgweight'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.todaymortality'))),
			 (SELECT JSON_EXTRACT(@str, CONCAT('$.mortalityreasonid'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.todayculls'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.cullsreasonid'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.sexingerrorquantity'))),
			 (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
		     (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			 @out_id
         );

		 SELECT @i + 1 INTO @i;
        
	  END WHILE;
    
    
    -- save daily feed consumption 
    
    SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_feedConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_feedConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_layerdailyconsumption_save(
        
			@p_id,
            p_layerdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
            if(json_type(json_extract(@str, CONCAT('$.shedlineid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            -- if(json_type(json_extract(@str, CONCAT('$.standardconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptionquantity'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
             if(json_type(json_extract(@str, CONCAT('$.layeritemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.layeritemid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    -- save daily medicine consumption
    
	SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_medicineConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_medicineConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_layerdailyconsumption_save(
        
			@p_id,
            p_layerdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
            if(json_type(json_extract(@str, CONCAT('$.shedlineid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
            if(json_type(json_extract(@str, CONCAT('$.standardconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptionquantity'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.layeritemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.layeritemid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    -- save daily vaccine consumption
    
	SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_vaccineConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_vaccineConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_layerdailyconsumption_save(
        
			@p_id,
            p_layerdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
            if(json_type(json_extract(@str, CONCAT('$.shedlineid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
            if(json_type(json_extract(@str, CONCAT('$.standardconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptionquantity'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.layeritemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.layeritemid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
    
    -- save daily vitamin comsumtion
    
     SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_vitaminConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_vitaminConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_layerdailyconsumption_save(
        
			@p_id,
            p_layerdailytransactionid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))),
            if(json_type(json_extract(@str, CONCAT('$.shedlineid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.shedlineid'))),
            if(json_type(json_extract(@str, CONCAT('$.isherbal'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
            if(json_type(json_extract(@str, CONCAT('$.standardconsumption'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.consumption'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.warehouseid'))),
            if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
            if(json_type(json_extract(@str, CONCAT('$.layeritemid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.layeritemid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
END;



CREATE PROCEDURE `spc_layerdailyconsumption_select`(
	IN p_layerdailytransactionid INT
)
BEGIN
   
   SET @warehousebinid = null;
   
   SELECT @warehousebinid:=LS.warehousebinid
   FROM layerdailytransaction LDT
   LEFT JOIN layershed LS ON LDT.shedid = LS.id
   WHERE LDT.id = p_layerdailytransactionid;
   
   -- select feed consumption
   SELECT 
			LDC.id,
            LDC.layerdailytransactionid,
            LDC.consumptiontypeid,
            LDC.itemid,
            I.itemcode,
            I.itemname,
            LDC.shedlineid,
            LSL.linename,
            LDC.isherbal,
            LDC.layeritemid,
            I1.itemname as layeritemname,
            LDC.standardconsumption,
            LDC.consumptionquantity,
            R2.refname as unitname,
            LDC.companyid,
            fnc_layerconsumptionlivestock(LDC.itemid, @warehousebinid, LDC.companyid) as instock,
            fnc_layerconsumptionlivestock(LDC.itemid, @warehousebinid, LDC.companyid) as instockforref
	
    FROM 
		layerdailyconsumption LDC
        LEFT JOIN item I On LDC.itemid = I.id
        LEFT JOIN item I1 On LDC.layeritemid = I1.id
        LEFT JOIN layershedline LSL ON LDC.shedlineid = LSL.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		layerdailytransactionid = p_layerdailytransactionid AND
        consumptiontypeid = 1149;
        
	
    -- select medicine consumption
   SELECT 
			LDC.id,
            LDC.layerdailytransactionid,
            LDC.consumptiontypeid,
            LDC.itemid,
            I.itemcode,
            I.itemname,
            LDC.shedlineid,
            LSL.linename,
            LDC.isherbal,
             LDC.layeritemid,
             I1.itemname as layeritemname,
            LDC.standardconsumption,
            LDC.consumptionquantity,
            R2.refname as unitname,
            LDC.companyid,
            fnc_layerconsumptionlivestock(LDC.itemid, @warehousebinid, LDC.companyid) as instock,
            fnc_layerconsumptionlivestock(LDC.itemid, @warehousebinid, LDC.companyid) as instockforref
	
    FROM 
		layerdailyconsumption LDC
        LEFT JOIN item I On LDC.itemid = I.id
        LEFT JOIN item I1 On LDC.layeritemid = I1.id
        LEFT JOIN layershedline LSL ON LDC.shedlineid = LSL.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		layerdailytransactionid = p_layerdailytransactionid AND
        consumptiontypeid = 1150;
        
	-- select vaccine consumption
   SELECT 
			LDC.id,
            LDC.layerdailytransactionid,
            LDC.consumptiontypeid,
            LDC.itemid,
            I.itemcode,
            I.itemname,
            LDC.shedlineid,
            LSL.linename,
            LDC.isherbal,
			LDC.layeritemid,
             I1.itemname as layeritemname,
            LDC.standardconsumption,
            LDC.consumptionquantity,
            R2.refname as unitname,
            LDC.companyid,
            fnc_layerconsumptionlivestock(LDC.itemid, @warehousebinid, LDC.companyid) as instock,
            fnc_layerconsumptionlivestock(LDC.itemid, @warehousebinid, LDC.companyid) as instockforref
  
  FROM 
		layerdailyconsumption LDC
        LEFT JOIN item I On LDC.itemid = I.id
        LEFT JOIN item I1 On LDC.layeritemid = I1.id
        LEFT JOIN layershedline LSL ON LDC.shedlineid = LSL.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		layerdailytransactionid = p_layerdailytransactionid AND
        consumptiontypeid = 1151;
        
	-- select vitamin consumption
   SELECT 
			LDC.id,
            LDC.layerdailytransactionid,
            LDC.consumptiontypeid,
            LDC.itemid,
            I.itemcode,
            I.itemname,
            LDC.shedlineid,
            LSL.linename,
            LDC.isherbal,
			LDC.layeritemid,
            I1.itemname as layeritemname,
            LDC.standardconsumption,
            LDC.consumptionquantity,
            R2.refname as unitname,
            LDC.companyid,
            fnc_layerconsumptionlivestock(LDC.itemid, @warehousebinid, LDC.companyid) as instock,
            fnc_layerconsumptionlivestock(LDC.itemid, @warehousebinid, LDC.companyid) as instockforref
	
    FROM 
		layerdailyconsumption LDC
        LEFT JOIN item I On LDC.itemid = I.id
        LEFT JOIN item I1 On LDC.layeritemid = I1.id
        LEFT JOIN layershedline LSL ON LDC.shedlineid = LSL.id
        LEFT JOIN `reference` R2 ON I.itemunitid = R2.id
        
	WHERE
		layerdailytransactionid = p_layerdailytransactionid AND
        consumptiontypeid = 1152;
            
END;



CREATE PROCEDURE `spc_layerdailymortality_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN
    DELETE FROM layerdailymortality WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'layerdailymortality', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_layerdailymortality_save`(
	IN p_id INT,
    IN p_layerdailytransactionid INT,
    IN p_itemid INT,
    IN p_shedlineid INT,
    IN p_avgweight DECIMAL(9,3),
    IN p_todaymortality INT,
    IN p_mortalityreasonid INT,
    IN p_todayculls INT,
    IN p_cullsreasonid INT,
    IN p_sexingerrorquantity INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerdailymortality
				(layerdailytransactionid, 
				 itemid, 
                 shedlineid, 
                 avgweight, 
                 todaymortality, 
                 mortalityreasonid, 
                 todayculls, 
                 cullsreasonid,
                 sexingerrorquantity,
                 companyid)
			VALUES 
				(p_layerdailytransactionid, 
                 p_itemid, 
                 p_shedlineid, 
                 p_avgweight, 
                 p_todaymortality, 
                 p_mortalityreasonid,
                 p_todayculls, 
                 p_cullsreasonid,
                 p_sexingerrorquantity,
                 p_companyid);
	  
      SET @action = 'INSERT';
	
    ELSE
    
		UPDATE  layerdailymortality
				SET layerdailytransactionid = p_layerdailytransactionid, 
                itemid = p_itemid,
                shedlineid = p_shedlineid, 
                avgweight = p_avgweight,
                todaymortality = p_todaymortality,
                mortalityreasonid = p_mortalityreasonid,
                todayculls = p_todayculls,
                cullsreasonid = p_cullsreasonid,
                sexingerrorquantity = p_sexingerrorquantity,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederdailymortality', out_id, @action, p_userid);
   
END;



CREATE PROCEDURE `spc_layerdailyotherdetails_save`(
	IN p_id INT,
    IN p_layerdailytransactionid INT,
    IN p_lighton VARCHAR(30),
    IN p_lightoff VARCHAR(30),
    IN p_duration DECIMAL(9,2),
    IN p_temperature DECIMAL(9,3),
    IN p_humidity DECIMAL(9,3),
    IN p_waterconsumption DECIMAL(9,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
     
     
     SET p_lighton = TIME(STR_TO_DATE(p_lighton, '%h:%i %p' ));
	 SET p_lightoff = TIME(STR_TO_DATE(p_lightoff, '%h:%i %p' ));
     
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerdailyotherdetail
				(layerdailytransactionid, 
				 lighton, 
                 lightoff, 
                 duration, 
                 temperature, 
                 humidity, 
                 waterconsumption, 
                 companyid)
			VALUES 
				(p_layerdailytransactionid, 
				 p_lighton,
                 p_lightoff,
                 p_duration, 
                 p_temperature, 
                 p_humidity, 
                 p_waterconsumption,
                 p_companyid);
	  
      SET @action = 'INSERT';
	
    ELSE
    
		UPDATE  layerdailyotherdetail
				SET layerdailytransactionid = p_layerdailytransactionid, 
                lighton = p_lighton,
                lightoff = p_lightoff, 
                duration = p_duration,
                temperature = p_temperature,
                humidity = p_humidity,
                waterconsumption = p_waterconsumption,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederdailyotherdetails', out_id, @action, p_userid);
   
END;



CREATE PROCEDURE `spc_layerdailytransaction_bylayerbatchid`(
	IN p_layerbatchid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	
SET @femaleitemid = NULL;
SET @femalemortality = 0;
SET @femaleculls = 0;
SET @sexingerrorquantity = 0;
SELECT  
			defaultfemalechickid INTO @femaleitemid
			
		FROM 
			layersetting LIMIT 1;
            
            SELECT 
			
				
				CASE WHEN itemid = @femaleitemid THEN @femalemortality:= todaymortality ELSE NULL END as femalemortality
                
				FROM( SELECT
					  itemid, SUM(todaymortality) as todaymortality   
            
					  FROM layerdailytransaction LDT
					  LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id
    
					  WHERE layerbatchid = p_layerbatchid
    
				GROUP BY itemid) as todaymortality;
                
                
                SELECT 
			
				
				CASE WHEN itemid = @femaleitemid THEN @femaleculls:= todayculls ELSE NULL END as femaleculls
                
				FROM( SELECT
					  itemid, SUM(todayculls) as todayculls    
            
					  FROM layerdailytransaction LDT
					  LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id
    
					  WHERE layerbatchid = p_layerbatchid
    
				GROUP BY itemid) as totalculls;
                
                 SELECT 
			
				
				CASE WHEN itemid = @femaleitemid THEN @sexingerrorquantity:= sexingerrorquantity ELSE NULL END as sexingerrorquantity
                
				FROM( SELECT
					  itemid, SUM(sexingerrorquantity) as sexingerrorquantity    
            
					  FROM layerdailytransaction LDT
					  LEFT JOIN layerdailymortality LDM ON LDM.layerdailytransactionid = LDT.id
    
					  WHERE layerbatchid = p_layerbatchid
    
				GROUP BY itemid) as totalsexingerrorquantity;
    
    SELECT 
             IFNULL(@femalemortality,0) AS femalemortality,
			 IFNULL(@femaleculls,0) AS femaleculls,
             IFNULL(@sexingerrorquantity,0) AS sexingerrorquantity;
    

END;



CREATE PROCEDURE `spc_layerdailytransaction_issueconsumeditems`(
  IN p_dailytransactionid INT,
  IN p_outid INT
)
BEGIN
	DECLARE p_itemid INT;
	DECLARE p_itemname VARCHAR(200);
	DECLARE p_itemunitid INT;
	DECLARE p_unitcost INT;
	DECLARE p_todaymortality INT;
	DECLARE p_todayculls INT;
    DECLARE p_sexingerrorquantity INT;
    DECLARE p_quantity INT;
    DECLARE p_companyid INT;
    DECLARE p_userid INT;
    DECLARE p_layerbatchid INT;
    DECLARE p_shedwarehousebinid INT;
    DECLARE p_warehouseid INT;
    DECLARE p_mortalityid INT;
    DECLARE p_consumptionid INT;
    DECLARE p_grpoid INT;
	DECLARE p_itembatch VARCHAR(300);
    DECLARE x INT;
	DECLARE i INT;
    DECLARE material_itemid INT;
    DECLARE material_itembatch VARCHAR(300);
    DECLARE material_quantity INT;
	SET @row_number = 0;
    SET @row_number1 = 0;
	SET @reccount = 0;
    SET @consumptionreccount = 0;
	SET x = 1;
    SET i = 1;
    SET @materialissue_outid = null;
    SET @materialissuedetail_outid = null;
    SET @movement_outid = null;
    SET @consumptionissue_outid = null;
    
    SELECT LDT.layerbatchid, LS.warehousebinid, LDT.companyid, LDT.approvedby, LS.warehouseid, LBP.grpono 
    INTO p_layerbatchid, p_shedwarehousebinid, p_companyid, p_userid, p_warehouseid, p_grpoid
    
    FROM layerdailytransaction LDT
    LEFT JOIN layershed LS ON LDT.shedid = LS.id
    LEFT JOIN layerbatchplacement LBP ON LDT.layerbatchid = LBP.layerbatchid
    
    WHERE LDT.id = p_dailytransactionid;
    
	-- save issue parent record
	 CALL spc_materialissue_save(
			null, 
			NOW(), 
			385, 
			p_layerbatchid, 
			362, 
			'layer daily culls and mortality', 
			p_userid, 
            p_warehouseid,
            p_shedwarehousebinid,
            null, 
			null, 
            p_companyid, 
            p_userid, 
            @materialissue_outid
		);
 
	UPDATE layerdailytransaction SET issueid = @materialissue_outid
	WHERE id = p_dailytransactionid;
        
	-- select mortality and culls detail for given daily transaction and issue them
		
		DROP TEMPORARY TABLE IF EXISTS tempmortality;
        
		CREATE TEMPORARY TABLE tempmortality
		SELECT 
			LDM.id,
			LDM.itemid, 
			I.itemname, 
			I.itemunitid,
			I.unitcost,
			todaymortality, 
			todayculls, 
            sexingerrorquantity,
			(@row_number := @row_number + 1) as `rank`
            
		FROM layerdailymortality LDM
		LEFT JOIN item I ON LDM.itemid = I.id
		WHERE LDM.layerdailytransactionid = p_dailytransactionid;
	 
		SELECT COUNT(*) INTO @reccount FROM tempmortality;
	 
		WHILE x  <= @reccount DO
			
			SELECT id, itemid, itemname, itemunitid, unitcost, todaymortality, todayculls, sexingerrorquantity
            INTO p_mortalityid, p_itemid, p_itemname, p_itemunitid, p_unitcost, p_todaymortality, p_todayculls, p_sexingerrorquantity
            FROM tempmortality WHERE `rank` = x;
            SET p_quantity = (p_todaymortality + p_todayculls + p_sexingerrorquantity);
		
			SELECT itembatch into p_itembatch
            FROM grpodetail WHERE grpoid = p_grpoid AND itemid = p_itemid;
            
			CALL spc_materialissuedetail_save(
					null, @materialissue_outid,
                    p_itemid, p_itemname, p_quantity,
                    p_unitcost, (p_quantity * p_unitcost),
                    p_itemunitid, p_itembatch, p_companyid,
                    p_userid, @materialissuedetail_outid
			);
            
			CALL spc_materialmovement_save(
					null, p_itemid, p_itembatch,
                    683, @materialissue_outid,
                    NOW(), p_quantity, p_warehouseid,
                    p_shedwarehousebinid, null, null,
                    (p_quantity * p_unitcost),
                    p_companyid, p_userid,
                    @movement_outid
			);
  
			UPDATE layerdailymortality SET issuedetailid = @materialissuedetail_outid
            WHERE id = p_mortalityid;
            
			SET  x = x + 1; 
		END WHILE;
	 
		DROP TEMPORARY TABLE tempmortality;
        
	
   -- select daily consumption for given daily transaction and issue them itembatch wise
   
   SET @reccount = 0;
   SET x = 1;
   SET @row_number = 0;
 
   
	DROP TEMPORARY TABLE IF EXISTS tempconsumption;
        
	CREATE TEMPORARY TABLE tempconsumption
	SELECT 
		LDC.id,
		LDC.itemid, 
		I.itemname, 
		I.itemunitid,
		I.unitcost,
		consumptionquantity, 
		(@row_number := @row_number + 1) as `rank`
	FROM layerdailyconsumption LDC
	LEFT JOIN item I ON LDC.itemid = I.id
	WHERE LDC.layerdailytransactionid = p_dailytransactionid;
	 
	SELECT COUNT(*) INTO @consumptionreccount FROM tempconsumption;
    
    
	WHILE x  <= @consumptionreccount DO
			
		SET p_consumptionid = null;
		SET p_itemid = null;
		SET p_itemname = null;
		SET p_itemunitid = null;
		SET p_unitcost = null;
		SET p_quantity = null;
        SET i = 1;
		SET @reccount = 0;
   
		SELECT id, itemid, itemname, itemunitid, unitcost, consumptionquantity
		INTO p_consumptionid, p_itemid, p_itemname, p_itemunitid, p_unitcost, p_quantity
		FROM tempconsumption WHERE `rank` = x;
         
	
        -- select itembatch and quantity from material movement for current item
        DROP TEMPORARY TABLE IF EXISTS tempitembatch;
        
		CREATE TEMPORARY TABLE tempitembatch
        
        SELECT itemid, itembatch, stockin, 
        fnc_itembatchstockout(itemid, IFNULL(itembatch,''), p_warehouseid) as stockout,
        (@row_number1 := @row_number1 + 1) as recordrank 
       FROM(
    
			SELECT itemid, itembatch, SUM(quantity) as stockin
			FROM materialmovement
			WHERE 
				itemid = p_itemid AND
				companyid = p_companyid AND
				towarehousebinid = p_shedwarehousebinid AND
				transactiontypeid in (681,682,684)
				GROUP BY itemid, itembatch
			) stocktable; 
      
        
		SELECT COUNT(*) INTO @reccount FROM  tempitembatch;
        
        WHILE i  <= @reccount DO
        
			SET @issuequantity = 0;
			
			SELECT itemid, itembatch, (stockin - stockout) as quantity
			INTO  material_itemid, material_itembatch, material_quantity
			FROM  tempitembatch 
            WHERE recordrank = i;
			
             IF (p_quantity > 0 ) THEN
             
				IF (material_quantity >= p_quantity) THEN
					SET @issuequantity = p_quantity;
					SET p_quantity = 0;
				ELSE
					SET @issuequantity = p_quantity - material_quantity;
                END IF;
                
                  CALL spc_materialissuedetail_save(null, @materialissue_outid, p_itemid, p_itemname, @issuequantity, p_unitcost, (@issuequantity * p_unitcost), p_itemunitid, material_itembatch, p_companyid, p_userid, @materialissuedetail_outid);
				  CALL spc_materialmovement_save(
                  null, p_itemid, material_itembatch, 
                  683, @materialissue_outid, NOW(),
                  @issuequantity, p_warehouseid,
                  p_shedwarehousebinid,
                  null, null, null, p_companyid, 
                  p_userid,@movement_outid);
                  
				  CALL spc_layerconsumptionissue_save(null, p_itemid, p_consumptionid, @materialissuedetail_outid, @consumptionissue_outid);
              
              
            
            END IF;
            
        	SET  i = i + 1; 
	    END WHILE;
       
       DROP TEMPORARY TABLE tempitembatch;
       
	
		-- UPDATE breederdailyconsumption SET issuedetailid = @materialissuedetail_outid
        -- WHERE id = p_consumptionid;
            
			SET  x = x + 1; 
	END WHILE;
	 
	DROP TEMPORARY TABLE tempconsumption;
END;



CREATE PROCEDURE `spc_layerdailytransaction_save`(
	IN p_id INT,
    IN p_locationid INT(11),
    IN p_shedid INT,
    IN p_layerbatchid INT,
    IN p_createdby INT,
    IN p_transactiondate DATE,
    IN p_approvedby INT,
    IN p_approvaldate DATE,
    IN p_statusid INT,
    IN p_remark VARCHAR(500),
    IN p_warehouseid INT,
    IN p_issueid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;
     
	IF EXISTS(
		SELECT id from layerdailytransaction where layerbatchid = p_layerbatchid AND transactiondate = p_transactiondate AND shedid = p_shedid
				AND (
						(NULLIF(p_id, 0) IS NULL)
						-- OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id)
                    )
            
		) THEN BEGIN
        
		SELECT -1 INTO out_id;
	
	END;
            
    ELSEIF EXISTS(
		 SELECT id from layerdailytransaction where statusid = 821
			 AND (
				 (NULLIF(p_id, 0) IS NULL)
				    -- OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id)
				 )
            
		 ) THEN  BEGIN
        
	 SELECT -2 INTO out_id;
	
	 END;
    
    ELSE
    
    BEGIN
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
		
        IF (p_statusid = 822) THEN
			SET p_approvaldate = NOW();
        END IF;
        
        INSERT INTO layerdailytransaction 
				(locationid,
                shedid, 
				 layerbatchid, 
                 createdby, 
                 transactiondate, 
                 approvedby, 
                 approvaldate, 
                 statusid, 
                 remark, 
                 issueid,
                 companyid)
			VALUES 
				(p_locationid,
                 p_shedid, 
                 p_layerbatchid, 
                 p_createdby, 
                 p_transactiondate, 
                 p_approvedby, 
                 p_approvaldate, 
                 p_statusid,
                 p_remark, 
                 @materialissue_outid,
                 p_companyid);
	  
      SET @action = 'INSERT';
        
    ELSE
    
		UPDATE  layerdailytransaction
				SET locationid = p_locationid,
                shedid = p_shedid, 
                layerbatchid = p_layerbatchid,
                transactiondate = p_transactiondate,
                approvedby = p_approvedby,
                approvaldate = p_approvaldate,
                statusid = p_statusid,
                remark = p_remark,
                issueid = p_issueid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
             
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
     CALL spc_commonlog_save(p_companyid, 'layerdailytransaction', out_id, @action, p_userid);
  
  END;
   
   END IF;
END;



CREATE PROCEDURE `spc_layerdailytransaction_search`(
	IN p_companyid INT
)
BEGIN
    
    SELECT
			LT.id,
            LT.shedid,
            LS.shedname,
            LT.layerbatchid,
            LB.batchname,
            DATE_FORMAT( LT.transactiondate,'%d/%m/%Y') as transactiondate,
            R.refname as `status`
		
    FROM
		layerdailytransaction LT
		LEFT JOIN layershed LS ON LT.shedid = LS.id
        LEFT JOIN layerbatch LB ON LT.layerbatchid = LB.id
        LEFT JOIN `reference` R ON LT.statusid = R.id
    
	WHERE
		LT.companyid = p_companyid
        ORDER BY LT.id DESC;
END;



CREATE PROCEDURE `spc_layerdailytransaction_select`(
	IN p_id INT
)
BEGIN
    
    -- select layer daily transaction details
    SELECT
		  LDT.id,
          shedid,
          LS.warehouseid as warehouseid,
          LS.warehousebinid,
          LS.shedname,
          LDT.layerbatchid,
          L.locationcode,
          L.locationname,
          LB.batchname,
		  DATE_FORMAT(LDT.transactiondate,'%d/%m/%Y') as transactiondate,
		  LDT.statusid,
          R.refname as `status`,
          U.fullname as createdbyname,
          LDT.remark,
          LDT.companyid,
          LDT.createdby,
		  LDT.createdby as userid,
          LDT.issueid,
          LBP.placementdate,
          LB.locationid,
          LF.phasename as phasestatusname
          
    FROM
		layerdailytransaction LDT
		LEFT JOIN layershed LS ON LDT.shedid = LS.id
        LEFT JOIN layerbatch LB ON LDT.layerbatchid = LB.id
        LEFT JOIN `reference` R ON LDT.statusid = R.id
        LEFT JOIN `user` U ON LDT.createdby = U.id
        LEFT JOIN location L ON LB.locationid = L.id
        LEFT JOIN layerbatchplacement LBP ON LDT.layerbatchid = LBP.layerbatchid
        LEFT JOIN layerphase LF on LBP.phasestatusid = LF.id

	WHERE
		 LDT.id = p_id;
         
         
	-- select breeder daily transaction other details
    
    SELECT
			id,
            layerdailytransactionid,
            TIME_FORMAT(lighton, '%h:%i %p') as lighton,
            TIME_FORMAT(lightoff, '%h:%i %p') as lightoff,
            duration,
            temperature,
            humidity,
            waterconsumption,
            companyid,
            (SELECT createdby FROM layerdailytransaction WHERE id = p_id) as userid 
    
    FROM
		layerdailyotherdetail 
        
	WHERE
		layerdailytransactionid = p_id;
        
	
	-- select layer daily culls-mortality details
  
    SELECT
			LDM.id,
            LDM.layerdailytransactionid,
            LDM.itemid,
            I.itemcode,
            I.itemname,
            LDM.shedlineid,
            LSL.linename,
            LDM.avgweight,
            LDM.todaymortality,
            LDM.mortalityreasonid,
            LR1.reason as mortalityreason,
            LDM.todayculls,
            LDM.cullsreasonid,
            LDM.sexingerrorquantity,
            LR2.reason as cullsreason,
            LDM.companyid,
         
           fnc_linewise_layer_chickslivestock(LDM.shedlineid, LDM.itemid, LDM.layerdailytransactionid) as instock,
           
         
          fnc_linewise_layer_chickslivestock(LDM.shedlineid, LDM.itemid, LDM.layerdailytransactionid) as instockforref,
            LDM.issuedetailid
            
	FROM layerdailymortality LDM
    LEFT JOIN layerreasons LR1 ON LDM.mortalityreasonid = LR1.id
    LEFT JOIN layerreasons LR2 ON LDM.cullsreasonid = LR2.id
    LEFT JOIN item I ON LDM.itemid = I.id
    LEFT JOIN layershedline LSL ON LDM.shedlineid = LSL.id
    
    WHERE
		LDM.layerdailytransactionid = p_id;
END;



CREATE PROCEDURE `spc_layerdailytransaction_updatebatchbalance`(
	IN p_layerdailytransactionid INT(11),
    OUT out_id INT
)
BEGIN
    
    DECLARE p_layerbatchid INT;
    DECLARE p_shedid INT;
    DECLARE p_shedlineid INT;
	DECLARE p_itemid INT;
	DECLARE p_todaymortality INT;
	DECLARE p_todayculls INT;
    DECLARE p_sexingerrorquantity INT;
    DECLARE p_quantity INT;
	DECLARE x INT;
	SET @reccount = 0;
    SET @row_number = 0;
	SET x = 1;
    
    
	 DROP TEMPORARY TABLE IF EXISTS tempdailymortality;
        
		CREATE TEMPORARY TABLE tempdailymortality
        
		SELECT 
			LDT.layerbatchid,
            LDT.shedid,
            LDM.shedlineid,
			LDM.itemid, 
			todaymortality, 
			todayculls, 
            sexingerrorquantity,
			(@row_number := @row_number + 1) as `rank`
            
		FROM layerdailymortality LDM
		LEFT JOIN item I ON LDM.itemid = I.id
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
		WHERE LDM.layerdailytransactionid = p_layerdailytransactionid;
	 
		SELECT COUNT(*) INTO @reccount FROM tempdailymortality;
	 
		WHILE x  <= @reccount DO
    
			SET p_layerbatchid = null;
            SET p_shedid = null;
            SET p_shedlineid = null;
            SET p_itemid = null;
            SET p_todaymortality = null;
            SET p_todayculls = null;
            SET p_sexingerrorquantity = null;
            SET p_quantity = 0;
            
			SELECT layerbatchid, shedid, shedlineid, itemid, todaymortality, todayculls, sexingerrorquantity
            INTO p_layerbatchid, p_shedid, p_shedlineid, p_itemid, p_todaymortality, p_todayculls, p_sexingerrorquantity
            FROM tempdailymortality WHERE `rank` = x;
            
            SET p_quantity = (p_todaymortality + p_todayculls+ p_sexingerrorquantity);
		
			UPDATE layerbatchbalance 
            SET 
				quantity = (quantity - p_quantity),
                updateddate = NOW()
                
            WHERE 
                layerbatchid = p_layerbatchid AND
                layershedid = p_shedid AND
                layershedlineid = p_shedlineid AND
                itemid = p_itemid AND
                quantity != 0;
            
            SELECT LAST_INSERT_ID() INTO out_id; 
            
			SET  x = x + 1; 
            
		END WHILE;
	 
		DROP TEMPORARY TABLE tempdailymortality;
    
    
   -- record log
   -- CALL spc_commonlog_save(p_companyid, 'breederbatchbalance', out_id, 'update', p_userid);

END;



CREATE PROCEDURE `spc_layereggscategory_delete`(	
IN p_id INT
)
BEGIN
	DELETE FROM layereggscategory WHERE id = p_id;
    
     CALL spc_commonlog_save(p_companyid, 'layereggscategory', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_layereggscategory_save`(
    IN p_id INT,
    IN p_categoryname VARCHAR(200),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layereggscategory 
				(categoryname, companyid)
			VALUES 
				(p_categoryname, p_companyid);
			
            SET @action = 'INSERT';

	ELSE
    
		UPDATE layereggscategory
			SET categoryname = p_categoryname, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
	
			SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layereggscategory', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_layereggscategory_search`(   
 IN p_companyid INT
)
BEGIN

	SELECT
		id,
		categoryname
    FROM
		layereggscategory
	WHERE
		companyid = p_companyid;

END;



CREATE PROCEDURE `spc_layereggscategory_select`(	
IN p_id INT
)
BEGIN

	SELECT
		id,
		categoryname,
        companyid
	
    FROM
		layereggscategory
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_layereggscollectiondetail_save`(IN p_Id INT(11),
	IN p_eggscollectionid INT(11),
	IN p_shedid INT(11),
	IN p_shedlineid INT(11),
    IN p_quantity INT(11),
    IN p_time VARCHAR(50),
    IN p_stdquantity INT(11),
    IN p_companyid INT(11),
    IN p_userid INT,
	OUT out_id INT
)
BEGIN
SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layereggscollectiondetail 
				(eggscollectionid, shedid, shedlineid, quantity, time, stdquantity, companyid)
			VALUES 
				(p_eggscollectionid, p_shedid, p_shedlineid, p_quantity, p_time, p_stdquantity, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE layereggscollectiondetail
        
			SET eggscollectionid = p_eggscollectionid,	
				shedid	= p_shedid,
				shedlineid	 = p_shedlineid,
				quantity = p_quantity,
                time = p_time,
                stdquantity = p_stdquantity,
				companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
			
             
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layereggscollectiondetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_layereggscollectiondetail_select`( 
 IN p_eggscollectionid INT ,
 IN p_companyid INT)
BEGIN

	SELECT 
		EGD.id,
        EGD.eggscollectionid,
        shedid,
        shedlineid,
        quantity,
        time,
        EGD.stdquantity,
        SL.linename,
        EGD.companyid
        
        
	FROM
		layereggscollectiondetail EGD
    
    LEFT JOIN layershedline SL ON EGD.shedlineid = SL.id
    
	WHERE
		EGD.eggscollectionid = p_eggscollectionid AND
        EGD.companyid = p_companyid; 
END;



CREATE PROCEDURE `spc_layereggscollection_batch_search`(
 IN p_companyid INT,
 IN p_locationid varchar(50)
 )
BEGIN 
SET @location = p_locationid;

 SELECT
		  LEC.id,
		  LEC.layerbatchid,
		  LB.batchname,
		  L.locationcode,
		  L.locationname,
		  W.warehousecode,
		  W.warehousename,
		  LB.statusid,
		  REF.refname as batchstatus
          
       
    FROM
		layereggscollection LEC
        
		 LEFT JOIN layerbatch LB ON LEC.layerbatchid =LB.id AND 
         FIND_IN_SET(LB.locationid,@location) 
		 LEFT JOIN location L ON LB.locationid = L.id 
		 LEFT JOIN warehouse W ON LB.warehouseid = W.id
		 INNER JOIN `reference` REF ON REF.id = LB.statusid
	
	WHERE
        LEC.companyid = p_companyid 
        
        GROUP BY LEC.layerbatchid;
END;



CREATE PROCEDURE `spc_layereggscollection_byshed_select`(IN p_shedid INT,
IN p_cpmapnyid INT
)
BEGIN

	SELECT 
		EG.id,
        EG.layerbatchid,
        EG.shedid,
        EG.createdby,
		DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as batchplacementdate,
		DATE_FORMAT(EG.collectiondate,'%d/%m/%Y') as collectiondate,
        DATE_FORMAT(EG.productionstartdate,'%d/%m/%Y') as productionstartdate,
        EG.productionweek,
        EG.approvedby,
        EG.approvaldate,
        EG.statusid,
        EG.remark,
        EG.companyid,
        S.shedname,
        REF.refname as statusname,
        LB.batchname,
		(SELECT IF( EXISTS(
             SELECT id
             FROM layereggsdistributiondetail
             WHERE eggscollectionid = EG.id AND statusid = 1110), 'YES','NO') ) as isDistributiondone
        
        
	FROM
		layereggscollection EG
		LEFT JOIN layershed S ON EG.shedid = S.id
        LEFT JOIN `reference` REF ON EG.statusid = REF.id
        LEft JOIN layerbatch LB ON EG.layerbatchid = LB.id
        LEft JOIN layerbatchplacement LBP ON EG.layerbatchid = LBP.layerbatchid
		
	WHERE
		EG.shedid = p_shedid AND
        EG.companyid = p_cpmapnyid 
        ;
END;



CREATE PROCEDURE `spc_layereggscollection_forshed`(
 IN p_layerbatchid VARCHAR(50)
 )
BEGIN
SET @layerbatch = p_layerbatchid;
 SELECT 
    LEC.Shedid,
    LS.shedname,
    REF.refname as statusname
    
    
    FROM
		layereggscollection LEC
        
		LEFT JOIN layershed LS ON LEC.shedid = LS.id
        LEFT JOIN `reference` REF ON LEC.statusid = REF.id
	
	WHERE
        FIND_IN_SET(LEC.layerbatchid,@layerbatch) 
        group by  LEC.Shedid;
END;



CREATE PROCEDURE `spc_layereggscollection_groupbydate`(
 IN p_companyid INT
)
BEGIN

 SELECT
	EC.id as eggscollectionid,
    DATE_FORMAT( EC.collectiondate,'%d/%m/%Y') as collectiondate,
    EC.layerbatchid,
    EC.shedid,
    EC.statusid, 
    sum(ECD.quantity) AS totalquantity,
    R.refname as statusname,
    LB.batchname,
    LS.shedname
    
FROM 
	layereggscollection EC

INNER JOIN layereggscollectiondetail ECD ON ECD.eggscollectionid = EC.id
 LEFT JOIN `reference` R ON EC.statusid = R.id
 LEFT JOIN layerbatch LB ON EC.layerbatchid= LB.id
 LEFT JOIN layershed LS ON EC.shedid= LS.id 

WHERE EC.statusid = 1091 AND
EC.companyid = p_companyid
GROUP BY EC.id,
    EC.collectiondate,
    EC.layerbatchid,
    EC.shedid,
    EC.statusid, 
    R.refname
    
 ORDER by EC.id desc;

END;



CREATE PROCEDURE `spc_layereggscollection_report`(
IN p_layerbatchid VARCHAR(200),
IN p_shedid VARCHAR(200),
IN p_fromdate DATE,
IN p_todate DATE,
IN p_frequency VARCHAR(50),
IN p_companyid INT


)
BEGIN

  SET @layerbatchid = p_layerbatchid;
SET @shedid = p_shedid;
	SET @defaulttableeggsitemid = null;
	SET @defaultcrackedeggsitemid = null;
	SET @defaultdamageeggsitemid = null;
	SET @defaultpulleteggsitemid = null;
    SET @tableqty = NULL;
	SET @crackedqty = NULL;
	SET @damageqty = NULL;
	SET @pulletqty = NULL;
    
    SELECT  
		defaulttableeggsitemid,defaultcrackedeggsitemid,
		defaultdamageeggsitemid,defaultpulleteggsitemid
		INTO @defaulttableeggsitemid,@defaultcrackedeggsitemid,
		@defaultdamageeggsitemid, @defaultpulleteggsitemid
        
	FROM
		layersetting
        
        WHERE 
			companyid = p_companyid limit 1;
          
          
if(p_frequency = 'day')then   

 SELECT
		 SUM(LECD.quantity) as collectionqty,
         DATE_FORMAT( LEC.collectiondate,'%d/%m/%Y') as collectiondate
		 
       
    FROM
		layereggscollection LEC
        
		 LEFT JOIN layereggscollectiondetail LECD ON LECD.eggscollectionid = LEC.id 
	
		WHERE
		FIND_IN_SET(  LEC.layerbatchid,@layerbatchid) AND
        FIND_IN_SET( LEC.shedid,@shedid) AND
		LEC.collectiondate BETWEEN p_fromdate AND p_todate AND
        LEC.companyid = p_companyid AND
        LEC.statusid = 1091
		group by LEC.collectiondate ;

 

         
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(itemid INT(11),
itemname VARCHAR(200),
eggscollectionid INT(11),
Collectiondate VARCHAR(200),
quantity VARCHAR(200));

INSERT INTO tempmortality1 
 select 
	itemid,
     REPLACE(I.itemname, ' ', '-')as itemname,
	eggscollectionid,
   DATE_FORMAT(collectiondate,'%d/%m/%Y') as Collectiondate,
	quantity
	 
		FROM layereggsdistributiondetail ED
		LEFT JOIN item I ON ED.itemid = I.id
		
	WHERE eggscollectionid in (select id from layereggscollection where  FIND_IN_SET(layerbatchid,@layerbatchid) and FIND_IN_SET(shedid,@shedid) AND statusid = 1091)
		AND collectiondate BETWEEN p_fromdate AND p_todate 
        AND  statusid = 1110;


SELECT * FROM tempmortality1;

SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality1;
SET @sql = CONCAT('SELECT Collectiondate, ', @sql, ' 
                  FROM tempmortality1 
                   GROUP BY Collectiondate');

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
        
        
	END IF;
         
         
         
		 if(p_frequency = 'week') then
     	SELECT sum(collectionqty) as collectionqty, DATE_FORMAT(week_start,'%d/%m/%Y') as week_start, DATE_FORMAT(week_end,'%d/%m/%Y') as week_end  from (
	SELECT
		 SUM(LECD.quantity) as collectionqty,
		   LEC.collectiondate, FIRST_DAY_OF_WEEK(LEC.collectiondate) AS week_start,
           
           DATE_ADD(FIRST_DAY_OF_WEEK(LEC.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(LEC.collectiondate))) DAY)
            AS week_end
         
    FROM
		layereggscollection LEC
        
		 LEFT JOIN layereggscollectiondetail LECD ON LECD.eggscollectionid = LEC.id 
	
	WHERE
		FIND_IN_SET(  LEC.layerbatchid,@layerbatchid) AND
        FIND_IN_SET( LEC.shedid,@shedid) AND
		LEC.collectiondate BETWEEN p_fromdate AND p_todate AND
        LEC.companyid = p_companyid AND
        LEC.statusid = 1091
		group by LEC.collectiondate, FIRST_DAY_OF_WEEK(LEC.collectiondate) ,
        DATE_ADD(FIRST_DAY_OF_WEEK(LEC.collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(LEC.collectiondate))) DAY)
        
	) as temp
    group by week_start, week_end
    order by week_start;


        
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(itemid INT(11),
itemname VARCHAR(200),
eggscollectionid INT(11),
week_start VARCHAR(200),
week_end varchar(200),
quantity VARCHAR(200));

INSERT INTO tempmortality1 
select 
        itemid,
        REPLACE(I.itemname, ' ', '-')as itemname,
        eggscollectionid,
        DATE_FORMAT(FIRST_DAY_OF_WEEK(collectiondate),'%d/%m/%Y') AS week_start,
        DATE_FORMAT(DATE_ADD(FIRST_DAY_OF_WEEK(collectiondate), INTERVAL(8-DAYOFWEEK(FIRST_DAY_OF_WEEK(collectiondate))) DAY),'%d/%m/%Y')
            AS week_end,
            quantity
       
            FROM layereggsdistributiondetail ED
            LEFT JOIN item I ON ED.itemid = I.id
		WHERE eggscollectionid in (select id from layereggscollection where FIND_IN_SET(layerbatchid,@layerbatchid) and FIND_IN_SET(shedid,@shedid) and statusid=1091)
		AND collectiondate  BETWEEN p_fromdate AND p_todate AND  statusid = 1110;
      --   group by week_start, week_end
      -- order by week_start;

SELECT * FROM tempmortality1;

SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality1;
SET @sql = CONCAT('SELECT week_start, week_end, ', @sql, ' 
                  FROM tempmortality1 
                   GROUP BY week_start');

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
    
END IF;
      
      if (p_frequency='month') then
       
     SELECT
		 SUM(LECD.quantity) as collectionqty,
		   MONTHNAME(LEC.collectiondate) as  month
       
    FROM
		layereggscollection LEC
        
		 LEFT JOIN layereggscollectiondetail LECD ON LECD.eggscollectionid = LEC.id 
	
	WHERE
		 FIND_IN_SET(LEC.layerbatchid,@layerbatchid) AND
        FIND_IN_SET( LEC.shedid,@shedid) AND
		LEC.collectiondate BETWEEN p_fromdate AND p_todate AND
        LEC.companyid = p_companyid AND
        LEC.statusid = 1091
		group by   MONTHNAME(LEC.collectiondate) ;
        
               
DROP TEMPORARY TABLE IF EXISTS tempmortality1;
CREATE TEMPORARY TABLE tempmortality1
(itemid INT(11),
itemname VARCHAR(200),
eggscollectionid INT(11),
Month VARCHAR(200),
quantity VARCHAR(200));

INSERT INTO tempmortality1 
select 
	 itemid,
	 REPLACE(I.itemname, ' ', '-')as itemname,
	 eggscollectionid,
     MONTHNAME(collectiondate) as Month,
     quantity
      
		 FROM layereggsdistributiondetail
		WHERE eggscollectionid in (select id from layereggscollection  where FIND_IN_SET(layerbatchid,@layerbatchid) and FIND_IN_SET(shedid,@shedid) AND  statusid = 1091)
		AND collectiondate BETWEEN p_fromdate AND p_todate
         AND  statusid = 1110 ;

SELECT * FROM tempmortality1;

SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'ifnull(SUM(case when itemname = ''',
      itemname,
      ''' then quantity end),0) AS `',
      itemname, '`'
    )
  ) INTO @sql
FROM
  tempmortality1;
SET @sql = CONCAT('SELECT Month, ', @sql, ' 
                  FROM tempmortality1 
                   GROUP BY Month');

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
        
        END IF;
        
END;



CREATE PROCEDURE `spc_layereggscollection_save`(
    IN p_id INT(11)	,
	IN p_layerbatchid INT(11),
	IN p_shedid INT(11),
	IN p_createdby INT(11),
	IN p_collectiondate DATE,	
	IN P_productionstartdate DATE,
	IN p_approvedby INT(11),
	IN p_approvaldate date,	
	IN p_statusid INT(11),	
	IN P_remark varchar(200),	
	IN p_companyid INT(11),
	IN p_userid INT,
	OUT out_id INT
    )
BEGIN
    SET @action = null;
    SET @defaultcoldroomwarehouseid = null;
    
    SELECT  
			defaultcoldroomwarehouseid
			INTO @defaultcoldroomwarehouseid
	FROM
		layersetting LS
    WHERE 
		LS.companyid = p_companyid limit 1;
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layereggscollection 
				(layerbatchid, shedid, createdby, collectiondate, productionstartdate, approvedby, 
                approvaldate, statusid, remark, companyid )
			VALUES 
				(p_layerbatchid, p_shedid, p_createdby, p_collectiondate, p_productionstartdate, p_approvedby, p_approvaldate, 
                p_statusid, p_remark, p_companyid );
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE layereggscollection
        
			SET layerbatchid = p_layerbatchid, 
				shedid = p_shedid,
                createdby = p_createdby,
				collectiondate = p_collectiondate,
				productionstartdate = p_productionstartdate,
				approvedby = p_approvedby, 
				approvaldate = p_approvaldate,
				statusid = p_statusid, 
				remark = p_remark,  
				companyid  = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
			
             
           SET @action = 'UPDATE';     
                
		-- update towarehouseid when statusid is 1091 = 'transfer & approved
        UPDATE layereggscollection SET towarehouseid = @defaultcoldroomwarehouseid where statusid = 1091;
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
   -- record log
   CALL spc_commonlog_save(p_companyid, 'eggscollection', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_layereggscollection_search`(
 IN p_companyid INT
)
BEGIN
  SELECT
		EG.id,
        DATE_FORMAT( EG.collectiondate,'%d/%m/%Y') as collectiondate,
        EG.statusid,
        EG.shedid,
        R.refname as statusname,
        LS.shedname,
        EG.companyid
	
    FROM
		layereggscollection EG
        
        LEFT JOIN `reference` R ON EG.statusid = R.id
        LEFT JOIN layershed LS ON EG.shedid = LS.id
	
	WHERE
		EG.companyid = p_companyid
		
        ORDER by EG.id desc;
END;



CREATE PROCEDURE `spc_layereggscollection_select`(
IN p_collectiondate date,
IN p_id INT,
IN p_cpmapnyid INT
)
BEGIN

	SELECT 
		EG.id,
        EG.layerbatchid,
        EG.shedid,
        EG.createdby,
		DATE_FORMAT(LBP.placementdate,'%d/%m/%Y') as batchplacementdate,
		DATE_FORMAT(EG.collectiondate,'%d/%m/%Y') as collectiondate,
        DATE_FORMAT(EG.productionstartdate,'%d/%m/%Y') as productionstartdate,
        EG.productionweek,
        EG.approvedby,
        EG.approvaldate,
        EG.statusid,
        EG.remark,
        EG.companyid,
        S.shedname,
        REF.refname as statusname,
        LB.batchname
        
        
	FROM
		layereggscollection EG
		LEFT JOIN layershed S ON EG.shedid = S.id
        LEFT JOIN `reference` REF ON EG.statusid = REF.id
        LEft JOIN layerbatch LB ON EG.layerbatchid = LB.id
        LEft JOIN layerbatchplacement LBP ON EG.layerbatchid = LBP.layerbatchid
    
	WHERE
		EG.collectiondate = p_collectiondate AND
        EG.id = p_id AND
        EG.companyid = p_cpmapnyid 
        
         ORDER by EG.id desc;
END;



CREATE PROCEDURE `spc_layereggsdistributiondetail_save`(
	
    IN p_id INT(11),
	IN p_eggscollectionid INT(11),
	IN p_shedid	INT(11),
    IN p_itemtypeid INT(11),
	IN p_itemid INT(11),
	IN p_quantity INT(11),
	IN p_avgweight DECIMAL(9,3),
    IN p_statusid INT(11),
    IN p_collectiondate DATE,
    IN p_layerbatchid INT(11),
    IN p_remark VARCHAR(200),
	IN p_companyid INT(11),
    IN p_userid INT,
	OUT out_id INT
	)
BEGIN
SET @action = null;
-- create itembatch for eggsdistributiondetail
    
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
       BEGIN
        IF(p_quantity !=0) THEN
	
		INSERT INTO layereggsdistributiondetail 
				(eggscollectionid, shedid, itemtypeid, itemid, quantity, avgweight, statusid, collectiondate, layerbatchid, remark, companyid )
			VALUES 
				(p_eggscollectionid, p_shedid, p_itemtypeid, p_itemid, p_quantity, p_avgweight, p_statusid, p_collectiondate, p_layerbatchid,p_remark, p_companyid);
	  
       SELECT LAST_INSERT_ID() INTO out_id; 
    
    SET @action = 'INSERT';
    END IF;
      END;
	ELSE
        BEGIN
		   IF(p_quantity !=0) THEN
			UPDATE layereggsdistributiondetail
			
				SET eggscollectionid = p_eggscollectionid,	
					shedid = p_shedid,
					itemtypeid = p_itemtypeid,
					itemid = p_itemid,
					quantity = p_quantity,
					avgweight = p_avgweight,
					statusid  = p_statusid ,
					collectiondate = p_collectiondate,
					layerbatchid = p_layerbatchid,
					remark = p_remark,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
				WHERE
					id = p_id
					AND companyid = p_companyid;
				 
			   SET @action = 'UPDATE';    
               
                SELECT LAST_INSERT_ID() INTO out_id; 
		END IF;
	   END;       
	
    END IF;
    SELECT 0 INTO out_id; 
    
    -- update breederbatch status = 223 'complete'
    /*IF (p_statusid = 842) THEN
		UPDATE breederbatch SET statusid = 223 WHERE id = p_breederbatchid;
    END IF;*/
        
   -- record log
   
   IF(@action != null) then
   CALL spc_commonlog_save(p_companyid, 'layereggsdistributiondetail', out_id, @action, p_userid);
    
    END IF;
END;



CREATE PROCEDURE `spc_layereggsdistributiondetail_select`(
  IN p_eggscollectionid INT(11),
  IN p_collectiondate DATE,
  IN p_companyid INT(11)
  )
BEGIN

    SELECT
			ED.id,
            itemtypeid,
			itemid,
            quantity,
            avgweight,
            statusid,
            I.itemname,
			REF.refname,
            ED.remark,
			ED.companyid
         
    FROM
		layereggsdistributiondetail ED
        
        LEFT JOIN item I ON ED.itemid =I.id
        LEFT JOIN `reference` REF ON ED.statusid = REF.id
   	
	WHERE
		ED.eggscollectionid = p_eggscollectionid AND
		ED.collectiondate = p_collectiondate AND
        ED.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_layereggstandardweightandratedetail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM layereggstandardweightandratedetail WHERE id = p_id;

END;



CREATE PROCEDURE `spc_layereggstandardweightandratedetail_save`(
	IN p_id INT(11),
    IN p_eggstandardweightandrateid INT(11),
    IN p_weekno SMALLINT,
    IN p_standardprice DECIMAL(9,3),
    IN p_weight DECIMAL(9,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
    
		INSERT INTO layereggstandardweightandratedetail
			(eggstandardweightandrateid, weekno, standardprice,
			 weight, companyid)
		VALUES
			(p_eggstandardweightandrateid, p_weekno, p_standardprice,
			 p_weight, p_companyid);
            
		SET @action = 'INSERT';
    
    ELSE
    
		UPDATE layereggstandardweightandratedetail
        SET 
			eggstandardweightandrateid = p_eggstandardweightandrateid,
            weekno = p_weekno,
            standardprice = p_standardprice,
			weight = p_weight
            
		WHERE
			id = p_id 
			AND companyid = p_companyid;
                
		SET @action = 'UPDATE';  
    
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    -- CALL spc_commonlog_save(p_companyid, 'layereggstandardweightandratedetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layereggstandardweightandratedetail_search`(
	IN p_eggstandardweightandrateid INT(11)
)
BEGIN

	SELECT id,
		   eggstandardweightandrateid,
           weekno,
           standardprice,
           weight
           
	FROM layereggstandardweightandratedetail
    
    WHERE eggstandardweightandrateid = p_eggstandardweightandrateid;

END;



CREATE PROCEDURE `spc_layereggstandardweightandratedetail_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT id
		   eggstandardweightandrateid,
           weekno,
           standardprice,
           weight
           
	FROM layereggstandardweightandratedetail
    
    WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_layereggstandardweightandrate_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM layereggstandardweightandrate WHERE id = p_id;
    DELETE FROM layereggstandardweightandratedetail WHERE eggstandardweightandrateid = p_id;

END;



CREATE PROCEDURE `spc_layereggstandardweightandrate_save`(
	IN p_id INT(11),
    IN p_itemid INT(11),
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
    
		INSERT INTO layereggstandardweightandrate
			( itemid, fromdate, todate, companyid)
		VALUES
			( p_itemid, p_fromdate, p_todate, p_companyid);
            
		SET @action = 'INSERT';
    
    ELSE
    
		UPDATE layereggstandardweightandrate
        SET
			itemid = p_itemid,
            fromdate = p_fromdate,
            todate = p_todate,
			id = LAST_INSERT_ID(id)
            
		WHERE
			id = p_id 
			AND companyid = p_companyid;
                
		SET @action = 'UPDATE';  
    
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'layereggstandardweightandrate', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layereggstandardweightandrate_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT LESW.id,
		   LESW.itemid,
	       DATE_FORMAT(LESW.fromdate,'%d/%m/%Y') as fromdate,
           DATE_FORMAT(LESW.todate,'%d/%m/%Y') as todate,
           LESW.companyid,
           I.itemname
           
	FROM layereggstandardweightandrate LESW
    LEFT JOIN item I ON I.id = LESW.itemid
    
    WHERE LESW.companyid = p_companyid
    
    ORDER BY LESW.id DESC;

END;



CREATE PROCEDURE `spc_layereggstandardweightandrate_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT LESW.id,
		   LESW.itemid,
           DATE_FORMAT(LESW.fromdate,'%d/%m/%Y') as fromdate,
          DATE_FORMAT(LESW.todate,'%d/%m/%Y') as todate,
           LESW.companyid,
           I.itemname,
           I.itemcode
           
	FROM layereggstandardweightandrate LESW
    LEFT JOIN item I ON I.id = LESW.itemid
    
    WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND LESW.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_layerfeedstandarddetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM layerfeedstandarddetail WHERE id = p_id;
END;



CREATE PROCEDURE `spc_layerfeedstandarddetail_feedconsumed_search`(
 IN p_week INT(11),
 IN p_itemid INT(11),
 IN p_layeritemid INT(11),
 IN p_companyid INT(11)
 )
BEGIN 

	SELECT LFS.id,
           feedconsumed
           
	FROM layerfeedstandard LFS
     LEFT JOIN layerfeedstandarddetail LFSD ON LFSD.layerfeedstandardid =  LFS.id
  
    WHERE 
    LFS.layeritemid = p_layeritemid AND
    LFSD.weeknumber = p_week
    AND LFSD.itemid = p_itemid AND
    LFS.companyid = p_companyid ;
    
END;



CREATE PROCEDURE `spc_layerfeedstandarddetail_save`(
    IN p_id INT,
    IN p_layerfeedstandardid INT(11),
    IN p_weeknumber TINYINT(4),
    IN p_itemid INT(11),
    IN p_feedconsumed DECIMAL(9,3),
	IN p_cumulativefeed DECIMAL(9,3),
    IN p_weeklybodyweight DECIMAL(9,3),
	IN p_weeklygain DECIMAL(9,3),
    IN p_phaseid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerfeedstandarddetail 
				(layerfeedstandardid, weeknumber, itemid, feedconsumed, cumulativefeed, weeklybodyweight, weeklygain, phaseid, companyid)
			VALUES 
				(p_layerfeedstandardid, p_weeknumber, p_itemid, p_feedconsumed, p_cumulativefeed, p_weeklybodyweight, p_weeklygain, p_phaseid, p_companyid);
		
        SET @action = 'INSERT';

	ELSE
    
		UPDATE layerfeedstandarddetail
			SET layerfeedstandardid = p_layerfeedstandardid, 
				weeknumber = p_weeknumber,
				itemid = p_itemid,
                feedconsumed = p_feedconsumed,
                cumulativefeed = p_cumulativefeed,
                weeklybodyweight = p_weeklybodyweight,
                weeklygain = p_weeklygain,
                phaseid = p_phaseid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
             SET @action = 'UPDATE';   
                
	END IF;
  SELECT LAST_INSERT_ID() INTO out_id; 

	-- record log
    CALL spc_commonlog_save(p_companyid, 'layerfeedstandarddetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layerfeedstandarddetail_select`(
	IN p_layerfeedstandardid INT
)
BEGIN

	SELECT
		 LFS.id,
         layerfeedstandardid,
         weeknumber,
		 itemid,
         feedconsumed,
         cumulativefeed,
         weeklybodyweight,
         weeklygain,
         phaseid,
         I.itemname,
         I.itemcode
        
	FROM
		layerfeedstandarddetail LFS
        LEFT JOIN item I ON LFS.itemid = I.id
        
	WHERE
		layerfeedstandardid = p_layerfeedstandardid;

END;



CREATE PROCEDURE `spc_layerfeedstandard_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM layerfeedstandarddetail WHERE layerfeedstandardid = p_id;
	DELETE FROM layerfeedstandard WHERE id = p_id;
END;



CREATE PROCEDURE `spc_layerfeedstandard_save`(
    IN p_id INT,
    IN p_standardname VARCHAR(200),
    IN p_layernametypeid INT(11),
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_layeritemid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerfeedstandard 
				(standardname, layernametypeid, fromdate, todate, layeritemid, companyid)
			VALUES 
				(p_standardname, p_layernametypeid, p_fromdate, p_todate, p_layeritemid, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE layerfeedstandard
			SET standardname = p_standardname, 
				layernametypeid = p_layernametypeid,
                fromdate = p_fromdate,
                todate = p_todate,
                layeritemid = p_layeritemid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'layerfeedstandard', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layerfeedstandard_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 LS.id,
         LS.standardname,
		 LS.layernametypeid,
         LS.layeritemid,
         I.itemname as layeritemname,
         DATE_FORMAT(fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(todate,'%d/%m/%Y') as todate,
         LS.layeritemid
         
	FROM
		layerfeedstandard LS
        
        INNER JOIN item I ON LS.layeritemid = I.id
   	
	WHERE
		LS.companyid = p_companyid
        
	ORDER BY LS.id DESC;
END;



CREATE PROCEDURE `spc_layerfeedstandard_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 LS.id,
         LS.standardname,
		 LS.layernametypeid,
         I.itemname as layeritemname,
         LS.layeritemid,
         DATE_FORMAT(fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(todate,'%d/%m/%Y') as todate
        
	FROM
		layerfeedstandard LS
        INNER JOIN item I ON LS.layeritemid = I.id
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND LS.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_layerflockdetailreport_search`(
    IN p_layerbatchid INT(11),
    IN p_fromdate DATE,
	IN p_todate DATE
 )
BEGIN
	
	SET @defaultfemalechickid = null;
    
       SELECT  
		itemid
		INTO @defaultfemalechickid
	FROM
		layerbatch
        
        WHERE 
            id = p_layerbatchid limit 1;
            
			SELECT 
			LDT.id dailytransactionid,
            DATE_FORMAT(LDT.transactiondate ,'%d/%m/%Y') as `date`, 
			LDT.shedid,
			LS.shedname,
			fnc_lyr_batchwise_malefemaleopbal_tillgivendate(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid, LDT.transactiondate) as femaleopeningbalance,
            fnc_lyr_femaleculls_ongivendate(LDT.id, @defaultfemalechickid) as femaleculls,
			fnc_lyr_femalemortality_ongivendate(LDT.id, @defaultfemalechickid) as femalemortality,
            fnc_lyr_femalesexingerror_ongivendate(LDT.id, @defaultfemalechickid) as sexingerrorqty,
			fnc_lyr_female_transferedquantity(LDT.layerbatchid, LDT.shedid, @defaultfemalechickid, LDT.transactiondate) as femaletransferedquantity,
            fnc_lyr_cummulative_femaleculls(LDT.layerbatchid, LDT.shedid,@defaultfemalechickid, LDT.transactiondate) as cummalefemaleculls,
            fnc_lyr_cummulative_femalemortality(LDT.layerbatchid, LDT.shedid,@defaultfemalechickid, LDT.transactiondate) as cummalefemalemortality,
            fnc_lyr_cummulative_femalesexingerror(LDT.layerbatchid, LDT.shedid,@defaultfemalechickid, LDT.transactiondate) as cummalefemalesexingerror
	FROM
			layerdailytransaction LDT
			LEFT JOIN layershed LS ON LS.id = LDT.shedid
    
	WHERE 
			LDT.layerbatchid = p_layerbatchid AND
			LDT.transactiondate BETWEEN p_fromdate AND p_todate;
    
END;



CREATE PROCEDURE `spc_layerflockgather_report`(
 IN p_batchid INT,
 IN p_companyid INT
 )
BEGIN
	SET @feeditemgroupids = null;
	SET @medicineitemgroupids = null;
	SET @vaccineitemgroupids = null;
	SET @vitaminitemgroupids = null;
    SET @chicksitemgroupids = null;
    SELECT  
		feeditemgroupids,medicineitemgroupids,
		vaccineitemgroupids,vitaminitemgroupids,
        chicksitemgroupids
		INTO @feeditemgroupids,@medicineitemgroupids,
		@vaccineitemgroupids, @vitaminitemgroupids,
        @chicksitemgroupids
        
	FROM
		layersetting
        
        WHERE 
			companyid = p_companyid limit 1;
    	
    SET @itemgroupid = concat(@feeditemgroupids,',',@medicineitemgroupids, ',',@vaccineitemgroupids, ',',@vitaminitemgroupids, ',',@chicksitemgroupids);
    SELECT
		  MT.id,
          MT.tobatchid as batchid,
		  DATE_FORMAT(MT.transferdate,'%d/%m/%Y') as date,
          itemid,
          I.itemgroupid,
          MTD.itemname,
          SUM(transferedquantity) as quantity,
          I.unitcost,
           (SUM(transferedquantity)*I.unitcost)as ammount,
          CONCAT(IG.groupname , ' In') as groupname
       
    FROM
		materialtransfer MT
        
		 LEFT JOIN materialtransferdetails MTD ON MT.id =MTD.materialtransferid
         
         INNER JOIN item I ON  MTD.itemid = I.id  AND  
         FIND_IN_SET(I.itemgroupid,@itemgroupid) 
        LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id 
          
         
	
	WHERE
		MT.tobatchid = p_batchid AND 
		MT.companyid = p_companyid AND transfersource = 505
        group by itemid;
        
            SET @itemgroupid = concat(@feeditemgroupids,',',@medicineitemgroupids, ',',@vaccineitemgroupids, ',',@vitaminitemgroupids,',',@chicksitemgroupids);
    SELECT
			MI.id,
			MI.batchid,
			DATE_FORMAT(MI.issuedate,'%d/%m/%Y') as date,
			itemid,
			I.itemgroupid,
			MID.itemname,
			SUM(issuequantity) as quantity,
			I.unitcost,
			(SUM(issuequantity)*I.unitcost)as ammount,
            CONCAT(IG.groupname ,' Out') as groupname
       
    FROM
		materialissue MI
        
		 LEFT JOIN materialissuedetail MID ON MI.id = MID.materialissueid
         INNER JOIN item I ON  MID.itemid = I.id  AND  
         FIND_IN_SET(I.itemgroupid,@itemgroupid)
         LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id 
         
	
	WHERE
		MI.batchid = p_batchid AND 
		MI.companyid = p_companyid AND issuetypeid = 385
        group by itemid;
END;



CREATE PROCEDURE `spc_layerperformanceobjective_delete`(
IN p_id INT,
IN p_comapnyid INT,
IN p_userid INT
)
BEGIN
	DELETE FROM layerperformanceobjective WHERE id = p_id;
    
       CALL spc_commonlog_save(p_companyid, 'layerperformanceobjective', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_layerperformanceobjective_save`(
	IN p_id INT,
    IN p_itemid INT,
    IN p_ageinweek INT,
    IN p_livability DECIMAL(9,3),
    IN p_cumdepl DECIMAL(9,3),
    IN p_hdppercent DECIMAL(9,3),
    IN p_curhhp DECIMAL(9,3),
	IN p_cumhhp DECIMAL(9,3),
    IN p_feedperdayingm DECIMAL(9,3),
    IN p_curfeedpereggingm DECIMAL(9,3),
    IN p_cumfeedpereggingm DECIMAL(9,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerperformanceobjective
				(itemid , ageinweek , livability , cumdepl , hdppercent , 
                curhhp , cumhhp , feedperdayingm , curfeedpereggingm , 
                cumfeedpereggingm , companyid )
			VALUES 
				(p_itemid , p_ageinweek ,  p_livability , p_cumdepl , p_hdppercent 
					, p_curhhp , p_cumhhp , p_feedperdayingm , 
					p_curfeedpereggingm , p_cumfeedpereggingm ,p_companyid );
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE layerperformanceobjective
			SET 
				itemid	=	p_itemid,
                ageinweek = p_ageinweek, 
                livability = p_livability,
                cumdepl = p_cumdepl, 
                hdppercent = p_hdppercent,
                curhhp = p_curhhp,
                cumhhp = p_cumhhp,
                feedperdayingm = p_feedperdayingm,
                curfeedpereggingm = p_curfeedpereggingm,
                cumfeedpereggingm = p_cumfeedpereggingm,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
    CALL spc_commonlog_save(p_companyid, 'layerperformanceobjective', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_layerperformanceobjective_search`(
IN p_itemid INT,
IN p_companyid INT
)
BEGIN
	SELECT
    id ,
    itemid ,   
    ageinweek , 
    livability ,
    cumdepl ,
    hdppercent ,
    curhhp,
    cumhhp,
    feedperdayingm ,
    curfeedpereggingm ,
    cumfeedpereggingm ,
     companyid 
	FROM layerperformanceobjective
    
    WHERE
    itemid = p_itemid AND
    companyid = p_companyid;
END;



CREATE PROCEDURE `spc_layerperformanceobjective_select`(
IN p_id INT, 
IN p_companyid INT
)
BEGIN
	SELECT id ,
           itemid ,   
		   ageinweek , 
		   livability ,
		   cumdepl ,
		   hdppercent ,
		   curhhp ,
		   cumhhp ,
		   feedperdayingm ,
		   curfeedpereggingm ,
		   cumfeedpereggingm ,
		   companyid
	
    FROM  layerperformanceobjective 
	
    WHERE 
          id = p_id AND
          companyid =p_companyid;

END;



CREATE PROCEDURE `spc_layerphase_byweek`(
  IN p_week INT
  )
BEGIN
 SELECT id , phasename from layerphase
  
   WHERE fromweek <= p_week
   AND toweek >= p_week;
END;



CREATE PROCEDURE `spc_layerphase_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM layerphase WHERE id = p_id;
END;



CREATE PROCEDURE `spc_layerphase_save`(
	IN p_id INT,
    IN p_phasesequence VARCHAR(100),
    IN p_phasename VARCHAR(200),
    IN p_fromweek INT,
    IN p_toweek INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
SET @action = null;
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerphase 
				(phasesequence, phasename, fromweek, toweek, companyid)
			VALUES 
				(p_phasesequence, p_phasename, p_fromweek, p_toweek, p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE layerphase
			SET 
				phasesequence = p_phasesequence, 
                phasename = p_phasename, 
                fromweek = p_fromweek,
                toweek = p_toweek,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';   
    
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layerphase', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_layerphase_search`(
  IN p_companyid INT 
)
BEGIN
	SELECT id ,
		   phasesequence,
           phasename,
           fromweek,
           toweek
            
    FROM  layerphase 
    WHERE 
          companyid = p_companyid;
END;



CREATE PROCEDURE `spc_layerphase_select`(
  IN p_id INT 
)
BEGIN
	SELECT id ,
		   phasesequence,
           phasename,
           fromweek,
           toweek
            
    FROM  layerphase 
    WHERE 
          id = p_id;
END;



CREATE PROCEDURE `spc_layerplacementscheduledetail`(

    IN p_placementscheduleid INT,
    IN p_companyid INT 
    )
BEGIN

        
SELECT  LPD.id as placementscheduledetailid,
		LPD.placementscheduleid,
        LPD.breedershedid,
		LS.shedname as shedname,
        LSL.linename,
        LSL.id as layershedlineid,
        LSL.capacity as linecapacity,
		LPD.proposalquantity,
		LPD.remark,
        GD.itemid,
        (GD.quantity + GD.freequantity) as quantity, 
        G.id as grpono
        
	FROM 
		layerplacementscheduledetail LPD
    
       INNER JOIN layershed BS ON LPD.layershedid= LS.id
       INNER JOIN layershedline LSL ON BSL.breedershedid = LS.id
       INNER JOIN layerplacementschedule LPS ON LPS.id = LPD.placementscheduleid
       INNER JOIN purchaseorder PO ON PO.purchaserequestid = BPS.requestid
       INNER JOIN grpo G ON G.purchaseorderid = PO.id
       INNER JOIN grpodetail GD ON GD.grpoid = G.id

	
	WHERE
		LPD.placementscheduleid = p_placementscheduleid
        AND LPD.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_layerplacementscheduledetail_byrequestid`(
    IN p_placementscheduleid INT,
    IN p_grpono INT,
    IN p_companyid INT 
    )
BEGIN
	
        
SELECT  LPD.id as placementscheduledetailid,
		LPD.placementscheduleid,
        LPD.layershedid,
		LS.shedname as shedname,
        LSL.linename,
        LSL.id as layershedlineid,
        LSL.capacity as linecapacity,
		LPD.proposalquantity,
		LPD.remark,
        GD.itemid,
        (GD.quantity + freequantity) as quantity, 
        G.id as grpono
        
	FROM 
		layerplacementscheduledetail LPD
    
       INNER JOIN layershed LS ON LPD.layershedid= LS.id
       INNER JOIN layershedline LSL ON LSL.layershedid = LS.id
       INNER JOIN layerplacementschedule LPS ON LPS.id = LPD.placementscheduleid
       INNER JOIN purchaseorder PO ON PO.purchaserequestid = LPS.requestid
       INNER JOIN grpo G ON G.purchaseorderid = PO.id
       INNER JOIN grpodetail GD ON GD.grpoid = G.id

	
	WHERE
		LPD.placementscheduleid = p_placementscheduleid
        AND G.id = p_grpono
        AND LPD.companyid = p_companyid ;
        -- GROUP BY LPD.id ;

END;



CREATE PROCEDURE `spc_layerplacementscheduledetail_save`(
    IN p_id INT(11),
	IN p_placementscheduleid INT(11),
	IN p_shedreadyid INT(11),
	IN p_layershedid INT(11),
	IN p_capacity INT(11),
	IN p_proposalquantity INT(11),
	IN p_remark	varchar(200),
	IN p_companyid INT(11),
    IN p_userid INT,
	OUT out_id INT
    )
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerplacementscheduledetail 
				(placementscheduleid, shedreadyid, layershedid, capacity, proposalquantity, remark, companyid)
			VALUES 
				(p_placementscheduleid, p_shedreadyid, p_layershedid, p_capacity, p_proposalquantity, p_remark, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE layerplacementscheduledetail
			SET placementscheduleid = p_placementscheduleid,
                shedreadyid = p_shedreadyid, 
                layershedid = p_layershedid,
                capacity = p_capacity, 
                proposalquantity = p_proposalquantity,
                remark = p_remark,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
			
             
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    -- update layer shed status 923 = 'scheduled'
    UPDATE layershed LS SET statusid = 923 where LS.id = p_layershedid;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layerplacementscheduledetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_layerplacementscheduledetail_search`(
	IN p_placementscheduleid INT,
    IN p_companyid INT 
    )
BEGIN
        
SELECT  LPD.id,
		LPD.placementscheduleid,
		LS.shedname as shedname,
        LPD.shedreadyid,
        LPD.layershedid,
		L.locationname,
        LPD.capacity,
		LPD.proposalquantity,
		LPD.remark,
		LPD.companyid
	FROM 
		layerplacementscheduledetail LPD
    
       INNER JOIN layershed LS ON LPD.layershedid= LS.id
       INNER JOIN location L ON LS.locationid = L.id
	
	
	WHERE
		LPD.placementscheduleid = p_placementscheduleid
        AND LPD.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_layerplacementschedule_availableforbatchplacement`(
  IN p_companyid INT
)
BEGIN

	SELECT LPS.id,
		DATE_FORMAT(schedulefordate,'%d/%m/%Y') as scheduledate,
		LPS.batchid,
		LPS.statusid,
		LPS.createdby,
        UR.fullname AS schedulername,
        REF.refname AS statusname,
        LPD.layershedid,
		LS.locationid,
        L.locationcode,
        L.locationname,
		LPS.companyid
	FROM 
		layerplacementschedule LPS
        LEFT JOIN user UR on LPS.createdby = UR.id
        LEFT JOIN `reference` REF ON LPS.statusid = REF.id
		LEFT JOIN layerplacementscheduledetail LPD ON LPS.id = LPD.placementscheduleid
		INNER JOIN layershed LS ON LPD.layershedid = LS.id
		INNER JOIN location L ON LS.locationid = L.id
        LEFT JOIN layerbatchplacement LBP ON LBP.placementscheduleid = LPS.id
	WHERE
		LPS.companyid = p_companyid
        AND LBP.id is null 
        AND LPS.statusid = 1044 -- Approved
        
	GROUP BY LPS.id
    ORDER BY LPS.id DESC;
END;



CREATE PROCEDURE `spc_layerplacementschedule_delete`(	
IN p_id INT
)
BEGIN

	DELETE FROM layerplacementschedule WHERE id = p_id;

END;



CREATE PROCEDURE `spc_layerplacementschedule_save`(
  IN p_id INT,
  IN p_date date,
  IN P_schedulefordate date,
  IN p_batchid INT,
  IN p_totalshedcapacity INT,
  IN p_proposedquantity INT,
  IN p_approvedby INT,
  IN p_approveddate DATE,
  IN p_remark VARCHAR(200),
  IN p_statusid INT,
  IN p_createdby INT,
  IN p_companyid INT,
  IN p_userid INT,
  OUT out_id INT
)
BEGIN

	SET @action = null;
    SET @defaultfemalechickid = null;
	SET @defaultfemaleitemname = null;
    SET @defaultfemaleitemunitid = null;
    
    -- Get default Male and Female chick item
    SELECT  
			defaultfemalechickid, IT1.itemname, IT1.itemunitid
			INTO @defaultfemalechickid,@defaultfemaleitemname,
            @defaultfemaleitemunitid 
	FROM
		layersetting LS
	INNER JOIN item IT1 ON LS.defaultfemalechickid = IT1.id
    WHERE 
		LS.companyid = p_companyid limit 1;
	
    
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerplacementschedule 
				(date, schedulefordate, batchid, totalshedcapacity, proposedquantity,
				approvedby, approveddate,remark, statusid, createdby, companyid)
			VALUES 
				(p_date, p_schedulefordate, p_batchid, p_totalshedcapacity, p_proposedquantity,
				p_approvedby, p_approveddate, p_remark, p_statusid, p_createdby, p_companyid);
	
                
			SET @action = 'INSERT';

	ELSE
    
		UPDATE layerplacementschedule
			SET date = p_date,
				schedulefordate = p_schedulefordate,
				batchid = p_batchid,
				totalshedcapacity = p_totalshedcapacity,
                proposedquantity = p_proposedquantity,
                approvedby = p_approvedby,
				approveddate = p_approveddate,
                remark = p_remark,
				statusid = p_statusid,
				createdby = p_createdby,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
		
                SET @action = 'UPDATE';
	END IF;
    
    
	SELECT LAST_INSERT_ID() INTO out_id; 
    

		IF (p_statusid = 1044) THEN  -- When status is 702 = 'Approved'
			
            SET @out_purreqid = null;
			CALL spc_purchaserequest_save(
				NULL, null,545, p_schedulefordate, p_createdby, p_approvedby, 
				'Chicks purchase request', 92, null,
				null, p_companyid, p_userid, @out_purreqid
			);
            
             -- SELECT LAST_INSERT_ID() INTO @outpurreqid1; 
				-- insert into purchaserequestDetail for female item 
				-- SET @outpurreqdetailid1 = NULL;
			CALL spc_purchaserequestdetail_save(
				 NULL, @out_purreqid, @defaultfemalechickid, @defaultfemaleitemname, 
                 p_proposedquantity, @defaultfemaleitemunitid,1641, p_companyid, p_userid, 
                 @outpurreqdetailid1
			 );
             
			
                

			-- update the request id in breederplacementschedule table
			UPDATE layerplacementschedule SET requestid = @out_purreqid WHERE id = out_id;
    
		END IF;
    

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'layerplacementschedule', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layerplacementschedule_search`(
  IN p_companyid INT
)
BEGIN

	SELECT LPS.id,
		DATE_FORMAT(schedulefordate,'%d/%m/%Y') as scheduledate,
		LPS.batchid,
		LPS.statusid,
		LPS.createdby,
        REF.refname AS statusname,
        LPD.layershedid,
		LS.locationid,
        L.locationcode,
        L.locationname,
		LPS.companyid
	FROM 
		layerplacementschedule LPS
        LEFT JOIN `reference` REF ON LPS.statusid = REF.id
		LEFT JOIN layerplacementscheduledetail LPD ON LPS.id = LPD.placementscheduleid
		INNER JOIN layershed LS ON LPD.layershedid = LS.id
		 INNER JOIN location L ON LS.locationid = L.id
	WHERE
		LPS.companyid = p_companyid
        
	GROUP BY LPS.id
    ORDER BY LPS.id DESC;

END;



CREATE PROCEDURE `spc_layerplacementschedule_select`(	IN p_schedulefordate DATE,
    IN p_id INT,
    IN p_companyid INT
)
BEGIN

	SELECT LPS.id,
		LS.shedname as shedname,
        LS.locationid,
		L.locationname,
        L.locationcode,
		LPS.batchid,
        LS.capacity,
        totalshedcapacity,
		proposedquantity,
		LPS.statusid,
		DATE_FORMAT(schedulefordate,'%d/%m/%Y') as scheduledate,
        REF.refname AS statusname,
		LPS.remark,
        LPS.date,
		LPS.companyid
	FROM 
		layerplacementschedule LPS
    
       LEFT JOIN layerplacementscheduledetail LSD ON LPS.id = LSD.placementscheduleid
       INNER JOIN layershed LS ON LSD.layershedid= LS.id
       INNER JOIN location L ON LS.locationid = L.id
       LEFT JOIN `reference` REF ON LPS.statusid = REF.id
	
	
	WHERE
		LPS.schedulefordate = p_schedulefordate
        AND LPS.id = p_id
        AND LPS.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_layerreasons_delete`(	
IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN
  	DELETE FROM layerreasons WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'layerreasons', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_layerreasons_save`(
	IN p_id INT,
    IN p_typeid INT,
	IN p_reason VARCHAR(300),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerreasons 
				(typeid, reason, companyid)
			VALUES 
				(p_typeid, p_reason, p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE layerreasons
			SET 
				typeid = p_typeid, 
                reason = p_reason, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';   
    
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layerreasons', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_layerreasons_search`(

 IN p_companyid INT 
)
BEGIN
	SELECT BR.id,
		   typeid,
           R.refname as reasontype,
           reason
            
    FROM  layerreasons BR
    LEFT JOIN `reference` R ON BR.typeid = R.id
    
    WHERE 
          companyid = p_companyid;
END;



CREATE PROCEDURE `spc_layerreasons_select`(
  IN p_id INT 
)
BEGIN
	SELECT BR.id ,
		   BR.typeid,
           R.refname as reasontype,
           reason,
           companyid
            
    FROM  layerreasons BR
    LEFT JOIN `reference` R ON BR.typeid = R.id
    WHERE 
          BR.id = p_id;

END;



CREATE PROCEDURE `spc_layerscheduledetail_delete`(
 IN p_id INT
)
BEGIN
	DELETE FROM layerscheduledetail WHERE id = p_id;
END;



CREATE PROCEDURE `spc_layerscheduledetail_save`(   
	IN p_id INT,
    IN p_layerscheduleid INT(11),
    IN p_itemid INT(11),
    IN p_fromweek TINYINT(4),
    IN p_toweek TINYINT(4),
    IN p_weeknumber TINYINT(4),
    IN p_method VARCHAR(100),
    IN p_quantity DECIMAL(8,3),
    IN p_feedunitid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerscheduledetail 
				(layerscheduleid, itemid, fromweek, toweek, weeknumber, method, quantity, feedunitid, companyid)
			VALUES 
				(p_layerscheduleid, p_itemid, p_fromweek, p_toweek, p_weeknumber, p_method, p_quantity, p_feedunitid, p_companyid);
		
        SET @action = 'INSERT';

	ELSE
    
		UPDATE layerscheduledetail
			SET layerscheduleid = p_layerscheduleid, 
				itemid = p_itemid,
                fromweek = p_fromweek,
                toweek = p_toweek,
                weeknumber = p_weeknumber,
                method = p_method,
                quantity = p_quantity,
                feedunitid = p_feedunitid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
             SET @action = 'UPDATE';   
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	-- record log
   CALL spc_commonlog_save(p_companyid, 'layerscheduledetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layerscheduledetail_search`( 
 IN p_layerscheduleid INT
)
BEGIN
    
    SELECT
		 LS.id,
         layerscheduleid,
		 itemid,
         fromweek,
         toweek,
         weeknumber,
         method,
         quantity,
         feedunitid,
         I.itemname
         
    FROM
		layerscheduledetail LS
        INNER JOIN item I ON LS.itemid = I.id
   	
	WHERE
		layerscheduleid = p_layerscheduleid;
END;



CREATE PROCEDURE `spc_layerscheduledetail_select`(	
 IN p_layerscheduleid INT
)
BEGIN

	SELECT
		 LSD.id,
         layerscheduleid,
		 itemid,
         fromweek,
         toweek,
         weeknumber,
         method,
         quantity,
         feedunitid,
         I.itemname,
         I.itemcode,
         R.refname as itemunit
        
	FROM
		layerscheduledetail LSD
        LEFT JOIN item I ON LSD.itemid = I.id
        LEFT JOIN `reference` R ON LSD.feedunitid = R.id
        
	WHERE
		layerscheduleid = p_layerscheduleid;

END;



CREATE PROCEDURE `spc_layerschedulelocation_delete`(	
 IN p_id INT
)
BEGIN
	DELETE FROM layerschedulelocation WHERE id = p_id;
END;



CREATE PROCEDURE `spc_layerschedulelocation_save`(   
    IN p_id INT,
    IN p_layerscheduleid INT(11),
    IN p_locationid INT(11),
    IN p_companyid INT,
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerschedulelocation 
				(layerscheduleid, locationid, companyid)
			VALUES 
				(p_layerscheduleid, p_locationid, p_companyid);

		SET @action = 'INSERT';

	ELSE
    
		UPDATE layerschedulelocation
			SET layerscheduleid = p_layerscheduleid, 
				locationid = p_locationid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
			SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'layerschedulelocation', out_id, @action, p_userid);


END;



CREATE PROCEDURE `spc_layerschedulelocation_search`( 
  IN p_companyid INT
)
BEGIN
    
    SELECT
		 LSL.id,
         layerscheduleid,
		 locationid,
         L.locationname
        
	FROM
		layerschedulelocation LSL
        LEFT JOIN location L ON L.id = LSL.locationid
        
	WHERE
		LSL.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_layerschedulelocation_select`(
   IN p_layerscheduleid INT
)
BEGIN
    
    SELECT
		 LSL.id,
         layerscheduleid,
		 locationid,
         L.locationname
        
	FROM
		layerschedulelocation LSL
        LEFT JOIN location L ON L.id = LSL.locationid
        
	WHERE
		layerscheduleid = p_layerscheduleid;
END;



CREATE PROCEDURE `spc_layerschedule_delete`(	IN p_id INT
)
BEGIN
	DELETE FROM layerscheduledetail WHERE layerscheduleid = p_id;
    DELETE FROM layerschedulelocation WHERE layerscheduleid = p_id;
	DELETE FROM layerschedule WHERE id = p_id;
END;



CREATE PROCEDURE `spc_layerschedule_save`(
    IN p_id INT,
    IN p_schedulename VARCHAR(200),
    IN p_layerscheduletypeid INT(11),
    IN p_layernametypeid INT(11),
    IN p_fromdate DATE,
    IN p_todate DATE,
    IN p_layeritemid INT(11),
    IN p_locationids VARCHAR(200),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layerschedule 
				(id, schedulename, layerscheduletypeid, layernametypeid, fromdate, todate,layeritemid, locationids, companyid)
			VALUES 
				(p_id, p_schedulename, p_layerscheduletypeid, p_layernametypeid, p_fromdate, p_todate, p_layeritemid, p_locationids,  p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE layerschedule
			SET schedulename = p_schedulename, 
				layerscheduletypeid = p_layerscheduletypeid,
                layernametypeid = p_layernametypeid,
                fromdate = p_fromdate,
                todate = p_todate,
                layeritemid = p_layeritemid,
                locationids = p_locationids,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'layerschedule', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layerschedule_search`(
    IN p_companyid INT,
    IN p_scheduletypeid INT
)
BEGIN
    
    SELECT
		 LS.id,
         LS.schedulename,
		 LS.layerscheduletypeid,
         LS.layernametypeid,
         LS.layeritemid,
         LS.locationids,
         I.itemname as layeritemname,
         DATE_FORMAT(fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(todate,'%d/%m/%Y') as todate
        
	FROM
		layerschedule LS
        
         LEFT JOIN item I ON I.id = LS.layeritemid
   	
	WHERE
		LS.companyid = p_companyid AND layerscheduletypeid = p_scheduletypeid
        
	ORDER BY id DESC;
END;



CREATE PROCEDURE `spc_layerschedule_select`(
  IN p_id INT
)
BEGIN

	SELECT
		 LS.id,
         LS.schedulename,
		 LS.layerscheduletypeid,
         LS.layernametypeid,
         LS.layeritemid,
         LS.locationids,
         I.itemname as layeritemname,
         DATE_FORMAT(fromdate,'%d/%m/%Y') as fromdate,
         DATE_FORMAT(todate,'%d/%m/%Y') as todate
        
	FROM
		layerschedule LS
        
         LEFT JOIN item I ON I.id = LS.layeritemid
   	
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND LS.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_layersetting_eggsitem`( 
  IN p_companyid INT
)
BEGIN

	SET @defaulttableeggsitemid = null;
    SET @defaultcrackedeggsitemid = NULL;
	SET @defaultdamageeggsitemid = NULL;
    SET @defaultpulleteggsitemid = NULL;
    
    SELECT  
		defaulttableeggsitemid,defaultcrackedeggsitemid,defaultdamageeggsitemid,defaultpulleteggsitemid
		INTO @defaulttableeggsitemid,@defaultcrackedeggsitemid,@defaultdamageeggsitemid,@defaultpulleteggsitemid
	FROM
	layersetting
	WHERE companyid = p_companyid;

	-- CREATE TEMPORARY TABLE tmppurregreport
    create temporary table layereggsitem
		(	id INT(11) ,
			itemid INT(11) not null,
            itemtypeid INT(11),
			quantity INT(11) ,
			avgweight INT(11),
			remark VARCHAR(200)
		);
insert into layereggsitem
(itemid, itemtypeid, quantity,avgweight) VALUES
(@defaulttableeggsitemid,1129, 0, 0);
insert into layereggsitem
(itemid, itemtypeid, quantity,avgweight) VALUES
(@defaultcrackedeggsitemid, 1130, 0, 0);
insert into layereggsitem
(itemid, itemtypeid, quantity,avgweight) VALUES
(@defaultdamageeggsitemid, 1131, 0, 0);
insert into layereggsitem
(itemid, itemtypeid, quantity,avgweight) VALUES
(@defaultpulleteggsitemid, 1132, 0, 0);

SELECT EI.id,itemid, itemtypeid, quantity, avgweight, remark, I1.itemname from layereggsitem EI
LEFT JOIN item I1 ON EI.itemid = I1.id;

END;



CREATE PROCEDURE `spc_layersetting_save`(
	IN p_id INT(11),
	IN p_shedrestperiod INT(11),
    IN p_defaultfemalechickid INT(11),
    IN p_defaultfemalechickcost DECIMAL(9,3),
    IN p_defaultwarehouseid INT(11),
    IN p_defaultcoldroomwarehouseid INT(11),
    IN p_labourcharge DECIMAL(9,3),
	IN p_overheadcost DECIMAL(9,3),
    IN p_eggspredictionperbird INT(11),
    IN p_defaulttableeggsitemid INT(11),
    IN p_defaultcrackedeggsitemid INT(11),
    IN p_defaultdamageeggsitemid INT(11),
    IN p_defaultpulleteggsitemid INT(11),
	IN p_standardeggcost DECIMAL(9,3),
    IN p_femalestandardweight DECIMAL(9,3),
	IN p_feeditemgroupids VARCHAR(200),
	IN p_medicineitemgroupids VARCHAR(200),
	IN p_vaccineitemgroupids VARCHAR(200),
	IN p_vitaminitemgroupids VARCHAR(200),
    IN p_chicksitemgroupids VARCHAR(200),
    IN p_eggsitemgroupids VARCHAR(200),
    IN p_layeritemgroupids VARCHAR(200),
    IN p_tableeggscost DECIMAL(9,3),
    IN p_damageeggscost DECIMAL(9,3),
    IN p_crackedeggscost DECIMAL(9,3),
    IN p_pulleteggscost DECIMAL(9,3),
    IN p_costofgoodsoldledgerid INT(11),
    IN p_WIPledgerid INT(11),
    IN p_grpowithoutinvoiceledgerid INT(11),
    IN p_cashledgerid INT(11),
    IN p_freightledgerid INT(11),
    in p_discountledgerid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT,
	OUT out_id INT)
BEGIN
	
	SET @action = null;
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layersetting
				( 
				   shedrestperiod,
				   defaultfemalechickid,
				   defaultfemalechickcost,
				   defaultwarehouseid,
				   defaultcoldroomwarehouseid,
				   labourcharge,
				   overheadcost,
				   eggspredictionperbird,
				   defaulttableeggsitemid,
				   defaultcrackedeggsitemid,
				   defaultdamageeggsitemid,
				   defaultpulleteggsitemid,
				   standardeggcost,
				   femalestandardweight,
				   feeditemgroupids,
				   medicineitemgroupids,
				   vaccineitemgroupids,
				   vitaminitemgroupids,
                   chicksitemgroupids,
                   eggsitemgroupids,
                   layeritemgroupids,
                   tableeggscost,
                   damageeggscost,
                   crackedeggscost,
                   pulleteggscost,
                   costofgoodsoldledgerid,
				   WIPledgerid,
                   grpowithoutinvoiceledgerid,
				   cashledgerid,
				   freightledgerid,
				   discountledgerid,
				   companyid 
                 )
			VALUES 
				  ( 
					p_shedrestperiod,
					p_defaultfemalechickid,
					p_defaultfemalechickcost,
					p_defaultwarehouseid,
					p_defaultcoldroomwarehouseid,
					p_labourcharge,
					p_overheadcost,
					p_eggspredictionperbird,
					p_defaulttableeggsitemid,
					p_defaultcrackedeggsitemid,
					p_defaultdamageeggsitemid,
					p_defaultpulleteggsitemid,
					p_standardeggcost,
					p_femalestandardweight,
					p_feeditemgroupids,
					p_medicineitemgroupids,
					p_vaccineitemgroupids,
					p_vitaminitemgroupids,
                    p_chicksitemgroupids,
                    p_eggsitemgroupids,
                    p_layeritemgroupids,
					p_tableeggscost,
				    p_damageeggscost,
                    p_crackedeggscost,
                    p_pulleteggscost,
                    p_costofgoodsoldledgerid,
					p_WIPledgerid,
                    p_grpowithoutinvoiceledgerid,
				    p_cashledgerid,
				    p_freightledgerid,
				    p_discountledgerid,
					p_companyid );
		
        SET @action = 'INSERT';
        ELSE
    
		UPDATE layersetting
				SET shedrestperiod = p_shedrestperiod,
                defaultfemalechickid = p_defaultfemalechickid,
                defaultfemalechickcost = p_defaultfemalechickcost,
                defaultfemalechickcost = p_defaultfemalechickcost,
                defaultwarehouseid = p_defaultwarehouseid,
                defaultcoldroomwarehouseid = p_defaultcoldroomwarehouseid,
                labourcharge = p_labourcharge,
                overheadcost = p_overheadcost,
				eggspredictionperbird = p_eggspredictionperbird,
                defaulttableeggsitemid = p_defaulttableeggsitemid,
                defaultcrackedeggsitemid = p_defaultcrackedeggsitemid,
                defaultdamageeggsitemid = p_defaultdamageeggsitemid,
                defaultpulleteggsitemid = p_defaultpulleteggsitemid,
                standardeggcost = p_standardeggcost,
                femalestandardweight = p_femalestandardweight,
                feeditemgroupids = p_feeditemgroupids,
                medicineitemgroupids = p_medicineitemgroupids,
                vaccineitemgroupids = p_vaccineitemgroupids,
                vitaminitemgroupids = p_vitaminitemgroupids,
                chicksitemgroupids = p_chicksitemgroupids,
                eggsitemgroupids = p_eggsitemgroupids,
                layeritemgroupids = p_layeritemgroupids,
                tableeggscost = p_tableeggscost,
                damageeggscost = p_damageeggscost,
                crackedeggscost = p_crackedeggscost,
                pulleteggscost = p_pulleteggscost,
                costofgoodsoldledgerid = p_costofgoodsoldledgerid,
			    WIPledgerid = p_WIPledgerid,
				grpowithoutinvoiceledgerid = p_grpowithoutinvoiceledgerid,
				cashledgerid = p_cashledgerid,
				freightledgerid = p_freightledgerid,
				discountledgerid = p_discountledgerid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';     
         
	END IF;
      SELECT LAST_INSERT_ID() INTO out_id;
      
      -- record log
    --  CALL spc_commonlog_save(p_companyid, 'layersetting', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_layersetting_search`(
	IN p_companyid INT
)
BEGIN
 
    SELECT
		LS.id ,
		LS.shedrestperiod ,
		LS.defaultfemalechickid ,
		LS.defaultfemalechickcost,
		LS.defaultwarehouseid ,
		LS.defaultcoldroomwarehouseid ,
		LS.labourcharge,
		LS.overheadcost,
		LS.eggspredictionperbird ,
		LS.defaulttableeggsitemid ,
		LS.defaultcrackedeggsitemid ,
		LS.defaultdamageeggsitemid ,
		LS.defaultpulleteggsitemid ,
		LS.standardeggcost ,
		LS.femalestandardweight ,
		LS.feeditemgroupids,
		LS.medicineitemgroupids,
		LS.vaccineitemgroupids,
		LS.vitaminitemgroupids,
        LS.chicksitemgroupids,
        LS.eggsitemgroupids,
        LS.layeritemgroupids,
        LS.tableeggscost,
        LS.damageeggscost,
        LS.crackedeggscost,
        LS.pulleteggscost,
		I1.itemcode as femaleitemcode,
        I1.itemname as defaultfemalechickitem,
		W.warehousename as defaultwarehousename,
	    W1.warehousename as defaultcoldroomwarehousename,
		I2.itemname as defaultpulleteggsitemname,
		I3.itemname as defaulttableeggsitemname,
		I4.itemname as defaultcrackedeggsitemname,
		I5.itemname as defaultdamageeggsitemname,
        LS.costofgoodsoldledgerid,
		COA1.coaname as goodledgername,
		COA1.glcode as goodglcode,
		COA2.coaname as birdledgername,
		COA2.glcode as birdglcode,
		COA3.coaname as grpowithoutinvoiceledgername,
		COA3.glcode as grpowithoutinvoiceglcode,
		COA4.coaname as cashledgername,
		COA4.glcode as cashglcode,
		COA5.coaname as freightledgername,
		COA5.glcode as freightglcode,
		COA6.coaname as discountledgername,
		COA6.glcode as discountglcode,
		LS.cashledgerid,
		LS.freightledgerid,
		LS.WIPledgerid,
		LS.grpowithoutinvoiceledgerid,
		LS.cashledgerid,
		LS.freightledgerid,
		LS.discountledgerid
     
    FROM
		layersetting LS
            LEFT JOIN item I1 ON LS.defaultfemalechickid = I1.id
            LEFT JOIN warehouse W ON W.id = LS.defaultwarehouseid
            LEFT JOIN warehouse W1 ON W1.id = defaultcoldroomwarehouseid
            LEFT JOIN item I3 ON I3.id = LS.defaulttableeggsitemid
            LEFT JOIN item I4 ON I4.id = LS.defaultcrackedeggsitemid
            LEFT JOIN item I5 ON I5.id = LS.defaultdamageeggsitemid
            LEFT JOIN item I2 ON I2.id = LS.defaultpulleteggsitemid
    
			LEFT JOIN chartofaccount COA1 ON COA1.id = LS.costofgoodsoldledgerid
			LEFT JOIN chartofaccount COA2 ON COA2.id = LS.WIPledgerid
			LEFT JOIN chartofaccount COA3 ON COA3.id = LS.grpowithoutinvoiceledgerid
            LEFT JOIN chartofaccount COA4 ON COA4.id = LS.cashledgerid
			LEFT JOIN chartofaccount COA5 ON COA5.id = LS.freightledgerid
            LEFT JOIN chartofaccount COA6 ON COA6.id = LS.discountledgerid
    
	WHERE
		LS.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_layershedforreport_search`(
	IN p_layerbatchid INT(11)
)
BEGIN
	
SELECT   layershedid,shedname

FROM (
SELECT 
           LBPD.layershedid,
		   LS.shedname
          
           
			FROM layerbatchplacement LBP
			
    LEFT JOIN layerbatchplacementdetail LBPD ON LBP.id = LBPD.layerbatchplacementid
    LEFT JOIN layershed LS ON LS.id = LBPD.layershedid
    
    WHERE LBP.layerbatchid = p_layerbatchid
    
    GROUP BY LBPD.layershedid
            
            
  UNION ALL
  
   SELECT 
             LBTD.toshedid as layershedid,
             LS.shedname
             
            
	FROM layerbatchtransfer LBT
     LEFT JOIN layerbatchtransferdetail LBTD ON LBT.id = LBTD.layerbatchtransferid
     LEFT JOIN layershed LS ON LS.id = LBTD.toshedid
     
    WHERE LBT.layerbatchid = p_layerbatchid
    
     GROUP BY LBTD.toshedid
       
      ) as temp
      
      GROUP BY layershedid;
       
END;



CREATE PROCEDURE `spc_layershedline_delete`(	
IN p_id INT
)
BEGIN
	DELETE FROM layershedline WHERE id = p_id;
END;



CREATE PROCEDURE `spc_layershedline_remainingcapacity`(

	IN p_tolineid INT(11)
)
BEGIN
	
    SET @tolinecapacity = NULL;
	SET @tolineusedquantity = NULL;
    
	if exists(SELECT * FROM layerbatchtransferdetail WHERE tolineid = p_tolineid) then
    
		SELECT LSL.capacity, IFNULL(SUM(LBTD.quantity), 0) INTO @tolinecapacity, @tolineusedquantity
		FROM layerbatchtransferdetail LBTD
        LEFT JOIN layershedline LSL ON LSL.id = LBTD.tolineid
		WHERE 
				 LBTD.tolineid = p_tolineid;
    
    else
    
		SELECT capacity, 0 INTO @tolinecapacity, @tolineusedquantity
		FROM layershedline 
		WHERE 
				 id = p_tolineid;
    
    end if;
    
  select IFNULL((@tolinecapacity - @tolineusedquantity), 0) as remainingcapacity;
		 -- IFNULL((@tolinecapacity), 0) as tolinecapacity;

END;



CREATE PROCEDURE `spc_layershedline_save`(
	IN p_id INT,
    IN p_layershedid INT,
    IN p_linename VARCHAR(50),
    IN p_description VARCHAR(500),
    IN p_capacity INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layershedline
				(layershedid, linename, description, capacity, companyid)
			VALUES 
				(p_layershedid, p_linename, p_description, p_capacity, p_companyid);
		
            SET @action = 'INSERT';
		
	ELSE
    
		UPDATE layershedline
				SET layershedid = p_layershedid, 
                linename = p_linename, 
                description = p_description,
                capacity = p_capacity,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;

	SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layershedline', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_layershedline_search`(
IN p_layershedid INT 
)
BEGIN
	SELECT id,
		   linename,
           layershedid,
           description,
           capacity
            
    FROM  layershedline
    WHERE 
          layershedid = p_layershedid;
END;



CREATE PROCEDURE `spc_layershedline_select`(
IN p_id INT 
)
BEGIN
	SELECT id,
           layershedid,
		   linename,
		   description,
           capacity
            
    FROM  layershedline
    WHERE 
          id = p_id;
END;



CREATE PROCEDURE `spc_layershedparameter_byparametertype_search`(
    IN p_companyid INT,
    IN p_parametertypeid INT
)
BEGIN

	SELECT 
		 id,
         parametername,
         requiredratio,
         ismandatory
	FROM
		layershedparameter 
	
	WHERE
		companyid = p_companyid AND
        parametertypeid = p_parametertypeid;
END;



CREATE PROCEDURE `spc_layershedparameter_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM layershedparameter WHERE id = p_id;
END;



CREATE PROCEDURE `spc_layershedparameter_save`(
	IN p_id INT,
    IN p_parametertypeid INT,
    IN p_parametername VARCHAR(200),
    IN p_requiredratio VARCHAR(50),
    IN p_ismandatory TINYINT(4),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layershedparameter
				(id, parametertypeid, parametername, requiredratio, ismandatory, companyid)
			VALUES 
				(p_id, p_parametertypeid, p_parametername, p_requiredratio, p_ismandatory, p_companyid);
		
        SET @action = 'INSERT';
        
	ELSE
    
		UPDATE layershedparameter
				SET parametertypeid = p_parametertypeid, 
                parametername = p_parametername, 
                requiredratio = p_requiredratio,
                ismandatory = p_ismandatory,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'layershedparameter', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layershedparameter_select`(
  IN p_id INT 
)
BEGIN
	SELECT id,
		   parametertypeid,
		   parametername,
           requiredratio,
           ismandatory
            
    FROM  layershedparameter 
    WHERE 
          id = p_id;
END;



CREATE PROCEDURE `spc_layershedparameter_shedready`(

	IN p_companyid INT
)
BEGIN

	SELECT id as shedparameterid,
		   parametertypeid,
		   parametername,
           requiredratio,
           ismandatory
            
    FROM  layershedparameter 
    WHERE 
          companyid = p_companyid;
END;



CREATE PROCEDURE `spc_layershedreadydetail_delete`(
  IN p_id INT
)
BEGIN
	DELETE FROM layershedreadydetail WHERE id = p_id;
END;



CREATE PROCEDURE `spc_layershedreadydetail_save`(
	IN p_id INT,
	IN p_layershedreadyid INT,
	IN p_parametertypeid INT,
	IN p_shedparameterid INT,
	IN p_isapplied TINYINT,
	IN p_remark VARCHAR(200),
	IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layershedreadydetail
				(layershedreadyid, parametertypeid, shedparameterid, isapplied,
					remark, companyid)
			VALUES 
				(p_layershedreadyid, p_parametertypeid, p_shedparameterid, p_isapplied,
					p_remark, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE layershedreadydetail
			SET 
				layershedreadyid = p_layershedreadyid, 
                parametertypeid = p_parametertypeid, 
                shedparameterid = p_shedparameterid, 
                isapplied = p_isapplied,
				remark = p_remark, 
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layershedreadydetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_layershedreadydetail_search`(
IN p_layershedreadyid INT
)
BEGIN

	SELECT id,
		layershedreadyid,
		LSD.parametertypeid,
        REF.refname as parametertypename,
		shedparameterid,
        SP.parametername,
		isapplied,
		remark
	FROM 
		layershedreadydetail LSD
        LEFT JOIN `reference` REF ON LSD.layershedreadyid = REF.id
        LEFT JOIN shedparameter SP ON LSD.parametertypeid = SP.id
	WHERE
		layershedreadyid= p_layershedreadyid;
END;



CREATE PROCEDURE `spc_layershedreadydetail_select`(	
IN p_layershedreadyid INT
)
BEGIN

	SELECT
		LR.id,
		layershedreadyid,
		LR.parametertypeid,
		shedparameterid,
        LP.parametername,
        LP.requiredratio,
		isapplied,
        ismandatory,
		remark
		
        
	FROM
		layershedreadydetail LR
        LEFT JOIN layershedparameter LP ON LP.id = LR.shedparameterid
        
        
	WHERE
		layershedreadyid = p_layershedreadyid;

END;



CREATE PROCEDURE `spc_layershedready_byloation_search`(
 IN p_locationid INT,
 IN p_companyid INT
)
BEGIN

	SELECT 
    
		shedreadyid,
        shedreadydata.layershedid,
        locationname,
        locationid,
        shedname,
        capacity,
        createdby,
		statusid,
        statusname,
        username,
		companyid,
        DATE_FORMAT( maxbatch.placementdate,'%d/%m/%Y') as prevbatchdate,
		maxbatch.quantity as prevbatchquantity,
		'NO' as isscheduled
    
    
    FROM  (

				SELECT
					LR.id as shedreadyid,
					LR.layershedid,
					L.locationname,
					S.locationid,
					S.shedname,
					S.capacity,
					LR.createdby,
					LR.statusid,
					REF.refname AS statusname,
					PR.partyname AS username,
					LR.companyid,
                     S.statusid as 'No'
				    -- CASE WHEN  LPSD.layershedid IS NULL THEN 'No' ELSE 'Yes' END AS isscheduled
					
				FROM
					layershedready LR
					LEFT JOIN layershed S ON LR.layershedid = S.id 
					LEFT JOIN location L ON S.locationid = L.id
					LEFT JOIN partner PR ON LR.createdby = PR.id
					LEFT JOIN `reference` REF ON LR.statusid = REF.id
					-- LEFT JOIN layerplacementscheduledetail LPSD ON  LPSD.shedreadyid = LR.id 
					
					-- LEFT JOIN BATCHTABLE BPS ON  SR.breedershedid = BPS.breedershedid
					-- AND BPS.id = (select MAX(ID) FROM BATCHTABLE)
				
				WHERE
					LR.companyid = p_companyid AND
					S.statusid = 922 AND
					LR.statusid = 1022 AND -- 'Approved'
					S.locationid = p_locationid
					
					
				ORDER BY 
					LR.createddate DESC

		) AS shedreadydata

			LEFT JOIN
					(
						SELECT LBP.id, LBP.placementdate, LBPD.layershedid, SUM(LBPD.quantity) AS quantity 
							FROM layerbatchplacement LBP
							INNER JOIN layerbatchplacementdetail LBPD ON LBPD.layerbatchplacementid = LBP.id
						GROUP BY LBP.id, LBP.placementdate, LBPD.layershedid
						
			) maxbatch ON maxbatch.layershedid = shedreadydata.layershedid

	
	ORDER BY shedname;
    
	-- S.status in [11, 12] -- Available, Pending Approval
	-- AND (BPS.id IS NULL OR (BPS.status in [2, 4] )) -- Cancelled, Processed
    
END;



CREATE PROCEDURE `spc_layershedready_byshedid`(
 IN p_layershedid INT,
    IN p_companyid INT
)
BEGIN

	SELECT LSR.id,
		LSR.layershedid,
		batchid,
		DATE_FORMAT(batchstartdate,'%d/%m/%Y') as batchstartdate,
		restperiod,
		createdby,
		DATE_FORMAT(createddate,'%d/%m/%Y') as createddate,
		DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
		LSR.statusid,
        L.locationname,
        S.shedname,
        LSR.createdby,
        P.partyname
		
	FROM 
		layershedready LSR
        LEFT JOIN breedershed S ON LSR.layershedid = S.id
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN partner P ON P.id = LSR.createdby
    WHERE 
         LSR.layershedid = p_layershedid
          and SR.companyid = p_companyid;
		
END;



CREATE PROCEDURE `spc_layershedready_delete`(IN p_id INT
)
BEGIN
	DELETE FROM layershedready WHERE id = p_id;
    DELETE FROM layershedreadydetail WHERE layershedreadyid = p_id;
END;



CREATE PROCEDURE `spc_layershedready_save`(IN p_id int,
	IN p_layershedid int,
	IN p_batchid int,
	IN p_batchstartdate date,
	IN p_restperiod int,
	IN p_createdby int,
	IN p_createddate date,
	IN p_finalcleaningdate date,
	IN p_statusid int,
	IN p_companyid int,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layershedready
				(layershedid, batchid, batchstartdate, restperiod,
					createdby, createddate, finalcleaningdate, statusid, companyid)
			VALUES 
				(p_layershedid, p_batchid, p_batchstartdate, p_restperiod,
					p_createdby, p_createddate, p_finalcleaningdate, p_statusid, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE layershedready
			SET 
				layershedid = p_layershedid,
				batchid = p_batchid,
				batchstartdate = p_batchstartdate,
				restperiod = p_restperiod,
				createdby = p_createdby,
				createddate = p_createddate,
				finalcleaningdate = p_finalcleaningdate,
				statusid = p_statusid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- Update shed status to 12 = 'Shed Ready'
    UPDATE layershed SET statusid = 922 WHERE id = p_layershedid;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'layershedready', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_layershedready_search`(  

   IN p_companyid INT
)
BEGIN
    
    SELECT
		LR.id,
		LR.layershedid,
        L.locationname,
        S.shedname,
		batchid,
        BT.batchname,
		DATE_FORMAT(batchstartdate,'%d/%m/%Y') as batchstartdate,
		restperiod,
		createdby,
        UR.fullname AS username,
		DATE_FORMAT(LR.createddate,'%d/%m/%Y') as createddate,
		DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
		LR.statusid,
        REF.refname AS statusname,
		LR.companyid
        
	FROM
		layershedready LR
        LEFT JOIN layershed S ON LR.layershedid = S.id
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN breederbatch BT ON LR.batchid = BT.id
        LEFT JOIN user UR on LR.createdby = UR.id
        LEFT JOIN `reference` REF ON LR.statusid = REF.id
   	
	WHERE
		LR.companyid = p_companyid
        
	ORDER BY LR.id DESC;
END;



CREATE PROCEDURE `spc_layershedready_select`(
  IN p_id INT
)
BEGIN

	SELECT LR.id,
		LR.layershedid,
		batchid,
		DATE_FORMAT(batchstartdate,'%d/%m/%Y') as batchstartdate,
		restperiod,
		createdby,
		DATE_FORMAT(createddate,'%d/%m/%Y') as createddate,
		DATE_FORMAT(finalcleaningdate,'%d/%m/%Y') as finalcleaningdate,
		LR.statusid,
        L.locationname,
        S.shedname,
        LR.createdby,
        P.partyname
		
	FROM 
		layershedready LR
        LEFT JOIN layershed S ON LR.layershedid = S.id
        LEFT JOIN location L ON S.locationid = L.id
        LEFT JOIN party P ON P.id = LR.createdby
    WHERE 
          LR.id = p_id;
END;



CREATE PROCEDURE `spc_layershedtype_delete`(
	IN p_id INT
)
BEGIN
	IF EXISTS (SELECT shedtypeid FROM layershed
		WHERE shedtypeid = p_id) THEN
		BEGIN
			SELECT 1 as `status`;
		END;
	ELSE
	   BEGIN
		SELECT 0 as `status`;
		DELETE FROM layershedtype WHERE id = p_id;
		END;
	END IF ;
END;



CREATE PROCEDURE `spc_layershedtype_save`(
	IN p_id INT,
    IN p_typename VARCHAR(100),
    IN p_description VARCHAR(300),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layershedtype 
				(id, typename, description, companyid)
			VALUES 
				(p_id, p_typename, p_description, p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE layershedtype
			SET typename = p_typename, 
                description = p_description, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';     
    
	END IF;
    
	SELECT LAST_INSERT_ID() INTO out_id;

	
	-- RECORD LOG
	CALL spc_commonlog_save(p_companyid, 'layershedtype', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layershedtype_search`(
  IN p_companyid INT 
)
BEGIN
	SELECT id ,
		   typename,
           description
            
    FROM  layershedtype 
    WHERE 
          companyid = p_companyid;
END;



CREATE PROCEDURE `spc_layershedtype_select`(
  IN p_id INT 
)
BEGIN
	SELECT id ,
		   typename,
           description
            
    FROM  layershedtype
    WHERE 
          id = p_id;
END;



CREATE PROCEDURE `spc_layershed_batchwise_search`(
    IN p_companyid INT,
    IN p_layerbatchid INT
)
BEGIN


        
	SELECT 
    
		LBB.layerbatchid,
        LS.id as shedid,
        LS.shedname,
        LS.capacity,
		L.locationname,
        LS.warehouseid as warehouseid,
        LS.warehousebinid 
        
	FROM
		layerbatchbalance LBB
        
        LEFT JOIN layershed LS ON LS.id = LBB.layershedid
        LEFT JOIN location L ON LS.locationid = L.id
		
	WHERE
        LBB.layerbatchid = p_layerbatchid
		AND LBB.companyid = p_companyid
        AND LBB.quantity != 0
        GROUP BY LBB.layershedid;
        
END;



CREATE PROCEDURE `spc_layershed_bystatusandlocation_search`(
  IN p_companyid INT,
  IN p_locationid INT(11),
  IN p_statusid INT
 )
BEGIN
	SELECT
		LS.id,
        LS.statusid,
        active,
        L.locationcode,
        L.locationname,
        shedname,
		R.refname as statusname
        
	FROM
		layershed LS
        
	INNER JOIN location L ON LS.locationid = L.id
    INNER JOIN `reference` R ON LS.statusid = R.id

WHERE
		LS.companyid = p_companyid AND
        LS.statusid = p_statusid
        AND LS.locationid = p_locationid;
        
END;



CREATE PROCEDURE `spc_layershed_delete`(	
 IN p_id INT
)
BEGIN
SET @Statusid = null;
SELECT statusid INTO @Statusid
 from layershed 
 where id = p_id AND statusid = 921;
 IF(@Statusid IS NOT NUll) THEN
 BEGIN
     SELECT 1 as yes;
    DELETE FROM layershedline WHERE layershedid = p_id;
	DELETE FROM layershed WHERE id = p_id;
 END;
 ELSE
  BEGIN
		SELECT 0 as yes;
			
		 END;
	END IF;
           
    END;



CREATE PROCEDURE `spc_layershed_locationwise_search`(
    IN p_companyid INT,
    IN p_locationid INT
)
BEGIN

	SELECT 
		LS.id as shedid,
        LS.statusid,
        LS.capacity,
        LS.shedname,
        R.refname
        
        
	FROM
		layershed LS
        LEFT JOIN `reference` R ON R.id = LS.statusid
      
    
	WHERE
		 LS.statusid = 921 AND
        LS.locationid = p_locationid
        and LS.active = 1;
END;



CREATE PROCEDURE `spc_layershed_save`(
	IN p_id INT,
    IN p_locationid INT,
    IN p_warehouseid INT(11),
    IN p_warehousebinid INT(11),
	IN p_shedtypeid INT(11),
    IN p_shedname VARCHAR(50),
    IN p_capacity INT,
    IN p_statusid VARCHAR(200),
    IN p_active TINYINT(4),
    IN p_shedlengthinft Decimal(9,3),
    IN p_shedwidthinft Decimal(9,3),
    IN p_totalsquareft decimal(9,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action1 = null;
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO layershed
				(locationid, warehouseid, warehousebinid, shedtypeid, shedname, capacity, statusid, active, shedlengthinft, shedwidthinft, totalsquareft, companyid)
			VALUES 
				(p_locationid, p_warehouseid, NULL, p_shedtypeid, p_shedname, p_capacity, p_statusid, p_active, p_shedlengthinft, p_shedwidthinft, p_totalsquareft, p_companyid);
			
            SET @action1 = 'INSERT';
            
	ELSE
    
		UPDATE layershed
				SET
                locationid = p_locationid, 
				warehouseid = p_warehouseid,
                warehousebinid = p_warehousebinid,
                shedtypeid = p_shedtypeid,
                shedname = p_shedname, 
                capacity = p_capacity,
				statusid = p_statusid,
                active = p_active,
                shedlengthinft = p_shedlengthinft,
                shedwidthinft = p_shedwidthinft,
                totalsquareft = p_totalsquareft,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action1 = 'UPDATE';     
              

    
   
    END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
     
     IF(NULLIF(p_id, '0') IS NULL) THEN
    
      -- create one warehousebin for current shed
		SET @out_warehousebinid = NULL;
		CALL spc_warehousebin_save(
			NULL, p_warehouseid, CONCAT(p_shedname,'-BIN'), p_shedname,
			p_companyid, 0, p_userid, @out_warehousebinid
		);
		
		-- update warehouse bin id 
		
		UPDATE layershed SET warehousebinid = @out_warehousebinid WHERE id = out_id;
            
	END IF;
    	
   -- record log
  CALL spc_commonlog_save(p_companyid, 'layershed', out_id, @action1, p_userid);
END;



CREATE PROCEDURE `spc_layershed_search`(
   IN p_companyid INT
)
BEGIN

	SELECT 
		LS.id,
        LS.statusid,
        LS.active,
        L.locationcode,
        L.locationname,
        LS.shedname,
		LS.warehouseid,
        LS.warehousebinid,
        WB.binname,
        LS.shedtypeid
        -- R.refname
        
	FROM
		layershed LS
        
	INNER JOIN location L ON LS.locationid = L.id
    LEFT JOIN warehousebin WB ON WB.id = LS.warehousebinid
   
    -- INNER JOIN reference R ON BS.statusid = R.id
    
	WHERE
		LS.companyid = p_companyid
        
	ORDER BY LS.id DESC;
END;



CREATE PROCEDURE `spc_layershed_select`(
IN p_id INT
)
BEGIN

	SELECT 
		LS.id,
		LS.locationid,
        L.locationcode,
        shedname,
        capacity,
        LS.active,
        statusid,
        LS.warehouseid,
        LS.warehousebinid,
        L.locationname,
        W.warehousename,
        W.warehousecode,
		WB.binname,
	    WB.bincode,
        LS.shedtypeid,
        LS.shedlengthinft,
        LS.shedwidthinft,
        LS.totalsquareft,
        LS.companyid
        
	FROM
		layershed LS
        
    INNER JOIN location L ON LS.locationid = L.id
	LEFT JOIN warehouse W ON LS.warehouseid = W.id
	LEFT JOIN warehousebin WB ON WB.id = LS.warehousebinid
	WHERE
	    LS.id = p_id;
		
END;



CREATE PROCEDURE `spc_layer_batchbridopeningbalance_detail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM layer_batchbridopeningbalance_detail WHERE id = p_id;

END;



CREATE PROCEDURE `spc_layer_batchbridopeningbalance_detail_save`(
   IN p_id INT(11),
   IN p_layerbatchopeningid INT(11),
   IN p_itemtype TINYINT(4),
   IN p_itemid INT(11),
   IN p_placeqty DECIMAL(12,3),
   IN p_rate DECIMAL(9,3),
   IN p_birdvalue DECIMAL(12,3),
   IN p_liveqty DECIMAL(12,3),
   IN p_mortality INT(11),
   IN p_culls INT(11),
   IN p_sexingerror INT(11),
   IN p_cullssaleqty INT(11),
   IN p_sexingerrorsaleqty INT(11),
   IN p_regularsale INT(11),
   IN p_totalsale INT(11),
   IN p_goodeggsqty INT(11),
   IN p_flooreggsqty INT(11),
   IN p_othereggsqty INT(11),
   IN p_totaleggs INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		INSERT INTO layer_batchbridopeningbalance_detail(
           id,
		   layerbatchopeningid,
           itemtype,
		   itemid,
		   placeqty,
           rate,
           birdvalue,
		   liveqty,
		   mortality,
		   culls,
           sexingerror,
		   cullssaleqty,
           sexingerrorsaleqty,
		   regularsale,
		   totalsale,
		   goodeggsqty,
		   flooreggsqty,
           othereggsqty,
		   totaleggs,
		   companyid
        )
        
        VALUES(
		   p_id,
		   p_layerbatchopeningid,
           p_itemtype,
		   p_itemid,
		   p_placeqty,
           p_rate,
           p_birdvalue,
		   p_liveqty,
		   p_mortality,
		   p_culls,
           p_sexingerror,
		   p_cullssaleqty,
           p_sexingerrorsaleqty,
		   p_regularsale,
		   p_totalsale,
		   p_goodeggsqty,
		   p_flooreggsqty,
           p_othereggsqty,
		   p_totaleggs,
		   p_companyid
        );
        
        SET @action = 'INSERT';
    
    ELSE
    
		UPDATE layer_batchbridopeningbalance_detail
        SET 
		   layerbatchopeningid = p_layerbatchopeningid,
           itemtype = p_itemtype,
		   itemid = p_itemid,
		   placeqty = p_placeqty,
           rate = p_rate,
           birdvalue = p_birdvalue,
		   liveqty = p_liveqty,
		   mortality = p_mortality,
		   culls = p_culls,
           sexingerror = p_sexingerror,
		   cullssaleqty = p_cullssaleqty,
           sexingerrorsaleqty = p_sexingerrorsaleqty,
		   regularsale = p_regularsale,
		   totalsale = p_totalsale,
		   goodeggsqty = p_goodeggsqty,
		   flooreggsqty = p_flooreggsqty,
           othereggsqty = p_othereggsqty,
		   totaleggs = p_totaleggs,
		   companyid = p_companyid,
           id = LAST_INSERT_ID(id)
		WHERE
				id = p_id
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
    
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'layer_batchbridopeningbalance_detail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layer_batchbridopeningbalance_detail_search`(
	IN p_layerbatchopeningid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT 
		   layerbatchopeningid,
		   itemid,
		   placeqty,
           rate,
           birdvalue,
		   liveqty,
		   mortality,
		   culls,
           sexingerror,
		   cullssaleqty,
           sexingerrorsaleqty,
		   regularsale,
		   totalsale,
		   goodeggsqty,
		   flooreggsqty,
           othereggsqty,
		   totaleggs
    
    FROM layer_batchbridopeningbalance_detail
    
    WHERE layerbatchopeningid = p_layerbatchopeningid AND companyid = p_companyid;


END;



CREATE PROCEDURE `spc_layer_batchbridopeningbalance_detail_select`(
	IN p_companyid INT(11),
    IN p_id INT(11)
)
BEGIN

	SELECT 
		  layerbatchopeningid,
		   itemid,
		   placeqty,
           rate,
           birdvalue,
		   liveqty,
		   mortality,
		   culls,
		   sexingerror,
		   cullssaleqty,
           sexingerrorsaleqty,
		   regularsale,
		   totalsale,
		   goodeggsqty,
		   flooreggsqty,
           othereggsqty,
		   totaleggs
    
    FROM layer_batchbridopeningbalance_detail
    
    WHERE companyid = p_companyid AND id = p_id;


END;



CREATE PROCEDURE `spc_layer_batchconsumptionopening_detail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM layer_batchconsumptionopening_detail WHERE id = p_id;

END;



CREATE PROCEDURE `spc_layer_batchconsumptionopening_detail_save`(
	 IN p_id INT(11),
     IN p_layerbatchopeningid INT(11),
     IN p_itemid INT(11),
     IN p_consumptiontypeid INT(11),
     IN p_consumptionitemid INT(11),
     IN p_quantity DECIMAL(15,3),
     IN p_rate DECIMAL(15,3),
     IN p_itemvalue DECIMAL(15,3),
     IN p_companyid INT(11),
     IN p_userid INT(11),
     OUT out_id INT
)
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
        INSERT INTO layer_batchconsumptionopening_detail(
			layerbatchopeningid,
			itemid,
			consumptiontypeid,
			consumptionitemid,
			quantity,
			rate,
			itemvalue,
			companyid
        )
        
        VALUES(
			p_layerbatchopeningid,
			p_itemid,
			p_consumptiontypeid,
			p_consumptionitemid,
			p_quantity,
			p_rate,
			p_itemvalue,
			p_companyid
        );
        
        SET @action = 'INSERT';
        
    ELSE
		
        UPDATE layer_batchconsumptionopening_detail
        SET layerbatchopeningid = p_layerbatchopeningid,
			itemid = p_itemid,
			consumptiontypeid = p_consumptiontypeid,
			consumptionitemid = p_consumptionitemid,
			quantity = p_quantity,
			rate = p_rate,
			itemvalue = p_itemvalue,
            id = LAST_INSERT_ID(id)
		WHERE
			id = p_id
            AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'layer_batchconsumptionopening_detail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layer_batchconsumptionopening_detail_search`(
	IN p_lyerbatchopeningid INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
			lyerbatchopeningid ,
			itemid,
			consumptiontypeid,
			consumptionitemid,
			quantity,
			rate,
			itemvalue
            
	FROM layer_batchconsumptionopening_detail
    
    WHERE lyerbatchopeningid = p_lyerbatchopeningid
    AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_layer_batchconsumptionopening_detail_select`(
	IN p_id INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
			layerbatchopeningid,
		    itemid,
			consumptiontypeid,
			consumptionitemid,
			quantity,
			rate,
			itemvalue
            
	FROM layer_batchconsumptionopening_detail
    
    WHERE id = p_id
    AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_layer_batchfinancialopening_detail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM layer_batchfinancialopening_detail WHERE id = p_id;

END;



CREATE PROCEDURE `spc_layer_batchfinancialopening_detail_save`(
	IN p_id INT(11),
    IN p_layerbatchopeningid INT(11),
    IN p_birdvalue DECIMAL(12,3),
    IN p_consumptionvalue DECIMAL(12,3),
    IN p_overheadexp DECIMAL(9,3),
    IN p_birdplaceqty DECIMAL(12,3),
    IN p_wipaccountbalance DECIMAL(12,3),
    IN p_wipperbird DECIMAL(12,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
        INSERT INTO layer_batchfinancialopening_detail(
			id,
			layerbatchopeningid,
		    birdvalue,
			consumptionvalue,
			overheadexp,
			birdplaceqty,
			wipaccountbalance,
			wipperbird,
			companyid
        )
        
        VALUES(
			p_id,
			p_layerbatchopeningid,
			p_birdvalue,
			p_consumptionvalue,
			p_overheadexp,
			p_birdplaceqty,
			p_wipaccountbalance,
			p_wipperbird,
			p_companyid
        );
        
        SET @action = 'INSERT';
        
    ELSE
		
        UPDATE layer_batchfinancialopening_detail
        SET 
			layerbatchopeningid = p_layerbatchopeningid,
			birdvalue = p_birdvalue,
			consumptionvalue = p_consumptionvalue,
			overheadexp = p_overheadexp,
			birdplaceqty = p_birdplaceqty,
			wipaccountbalance = p_wipaccountbalance,
			wipperbird = p_wipperbird,
            id = LAST_INSERT_ID(id)
		WHERE
			id = p_id
            AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'layer_batchfinancialopening_detail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layer_batchfinancialopening_detail_search`(
	IN p_layerbatchopeningid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT
			id,
			layerbatchopeningid,
			birdvalue,
			consumptionvalue,
			overheadexp,
			birdplaceqty,
			wipaccountbalance,
			wipperbird,
			companyid
    
    FROM layer_batchfinancialopening_detail
    
	WHERE layerbatchopeningid = p_layerbatchopeningid AND companyid = p_companyid;
END;



CREATE PROCEDURE `spc_layer_batchfinancialopening_detail_select`(
	IN p_companyid INT(11),
    IN p_id INT(11)
)
BEGIN

	SELECT
			id,
			layerbatchopeningid,
			birdvalue,
			consumptionvalue,
			overheadexp,
		    birdplaceqty,
			wipaccountbalance,
			wipperbird,
			companyid
    
    FROM layer_batchfinancialopening_detail
    
	WHERE id = p_id AND companyid = p_companyid;
END;



CREATE PROCEDURE `spc_layer_batchlocationwiseopening_detail_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM layer_batchlocationwiseopening_detail WHERE id = p_id;

END;



CREATE PROCEDURE `spc_layer_batchlocationwiseopening_detail_save`(
	IN p_id INT(11),
    IN p_layerbatchopeningid INT(11),
    IN p_itemtype TINYINT(4),
    IN p_itemid INT(11),
    IN p_balanceqty DECIMAL(12,3),
    IN p_locationid INT(11),
    IN p_shedid INT(11),
    IN p_shedlineid INT(11),
    IN p_lineqty DECIMAL(12,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
		
        INSERT INTO layer_batchlocationwiseopening_detail(
			layerbatchopeningid,
			itemid,
			balanceqty,
			locationid,
			shedid,
			shedlineid,
			lineqty,
			companyid
        )
        
        VALUES(
			p_layerbatchopeningid,
			p_itemid,
			p_balanceqty,
			p_locationid,
			p_shedid,
			p_shedlineid,
			p_lineqty,
			p_companyid
        );
        
        SET @action = 'INSERT';
        
    ELSE
		
        UPDATE layer_batchlocationwiseopening_detail
        SET layerbatchopeningid = p_layerbatchopeningid,
			itemid = p_itemid,
			balanceqty = balanceqty,
			locationid = p_locationid,
			shedid = p_shedid,
			shedlineid = p_shedlineid,
			lineqty = p_lineqty,
            id = LAST_INSERT_ID(id)
		WHERE
			id = p_id
            AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    SET @out_balanceid = NULL;
	CALL spc_layerbatchbalance_save(
		NULL, (SELECT livebatchdate FROM layer_batchopening_balance WHERE id = p_layerbatchopeningid),
        (SELECT layerbatchid FROM layer_batchopening_balance WHERE id = p_layerbatchopeningid),
		p_shedid, p_shedlineid,  p_itemid, p_lineqty, 'Layer batch opening', p_companyid, 
		p_userid, @out_balanceid
	);
    
    -- UPDATE layer batch male female ids

		UPDATE layerbatch
		SET itemid = p_itemid
		WHERE id = (SELECT layerbatchid FROM layer_batchopening_balance WHERE id = p_layerbatchopeningid);

	
    
    -- update layershed status to batch started = 924
    UPDATE layershed SET statusid = 924 WHERE id = p_shedid;
    
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'layer_batchlocationwiseopening_detail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layer_batchlocationwiseopening_detail_search`(
	IN p_layerbatchopeningid INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT id,
			layerbatchopeningid,
			itemid,
			balanceqty,
			locationid,
			shedid,
			shedlineid,
			lineqty,
			companyid
            
	FROM layer_batchlocationwiseopening_detail
    
    WHERE layerbatchopeningid = p_layerbatchopeningid AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_layer_batchlocationwiseopening_detail_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,
			layerbatchopeningid,
			itemid,
			balanceqty,
			locationid,
			shedid,
			shedlineid,
			lineqty,
			companyid
            
	FROM layer_batchlocationwiseopening_detail
    
    WHERE companyid = p_companyid AND id = p_id;

END;



CREATE PROCEDURE `spc_layer_batchopeningbalance_detail_search`(
	IN p_layerbatchopeningid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	-- layer financial
	SELECT
			id,
			layerbatchopeningid,
			birdvalue,
			consumptionvalue,
			overheadexp,
			birdplaceqty,
			wipaccountbalance,
			wipperbird,
			companyid
    
    FROM layer_batchfinancialopening_detail
    
	WHERE layerbatchopeningid = p_layerbatchopeningid AND companyid = p_companyid;
    
    
    -- layer locationwise
    SELECT  LBLD.id,
			LBLD.layerbatchopeningid,
			LBLD.itemid,
            I.itemname,
            I.itemcode,
			LBLD.balanceqty,
			LBLD.locationid,
            L.locationname,
			LBLD.shedid,
            LS.shedname,
			LBLD.shedlineid,
            LSL.linename,
			LBLD.lineqty,
			LBLD.companyid,
            LS.capacity as linecapacity
            
	FROM layer_batchlocationwiseopening_detail LBLD
    LEFT JOIN item I ON I.id = LBLD.itemid
    LEFT JOIN layershed LS ON LS.id = LBLD.shedid
    LEFT JOIN layershedline LSL ON LSL.id = LBLD.shedlineid
    LEFT JOIN location L ON L.id = LBLD.locationid
    
    WHERE LBLD.layerbatchopeningid = p_layerbatchopeningid AND LBLD.companyid = p_companyid;
    
    
    -- batch bird detail
    SELECT LBBD.id,
		   LBBD.layerbatchopeningid,
           LBBD.itemtype,
		   LBBD.itemid,
           I.itemname,
           I.itemcode,
		   LBBD.placeqty,
           LBBD.rate,
           LBBD.birdvalue,
		   LBBD.liveqty,
		   LBBD.mortality,
		   LBBD.culls,
           LBBD.sexingerror,
		   LBBD.cullssaleqty,
           LBBD.sexingerrorsaleqty,
		   LBBD.regularsale,
		   LBBD.totalsale,
		   LBBD.goodeggsqty,
		   LBBD.flooreggsqty,
           LBBD.othereggsqty,
		   LBBD.totaleggs
    
    FROM layer_batchbridopeningbalance_detail LBBD
    LEFT JOIN item I ON I.id = LBBD.itemid
    
    WHERE LBBD.layerbatchopeningid = p_layerbatchopeningid AND LBBD.companyid = p_companyid;
    
    
    -- consumption detail
    SELECT  LBCD.id,
			LBCD.layerbatchopeningid,
			LBCD.itemid,
			I.itemname as itemname,
            I.itemcode as consumptionitemcode,
			LBCD.consumptiontypeid,
			LBCD.consumptionitemid,
            I1.itemname as consumptionitemname,
			LBCD.quantity,
			LBCD.rate,
			LBCD.itemvalue,
            R.refname as unit
            
	FROM layer_batchconsumptionopening_detail LBCD
    LEFT JOIN item I ON I.id = LBCD.itemid
    LEFT JOIN item I1 ON I1.id = LBCD.consumptionitemid
	LEFT JOIN `reference` R ON R.id = I.itemunitid
    
    WHERE LBCD.layerbatchopeningid = p_layerbatchopeningid
    AND LBCD.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_layer_batchopening_balance_save`(
   IN p_id INT(11),
   IN p_batchname VARCHAR(100),
   IN p_locationid INT(11),
   IN p_layerbatchid INT(11),
   IN p_livebatchdate DATE,
   IN p_phasestatusid INT(11),
   IN p_ageindays INT(11),
   IN p_ageinweeks DECIMAL(9,3),
   IN p_batchplacementdate DATE,
   IN p_firstdaydate DATE,
   IN p_batchstatusid INT(11),
   IN p_expectedphasestatusid INT(11),
   IN p_statusid INT(11),
   IN p_receiptremark VARCHAR(100),
   IN p_jeremark VARCHAR(100),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		-- Insert breederbatch
        SET @layerbatchid = null;
        CALL spc_layerbatch_save(
			NULL,
            p_locationid,
            NULL,
            p_batchname,
            NULL,
            982,
            p_companyid,
            p_userid,
            @layerbatchid
        );
    
		INSERT INTO layer_batchopening_balance(
		   layerbatchid,
		   livebatchdate,
           phasestatusid,
           ageindays,
           ageinweeks,
		   batchplacementdate,
           firstdaydate,
           batchstatusid,
           expectedphasestatusid,
           statusid,
           receiptremark,
           jeremark,
           companyid
        )
        
        VALUES(
		   @layerbatchid,
		   p_livebatchdate,
           p_phasestatusid,
           p_ageindays,
           p_ageinweeks,
		   p_batchplacementdate,
           p_firstdaydate,
           p_batchstatusid,
           p_expectedphasestatusid,
           p_statusid,
           p_receiptremark,
           p_jeremark,
           p_companyid
        );
        
        SET @action = 'INSERT';
    
    ELSE
    
		UPDATE layer_batchopening_balance
        SET layerbatchid = p_layerbatchid,
		   livebatchdate = p_livebatchdate,
           phasestatusid = p_phasestatusid,
           ageindays = p_ageindays,
           ageinweeks = p_ageinweeks,
		   batchplacementdate = p_batchplacementdate,
           firstdaydate = p_firstdaydate,
           batchstatusid = p_batchstatusid,
           expectedphasestatusid = p_expectedphasestatusid,
           statusid = p_statusid,
           receiptremark = p_receiptremark,
           jeremark = p_jeremark,
           id = LAST_INSERT_ID(id)
		WHERE
				id = p_id
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';
    
    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'layer_batchopening_balance', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_layer_batchopening_balance_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT LBO.id,
		   LBO.layerbatchid,
           LB.locationid,
           L.locationname,
           L.locationcode,
		   LB.batchname,
		   DATE_FORMAT(LBO.livebatchdate,'%d/%m/%Y') as livebatchdate,
           LBO.phasestatusid,
           LBO.ageindays,
           LBO.ageinweeks,
		   DATE_FORMAT(LBO.batchplacementdate,'%d/%m/%Y') as batchplacementdate,
           DATE_FORMAT(LBO.firstdaydate,'%d/%m/%Y') as firstdaydate,
           LBO.batchstatusid,
           LBO.expectedphasestatusid,
           LBO.statusid,
           REF.refname,
           REF1.refname as batchstatus,
           LBO.receiptremark,
           LBO.jeremark
    FROM layer_batchopening_balance LBO
    LEFT JOIN layerbatch LB ON LB.id = LBO.layerbatchid
    LEFT JOIN `reference` REF ON REF.id = LBO.statusid
    LEFT JOIN `reference` REF1 ON REF1.id = LBO.batchstatusid
    LEFT JOIN location L ON L.id = LB.locationid
    
    WHERE LBO.companyid = p_companyid
    order by LBO.id desc;


END;



CREATE PROCEDURE `spc_layer_batchopening_balance_select`(
	IN p_id INT(11),
	IN p_companyid INT(11)
)
BEGIN

	SELECT 
           LBO.id,
           LBO.layerbatchid,
		   LB.locationid,
           L.locationname,
           L.locationcode,
		   DATE_FORMAT(LBO.livebatchdate,'%d/%m/%Y') as livebatchdate,
           LBO.phasestatusid,
           LBO.ageindays,
           LBO.ageinweeks,
		   DATE_FORMAT(LBO.batchplacementdate,'%d/%m/%Y') as batchplacementdate,
           DATE_FORMAT(LBO.firstdaydate,'%d/%m/%Y') as firstdaydate,
           LBO.batchstatusid,
           LBO.expectedphasestatusid,
           LBO.statusid,
           LBO.receiptremark,
           LBO.jeremark
    FROM layer_batchopening_balance LBO
    LEFT JOIN layerbatch LB ON LB.id = LBO.layerbatchid
    LEFT JOIN location L ON L.id = LB.locationid
    
    WHERE LBO.id = p_id AND LBO.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_leasiondetail_select`(
IN p_id INT(11)
)
BEGIN

	SELECT id, lesionid, lesionname, companyid
           
	FROM lesiondetail
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_ledgeropeningbalance_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DELETE FROM ledgeropeningbalance WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'ledgeropeningbalance', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_ledgeropeningbalance_save`(
   IN p_id INT(11),
   IN p_openingbalancedate DATE,
   IN p_branchid INT,
   IN p_ledgerid INT(11),
   IN p_openingbalance DECIMAL(9,3),
   IN p_openingbalancetype VARCHAR(5),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF EXISTS(
            SELECT id from ledgeropeningbalance where branchid = p_branchid AND ledgerid = p_ledgerid
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    
    BEGIN
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO ledgeropeningbalance 
				(id, 
                openingbalancedate,
                branchid, 
                ledgerid, 
                openingbalance,
                companyid)
			VALUES 
				(p_id, 
                p_openingbalancedate,
                p_branchid, 
                p_ledgerid, 
                (CASE WHEN p_openingbalancetype = 'Dr' THEN p_openingbalance ELSE (-1 * p_openingbalance) END), 
              --  (CASE p_openingbalancetype WHEN 'Dr' THEN openingbalance ELSE (-1 * openingbalance) END), 
                p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE ledgeropeningbalance
		SET branchid = p_branchid,
			openingbalancedate = p_openingbalancedate,
			ledgerid = p_ledgerid,
             openingbalance = (CASE WHEN p_openingbalancetype = 'Dr' THEN p_openingbalance ELSE (-1 * p_openingbalance) END), 
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
			
		WHERE
			id = p_id
			AND companyid = p_companyid;
            
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    END;
    
    END IF;
   -- record log
  -- CALL spc_commonlog_save(p_companyid, 'ledgeropeningbalance', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_ledgeropeningbalance_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
			LOB.id,
            DATE_FORMAT(LOB.openingbalancedate,'%d/%m/%Y') as openingbalancedate,
            LOB.branchid,
            B.branchname,
            LOB.ledgerid,
            COA.coaname as ledgername,
            COA.glcode as ledgercode,
            ABS(LOB.openingbalance) as openingbalance,
            CASE WHEN LOB.openingbalance >= 0 THEN 'Dr' ELSE 'Cr' END as openingbalancetype
			
	FROM ledgeropeningbalance LOB
    LEFT JOIN branch B ON B.id = LOB.branchid
    LEFT JOIN chartofaccount COA ON COA.id = LOB.ledgerid
  
	WHERE LOB.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_ledgeropeningbalance_select`(
	IN p_id INT
)
BEGIN

	SELECT
			LOB.id,
            LOB.branchid,
            DATE_FORMAT(LOB.openingbalancedate,'%d/%m/%Y') as openingbalancedate,
            B.branchname,
            LOB.ledgerid,
            COA.coaname as ledgername,
            ABS(LOB.openingbalance) as openingbalance,
            CASE WHEN LOB.openingbalance >= 0 THEN 'Dr' ELSE 'Cr' END as openingbalancetype
			
	FROM ledgeropeningbalance LOB
    LEFT JOIN branch B ON B.id = LOB.branchid
    LEFT JOIN chartofaccount COA ON COA.id = LOB.ledgerid
  
	WHERE LOB.id = p_id;

END;



CREATE PROCEDURE `spc_ledgers_search`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		 id,
         ledgercode,
         ledgername
         
	FROM
		ledgers 
        
	WHERE
		 companyid = p_companyid;
END;



CREATE PROCEDURE `spc_ledger_balancesheet`(
	IN p_todate DATE,
    IN p_companyid INT(11)
)
BEGIN

	SELECT COA.id,
           COA.glcode,
           JED.acledgerid,
           COA.coaname as ledgername,
           COA.isparent,
           COA.groupid,
           fnc_getgroupname(COA.groupid) as groupname,
           IFNULL(fnc_balancesheet(p_todate,JED.acledgerid), 0) as balance,
           IFNULL(SUM(JED.dramount),0) as dramount,
           IFNULL(SUM(JED.cramount),0) as cramount,
           ((IFNULL(fnc_balancesheet(p_todate,JED.acledgerid), 0) + IFNULL(SUM(JED.dramount),0)) - IFNULL(SUM(JED.cramount),0)) as amount
           
	FROM chartofaccount COA
    
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid
    
    WHERE JE.voucherdate = p_todate
    AND JE.companyid = p_companyid
    AND COA.categoryid = 1
    
    group by JED.acledgerid;
    
    /*UNION ALL
    
    SELECT COA.id,
           null as glcode,
           null as acledgerid,
           'Total' as ledgername,
           null as isparent,
           null as groupid,
           null as groupname,
           null as balance,
           null as dramount,
           null as cramount,
           ((IFNULL(fnc_balancesheet(p_todate,JED.acledgerid), 0) + IFNULL(SUM(JED.dramount),0)) - IFNULL(SUM(JED.cramount),0)) as amount
           
	FROM chartofaccount COA
    
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid
    
    WHERE JE.voucherdate = p_todate
    AND JE.companyid = p_companyid
    AND COA.categoryid = 1;*/

    
    SELECT COA.id,
           COA.glcode,
           JED.acledgerid,
           COA.coaname as ledgername,
           COA.isparent,
           COA.groupid,
           fnc_getgroupname(COA.groupid) as groupname,
           IFNULL(fnc_balancesheet(p_todate,JED.acledgerid), 0) as balance,
           IFNULL(SUM(JED.dramount),0) as dramount,
           IFNULL(SUM(JED.cramount),0) as cramount,
           ((IFNULL(fnc_balancesheet(p_todate,JED.acledgerid), 0) + IFNULL(SUM(JED.dramount),0)) - IFNULL(SUM(JED.cramount),0)) as amount
           
	FROM chartofaccount COA
    
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid
    
    WHERE JE.voucherdate = p_todate
    AND JE.companyid = p_companyid
    AND COA.categoryid = 2;
    
    /*UNION ALL
    
    SELECT COA.id,
           null as glcode,
           null as acledgerid,
           'Total' as ledgername,
           null as isparent,
           null as groupid,
           null as groupname,
           null as balance,
           null as dramount,
           null as cramount,
           ((IFNULL(fnc_balancesheet(p_todate,JED.acledgerid), 0) + IFNULL(SUM(JED.dramount),0)) - IFNULL(SUM(JED.cramount),0)) as amount
           
	FROM chartofaccount COA
    
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid
    
    WHERE JE.voucherdate = p_todate
    AND JE.companyid = p_companyid
    AND COA.categoryid = 2;*/


END;



CREATE PROCEDURE `spc_ledger_profitandloss`(
IN p_todate DATE,
    IN p_companyid INT(11)
)
BEGIN

	SELECT COA.id,
           COA.glcode,
           JED.acledgerid,
           COA.coaname as ledgername,
           COA.isparent,
           COA.groupid,
           fnc_getgroupname(COA.groupid) as groupname,
           IFNULL(fnc_balancesheet(p_todate,JED.acledgerid), 0) as balance,
           IFNULL(SUM(JED.dramount),0) as dramount,
           IFNULL(SUM(JED.cramount),0) as cramount,
           ((IFNULL(fnc_balancesheet(p_todate,JED.acledgerid), 0) + IFNULL(SUM(JED.dramount),0)) - IFNULL(SUM(JED.cramount),0)) as amount
           
	FROM chartofaccount COA
    
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid
    
    WHERE JE.voucherdate = p_todate
    AND JE.companyid = p_companyid
    AND COA.categoryid = 4;
    
  /*  UNION ALL
    
    SELECT COA.id,
           null as glcode,
           null as acledgerid,
           'Total' as ledgername,
           null as isparent,
           null as groupid,
           null as groupname,
           null as balance,
           null as dramount,
           null as cramount,
           ((IFNULL(fnc_balancesheet(p_todate,JED.acledgerid), 0) + IFNULL(SUM(JED.dramount),0)) - IFNULL(SUM(JED.cramount),0)) as amount
           
	FROM chartofaccount COA
    
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid
    
    WHERE JE.voucherdate = p_todate
    AND JE.companyid = p_companyid
    AND COA.categoryid = 4;

*/
    
    SELECT COA.id,
           COA.glcode,
           JED.acledgerid,
           COA.coaname as ledgername,
           COA.isparent,
           COA.groupid,
           fnc_getgroupname(COA.groupid) as groupname,
           IFNULL(fnc_balancesheet(p_todate,JED.acledgerid), 0) as balance,
           IFNULL(SUM(JED.dramount),0) as dramount,
           IFNULL(SUM(JED.cramount),0) as cramount,
           ((IFNULL(fnc_balancesheet(p_todate,JED.acledgerid), 0) + IFNULL(SUM(JED.dramount),0)) - IFNULL(SUM(JED.cramount),0)) as amount
           
	FROM chartofaccount COA
    
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid
    
    WHERE JE.voucherdate = p_todate
    AND JE.companyid = p_companyid
    AND COA.categoryid = 5;
    
    /*UNION ALL
    
    SELECT COA.id,
           null as glcode,
           null as acledgerid,
           'Total' as ledgername,
           null as isparent,
           null as groupid,
           null as groupname,
           null as balance,
           null as dramount,
           null as cramount,
           ((IFNULL(fnc_balancesheet(p_todate,JED.acledgerid), 0) + IFNULL(SUM(JED.dramount),0)) - IFNULL(SUM(JED.cramount),0)) as amount
           
	FROM chartofaccount COA
    
    LEFT JOIN journalentrydetail JED ON JED.acledgerid = COA.id
    LEFT JOIN journalentry JE ON JE.id = JED.journalentryid
    
    WHERE JE.voucherdate = p_todate
    AND JE.companyid = p_companyid
    AND COA.categoryid = 5;
*/

END;



CREATE PROCEDURE `spc_lesiondetail_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM lesiondetail WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'lesiondetail', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_lesiondetail_save`(
 IN p_id INT(11),
 IN p_lesionid INT(11),
 IN p_lesionname VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO lesiondetail
              (lesionid, lesionname, companyid)
       VALUES
            (p_lesionid, p_lesionname, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE lesiondetail 
   
	SET lesionid = p_lesionid,
        lesionname = p_lesionname,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'lesiondetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_lesiondetail_search`(
 IN p_lesionid INT(11)
)
BEGIN

	SELECT id, lesionname, companyid
           
	FROM lesiondetail
    
    WHERE lesionid = p_lesionid;

END;



CREATE PROCEDURE `spc_lesion_byorganid`(
  IN p_organid INT(11)
  )
BEGIN
 SELECT L.id, LD.lesionname, L.companyid
  
  FROM
  lesion L
LEFT JOIN lesiondetail LD ON L.id = LD.lesionid

	WHERE 
    L.organid = p_organid;
END;



CREATE PROCEDURE `spc_lesion_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM lesion WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'lesion', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_lesion_save`(
 IN p_id INT(11),
 IN p_organid INT(11),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO lesion
              (organid, companyid)
       VALUES
            (p_organid, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE lesion 
   
	SET organid = p_organid,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'lesion', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_lesion_search`(
 IN p_companyid INT(11)
)
BEGIN

	SELECT L.id, organid, L.companyid, O.organname
           
	FROM lesion L
    
    LEFT JOIN organ O ON O.id = L.organid
    
    WHERE L.companyid = p_companyid
    
    order by L.id DESC;
 
END;



CREATE PROCEDURE `spc_lesion_select`(
IN p_id INT(11)
)
BEGIN

	SELECT id, organid, companyid
           
	FROM lesion
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_locationtype_ddl`(
  IN p_companyid INT 
)
BEGIN
	SELECT id ,
		   locationtypename
                  
    FROM  locationtype 
    WHERE 
          companyid = p_companyid;
END;



CREATE PROCEDURE `spc_locationtype_delete`(
	IN p_id INT
   
)
BEGIN
	IF EXISTS (SELECT shedtypeid FROM breedershed
		WHERE shedtypeid = p_id) THEN
		BEGIN
			SELECT 1 as yes;
		END;
	ELSE
	   BEGIN
		SELECT 0 as yes;
		DELETE FROM locationtype WHERE id = p_id;
		END;
	END IF ;
END;



CREATE PROCEDURE `spc_locationtype_save`(
	IN p_id INT,
    IN p_locationtypename VARCHAR(100),
    IN p_description VARCHAR(200),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO locationtype 
				(id, locationtypename, description, companyid)
			VALUES 
				(p_id, p_locationtypename, p_description, p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE locationtype
			SET locationtypename = p_locationtypename, 
                description = p_description, 
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';     
    
	END IF;
    
	SELECT LAST_INSERT_ID() INTO out_id;

	
	-- RECORD LOG
	CALL spc_commonlog_save(p_companyid, 'locationtype', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_locationtype_search`(
  IN p_companyid INT 
)
BEGIN
	SELECT id ,
		   locationtypename,
           description
            
    FROM  locationtype 
    WHERE 
          companyid = p_companyid;
END;



CREATE PROCEDURE `spc_locationtype_select`(
  IN p_id INT 
)
BEGIN
	SELECT id ,
		   locationtypename,
           description
            
    FROM  locationtype 
    WHERE 
          id = p_id;
END;



CREATE PROCEDURE `spc_locationwiseinprogressbreederbatch_search`(
	IN p_locationid INT,
    IN p_companyid INT
)
BEGIN

	SELECT
		B.id,
        L.locationname,
        W.warehousename,
        batchname,
        R.refname as `status`,
        BBP.placementdate,
         DATE_FORMAT(BBP.placementdate,'%d/%m/%Y') as formattedplacementdate,
        BF.phasename as phasestatusname,
        DATE_FORMAT(DATE_ADD((SELECT transactiondate FROM breederdailytransaction WHERE breederbatchid = B.id ORDER BY transactiondate DESC LIMIT 1), INTERVAL 1 DAY),'%d/%m/%Y') AS lasttransactiondate
	
    FROM
		breederbatch B
	
    LEFT JOIN location L ON B.locationid = L.id
    LEFT JOIN warehouse W ON B.warehouseid = W.id
    LEFT JOIN `reference` R ON B.statusid = R.id
    LEFT JOIN breederbatchplacement BBP ON B.id = BBP.breederbatchid
	LEFT JOIN breederphase BF ON BBP.phasestatusid = BF.id
	
	WHERE
		B.companyid = p_companyid
        AND B.statusid = 222
        AND B.locationid = p_locationid
        ORDER BY B.id DESC;

END;



CREATE PROCEDURE `spc_location_ddl`(
    IN p_companyid INT,
    IN p_moduleids VARCHAR(200)
)
BEGIN
-- SET @moduleids = p_moduleids;

	SELECT 
		 L.id,
         L.locationname,
		 L.locationcode,
         (SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, L.moduleids)) as modules,
         L.branchid
	FROM
		location L
        
	WHERE 
       FIND_IN_SET(p_moduleids,L.moduleids)  AND
		 L.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_location_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM location WHERE id = p_id;
END;



CREATE PROCEDURE `spc_location_save`(
	IN p_id INT,
    IN p_locationcode VARCHAR(50),
    IN p_locationname VARCHAR(200),
    IN p_moduleids VARCHAR(200),
    IN p_branchid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO location
				(id, locationcode, locationname, moduleids, branchid, companyid)
			VALUES 
				(p_id, p_locationcode, p_locationname, p_moduleids, p_branchid, p_companyid);
                
		SET @action = 'INSERT';
		
	ELSE
    
		UPDATE location
        SET
                locationcode = p_locationcode, 
                locationname = P_locationname,
                moduleids = p_moduleids,
                branchid = p_branchid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';     

	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;

	 CALL spc_commonlog_save(p_companyid, 'location', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_location_search`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		L.id,
        locationcode,
        locationname,
        moduleids,
        branchid
       --  LT.locationtypename
	FROM
		location L
	-- INNER JOIN locationtype LT ON L.locationtypeid = LT.id
	WHERE
		L.companyid = p_companyid
	ORDER BY
		L.id ASC;
        
END;



CREATE PROCEDURE `spc_location_search1`(
	IN p_conditionid INT,
    IN p_companyid INT
)
BEGIN

	 -- NULL : All locations
	 -- 1 : Setter exist at the location
	 -- 2 : In-progress setter batch
	 -- 3 : In-progress hatcher batch

	IF(p_conditionid IS NULL) THEN
    
			SELECT 
				L.id,
				locationcode,
				locationname,
				LT.locationtypename
			FROM
				location L
			INNER JOIN locationtype LT ON L.locationtypeid = LT.id
			WHERE
				L.companyid = p_companyid
			ORDER BY
				L.id ASC;


	ELSEIF(p_conditionid = 1) THEN -- Setter exist at the location

			SELECT 
				L.id,
				locationcode,
				locationname,
				LT.locationtypename
			FROM
				location L
			INNER JOIN locationtype LT ON L.locationtypeid = LT.id
            INNER JOIN setter S ON S.locationid = L.id
			WHERE
				L.companyid = p_companyid
			
			GROUP BY L.id,
				locationcode,
				locationname,
				LT.locationtypename;

	ELSEIF(p_conditionid = 2) THEN -- In-progress setter batch
    
			SELECT 
				L.id,
				locationcode,
				locationname,
				LT.locationtypename
			FROM
				location L
			INNER JOIN locationtype LT ON L.locationtypeid = LT.id
            INNER JOIN setter S ON S.locationid = L.id
            INNER JOIN setterbatch SB ON S.id = SB.setterid
            
			WHERE
				L.companyid = p_companyid
                AND SB.status = 282 -- In Progress
			
            GROUP BY L.id,
				locationcode,
				locationname,
				LT.locationtypename;
	
    
    ELSEIF(p_conditionid = 3) THEN -- In-progress hatcher batch
    
			SELECT 
				L.id,
				locationcode,
				locationname,
				LT.locationtypename
			FROM
				location L
			INNER JOIN locationtype LT ON L.locationtypeid = LT.id
            INNER JOIN hatcher H ON H.locationid = L.id
            INNER JOIN hatcherbatch HB ON H.id = HB.setterid
            
			WHERE
				L.companyid = p_companyid
                AND HB.statusid = 302 -- In Progress
			
            GROUP BY L.id,
				locationcode,
				locationname,
				LT.locationtypename;
    
    END IF;

	
        
END;



CREATE PROCEDURE `spc_location_select`(
	IN p_id INT
)
BEGIN

	SELECT 
		L.id,
		-- L.locationtypeid,
        locationcode,
        locationname,
        moduleids,
        L.companyid,
        branchid
	FROM
		location L
	-- INNER JOIN locationtype LT ON L.locationtypeid = LT.id
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND L.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
END;



CREATE PROCEDURE `spc_login`(
	IN p_UserName varchar(200)
)
BEGIN
	SELECT id, fullname, email, roleid, companyid, `password` FROM user WHERE fullname = p_UserName;
    
    -- select 5 as id, 'test' as fullname,  'test@gmail.com' as email,  1 as roleid,  1 as companyid,  '$2a$10$.DMeYvKC6fGY5wd.dsQ35e6HRo1Lzf.25ZWdrcRmThWvYsIgR1R9O' as `password`;
    
END;



CREATE PROCEDURE `spc_materialissuedetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM materialissuedetail WHERE id = p_id;
END;



CREATE PROCEDURE `spc_materialissuedetail_save`(
	IN p_id INT,
    IN p_materialissueid INT(11),
    IN p_itemid INT(11),
    IN p_itemname VARCHAR(100),
    IN p_issuequantity DECIMAL(15,3),
    IN p_unitcost DECIMAL(9,3),
    IN p_totalcost DECIMAL(15,3),
    IN p_itemunitid INT(11),
    IN p_itembatch VARCHAR(100),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialissuedetail 
				(materialissueid, itemid, itemname, issuequantity, unitcost, totalcost, itemunitid, itembatch, companyid)
			VALUES 
				(p_materialissueid, p_itemid, p_itemname, p_issuequantity, p_unitcost, p_totalcost, p_itemunitid, p_itembatch, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE materialissuedetail
			SET materialissueid = p_materialissueid,
				itemid = p_itemid,
				itemname = p_itemname,
				issuequantity = p_issuequantity,
				unitcost = p_unitcost,
				totalcost = p_totalcost,
				itemunitid = p_itemunitid,
				itembatch = p_itembatch,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'materialissuedetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_materialissuedetail_search`(
    IN p_materialreceiptid INT
)
BEGIN
    
    SELECT
		 MI.id,
         materialissueid,
		 itemid,
         itemname,
         issuequantity,
         unitcost,
         totalcost,
         MI.itemunitid,
         R.refname,
         itembatchid
         
    FROM
		materialissuedetail MI
        INNER JOIN reference R ON MI.itemunitid = R.id
   	
	WHERE
		materialreceiptid = p_materialreceiptid;
END;



CREATE PROCEDURE `spc_materialissuedetail_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	SELECT
		 MI.id,
         materialissueid,
		 itemid,
         itemname,
         issuequantity,
         unitcost,
         totalcost,
         MI.itemunitid,
         R.refname,
         itembatchid
         
    FROM
		materialissuedetail MI
        INNER JOIN reference R ON MI.itemunitid = R.id
        
	WHERE
		MI.id = p_id AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_materialissue_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM materialissuedetail WHERE materialissueid = p_id;
	DELETE FROM materialissue WHERE id = p_id;
END;



CREATE PROCEDURE `spc_materialissue_save`(
    IN p_id INT,
    IN p_issuedate DATE,
    IN p_issuetypeid INT(11),
    IN p_batchid INT(11),
    IN p_statusid INT(11),
    IN p_remark VARCHAR(100),
    IN p_createdby INT(11),
    IN p_fromwarehouseid INT(11),
    IN p_fromwarehousebinid INT(11),
    IN p_approvedby INT(11),
    IN p_approveddate DATE,
    IN p_companyid INT(11),
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialissue 
				( issuedate, issuetypeid, batchid, statusid, remark, createdby, approvedby, approveddate, fromwarehouseid, fromwarehousebinid, companyid)
			VALUES 
				( p_issuedate, p_issuetypeid, p_batchid, p_statusid, p_remark, p_createdby, p_approvedby, p_approveddate, p_fromwarehouseid, p_fromwarehousebinid, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE materialissue
			SET issuedate = p_issuedate, 
				issuetypeid = p_issuetypeid,
                batchid = p_batchid,
                statusid = p_statusid,
                remark = p_remark,
                createdby = p_createdby,
                approvedby = p_approvedby,
                fromwarehouseid = p_fromwarehouseid,
                fromwarehousebinid = p_fromwarehousebinid,
                approveddate = p_approveddate,
                companyid = p_companyid,
                
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'materialissue', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_materialissue_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 MI.id,
         DATE_FORMAT(issuedate,'%d/%m/%Y') as issuedate, 
		 issuetypeid,
		 batchid,
		 MI.statusid,
         R.refname,
		 remark,
		 createdby,
		 approvedby,
		 DATE_FORMAT(approveddate,'%d/%m/%Y') as approveddate,
		 MI.fromwarehouseid,
         W.warehousename
        
	FROM
		materialissue MI
        LEFT JOIN `reference` R ON R.id = MI.statusid
        LEFT JOIN warehouse W ON MI.towarehouse = W.id
   	
	WHERE
		MI.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_materialissue_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 MI.id,
         DATE_FORMAT(issuedate,'%d/%m/%Y') as issuedate, 
		 issuetypeid,
		 batchid,
		 MI.statusid,
         R.refname,
		 remark,
		 createdby,
		 approvedby,
		 DATE_FORMAT(approveddate,'%d/%m/%Y') as approveddate,
		 MI.fromwarehouseid,
         W.warehousename
        
	FROM
		materialissue MI
        LEFT JOIN reference R ON R.id = MI.statusid
        LEFT JOIN warehouse W ON MI.fromwarehouseid = W.id
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND MI.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_materialmovement_save`(
	IN p_id INT,
    IN p_itemid INT,
    IN p_itembatch VARCHAR(100),
    IN p_transactiontypeid INT,
    IN p_transactionid INT,
    IN p_transactiondate DATE,
    IN p_quantity DECIMAL(8,3),
    IN p_fromwarehouseid INT,
    IN p_fromwarehousebinid INT,
    IN p_towarehouseid INT,
    IN p_towarehousebinid INT,
    IN p_itemvalue DECIMAL(15,3),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialmovement 
				(itemid, itembatch, transactiontypeid, transactionid,
                transactiondate, quantity, fromwarehouseid, fromwarehousebinid,
                towarehouseid, towarehousebinid, itemvalue, companyid)
			VALUES 
				(p_itemid, p_itembatch, p_transactiontypeid, p_transactionid,
                p_transactiondate, p_quantity, p_fromwarehouseid, p_fromwarehousebinid,
                p_towarehouseid, p_towarehousebinid, p_itemvalue, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE materialmovement
			SET itemid = p_itemid,
				itembatch = p_itembatch,
				transactiontypeid = p_transactiontypeid,
				transactionid = p_transactionid,
				transactiondate = p_transactiondate,
				quantity = p_quantity,
				fromwarehouseid = p_fromwarehouseid,
                fromwarehousebinid = p_fromwarehousebinid,
				towarehouseid = p_towarehouseid,
                towarehousebinid = p_towarehousebinid,
				itemvalue = p_itemvalue,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'materialmovement', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_materialreceiptdetail_bywarehouse`(
 IN p_warehouseid INT
 )
BEGIN

	SELECT
		MRD.id as materialreceiptdetailid,
		MRD.itembatch,
        MRD.towarehouse,
        W.warehousename,
        MRD.receiptquantity,
        MRD.batchattribute
        
	FROM
		materialreceiptdetail MRD
        INNER JOIN warehouse W ON W.id = MRD.towarehouse
        
	WHERE
		MRD.towarehouse = p_warehouseid
        AND MRD.batchattribute IS NULL
        
        
	ORDER BY MRD.id DESC;

END;



CREATE PROCEDURE `spc_materialreceiptdetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM materialreceiptdetail WHERE id = p_id;
END;



CREATE PROCEDURE `spc_materialreceiptdetail_save`(
    IN p_id INT,
    IN p_materialreceiptid INT(11),
    IN p_itemid INT(11),
    IN p_itemname VARCHAR(100),
    IN p_receiptquantity DECIMAL(12,3),
    IN p_unitcost DECIMAL(12,3),
    IN p_totalcost DECIMAL(12,3),
    IN p_itemunitid INT(11),
    IN p_itembatch VARCHAR(100),
    IN p_towarehouse INT(11),
    IN p_towarehousebinid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    IN p_batchattribute JSON,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialreceiptdetail 
				(id, materialreceiptid, itemid, itemname,
                receiptquantity, unitcost, totalcost, itemunitid,
                itembatch, towarehouse, towarehousebinid, companyid, batchattribute)
			VALUES 
				(p_id, p_materialreceiptid, p_itemid, p_itemname,
                p_receiptquantity, p_unitcost, p_totalcost, p_itemunitid,
                p_itembatch, p_towarehouse, p_towarehousebinid, p_companyid, p_batchattribute);
		
        SET @action = 'INSERT';

	ELSE
    
		UPDATE materialreceiptdetail
			SET materialreceiptid = p_materialreceiptid, 
				itemid = p_itemid,
                itemname = p_itemname,
                receiptquantity = p_receiptquantity,
                unitcost = p_unitcost,
                totalcost = p_totalcost,
                itemunitid = p_itemunitid,
                itembatch = p_itembatch,
                towarehouse = p_towarehouse,
                towarehousebinid = p_towarehousebinid,
                companyid = p_companyid,
                batchattribute = p_batchattribute,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
             SET @action = 'UPDATE';   
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	-- record log
   CALL spc_commonlog_save(p_companyid, 'materialreceiptdetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_materialreceiptdetail_search`(
    IN p_materialreceiptid INT
)
BEGIN
    
    SELECT
		 MD.id,
         materialreceiptid,
		 itemid,
         itemname,
         receiptquantity,
         unitcost,
         totalcost,
         MD.unitid,
         R.refname,
         itembatch,
         MD.towarehouse,
         W.warehousename
         
    FROM
		materialreceiptdetail MD
        INNER JOIN reference R ON MD.unitid = R.id
        LEFT JOIN warehouse W ON MD.towarehouse = W.id
   	
	WHERE
		materialreceiptid = p_materialreceiptid;
END;



CREATE PROCEDURE `spc_materialreceiptdetail_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	SELECT
		 MD.id,
         MD.materialreceiptid,
		 itemid,
         MD.receiptquantity,
         MD.unitcost,
         MD.totalcost,
         MD.itemunitid,
         R.refname,
         itemname,
         itembatch,
         MD.towarehouse,
         W.warehousename,
         MD.batchattribute
        
        
	FROM
		materialreceiptdetail MD
        INNER JOIN reference R ON MD.itemunitid = R.id
        LEFT JOIN warehouse W ON MD.towarehouse = W.id
        
	WHERE
		MD.id = p_id AND MD.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_materialreceiptdetail_select_vaccinateddoc`(
    IN p_companyid INT
)
BEGIN

	SELECT
		 MD.id,
         MD.materialreceiptid,
		 itemid,
         MD.receiptquantity,
         MD.unitcost,
         MD.totalcost,
         MD.itemunitid,
         R.refname,
         itemname,
         itembatch,
         MD.towarehouse,
         W.warehousename,
         MD.batchattribute
        
        
	FROM
		materialreceiptdetail MD
        INNER JOIN `reference` R ON MD.itemunitid = R.id
        LEFT JOIN warehouse W ON MD.towarehouse = W.id
        
	WHERE
		JSON_EXTRACT(MD.batchattribute , '$.doc_type') = 'vaccinated' 
        and p_companyid = p_companyid;


END;



CREATE PROCEDURE `spc_materialreceipthatcherbatch_select`(
	IN p_companyid INT
)
BEGIN
    -- Hatcher batches with status In Progress and that should present in chicks pullout
    SELECT
		HB.id as hatcherbatchno,
		HB.hatcherid,
        H.hatchername,
        DATE_FORMAT(HB.batchdate,'%d/%m/%Y') as hatchingbatchdate,
        R.refname,
        L.id as locationid,
		L.locationname
	
    FROM
		hatcherbatch HB
        
        INNER JOIN hatcher H ON H.id = HB.hatcherid
        INNER JOIN chickspullout C ON C.hatchbatchid = HB.id
		LEFT JOIN location L ON H.locationid = L.id
        LEFT JOIN reference R ON R.id = L.id
	
	WHERE
		HB.statusid = 302;
        
      

END;



CREATE PROCEDURE `spc_materialreceipt_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM materialreceiptdetail WHERE materialreceiptid = p_id;
	DELETE FROM materialreceipt WHERE id = p_id;
END;



CREATE PROCEDURE `spc_materialreceipt_save`(
    IN p_id INT,
    IN p_receiptdate DATE,
    IN p_receipttype INT(11),
    IN p_batchid INT(11),
    IN p_statusid INT(11),
    IN p_remark VARCHAR(100),
    IN p_createdby INT(11),
    IN p_approvedby INT(11),
    IN p_approveddate DATE,
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialreceipt 
				(id, receiptdate, receipttype, batchid, statusid, remark, createdby, approvedby, approveddate, companyid)
			VALUES 
				(p_id, p_receiptdate, p_receipttype, p_batchid, p_statusid, p_remark, p_createdby, p_approvedby, p_approveddate, p_companyid);
                
            
		SET @action = 'INSERT';

	ELSE
    
		UPDATE materialreceipt
			SET receiptdate = p_receiptdate, 
				receipttype = p_receipttype,
                batchid = p_batchid,
                statusid = p_statusid,
                remark = p_remark,
                createdby = p_createdby,
                approvedby = p_approvedby,
                approveddate = p_approveddate,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'materialreceipt', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_materialreceipt_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 MR.id,
         DATE_FORMAT(receiptdate,'%d/%m/%Y') as receiptdate,
		 receipttype,
		 batchid,
		 MR.statusid,
         R1.refname,
		 remark,
		 createdby,
		 approvedby,
         DATE_FORMAT(approveddate,'%d/%m/%Y') as approveddate,
         R2.refname as receipttypename
		 
	FROM
		materialreceipt MR
        LEFT JOIN reference R1 ON R1.id = MR.statusid
        LEFT JOIN reference R2 ON R2.id = MR.receipttype
        
   	
	WHERE
		MR.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_materialreceipt_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 MR.id,
         DATE_FORMAT(receiptdate,'%d/%m/%Y') as receiptdate,
		 receipttype,
		 batchid,
		 MR.statusid,
         R.refname,
		 remark,
		 createdby,
		 approvedby,
         DATE_FORMAT(approveddate,'%d/%m/%Y') as approveddate,
		 MR.towarehouse,
         W.warehousename
        
	FROM
		materialreceipt MR
        LEFT JOIN reference R ON R.id = MR.statusid
        LEFT JOIN warehouse W ON MR.towarehouse = W.id
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND MR.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_materialrecptdetail_byeggsdistribution_save`(
	IN p_eggscollectionid INT(11),
	IN p_companyid INT(11),
	IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempmaterialreceipt;

	SET @collectiondate = null;
	SET @breederbatchid = null;


	SELECT collectiondate, breederbatchid
	INTO @collectiondate, @breederbatchid
	FROM eggscollection WHERE id = p_eggscollectionid;

	SET @out_recid = NULL;
	CALL spc_materialreceipt_save(
		NULL, @collectiondate, 341, @breederbatchid, 322, NULL,
		p_userid, p_userid,@collectiondate, p_companyid,
		p_userid, @out_recid
	);

	SET @row_number = 0;
		   
	CREATE TEMPORARY TABLE tempmaterialreceipt

	SELECT (@row_number:=@row_number + 1) AS num, id as eggsdistributiondetailid, totalcost, itemid, itemname, unitcost, itemunitid, towarehouseid, quantity, (SELECT id FROM warehousebin WHERE warehouseid = (SELECT towarehouseid FROM eggscollection WHERE id = p_eggscollectionid) AND isdefault = 1) as towarehousebinid from (

		SELECT 
			((SELECT unitcost FROM item WHERE id = EDD.itemid) * EDD.quantity) as totalcost,
			EDD.id,
            EDD.itemid,
			I.itemname,
			I.unitcost,
			I.itemunitid,
			EC.towarehouseid,
			EDD.quantity
		FROM eggsdistributiondetail EDD
		LEFT JOIN item I ON I.id = EDD.itemid
		LEFT JOIN eggscollection EC ON EC.id = EDD.eggscollectionid
		where eggscollectionid = p_eggscollectionid
	) 
	as tblmaterialreceipt;

				BEGIN
							DECLARE n INT DEFAULT 0;
							DECLARE i INT DEFAULT 0;
							SELECT COUNT(*) FROM tempmaterialreceipt INTO n;
						
							WHILE i<n DO 
							
								SET @totalcost = null;
								SET @itemid = null;
								SET @itemname = null;
								SET @unitcost = null;
								SET @itemunitid = null;
								SET @towarehouseid = null;
								SET @towarehousebinid = null;
								SET @quantity = null;
                                SET @eggsdistributiondetailid = null;
								select totalcost, itemid, itemname, unitcost, itemunitid, towarehouseid, towarehousebinid, quantity, eggsdistributiondetailid
								into @totalcost, @itemid, @itemname, @unitcost, @itemunitid, @towarehouseid, @towarehousebinid, @quantity, @eggsdistributiondetailid from tempmaterialreceipt where num = i+1;
							
                           -- if(@quantity > 0)then
							
							-- Create item batch
							
							-- itembatch for hatching eggs
								SET @itembatch = null;
								SET @itemgroup = null;
								-- SET @eggsdistributiondetailid = p_distributionid;
								
								select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch from item I
								INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

								WHERE I.id = @itemid;
								
								SELECT @itembatch;
								
							 UPDATE eggsdistributiondetail SET itembatchid = @itembatch WHERE id = @eggsdistributiondetailid;
								
								 -- Material receipt detail entry
						SET @out_recdetailid = NULL;
						
						CALL spc_materialreceiptdetail_save(
							NULL, @out_recid, @itemid, 
							@itemname,
							@quantity, 
							@unitcost ,
							@totalcost,
							@itemunitid,
							@itembatch,
							@towarehouseid,
							@towarehousebinid,
							p_companyid, p_userid, NULL, @out_recdetailid
						);
						
						 -- get item group id from the item id and update itemgroup table
						SELECT itemgroupid INTO @itemgroup FROM item WHERE id = @itemid;
						
						UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
						
						WHERE id = @itemgroup;
						
							-- Make material movement entry for material receipt
					   SET @out_movid = NULL;
						CALL spc_materialmovement_save(
							NULL, @itemid,  @itembatch, 684,
							@out_recid, @collectiondate, @quantity,
							NULL, NULL, @towarehouseid,
							@towarehousebinid,
							@totalcost,
							p_companyid, p_userid, @out_movid
						);
								
					SET i = i + 1;
                   -- end if;
				END WHILE;
		End;
    

END;



CREATE PROCEDURE `spc_materialrecptdetail_bylayereggsdictribution_save`(
	IN p_eggscollectionid INT(11),
	IN p_companyid INT(11),
	IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempmaterialreceipt;

	SET @collectiondate = null;
	SET @layerbatchid = null;


	SELECT collectiondate, layerbatchid
	INTO @collectiondate, @layerbatchid
	FROM layereggscollection WHERE id = p_eggscollectionid;

	SET @out_recid = NULL;
	CALL spc_materialreceipt_save(
		NULL, @collectiondate, 341, @layerbatchid, 322, NULL,
		p_userid, p_userid,@collectiondate, p_companyid,
		p_userid, @out_recid
	);

	SET @row_number = 0;
		   
	CREATE TEMPORARY TABLE tempmaterialreceipt

	SELECT (@row_number:=@row_number + 1) AS num, id as eggsdistributiondetailid, totalcost, itemid, itemname, unitcost, itemunitid, towarehouseid, quantity, (SELECT id FROM warehousebin WHERE warehouseid = (SELECT towarehouseid FROM eggscollection WHERE id = p_eggscollectionid) AND isdefault = 1) as towarehousebinid from (

		SELECT 
			((SELECT unitcost FROM item WHERE id = EDD.itemid) * EDD.quantity) as totalcost,
			EDD.id,
            EDD.itemid,
			I.itemname,
			I.unitcost,
			I.itemunitid,
			EC.towarehouseid,
			EDD.quantity
		FROM layereggsdistributiondetail EDD
		LEFT JOIN item I ON I.id = EDD.itemid
		LEFT JOIN layereggscollection EC ON EC.id = EDD.eggscollectionid
		where eggscollectionid = p_eggscollectionid
	) 
	as tblmaterialreceipt;

				BEGIN
							DECLARE n INT DEFAULT 0;
							DECLARE i INT DEFAULT 0;
							SELECT COUNT(*) FROM tempmaterialreceipt INTO n;
						
							WHILE i<n DO 
							
								SET @totalcost = null;
								SET @itemid = null;
								SET @itemname = null;
								SET @unitcost = null;
								SET @itemunitid = null;
								SET @towarehouseid = null;
								SET @towarehousebinid = null;
								SET @quantity = null;
                                SET @eggsdistributiondetailid = null;
								select totalcost, itemid, itemname, unitcost, itemunitid, towarehouseid, towarehousebinid, quantity, eggsdistributiondetailid
								into @totalcost, @itemid, @itemname, @unitcost, @itemunitid, @towarehouseid, @towarehousebinid, @quantity, @eggsdistributiondetailid from tempmaterialreceipt where num = i+1;
							
                           -- if(@quantity > 0)then
							
							-- Create item batch
							
							-- itembatch for hatching eggs
								SET @itembatch = null;
								SET @itemgroup = null;
								-- SET @eggsdistributiondetailid = p_distributionid;
								
								select CONCAT(IG.seriesprefix,IG.seriesseparator,I.itemcode,IG.seriesseparator,IG.seriesstartwith) INTO @itembatch from item I
								INNER JOIN itemgroup IG ON IG.id = I.itemgroupid

								WHERE I.id = @itemid;
								
								SELECT @itembatch;
								
							 UPDATE eggsdistributiondetail SET itembatchid = @itembatch WHERE id = @eggsdistributiondetailid;
								
								 -- Material receipt detail entry
						SET @out_recdetailid = NULL;
						
						CALL spc_materialreceiptdetail_save(
							NULL, @out_recid, @itemid, 
							@itemname,
							@quantity, 
							@unitcost ,
							@totalcost,
							@itemunitid,
							@itembatch,
							@towarehouseid,
							@towarehousebinid,
							p_companyid, p_userid, NULL, @out_recdetailid
						);
						
						 -- get item group id from the item id and update itemgroup table
						SELECT itemgroupid INTO @itemgroup FROM item WHERE id = @itemid;
						
						UPDATE itemgroup SET seriesstartwith = seriesstartwith +1
						
						WHERE id = @itemgroup;
						
							-- Make material movement entry for material receipt
					   SET @out_movid = NULL;
						CALL spc_materialmovement_save(
							NULL, @itemid,  @itembatch, 684,
							@out_recid, @collectiondate, @quantity,
							NULL, NULL, @towarehouseid,
							@towarehousebinid,
							@totalcost,
							p_companyid, p_userid, @out_movid
						);
								
					SET i = i + 1;
                   -- end if;
				END WHILE;
		End;
    

END;



CREATE PROCEDURE `spc_materialrequestdetail_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM materialrequestdetails WHERE id = p_id;
END;



CREATE PROCEDURE `spc_materialrequestdetail_save`(
    IN p_id INT,
    IN p_materialrequestid INT(11),
    IN p_itemid INT(11),
    IN p_itemname VARCHAR(100),
    IN p_quantity INT(11),
    IN p_unitid INT(11),
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialrequestdetails 
				(id, materialrequestid, itemid, itemname, quantity, unitid, companyid)
			VALUES 
				(p_id, p_materialrequestid, p_itemid, p_itemname, p_quantity, p_unitid, p_companyid);
		
        SET @action = 'INSERT';

	ELSE
    
		UPDATE materialrequestdetails
			SET materialrequestid = p_materialrequestid, 
				itemid = p_itemid,
                itemname = p_itemname,
                quantity = p_quantity,
                unitid = p_unitid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
             SET @action = 'UPDATE';   
                
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	-- record log
   CALL spc_commonlog_save(p_companyid, 'materialrequestdetails', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_materialrequestdetail_search`(
    IN p_materialrequestid INT
)
BEGIN
    
    SELECT
		 MRD.id as requestdetailid,
         MRD.materialrequestid,
		 MRD.itemid,
         MRD.itemname,
		 MRD.unitid,
		 R.refname as unit,
         MRD.quantity as requestedquantity,
         IG.id as itemgroupid,
		 IG.groupname
        
    FROM
		materialrequestdetails MRD
        LEFT JOIN `reference` R ON MRD.unitid = R.id
        LEFT JOIN item I ON I.id = MRD.itemid
		LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
   	
	WHERE
		MRD.materialrequestid = p_materialrequestid;
END;



CREATE PROCEDURE `spc_materialrequestdetail_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 MRD.id,
         materialrequestid,
		 itemid,
         quantity as requestedquantity,
         MRD.unitid,
         R.refname as unit,
         itemname
        
	FROM
		materialrequestdetails MRD
        LEFT JOIN `reference` R ON MRD.unitid = R.id
        
	WHERE
		MRD.id = p_id;

END;



CREATE PROCEDURE `spc_materialrequest_bycompanyid`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 MR.id,
         requestsource,
         R2.refname as requestfrom,
         requesttarget,
         R3.refname as requestto,
         MR.statusid,
         R1.refname,
         DATE_FORMAT(requestdate,'%d/%m/%Y') as requestdate,
         DATE_FORMAT(duedate,'%d/%m/%Y') as duedate,
         remark,
         MR.towarehouseid,
         W.warehousecode as towarehousecode,
         W.warehousename as towarehousename,
         MR.towarehousebinid,
         WB1.bincode as towarehousebincode,
         WB1.binname as towarehousebinname,
         MR.fromwarehouseid,
         W1.warehousecode as fromwarehousecode,
         W1.warehousename as fromwarehousename,
         MR.fromwarehousebinid,
         WB2.bincode as fromwarehousebincode,
         WB2.binname as fromwarehousebinname,
         tobatchid
        
	FROM
		materialrequest MR
        LEFT JOIN `reference` R1 ON R1.id = MR.statusid
        LEFT JOIN warehouse W ON MR.towarehouseid = W.id
        LEFT JOIN warehouse W1 ON MR.fromwarehouseid = W1.id
        LEFT JOIN warehousebin WB1 ON MR.towarehousebinid = WB1.id
        LEFT JOIN warehousebin WB2 ON MR.fromwarehousebinid = WB2.id
        LEFT JOIN `reference` R2 ON R2.id = MR.requestsource
        LEFT JOIN `reference` R3 ON R3.id = MR.requesttarget
   	
	WHERE
		MR.companyid = p_companyid
        
	ORDER BY 
		MR.id DESC;
END;



CREATE PROCEDURE `spc_materialrequest_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM materialrequestdetails WHERE materialrequestid = p_id;
	DELETE FROM materialrequest WHERE id = p_id;
END;



CREATE PROCEDURE `spc_materialrequest_getbatchesbyrequesttarget`(
	IN p_companyid INT,
    IN p_requesttarget INT
)
BEGIN

	if(p_requesttarget = 501) THEN -- Breeder

		SELECT
			B.id,
			L.locationcode,
			L.locationname,
			W.warehousecode,
			W.warehousename,
			batchname,
			binid,
			WB.bincode,
			WB.binname
		
		FROM
			breederbatch B
		
		LEFT JOIN location L ON B.locationid = L.id
		LEFT JOIN warehouse W ON B.warehouseid = W.id
		LEFT JOIN warehousebin WB on B.binid = WB.id
		
		WHERE
			B.companyid = p_companyid;
	   
	elseif(p_requesttarget = 502) THEN -- Hatchery
		
		SELECT
			SB.id as settingno,
            S.warehouseid, 
            S.warehousebinid,
            W.warehousename,
            WB.binname,
			SB.setterid,
			L.id as locationid,
			L.locationname,
			BB.batchname as breederbatchname,
			S.settername,
			DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
			SB.scheduleid,
			SB.status,
			R.refname,
			SB.itembatch
		
		FROM
			setterbatch SB
		
		LEFT JOIN setter S ON SB.setterid = S.id
        LEFT JOIN warehouse W ON W.id = S.warehouseid
        LEFT JOIN warehousebin WB ON WB.id = S.warehousebinid
		LEFT JOIN breederbatch BB on SB.breederbatchid = BB.id
		LEFT JOIN location L ON S.locationid = L.id
		LEFT JOIN `reference` R ON R.id = SB.status    
			
		WHERE
			SB.companyid = p_companyid
            and SB.status = 282
			
		ORDER BY
			SB.id DESC;
            

    elseif(p_requesttarget = 505) THEN -- Hatchery
		
		SELECT
			B.id,
			L.locationcode,
			L.locationname,
			W.warehousecode,
			W.warehousename,
			batchname,
			binid,
			WB.bincode,
			WB.binname
		
		FROM
			layerbatch B
		
		LEFT JOIN location L ON B.locationid = L.id
		LEFT JOIN warehouse W ON B.warehouseid = W.id
		LEFT JOIN warehousebin WB on B.binid = WB.id
		
		WHERE
			B.companyid = p_companyid;
            
	END IF;

END;



CREATE PROCEDURE `spc_materialrequest_save`(
    IN p_id INT,
    IN p_requestsource INT(11),
    IN p_requesttarget INT(11),
    IN p_statusid INT(11),
    IN p_requestdate DATE,
    IN p_duedate DATE,
    IN p_remark VARCHAR(100),
    IN p_fromwarehouseid INT(11),
	IN p_fromwarehousebinid INT(11),
    IN p_towarehouseid INT(11),
    IN p_towarehousebinid INT(11),
    IN p_tobatchid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialrequest 
				(id, requestsource, requesttarget, statusid, 
                requestdate, duedate, remark, fromwarehouseid, fromwarehousebinid,
                towarehouseid, towarehousebinid, tobatchid, companyid)
			VALUES 
				(p_id, p_requestsource, p_requesttarget, p_statusid,
                p_requestdate, p_duedate, p_remark, p_fromwarehouseid, p_fromwarehousebinid, 
                p_towarehouseid, p_towarehousebinid, p_tobatchid, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE materialrequest
			SET requestsource = p_requestsource, 
				requesttarget = p_requesttarget,
                statusid = p_statusid,
                requestdate = p_requestdate,
                duedate = p_duedate,
                remark = p_remark,
                fromwarehouseid = p_fromwarehouseid,
                fromwarehousebinid = p_fromwarehousebinid,
                towarehouseid = p_towarehouseid,
                towarehousebinid = p_towarehousebinid,
                tobatchid = p_tobatchid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'materialrequest', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_materialrequest_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 MR.id,
         MR.requestsource,
         R2.refname as requestfrom,
         MR.requesttarget,
         R3.refname as requestto,
         MR.statusid,
         R1.refname,
         DATE_FORMAT(MR.requestdate,'%d/%m/%Y') as requestdate,
         DATE_FORMAT(MR.duedate,'%d/%m/%Y') as duedate,
         MR.remark,
         MR.towarehouseid,
         W.warehousecode as towarehousecode,
         W.warehousename as towarehousename,
         MR.towarehousebinid,
         WB.binname as towarehousebinname,
         WB.bincode as towarehousebincode,
         MR.fromwarehouseid,
         W1.warehousecode as fromwarehousecode,
         W1.warehousename as fromwarehousename,
         W1.locationid,
         MR.fromwarehousebinid,
         WB1.binname as fromwarehousebinname,
         WB1.bincode as fromwarehousebincode,
         MR.tobatchid
        
	FROM
		materialrequest MR
        LEFT JOIN `reference` R1 ON R1.id = MR.statusid
        LEFT JOIN warehouse W ON MR.towarehouseid = W.id
        LEFT JOIN warehouse W1 ON MR.fromwarehouseid = W1.id
        LEFT JOIN `reference` R2 ON R2.id = MR.requestsource
        LEFT JOIN `reference` R3 ON R3.id = MR.requesttarget
        LEFT JOIN materialtransfer MT ON MR.id = MT.requestid
        LEFT JOIN warehousebin WB ON WB.id = MR.towarehousebinid
        LEFT JOIN warehousebin WB1 ON WB1.id = MR.fromwarehousebinid
   	
	WHERE
		MR.companyid = p_companyid AND
       -- MR.statusid = 444 AND
        MT.id IS NULL -- Material request which were not used in Material Transfer
        
	ORDER BY 
		MR.id DESC;
END;



CREATE PROCEDURE `spc_materialrequest_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 MR.id,
         requestsource,
         requesttarget,
         MR.statusid,
         R.refname,
         DATE_FORMAT(requestdate,'%d/%m/%Y') as requestdate,
         DATE_FORMAT(duedate,'%d/%m/%Y') as duedate,
         remark,
         MR.fromwarehouseid,
         MR.fromwarehousebinid,
         MR.towarehouseid,
         MR.towarehousebinid,
         W1.warehousename as fromwarehousename,
         WB1.binname as fromwarehousebinname,
         W2.warehousename as towarehousename,
         WB2.binname as towarehousebinname,
         MR.tobatchid
        
	FROM
		materialrequest MR
        LEFT JOIN `reference` R ON R.id = MR.statusid
        LEFT JOIN warehouse W1 ON MR.fromwarehouseid = W1.id
        LEFT JOIN warehouse W2 ON MR.towarehouseid = W2.id
        LEFT JOIN warehousebin WB1 ON MR.fromwarehousebinid = WB1.id
        LEFT JOIN warehousebin WB2 ON MR.towarehousebinid = WB2.id
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND MR.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_materialtransferdetails_search`(
  IN p_materialtransferid INT 
)
BEGIN
	SELECT MRD.id,
		   MRD.materialtransferid,
           MRD.towarehouseid,
           W.warehousename as towarehousename,
		   MRD.towarehousebinid,
           WB.binname as towarehousebinname,
		   MRD.itemid,
           MRD.itemname,
           MRD.requestedquantity,
           MRD.transferedquantity,
           MRD.itemunit as unitid,
           R.refname as unit,
           MRD.itembatch,
           IG.id as itemgroupid,
           IG.groupname
            
    FROM  materialtransferdetails MRD
    LEFT JOIN `reference` R ON MRD.itemunit = R.id
    LEFT JOIN warehouse W ON W.id = MRD.towarehouseid
	LEFT JOIN warehousebin WB ON WB.id = MRD.towarehousebinid
    LEFT JOIN item I ON I.id = MRD.itemid
    LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
    
    WHERE 
          MRD.materialtransferid = p_materialtransferid;
END;



CREATE PROCEDURE `spc_materialtransferdetails_select`(
 IN p_id INT
)
BEGIN
	 SELECT
			MTD.id,
			MTD.materialtransferid,
            MRD.towarehouseid,
            W.warehousename,
			MRD.towarehousebinid,
            WB.binname,
			MTD.itemid,
			MTD.itemname,
			MTD.requestedquantity,
			MTD.transferedquantity,
			MTD.itemunit as unitid,
            R.refname as unit,
            MTD.itembatch
    FROM
		 materialtransferdetails MTD
         LEFT JOIN `reference` R ON MTD.itemunit = R.id
         LEFT JOIN warehouse W ON W.id = MRD.towarehouseid
         LEFT JOIN warehouse WB ON WB.id = MRD.towarehousebinid
        
	WHERE
		 MTD.id = p_id;
END;



CREATE PROCEDURE `spc_materialtransferdetail_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN

    DELETE FROM materialtransferdetails WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'materialtransferdetails', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_materialtransferdetail_save`(
	IN p_id INT,
    IN p_materialtransferid INT,
    IN p_towarehouseid INT,
    IN p_towarehousebinid INT,
    IN p_itemid INT,
    IN p_itemname VARCHAR(150),
    IN p_requestedquantity DECIMAL(9,3),
    IN p_transferedquantity DECIMAL(9,3),
    IN p_itemunit VARCHAR(50),
    IN p_itembatch VARCHAR(100),
    IN p_userid INT,
    IN p_companyid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialtransferdetails
				(id, materialtransferid, towarehouseid, 
                     towarehousebinid, itemid, itemname, requestedquantity, transferedquantity, itemunit, itembatch, companyid)
			VALUES 
				(p_id, p_materialtransferid, p_towarehouseid, 
                     p_towarehousebinid, p_itemid, p_itemname, p_requestedquantity, p_transferedquantity, p_itemunit, p_itembatch, p_companyid);
		
        SET @action = 'INSERT';
	ELSE
    
		UPDATE materialtransferdetails
				SET materialtransferid = p_materialtransferid, 
                towarehouseid = p_towarehouseid, 
				towarehousebinid = p_towarehousebinid,
                itemid = p_itemid, 
                itemname = p_itemname,
                requestedquantity = p_requestedquantity,
                transferedquantity = p_transferedquantity,
                itemunit = p_itemunit,
                itembatch = p_itembatch,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';  
        
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    SET @fromwarehouseid = NULL;
    SET @fromwarehousebinid = NULL;
    
    SELECT fromwarehouseid, fromwarehousebinid INTO @fromwarehouseid, @fromwarehousebinid
	FROM materialtransfer WHERE id = p_materialtransferid; 
    
     -- Do material movement entry for material transfer
        SET @out_movid1 = NULL;
		CALL spc_materialmovement_save(
			NULL, p_itemid, p_itembatch, 682,
			p_materialtransferid, now(), p_transferedquantity,
			(SELECT fromwarehouseid FROM materialtransfer WHERE id = p_materialtransferid),
            (SELECT fromwarehousebinid FROM materialtransfer WHERE id = p_materialtransferid),
            p_towarehouseid, p_towarehousebinid,
			(p_transferedquantity * (SELECT unitcost FROM item WHERE id = p_itemid)),
			p_companyid, p_userid, @out_movid1
		);
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'materialtransferdetails', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_materialtransfer_byrequestid`(
    IN p_requestid INT,
    IN p_companyid INT
)
BEGIN
    
    SELECT
			MT.id,
            MT.fromwarehouseid,
            W.warehousename as fromwarehouse,
            MT.frombatchid,
            B.batchname,
            MT.requestid,
            MTD.transferedquantity,
            MTD.itembatch
      
    FROM
		materialtransfer MT
	
    LEFT JOIN materialtransferdetails MTD ON MT.id = MTD.materialtransferid
    LEFT JOIN warehouse W ON MT.fromwarehouseid = W.id
    LEFT JOIN breederbatch B ON MT.frombatchid = B.id
    
	
	WHERE
		MT.companyid = p_companyid and 
        MT.requestid = p_requestid;
END;



CREATE PROCEDURE `spc_materialtransfer_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN
	DELETE FROM materialtransferdetails WHERE materialtransferid = p_id;
    DELETE FROM materialtransfer WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'materialtransfer', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_materialtransfer_save`(
	IN p_id INT,
	IN p_transfersource INT,
    IN p_transfertarget INT,
    IN p_statusid INT,
    IN p_duedate DATE,
    IN p_transferdate DATE,
    IN p_remark VARCHAR(500),
    IN p_fromwarehouseid INT,
    IN p_fromwarehousebinid INT,
    IN p_usagetype VARCHAR(150),
    IN p_frombatchid INT,
    IN p_tobatchid INT,
    IN p_requestid INT,
	IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    SET @itemid = null;
    SET @quantity = null;
	SET	@unitcost = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO materialtransfer 
				    (id, 
                     transfersource, 
                     transfertarget, 
                     statusid, 
                     duedate, 
                     transferdate,
                     remark,
					 fromwarehouseid, 
                     fromwarehousebinid,
                     usagetype, 
                     frombatchid, 
                     tobatchid, 
                     requestid, 
                     companyid)
			VALUES 
				   (p_id, 
                    p_transfersource,
                    p_transfertarget, 
                    p_statusid, 
                    p_duedate, 
                    p_transferdate, 
                    p_remark,
					p_fromwarehouseid, 
                    p_fromwarehousebinid,
                    p_usagetype, 
                    p_frombatchid, 
                    p_tobatchid, 
                    p_requestid, 
                    p_companyid);
                    
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE materialtransfer
				SET 
                transfersource = p_transfersource,
				transfertarget = p_transfertarget,
                statusid = p_statusid,
				duedate = p_duedate,
				transferdate = p_transferdate,
				remark = p_remark,
				fromwarehouseid = p_fromwarehouseid,
                fromwarehousebinid = p_fromwarehousebinid,
				usagetype = p_usagetype,
				frombatchid = p_frombatchid,
				tobatchid = p_tobatchid,
				requestid = p_requestid,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'materialtransfer', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_materialtransfer_search`(
    -- IN p_transfertarget VARCHAR(150),
    IN p_companyid INT
)
BEGIN
    
    SELECT
			MT.id,
			MT.transfersource as transfersourceid,
			R1.refname as transfersource,
			MT.transfertarget as transfertargetid,
            R2.refname as transfertarget,
            MT.statusid,
            R3.refname as status,
            DATE_FORMAT(MT.duedate,'%d/%m/%Y') as duedate,
            DATE_FORMAT(MT.transferdate,'%d/%m/%Y') as transferdate,
            MT.remark,
            MT.fromwarehouseid,
            W1.warehousecode as fromwarehousecode,
            W1.warehousename as fromwarehousename,
			MT.fromwarehousebinid,
            WB.bincode as fromwarehousebincode,
            WB.binname as fromwarehousebinname,
            MT.usagetype as usagetypeid,
            R4.refname as usagetype,
            MT.frombatchid,
            B.batchname,
            MT.requestid,
            MT.tobatchid
      
    FROM
		materialtransfer MT
	
    LEFT JOIN `reference` R1 ON MT.transfersource = R1.id
    LEFT JOIN `reference` R2 ON MT.transfertarget = R2.id
	LEFT JOIN `reference` R3 ON MT.statusid = R3.id
	LEFT JOIN `reference` R4 ON MT.usagetype = R4.id
    LEFT JOIN warehouse W1 ON MT.fromwarehouseid = W1.id
    LEFT JOIN warehousebin WB ON WB.id = MT.fromwarehousebinid
    LEFT JOIN breederbatch B ON MT.frombatchid = B.id
	
	WHERE
		MT.companyid = p_companyid
       -- M.transfertarget = p_transfertarget;
       
	ORDER BY MT.id DESC;
END;



CREATE PROCEDURE `spc_materialtransfer_select`(
	IN p_id INT
)
BEGIN

	SELECT 
		  M.id,
		  M.transfersource,
          M.transfertarget,
          M.statusid,
          R.refname as status,
          DATE_FORMAT(M.duedate,'%d/%m/%Y') as duedate,
          DATE_FORMAT(M.transferdate,'%d/%m/%Y') as transferdate,
          remark,
          M.towarehouseid,
          W2.warehousecode as towarehousecode,
          W2.warehousename as towarehousename,
          M.towarehousebinid,
          WB2.binname as towarehousebinname,
          WB2.bincode as towarehousebincode,
          M.fromwarehouseid,
          W1.warehousecode as fromwarehousecode,
          W1.warehousename as fromwarehousename,
          M.fromwarehousebinid,
          WB1.binname as fromwarehousebinname,
          WB1.bincode as fromwarehousebincode,
          M.usagetype,
          M.frombatchid,
          B.batchname
        
	FROM
		materialtransfer M
        
    LEFT JOIN `reference` R ON M.statusid = R.id
    LEFT JOIN warehouse W1 ON M.fromwarehouseid = W1.id
    LEFT JOIN warehouse W2 ON M.towarehouseid = W2.id
    LEFT JOIN warehousebin WB1 ON M.fromwarehousebinid = WB1.id
    LEFT JOIN warehousebin WB2 ON M.towarehousebinid = WB2.id
    LEFT JOIN breederbatch B ON M.frombatchid = B.id
    
	WHERE
	    M.id = p_id ;
          
END;



CREATE PROCEDURE `spc_materialtransfer_tempInsert`(
	IN p_hatcheryscheduleid INT,
    IN p_userid INT
)
BEGIN

	-- Status 242 is 'Approve'

	SET @hatcheryscheduledetailid = NULL;
    SET @sourceid = NULL;
    SET @requestid = NULL;
	SET @isfinished = FALSE;
    SET @companyid = NULL;
    
    
    -- Check atleast 1 scheduledetail is approved, and not having materialtranfer or purchaseorder
    
	IF EXISTS(SELECT HS.id FROM hatcheryscheduledetail HS
                    LEFT JOIN materialrequest MR ON HS.requestid = MR.id AND MR.statusid = 444
                    LEFT JOIN purchaserequest PR ON HS.requestid = PR.id AND PR.statusid = 92
					
                    WHERE HS.statusid = 242 
                   
					AND 
                    (
                    (sourceid = 261 AND MR.id is not null)
						OR
                    (sourceid = 262 AND PR.id is not null)
                    )
					AND hatcheryscheduleid = p_hatcheryscheduleid) THEN
    
    
		-- Looping all Approved hatcheryscheduledetails, but not processed further
		
		label1: WHILE @isfinished = FALSE DO
			
			SET @hatcheryscheduleid = NULL;
			
			SELECT HS.id, sourceid, requestid, HS.companyid 
					INTO @hatcheryscheduledetailid, @sourceid, @requestid, @companyid 
				
					FROM hatcheryscheduledetail HS
                    LEFT JOIN materialrequest MR ON HS.requestid = MR.id AND MR.statusid = 444
                    LEFT JOIN purchaserequest PR ON HS.requestid = PR.id AND PR.statusid = 92
					
                    WHERE HS.statusid = 242 
                   
					AND 
                    (
                    (sourceid = 261 AND MR.id is not null)
						OR
                    (sourceid = 262 AND PR.id is not null)
                    )
					AND hatcheryscheduleid = p_hatcheryscheduleid
					LIMIT 1;
		 
			IF(@hatcheryscheduledetailid IS NOT NULL AND @requestid IS NOT NULL) THEN
			
				IF(@sourceid = 261) THEN -- Source 261 is 'OWN'
            
					SET @duedate = NULL;
					SET @fromwarehouseid = NULL;
					SET @towarehouseid = NULL;
					
					SELECT duedate, fromwarehouseid, towarehouseid 
							INTO @duedate, @fromwarehouseid, @towarehouseid
					FROM materialrequest WHERE id = @requestid;
            
                
					SET @out_materialtransferid = NULL;
                
					-- source 481 is 'Breeder'
                    -- target 482 is 'Hatchery'
                    -- status 581 is 'New'
                    -- usagetype 621 is 'Hatcher'
                    -- tobatchid 1 is 'breeder batch id' (will need actual breederbatchid when form submitted)
                    
					CALL spc_materialtransfer_save(NULL, 481, 482, 581, @duedate, now(), null, 
									IFNULL(@fromwarehouseid, 2), IFNULL(@towarehouseid,3), 621, 1, null, @requestid, 
                                    @companyid, p_userid, @out_materialtransferid);

					IF(IFNULL(@out_materialtransferid, 0) > 0) THEN
                    
						INSERT INTO materialtransferdetails 
							(materialtransferid, itemid, itemname, requestedquantity, transferedquantity, 
								itemunit, itembatchid, companyid)
                    
						SELECT @out_materialtransferid, itemid, itemname, quantity, quantity, 
								unitid, 1, companyid
						FROM materialrequestdetails
                        WHERE 
							materialrequestid = @requestid;
                    
                     -- Materialrequest status 442 is 'Complete'
						UPDATE materialrequest SET statusid = 442 WHERE id = @requestid;
                    
                    END IF;
					
                
                ELSEIF (@sourceid = 262) THEN -- Source 262 is 'PURCHASED'
				
					SET @podate = NULL;
                    
					
                    -- Take request fields for purchase order
                    
					SELECT approvaldate, companyid INTO @podate, @companyid FROM purchaserequest
						WHERE id = @requestid;
					                    
                    IF(@podate is null) THEN
						SET @podate = NOW();
                    END IF;
                		
					
                    SET @out_purchaseorderid = NULL;
                    
                    -- Vendorid '1' is temporary supplier id
                    -- shipfromwarehouseid is NULL for now
                    -- Status 521 is 'New'
                    
					CALL spc_purchaseorder_save(NULL, 1, @requestid, @podate, @podate, NULL, 0, NULL, 521, 
													@companyid, p_userid, @out_purchaseorderid);
                
					
                
					IF (@out_purchaseorderid > 0) THEN
						
                        SELECT @out_purchaseorderid AS out_purchaseorderid;
                        
                        SET @out_purchaseorderdetailid = NULL;
                        
                        -- Insert all purchaserequestdetails to purchaseorderdetails for requestid
                        
                        INSERT INTO purchaseorderdetail
							(purchaseorderid, itemid, quantity, itemunit, unitprice, itemdiscount, 
								taxid, companyid)
                                
						SELECT @out_purchaseorderid, itemid, quantity, unitid, NULL, NULL, 
								NULL, @companyid
							FROM purchaserequestdetail
							WHERE purchaserequestid = @requestid;
                    		
						
                        -- Update purchaserequest status 93 is 'Processed'
						UPDATE purchaserequest SET statusid = 93 WHERE id = @requestid;

						
                                               
							SET @out_grpoid = NULL;
                        
							select @companyid as companyid;
                        
							-- grpodate is considered here podate for now
							-- supplierid is '1' for now
                            -- 
							CALL spc_grpo_save(NULL, @podate, 1, NULL, NULL, 
									@out_purchaseorderid, @podate, NULL, NULL, NULL, NULL,
                                    1, NULL, @companyid, p_userid, @out_grpoid);
							
                            IF (@out_grpoid > 0) THEN
                                
                                
                                INSERT INTO grpodetail
									(grpoid, itemid, itemname, quantity, itemunitid, remark, 
										itembatch, companyid)
                                        
								SELECT @out_grpoid, itemid, null, quantity, itemunit, null,
										'1', @companyid
									FROM purchaseorderdetail
                                    WHERE purchaseorderid = @out_purchaseorderid;
                            
                            
								-- Update purchaseorder status 522 is 'Completed'
								UPDATE purchaseorder SET statusid = 522 WHERE id = @out_purchaseorderid;
                            
                            END IF;
                    
                    END IF;
                
                END IF;
				
            
			END IF;
		 
			IF NOT EXISTS(SELECT HS.id
					
					FROM hatcheryscheduledetail HS
                    LEFT JOIN materialrequest MR ON HS.requestid = MR.id AND MR.statusid = 444
                    LEFT JOIN purchaserequest PR ON HS.requestid = PR.id AND PR.statusid = 92
					
                    WHERE HS.statusid = 242 
                   
					AND 
                    (
                    (sourceid = 261 AND MR.id is not null)
						OR
                    (sourceid = 262 AND PR.id is not null)
                    )
					AND hatcheryscheduleid = p_hatcheryscheduleid
					LIMIT 1) THEN
                    
				SET @isfinished = TRUE;
                    
			END IF;
		 
		END WHILE label1;
    
    END IF;
	

END;



CREATE PROCEDURE `spc_modulewise_batches`(
	IN p_moduleid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	IF(p_moduleid = 341) THEN
    
		SELECT BB.id as batchid,
			   BB.batchname,
               BB.statusid,
               REF.refname as batchstatus,
               'Breeder' as module
        
        FROM breederbatch BB
        LEFT JOIN `reference` REF ON REF.id = BB.statusid
        
        WHERE BB.statusid = 222
        AND BB.companyid = p_companyid;
	END IF;
    
    IF(p_moduleid = 342) THEN
    
		SELECT SB.id as batchid,
			   SB.`status`,
               REF.refname as batchstatus,
               'Hatchery' as module
        
        FROM setterbatch SB
        LEFT JOIN `reference` REF ON REF.id = SB.`status`
        
        WHERE SB.`status` = 282
        AND SB.companyid = p_companyid;
    
    END IF;
	
    IF(p_moduleid = 345) THEN
    
		SELECT LB.id as batchid,
			   LB.batchname,
               LB.statusid,
               REF.refname as batchstatus,
               'Commercial Layer' as module
        
        FROM layerbatch LB
        LEFT JOIN `reference` REF ON REF.id = LB.statusid
        
        WHERE LB.statusid = 982
        AND LB.companyid = p_companyid;
        
    
    END IF;
END;



CREATE PROCEDURE `spc_notificationhistory_popuplist`(
	IN p_userid INT,
    IN p_limit INT
)
BEGIN
	
    SET @reccount = 0;
    
	 select count(*) INTO @reccount FROM notificationhistory 
		WHERE FIND_IN_SET(p_userid, inappusers) 
			AND !FIND_IN_SET(p_userid, IFNULL(inappviewedusers, 0))
			AND inapp = 1;
    
    IF(p_limit IS NULL) THEN
		SET p_limit = 1000000;
    END IF;
    
	SELECT 
		NH.id,
        DATE_FORMAT(NH.notificationtime,'%d/%m/%Y %h:%m %p') as `date`,
        EN.displayname as title,
        NH.content as description, 
        'Medium' as priority,
        NH.transactionid,
        NH.transactiontypeid,
        EN.pagekey,
		NH.inapp, 
        NH.sms, 
        NH.email,
        @reccount as unreadcount
    FROM 
		notificationhistory NH
    LEFT JOIN 
		entity EN ON NH.transactiontypeid = EN.id
    WHERE
		FIND_IN_SET(p_userid, inappusers) 
        AND !FIND_IN_SET(p_userid, IFNULL(inappviewedusers, 0))
        AND NH.inapp = 1
	ORDER BY NH.notificationtime DESC  
    LIMIT p_limit;
END;



CREATE PROCEDURE `spc_notificationhistory_readsave`(
	IN p_userid INT,
    IN p_notificationids VARCHAR(3000),
	OUT out_id INT
)
BEGIN

	SET SQL_SAFE_UPDATES = 0;

		UPDATE notificationhistory SET 
        
        inappviewedusers = CASE 
				WHEN inappviewedusers IS NOT NULL THEN CONCAT(inappviewedusers, ',', p_userid) 
				WHEN inappviewedusers IS NULL THEN CONCAT(p_userid) 
			END
        
		WHERE FIND_IN_SET(id, p_notificationids) AND !FIND_IN_SET(p_userid, IFNULL(inappviewedusers, 0));
        
        SET out_id = 1;
    
    SET SQL_SAFE_UPDATES = 1;
END;



CREATE PROCEDURE `spc_notificationhistory_save`(
	IN p_id INT,
	IN p_moduleid INT,
	IN p_transactiontypeid INT,
    IN p_transactionid INT,
	IN p_content VARCHAR(3000),
	IN p_roleids VARCHAR(500),
    IN p_inappusers VARCHAR(200),
	IN p_inappviewedusers VARCHAR(200),
	IN p_occurances TINYINT,
	IN p_inapp TINYINT,
	IN p_sms TINYINT,
	IN p_email TINYINT,
	IN p_statusid INT,
    IN p_userid INT,
	IN p_companyid INT,
    OUT out_id INT
)
BEGIN

	
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO notificationhistory 
				(	`id`,
					`moduleid`,
					`notificationtime`,
					`transactiontypeid`,
                    `transactionid`,
					`content`,
					`roleids`,
                    `inappusers`,
					`inappviewedusers`,
					`occurances`,
					`inapp`,
					`sms`,
					`email`,
					`statusid`,
                    `companyid`)
			VALUES 
				(	p_id,
					p_moduleid,
					now(),
					p_transactiontypeid,
                    p_transactionid,
					p_content,
					p_roleids,
                    p_inappusers,
					p_inappviewedusers,
					p_occurances,
					p_inapp,
					p_sms,
					p_email,
					p_statusid,
                    p_companyid
                    );
                    
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE notificationhistory
				SET 
					moduleid = p_moduleid,
					transactiontypeid = p_transactiontypeid,
                    transactionid = p_transactionid,
					content = p_content,
					roleids = p_roleids,
                    inappusers = p_inappusers,
					inappviewedusers = p_inappviewedusers,
					occurances = p_occurances,
					inapp = p_inapp,
					sms = p_sms,
					email = p_email,
					statusid = p_statusid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'notificationhistory', out_id, @action, p_userid);


END;



CREATE PROCEDURE `spc_notificationhistory_search`(
	IN p_userid INT
)
BEGIN
	
	SELECT 
		NH.id,
        DATE_FORMAT(NH.notificationtime,'%d/%m/%Y %h:%m %p') as `date`,
        EN.displayname as title,
        NH.content as description, 
        'Medium' as priority,
		NH.transactionid,
        NH.transactiontypeid,
        EN.pagekey,
		NH.inapp, 
        NH.sms, 
        NH.email,
        FIND_IN_SET(p_userid, IFNULL(inappviewedusers, 0)) as isread,
        'notificationPress' as pressevent
    FROM 
		notificationhistory NH
    LEFT JOIN 
		entity EN ON NH.transactiontypeid = EN.id
    WHERE
		FIND_IN_SET(p_userid, inappusers) 
        
        AND NH.inapp = 1
	ORDER BY NH.notificationtime DESC;  
   
END;



CREATE PROCEDURE `spc_notificationtemplate_transactioncode`(
	IN p_transactioncode VARCHAR(100)
)
BEGIN


	
	SELECT TT.`id`,
		TT.`moduleid`,
        REF1.refname as `modulename`,
		TT.`apptransactionid`,
        AP.transactioncode,
        AP.transactionname,
		TT.`roleids`,
        (select GROUP_CONCAT(REF2.refname) from `reference` REF2 WHERE FIND_IN_SET(REF2.id, TT.`roleids`)) as rolenames,
        -- REF2.refname as `rolename`,
		
		TT.`template`
		
	FROM 
		`notificationtemplate` TT
	LEFT JOIN `apptransaction` AP ON TT.apptransactionid = AP.id
	LEFT JOIN `reference` REF1 ON TT.moduleid = REF1.id
    
    WHERE
		AP.transactioncode = p_transactioncode;
END;



CREATE PROCEDURE `spc_notificationuser_save`(
    IN p_userid INT,
    IN p_userkey VARCHAR(50),
    IN p_companyid INT,
    OUT out_id INT
)
BEGIN

	IF(!EXISTS(SELECT * FROM notificationuser WHERE userid = p_userid AND userkey = p_userkey AND companyid = p_companyid LIMIT 1)) THEN

		INSERT INTO notificationuser (userid, userkey, companyid) VALUE (p_userid, p_userkey, p_companyid);
    
		SELECT LAST_INSERT_ID() INTO OUT_ID;
    
	ELSE
    
		SELECT id INTO OUT_ID FROM notificationuser WHERE userid = p_userid AND userkey = p_userkey AND companyid = p_companyid LIMIT 1;
    
    END IF;
    
    
END;



CREATE PROCEDURE `spc_organ_delete`( 
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM organ WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'organ', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_organ_save`( 
 IN p_id INT(11),
 IN p_organname VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO organ
              (organname, companyid)
       VALUES
            (p_organname, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE organ 
   
	SET organname = p_organname,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'organ', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_organ_search`(
 IN p_companyid INT(11)
)
BEGIN

	SELECT 
    id,
    organname,
    companyid
    
	FROM organ
    
    WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_organ_select`( 
IN p_id INT(11)
)
BEGIN

	SELECT id, organname, companyid
           
	FROM organ
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_partner_ddlonrole`(
	IN p_partnerroleid INT
)
BEGIN

	SELECT 
		PT.id,
        partnercode,
        partyname,
        contactperson
	FROM
		partner PT
	
    LEFT JOIN partnerrole PR ON PR.partnerid = PT.id
        
	WHERE
		PR.partnerroleid = p_partnerroleid;

END;



CREATE PROCEDURE `spc_partner_search`(
 IN p_companyid INT
 )
BEGIN
 SELECT
  id,
  partnercode,
  partyname as partnername
  
  FROM partner
  WHERE 
  companyid = p_companyid;
END;



CREATE PROCEDURE `spc_partyaddress_bypartyid`(
	IN p_partyid INT,
    IN p_addresstypeid INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
			PA.`id`,
			PA.`partyid`,
			PA.`address`,
			PA.`addresstypeid`,
			PA.`cityid`,
             CT.`cityname`,
			PA.`stateid`,
             S.statename,
             S.statecode,
             S.isunionterritory,
			PA.`countryid`,
             C.countryname,
			PA.`locationcontactno`,
			PA.`pincode`,
			PA.`gstno`,
			PA.`gsttypeid`,
			PA.`companyid`

	FROM 
		`partyaddress` PA
	LEFT JOIN city CT ON PA.cityid = CT.id
    LEFT JOIN state S ON PA.stateid = S.id
    LEFT JOIN country C ON PA.countryid = C.id
	WHERE
		PA.partyid = p_partyid 
        AND (p_addresstypeid is null OR p_addresstypeid = addresstypeid)
        AND PA.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_partyaddress_save`(
	IN p_id INT,
    IN p_partyid INT,
    IN p_addresstypeid INT,
    IN p_address VARCHAR(500),
    IN p_cityid INT,
	IN p_stateid INT,
    IN p_countryid INT,
    IN p_locationcontactno VARCHAR(100),
    IN p_pincode VARCHAR(50),
    IN p_gstno VARCHAR(50),
    IN p_gsttypeid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
     IF EXISTS(
            SELECT gstno from partyaddress where LOWER(gstno) = LOWER(p_gstno)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    
    BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO partyaddress
				(id, 
				partyid,
                addresstypeid,
                address,
                cityid,
                stateid,
                countryid,
                locationcontactno,
                pincode,
                gstno,
                gsttypeid,
                companyid)
			VALUES 
				(p_id,
                p_partyid,
                p_addresstypeid,
                p_address,
                p_cityid,
                p_stateid,
                p_countryid,
                p_locationcontactno,
                p_pincode,
                p_gstno,
                p_gsttypeid,
				p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE partyaddress
			SET partyid = p_partyid,
				addresstypeid = p_addresstypeid,
                address = p_address,
                cityid = p_cityid,
                stateid = p_stateid,
                countryid = p_countryid,
                locationcontactno = p_locationcontactno,
                pincode = p_pincode,
                gstno = p_gstno,
                gsttypeid = p_gsttypeid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';     
    
	END IF;
    
	SELECT LAST_INSERT_ID() INTO out_id;

	
	-- RECORD LOG
	CALL spc_commonlog_save(p_companyid, 'partyaddress', out_id, @action, p_userid);
END;

END IF;

END;



CREATE PROCEDURE `spc_partyaddress_savejson`(
    IN p_partyaddress json,
    OUT out_id INT
)
BEGIN
    
	 SET @i = 0;
    
	 WHILE @i < JSON_LENGTH(p_partyaddress) DO
    
		 SET @str = NULL;
         SELECT JSON_EXTRACT(p_partyaddress,CONCAT('$[',@i,']')) INTO @str;
        
		 SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
		 SET @out_id = null;
        
		 CALL spc_partyaddress_save(
        
			@p_id,
			(SELECT JSON_EXTRACT(@str, CONCAT('$.partyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.addresstypeid'))),
            IF(json_type(json_extract(@str, CONCAT('$.address'))) = 'NULL', null, JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.address'))))),
			(SELECT JSON_EXTRACT(@str, CONCAT('$.cityid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.stateid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.countryid'))),
            IF(json_type(json_extract(@str, CONCAT('$.locationcontactno'))) = 'NULL', null, JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.locationcontactno'))))),
            IF(json_type(json_extract(@str, CONCAT('$.pincode'))) = 'NULL', null, JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.pincode'))))),
            IF(json_type(json_extract(@str, CONCAT('$.gstno'))) = 'NULL', null, JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.gstno'))))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.gsttypeid'))),
			(SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
         );

		 SELECT @i + 1 INTO @i;
         
         SELECT @out_id INTO out_id;
        
	  END WHILE;
      
      
      
END;



CREATE PROCEDURE `spc_partycontact_save`(
	IN p_id INT,
    IN p_partyid INT,
    IN p_mobileno VARCHAR(100),
    IN p_faxno VARCHAR(100),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO partycontact
				(id, 
				partyid,
                mobileno,
                faxno,
                companyid)
			VALUES 
				(p_id,
                p_partyid,
                p_mobileno,
                p_faxno,
				p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE partycontact
			SET partyid = p_partyid,
                mobileno = p_mobileno,
                faxno = p_faxno,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';     
    
	END IF;
    
	SELECT LAST_INSERT_ID() INTO out_id;

	
	-- RECORD LOG
	CALL spc_commonlog_save(p_companyid, 'partycontact', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_partycontact_savejson`(
    IN p_partycontact json,
    OUT out_id INT
)
BEGIN
    
	 SET @i = 0;
    
	 WHILE @i < JSON_LENGTH(p_partycontact) DO
    
		 SET @str = NULL;
         SELECT JSON_EXTRACT(p_partycontact,CONCAT('$[',@i,']')) INTO @str;
        
		 SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
		 SET @out_id = null;
        
		 CALL spc_partycontact_save(
        
			@p_id,
			(SELECT JSON_EXTRACT(@str, CONCAT('$.partyid'))),
            IF(json_type(json_extract(@str, CONCAT('$.mobileno'))) = 'NULL', null, JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.mobileno'))))),
            IF(json_type(json_extract(@str, CONCAT('$.faxno'))) = 'NULL', null, JSON_UNQUOTE((SELECT JSON_EXTRACT(@str, CONCAT('$.faxno'))))),
			(SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.userid'))),
			@out_id
         );

		 SELECT @i + 1 INTO @i;
        
	  END WHILE;
      
END;



CREATE PROCEDURE `spc_partygroup_bypartyrole`(
	IN p_partyroleids VARCHAR(50),
    IN p_companyid INT(11)
)
BEGIN

	SET @partyroleids = p_partyroleids;
    
    SELECT PG.id,
		   PG.partygroupname, 
           (SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, PG.partyroleids)) as partyroles,
           PG.partyroleids, 
           PG.description
           
	FROM partygroup PG
    
    WHERE PG.companyid = p_companyid
    AND FIND_IN_SET(PG.partyroleids,@partyroleids);

END;



CREATE PROCEDURE `spc_partygroup_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM partygroup WHERE id = p_id;

END;



CREATE PROCEDURE `spc_partygroup_save`(
   IN p_id INT(11),
   IN p_partygroupname VARCHAR(150),
   IN p_partyroleids VARCHAR(100),
   IN p_description VARCHAR(150),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF EXISTS(
            SELECT partygroupname from partygroup where LOWER(partygroupname) = LOWER(p_partygroupname)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
			
			BEGIN
			
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO partygroup 
						(id, partygroupname, partyroleids, description, companyid)
					VALUES 
						(p_id, p_partygroupname, p_partyroleids, p_description, p_companyid);
			  SET @action = 'INSERT';
			ELSE
			
				UPDATE partygroup
					SET partygroupname = p_partygroupname,
						partyroleids = p_partyroleids,
						description = p_description,
						companyid = p_companyid,
					id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
				   SET @action = 'UPDATE';     
						
						
			END IF;
			
			SELECT LAST_INSERT_ID() INTO out_id; 
			
		   -- record log
		   CALL spc_commonlog_save(p_companyid, 'partygroup', out_id, @action, p_userid);

		END;
     
   END IF;

END;



CREATE PROCEDURE `spc_partygroup_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT PG.id,
		   PG.partygroupname, 
           (SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, PG.partyroleids)) as partyroles,
           PG.partyroleids, 
           PG.description
           
	FROM partygroup PG
    
    WHERE PG.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_partygroup_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT PG.id,
		   PG.partygroupname, 
           (SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, PG.partyroleids)) as partyroles,
           PG.partyroleids, 
           PG.description
           
	FROM partygroup PG
    
    WHERE PG.id = p_id
    AND PG.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_partyopeningbalance_bypartyid`(
	IN p_partyid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,
		   subledgerid,
           openingbalance
           
	FROM partyopeningbalance
    
    WHERE subledgerid = p_partyid
    AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_partyopeningbalance_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM partyopeningbalance WHERE id = p_id;

END;



CREATE PROCEDURE `spc_partyopeningbalance_save`(
   IN p_id INT(11),
   IN p_acledgerid INT(11),
   IN p_subledgerid INT(11),
   IN p_subledgertypeids VARCHAR(100),
   IN p_openingbalance DECIMAL(9,3),
   IN p_transactiontype VARCHAR(5),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF EXISTS(
            SELECT id from partyopeningbalance where acledgerid = p_acledgerid AND subledgerid = p_subledgerid
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    
    BEGIN
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO partyopeningbalance 
				(id, acledgerid, subledgerid, subledgertypeids, 
                openingbalance, companyid)
			VALUES 
				(p_id, p_acledgerid, p_subledgerid, p_subledgertypeids, 
                (CASE WHEN p_transactiontype = 'Dr' THEN p_openingbalance ELSE (-1 * p_openingbalance) END), 
                p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE partyopeningbalance
				SET acledgerid = p_acledgerid,
					subledgerid = p_subledgerid,
                    subledgertypeids = p_subledgertypeids,
                    openingbalance = (CASE WHEN p_transactiontype = 'Dr' THEN p_openingbalance ELSE (-1 * p_openingbalance) END), 
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
     END;
    
    END IF;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'partyopeningbalance', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_partyopeningbalance_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT POB.id,
		   POB.acledgerid,
           POB.subledgerid,
           POB.subledgertypeids,
           ABS(POB.openingbalance) as openingbalance,
		   CASE WHEN POB.openingbalance >= 0 THEN 'Dr' ELSE 'Cr' END as transactiontype,
           P.partyname,
           P.partyroleids,
		   (SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, P.partyroleids)) as partyroles
           
	FROM partyopeningbalance POB
    LEFT JOIN party P ON P.id = POB.subledgerid
    
    WHERE POB.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_partyopeningbalance_select`(
	IN p_id INT(11)
)
BEGIN

	SELECT POB.id,
		   POB.acledgerid,
           POB.subledgerid,
           POB.subledgertypeids,
           ABS(POB.openingbalance) as openingbalance,
		   CASE WHEN POB.openingbalance >= 0 THEN 'Dr' ELSE 'Cr' END as transactiontype,
		   P.partyname,
           P.partyroleids,
		   (SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, P.partyroleids)) as partyroles
           
	FROM partyopeningbalance POB
    LEFT JOIN party P ON P.id = POB.subledgerid
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND POB.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_party_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DELETE FROM party WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'party', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_party_forpurchaseinvoice`(
 IN p_companyid INT(11)
)
BEGIN
   SELECT vendorid , 
		 p.partyname,
         P.phoneno
   FROM 
		purchaseinvoice PI
        
  Left JOIN party P ON PI.vendorid = p.id

	WHERE
	 PI.companyid = p_companyid
     group by PI.vendorid;
	END;



CREATE PROCEDURE `spc_party_rolewise`(
	IN p_roleid INT(11),
    IN p_companyid INT(11)
)
BEGIN
	SELECT
			p.id,
			P.partyname,
            P.partyroleids,
            (SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, P.partyroleids)) as partyroles,
			P.emailid,
            P.contactperson,
            supplierledgerid,
            customerledgerid,
            P.phoneno,
			COA1.glcode as supplierglcode,
            COA1.coaname as supplierledgername,
            P.customerledgerid,
            COA2.glcode as customerglcode,
            COA2.coaname as customerledgername,
            P.companyid
			
	FROM party P
    LEFT JOIN chartofaccount COA1 ON COA1.id = p.supplierledgerid
    LEFT JOIN chartofaccount COA2 ON COA2.id = p.customerledgerid
    
    WHERE P.companyid = p_companyid
    AND FIND_IN_SET(p_roleid, P.partyroleids);

END;



CREATE PROCEDURE `spc_party_save`(
	IN p_id INT,
    IN p_partyname VARCHAR(200),
    IN p_partyroleids VARCHAR(100),
    IN p_phoneno VARCHAR(50),
    IN p_contactperson VARCHAR(100),
    IN p_cstno VARCHAR(100),
    IN p_gstin VARCHAR(100),
    IN p_panno VARCHAR(100),
    IN p_postalcode VARCHAR(50),
    IN p_emailid VARCHAR(100),
    IN p_shippingcontactperson VARCHAR(100),
    IN p_shippingcontactno VARCHAR(50),
    IN p_creditlimit DECIMAL(9,3),
    IN p_creditperiod INT,
    IN p_servicetaxno VARCHAR(50),
    IN p_partygroupid INT(11),
    IN p_supplierledgerid INT(11),
    IN p_customerledgerid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF EXISTS(
            SELECT panno from party where LOWER(panno) = LOWER(p_panno)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    
    BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO party 
				(id, 
                partyname,
                partyroleids,
                phoneno,
                contactperson,
                cstno,
                gstin,
                panno,
                postalcode,
                emailid,
                shippingcontactperson,
                shippingcontactno,
                creditlimit,
                creditperiod,
                servicetaxno,
                partygroupid,
                supplierledgerid,
                customerledgerid,
                companyid)
			VALUES 
				(p_id,
                p_partyname,
                p_partyroleids,
                p_phoneno,
                p_contactperson,
                p_cstno,
                p_gstin,
                p_panno,
                p_postalcode,
				p_emailid,
				p_shippingcontactperson,
				p_shippingcontactno,
				p_creditlimit,
				p_creditperiod,
				p_servicetaxno,
				p_partygroupid,
                p_supplierledgerid,
                p_customerledgerid,
				p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE party
			SET partyname = p_partyname,
                partyroleids = p_partyroleids,
                phoneno = p_phoneno,
                contactperson = p_contactperson,
                cstno = p_cstno,
                gstin = p_gstin,
                panno = p_panno,
                postalcode = p_postalcode,
                emailid = p_emailid,
                shippingcontactperson = p_shippingcontactperson,
                shippingcontactno = p_shippingcontactno,
                creditlimit = p_creditlimit,
                creditperiod = p_creditperiod,
                servicetaxno = p_servicetaxno,
                partygroupid = p_partygroupid,
                supplierledgerid = p_supplierledgerid,
                customerledgerid = p_customerledgerid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';     
        
        DELETE FROM partyaddress WHERE partyid = p_id;
    
	END IF;
    
	SELECT LAST_INSERT_ID() INTO out_id;

	
	-- RECORD LOG
	CALL spc_commonlog_save(p_companyid, 'party', out_id, @action, p_userid);

END;

END IF;

END;



CREATE PROCEDURE `spc_party_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
			p.id,
			P.partyname,
            P.partyroleids,
            (SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(id, P.partyroleids)) as partyroles,
			P.emailid,
            P.contactperson,
            supplierledgerid,
            customerledgerid,
            P.phoneno,
			COA1.glcode as supplierglcode,
            COA1.coaname as supplierledgername,
            P.customerledgerid,
            COA2.glcode as customerglcode,
            COA2.coaname as customerledgername,
            P.companyid,
            P.partygroupid,
            PG.partygroupname
			
	FROM party P
    LEFT JOIN partygroup PG ON PG.id = P.partygroupid
    LEFT JOIN chartofaccount COA1 ON COA1.id = p.supplierledgerid
    LEFT JOIN chartofaccount COA2 ON COA2.id = p.customerledgerid
    
	WHERE P.companyid = p_companyid;
	
END;



CREATE PROCEDURE `spc_party_select`(
	IN p_id INT
)
BEGIN
    
	SELECT
			P.id,
            P.partyname,
            P.partyroleids,
			(SELECT GROUP_CONCAT(refname) FROM `reference` WHERE FIND_IN_SET(P.id, P.partyroleids)) as partyroles,
            P.phoneno,
            P.contactperson,
            P.cstno,
            P.gstin,
            P.panno,
            P.postalcode,
            P.emailid,
            P.shippingcontactperson,
            P.shippingcontactno,
            P.creditlimit,
            P.creditperiod,
            P.servicetaxno,
            P.supplierledgerid,
            COA1.glcode as supplierglcode,
            COA1.coaname as supplierledgername,
            P.customerledgerid,
            COA2.glcode as customerglcode,
            COA2.coaname as customerledgername,
            P.companyid,
            P.partygroupid,
            PG.partygroupname
			
	FROM party P
    LEFT JOIN partygroup PG ON PG.id = P.partygroupid
    LEFT JOIN chartofaccount COA1 ON COA1.id = p.supplierledgerid
    LEFT JOIN chartofaccount COA2 ON COA2.id = p.customerledgerid
  	WHERE P.id = p_id;
    
    
    SELECT
			id,
            addresstypeid,
            address,
            cityid,
            stateid,
            countryid,
            locationcontactno,
            pincode,
            gstno,
            gsttypeid
	
    FROM partyaddress
    WHERE partyid = p_id;
    
    SELECT
			id,
            mobileno,
            faxno
	
    FROM partycontact
    WHERE partyid = p_id;

END;



CREATE PROCEDURE `spc_permission_ddl`()
BEGIN

	SELECT id, 
			permission 
		FROM `permission`;

END;



CREATE PROCEDURE `spc_permission_search`()
BEGIN

	SELECT
		id,
        permission,
        description
	FROM
		permission;
END;



CREATE PROCEDURE `spc_phase_delete`(
	IN p_id INT
   
)
BEGIN
	DELETE FROM breederphase WHERE id = p_id;
END;



CREATE PROCEDURE `spc_phase_save`(
	IN p_id INT,
    IN p_phasesequence VARCHAR(100),
    IN p_phasename VARCHAR(200),
    IN p_fromweek INT,
    IN p_toweek INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO breederphase 
				(phasesequence, phasename, fromweek, toweek, companyid)
			VALUES 
				(p_phasesequence, p_phasename, p_fromweek, p_toweek, p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE breederphase
			SET 
				phasesequence = p_phasesequence, 
                phasename = p_phasename, 
                fromweek = p_fromweek,
                toweek = p_toweek,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';   
    
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'breederphase', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_phase_search`(
  IN p_companyid INT 
)
BEGIN
	SELECT id ,
		   phasesequence,
           phasename,
           fromweek,
           toweek
            
    FROM  breederphase 
    WHERE 
          companyid = p_companyid;
END;



CREATE PROCEDURE `spc_phase_select`(
  IN p_id INT 
)
BEGIN
	SELECT id ,
		   phasesequence,
           phasename,
           fromweek,
           toweek
            
    FROM  breederphase 
    WHERE 
          id = p_id;
END;



CREATE PROCEDURE `spc_poid_byacknowledgementid`(
IN p_ackid INT(11),
IN p_companyid INT(11)
)
BEGIN

SELECT
		ASD.purchaseorderid,
        DATE_FORMAT(PO.podate,'%d/%m/%Y') as podate,
		P.partyname,
        PO.vendorid,
        PO.statusid,
        PO.vendorid,
        PO.discount
         
         
FROM feedmill_acknowledgementslipdetail ASD
LEFT JOIN purchaseorder PO ON PO.id = ASD.purchaseorderid
LEFT JOIN purchaseorderdetail POD ON POD.purchaseorderid = PO.id
LEFT JOIN party P ON P.id = PO.vendorid


 WHERE ASD.ackid = p_ackid
	AND POD.pendinggrpoquantity > 0
    AND ASD.companyid = p_companyid
    
    GROUP BY PO.id;
        
        

END;



CREATE PROCEDURE `spc_poitem_bypoid`(
	IN p_purchaseorderid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT POD.itemid,
		   POD.unitprice,
           POD.itemunit,
           I.itemname,
           I.itemcode,
           REF.refname as itemunit
           
	FROM purchaseorderdetail POD
    LEFT JOIN item I ON I.id = POD.itemid
    LEFT JOIN `reference` REF ON REF.id = POD.itemunit
    
    WHERE POD.purchaseorderid = p_purchaseorderid
    AND POD.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_productioncostgrade_delete`( 
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM productioncostgrade WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'productioncostgrade', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_productioncostgrade_save`(
 IN p_id INT(11),
 IN p_categoryid INT(11),
 IN p_locationid INT(11),
 IN p_gradeid INT(11),
 IN p_fromcost DECIMAL(9,3),
 IN p_tocost DECIMAL(9,3),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO productioncostgrade
              (categoryid, locationid, gradeid, fromcost, tocost, companyid)
       VALUES
            (p_categoryid, p_locationid, p_gradeid, p_fromcost, p_tocost, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE productioncostgrade 
   
	SET categoryid = p_categoryid,
		locationid = p_locationid,
		gradeid = p_gradeid,
		fromcost = p_fromcost,
        tocost = p_tocost,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'productioncostgrade', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_productioncostgrade_search`(
  IN p_companyid INT(11)
)
BEGIN

	SELECT PG.id,
    PG.categoryid,
    PG.locationid,
    PG.gradeid,
    PG.fromcost,
    PG.tocost,
    PG.companyid,
    L.locationname,
    FT.farmtype as categoryname,
    FG.grade
           
	FROM productioncostgrade PG
    
     LEFT JOIN farmtype FT ON FT.id = PG.categoryid
	 LEFT JOIN location L ON L.id = PG.locationid
     LEFT JOIN farmgrade FG ON FG.id = PG.gradeid
    
    WHERE PG.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_productioncostgrade_select`( 
 IN p_id INT(11)
)
BEGIN

	SELECT PG.id,
    PG.categoryid,
    PG.locationid,
    PG.gradeid,
    PG.fromcost,
    PG.tocost,
    PG.companyid,
    L.locationname,
    FT.farmtype as categoryname,
    FG.grade
           
	FROM productioncostgrade PG
    
     LEFT JOIN farmtype FT ON FT.id = PG.categoryid
	 LEFT JOIN location L ON L.id = PG.locationid
	 LEFT JOIN farmgrade FG ON FG.id = PG.gradeid
    
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND PG.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_productionorderdetail_delete`(  
 IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM feedmill_productionorderdetail WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'feedmill_productionorderdetail', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_productionorderdetail_save`( 
IN p_id	int(11),
IN p_productionorderid int(11),
IN p_typeid int(11),
IN p_itemid int(11),
IN p_baseqty decimal(12,3),
IN p_plannedqty decimal(12,3),
IN p_pendingplannedqty decimal(12,3),
IN p_issuemethodid int(11),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_productionorderdetail
        (  productionorderid,	
			typeid,
			itemid,	
			baseqty,	
			plannedqty,	
            pendingplannedqty,
			issuemethodid,
            companyid)
        
        VALUES (p_producationorderid,	
				p_typeid,
				p_itemid,	
				p_baseqty,	
				p_plannedqty,
                p_pendingplannedqty,
				p_issuemethodid,
				p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_productionorderdetail
        SET productionorderid = p_productionorderid,	
			typeid = p_typeid,
			itemid = p_itemid,	
			baseqty = p_baseqty,	
			plannedqty = p_plannedqty,
            pendingplannedqty = p_pendingplannedqty,
			issuemethodid = p_issuemethodid,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
   
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_productionorderdetail', out_id, @action, p_userid);



END;



CREATE PROCEDURE `spc_productionorderdetail_search`(
 IN p_productionorderid INT,
 IN p_companyid INT
)
BEGIN

	SELECT FPOD.id,
		   FPOD.productionorderid,	
		   FPOD.typeid,
		   FPOD.itemid,	
		   FPOD.baseqty,	
		   FPOD.plannedqty,	
           FPOD.pendingplannedqty,
		   FPOD.issuemethodid,
		   REF.refname as materialtype,
           I.itemname,
		   REF1.refname as itemunitname, 
           I.itemunitid,
           REF2.refname as issuemethod
           
	FROM
		feedmill_productionorderdetail FPOD
        
          LEFT JOIN `reference` REF ON FPOD.typeid = REF.id
          LEFT JOIN item I ON FPOD.itemid = I.id
		  LEFT JOIN `reference` REF1 ON I.itemunitid = REF1.id
          LEFT JOIN `reference` REF2 ON FPOD.issuemethodid = REF2.id
        
	WHERE
		 FPOD.productionorderid = p_productionorderid AND
         FPOD.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_productionorder_delete`(  
  IN p_id INT,
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN
	DELETE FROM feedmill_productionorder WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'feedmill_productionorder', p_id, 'delete', p_userid);

END;



CREATE PROCEDURE `spc_productionorder_save`(
IN p_id	int(11),
IN p_productionno INT(11),
IN p_typeid	int(11),
IN p_statusid int(11),
IN p_plannedqty	decimal(12,3),
IN p_warehouseid int(11),
IN p_orderdate date,
IN p_startdate date,
IN p_duedate date,
IN p_employeeid int(11),
IN p_origin	VARCHAR(45),
IN p_customerid int(11),
IN p_salesorderid int(11),
IN p_costcenterid int(11),
IN p_projectid int(11),
IN p_actualitemcost decimal(12,3),
IN p_actualresourcecost	decimal(12,3),
IN p_actualadditionalcost decimal(12,3),
IN p_actualproductcost decimal(12,3),
IN p_actualbyproductcost decimal(12,3),
IN p_totalvariance decimal(12,3),
IN p_completedqty decimal(12,3),
IN p_rejectedqty decimal(12,3),
IN p_actualclosingdate date,
IN p_overduedate date,
IN p_totalruntime varchar(45),
IN p_totaladditionaltime varchar(45),
IN p_totaltime varchar(45),
IN p_journalremark varchar(45),
IN p_remarks varchar(45),
IN p_productionorderno  varchar(30),
IN p_receipt_pendingqty DECIMAL(12,3),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_productionorder
        (  productionno,	
			typeid,	
			statusid,	
			plannedqty,	
			warehouseid,	
			orderdate,	
			startdate,	
			duedate,
			employeeid,
			origin,
            customerid,
            salesorderid,
			costcenterid,
			projectid,	
			actualitemcost,	
			actualresourcecost,	
			actualadditionalcost,	
			actualproductcost,	
			actualbyproductcost,
			totalvariance,	
			completedqty,	
			rejectedqty,	
			actualclosingdate,	
			overduedate,	
			totalruntime,	
			totaladditionaltime,
			totaltime,	
			journalremark,	
			remarks,
            productionorderno,
            p_receipt_pendingqty,
            companyid)
        
        VALUES ( p_productionno,	
				p_typeid,	
				p_statusid,	
				p_plannedqty,	
				p_warehouseid,	
				p_orderdate,	
				p_startdate,	
				p_duedate,
				p_employeeid,
				p_origin,
				p_customerid,
                p_salesorderid,
				p_costcenterid,
				p_projectid,	
				p_actualitemcost,	
				p_actualresourcecost,	
				p_actualadditionalcost,	
				p_actualproductcost,	
				p_actualbyproductcost,
				p_totalvariance,	
				p_completedqty,	
				p_rejectedqty,	
				p_actualclosingdate,	
				p_overduedate,	
				p_totalruntime,	
				p_totaladditionaltime,
				p_totaltime,	
				p_journalremark,	
				p_remarks,
                p_productionorderno,
                p_p_receipt_pendingqty,
				p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_productionorder
        SET productionno = p_productionno,	
			typeid = p_typeid,	
			statusid = p_statusid,	
			plannedqty = p_plannedqty,	
			warehouseid = p_warehouseid,	
			orderdate = p_orderdate,	
			startdate = p_startdate,	
			duedate = p_duedate,
			employeeid = p_employeeid,
			origin = p_origin,
            customerid = p_customerid,
			salesorderid = p_salesorderid,
            costcenterid = p_costcenterid,
			projectid = p_projectid,	
			actualitemcost = p_actualitemcost,	
			actualresourcecost = p_actualresourcecost,	
			actualadditionalcost = p_actualadditionalcost,	
			actualproductcost = p_actualproductcost,	
			actualbyproductcost = p_actualbyproductcost,
			totalvariance = p_totalvariance,	
			completedqty = p_completedqty,	
			rejectedqty = p_rejectedqty,	
			actualclosingdate = p_actualclosingdate,	
			overduedate = p_overduedate,	
			totalruntime = p_totalruntime,	
			totaladditionaltime = p_totaladditionaltime,
			totaltime = p_totaltime,	
			journalremark = p_journalremark,	
			remarks = p_remarks,
            productionorderno = p_productionorderno,
            receipt_pendingqty = p_receipt_pendingqty,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
   
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_productionorder', out_id, @action, p_userid);



END;



CREATE PROCEDURE `spc_productionorder_search`(
	IN p_companyid INT(11)
 )
BEGIN
SELECT 	    FPO.id,
			FPO.productionorderno,
            FPO.productionno,	
			FPO.typeid,	
			FPO.statusid,	
			FPO.plannedqty,	
			FPO.warehouseid,
			DATE_FORMAT(FPO.orderdate,'%d/%m/%Y') as orderdate,
			DATE_FORMAT(FPO.startdate,'%d/%m/%Y') as startdate,
			DATE_FORMAT(FPO.duedate,'%d/%m/%Y') as duedate,
			FPO.employeeid,
			FPO.origin,
            FPO.costcenterid,
            FPO.customerid,
			FPO.salesorderid,
			FPO.projectid,	
			FPO.actualitemcost,	
			FPO.actualresourcecost,	
			FPO.actualadditionalcost,	
			FPO.actualproductcost,	
			FPO.actualbyproductcost,
			FPO.totalvariance,	
			FPO.completedqty,	
			FPO.rejectedqty,
            DATE_FORMAT(FPO.actualclosingdate,'%d/%m/%Y') as actualclosingdate,
			DATE_FORMAT(FPO.overduedate,'%d/%m/%Y') as overduedate,
			FPO.totalruntime,	
			FPO.totaladditionaltime,
			FPO.totaltime,	
			FPO.journalremark,	
			FPO.remarks,
            W.warehousename,
            REF.refname as status,
            I.itemname,
            FPO.receipt_pendingqty,
            I.itemunitid,
            REF1.refname as itemunitname,
            BOM.unitcost
	
           
	FROM feedmill_productionorder FPO
     LEFT JOIN employee EMP ON FPO.employeeid = EMP.id
     LEFT JOIN warehouse W ON FPO.warehouseid = W.id
     LEFT JOIN `reference` REF ON FPO.statusid = REF.id
	 LEFT JOIN item I ON FPO.productionno = I.id
	 LEFT JOIN `reference` REF1 ON  I.itemunitid = REF1.id
      LEFT JOIN feedmill_billofmaterial BOM ON  FPO.productionno = BOM.itemid
    
    WHERE FPO.companyid = p_companyid;


END;



CREATE PROCEDURE `spc_productionorder_select`( 
    IN p_id INT(11)
)
BEGIN
SELECT 	    FPO.id,
            FPO.productionorderno,
            FPO.productionno,	
			FPO.typeid,	
			FPO.statusid,	
			FPO.plannedqty,	
			FPO.warehouseid,	
			DATE_FORMAT(FPO.orderdate,'%d/%m/%Y') as orderdate,
			DATE_FORMAT(FPO.startdate,'%d/%m/%Y') as startdate,
			DATE_FORMAT(FPO.duedate,'%d/%m/%Y') as duedate,
			FPO.employeeid,
			FPO.origin,
            FPO.costcenterid,
            FPO.customerid,
			FPO.salesorderid,
			FPO.projectid,	
			FPO.actualitemcost,	
			FPO.actualresourcecost,	
			FPO.actualadditionalcost,	
			FPO.actualproductcost,	
			FPO.actualbyproductcost,
			FPO.totalvariance,	
			FPO.completedqty,	
			FPO.rejectedqty,	
			DATE_FORMAT(FPO.actualclosingdate,'%d/%m/%Y') as actualclosingdate,
			DATE_FORMAT(FPO.overduedate,'%d/%m/%Y') as overduedate,	
			FPO.totalruntime,	
			FPO.totaladditionaltime,
			FPO.totaltime,	
			FPO.journalremark,	
			FPO.remarks,
            W.warehousename,
            REF.refname as status,
            PR.partyname as customername,
            I.itemname as productname,
            I.itemcode,
            I.itemunitid,
			REF1.refname as productunit,
            FPO.receipt_pendingqty
           
	FROM feedmill_productionorder FPO
      LEFT JOIN employee EMP ON FPO.employeeid = EMP.id
      LEFT JOIN warehouse W ON FPO.warehouseid = W.id
      LEFT JOIN `reference` REF ON FPO.statusid = REF.id
      LEFT JOIN `party` PR ON FPO.customerid = PR.id
      LEFT JOIN item I ON FPO.productionno = I.id
      LEFT JOIN `reference` REF1 ON  I.itemunitid = REF1.id
    
    WHERE 
	FPO.id = p_id;


END;



CREATE PROCEDURE `spc_project_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DELETE FROM project WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'project', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_project_parentproject`(
	IN p_companyid INT
)
BEGIN

	SELECT
			id,
            projectcode,
            projectname,
            DATE_FORMAT(validfrom,'%d/%m/%Y') as validfrom,
			DATE_FORMAT(validto,'%d/%m/%Y') as validto,
            isactive,
            employeeid,
            companyid,
            isparent, 
            parentid
			
	FROM project
    
	WHERE companyid = p_companyid
    AND isparent = 1;
	
END;



CREATE PROCEDURE `spc_project_save`(
	IN p_id INT,
	IN p_projectcode VARCHAR(300),
    IN p_projectname VARCHAR(300),
    IN p_validfrom DATE,
    IN p_validto DATE,
    IN p_isactive SMALLINT(4),
    IN p_employeeid INT,
    IN p_isparent TINYINT(4),
    IN p_parentid INT(11),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO project 
				(projectcode, projectname, validfrom, validto, 
                isactive, employeeid, isparent, parentid, companyid)
			VALUES 
				(p_projectcode, p_projectname, p_validfrom, p_validto,
                p_isactive, p_employeeid, p_isparent, p_parentid, p_companyid);
                
		SET @action = 'INSERT';
        
	ELSE
    
		UPDATE project
			SET 
				projectcode = p_projectcode, 
                projectname = p_projectname,
                validfrom = p_validfrom,
                validto = p_validto,
                isactive = p_isactive,
                employeeid = p_employeeid,
                isparent = p_isparent,
                parentid = p_parentid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';   
    
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'project', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_project_search`(
	IN p_companyid INT
)
BEGIN

	SELECT
			id,
            projectcode,
            projectname,
            DATE_FORMAT(validfrom,'%d/%m/%Y') as validfrom,
			DATE_FORMAT(validto,'%d/%m/%Y') as validto,
            isactive,
            employeeid,
            companyid,
            isparent, 
            parentid
			
	FROM project
    
	WHERE companyid = p_companyid;
	
END;



CREATE PROCEDURE `spc_project_select`(
	IN p_id INT
)
BEGIN

	SELECT
			id,
            projectcode,
            projectname,
			DATE_FORMAT(validfrom,'%d/%m/%Y') as validfrom,
			DATE_FORMAT(validto,'%d/%m/%Y') as validto,
            isactive,
            employeeid,
            companyid,
            isparent,
            parentid
			
	FROM project
    
	WHERE id = p_id;
	
END;



CREATE PROCEDURE `spc_purchaseinvoicedetail_delete`(
	IN p_id INT
    )
BEGIN

    DELETE FROM purchaseinvoicedetail WHERE id = p_id;


END;



CREATE PROCEDURE `spc_purchaseinvoicedetail_save`(
		IN p_id INT,
        IN p_purchaseinvoiceid INT,
		IN p_itemid INT,
        IN p_itemname VARCHAR(200),
        IN p_itemunitid INT,
		IN p_quantity DECIMAL(8,3),
        IN p_freequantity DECIMAL(8,3),
		IN p_unitprice DECIMAL(8,3),
		IN p_itemdiscount DECIMAL(8,3),
        IN p_taxid INT,
        IN p_taxpercent DECIMAL(9,3),
		IN p_cgstid INT(11),
		IN p_cgstpercent DECIMAL(9,3),
		IN p_cgstamount DECIMAL(9,3),
		IN p_sgstid INT(11),
		IN p_sgstpercent DECIMAL(9,3),
		IN p_sgstamount DECIMAL(9,3),
		IN p_igstid INT(11),
		IN p_igstpercent DECIMAL(9,3),
		IN p_igstamount DECIMAL(9,3),
		IN p_utgstid INT(11),
		IN p_utgstpercent DECIMAL(9,3),
		IN p_utgstamount DECIMAL(9,3),
        IN p_companyid INT,
		IN p_userid INT,
		OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO purchaseinvoicedetail 
				(purchaseinvoiceid, itemid, itemname, itemunitid, quantity, freequantity, unitprice, itemdiscount, 
               taxid,taxpercent,cgstid, cgstpercent, cgstamount,sgstid,sgstpercent,sgstamount,igstid,igstpercent,
                igstamount,utgstid,utgstpercent,utgstamount, companyid)
			VALUES 
				(p_purchaseinvoiceid, p_itemid, p_itemname, p_itemunitid, p_quantity, p_freequantity, p_unitprice, p_itemdiscount,
                p_taxid,p_taxpercent,p_cgstid,p_cgstpercent, p_cgstamount,
                p_sgstid,p_sgstpercent, p_sgstamount,p_igstid,p_igstpercent,p_igstamount,
                p_utgstid,p_utgstpercent, p_utgstamount, p_companyid);
                
            SET @action = 'INSERT';
	ELSE
    
		UPDATE purchaseinvoicedetail
				SET
                purchaseinvoiceid = p_purchaseinvoiceid, 
                itemid = p_itemid, 
                itemname = p_itemname,
				itemunitid = p_itemunitid,
                quantity = p_quantity,
                freequantity = p_freequantity,
                unitprice = p_unitprice,
                itemdiscount = p_itemdiscount,
				taxid = p_taxid,
                taxpercent= p_taxpercent,
                cgstid = p_cgstid,
                cgstpercent= p_cgstpercent,
                cgstamount = p_cgstamount,
                sgstid = p_sgstid,
                sgstpercent =p_sgstpercent,
                sgstamount =p_sgstamount,
                igstid = p_igstid,
                igstpercent =p_igstpercent,
                igstamount = p_igstamount,
                utgstid = p_utgstid,
                utgstpercent =p_utgstpercent,
                utgstamount = p_utgstamount,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
    CALL spc_commonlog_save(p_companyid, 'purchaseinvoicedetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_purchaseinvoicedetail_search`(
	IN p_purchaseinvoiceid INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
		PID.id as invoicedetailid,
		itemid,
        purchaseinvoiceid,
        itemname,
        itemunitid,
        quantity,
        freequantity,
        unitprice,
        itemdiscount,
        taxpercent,
        taxid,
		REF.refname as itemunitname,
		PID.taxpercent,
	    PID.cgstpercent,
        PID.cgstamount,
        PID.sgstpercent,
        PID.sgstamount,
        PID.igstpercent,
		PID.igstamount,
        PID.utgstpercent,
        PID.utgstamount,
        PID.sgstid,
	    PID.cgstid,
	    PID.igstid,
	    PID.utgstid
        
        
	
	FROM 
		purchaseinvoicedetail PID
        
	 LEFT JOIN `reference` REF ON PID.itemunitid = REF.id
    
    
	WHERE 
		 PID.purchaseinvoiceid = p_purchaseinvoiceid
         AND PID.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_purchaseinvoice_delete`(	
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DELETE FROM purchaseinvoice WHERE id = p_id;
    DELETE FROM purchaseinvoicedetail WHERE purchaseinvoiceid = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'purchaseinvoice', p_id, 'delete', p_userid);


END;



CREATE PROCEDURE `spc_purchaseinvoice_save`(
		IN p_id INT,
        IN p_invoicedate DATE,
        IN p_purchaseinvoiceno VARCHAR(30),
		IN p_vendorid INT,
        IN p_grpono INT,
        IN p_subject VARCHAR(200),
        IN p_referenceno INT,
		IN p_referencedate DATE,
        IN p_creditperiod INT,
        IN p_nettotal DECIMAL(12,3),
		IN p_discount DECIMAL(12,3),
		IN p_taxtotal DECIMAL(12,3),
        IN p_frieght DECIMAL(12,3),
        IN p_subtotal DECIMAL(12,3),
        IN p_remark VARCHAR(200),
		IN p_transactionTypeid INT,
        IN p_deliveryfromaddressid INT,
        IN p_deliverytowarehouseid INT,
        IN p_deliveryfromstatecode VARCHAR(200),
		IN p_deliverytostatecode VARCHAR(200),
        IN p_companyid INT,
		IN p_userid INT,
		OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO purchaseinvoice 
				(invoicedate, purchaseinvoiceno,  vendorid, grpono, subject, referenceno,
                referencedate, creditperiod, nettotal, discount,
                taxtotal, frieght, subtotal, pendingtotal, remark,transactiontypeid,deliveryfromaddressid,deliverytowarehouseid,
                deliveryfromstatecode,deliverytostatecode, companyid)
			VALUES 
				(p_invoicedate, p_purchaseinvoiceno,  p_vendorid, p_grpono, p_subject, p_referenceno,
                p_referencedate, p_creditperiod,  p_nettotal, p_discount,
                p_taxtotal, p_frieght, p_subtotal, p_subtotal, p_remark,p_transactiontypeid,
                p_deliveryfromaddressid, p_deliverytowarehouseid,
                p_deliveryfromstatecode, p_deliverytostatecode, p_companyid);
			
		UPDATE grpo
            set statusid = 642
			where id = p_grpono;
		SET @action = 'INSERT';
	ELSE
    
		UPDATE purchaseinvoice
				SET
                invoicedate = p_invoicedate,
                purchaseinvoiceno = p_purchaseinvoiceno,
                vendorid = p_vendorid, 
                grpono = p_grpono,
				subject = p_subject,
                referenceno = p_referenceno,
                referencedate = p_referencedate,
                creditperiod = p_creditperiod,
                nettotal = p_nettotal,
                discount = p_discount,
                taxtotal = p_taxtotal,
                frieght = p_frieght,
                subtotal = p_subtotal,
                remark = p_remark,
                transactiontypeid=p_transactiontypeid,
                deliveryfromaddressid=p_deliveryfromaddressid,
                deliverytowarehouseid = p_deliverytowarehouseid,
                deliveryfromstatecode = p_deliveryfromstatecode,
                deliverytostatecode = p_deliverytostatecode,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
			SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
    CALL spc_commonlog_save(p_companyid, 'purchaseinvoice', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_purchaseinvoice_search`( 

	IN p_companyid INT 
)
BEGIN
	SELECT PI.id,
           DATE_FORMAT(PI.invoicedate,'%d/%m/%Y') as invoicedate,
           vendorid,
           grpono,
           subject,
           referenceno,
           DATE_FORMAT(PI.referencedate,'%d/%m/%Y') as referencedate,
           PI.creditperiod,
           nettotal,
           discount,
           taxtotal,
           frieght,
           subtotal,
           remark,
           transactiontypeid,
           deliveryfromaddressid,
           deliverytowarehouseid,
		   deliveryfromstatecode,
		   deliverytostatecode,
		   PT.partyname as suppliername,
		   PA.address as delfromfulladdress,
		   WH.address as warehousefulladdress,
		   ST.isunionterritory as warehouseisunionterritory,
		   ST1.isunionterritory as deliveryfromisunionterritory,
           PI.purchaseinvoiceno
           
    FROM  purchaseinvoice PI
    
    LEFT JOIN party PT ON PI.vendorid = PT.id
	LEFT JOIN partyaddress PA ON PI.deliveryfromaddressid = PA.id
	LEFT JOIN warehouse WH ON PI.deliverytowarehouseid = WH.id
	LEFT JOIN `state` ST ON WH.stateid = ST.id
	LEFT JOIN `state` ST1 ON PA.stateid = ST1.id
	
    WHERE 
          PI.companyid = p_companyid
	ORDER BY 
		PI.id DESC;
END;



CREATE PROCEDURE `spc_purchaseorderdetail_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN

    DELETE FROM purchaseorderdetail WHERE purchaseorderid = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'purchaseorderdetail', p_id, 'delete', p_userid);


END;



CREATE PROCEDURE `spc_purchaseorderdetail_save`(
	IN p_id INT,
	IN p_purchaseorderid INT,
    IN p_itemid INT,
    IN p_chicksageindays INT(11),
    IN p_quantity DECIMAL (15,3),
    IN p_freequantitypercent DECIMAL(15,3),
    IN p_itemunitid INT(11),
    IN p_unitcost DECIMAL(8,3),
    IN p_itemdiscount DECIMAL(8,3),
    IN p_taxid INT,
    IN p_taxpercent DECIMAL(9,3),
    IN p_cgstid INT(11),
    IN p_cgstpercent DECIMAL(9,3),
    IN p_cgstamount DECIMAL(15,3),
    IN p_sgstid INT(11),
    IN p_sgstpercent DECIMAL(9,3),
    IN p_sgstamount DECIMAL(15,3),
    IN p_igstid INT(11),
    IN p_igstpercent DECIMAL(9,3),
    IN p_igstamount DECIMAL(15,3),
    IN p_utgstid INT(11),
    IN p_utgstpercent DECIMAL(9,3),
    IN p_utgstamount DECIMAL(15,3),
	IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO purchaseorderdetail 
				(purchaseorderid, itemid, chicksageindays,
                quantity, freequantitypercent, pendinggrpoquantity, 
                itemunit, unitprice, itemdiscount, taxid,taxpercent,cgstid,
                cgstpercent, cgstamount,sgstid,sgstpercent,sgstamount,igstid,igstpercent,
                igstamount,utgstid,utgstpercent,utgstamount,
                companyid)
			VALUES 
				(p_purchaseorderid, p_itemid, p_chicksageindays, 
                p_quantity, p_freequantitypercent, p_quantity,
                p_itemunitid, p_unitcost, p_itemdiscount, 
                p_taxid,p_taxpercent,p_cgstid,p_cgstpercent, p_cgstamount
                ,p_sgstid,p_sgstpercent, p_sgstamount,p_igstid,p_igstpercent,p_igstamount,
                p_utgstid,p_utgstpercent, p_utgstamount,p_companyid);
                
		SET @action = 'INSERT';
       SET @purchaserequestid = null;
        select purchaserequestid INTO @purchaserequestid from purchaseorder WHERE id = p_purchaseorderid;
        	UPDATE purchaserequestdetail
				set itemstatusid = 1642
			where purchaserequestid = @purchaserequestid AND 
				  itemid = p_itemid;

	ELSE
    
		UPDATE purchaseorderdetail
			SET purchaseorderid=p_purchaseorderid, 
				itemid = p_itemid, 
                chicksageindays = p_chicksageindays,
                quantity = p_quantity, 
                freequantitypercent = p_freequantitypercent,
                itemunit = p_itemunitid, 
                unitprice = p_unitcost, 
                itemdiscount = p_itemdiscount, 
                taxid = p_taxid,
                taxpercent= p_taxpercent,
                cgstid = p_cgstid,
                cgstpercent= p_cgstpercent,
                cgstamount = p_cgstamount,
                sgstid = p_sgstid,
                sgstpercent =p_sgstpercent,
                sgstamount =p_sgstamount,
                igstid = p_igstid,
                igstpercent =p_igstpercent,
                igstamount = p_igstamount,
                utgstid = p_utgstid,
                utgstpercent =p_utgstpercent,
                utgstamount = p_utgstamount,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'purchaseorderdetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_purchaseorderdetail_search`(
	IN p_purchaseorderid INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
		POD.id as purchaseorderdetailid,
		POD.purchaseorderid,
		POD.itemid,
        IT.itemcode,
        IT.itemname,
        POD.chicksageindays,
		POD.quantity as requiredquantity,
        POD.freequantitypercent,
        POD.pendinggrpoquantity,
		POD.itemunit as itemunitid,
		unitprice,
		itemdiscount,
		POD.taxid,     
        REF.refname,
        IT.itemgroupid,
        IG.groupname,
        G.statusid as grpostatusid,
        POD.taxpercent,
	    POD.cgstpercent,
        POD.cgstamount,
        POD.sgstpercent,
        POD.sgstamount,
        POD.igstpercent,
		POD.igstamount,
        POD.utgstpercent,
        POD.utgstamount,
        POD.sgstid,
	    POD.cgstid,
	    POD.igstid,
	    POD.utgstid,
        G.id as grpoid
	FROM 
		purchaseorderdetail POD
        
	LEFT JOIN item IT ON POD.itemid = IT.id
    LEFT JOIN itemgroup IG ON IG.id = IT.itemgroupid
	LEFT JOIN tax TX ON TX.id = POD.taxid
    LEFT JOIN `reference` REF ON REF.id = POD.itemunit
    LEFT JOIN grpo G ON G.purchaseorderid = POD.purchaseorderid
    
	WHERE 
		 POD.purchaseorderid = p_purchaseorderid
         AND POD.companyid = p_companyid
         
	GROUP BY POD.id;

END;



CREATE PROCEDURE `spc_purchaseorderdetail_select`(
	IN p_id INT
)
BEGIN

	SELECT id,
		purchaseorderid,
		itemid,
        chicksageindays,
		quantity,
        freequantitypercent,
        pendinggrpoquantity,
		itemunit,
		unitprice,
		itemdiscount,
		taxid
	FROM 
		purchaseorderdetail

	WHERE 
          id = p_id;

END;



CREATE PROCEDURE `spc_purchaseorderWithoutgrpo_bymodueid`(
    IN p_moduleid INT,
	IN p_companyid INT
)
BEGIN

	SELECT PO.id,
		PO.vendorid,
        PT.partyname,
        PO.discount,
        PO.potype,
        PO.purchaseorderno,
        DATE_FORMAT(PO.podate,'%d/%m/%Y') as podate
		-- fnc_purchaseorder_remainingquantity(PO.id,p_companyid) INTO @remainingquantity
	FROM 
		purchaseorder PO	
	
    LEFT JOIN purchaseorderdetail POD ON POD.purchaseorderid = PO.id
 
    LEFT JOIN grpo G ON G.purchaseorderid = PO.id
	LEFT JOIN party PT ON PO.vendorid = PT.id
   
	
    WHERE 
		PO.companyid = p_companyid AND
        moduleid = p_moduleid
        AND POD.pendinggrpoquantity > 0
        
	 GROUP BY 
		 PO.id;

END;



CREATE PROCEDURE `spc_purchaseorderwithoutgrpo_search`(
	IN p_companyid INT
)
BEGIN

	SELECT PO.id,
		PO.vendorid,
        PT.partyname,
        PO.discount,
        PO.potype,
        PO.purchaseorderno,
        DATE_FORMAT(PO.podate,'%d/%m/%Y') as podate
		-- fnc_purchaseorder_remainingquantity(PO.id,p_companyid) INTO @remainingquantity
	FROM 
		purchaseorder PO	
	
    LEFT JOIN purchaseorderdetail POD ON POD.purchaseorderid = PO.id
 
    LEFT JOIN grpo G ON G.purchaseorderid = PO.id
	LEFT JOIN party PT ON PO.vendorid = PT.id
   
    -- LEFT JOIN grpodetail GD ON G.id = GD.grpoid
	
    WHERE 
		PO.companyid = p_companyid
       -- and @remainingquantity > 0
        AND POD.pendinggrpoquantity > 0
        
	 GROUP BY 
		 PO.id;

END;



CREATE PROCEDURE `spc_purchaseorder_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DELETE FROM purchaseorder WHERE id = p_id;
    DELETE FROM purchaseorderdetail WHERE purchaseorderid = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'purchaseorder', p_id, 'delete', p_userid);


END;



CREATE PROCEDURE `spc_purchaseorder_report`(
IN p_fromdate date,
IN p_todate date,
IN p_companyid INT(11) )
BEGIN
SELECT 	     
			PO.id,
            PO.purchaseorderno,
			DATE_FORMAT(podate,'%d/%m/%Y') as podate,
            PO.vendorid,
            PO.discount,
            POD.itemid,
            POD.itemunit,
            POD.unitprice,
            POD.itemdiscount,
            POD.taxid,
            POD.quantity,
            (POD.quantity*POD.unitprice) as itemcost,
            R.refname as itenunit,
			R.refname as itemunitname,
            I.itemname,
            T.taxpercent,
            P.partyname
            
    
	FROM purchaseorder PO
    LEFT JOIN purchaseorderdetail POD ON PO.id = POD.purchaseorderid
    LEFT JOIN `reference` R ON POD.itemunit = R.id
	LEFT JOIN item I ON POD.itemid = I.id
    LEFT JOIN tax T ON POD.taxid = T.id
    LEFT JOIN party P ON PO.vendorid = P.id
WHERE
    PO.podate BETWEEN p_fromdate AND p_todate 
    AND PO.companyid = p_companyid;
  
  SET @basetotal = null;
  SELECT SUM(POD.quantity * POD.unitprice) INTO @basetotal
  FROM purchaseorder PO
  LEFT JOIN purchaseorderdetail POD ON POD.purchaseorderid = PO.id
  WHERE PO.podate BETWEEN p_fromdate AND p_todate 
  AND PO.companyid = p_companyid;
  
  SELECT @basetotal as basetotal,
	     (@basetotal - ((@basetotal/(100 + SUM(PO.discount))) * 100)) as discount,
         0 as NA,
         0 as freight,
         0 as rounding
  FROM purchaseorder PO
  LEFT JOIN purchaseorderdetail POD ON POD.purchaseorderid = PO.id
  
  WHERE PO.podate BETWEEN p_fromdate AND p_todate 
  AND PO.companyid = p_companyid;
  
SELECT
			PO.id,
			PO.purchaseorderno
 
 FROM purchaseorder PO
 
WHERE
		PO.podate BETWEEN p_fromdate AND p_todate AND
		PO.companyid = p_companyid
   GROUP BY PO.id;
  
  

END;



CREATE PROCEDURE `spc_purchaseorder_save`(
		IN p_id INT,
		IN p_vendorid INT,
        IN p_purchaserequestid INT,
		IN p_purchaseorderno VARCHAR(200),
		IN p_podate DATE,
		IN p_deliverydate DATE,
		IN p_discount DECIMAL(8,3),
		IN p_remark VARCHAR(200),
        IN p_statusid INT,
		IN p_shipfromwarehouseid INT,
        IN p_transactionTypeid INT,
        IN p_deliveryfromaddressid INT,
        IN p_deliverytowarehouseid INT,
        IN p_deliveryfromstatecode VARCHAR(200),
		IN p_deliverytostatecode VARCHAR(200),
        IN p_moduleid INT(11),
        IN p_companyid INT,
		IN p_userid INT,
		OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO purchaseorder 
				(vendorid, purchaserequestid, purchaseorderno, podate, deliverydate, 
                discount, remark, statusid, 
                shipfromwarehouseid,transactiontypeid,deliveryfromaddressid,deliverytowarehouseid,
                deliveryfromstatecode,deliverytostatecode, moduleid, companyid)
			VALUES 
				(p_vendorid, p_purchaserequestid,  p_purchaseorderno,
                p_podate, p_deliverydate, p_discount, p_remark, 
                p_statusid, p_shipfromwarehouseid,p_transactiontypeid,p_deliveryfromaddressid,
                p_deliverytowarehouseid, p_deliveryfromstatecode, p_deliverytostatecode, p_moduleid, p_companyid);
                
                -- purchase request status upadte
			/*UPDATE purchaserequest
				set statusid = 93
			where id = p_purchaserequestid; */
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE purchaseorder
			SET vendorid = p_vendorid,
                purchaserequestid = p_purchaserequestid,
                purchaseorderno = p_purchaseorderno,
				podate = p_podate,
				deliverydate = p_deliverydate,
				shipfromwarehouseid = p_shipfromwarehouseid,
                statusid = p_statusid,
				discount = p_discount,
				remark = p_remark,
                transactiontypeid=p_transactiontypeid,
                deliveryfromaddressid=p_deliveryfromaddressid,
                deliverytowarehouseid = p_deliverytowarehouseid,
                deliveryfromstatecode = p_deliveryfromstatecode,
                deliverytostatecode = p_deliverytostatecode,
                moduleid = p_moduleid,
                companyid = p_companyid,
                
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'purchaseorder', out_id, @action, p_userid);



END;



CREATE PROCEDURE `spc_purchaseorder_search`(
	IN p_companyid INT
)
BEGIN


	SELECT PO.id,
		PO.vendorid,
        PO.purchaserequestid,
        PT.partyname,
		DATE_FORMAT(PO.podate,'%d/%m/%Y') as podate,
        DATE_FORMAT(PO.deliverydate,'%d/%m/%Y') as deliverydate,
		PO.shipfromwarehouseid,
        WH.warehousename,
        PO.purchaseorderno,
		PO.discount,
		PO.remark,
        PO.statusid,
		REF.refname as statusname,
        transactiontypeid,
        deliveryfromaddressid,
        deliverytowarehouseid,
		deliveryfromstatecode,
        deliverytostatecode,
        PA.address as delfromfulladdress,
        WH1.address as warehousefulladdress,
        ST.isunionterritory as warehouseisunionterritory,
        ST1.isunionterritory as deliveryfromisunionterritory,
        PO.moduleid
       
		
	FROM 
		purchaseorder PO	
        
	LEFT JOIN party PT ON PO.vendorid = PT.id
    LEFT JOIN warehouse WH ON PO.shipfromwarehouseid = WH.id
    LEFT JOIN `reference` REF ON PO.statusid = REF.id
	LEFT JOIN partyaddress PA ON PO.deliveryfromaddressid = PA.id
	LEFT JOIN warehouse WH1 ON PO.deliverytowarehouseid = WH1.id
    LEFT JOIN `state` ST ON WH1.stateid = ST.id
	LEFT JOIN `state` ST1 ON PA.stateid = ST1.id
     
	
	
    WHERE 
		PO.companyid = p_companyid
        
	ORDER BY 
		PO.id DESC;

END;



CREATE PROCEDURE `spc_purchaseorder_select`(
	IN p_id INT
)
BEGIN

	SELECT PO.id,
		PO.vendorid,
        DATE_FORMAT(PO.podate,'%d/%m/%Y') as podate,
		PO.deliverydate,
		PO.shipfromwarehouseid,
		PO.discount,
		PO.remark,
        PO.statusid,
        G.id,
		transactiontypeid,
        deliveryfromaddressid,
        deliverytowarehouseid,
		deliveryfromstatecode,
        deliverytostatecode,
        PO.moduleid
	FROM 
		purchaseorder PO
        LEFT JOIN grpo G ON G.purchaseorderid = PO.id
	WHERE 
		PO.id = p_id;

END;



CREATE PROCEDURE `spc_purchaseregister_report`(
 IN p_vendorids varchar(200),
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_companyid INT(11))
BEGIN



	DROP TEMPORARY TABLE IF EXISTS tmppurregreport;
	CREATE TEMPORARY TABLE tmppurregreport

     SELECT PI.id,
			DATE_FORMAT(PI.invoicedate,'%d/%m/%Y') as date,
            PI.purchaseinvoiceno as docno,
			PI.vendorid as vendorid,
            PI.referenceno as billno,
            DATE_FORMAT(PI.referencedate,'%d/%m/%Y') as billdate,
            PID.itemid as itemid,
            PID.itemname as itemname,
            PID.quantity as quantity,
            PID.unitprice as rate,
            (PID.quantity*PID.unitprice)as amount,
			((PID.quantity*PID.unitprice)*PID.itemdiscount/100) as discountamount,
            PID.itemdiscount as itemdiscount,
            PID.taxid as taxid,
			PID.taxpercent as taxpercent,
		    T.taxname as taxname,
            ((PID.quantity*PID.unitprice)*PID.taxpercent/100)as taxamount,
            0 as freightamounts,
            I.itemcode as itemcode,
            P.partyname as partnername
 
	FROM
			purchaseinvoice PI
			LEFT JOIN purchaseinvoicedetail PID ON PI.id = PID.purchaseinvoiceid
            LEFT JOIN item I ON I.id = PID.itemid
			LEFT JOIN party P ON P.id = PI.vendorid
            LEFT JOIN tax T ON PID.taxid = T.id
    
	WHERE 
             FIND_IN_SET( PI.vendorid,@vendorids) AND
			PI.invoicedate BETWEEN p_fromdate AND p_todate AND
            PI.companyid = p_companyid;
  
    
    DROP TEMPORARY TABLE IF EXISTS tmppurregreport1;
	CREATE TEMPORARY TABLE tmppurregreport1
	select *, 'item' as entity from tmppurregreport;
    
    
    select * from (
     select * from tmppurregreport1
     UNION ALL
        
      SELECT 
			'' as id,
			'' as `date`,
            docno,
			'' as vendorid,
            '' as billno,
			'' as billdate,
            '' as itemid,
            'Sub Total' as itemname,
            SUM(quantity),
            SUM(rate),
            SUM(amount),
            SUM(discountamount),
            '' as itemdiscount,
            '' as taxid,
			'' as taxpercent,
		    '' as taxname,
            SUM(taxamount),
            SUM(freightamounts) as freightamount,
            '' as itemcode,
            '' as partnername,
			'subtotal' as entity
	FROM
			tmppurregreport
	GROUP BY docno 
    ) as tmpresult  ORDER BY docno, entity;
 
         
/*calculation for tax*/		 
            

		SELECT 
            PID.taxid as taxid,
		    T.taxname as taxname,
            SUM(((PID.quantity)* (PID.unitprice)))as purchaseamount,
            PID.taxpercent as taxpercent,
            SUM(((PID.quantity)* (PID.unitprice)) *(PID.taxpercent)/100)as taxamount,
            (SUM(((PID.quantity)* (PID.unitprice)))+SUM(((PID.quantity)* (PID.unitprice)) *(PID.taxpercent)/100)) as grandtaxamount
 
	        FROM
			purchaseinvoice PI
			LEFT JOIN purchaseinvoicedetail PID ON PI.id = PID.purchaseinvoiceid
            LEFT JOIN tax T ON PID.taxid = T.id
    
	      WHERE 
             FIND_IN_SET( PI.vendorid,@vendorids) AND
			PI.invoicedate BETWEEN p_fromdate AND p_todate AND
            PI.companyid = p_companyid
            group by PID.taxid
		
        union all
        SELECT 
            NULL as taxid,
		    'Grand Total' as taxname,
            SUM(((PID.quantity)* (PID.unitprice)))as totalpurchaseamount,
            NUll as taxpercent,
            SUM(((PID.quantity)* (PID.unitprice)) *(PID.taxpercent)/100)as totaltaxamount,
			
            (SUM(((PID.quantity)* (PID.unitprice)))+SUM(((PID.quantity)* (PID.unitprice)) *(PID.taxpercent)/100)) as totalgrandtaxamount
           
 
	        FROM
			purchaseinvoice PI
			LEFT JOIN purchaseinvoicedetail PID ON PI.id = PID.purchaseinvoiceid
            LEFT JOIN tax T ON PID.taxid = T.id
    
	      WHERE 
             FIND_IN_SET( PI.vendorid,@vendorids) AND
			PI.invoicedate BETWEEN p_fromdate AND p_todate AND
            PI.companyid = p_companyid;
    
END;



CREATE PROCEDURE `spc_purchaserequestdetail_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	-- 

	DELETE FROM purchaserequestdetail
		WHERE
			id = p_id
			AND NOT EXISTS (
							SELECT PO.purchaserequestid from purchaserequest PR 
							INNER JOIN purchaserequestdetail PRD ON PR.id = PRD.purchaserequestid
							WHERE
								PRD.id = p_id
                                AND
                                (
									approvalby IS NULL
									OR
									(
										approvalby IS NOT NULL
										AND
										NOT EXISTS (SELECT PO.purchaserequestid FROM purchaseorder PO WHERE PO.purchaserequestid = p_id)
									)
								)
						);
    
    IF NOT EXISTS(SELECT * FROM purchaserequestdetail WHERE id = p_id) THEN
		
	-- record log
		CALL spc_commonlog_save(p_companyid, 'purchaserequestdetail', p_id, 'delete', p_userid);

		SET out_id = p_id;  
	
    ELSE
		SET out_id = -1;  
    
    END IF;
    
    
	
END;



CREATE PROCEDURE `spc_purchaserequestdetail_save`(
	IN p_id INT,
	IN p_purchaserequestid INT,
    IN p_itemid INT,
    IN p_itemname VARCHAR(200),
    IN p_quantity Decimal(15,3),
    IN p_unitid INT,
    IN p_itemstatusid INT,
    IN p_companyid INT,
    In p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO purchaserequestdetail 
				(purchaserequestid, itemid, itemname, quantity, unitid, itemstatusid, companyid)
			VALUES 
				(p_purchaserequestid, p_itemid, p_itemname, p_quantity, p_unitid, p_itemstatusid, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE purchaserequestdetail
			SET purchaserequestid = p_purchaserequestid, 
				itemid = p_itemid, 
                itemname = p_itemname, 
                quantity = p_quantity, 
                unitid = p_unitid, 
                itemstatusid = p_itemstatusid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'purchaserequestdetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_purchaserequestdetail_search`(
    IN p_companyid INT
)
BEGIN

	SELECT PRD.id,
		purchaserequestid,
		itemid,
		itemname,
		quantity,
		unitid,
        REF1.refname AS unitname,
		companyid,
        PRD.itemunit as itemunitid,
        I.taxcategoryid
	FROM 
		purchaserequestdetail PRD
	
    LEFT JOIN `reference` REF1 ON PRD.unitid = REF1.id
	LEFT JOIN  item I ON PRD.itemid = I.itemid
    
    WHERE
		
        companyid = p_companyid;
END;



CREATE PROCEDURE `spc_purchaserequestdetail_searchbyrequestid`(
    IN p_purchaserequestid INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
		PRD.id as purchaserequestdetailid,
		PRD.purchaserequestid,
		PRD.itemid,
		PRD.itemname,
		quantity,
		unitid as itemunitid,
        REF1.refname as itemunitname,
        I.unitcost,
        (quantity*I.unitcost) as itemtotalcost,
        PRD.companyid,
        IG.groupname,
        IG.id as itemgroupid,
        I.taxcategoryid,
		REF2.refname AS taxcategoryname
	FROM 
		purchaserequestdetail PRD
	
    LEFT JOIN `reference` REF1 ON PRD.unitid = REF1.id
	LEFT JOIN item I ON I.id = PRD.itemid
    LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
    LEFT JOIN `reference` REF2 ON I.taxcategoryid = REF2.id
    
    WHERE
		purchaserequestid = p_purchaserequestid
        AND
        PRD.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_purchaserequestdetail_searchbytaxcategory`(
	IN p_taxcategoryid VARCHAR(50),
    IN p_purchaserequestid INT,
    IN p_companyid INT
)
BEGIN
 SET @taxcategoryid = p_taxcategoryid ;
	SELECT 
		PRD.id as purchaserequestdetailid,
		PRD.purchaserequestid,
		PRD.itemid,
		PRD.itemname,
		PRD.quantity,
		PRD.unitid as itemunitid,
        REF1.refname as itemunitname,
        I.unitcost,
        (PRD.quantity*I.unitcost) as itemtotalcost,
        PRD.companyid,
        IG.groupname,
        IG.id as itemgroupid,
        I.taxcategoryid,
		REF2.refname AS taxcategoryname,
        POD.itemid as availableitemid
	FROM 
		purchaserequestdetail PRD
	
    LEFT JOIN `reference` REF1 ON PRD.unitid = REF1.id
	LEFT JOIN item I ON I.id = PRD.itemid
    LEFT JOIN itemgroup IG ON IG.id = I.itemgroupid
    LEFT JOIN `reference` REF2 ON I.taxcategoryid = REF2.id
	LEFT JOIN purchaseorder PO ON PO.purchaserequestid = PRD.purchaserequestid
	LEFT JOIN purchaseorderdetail POD ON POD.purchaseorderid = PO.id AND POD.itemid = PRD.itemid
    
    WHERE
		PRD.purchaserequestid = p_purchaserequestid
        AND
        PRD.companyid = p_companyid
         AND 
		FIND_IN_SET( I.taxcategoryid ,@taxcategoryid) -- (p_taxcategoryid is null OR I.taxcategoryid = p_taxcategoryid)
		AND POD.itemid IS NULL ;
END;



CREATE PROCEDURE `spc_purchaserequestdetail_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	SELECT id,
		purchaserequestid,
		itemid,
		itemname,
		quantity,
		unitid,
		companyid
	FROM 
		purchaserequestdetail
    WHERE
		id = p_id 
        AND companyid = p_companyid;


END;



CREATE PROCEDURE `spc_purchaserequest_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	-- Delete the purchase request if not approved / approved but purchaseorder is not created

	DELETE FROM purchaserequest
		WHERE 
			id = p_id
            AND 
            (approvalby IS NULL
				OR
				(
					approvalby IS NOT NULL
					AND
					NOT EXISTS (SELECT PO.purchaserequestid FROM purchaseorder PO WHERE PO.purchaserequestid = p_id)
				)
			);

	-- if purchase request record is deleted from all above condition, then delete purchaserequestdetail
	IF NOT EXISTS(SELECT * FROM purchaserequest WHERE id = p_id AND companyid = p_companyid) THEN
    
		DELETE FROM purchaserequestdetail WHERE purchaserequestid = p_id;
        
		-- record log
		CALL spc_commonlog_save(p_companyid, 'purchaserequest', p_id, 'delete', p_userid);

		SET out_id = p_id;

	ELSE
		SET out_id = -1;
        
    END IF;


END;



CREATE PROCEDURE `spc_purchaserequest_save`(
		IN p_id INT,
        IN p_purchaserequestno VARCHAR(200),
		IN p_requestsourceid INT(11),
		IN p_requestdate DATE,
		IN p_createdby INT,
		IN p_approvedby INT,
		IN p_remark VARCHAR(200),
        IN p_statusid INT,
        IN p_tobatchid INT,
        IN p_vendorid INT,
        IN p_companyid INT,
		IN p_userid INT,
		OUT out_id INT

)
BEGIN

	SET @action = null;
    SET @p_approveddate = null;
  
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
		if(p_approvedby IS NOT NULL) THEN
			SET @p_approveddate	= CURDATE();
        END IF;
    
		INSERT INTO purchaserequest 
                (purchaserequestno, requestsourceid, requestdate, createdby, approvedby, approvaldate, remark, statusid, tobatchid, vendorid, companyid)                
			VALUES 
				(p_purchaserequestno, p_requestsourceid, p_requestdate, p_createdby, p_approvedby, @p_approveddate, p_remark, p_statusid, p_tobatchid, p_vendorid, p_companyid);
                
		SET @action = 'INSERT';

	ELSE
    
		UPDATE purchaserequest
			SET purchaserequestno = p_purchaserequestno,
                requestsourceid = p_requestsourceid, 
				requestdate = p_requestdate, 
                createdby = p_createdby, 
                remark = p_remark, 
                tobatchid = p_tobatchid,
                vendorid = p_vendorid,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
           

		-- First time approval / approved request can be cancelled if purchaseorder not created for it
        
		IF(p_approvedby IS NOT NULL) THEN
			
            UPDATE purchaserequest PR
				SET approvedby = p_userid,
					statusid = p_statusid,
					approvaldate = CURDATE()
            WHERE
				statusid != p_statusid
                AND NOT EXISTS (select PO.purchaserequestid from purchaseorder PO where PR.id = PO.purchaserequestid)
				AND id = p_id
				AND companyid = p_companyid;
            
        END IF;
            
                SET @action = 'UPDATE';
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   
	 -- record log
   CALL spc_commonlog_save(p_companyid, 'purchaseorder', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_purchaserequest_search`(
	IN p_companyid INT
)
BEGIN

	SELECT 
		PR.id,
		PR.requestsourceid,
		DATE_FORMAT(PR.requestdate,'%d/%m/%Y') as requestdate,
		createdby,
        U.fullname AS createdbyname,
		approvedby,
        U1.fullname AS approvedbyname,
		PR.approvaldate,
		remark,
		PR.statusid,
        PR.tobatchid,
        PR.vendorid,
		PT.partyname as partyname,
        REF1.refname as statusname,
		PR.companyid,
        PR.purchaserequestno
	FROM 
		purchaserequest PR
	
    LEFT JOIN user U ON PR.approvedby = U.id
    LEFT JOIN user U1 ON PR.approvedby = U1.id
    LEFT JOIN `reference` REF1 ON REF1.id = PR.statusid
    LEFT JOIN partner PT ON PT.id = PR.vendorid
    

   WHERE 
		PR.companyid = p_companyid;
        
END;



CREATE PROCEDURE `spc_purchaserequest_searchbystatus`(
	IN p_statusid INT,
	IN p_companyid INT
    
)
BEGIN

	SELECT 
		PR.id,
		PR.requestsourceid,
        DATE_FORMAT(PR.requestdate,'%d/%m/%Y') as requestdate,
        REF1.refname as statusname,
		PR.companyid,
        PR.tobatchid,
        PR.vendorid,
        PT.partyname
	FROM 
		purchaserequest PR
	
    LEFT JOIN user U ON PR.approvedby = U.id
    LEFT JOIN user U1 ON PR.approvedby = U1.id
    LEFT JOIN `reference` REF1 ON REF1.id = PR.statusid
    LEFT JOIN partner PT ON PR.vendorid = PT.id
	LEFT JOIN purchaserequestdetail PRD ON PRD.purchaserequestid = PR.id
     

   WHERE 
		PR.companyid = p_companyid
		AND PR.statusid = p_statusid
		AND PRD.itemstatusid =1641
	group by PR.id 
    ORDER BY PR.id DESC;
        
END;



CREATE PROCEDURE `spc_purchaserequest_select`(
	IN p_id INT
)
BEGIN

	SELECT PR.id,
		PR.requestsourceid,
		PR.requestdate,
		PR.createdby,
		PR.approvedby,
		PR.approvaldate,
		PR.remark,
		PR.statusid,
		PR.companyid,
        PR.tobatchid,
        PR.vendorid,
        PT.partyname,
		I.taxcategoryid,
		REF1.refname AS taxcategoryname
	FROM 
		purchaserequest PR
        
	LEFT JOIN partner PT ON PR.vendorid = PT.id
    LEFT JOIN `reference` REF1 ON I.taxcategoryid = REF1.id
	LEFT JOIN  item I ON PRD.itemid = I.itemid
    WHERE
		id = p_id;

END;



CREATE PROCEDURE `spc_qualitycheckdetail_delete`(
IN p_id INT(11)

)
BEGIN
DELETE 
FROM		feedmill_qualitycheckdetail
WHERE		id = p_id;

END;



CREATE PROCEDURE `spc_qualitycheckdetail_save`(
IN p_id INT(11),
    IN p_qualitycheckid INT(11),
    IN p_purchaseorderid INT(11),
    IN p_itemid INT(11),
    IN p_testid INT(11),
    IN p_samplequantity DECIMAL(9,3),
    IN p_finding DECIMAL(9,3),
    IN p_resultid INT(11),
    IN p_remark VARCHAR(45),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_qualitycheckdetail(id,qualitycheckid,purchaseorderid,itemid,testid,samplequantity,finding,resultid,remark,companyid)
        VALUES (p_id, p_qualitycheckid,p_purchaseorderid,p_itemid,p_testid,p_samplequantity,p_finding,p_resultid,p_remark,p_companyid);
        
        SET @action = 'INSERT';
        
        ELSE
        UPDATE feedmill_qualitycheckdetail
        SET id = p_id, 
            qualitycheckid = p_qualitycheckid,
            purchaseorderid = p_purchaseorderid,
            itemid = p_itemid,
            testid = p_testid,
            samplequantity = p_samplequantity,
			finding = p_finding,
           resultid = p_resultid,
           remark = p_remark,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_qualitycheckdetail', out_id, @action, p_userid);



END;



CREATE PROCEDURE `spc_qualitycheckdetail_search`(
IN p_qualitycheckid INT(11)
)
BEGIN
SELECT QD.id,
	   QD.qualitycheckid,
       QD.purchaseorderid,
       QD.itemid,
       QD.testid,
        T.testname,
        I.itemname
       
           
    FROM feedmill_qualitycheckdetail QD
    
     LEFT JOIN item I ON QD.itemid = I.id
     LEFT JOIN feedmill_testmaster T ON QD.testid = T.id
    
    
    WHERE  
		  qualitycheckid = p_qualitycheckid;

END;



CREATE PROCEDURE `spc_qualitycheckdetail_select`(
IN p_id INT(11),
IN p_companyid INT(11)
)
BEGIN
SELECT id,
		   qualitycheckid
				
	FROM feedmill_qualitycheckdetail

	WHERE companyid = p_companyid
	AND	id = p_id;            
END;



CREATE PROCEDURE `spc_qualitycheck_delete`(
IN p_id INT(11)
)
BEGIN
DELETE
FROM  feedmill_qualitycheck
WHERE id = p_id;

END;



CREATE PROCEDURE `spc_qualitycheck_save`(
IN p_id INT(11),
    IN p_ackid INT(11),
    IN p_checkedby VARCHAR(45),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_qualitycheck(id,ackid,checkedby,companyid)
        VALUES (p_id, p_ackid,p_checkedby,p_companyid);
        
        SET @action = 'INSERT';
        
        ELSE
        UPDATE feedmill_qualitycheck
       SET id = p_id,
            ackid = p_ackid,
            checkedby = p_checkedby,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_qualitycheck', out_id, @action, p_userid);




END;



CREATE PROCEDURE `spc_qualitycheck_search`(
IN p_companyid INT(11)
)
BEGIN
SELECT id,
		ackid,
        checkedby,
        companyid
        
           
	FROM feedmill_qualitycheck
    
    WHERE companyid = p_companyid;


END;



CREATE PROCEDURE `spc_qualitycheck_select`(
IN p_id INT(11),
IN p_companyid INT(11)
)
BEGIN
SELECT id,
		   checkedby
           
	FROM  feedmill_qualitycheck
    
    WHERE companyid = p_companyid
    AND id = p_id;

END;



CREATE PROCEDURE `spc_reference_select`(
	IN p_typecode varchar(30)
)
BEGIN
	
		SELECT 
			id,
			typecode,
            refname,
            parenttypecode,
            displayorder
		FROM
			reference
		WHERE
			typecode = p_typecode and
            deleted <> 1;
END;



CREATE PROCEDURE `spc_reference_selectbygroup`(
	IN typecode varchar(20)
)
BEGIN
	
		SELECT 
			id,
			typecode,
            refname,
            parenttypecode,
            displayorder
		FROM
			reference
		WHERE
			parenttypecode = p_typecode and
            deleted <> 1;
END;



CREATE PROCEDURE `spc_roleaccess_save`(
	IN p_id INT,
    IN p_roleid INT,
    IN p_entityid INT,
    IN p_entitytypeid INT,
    IN p_permissions INT,
    IN p_checked INT,
    IN p_parentid VARCHAR(100),
    OUT out_id INT
)
BEGIN


	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO roleaccess 
				(
					id,
					roleid,
					entityid,
                    entitytypeid,
                    permissions,
					checked,
                    parentid
				)
			VALUES 
				(	
					p_id,
					p_roleid,
					p_entityid,
                    p_entitytypeid,
                    p_permissions,
					p_checked,
                    p_parentid
				);
                
		SET @action = 'INSERT';
      
	ELSE
    
		UPDATE roleaccess
        
				SET 
					roleid = p_roleid,
					entityid = p_entityid,
					entitytypeid = p_entitytypeid,
                    permissions = p_permissions,
					checked = p_checked,
                    parentid = p_parentid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id;
                
		SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 

END;



CREATE PROCEDURE `spc_role_ddl`()
BEGIN

	SELECT id,
			rolename,
            description
		FROM
			`role`;

END;



CREATE PROCEDURE `spc_role_save`(
	IN p_id INT,
    IN p_rolename INT,
    IN p_description NVARCHAR(200),
    IN p_licensetypeid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO `role`
				(`id`, `rolename`, `description`, `licensetypeid`)
			VALUES 
				(p_id, p_rolename, p_description,p_licensetypeid);
                
		SET @action = 'INSERT';
      
	ELSE
    
		UPDATE `role`
				SET 
                `rolename` = p_rolename, 
                `description` = p_description, 
                `licensetypeid` = p_licensetypeid, 
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id;
                
		SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
   
END;



CREATE PROCEDURE `spc_salesdeliverydetail_save`(
	IN p_id INT,
    IN p_salesdeliveryid INT,
    IN p_salesorderdetailid INT,
    IN p_itemid INT,
    IN p_quantity DECIMAL(12,3),
    IN p_isbird TINYINT,
    IN p_weight DECIMAL(12,3),    
    IN p_itemunitid INT,
    IN p_materialissueid INT,
    IN p_warehousebinid INT,
    IN p_statusid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO salesdeliverydetail
				(`id`,
				`salesdeliveryid`,
                `salesorderdetailid`,
				`itemid`,
				`quantity`,
				`isbird`,
				`weight`,
				`itemunitid`,
				`materialissueid`,
				`warehousebinid`,
                `statusid`,
                `companyid`)
			VALUES 
				(
                p_id,
				p_salesdeliveryid,
                p_salesorderdetailid,
				p_itemid,
				p_quantity,
				p_isbird,
				p_weight,
				p_itemunitid,
				p_materialissueid,
				p_warehousebinid,
                p_statusid,
                p_companyid);
		
            SET @action = 'INSERT';
		
	ELSE
    
		UPDATE salesdeliverydetail
				SET 
					salesdeliveryid = p_salesdeliveryid,
                    salesorderdetailid = p_salesorderdetailid,
					itemid= p_itemid,
					quantity = p_quantity,
					isbird = p_isbird,
					weight = p_weight,
					itemunitid = p_itemunitid,
					materialissueid = p_materialissueid,
					warehousebinid = p_warehousebinid,
                    statusid = p_statusid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;

	SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'salesdelivery', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_salesdeliverydetail_search`(
	IN p_salesdeliveryid INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
			SDD.`id`,
			SDD.`salesdeliveryid`,
            SDD.`salesorderdetailid`,
			SDD.`itemid`,
            I.itemname,
			I.itemcode,
            (SO.`quantity` + SDD.`quantity`) - ( IFNULL(fnc_salesorder_itemdeliveredqty(SDD.`itemid`, SDD.`salesorderdetailid`), 0)) as quantity,
			(SO.`weight` + SDD.`weight`) - IFNULL(fnc_salesorder_itemdeliveredweight(SDD.`itemid`, SDD.`salesorderdetailid`), 0) as weight,
            
            -- SO.`quantity` as quantity,
			SDD.`quantity` as deliveryquantity,
			SDD.`isbird`,
            -- SO.`weight` as weight,
			SDD.`weight` as deliveryweight,
			SDD.`itemunitid`,
			SDD.`statusid`,
			SDD.`materialissueid`,
			SDD.`warehousebinid`,
            WHB.bincode as towarehousebincode,
            WHB.binname as towarehousebinname,
            WHB.warehouseid as towarehouseid,
            WH.warehousecode as towarehousecode,
            WH.warehousename as towarehousename,
            WH.locationid,
            LC.locationname,
			SDD.`companyid`
	FROM 
		`salesdeliverydetail` SDD
	INNER JOIN `item` I ON I.id = SDD.itemid
	INNER JOIN `salesdelivery` SD ON SDD.salesdeliveryid = SD.id
    INNER JOIN `warehousebin` WHB ON WHB.id = SDD.warehousebinid
    INNER JOIN `warehouse` WH ON WH.id = WHB.warehouseid
    INNER JOIN `location` LC ON LC.id = WH.locationid
    INNER JOIN `salesorderdetail` SO ON SDD.salesorderdetailid = SO.id
	WHERE
		SDD.salesdeliveryid = p_salesdeliveryid
		AND SDD.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_salesdelivery_bysalesorderid`(
	IN p_salesorderid INT,
    IN p_salesinvoiceid INT,
    IN p_companyid INT
)
BEGIN

	SELECT
		SD.id,
        SD.salesorderid,
        SD.salesdeliveryno,
        DATE_FORMAT(SD.deliverydate,'%d/%m/%Y') as deliverydate,	
        SD.statusid
	FROM
		salesdelivery SD
	LEFT JOIN salesinvoice SI ON find_in_set(SD.id, SI.salesdeliveryids) 
	WHERE
		SD.salesorderid = p_salesorderid
        AND (SI.id IS NULL OR (p_salesinvoiceid IS NOT NULL AND SI.id = p_salesinvoiceid))
		AND SD.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_salesdelivery_issueitems`(
  IN p_salesdeliveryid INT,
  IN p_userid INT,
  IN p_companyid INT,
  IN p_outid INT
)
BEGIN
	
    
    
    DECLARE x INT;
	DECLARE i INT;
   
	SET @row_number = 0;
	SET @reccount = 0;
    
	SET x = 1;
    SET i = 1;
    SET @materialissue_outid = null;
    SET @materialissuedetail_outid = null;
    SET @movement_outid = null;
    SET @sd_warehouseid = null;
    
    
    SELECT warehouseid INTO @sd_warehouseid
    FROM salesdelivery SD
    WHERE id = p_salesdeliveryid;
    
    
	-- save issue parent record
	 CALL spc_materialissue_save(
			null, 
			NOW(), 
			381, 
			null, 
			362, 
			'item delivered in sale', 
			p_userid, 
            @sd_warehouseid,
            null,
            null, 
			null, 
            p_companyid, 
            p_userid, 
            @materialissue_outid
		);
 
 
	UPDATE salesdelivery SET materialissueid = @materialissue_outid
	WHERE id = p_salesdeliveryid;
        
	-- select mortality and culls detail for given daily transaction and issue them
		
		DROP TEMPORARY TABLE IF EXISTS tempitemsale;
        
		CREATE TEMPORARY TABLE tempitemsale
		SELECT 
			SDD.id,
			SDD.itemid, 
			I.itemname, 
			I.itemunitid,
			I.unitcost,
			SDD.quantity, 
            SDD.warehousebinid,
            WB.warehouseid,
			-- totalculls, 
			(@row_number := @row_number + 1) as `rank`
            
		FROM salesdeliverydetail SDD
		LEFT JOIN item I ON SDD.itemid = I.id
        LEFT JOIN warehousebin WB ON SDD.warehousebinid = WB.id
		WHERE SDD.salesdeliveryid = p_salesdeliveryid;
	 
		SET @salesdeliverydetailid = null;
		SET @itemid = null, @itemname = null, @itemunitid = null, @unitcost = null;
        SET @itemquantity = null ,@warehouseid = null, @warehousebinid = null;
        SET @itembatch = null;
		SELECT COUNT(*) INTO @reccount FROM tempitemsale;
	 
		WHILE x <= @reccount DO
			
			SELECT id, itemid, itemname, itemunitid, unitcost, quantity, warehouseid, warehousebinid
            INTO @salesdeliverydetailid, @itemid, @itemname, @itemunitid, @unitcost, @itemquantity, @warehouseid, @warehousebinid
            FROM tempitemsale WHERE `rank` = x;
                       
            
				select @salesdeliverydetailid, @itemid, @itemname, @itemunitid, @unitcost, @itemquantity, @warehouseid, @warehousebinid;
            
				set @orderquantity = @itemquantity;
				set @row_no = 0;
				set @xz = 0;
				set @reccnt = 0;
					
				DROP TEMPORARY TABLE IF EXISTS tempitembatches;

				CREATE TEMPORARY TABLE tempitembatches
				SELECT itemid, itemname, itembatch, itemvalue, itemunitid, quantity, CAST(itemvalue/quantity AS DECIMAL(12,2)) AS unitcost, `rank` FROM (
					SELECT MM.itemid, I.itemname, MM.itembatch, MM.itemvalue, I.itemunitid, 
                    fnc_itembatchlivestock(MM.itemid, MM.itembatch, MM.towarehousebinid, MM.companyid) as quantity, 
                    (@row_no := @row_no + 1) as `rank` 
					FROM materialmovement  MM
					INNER JOIN item I ON MM.itemid = I.id
					WHERE itemid = @itemid AND towarehousebinid = @warehousebinid
				) AS 
				tmplivestock WHERE IFNULL(quantity, 0) > 0;

				SELECT COUNT(*) INTO @reccnt FROM tempitembatches;

				WHILE @xz <= @reccnt DO

					IF(@orderquantity > 0) THEN

						SET @b_itemid = 0, @b_itemname = '', @b_itembatch = '', @b_itemvalue = 0, @b_unitcost = 0, @b_itemunitid = 0, @b_quantity = 0, @b_rnk = 0;
						SELECT 
							itemid, itemname, itembatch, itemvalue, itemunitid, quantity, unitcost, `rank` 
						INTO 
							@b_itemid, @b_itemname, @b_itembatch, @b_itemvalue, @b_itemunitid, @b_quantity, @b_unitcost, @b_rnk 
						FROM 
						tempitembatches WHERE `rank` = @xz;
						
						SET @b_minusqty = 0;
						
						IF (@b_quantity > @orderquantity) THEN
							SET @b_minusqty = @orderquantity;
						ELSEIF(@b_quantity < @orderquantity) THEN
							SET @b_minusqty = @b_quantity;
						ELSEIF(@b_quantity = @orderquantity) THEN
							SET @b_minusqty = @orderquantity;
						END IF;
						
						SET @orderquantity = @orderquantity - @b_minusqty;
						
						CALL spc_materialissuedetail_save(null, @materialissue_outid, @b_itemid, @b_itemname, @b_minusqty, @b_unitcost, (@b_minusqty * @b_unitcost), @b_itemunitid, @b_itembatch, p_companyid, p_userid, @materialissuedetail_outid);
						CALL spc_materialmovement_save(null, @b_itemid, @b_itembatch, 683, @materialissuedetail_outid, NOW(), @b_minusqty, @warehouseid, @warehousebinid, null, null, (@b_minusqty * @b_unitcost), p_companyid, p_userid, @movement_outid);
						 
                    END IF;
                    
                    SET @xz = @xz + 1; 
					
				END WHILE;

            
			SET  x = x + 1; 
		END WHILE;
	 
		DROP TEMPORARY TABLE tempitemsale;
        
	
END;



CREATE PROCEDURE `spc_salesdelivery_itemlivestock`(
	IN p_warehouseid INT,
    IN p_itemgroupid INT,
    IN p_companyid INT
)
BEGIN


SELECT 
        itemid, itemcode, itemgroupid, itemname, itemunitid, isgst, materialtypeid,
        hsnid, taxcategoryid, taxcategory, itembatch, stockquantity
    FROM (
    
			SELECT 
				itemid, itemcode, itemgroupid, itemname, itemunitid, isgst, materialtypeid,
				hsnid, taxcategoryid, taxcategory, itembatch,
				fnc_consumptionlivestock(itemid, p_warehouseid, p_companyid) as stockquantity
				FROM (
						SELECT 
								MM.itemid,
								I.itemcode,
								I.itemgroupid,
								I.itemname,
								I.itemunitid,
								I.isgst,
								I.materialtypeid,
								hsnid,
								I.taxcategoryid,
								REF1.refname as taxcategory,
								MM.itembatch
							FROM
								materialmovement MM
								LEFT JOIN item I ON MM.itemid = I.id
								LEFT JOIN `reference` REF1 ON I.taxcategoryid = I.id
								LEFT JOIN hsnmaster HM ON I.hsnid = HM.id
							WHERE
								MM.towarehouseid = p_warehouseid 
								AND I.itemgroupid = p_itemgroupid
								AND MM.companyid = p_companyid
			) 
			AS tblitemstockinner
        
	) 
    AS tblitemstockouter

    WHERE tblitemstockouter.stockquantity > 0;
        
END;



CREATE PROCEDURE `spc_salesdelivery_save`(
	IN p_id INT,
    IN p_salestypeid INT,
    IN p_salesorderid INT,
    IN p_salesdeliveryno VARCHAR(30),
    IN p_deliverydate DATE,
    IN p_deliverytoaddressid INT,
    IN p_deliverytoaddress VARCHAR(200),
    IN p_billtoaddressid INT,
    IN p_billtoaddress VARCHAR(200),
    IN p_warehouseid INT,
    IN p_warehouseaddress VARCHAR(200),
    IN p_remark  VARCHAR(500),
    IN p_salespersonid INT,
    IN p_statusid INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		SET @series = '';
		CALL spc_financialyeardocseries_newseries('SD', p_companyid, @series);
		-- select @series;
    
		INSERT INTO salesdelivery
				(`id`,
				`salestypeid`,
				`salesorderid`,
				`salesdeliveryno`,
				`deliverydate`,
				`deliverytoaddressid`,
				`deliverytoaddress`,
				`billtoaddressid`,
				`billtoaddress`,
				`warehouseid`,
				`warehouseaddress`,
				`remark`,
				`salespersonid`,
				`statusid`,
				`companyid`)
			VALUES 
				(	p_id,
					p_salestypeid,
					p_salesorderid,
					@series,
					p_deliverydate,
					p_deliverytoaddressid,
					p_deliverytoaddress,
					p_billtoaddressid,
					p_billtoaddress,
					p_warehouseid,
					p_warehouseaddress,
					p_remark,
					p_salespersonid,
					p_statusid,
					p_companyid);
		
            SET @action = 'INSERT';
            
            
		
	ELSE
    
		UPDATE salesdelivery
				SET 
					salestypeid = p_salestypeid,
					salesorderid= p_salesorderid,
					salesdeliveryno = p_salesdeliveryno,
					deliverydate = p_deliverydate,
					deliverytoaddressid = p_deliverytoaddressid,
					deliverytoaddress = p_deliverytoaddress,
					billtoaddressid = p_billtoaddressid,
					billtoaddress = p_billtoaddress,
					warehouseaddress = p_warehouseaddress,
					remark = p_remark,
					statusid = p_statusid,
					companyid = p_companyid,
					id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;

	SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- IF status is - 'Delivered'
    IF(p_statusid = 1622) THEN
		
        -- IF there is no material issue exists for sales delivery only...
		IF(!EXISTS(SELECT 1 FROM salesdelivery where materialissueid IS NOT NULL)) THEN
    
			SET @out_issueitemid = 0;
			CALL spc_salesdelivery_issueitems(out_id, p_userid, p_companyid, @out_issueitemid);
        
        END IF;
    
    END IF;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'salesdelivery', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_salesdelivery_search`(
	IN p_companyid INT
)
BEGIN
			SELECT
				SD.`id`,
				SD.`salestypeid`,
				SD.`salesorderid`,
                SO.salesorderno,
                PT.partyname,
				SD.`salesdeliveryno`,
                DATE_FORMAT(SD.deliverydate,'%d/%m/%Y') as deliverydate,
				SD.`deliverytoaddressid`,
				SD.`deliverytoaddress`,
				SD.`billtoaddressid`,
				SD.`billtoaddress`,
				SD.`warehouseid`,
				SD.`warehouseaddress`,
				SD.`remark`,
				SD.`salespersonid`,
				SD.`statusid`,
                REF1.refname as statusname,
				SD.`companyid`
                
			FROM
				salesdelivery SD
			LEFT JOIN salesorder SO ON SD.salesorderid = SO.id
            LEFT JOIN party PT ON PT.id = SO.customerid
            LEFT JOIN `reference` REF1 ON REF1.id = SD.statusid
			WHERE
				SD.companyid = p_companyid
			ORDER BY SD.id DESC;

END;



CREATE PROCEDURE `spc_salesdelivery_select`(
	IN p_id INT
)
BEGIN
			SELECT
				SD.`id`,
				SD.`salestypeid`,
				SD.`salesorderid`,
                SO.salesorderno,
                DATE_FORMAT(SO.salesorderdate,'%d/%m/%Y') as salesorderdate,
                PT.partyname,
                PT.contactperson,
				SD.`salesdeliveryno`,
                DATE_FORMAT(SD.deliverydate,'%d/%m/%Y') as deliverydate,
				SD.`deliverytoaddressid`,
				SD.`deliverytoaddress`,
				SD.`billtoaddressid`,
				SD.`billtoaddress`,
				SD.`warehouseid`,
				SD.`warehouseaddress`,
				SD.`remark`,
				SD.`salespersonid`,
				SD.`statusid`,
				SD.`companyid`
                
			FROM
				salesdelivery SD
			LEFT JOIN salesorder SO ON SD.salesorderid = SO.id
            LEFT JOIN party PT ON PT.id = SO.customerid
            LEFT JOIN `reference` REF1 ON REF1.id = SD.statusid
			WHERE
				SD.id = p_id;

END;



CREATE PROCEDURE `spc_salesinvoicedetail_invoicesearch`(	
    IN p_salesinvoiceid INT,
    IN p_companyid INT
)
BEGIN

		SELECT  
				SID.`id`,
				SID.`salesinvoiceid`,
				SID.`salesorderdetailid`,
				SID.`itemid`,
                WH.stateid,
				WB.warehouseid,
				ST.statecode,
				ST.statename,
				ST.isunionterritory,
                I.itemgroupid,
                taxcategoryid,
				REF1.refname as taxcategoryname,
				IG.groupname,
				I.itemname,
				I.itemcode,
				SID.`quantity`,
				SID.`isbird`,
				SID.`weight`,
                SID.iscalcweight,
				SID.`itemunit`,
				SID.`unitprice`,
				SID.`discount`,
				SID.`taxid`,
				SID.`taxpercent`,
				SID.`taxtypeid`,
				SID.`linetotal`,
				SID.`cgstid`,
				SID.`cgstpercent`,
				SID.`cgstamount`,
				SID.`sgstid`,
				SID.`sgstpercent`,
				SID.`sgstamount`,
				SID.`igstid`,
				SID.`igstpercent`,
				SID.`igstamount`,
				SID.`utgstid`,
				SID.`utgstpercent`,
				SID.`utgstamount`,
				SID.`companyid`
        FROM
			salesinvoicedetail SID
		LEFT JOIN salesinvoice SI ON SID.salesinvoiceid = SI.id
		LEFT JOIN item I ON SID.itemid = I.id
        LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
        LEFT JOIN `reference` REF1 ON I.taxcategoryid = REF1.id
        LEFT JOIN `warehousebin` WB ON WB.id =  (select warehousebinid FROM salesdeliverydetail WHERE FIND_IN_SET(id, SI.salesdeliveryids) LIMIT 1) 
        LEFT JOIN `warehouse` WH ON WH.id = WB.warehouseid
        LEFT JOIN `state` ST ON ST.id = WH.stateid
        
        WHERE 
        salesinvoiceid = p_salesinvoiceid AND SID.companyid = p_companyid;

	
END;



CREATE PROCEDURE `spc_salesinvoicedetail_save`(
	IN p_id INT,
	IN p_salesinvoiceid INT,
    IN p_salesorderdetailid INT,
    IN p_salesdeliverydetailid INT,
	IN p_itemid INT,
	IN p_quantity DECIMAL(12,3),
    IN p_isbird TINYINT,
	IN p_weight DECIMAL(12,3),
    IN p_iscalcweight TINYINT,
	IN p_itemunit INT,
	IN p_unitprice DECIMAL(12,3),
	IN p_discount DECIMAL(12,3),
	IN p_taxid INT,
	IN p_taxpercent  DECIMAL(5,2),
	IN p_taxtypeid INT,
	IN p_cgstid INT,
	IN p_cgstpercent  DECIMAL(5,2),
	IN p_cgstamount DECIMAL(12,3),
	IN p_sgstid INT,
	IN p_sgstpercent DECIMAL(5,2),
	IN p_sgstamount DECIMAL(12,3),
	IN p_igstid INT,
	IN p_igstpercent DECIMAL(5,2),
	IN p_igstamount DECIMAL(12,3),
	IN p_utgstid INT,
	IN p_utgstpercent DECIMAL(5,2),
	IN p_utgstamount DECIMAL(12,3),
    IN p_linetotal DECIMAL(12,3),
    IN p_companyid INT,
	IN p_userid INT,
	OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO salesinvoicedetail 
					   (`id`,
						`salesinvoiceid`,
                        `salesorderdetailid`,
                        `salesdeliverydetailid`,
						`itemid`,
						`quantity`,
                        `isbird`,
						`weight`,
                        `iscalcweight`,
						`itemunit`,
						`unitprice`,
						`discount`,
						`taxid`,
						`taxpercent`,
						`taxtypeid`,
						`cgstid`,
						`cgstpercent`,
						`cgstamount`,
						`sgstid`,
						`sgstpercent`,
						`sgstamount`,
						`igstid`,
						`igstpercent`,
						`igstamount`,
						`utgstid`,
						`utgstpercent`,
						`utgstamount`,
                        `linetotal`,
                        `companyid`)
				VALUES 
					(	p_id,
						p_salesinvoiceid,
						p_salesorderdetailid,
						p_salesdeliverydetailid,
						p_itemid,
						p_quantity,
                        p_isbird,
						p_weight,
                        p_iscalcweight,
						p_itemunit,
						p_unitprice,
						p_discount,
						p_taxid,
						p_taxpercent,
						p_taxtypeid,						
						p_cgstid,
						p_cgstpercent,
						p_cgstamount,
						p_sgstid,
						p_sgstpercent,
						p_sgstamount,
						p_igstid,
						p_igstpercent,
						p_igstamount,
						p_utgstid,
						p_utgstpercent,
						p_utgstamount,
                        p_linetotal,
                        p_companyid
						);
								
                          
		SET @action = 'INSERT';

	ELSE
    
		UPDATE salesinvoicedetail
			SET 			id = p_id,
							salesinvoiceid = p_salesinvoiceid,
                            salesorderdetailid = p_salesorderdetailid,
                            salesdeliverydetailid = p_salesdeliverydetailid,
							itemid = p_itemid,
							quantity = p_quantity,
                            isbird = p_isbird,
							weight = p_weight,
                            iscalcweight = p_iscalcweight,
							itemunit = p_itemunit,
							unitprice = p_unitprice,
							discount = p_discount,
							taxid = p_taxid,
							taxpercent = p_taxpercent,
							taxtypeid = p_taxtypeid,
							cgstid = p_cgstid,
							cgstpercent = p_cgstpercent,
							cgstamount =p_cgstamount,
							sgstid = p_sgstid,
							sgstpercent = p_sgstpercent,
							sgstamount = p_sgstamount,
							igstid = p_igstid,
							igstpercent = p_igstpercent,
							igstamount = p_igstamount,
							utgstid = p_utgstid,
							utgstpercent = p_utgstpercent,
							utgstamount = p_utgstamount,
							companyid = p_companyid,
							linetotal = p_linetotal,
							companyid = p_companyid,
							id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'salesorderdetail', out_id, @action, p_userid);



END;



CREATE PROCEDURE `spc_salesinvoicedetail_search`(
	IN p_salesdeliveryids VARCHAR(500),
    IN p_salesorderid INT,
    IN p_companyid INT
)
BEGIN


		SELECT tblSDel.itemid, tblSDel.quantity, tblSDel.isbird, tblSDel.weight, 
        tblSDel.warehousebinid,
		WH.stateid,
        WB.warehouseid,
        ST.statecode,
        ST.statename,
        ST.isunionterritory,
        I.itemgroupid,
        IG.groupname,
        I.itemname,
        I.itemcode,
        taxcategoryid,
        REF1.refname as taxcategoryname,
        SOD.`unitprice`,
		SOD.`discount`,
		SOD.`taxid`,
		SOD.`taxpercent`,
		SOD.`taxtypeid`,
		SOD.`linetotal`,
		SOD.`cgstid`,
		SOD.`cgstpercent`,
		SOD.`cgstamount`,
		SOD.`sgstid`,
		SOD.`sgstpercent`,
		SOD.`sgstamount`,
		SOD.`igstid`,
		SOD.`igstpercent`,
		SOD.`igstamount`,
		SOD.`utgstid`,
		SOD.`utgstpercent`,
		SOD.`utgstamount`
        FROM
		(
			SELECT
				itemid,
				sum(quantity) as quantity,
				isbird,
				sum(weight) as weight,
                warehousebinid
			FROM
				salesdeliverydetail
			WHERE
				FIND_IN_SET(salesdeliveryid, p_salesdeliveryids)
			GROUP BY itemid, isbird, warehousebinid
		) 
		AS tblSDel
        
		INNER JOIN salesorderdetail SOD ON SOD.itemid = tblSDel.itemid
        LEFT JOIN item I ON I.id = SOD.itemid
        LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
		LEFT JOIN `reference` REF1 ON I.taxcategoryid = REF1.id
        LEFT JOIN `warehousebin` WB ON WB.id = tblSDel.warehousebinid
        LEFT JOIN `warehouse` WH ON WH.id = WB.warehouseid
        LEFT JOIN `state` ST ON ST.id = WH.stateid
        WHERE 
        salesorderid = p_salesorderid AND SOD.companyid = p_companyid;

	
END;



CREATE PROCEDURE `spc_salesinvoicefreight_save`(
	IN p_id INT,
	IN p_salesinvoiceid INT,
    IN p_freightid INT,
    IN p_freightname VARCHAR(200),
	IN p_amount DECIMAL(12,3),
    IN p_taxid INT,
	IN p_taxpercent  DECIMAL(5,2),
	IN p_taxtypeid INT,
	IN p_cgstid INT,
	IN p_cgstpercent  DECIMAL(5,2),
	IN p_cgstamount DECIMAL(12,3),
	IN p_sgstid INT,
	IN p_sgstpercent DECIMAL(5,2),
	IN p_sgstamount DECIMAL(12,3),
	IN p_igstid INT,
	IN p_igstpercent DECIMAL(5,2),
	IN p_igstamount DECIMAL(12,3),
	IN p_utgstid INT,
	IN p_utgstpercent DECIMAL(5,2),
	IN p_utgstamount DECIMAL(12,3),    
    IN p_companyid INT,
	IN p_userid INT,
	OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO salesinvoicefreight
					   (`id`,
						`salesinvoiceid`,
                        `freightid`,
                        `freightname`,
						`amount`,
						`taxid`,
						`taxpercent`,
						`taxtypeid`,
						`cgstid`,
						`cgstpercent`,
						`cgstamount`,
						`sgstid`,
						`sgstpercent`,
						`sgstamount`,
						`igstid`,
						`igstpercent`,
						`igstamount`,
						`utgstid`,
						`utgstpercent`,
						`utgstamount`,
                        `companyid`)
				VALUES 
					(	p_id,
						p_salesinvoiceid,
						p_freightid,
						p_freightname,
						p_amount,
						p_taxid,
						p_taxpercent,
						p_taxtypeid,						
						p_cgstid,
						p_cgstpercent,
						p_cgstamount,
						p_sgstid,
						p_sgstpercent,
						p_sgstamount,
						p_igstid,
						p_igstpercent,
						p_igstamount,
						p_utgstid,
						p_utgstpercent,
						p_utgstamount,                        
                        p_companyid
						);
								
                          
		SET @action = 'INSERT';

	ELSE
    
		UPDATE salesinvoicefreight
			SET 			
							salesinvoiceid = p_salesinvoiceid,
                            freightid = p_freightid,
                            freightname = p_freightname,
							amount = p_amount,
							taxid = p_taxid,
							taxpercent = p_taxpercent,
							taxtypeid = p_taxtypeid,
							cgstid = p_cgstid,
							cgstpercent = p_cgstpercent,
							cgstamount =p_cgstamount,
							sgstid = p_sgstid,
							sgstpercent = p_sgstpercent,
							sgstamount = p_sgstamount,
							igstid = p_igstid,
							igstpercent = p_igstpercent,
							igstamount = p_igstamount,
							utgstid = p_utgstid,
							utgstpercent = p_utgstpercent,
							utgstamount = p_utgstamount,
							companyid = p_companyid,
							id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'salesinvoicefreight', out_id, @action, p_userid);



END;



CREATE PROCEDURE `spc_salesinvoicefreight_search`(	
    IN p_salesinvoiceid INT,
    IN p_companyid INT
)
BEGIN

		SELECT  
				SIF.`id`,
				SIF.`salesinvoiceid`,
				SIF.`freightid`,
				SIF.`freightname`,
				SIF.`amount`,
				SIF.`taxid`,
				SIF.`taxpercent`,
				SIF.`taxtypeid`,
				SIF.`cgstid`,
				SIF.`cgstpercent`,
				SIF.`cgstamount`,
				SIF.`sgstid`,
				SIF.`sgstpercent`,
				SIF.`sgstamount`,
				SIF.`igstid`,
				SIF.`igstpercent`,
				SIF.`igstamount`,
				SIF.`utgstid`,
				SIF.`utgstpercent`,
				SIF.`utgstamount`,
				SIF.`companyid`
        FROM
			salesinvoicefreight SIF
        
        WHERE 
			salesinvoiceid = p_salesinvoiceid AND SIF.companyid = p_companyid;

	
END;



CREATE PROCEDURE `spc_salesinvoice_save`(
		IN p_id INT,
        IN p_salestypeid int,
        IN p_salesinvoiceno varchar(30),
		IN p_salesorderid INT,
        IN p_salesdeliveryids varchar(500),
        IN p_customerid INT,
        IN p_contactperson varchar(100),
		IN p_salesinvoicedate DATE,
		IN p_referenceno varchar(30),
		IN p_referredby INT,
		IN p_referencedate DATE,
        IN p_transactiontypeid INT,
        IN p_deliverydate DATE,
        IN p_deliverytoaddressid INT,
        IN p_deliverytoaddress VARCHAR(200),
		IN p_billtoaddressid INT,
        IN p_billtoaddress VARCHAR(200),
        IN p_warehouseid INT,
        IN p_warehouseaddress VARCHAR(200),
        IN p_subtotal decimal(12,3),
        IN p_discount decimal(12,3),
        IN p_roundoff decimal(12,3),
        IN p_grandtotal decimal(12,3),
        IN p_remark varchar(500),
        IN p_subject varchar(200),
        IN p_salespersonid INT,
        IN p_statusid INT,
        IN p_companyid INT,
		IN p_userid INT,
		OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO salesinvoice
					   (`id`,
						`salestypeid`,
                        `salesinvoiceno`,
						`salesorderid`,
                        `salesdeliveryids`,
						`customerid`,
                        `contactperson`,
						`salesinvoicedate`,
						`referenceno`,
						`referredby`,
						`referencedate`,
                        `transactiontypeid`,
						`deliverydate`,
						`deliverytoaddressid`,
                        `deliverytoaddress`,
                        `billtoaddressid`,
                        `billtoaddress`,
                        `warehouseid`,
                        `warehouseaddress`,
						`subtotal`,
                        `pendingtotal`,
						`discount`,
						`roundoff`,
						`grandtotal`,
						`remark`,
						`subject`,
						`salespersonid`,
						`statusid`,
                        `companyid`)
				VALUES 
					(	p_id,
						p_salestypeid,
                        p_salesinvoiceno,
						p_salesorderid,
                        p_salesdeliveryids,
						p_customerid,
                        p_contactperson,
						p_salesinvoicedate,
						p_referenceno,
						p_referredby,
						p_referencedate,
                        p_transactiontypeid,
						p_deliverydate,
						p_deliverytoaddressid,
                        p_deliverytoaddress,
                        p_billtoaddressid,
                        p_billtoaddress,
                        p_warehouseid,
                        p_warehouseaddress,
						p_subtotal,
                        p_subtotal,
						p_discount,
						p_roundoff,
						p_grandtotal,
						p_remark,
						p_subject,
						p_salespersonid,
						p_statusid,
                        p_companyid);
								
                          
		SET @action = 'INSERT';

	ELSE
    
		UPDATE salesinvoice
			SET 		id = p_id,
						salestypeid = p_salestypeid,
                        salesinvoiceno = p_salesinvoiceno,
						salesorderid = p_salesorderid,
                        salesdeliveryids = p_salesdeliveryids,
						customerid = p_customerid,
                        contactperson = p_contactperson,
						salesinvoicedate = p_salesinvoicedate,
						referenceno = p_referenceno,
						referredby = p_referredby,
						referencedate = p_referencedate,
                        transactiontypeid = p_transactiontypeid,
						deliverydate = p_deliverydate,
						deliverytoaddressid = p_deliverytoaddressid,
                        deliverytoaddress = p_deliverytoaddress,
                        billtoaddressid = p_billtoaddressid,
                        billtoaddress = p_billtoaddress,
                        warehouseid = p_warehouseid,
                        warehouseaddress = p_warehouseaddress,
						subtotal = p_subtotal,
					    discount = p_discount,
						roundoff = p_roundoff,
						grandtotal = p_grandtotal,
						remark = p_remark,
						`subject` = p_subject,
						salespersonid = p_salespersonid,
						statusid = p_statusid,
                        companyid = p_companyid,
						id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'salesinvoice', out_id, @action, p_userid);



END;



CREATE PROCEDURE `spc_salesinvoice_search`(
	IN p_companyid INT
)
BEGIN

		SELECT
                
						SI.`id`,
						SI.`salestypeid`,
                        SI.`salesinvoiceno`,
						SI.`salesorderid`,
                        SO.`salesorderno`,
                        SI.`salesdeliveryids`,
						SI.`customerid`,
                        SI.`contactperson`,
                        P.partyname,
                        DATE_FORMAT(SI.salesinvoicedate,'%d/%m/%Y') as salesinvoicedate,
						SI.`referenceno`,
						SI.`referredby`,
                        DATE_FORMAT(SI.referencedate,'%d/%m/%Y') as referencedate,
                        DATE_FORMAT(SI.deliverydate,'%d/%m/%Y') as deliverydate,
						SI.`deliverytoaddressid`,
						SI.`transactiontypeid`,
						SI.`billtoaddressid`,
						SI.`warehouseid`,
						SI.`subtotal`,
						SI.`discount`,
						SI.`roundoff`,
						SI.`grandtotal`,
						SI.`remark`,
						SI.`subject`,
						SI.`salespersonid`,
						SI.`statusid`,
                        REF1.refname as statusname,
						SI.`companyid`
                        
				FROM
					salesinvoice SI
				LEFT JOIN salesorder SO ON SI.salesorderid = SO.id
				LEFT JOIN party P ON SI.customerid = P.id
                LEFT JOIN `reference` REF1 ON SI.statusid = REF1.id
				WHERE
					SI.companyid = p_companyid
				
                ORDER BY SI.`id` DESC;

END;



CREATE PROCEDURE `spc_salesinvoice_select`(
	IN p_id INT
)
BEGIN

		SELECT
                
						SI.`id`,
						SI.`salestypeid`,
                        SI.`salesinvoiceno`,
						SI.`salesorderid`,
                        SO.`salesorderno`,
                        DATE_FORMAT(SO.salesorderdate,'%d/%m/%Y') as salesorderdate,
                        SI.`salesdeliveryids`,
						SI.`customerid`,
                        SI.`contactperson`,
                        P.partyname,
                        DATE_FORMAT(SI.salesinvoicedate,'%d/%m/%Y') as salesinvoicedate,
						SI.`referenceno`,
						SI.`referredby`,
                        DATE_FORMAT(SI.referencedate,'%d/%m/%Y') as referencedate,
                        DATE_FORMAT(SI.deliverydate,'%d/%m/%Y') as deliverydate,
						SI.`deliverytoaddressid`,
                        SI.`deliverytoaddress`,
                        ST1.statecode as deliverytostatecode,
                        ST1.isunionterritory as deliverytoisunionterritory,
						SI.`transactiontypeid`,
						SI.`billtoaddressid`,
                        SI.`billtoaddress`,
                        ST2.statecode as billtostatecode,
                        ST2.isunionterritory as billtoisunionterritory,
						SI.`warehouseid`,
                        SI.`warehouseaddress`,
                        ST3.statecode as warehousestatecode,
                        ST3.isunionterritory as warehouseisunionterritory,
						SI.`subtotal`,
						SI.`discount`,
						SI.`roundoff`,
						SI.`grandtotal`,
						SI.`remark`,
						SI.`subject`,
						SI.`salespersonid`,
						SI.`statusid`,
                        REF1.refname as statusname,
						SI.`companyid`
                        
				FROM
					salesinvoice SI
				LEFT JOIN salesorder SO ON SI.salesorderid = SO.id
				LEFT JOIN party P ON SI.customerid = P.id
                LEFT JOIN `reference` REF1 ON SI.statusid = REF1.id
                LEFT JOIN `partyaddress` PA1 ON SI.deliverytoaddressid = PA1.id
                LEFT JOIN `state` ST1 ON PA1.stateid = ST1.id
                LEFT JOIN `partyaddress` PA2 ON SI.billtoaddressid = PA2.id
                LEFT JOIN `state` ST2 ON PA2.stateid = ST2.id
                LEFT JOIN `warehouse` WH1 ON SI.warehouseid = WH1.id
                LEFT JOIN `state` ST3 ON WH1.stateid = ST3.id
                
				WHERE
					SI.id = p_id;

END;



CREATE PROCEDURE `spc_salesorderdetail_deliverysearch`(
	IN p_salesorderid INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
        SOD.`id` as salesorderdetailid,
		SOD.`salesorderid`,
		SOD.`itemid`,
        I.itemname,
        I.itemcode,
        taxcategoryid,
        REF1.refname as taxcategoryname,
        SOD.`quantity` - IFNULL(fnc_salesorder_itemdeliveredqty(SOD.`itemid`, SOD.`id`), 0) as quantity,
        SOD.`weight` - IFNULL(fnc_salesorder_itemdeliveredweight(SOD.`itemid`, SOD.`id`), 0) as weight,
        SOD.`isbird`,
		SOD.`itemunit`,
		SOD.`companyid`
	FROM
		salesorderdetail SOD
	LEFT JOIN item I ON I.id = SOD.itemid
    LEFT JOIN `reference` REF1 ON I.taxcategoryid = REF1.id
	WHERE
		salesorderid = p_salesorderid and SOD.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_salesorderdetail_save`(
	IN p_id INT,
	IN p_salesorderid INT,
	IN p_itemid INT,
	IN p_quantity DECIMAL(12,3),
    IN p_isbird TINYINT,
	IN p_weight DECIMAL(12,3),
    IN p_iscalcweight TINYINT,
	IN p_itemunit INT,
	IN p_unitprice DECIMAL(12,3),
	IN p_discount DECIMAL(12,3),
	IN p_taxid INT,
	IN p_taxpercent  DECIMAL(5,2),
	IN p_taxtypeid INT,
	IN p_cgstid INT,
	IN p_cgstpercent  DECIMAL(5,2),
	IN p_cgstamount DECIMAL(12,3),
	IN p_sgstid INT,
	IN p_sgstpercent DECIMAL(5,2),
	IN p_sgstamount DECIMAL(12,3),
	IN p_igstid INT,
	IN p_igstpercent DECIMAL(5,2),
	IN p_igstamount DECIMAL(12,3),
	IN p_utgstid INT,
	IN p_utgstpercent DECIMAL(5,2),
	IN p_utgstamount DECIMAL(12,3),
    IN p_linetotal DECIMAL(12,3),
    IN p_companyid INT,
	IN p_userid INT,
	OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO salesorderdetail 
					   (`id`,
						`salesorderid`,
						`itemid`,
						`quantity`,
                        `isbird`,
						`weight`,
                        `iscalcweight`,
						`itemunit`,
						`unitprice`,
						`discount`,
						`taxid`,
						`taxpercent`,
						`taxtypeid`,
						`cgstid`,
						`cgstpercent`,
						`cgstamount`,
						`sgstid`,
						`sgstpercent`,
						`sgstamount`,
						`igstid`,
						`igstpercent`,
						`igstamount`,
						`utgstid`,
						`utgstpercent`,
						`utgstamount`,
                        `linetotal`,
                        `companyid`)
				VALUES 
					(	p_id,
						p_salesorderid,
						p_itemid,
						p_quantity,
                        p_isbird,
						p_weight,
                        p_iscalcweight,
						p_itemunit,
						p_unitprice,
						p_discount,
						p_taxid,
						p_taxpercent,
						p_taxtypeid,						
						p_cgstid,
						p_cgstpercent,
						p_cgstamount,
						p_sgstid,
						p_sgstpercent,
						p_sgstamount,
						p_igstid,
						p_igstpercent,
						p_igstamount,
						p_utgstid,
						p_utgstpercent,
						p_utgstamount,
                        p_linetotal,
                        p_companyid
						);
								
                          
		SET @action = 'INSERT';

	ELSE
    
		UPDATE salesorderdetail
			SET 			id = p_id,
							salesorderid = p_salesorderid,
							itemid = p_itemid,
							quantity = p_quantity,
                            isbird = p_isbird,
							weight = p_weight,
                            iscalcweight = p_iscalcweight,
							itemunit = p_itemunit,
							unitprice = p_unitprice,
							discount = p_discount,
							taxid = p_taxid,
							taxpercent = p_taxpercent,
							taxtypeid = p_taxtypeid,
							cgstid = p_cgstid,
							cgstpercent = p_cgstpercent,
							cgstamount =p_cgstamount,
							sgstid = p_sgstid,
							sgstpercent = p_sgstpercent,
							sgstamount = p_sgstamount,
							igstid = p_igstid,
							igstpercent = p_igstpercent,
							igstamount = p_igstamount,
							utgstid = p_utgstid,
							utgstpercent = p_utgstpercent,
							utgstamount = p_utgstamount,
							companyid = p_companyid,
							linetotal = p_linetotal,
							companyid = p_companyid,
							id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'salesorderdetail', out_id, @action, p_userid);



END;



CREATE PROCEDURE `spc_salesorderdetail_search`(
	IN p_salesorderid INT,
    IN p_companyid INT
)
BEGIN

	SELECT 
		SOD.`id`,
        SOD.`id` as salesorderdetailid,
		SOD.`salesorderid`,
		SOD.`itemid`,
        I.itemname,
        I.itemcode,
        I.itemgroupid,
        IG.groupname,
        taxcategoryid,
        REF1.refname as taxcategoryname,
		`quantity`,
        `isbird`,
		`weight`,
        `iscalcweight`,
		SOD.`itemunit`,
		`unitprice`,
		`discount`,
		`taxid`,
		`taxpercent`,
		`taxtypeid`,
		`linetotal`,
		`cgstid`,
		`cgstpercent`,
		`cgstamount`,
		`sgstid`,
		`sgstpercent`,
		`sgstamount`,
		`igstid`,
		`igstpercent`,
		`igstamount`,
		`utgstid`,
		`utgstpercent`,
		`utgstamount`,
		SOD.`companyid`
	FROM
		salesorderdetail SOD
	LEFT JOIN item I ON I.id = SOD.itemid
    LEFT JOIN itemgroup IG ON I.itemgroupid = IG.id
    LEFT JOIN `reference` REF1 ON I.taxcategoryid = REF1.id
	WHERE
		salesorderid = p_salesorderid and SOD.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_salesorder_deliverysearch`(
	IN p_salestypeid INT,
	IN p_companyid INT
)
BEGIN


		SELECT 
				id, salestypeid, salesorderno, customerid, contactperson,
				partyname, salesorderdate, deliverydate,
				hasorderquantity, deliverytoaddressid, deliverytoaddress,
				billtoaddressid, billtoaddress, warehouseid, warehouseaddress,
				grandtotal, statusid, statusname, companyid
                
			FROM
            (
					SELECT
                
						BSO.`id`,
						BSO.`salestypeid`,
						BSO.`salesorderno`,
						BSO.`customerid`,
                        BSO.`contactperson`,
                        P.partyname,
                        DATE_FORMAT(BSO.salesorderdate,'%d/%m/%Y') as salesorderdate,						
                        DATE_FORMAT(BSO.deliverydate,'%d/%m/%Y') as deliverydate,
                        fnc_salesorder_hasorderquantity(BSO.`id`, BSO.`companyid`) AS hasorderquantity,
                        BSO.`deliverytoaddressid`,
                        BSO.`deliverytoaddress`,
                        BSO.`billtoaddressid`,
                        BSO.`billtoaddress`,
                        BSO.`warehouseid`,
                        BSO.`warehouseaddress`,
						BSO.`grandtotal`,
						BSO.`statusid`,
                        REF1.refname as statusname,
						BSO.`companyid`
                        
					FROM
						salesorder BSO
					LEFT JOIN party P ON BSO.customerid = P.id
					LEFT JOIN `reference` REF1 ON BSO.statusid = REF1.id
					-- LEFT JOIN salesdelivery SD ON SD.salesorderid = BSO.id
					WHERE
						(p_salestypeid IS NULL OR p_salestypeid = BSO.`salestypeid`) 
						-- AND SD.id is null
						AND BSO.companyid = p_companyid AND FIND_IN_SET(BSO.statusid, '1362,1363')
					
                    ORDER BY BSO.id DESC
			) 
            AS tmpdeliverysearch
            WHERE hasorderquantity > 0;

END;



CREATE PROCEDURE `spc_salesorder_invoicesearch`(
	IN p_salestypeid INT,
	IN p_companyid INT
)
BEGIN


			SELECT 
					id, salestypeid, salesorderno, customerid, contactperson,
					referenceno, transactiontypeid, partyname,
					salesorderdate, deliverydate, deliverytoaddressid, statecode, statename,
					isunionterritory, deliverytoaddress, billtoaddressid, billtoaddress,
					warehouseid, warehouseaddress, grandtotal, statusid, statusname,
					hasdelivery, companyid
			FROM (

					SELECT
                
						BSO.`id`,
						BSO.`salestypeid`,
						BSO.`salesorderno`,
						BSO.`customerid`,
                        BSO.`contactperson`,
                        BSO.`referenceno`,
                        BSO.`transactiontypeid`,
                        P.partyname,
                        DATE_FORMAT(BSO.salesorderdate,'%d/%m/%Y') as salesorderdate,						
                        DATE_FORMAT(BSO.deliverydate,'%d/%m/%Y') as deliverydate,
                        BSO.`deliverytoaddressid`,
                        ST.statecode,
                        ST.statename,
                        ST.isunionterritory,
                        BSO.`deliverytoaddress`,
                        BSO.`billtoaddressid`,
                        BSO.`billtoaddress`,
                        BSO.`warehouseid`,
                        BSO.`warehouseaddress`,
						BSO.`grandtotal`,
						BSO.`statusid`,
                        REF1.refname as statusname,
                        fnc_salesorder_hasdeliveryforinvoice(BSO.`id`, BSO.`companyid`) as hasdelivery,
						BSO.`companyid`
                        
				FROM
					salesorder BSO
				
				LEFT JOIN party P ON BSO.customerid = P.id
                LEFT JOIN `reference` REF1 ON BSO.statusid = REF1.id
                LEFT JOIN `partyaddress` PA ON BSO.deliverytoaddressid = PA.id
                LEFT JOIN `state` ST ON PA.stateid = ST.id
				WHERE
					(p_salestypeid IS NULL OR p_salestypeid = BSO.`salestypeid`) 
					AND BSO.companyid = p_companyid -- AND FIND_IN_SET(BSO.statusid, '1363')
                    AND EXISTS(SELECT 1 FROM salesdelivery SD WHERE SD.salesorderid = BSO.id AND FIND_IN_SET(SD.statusid, '1622'))
				ORDER BY BSO.id DESC
					
		) 
		AS tmpinvsearch
		WHERE hasdelivery > 0;
END;



CREATE PROCEDURE `spc_salesorder_save`(
		IN p_id INT,
        IN p_salestypeid int,
		IN p_salesorderno varchar(30),
        IN p_customerid INT,
        IN p_contactperson varchar(100),
		IN p_salesorderdate DATE,
		IN p_referenceno varchar(30),
		IN p_referredby INT,
		IN p_referencedate DATE,
        IN p_transactiontypeid INT,
        IN p_deliverydate DATE,
        IN p_deliverytoaddressid INT,
        IN p_deliverytoaddress VARCHAR(200),
		IN p_billtoaddressid INT,
        IN p_billtoaddress VARCHAR(200),
        IN p_warehouseid INT,
        IN p_warehouseaddress VARCHAR(200),
        IN p_subtotal decimal(12,3),
        IN p_discount decimal(12,3),
        IN p_roundoff decimal(12,3),
        IN p_grandtotal decimal(12,3),
        IN p_remark varchar(500),
        IN p_subject varchar(200),
        IN p_salespersonid INT,
        IN p_statusid INT,
        IN p_companyid INT,
		IN p_userid INT,
		OUT out_id INT
)
BEGIN

	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO salesorder
					   (`id`,
						`salestypeid`,
						`salesorderno`,
						`customerid`,
                        `contactperson`,
						`salesorderdate`,
						`referenceno`,
						`referredby`,
						`referencedate`,
                        `transactiontypeid`,
						`deliverydate`,
						`deliverytoaddressid`,
                        `deliverytoaddress`,
                        `billtoaddressid`,
                        `billtoaddress`,
                        `warehouseid`,
                        `warehouseaddress`,
						`subtotal`,
						`discount`,
						`roundoff`,
						`grandtotal`,
						`remark`,
						`subject`,
						`salespersonid`,
						`statusid`,
                        `companyid`)
				VALUES 
					(	p_id,
						p_salestypeid,
						p_salesorderno,                        
						p_customerid,
                        p_contactperson,
						p_salesorderdate,
						p_referenceno,
						p_referredby,
						p_referencedate,
                        p_transactiontypeid,
						p_deliverydate,
						p_deliverytoaddressid,
                        p_deliverytoaddress,
                        p_billtoaddressid,
                        p_billtoaddress,
                        p_warehouseid,
                        p_warehouseaddress,
						p_subtotal,
						p_discount,
						p_roundoff,
						p_grandtotal,
						p_remark,
						p_subject,
						p_salespersonid,
						p_statusid,
                        p_companyid);
								
                          
		SET @action = 'INSERT';

	ELSE
    
		UPDATE salesorder
			SET 		id = p_id,
						salestypeid = p_salestypeid,
						salesorderno = p_salesorderno,
						customerid = p_customerid,
                        contactperson = p_contactperson,
						salesorderdate = p_salesorderdate,
						referenceno = p_referenceno,
						referredby = p_referredby,
						referencedate = p_referencedate,
                        transactiontypeid = p_transactiontypeid,
						deliverydate = p_deliverydate,
						deliverytoaddressid = p_deliverytoaddressid,
                        deliverytoaddress = p_deliverytoaddress,
                        billtoaddressid = p_billtoaddressid,
                        billtoaddress = p_billtoaddress,
                        warehouseid = p_warehouseid,
                        warehouseaddress = p_warehouseaddress,
						subtotal = p_subtotal,
					    discount = p_discount,
						roundoff = p_roundoff,
						grandtotal = p_grandtotal,
						remark = p_remark,
						`subject` = p_subject,
						salespersonid = p_salespersonid,
						statusid = p_statusid,
                        companyid = p_companyid,
						id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
				AND companyid = p_companyid;
                
                SET @action = 'UPDATE';
	END IF;
    SELECT LAST_INSERT_ID() INTO out_id; 

	 -- record log
   CALL spc_commonlog_save(p_companyid, 'salesorder', out_id, @action, p_userid);



END;



CREATE PROCEDURE `spc_salesorder_search`(
	IN p_companyid INT
)
BEGIN

		SELECT
                
						BSO.`id`,
						BSO.`salestypeid`,
						BSO.`salesorderno`,
						BSO.`customerid`,
                        BSO.`contactperson`,
                        P.partyname,
                        DATE_FORMAT(BSO.salesorderdate,'%d/%m/%Y') as salesorderdate,
						BSO.`referenceno`,
						BSO.`referredby`,
                        DATE_FORMAT(BSO.referencedate,'%d/%m/%Y') as referencedate,
                        DATE_FORMAT(BSO.deliverydate,'%d/%m/%Y') as deliverydate,
						BSO.`deliverytoaddressid`,
						BSO.`transactiontypeid`,
						BSO.`billtoaddressid`,
						BSO.`warehouseid`,
						BSO.`subtotal`,
						BSO.`discount`,
						BSO.`roundoff`,
						BSO.`grandtotal`,
						BSO.`remark`,
						BSO.`subject`,
						BSO.`salespersonid`,
						BSO.`statusid`,
                        REF1.refname as statusname,
						BSO.`companyid`
                        
				FROM
					salesorder BSO
				LEFT JOIN party P ON BSO.customerid = P.id
                LEFT JOIN `reference` REF1 ON BSO.statusid = REF1.id
				WHERE
					BSO.companyid = p_companyid
				ORDER BY BSO.id DESC;

END;



CREATE PROCEDURE `spc_salesorder_select`(
	IN p_id INT
)
BEGIN

		SELECT
                
						BSO.`id`,
						BSO.`salestypeid`,
						BSO.`salesorderno`,
						BSO.`customerid`,
                        BSO.`contactperson`,
                        P.partyname,
                        DATE_FORMAT(BSO.salesorderdate,'%d/%m/%Y') as salesorderdate,
						BSO.`referenceno`,
						BSO.`referredby`,
                        DATE_FORMAT(BSO.referencedate,'%d/%m/%Y') as referencedate,
                        DATE_FORMAT(BSO.deliverydate,'%d/%m/%Y') as deliverydate,
						BSO.`deliverytoaddressid`,
                        BSO.`deliverytoaddress`,
                        ST1.statecode as deliverytostatecode,
                        ST1.isunionterritory as deliverytoisunionterritory,
						BSO.`transactiontypeid`,
						BSO.`billtoaddressid`,
                        BSO.`billtoaddress`,
                        ST2.statecode as billtostatecode,
                        ST2.isunionterritory as billtoisunionterritory,
						BSO.`warehouseid`,
                        BSO.`warehouseaddress`,
                        ST3.statecode as warehousestatecode,
                        ST3.isunionterritory as warehouseisunionterritory,
						BSO.`subtotal`,
						BSO.`discount`,
						BSO.`roundoff`,
						BSO.`grandtotal`,
						BSO.`remark`,
						BSO.`subject`,
						BSO.`salespersonid`,
						BSO.`statusid`,
                        REF1.refname as statusname,
						BSO.`companyid`
                        
				FROM
					salesorder BSO
				LEFT JOIN party P ON BSO.customerid = P.id
                
                LEFT JOIN `reference` REF1 ON BSO.statusid = REF1.id
                LEFT JOIN `partyaddress` PA1 ON BSO.deliverytoaddressid = PA1.id
                LEFT JOIN `state` ST1 ON PA1.stateid = ST1.id
                LEFT JOIN `partyaddress` PA2 ON BSO.billtoaddressid = PA2.id
                LEFT JOIN `state` ST2 ON PA2.stateid = ST2.id
                LEFT JOIN `warehouse` WH1 ON BSO.warehouseid = WH1.id
                LEFT JOIN `state` ST3 ON WH1.stateid = ST3.id
                
				WHERE
					BSO.id = p_id;

END;



CREATE PROCEDURE `spc_savebreederbatchopening_je`(
	IN p_breederbatchopeningid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempbreederopening;
    
    IF((SELECT statusid FROM breederbatchopening WHERE id = p_breederbatchopeningid) = 1602) THEN

		BEGIN
		
			SET @WIPledgerid = null;
			SELECT WIPledgerid
			INTO @WIPledgerid
			FROM breedersetting LIMIT 1;
		   
			set @branch = null;
			SELECT L.branchid INTO @branch 
			FROM location L
			LEFT JOIN breederbatchlocationwiseopeningdetail BBLO ON BBLO.breederbatchopeningid = p_breederbatchopeningid
			WHERE BBLO.locationid = L.id;
            
            SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				(SELECT livebatchdate FROM breederbatchopening WHERE id = p_breederbatchopeningid),
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                341,
				NULL,
				'Breeder batch opening JE',
				NULL,
				NULL,
				NULL,
				p_breederbatchopeningid,
				'Breeder batch opening JE',
				p_companyid,
                p_userid,
                @jeid
           );
           
           SET @row_number = 0;
   
			CREATE TEMPORARY TABLE tempbreederopening
			
            SELECT (@row_number:=@row_number + 1) AS num, WIPaccountbalance from (
				SELECT 
					WIPaccountbalance
				FROM breederbatchfinancialopeningdetail 
                where breederbatchopeningid = p_breederbatchopeningid
            ) 
            as tblfinancedetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempbreederopening INTO n;
				
					WHILE i<n DO 
					
						SET @WIPaccountbalance = null;
						select WIPaccountbalance into @WIPaccountbalance from tempbreederopening where num = i+1;
                    
						-- insert JE detail
                        
                        -- Credit to Good receipt but not Invoice - Ledger
                         
                        /* SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@GoodsWithoutInvoiceledgerid,
							NULL,
							NULL,
							0,
							@taxcalculatedval,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'GRPO JE',
							p_companyid,
							p_userid,
							@jedetailid1
						 );
                        */
                        -- Debit to WIP Bird - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@WIPledgerid,
                            0,
                            (SELECT breederbatchid FROM breederbatchopening WHERE id = p_breederbatchopeningid),
							NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							@WIPaccountbalance,
							0,
							NULL,
							NULL,
							NULL,
							NULL,
							NULL,
							'Breeder batch opening JE',
							p_companyid,
							p_userid,
							@jedetailid
						 );
                        
						SET i = i + 1;
					END WHILE;
				End;
			
		END;
        
	END IF;

END;



CREATE PROCEDURE `spc_savebreederbatchtransfer_je`(
	IN p_breederbatchtransferid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempbreederbatchtransfer;
    
    -- Journal entry detail for WIP bird
	SET @WIPledgerid = null;
    SET @defaultmalechickid = null;
   SET @defaultfemalechickid = null;
   SET @defaultmalechickcost = null;
   SET @defaultfemalechickcost = null;
   
   SELECT WIPledgerid, defaultmalechickid, defaultfemalechickid, defaultmalechickcost, defaultfemalechickcost
   INTO @WIPledgerid, @defaultmalechickid, @defaultfemalechickid, @defaultmalechickcost, @defaultfemalechickcost
   FROM breedersetting LIMIT 1;
    
    SET @jeid = null;
    CALL spc_journalentry_save(
		NULL,
		NULL,
		1300,
		NULL,
		(SELECT transferdate FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
		NULL,
		@branch,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		341,
		NULL,
		'Breeder batch opening JE',
		NULL,
		NULL,
		NULL,
		p_breederbatchopeningid,
		'Breeder batch opening JE',
		p_companyid,
		p_userid,
		@jeid
    );
    
    SET @row_number = 0;
   
	CREATE TEMPORARY TABLE tempbreederbatchtransfer
	
	SELECT (@row_number:=@row_number + 1) AS num, quantity, toshedid, itemid from (
		SELECT 
			quantity,
            toshedid,
            itemid
		FROM breederbatchtransferdetail 
		where breederbatchtransferid = p_breederbatchtransferid
	) 
	as tblbatchtransferdetail;
    
    BEGIN
		DECLARE n INT DEFAULT 0;
		DECLARE i INT DEFAULT 0;
		SELECT COUNT(*) FROM tempbreederbatchtransfer INTO n;
	
		WHILE i<n DO 
		
            SET @quantity = null;
            SET @toshedid = null;
            SET @itemid = null;
            
			select quantity, toshedid, itemid into @quantity, @toshedid, @itemid from tempbreederbatchtransfer where num = i+1;
		
			-- insert JE detail
            
			 -- Credit to WIP Bird on fromshedid - Ledger
                
			 -- male chick
             IF(@itemid = @defaultmalechickid) THEN
				 SET @jedetailid1 = null;
				 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
                                0,
                                (SELECT breederbatchid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @defaultmalechickcost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder batch transfer',
								p_companyid,
								p_userid,
								@jedetailid1
				 );
				 
				 -- Debit to WIP Bird on toshedid - Ledger
				
				 SET @jedetailid = null;
				 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
                                0,
                                (SELECT breederbatchid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @defaultmalechickcost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder batch transfer',
								p_companyid,
								p_userid,
								@jedetailid
				 );
			END IF;
            
            -- female chick
            IF(@itemid = @defaultfemalechickid) THEN
				 SET @jedetailid1 = null;
				 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
                                0,
                                (SELECT breederbatchid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @defaultfemalechickcost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder batch transfer',
								p_companyid,
								p_userid,
								@jedetailid1
				 );
				 
				 -- Debit to WIP Bird on toshedid - Ledger
				
				 SET @jedetailid = null;
				 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
                                0,
                                (SELECT breederbatchid FROM breederbatchtransfer WHERE id = p_breederbatchtransferid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @defaultfemalechickcost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder batch transfer',
								p_companyid,
								p_userid,
								@jedetailid
				 );
			END IF;
			SET i = i + 1;
		END WHILE;
	End;
END;



CREATE PROCEDURE `spc_savebreederdailytransaction_je`(
	IN p_breederdailytransactionid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempconsumption;
    DROP TABLE IF EXISTS tempmortality;
    
    BEGIN 
        
        -- Journal entry detail for WIP bird
		   SET @WIPledgerid = null;
           SET @cogsledgerid = null;
           SET @defaultmalechickid = null;
           SET @defaultfemalechickid = null;
           SET @defaultmalechickcost = null;
           SET @defaultfemalechickcost = null;
		   
		   SELECT WIPledgerid, costofgoodsoldledgerid, defaultmalechickid, defaultfemalechickid, defaultmalechickcost, defaultfemalechickcost
		   INTO @WIPledgerid, @cogsledgerid, @defaultmalechickid, @defaultfemalechickid, @defaultmalechickcost, @defaultfemalechickcost
		   FROM breedersetting LIMIT 1;
           
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
                NULL,
                1300,
                NULL,
                (SELECT transactiondate FROM breederdailytransaction WHERE id = p_breederdailytransactionid),
                NULL,
				-- (SELECT branchid FROM location WHERE id = (SELECT locationid FROM breederdailytransaction WHERE id = p_breederdailytransactionid)),
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                341,
				NULL,
                'Breeder daily transaction JE',
                NULL,
                NULL,
                NULL,
                p_breederdailytransactionid,
                'Breeder daily transaction JE',
                p_companyid,
                p_userid,
                @jeid
           );
   
   
			-- JE for breeder daily consumption
			SET @row_number = 0;
   
			CREATE TEMPORARY TABLE tempconsumption
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemledgerid, itemid FROM(
            
				SELECT ((SELECT unitcost FROM item WHERE id = itemid) * quantity) as totalcost,
                (SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                itemid
                
                FROM breederdailyconsumption 
                WHERE breederdailytransactionid = p_breederdailytransactionid
                
			) as tbldailydetail;
            
            
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempconsumption INTO n;
				
					WHILE i<n DO 
					
                    SET @totalcost = null;
					SET @itemledgerid = null;
                    
						select totalcost, itemledgerid into @totalcost, @itemledgerid from tempconsumption where num = i+1;
                    
						-- insert JE detail
                         
                         SET @breederbatchid = null;
                         SET @locationid = null;
                         SET @shedid = null;
                         SET @itemid = null;
                         
                         SELECT breederbatchid, locationid, shedid, itemid
                         INTO @breederbatchid, @locationid, @shedid, @itemid
                         FROM breederdailytransaction WHERE id = p_breederdailytransactionid;
                         
                         -- Credit to consumed item - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
										NULL,
                                        @jeid,
                                        @itemledgerid,
                                        0,
                                        (SELECT breederbatchid FROM breederdailytransaction WHERE id = p_breederdailytransactionid),
                                        NULL,
                                        NULL,
                                        NULL,
										NULL,
										NULL,
                                        0,
                                        @totalcost,
                                        NULL,
                                        NULL,
										NULL,
                                        @itemid,
										NULL,
                                        'Breeder daily transaction',
										p_companyid,
										p_userid,
										@jedetailid1
						 );
                         
                         -- Debit to WIP Bird - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
										NULL,
                                        @jeid,
                                        @WIPledgerid,
                                        0,
                                        (SELECT breederbatchid FROM breederdailytransaction WHERE id = p_breederdailytransactionid),
                                        NULL,
                                        NULL,
                                        NULL,
										NULL,
										NULL,
                                        @totalcost,
                                        0,
                                        NULL,
                                        NULL,
										NULL,
                                        @itemid,
										NULL,
                                        'Breeder daily transaction',
										p_companyid,
										p_userid,
										@jedetailid
						 );
						
						SET i = i + 1;
					END WHILE;
				End;
                
                
                -- JE for breeder daily mortality
                
                SET @row_number1 = 0;
   
				CREATE TEMPORARY TABLE tempmortality
				
				SELECT (@row_number1:=@row_number1 + 1) AS num1, quantity, itemledgerid, itemid FROM(
				
					SELECT (totalculls + totalmortality) as quantity,
					(SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                    itemid
					
					FROM breederdailymortality 
					WHERE breederdailytransactionid = p_breederdailytransactionid
					
				) as tbldaily1detail1;
				
				
				
				BEGIN
					DECLARE n1 INT DEFAULT 0;
					DECLARE j INT DEFAULT 0;
					SELECT COUNT(*) FROM tempmortality INTO n1;
					
						WHILE j<n1 DO 
                        
							 SET @quantity = null;
							 SET @itemledgerid1 = null;
                             SET @itemid1 = null;
						
							select quantity, itemledgerid, itemid into @quantity, @itemledgerid1, @itemid1 from tempmortality where num1 = j+1;
						
							-- insert JE detail
							 
							 -- Credit to culls and mortality item - Ledger
                             
                             -- male chick
							 IF(@itemid = @defaultmalechickid) THEN
								 SET @jedetailid3 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@itemledgerid1,
									0,
									(SELECT breederbatchid FROM breederdailytransaction WHERE id = p_breederdailytransactionid),
									NULL,
									NULL,
                                    NULL,
									NULL,
									NULL,
									0,
									(@quantity * @defaultmalechickcost),
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid3
								 );
								 
								 -- Debit to COGS - Ledger
								
								 SET @jedetailid2 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@cogsledgerid1,
									0,
									(SELECT breederbatchid FROM breederdailytransaction WHERE id = p_breederdailytransactionid),
									NULL,
									NULL,
                                    NULL,
									NULL,
									NULL,
									(@quantity * @defaultmalechickcost),
									0,
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid2
								 );
                                 
                                 END IF;
                                 
                                 -- female chick
                                 IF(@itemid = @defaultfemalechickid) THEN
								 SET @jedetailid3 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@itemledgerid1,
									0,
									(SELECT breederbatchid FROM breederdailytransaction WHERE id = p_breederdailytransactionid),
									NULL,
									NULL,
                                    NULL,
									NULL,
									NULL,
									0,
									(@quantity * @defaultfemalechickcost),
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid3
								 );
								 
								 -- Debit to COGS - Ledger
								
								 SET @jedetailid2 = null;
								 CALL spc_journalentrydetail_save( 
									NULL,
									@jeid,
									@cogsledgerid1,
									0,
									(SELECT breederbatchid FROM breederdailytransaction WHERE id = p_breederdailytransactionid),
									NULL,
									NULL,
                                    NULL,
									NULL,
									NULL,
									(@quantity * @defaultfremalechickcost),
									0,
									NULL,
									NULL,
									NULL,
									@itemid1,
									NULL,
									'Breeder daily mortality and culls',
									p_companyid,
									p_userid,
									@jedetailid2
								 );
                                 
                                 END IF;
							
							SET j = j + 1;
						END WHILE;
					End;
		END;

END;



CREATE PROCEDURE `spc_savebreedereggcollection_je`(
	IN p_eggscollectionid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempeggcollection;
    
    IF((SELECT statusid FROM eggsdistributiondetail WHERE eggscollectionid = p_eggscollectionid LIMIT 1) = 842) THEN
    
    BEGIN
    -- Journal entry detail for WIP bird
	   SET @WIPledgerid = null;
	   SET @hatchingeggscost = null;
       SET @commercialeggscost = null;
       SET @crackedeggscost = null;
       SET @doubleyolkeggscost = null;
       
	   SELECT WIPledgerid, hatchingeggscost, commercialeggscost, crackedeggscost, doubleyolkeggscost
	   INTO @WIPledgerid, @hatchingeggscost, @commercialeggscost, @crackedeggscost, @doubleyolkeggscost
	   FROM breedersetting LIMIT 1;
       
       set @branch = null;
       SELECT L.branchid INTO @branch 
       FROM location L
       LEFT JOIN eggscollection EC ON EC.id = p_eggscollectionid
       LEFT JOIN warehouse W ON W.id = EC.towarehouseid
       
       WHERE W.locationid = L.id;
       
       SET @jeid = null;
           CALL spc_journalentry_save(                
                NULL,
				NULL,
				1300,
				NULL,
				(SELECT collectiondate FROM eggscollection WHERE id = p_eggscollectionid),
				NULL,
				@branchid,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                341,
				'Breeder egg collection JE',
				NULL,
				NULL,
				NULL,
				p_eggscollectionid,
				'Breeder egg collection JE',
				p_companyid,
				p_userid,
                @jeid
           );
           
           SET @row_number = 0;
   
			CREATE TEMPORARY TABLE tempeggcollection
			
            SELECT (@row_number:=@row_number + 1) AS num, quantity, itemledgerid, itemid, itemtypeid from (
				SELECT 
				quantity,
                (SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                itemid,
                itemtypeid
				FROM eggsdistributiondetail 
                where eggscollectionid = p_eggscollectionid
                
            ) 
            as tblgrpodetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempeggcollection INTO n;
				
					WHILE i<n DO 
                    
						SET @quantity = null;
                        SET @itemledgerid = null;
                        SET @itemid = null;  
                        SET @itemtypeid = null;
					
						select quantity, itemledgerid, itemid, itemtypeid into @quantity, @itemledgerid, @itemid, @itemtypeid from tempeggcollection where num = i+1;
                    
						-- insert JE detail
                         -- if(@quantity > 0) then
                        IF(@itemtypeid = 881) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @hatchingeggscost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @hatchingeggscost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- commercial eggs
                         IF(@itemtypeid = 882) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @commercialeggscost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @commercialeggscost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- cracked eggs
                         IF(@itemtypeid = 883) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @crackedeggscost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @crackedeggscost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- doubleyolk eggs
                         IF(@itemtypeid = 884) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @doubleyolkeggscost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
								(SELECT breederbatchid FROM eggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @doubleyolkeggscost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Breeder eggs collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF; 
						
						SET i = i + 1;
                       -- end if;
					END WHILE;
				End;
       END;
	END IF;

END;



CREATE PROCEDURE `spc_savechiksreceived_je`(
	IN p_grpoid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN
	DROP TABLE IF EXISTS tempgrpo;
	 
	IF((SELECT statusid FROM grpo WHERE id = p_grpoid) = 642) THEN
    
		BEGIN 
        
        -- Journal entry detail for WIP bird
		   SET @WIPledgerid = null;
		   SET @GoodsWithoutInvoiceledgerid = null;
           SET @discountledgerid = null;
		   
		   SELECT WIPledgerid, grpowithoutinvoiceledgerid, discountledgerid
		   INTO @WIPledgerid, @GoodsWithoutInvoiceledgerid, @discountledgerid
		   FROM breedersetting LIMIT 1;
           
           set @branch = null;
		   SELECT L.branchid INTO @branch 
		   FROM location L
		   LEFT JOIN grpo G ON G.id = p_grpoid
		   LEFT JOIN warehouse W ON W.id = G.towarehouseid
		   
		   WHERE W.locationid = L.id;
           
           SET @batchid = null;
           SELECT tobatchid INTO @batchid
           FROM purchaserequest PR
           LEFT JOIN purchaseorder PO ON PO.purchaserequestid = PR.id
           LEFT JOIN grpo G ON G.purchaseorderid = PO.id
           WHERE G.id = p_grpoid;
           
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1301,
				NULL,
				(SELECT grpodate FROM grpo WHERE id = p_grpoid),
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                341,
				NULL,
				'GRPO JE',
				NULL,
				NULL,
				NULL,
				p_grpoid,
				'GRPO JE',
				p_companyid,
                p_userid,
                @jeid
           );
   
   
   
			SET @row_number = 0;
   
			CREATE TEMPORARY TABLE tempgrpo
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, taxpercent, itemid, itemdiscount, discountedvalue, (discountedvalue + ((discountedvalue * taxpercent)/100)) as taxcalcvalue from (
				SELECT 
					(quantity*unitprice) as totalcost, 
					taxpercent, 
                    itemid,
					itemdiscount,
					(quantity*unitprice) - (((quantity*unitprice) * itemdiscount)/100) as discountedvalue
				FROM grpodetail 
                where grpoid = p_grpoid
            ) 
            as tblgrpodetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempgrpo INTO n;
				
					WHILE i<n DO 
					
						SET @taxcalculatedval = null;
                        SET @itemid = null;
						select taxcalcvalue, itemid into @taxcalculatedval, @itemid from tempgrpo where num = i+1;
                    
						-- insert JE detail
                        
                        -- Credit to Good receipt but not Invoice - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@GoodsWithoutInvoiceledgerid,
							0,
							@batchid,
							NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							0,
							@taxcalculatedval,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'GRPO JE',
							p_companyid,
							p_userid,
							@jedetailid1
						 );
                        
                        -- Debit to WIP Bird - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@WIPledgerid,
							0,
							@batchid,
							NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							@taxcalculatedval,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'GRPO JE',
							p_companyid,
							p_userid,
							@jedetailid
						 );
                        
						SET i = i + 1;
					END WHILE;
				End;
		END;
        
	END IF;
END;



CREATE PROCEDURE `spc_saveeggtransfertohatchery_je`(
	IN p_eggtransfertohatcheryid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempbreedereggtransfer;
    
    IF((SELECT statusid FROM eggtransfertohatchery WHERE id = p_eggtransfertohatcheryid) = 902) THEN
    
		SET @jeid = null;
		CALL spc_journalentry_save(
			NULL,
			NULL,
			1297,
			NULL,
			(SELECT transferdate FROM eggtransfertohatchery WHERE id = p_eggtransfertohatcheryid),
			NULL,
			(SELECT branchid FROM location WHERE id = (SELECT locationid FROM eggtransfertohatchery WHERE id = p_eggtransfertohatcheryid)),
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
            NULL,
            341,
			NULL,
			'Egg transfer to hatchery JE',
			NULL,
			NULL,
			NULL,
			p_eggtransfertohatcheryid,
			'Egg transfer to hatchery JE',
			p_companyid,
			p_userid,
			@jeid
		);
		
		SET @row_number = 0;
	   
		CREATE TEMPORARY TABLE tempbreedereggtransfer
		
		SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemid from (
			SELECT 
				((SELECT hatchingeggscost FROM breedersetting LIMIT 1) * transferquantity) as totalcost,
				itemid
			FROM eggtransfertohatcherydetail 
			where eggtransfertohatcheryid = p_eggtransfertohatcheryid
		) 
		as tbleggtransferdetail;
		
		BEGIN
			DECLARE n INT DEFAULT 0;
			DECLARE i INT DEFAULT 0;
			SELECT COUNT(*) FROM tempbreedereggtransfer INTO n;
		
			WHILE i<n DO 
			
				SET @totalcost = null;
				SET @itemid = null;
				SET @itemledgerid = null;
				select totalcost, itemid into @totalcost, @itemid from tempbreedereggtransfer where num = i+1;
			
				-- insert JE detail
				
				SELECT ledgerid INTO @itemledgerid FROM item WHERE id = @itemid;
				
				 -- Credit to item - Ledger
				 
				 SET @jedetailid1 = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@itemledgerid,
					0,
					(SELECT breederbatchid FROM eggtransfertohatchery WHERE id = p_eggtransfertohatcheryid),
					NULL,
					NULL,
                    NULL,
					NULL,
					NULL,
					0,
					@totalcost,
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'Egg transfer to hatchery',
					p_companyid,
					p_userid,
					@jedetailid1
				 );
				 
				 -- Debit to WIP Bird on toshedid - Ledger
				
				 SET @jedetailid = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@itemledgerid,
					0,
					(SELECT breederbatchid FROM eggtransfertohatchery WHERE id = p_eggtransfertohatcheryid),
					NULL,
					NULL,
                    NULL,
					NULL,
					NULL,
					@totalcost,
					0,
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'Egg transfer to hatchery',
					p_companyid,
					p_userid,
					@jedetailid
				 );
				
				SET i = i + 1;
			END WHILE;
		End;
	END IF;
END;



CREATE PROCEDURE `spc_savelayerbatchopening_je`(
	IN p_layerbatchopeningid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS temlayeropening;
    
    IF((SELECT statusid FROM layer_batchopening_balance WHERE id = p_layerbatchopeningid) = 1602) THEN

		BEGIN
		
			SET @WIPledgerid = null;
			SELECT WIPledgerid
			INTO @WIPledgerid
			FROM layersetting LIMIT 1;
		   
			set @branch = null;
			SELECT L.branchid INTO @branch 
			FROM location L
			LEFT JOIN layer_batchlocationeiseopening_detail LLOD ON LLOD.layerbatchopeningid = p_layerbatchopeningid
			WHERE LLOD.locationid = L.id;
            
            SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				(SELECT livebatchdate FROM layer_batchopening_balance WHERE id = p_layerbatchopeningid),
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                341,
				NULL,
				'Layer batch opening JE',
				NULL,
				NULL,
				NULL,
				p_layerbatchopeningid,
				'Layer batch opening JE',
				p_companyid,
                p_userid,
                @jeid
           );
           
           SET @row_number = 0;
   
			CREATE TEMPORARY TABLE temlayeropening
			
            SELECT (@row_number:=@row_number + 1) AS num, wipaccountbalance from (
				SELECT 
					wipaccountbalance
				FROM layer_batchfinancialopening_detail 
                where layerbatchopeningid = p_layerbatchopeningid
            ) 
            as tblfinancedetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempbreederopening INTO n;
				
					WHILE i<n DO 
					
						SET @WIPaccountbalance = null;
						select wipaccountbalance into @WIPaccountbalance from tempbreederopening where num = i+1;
                    
					
                        -- Debit to WIP Bird - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@WIPledgerid,
                            0,
                            (SELECT layerbatchid FROM layer_batchoepning_balance WHERE id = p_layerbatchopeningid),
							NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							@WIPaccountbalance,
							0,
							NULL,
							NULL,
							NULL,
							NULL,
							NULL,
							'Layer batch opening JE',
							p_companyid,
							p_userid,
							@jedetailid
						 );
                        
						SET i = i + 1;
					END WHILE;
				End;
			
		END;
        
	END IF;

END;



CREATE PROCEDURE `spc_savelayerbatchtransfer_je`(
	IN p_layerbatchtransferid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS templayerbatchtransfer;
    
    -- Journal entry detail for WIP bird
	SET @WIPledgerid = null;
    SET @femalechickscost = null;
    
    SELECT WIPledgerid INTO @WIPledgerid FROM breedersetting LIMIT 1;
    
    SELECT defaultfemalechickcost INTO @femalechickscost FROM layersetting LIMIT 1;
    
    SET @jeid = null;
    CALL spc_journalentry_save(
		NULL,
        NULL,
        1297,
        NULL,
		(SELECT transferdate FROM layerbatchtransfer WHERE id = p_layerbatchtransferid),
        NULL,
        (SELECT branchid FROM location WHERE id = (SELECT tolocationid FROM layerbatchtransfer WHERE id = p_layerbatchtransferid)),
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        345,
        NULL,
        'Shed to shed transfer JE',
        NULL,
        NULL,
        NULL,
        p_layerbatchtransferid,
        'Shed to shed transfer JE',
		p_companyid,
		p_userid,
		@jeid
    );
    
    SET @row_number = 0;
   
	CREATE TEMPORARY TABLE templayerbatchtransfer
	
	SELECT (@row_number:=@row_number + 1) AS num, quantity, toshedid, itemid from (
		SELECT 
			quantity,
            toshedid,
            itemid
		FROM layerbatchtransferdetail 
		where layerbatchtransferid = p_layerbatchtransferid
	) 
	as tbllbatchtransferdetail;
    
    BEGIN
		DECLARE n INT DEFAULT 0;
		DECLARE i INT DEFAULT 0;
		SELECT COUNT(*) FROM templayerbatchtransfer INTO n;
	
		WHILE i<n DO 
			
            SET @itemid = null;
            SET @toshedid = null;
            SET @quantity = null;
		
			select quantity, toshedid, itemid into @quantity, @toshedid, @itemid from templayerbatchtransfer where num = i+1;
		
			-- insert JE detail
            
			 -- Credit to WIP Bird on fromshedid - Ledger
			 
			 SET @jedetailid1 = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				@WIPledgerid,
				0,
				(SELECT layerbatchid FROM layerbatchtransfer WHERE id = p_layerbatchtransferid),
				NULL,
				NULL,
                NULL,
				NULL,
				NULL,
				0,
				(@quantity * @femalechickscost),
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Layer batch transfer',
				p_companyid,
				p_userid,
				@jedetailid1
			 );
             
             -- Debit to WIP Bird on toshedid - Ledger
			
			 SET @jedetailid = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				@WIPledgerid,
				0,
				(SELECT layerbatchid FROM layerbatchtransfer WHERE id = p_layerbatchtransferid),
				NULL,
				NULL,
                NULL,
				NULL,
				NULL,
				(@quantity * @femalechickscost),
				0,
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Layer batch transfer',
				p_companyid,
				p_userid,
				@jedetailid
			 );
			
			SET i = i + 1;
		END WHILE;
	End;
END;



CREATE PROCEDURE `spc_savelayerdailytransaction_je`(
	IN p_layerdailytransactionid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS templayerconsumption;
    DROP TABLE IF EXISTS templayermortality;
    
    BEGIN 
        
        -- Journal entry detail for WIP bird
		   SET @WIPledgerid = null;
           SET @cogsledgerid = null;
           SET @femalechickscost = null;
		   
		   SELECT WIPledgerid, costofgoodsoldledgerid
		   INTO @WIPledgerid, @cogsledgerid
		   FROM breedersetting LIMIT 1;
           
           SELECT defaultfemalechickcost
		   INTO @femalechickscost
		   FROM layersetting LIMIT 1;
           
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
                NULL,
                1300,
                NULL,
                (SELECT transactiondate FROM layerdailytransaction WHERE id = p_layerdailytransactionid),
                NULL,
				(SELECT branchid FROM location WHERE id = (SELECT locationid FROM layerdailytransaction WHERE id = p_layerdailytransactionid)),
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                345,
				NULL,
                'Layer daily transaction JE',
                NULL,
                NULL,
                NULL,
                p_layerdailytransactionid,
                'Layer daily transaction JE',
                p_companyid,
                p_userid,
                @jeid
           );
   
   
			-- JE for layer daily consumption
			SET @row_number = 0;
   
			CREATE TEMPORARY TABLE templayerconsumption
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemledgerid, itemid FROM(
            
				SELECT ((SELECT unitcost FROM item WHERE id = itemid) * consumptionquantity) as totalcost,
                (SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
                itemid
                FROM layerdailyconsumption 
                WHERE layerdailytransactionid = p_layerdailytransactionid
                
			) as tbllayerdailydetail;
            
            
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM templayerconsumption INTO n;
				
					WHILE i<n DO 
                    
						SET @totalcost = null;
                        SET @itemledgerid = null;
						SET @itemid = null;
						select totalcost, itemledgerid, itemid into @totalcost, @itemledgerid, @itemid from templayerconsumption where num = i+1;
                    
						-- insert JE detail
                        
                         SET @layerbatchid = null;
                         SET @locationid = null;
                         SET @shedid = null;
                         
                         SELECT layerbatchid, locationid, shedid
                         INTO @layerbatchid, @locationid, @shedid
                         FROM layerdailytransaction WHERE id = p_layerdailytransactionid;
                         
                         -- Credit to consumed item - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@itemledgerid,
							0,
							(SELECT layerbatchid FROM layerdailytransaction WHERE id = p_layerdailytransactionid),
							NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							0,
							@totalcost,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Layer daily transaction',
							p_companyid,
							p_userid,
							@jedetailid1
						 );
                         
                         -- Debit to WIP Bird - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@WIPledgerid,
							0,
							(SELECT layerbatchid FROM layerdailytransaction WHERE id = p_layerdailytransactionid),
							NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							@totalcost,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Layer daily transaction',
							p_companyid,
							p_userid,
							@jedetailid
						 );
						
						SET i = i + 1;
					END WHILE;
				End;
                
                
                -- JE for layerbatchid daily mortality
                
                SET @row_number1 = 0;
   
				CREATE TEMPORARY TABLE templayermortality
				
				SELECT (@row_number1:=@row_number1 + 1) AS num1, quantity, itemledgerid, itemid FROM(
				
					SELECT (todayculls + todaymortality + sexingerrorquantity) as quantity,
					(SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid,
					itemid
					FROM layerdailymortality 
					WHERE layerdailytransactionid = p_layerdailytransactionid
					
				) as tbllayerdaily1detail1;
				
				
				
				BEGIN
					DECLARE n1 INT DEFAULT 0;
					DECLARE j INT DEFAULT 0;
					SELECT COUNT(*) FROM templayermortality INTO n1;
					
						WHILE j<n1 DO 
						
							SET @quantity = null;
							SET @itemledgerid1 = null;
							SET @itemid1 = null;
							select quantity, itemledgerid, itemid into @quantity, @itemledgerid1, @itemid1 from templayermortality where num1 = j+1;
						
							-- insert JE detail
							 
							 -- Credit to culls and mortality item - Ledger
							 
							 SET @jedetailid3 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid1,
								0,
								(SELECT layerbatchid FROM layerdailytransaction WHERE id = p_layerdailytransactionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @femalechickscost),
								NULL,
								NULL,
								NULL,
								@itemid1,
								NULL,
								'Layer daily mortality and culls',
								p_companyid,
								p_userid,
								@jedetailid3
							 );
                             
                             -- Debit to COGS - Ledger
							
							 SET @jedetailid2 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@cogsledgerid1,
								0,
								(SELECT layerbatchid FROM layerdailytransaction WHERE id = p_layerdailytransactionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @femalechickscost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid1,
								NULL,
								'Layer daily mortality and culls',
								p_companyid,
								p_userid,
								@jedetailid2
							 );
							
							SET j = j + 1;
						END WHILE;
					End;
		END;

END;



CREATE PROCEDURE `spc_savelayereggcollection_je`(
	IN p_eggscollectionid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS templayereggcollection;
    
    IF((SELECT statusid FROM layereggsdistributiondetail WHERE eggscollectionid = p_eggscollectionid LIMIT 1) = 842) THEN
    
    BEGIN
    -- Journal entry detail for WIP bird
	   SET @WIPledgerid = null;
	   SET @tableeggscost = null;
       SET @damageeggscost = null;
       SET @crackedeggscost = null;
       SET @pulleteggscost = null;
       
	   SELECT WIPledgerid
	   INTO @WIPledgerid
	   FROM breedersetting LIMIT 1;
       
       SELECT tableeggscost, damageeggscost, crackedeggscost, pulleteggscost
       INTO @tableeggscost, @damageeggscost, @crackedeggscost, @pulleteggscost
       FROM layersetting LIMIT 1;
       
       set @branch = null;
       SELECT L.branchid INTO @branch 
       FROM location L
       LEFT JOIN layereggscollection LEC ON LEC.id = p_eggscollectionid
       LEFT JOIN warehouse W ON W.id = LEC.towarehouseid
       
       WHERE W.locationid = L.id;
       
       SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				(SELECT collectiondate FROM layereggscollection WHERE id = p_eggscollectionid),
				NULL,
				@branchid,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                345,
				NULL,
				'Layer egg collection JE',
				NULL,
				NULL,
				NULL,
				p_eggscollectionid,
				'Layer egg collection JE',
				p_companyid,
                p_userid,
                @jeid
           );
           
           SET @row_number = 0;
   
			CREATE TEMPORARY TABLE templayereggcollection
			
            SELECT (@row_number:=@row_number + 1) AS num, quantity, itemledgerid, itemid, itemtypeid from (
				SELECT 
				quantity,
                (SELECT ledgerid FROM item WHERE id = itemid) as itemledgerid, 
                itemid,
                itemtypeid
				FROM layereggsdistributiondetail 
                where eggscollectionid = p_eggscollectionid
                LIMIT 1
            ) 
            as tbllayereggscollectiondetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM templayereggcollection INTO n;
				
					WHILE i<n DO 
                    
						SET @quantity = null;
                        SET @itemledgerid = null;
                        SET @itemid = null;
                        SET @itemtypeid = null;
					
						select quantity, itemledgerid, itemid, itemtypeid into @totalcost, @itemledgerid, @itemid, @itemtypeid from templayereggcollection where num = i+1;
                        
						-- insert JE detail
                        
                        -- table eggs
                        IF(@itemtypeid = 1129) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @tableeggscost),
								NULL,
								NULL,
								'Stock',
								@itemid,
								NULL,
								'Layer eggs collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @tableeggscost),
								0,
								NULL,
								NULL,
								'Stock',
								@itemid,
								NULL,
								'Layer eggs collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- damage eggs
                         IF(@itemtypeid = 1130) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @damageeggscost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @damageeggscost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- cracked eggs
                         IF(@itemtypeid = 1131) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @crackedeggscost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @crackedeggscost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
                         -- pullet eggs
                         IF(@itemtypeid = 1132) THEN
							-- Credit to WIP Bird - Ledger
							 SET @jedetailid1 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@WIPledgerid,
								0,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								0,
								(@quantity * @pulleteggscost),
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection',
								p_companyid,
								p_userid,
								@jedetailid1
							 );
							
							-- Debit to item - Ledger
							
							 SET @jedetailid = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								@itemledgerid,
								0,
								(SELECT layerbatchid FROM layereggscollection WHERE id = p_eggscollectionid),
								NULL,
								NULL,
                                NULL,
								NULL,
								NULL,
								(@quantity * @pulleteggscost),
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'Layer eggs collection',
								p_companyid,
								p_userid,
								@jedetailid
							 );
                         
                         END IF;
                         
						
						SET i = i + 1;
					END WHILE;
				End;
       END;
	END IF;

END;



CREATE PROCEDURE `spc_saveproductionissue_je`(
	IN p_production_issue_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN

	DROP TABLE IF EXISTS tempproductionissue;

-- IF((SELECT statusid FROM grpo WHERE id = p_grpoid) = 642) THEN
    
		BEGIN 
        
        -- Journal entry detail for WIP 
		   SET @WIPledgerid = null;
		   
		   SELECT wipledgerid
		   INTO @WIPledgerid
		   FROM feedmill_feedmillsetting LIMIT 1;
       
           
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				(SELECT issue_date FROM feedmill_production_issue WHERE id = p_production_issue_id),
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                347,
				NULL,
				'PRODUCTION ISSUE JE',
				NULL,
				NULL,
				NULL,
				p_production_issue_id,
				'PRODUCTION ISSUE JE',
				p_companyid,
                p_userid,
                @jeid
           );
   
   
   
			SET @row_number = 0;
   
			CREATE TEMPORARY TABLE tempproductionissue
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemid from (
				SELECT 
					(batch_qty*batch_unitcost) as totalcost, 
                    itemid
				FROM feedmill_production_issuedetail 
                where production_issue_id = p_production_issue_id
            ) 
            as tblproductionissuedetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempproductionissue INTO n;
				
					WHILE i<n DO 
					
						SET @totalcost = null;
                        SET @itemid = null;
						select totalcost, itemid into @totalcost, @itemid from tempproductionissue where num = i+1;
                    
						-- insert JE detail
                        
                        -- Credit to item - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(SELECT ledgerid FROM item WHERE id = @itemid),
							0,
							NULL,
							NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							0,
							@totalcost,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'PRODUCTION ISSUE JE',
							p_companyid,
							p_userid,
							@jedetailid1
						 );
                        
                        -- Debit to WIP - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@WIPledgerid,
							0,
							@batchid,
							NULL,
							NULL,
                            NULL,
                            NULL,
                            NULL,
							@totalcost,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'PRODUCTION ISSUE JE',
							p_companyid,
							p_userid,
							@jedetailid
						 );
                        
						SET i = i + 1;
					END WHILE;
				End;
		END;
        
	-- END IF;
END;



CREATE PROCEDURE `spc_savepurchaseinvoice_je`(
	IN p_purchaseinvoiceid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS temppurchaseinvoice;
    DROP TABLE IF EXISTS tempfreight;

   set @branch = null;
   SELECT L.branchid INTO @branch 
   FROM location L
   LEFT JOIN purchaseinvoice PI ON PI.id = p_purchaseinvoiceid
   LEFT JOIN grpo G ON G.id = PI.grpono
   LEFT JOIN warehouse W ON W.id = G.towarehouseid
   
   WHERE W.locationid = L.id;
   
   SET @batchid = null;
   SELECT tobatchid INTO @batchid
   FROM purchaserequest PR
   LEFT JOIN purchaseorder PO ON PO.purchaserequestid = PR.id
   LEFT JOIN grpo G ON G.purchaseorderid = PO.id
   LEFT JOIN purchaseinvoice PI ON PI.grpono = G.id
   WHERE PI.id = p_purchaseinvoiceid
   limit 1;
   

	 SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                NULL,
				NULL,
				'Purchase invoice JE',
				NULL,
				NULL,
				NULL,
				p_purchaseinvoiceid,
				'Purchase invoice JE',
				p_companyid,
                p_userid,
                @jeid
           );
           
			SET @row_number = 0;
   
			CREATE TEMPORARY TABLE temppurchaseinvoice
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemid, discountedvalue, (discountedvalue + ((discountedvalue * taxpercent)/100)) as taxcalcvalue from (
				SELECT 
					(quantity*unitprice) as totalcost,
                    itemid,
                    taxpercent,
                    (quantity*unitprice) - (((quantity*unitprice) * itemdiscount)/100) as discountedvalue
				FROM purchaseinvoicedetail 
                where purchaseinvoiceid = p_purchaseinvoiceid
            ) 
            as tblpurchaseinvoicedetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM temppurchaseinvoice INTO n;
				
					WHILE i<n DO 
					
						SET @totalcost = null;
                        SET @itemid = null;
                        SET @taxcalcvalue = null;
						select totalcost, itemid, taxcalcvalue into @totalcost, @itemid, @taxcalcvalue from temppurchaseinvoice where num = i+1;
                    
						SET @cgstid = null;
                        SET @sgstid = null;
                        SET @igstid = null;
                        SET @utgstid = null;
                        
                        SET @cgstamount = null;
                        SET @sgstamount = null;
                        SET @igstamount = null;
                        SET @utgstamount = null;
                        SET @itemdiscount = null;
                        
                        select cgstid, sgstid, igstid, utgstid, cgstamount, sgstamount, igstamount, utgstamount, itemdiscount
                        INTO @cgstid, @sgstid, @igstid, @utgstid, @cgstamount, @sgstamount, @igstamount, @utgstamount, @itemdiscount
                        from purchaseinvoicedetail
                        where purchaseinvoiceid = p_purchaseinvoiceid
                        and itemid = @itemid;
                    
						-- insert JE detail
                        
                        -- debit to item - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
										NULL,
										@jeid,
										(SELECT ledgerid FROM item WHERE id = @itemid),
                                        0,
                                        @batchid,
										NULL,
										NULL,
                                        p_purchaseinvoiceid,
                                        (SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
                                        (SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
										@totalcost,
                                        0,
										NULL,
										NULL,
										NULL,
										@itemid,
										NULL,
										'Item JE',
										p_companyid,
										p_userid,
										@jedetailid1
						 );
                        
                        -- debit to tax ledgers
                        if(@cgstid IS NOT null) then
							 SET @jedetailid2 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @cgstid),
								0,
								@batchid,
								NULL,
								NULL,
                                p_purchaseinvoiceid,
								(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								@cgstamount,
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'CGST JE detail.',
								p_companyid,
								p_userid,
								@jedetailid2
							 );
						end if;
                        
                        if(@sgstid IS NOT null) then
							 SET @jedetailid3 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @sgstid),
								0,
								@batchid,
								NULL,
								NULL,
                                p_purchaseinvoiceid,
								(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								@sgstamount,
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'SGST JE detail.',
								p_companyid,
								p_userid,
								@jedetailid3
							 );
						end if;
                        
                        if(@igstid IS NOT null) then
							 SET @jedetailid4 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @igstid),
								0,
								@batchid,
								NULL,
								NULL,
                                p_purchaseinvoiceid,
								(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								@igstamount,
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'IGST JE detail.',
								p_companyid,
								p_userid,
								@jedetailid4
							 );
						end if;
                        
                        if(@utgstid IS NOT null) then
							 SET @jedetailid5 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @utgstid),
								0,
								@batchid,
								NULL,
								NULL,
                                p_purchaseinvoiceid,
								(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								@utgstamount,
								0,
								NULL,
								NULL,
								NULL,
								@utgstid,
								NULL,
								'UTGST JE detail.',
								p_companyid,
								p_userid,
								@jedetailid5
							 );
						end if;
                        
                        
                        -- debit to discount ledger
                        
                        SET @jedetailid6 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(SELECT discountledgerid FROM breedersetting LIMIT 1),
                            0,
							@batchid,
							NULL,
							NULL,
                            p_purchaseinvoiceid,
							(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
							(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
							@itemdiscount,
							0,
							NULL,
							NULL,
							NULL,
							NULL,
							NULL,
							'Discount JE detail.',
							p_companyid,
							p_userid,
							@jedetailid6
						 );
                        
                        -- credit to vendor - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(select supplierledgerid from party where id = (select vendorid from purchaseinvoice where id = p_purchaseinvoiceid)),
							0,
							@batchid,
							NULL,
							NULL,
                            p_purchaseinvoiceid,
							(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
							(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
							0,
							@taxcalcvalue,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Credit to party JE',
							p_companyid,
							p_userid,
							@jedetailid
						 );
                        
						SET i = i + 1;
					END WHILE;
				End;
                
                SET @freightledgerid = null;
				select inputledgerid from freight F
				LEFT JOIN freightdetail FD ON FD.freighttypeid = F.id
				where FD.purchaseinvoiceid = p_purchaseinvoiceid;
				
				SET @row_number1 = 0;

				CREATE TEMPORARY TABLE tempfreight
				
				SELECT (@row_number1:=@row_number1 + 1) AS num1,
                    freightamount, cgstid,cgstamount,sgstid,sgstamount,igstid,igstamount,utgstid,utgstamount,freighttypeid
                    
                    FROM(
				
					SELECT id,
						   freightamount,
						   cgstid,
						   cgstamount,
						   sgstid,
						   sgstamount,
						   igstid,
						   igstamount,
						   utgstid,
						   utgstamount,
                           freighttypeid
					
					FROM freightdetail 
					WHERE purchaseinvoiceid = p_purchaseinvoiceid
					
				) as tblfreightdetail1;
				
				BEGIN
				
				DECLARE n1 INT DEFAULT 0;
				DECLARE j INT DEFAULT 0;
				SELECT COUNT(*) FROM tempfreight INTO n1;
				
					WHILE j<n1 DO 
						
                        SET @inputledgerid = null;
						SET @cgstid1 = null;
                        SET @sgstid1 = null;
                        SET @igstid1 = null;
                        SET @utgstid1 = null;
                        
                        SET @freightamount = null;
                        SET @cgstamount1 = null;
                        SET @sgstamount1 = null;
                        SET @igstamount1 = null;
                        SET @utgstamount1 = null;
                        
                        SET @freighttypeid = null;
                        
						select freightamount,cgstid, sgstid, igstid, utgstid, cgstamount, sgstamount, igstamount, utgstamount, freighttypeid
                        INTO @freightamount,@cgstid1, @sgstid1, @igstid1, @utgstid1, @cgstamount1, @sgstamount1, @igstamount1, @utgstamount1, @freighttypeid 
                        from tempfreight where num1 = j+1;
                    
						select inputledgerid INTO @inputledgerid from freight F LEFT JOIN freightdetail FD ON FD.freighttypeid = F.id
						where FD.purchaseinvoiceid = p_purchaseinvoiceid and FD.freighttypeid = @freighttypeid; 
                    
                    
						-- insert JE detail
                        
                        -- debit to freight - Ledger
                         
                         SET @jedetailid7 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@inputledgerid,
							0,
							@batchid,
							NULL,
							NULL,
                            p_purchaseinvoiceid,
							(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
							(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
							@freightamount,
							0,
							NULL,
							NULL,
							NULL,
							NULL,
							NULL,
							'Freight JE',
							p_companyid,
							p_userid,
							@jedetailid7
						 );
                        
                        -- debit to tax ledgers
                        if(@cgstid1 IS NOT null) then
							 SET @jedetailid8 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @cgstid1),
								0,
								@batchid,
								NULL,
								NULL,
                                p_purchaseinvoiceid,
								(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								@cgstamount1,
								0,
								NULL,
								NULL,
								NULL,
								NULL,
								NULL,
								'CGST freight JE detail.',
								p_companyid,
								p_userid,
								@jedetailid8
							 );
						end if;
                        
                        if(@sgstid1 IS NOT null) then
							 SET @jedetailid9 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @sgstid1),
								0,
								@batchid,
								NULL,
								NULL,
                                p_purchaseinvoiceid,
								(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								@sgstamount1,
								0,
								NULL,
								NULL,
								NULL,
								NULL,
								NULL,
								'SGST freight JE detail.',
								p_companyid,
								p_userid,
								@jedetailid9
							 );
						end if;
                        
                        if(@igstid1 IS NOT null) then
							 SET @jedetailid10 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @igstid1),
								0,
								@batchid,
								NULL,
								NULL,
                                p_purchaseinvoiceid,
								(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								@igstamount1,
								0,
								NULL,
								NULL,
								NULL,
								NULL,
								NULL,
								'IGST freight JE detail.',
								p_companyid,
								p_userid,
								@jedetailid10
							 );
						end if;
                        
                        if(@utgstid1 IS NOT null) then
							 SET @jedetailid11 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @utgstid1),
								0,
								@batchid,
								NULL,
								NULL,
                                p_purchaseinvoiceid,
								(SELECT invoicedate FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								(SELECT subtotal FROM purchaseinvoice WHERE id = p_purchaseinvoiceid),
								@utgstamount1,
								0,
								NULL,
								NULL,
								NULL,
								@utgstid,
								NULL,
								'UTGST freight JE detail.',
								p_companyid,
								p_userid,
								@jedetailid11
							 );
						end if;
                        
						SET j = j + 1;
					END WHILE;
				
				END;
                        
		END;



CREATE PROCEDURE `spc_savereceiptforproduction_je`(
	IN p_production_receipt_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN



-- IF((SELECT statusid FROM grpo WHERE id = p_grpoid) = 642) THEN
    
	
        
        -- Journal entry detail for WIP 
   SET @WIPledgerid = null;
		   
		   SELECT wipledgerid
		   INTO @WIPledgerid
		   FROM feedmill_feedmillsetting LIMIT 1;
       
           
           SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				(SELECT receipt_date FROM feedmill_receipt_from_production WHERE id = p_production_receipt_id),
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                347,
				NULL,
				'RECEIPT FOR PRODUCTION JE',
				NULL,
				NULL,
				NULL,
				p_production_receipt_id,
				'RECEIPT FOR PRODUCTION JE',
				p_companyid,
                p_userid,
                @jeid
           );
   
   
   
		
			
				SET @item_totalcost = null;
				SET @itemid = null;
				select item_totalcost, itemid into @item_totalcost, @itemid from feedmill_receipt_from_production WHERE id = p_production_receipt_id;
			
				-- insert JE detail
				
				-- Credit to item - Ledger
				 
				 SET @jedetailid1 = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					@WIPledgerid,
					0,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					0,
					@item_totalcost,
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'RECEIPT FOR PRODUCTION JE',
					p_companyid,
					p_userid,
					@jedetailid1
				 );
				
				-- Debit to WIP - Ledger
				
				 SET @jedetailid = null;
				 CALL spc_journalentrydetail_save( 
					NULL,
					@jeid,
					(SELECT ledgerid FROM item WHERE id = @itemid),
					0,
					null,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					@item_totalcost,
					0,
					NULL,
					NULL,
					NULL,
					@itemid,
					NULL,
					'RECEIPT FOR PRODUCTION JE',
					p_companyid,
					p_userid,
					@jedetailid
				 );
 
	-- END IF;
END;



CREATE PROCEDURE `spc_savesalesinvoice_je`(
	IN p_salesinvoiceid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11)
)
BEGIN

	DROP TABLE IF EXISTS tempsalesinvoice;
    DROP TABLE IF EXISTS tempfreight;

   set @branch = null;
   SELECT L.branchid INTO @branch 
   FROM location L
   LEFT JOIN salesinvoice SI ON SI.id = p_salesinvoiceid
   LEFT JOIN salesdelivery SD ON FIND_IN_SET(SD.id, SI.salesdeliveryids)
   LEFT JOIN warehouse W ON W.id = SD.warehouseid
   WHERE W.locationid = L.id;
   

	 SET @jeid = null;
           CALL spc_journalentry_save(
				NULL,
				NULL,
				1300,
				NULL,
				(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
				NULL,
				@branch,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
                NULL,
                NULL,
				NULL,
				'Sales invoice JE',
				NULL,
				NULL,
				NULL,
				p_salesinvoiceid,
				'Sales invoice JE',
				p_companyid,
                p_userid,
                @jeid
           );
           
			SET @row_number = 0;
   
			CREATE TEMPORARY TABLE tempsalesinvoice
			
            SELECT (@row_number:=@row_number + 1) AS num, totalcost, itemid, discountedvalue, (discountedvalue + ((discountedvalue * taxpercent)/100)) as taxcalcvalue from (
				SELECT 
					(quantity*unitprice) as totalcost,
                    itemid,
                    taxpercent,
                    (quantity*unitprice) - (((quantity*unitprice) * discount)/100) as discountedvalue
				FROM salesinvoicedetail 
                where salesinvoiceid = p_salesinvoiceid
            ) 
            as tblsalesinvoicedetail;
            
            BEGIN
				DECLARE n INT DEFAULT 0;
				DECLARE i INT DEFAULT 0;
				SELECT COUNT(*) FROM tempsalesinvoice INTO n;
				
					WHILE i<n DO 
					
						SET @totalcost = null;
                        SET @itemid = null;
                        SET @taxcalcvalue = null;
						select totalcost, itemid, taxcalcvalue into @totalcost, @itemid, @taxcalcvalue from tempsalesinvoice where num = i+1;
                    
						SET @cgstid = null;
                        SET @sgstid = null;
                        SET @igstid = null;
                        SET @utgstid = null;
                        
                        SET @cgstamount = null;
                        SET @sgstamount = null;
                        SET @igstamount = null;
                        SET @utgstamount = null;
                        SET @itemdiscount = null;
                        
                        select cgstid, sgstid, igstid, utgstid, cgstamount, sgstamount, igstamount, utgstamount, discount
                        INTO @cgstid, @sgstid, @igstid, @utgstid, @cgstamount, @sgstamount, @igstamount, @utgstamount, @itemdiscount
                        from salesinvoicedetail
                        where salesinvoiceid = p_salesinvoiceid
                        and itemid = @itemid;
                    
						-- insert JE detail
                        
                        -- debit to item - Ledger
                         
                         SET @jedetailid1 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(SELECT ledgerid FROM item WHERE id = @itemid),
							NULL,
							NULL,
							NULL,
							NULL,
                            p_salesinvoiceid,
							(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
							(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
							@totalcost,
							0,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Item JE',
							p_companyid,
							p_userid,
							@jedetailid1
						 );
                        
                        -- debit to tax ledgers
                        if(@cgstid IS NOT null) then
							 SET @jedetailid2 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @cgstid),
								NULL,
								NULL,
								NULL,
								NULL,
                                p_salesinvoiceid,
								(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
								(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
								@cgstamount,
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'CGST JE detail.',
								p_companyid,
								p_userid,
								@jedetailid2
							 );
						end if;
                        
                        if(@sgstid IS NOT null) then
							 SET @jedetailid3 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @sgstid),
								NULL,
								NULL,
								NULL,
								NULL,
                                p_salesinvoiceid,
								(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
								(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
								@sgstamount,
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'SGST JE detail.',
								p_companyid,
								p_userid,
								@jedetailid3
							 );
						end if;
                        
                        if(@igstid IS NOT null) then
							 SET @jedetailid4 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @igstid),
								NULL,
								NULL,
								NULL,
								NULL,
                                p_salesinvoiceid,
								(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
								(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
								@igstamount,
								0,
								NULL,
								NULL,
								NULL,
								@itemid,
								NULL,
								'IGST JE detail.',
								p_companyid,
								p_userid,
								@jedetailid4
							 );
						end if;
                        
                        if(@utgstid IS NOT null) then
							 SET @jedetailid5 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT inputledgerid FROM tax WHERE id = @utgstid),
								NULL,
								NULL,
								NULL,
								NULL,
                                p_salesinvoiceid,
								(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
								(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
								@utgstamount,
								0,
								NULL,
								NULL,
								NULL,
								@utgstid,
								NULL,
								'UTGST JE detail.',
								p_companyid,
								p_userid,
								@jedetailid5
							 );
						end if;
                        
                        
                        -- debit to discount ledger
                        
                        SET @jedetailid6 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(SELECT discountledgerid FROM breedersetting LIMIT 1),
							NULL,
							NULL,
							NULL,
							NULL,
                            p_salesinvoiceid,
							(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
							(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
							@itemdiscount,
							0,
							NULL,
							NULL,
							NULL,
							NULL,
							NULL,
							'Discount JE detail.',
							p_companyid,
							p_userid,
							@jedetailid6
						 );
                        
                        -- credit to vendor - Ledger
                        
						 SET @jedetailid = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							(select customerledgerid from party where id = (select customerid from salesinvoice where id = p_salesinvoiceid)),
							NULL,
							NULL,
							NULL,
							NULL,
                            p_salesinvoiceid,
							(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
							(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
							0,
							@taxcalcvalue,
							NULL,
							NULL,
							NULL,
							@itemid,
							NULL,
							'Debit to party JE',
							p_companyid,
							p_userid,
							@jedetailid
						 );
                        
						SET i = i + 1;
					END WHILE;
				End;
                
                SET @freightledgerid = null;
				select outputledgerid from freight F
				LEFT JOIN salesinvoicefreight FD ON FD.freightid = F.id
				where FD.salesinvoiceid = p_salesinvoiceid;
				
				SET @row_number1 = 0;

				CREATE TEMPORARY TABLE tempfreight
				
				SELECT (@row_number1:=@row_number1 + 1) AS num1,
                    amount, cgstid,cgstamount,sgstid,sgstamount,igstid,igstamount,utgstid,utgstamount,freightid
                    
                    FROM(
				
					SELECT id,
						   amount,
						   cgstid,
						   cgstamount,
						   sgstid,
						   sgstamount,
						   igstid,
						   igstamount,
						   utgstid,
						   utgstamount,
                           freightid
					
					FROM salesinvoicefreight
					WHERE salesinvoiceid = p_salesinvoiceid
					
				) as tblfreightdetail1;
				
				BEGIN
				
				DECLARE n1 INT DEFAULT 0;
				DECLARE j INT DEFAULT 0;
				SELECT COUNT(*) FROM tempfreight INTO n1;
				
					WHILE j<n1 DO 
						
                        SET @outputledgerid = null;
						SET @cgstid1 = null;
                        SET @sgstid1 = null;
                        SET @igstid1 = null;
                        SET @utgstid1 = null;
                        
                        SET @amount = null;
                        SET @cgstamount1 = null;
                        SET @sgstamount1 = null;
                        SET @igstamount1 = null;
                        SET @utgstamount1 = null;
                        
                        SET @freightid = null;
                        
						select amount,cgstid, sgstid, igstid, utgstid, cgstamount, sgstamount, igstamount, utgstamount, freightid
                        INTO @amount,@cgstid1, @sgstid1, @igstid1, @utgstid1, @cgstamount1, @sgstamount1, @igstamount1, @utgstamount1, @freightid 
                        from tempfreight where num1 = j+1;
                    
						select outputledgerid INTO @outputledgerid from freight F LEFT JOIN salesinvoicefreight FD ON FD.freightid = F.id
						where FD.salesinvoiceid = p_salesinvoiceid and FD.freightid = @freightid; 
                    
                    
						-- insert JE detail
                        
                        -- debit to freight - Ledger
                         
                         SET @jedetailid7 = null;
						 CALL spc_journalentrydetail_save( 
							NULL,
							@jeid,
							@outputledgerid,
							NULL,
							NULL,
							NULL,
							NULL,
                            p_salesinvoiceid,
							(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
							(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
							@amount,
							0,
							NULL,
							NULL,
							NULL,
							NULL,
							NULL,
							'Freight JE',
							p_companyid,
							p_userid,
							@jedetailid7
						 );
                        
                        -- debit to tax ledgers
                        if(@cgstid1 IS NOT null) then
							 SET @jedetailid8 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT outputledgerid FROM tax WHERE id = @cgstid1),
								NULL,
								NULL,
								NULL,
								NULL,
                                p_salesinvoiceid,
								(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
								(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
								@cgstamount1,
								0,
								NULL,
								NULL,
								NULL,
								NULL,
								NULL,
								'CGST freight JE detail.',
								p_companyid,
								p_userid,
								@jedetailid8
							 );
						end if;
                        
                        if(@sgstid1 IS NOT null) then
							 SET @jedetailid9 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT outputledgerid FROM tax WHERE id = @sgstid1),
								NULL,
								NULL,
								NULL,
								NULL,
                                p_salesinvoiceid,
								(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
								(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
								@sgstamount1,
								0,
								NULL,
								NULL,
								NULL,
								NULL,
								NULL,
								'SGST freight JE detail.',
								p_companyid,
								p_userid,
								@jedetailid9
							 );
						end if;
                        
                        if(@igstid1 IS NOT null) then
							 SET @jedetailid10 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT outputledgerid FROM tax WHERE id = @igstid1),
								NULL,
								NULL,
								NULL,
								NULL,
                                p_salesinvoiceid,
								(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
								(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
								@igstamount1,
								0,
								NULL,
								NULL,
								NULL,
								NULL,
								NULL,
								'IGST freight JE detail.',
								p_companyid,
								p_userid,
								@jedetailid10
							 );
						end if;
                        
                        if(@utgstid1 IS NOT null) then
							 SET @jedetailid11 = null;
							 CALL spc_journalentrydetail_save( 
								NULL,
								@jeid,
								(SELECT outputledgerid FROM tax WHERE id = @utgstid1),
								NULL,
								NULL,
								NULL,
								NULL,
                                p_salesinvoiceid,
								(SELECT salesinvoicedate FROM salesinvoice WHERE id = p_salesinvoiceid),
								(SELECT subtotal FROM salesinvoice WHERE id = p_salesinvoiceid),
								@utgstamount1,
								0,
								NULL,
								NULL,
								NULL,
								@utgstid,
								NULL,
								'UTGST freight JE detail.',
								p_companyid,
								p_userid,
								@jedetailid11
							 );
						end if;
                        
						SET j = j + 1;
					END WHILE;
				
				END;
                        
		END;



CREATE PROCEDURE `spc_schememanagement_savejson`(
	  IN p_coststructureid INT,
      IN p_coststructure json,
	  IN p_deduction json,
      IN p_incentive json,
      IN p_userid INT,
      OUT out_id INT
)
BEGIN

    
 
     
    --  save coststructuredetail
    
	 SET @i = 0;
    
	 WHILE @i < JSON_LENGTH(p_coststructure) DO
    
		 SET @str = NULL;
         SELECT JSON_EXTRACT(p_coststructure,CONCAT('$[',@i,']')) INTO @str;
        
		 SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
		 SET @out_id = null;
        
		 CALL spc_coststructuredetail_save(
        
			 @p_id,
              p_coststructureid,
             (SELECT JSON_EXTRACT(@str, CONCAT('$.fromavgweight'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.toavgaeight'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.productioncost'))),
			 (SELECT JSON_EXTRACT(@str, CONCAT('$.rearingcharge'))),
             (SELECT JSON_EXTRACT(@str, CONCAT('$.fcr'))),
			 (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
		      p_userid,
			 @out_id
         );

		 SELECT @i + 1 INTO @i;
        
	  END WHILE;
    
    
    -- save daily deduction 
    
    SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_deduction) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_deduction,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_deduction_save(
        
			@p_id,
            p_coststructureid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.fromdays'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.todays'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.perratebird'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            p_userid,
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    
     SET @i = 0;
    
    WHILE @i < JSON_LENGTH(p_incentive) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_incentive,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        
        CALL spc_additionalincentive_save(
        
			@p_id,
            p_coststructureid,
            (SELECT JSON_EXTRACT(@str, CONCAT('$.fromsellingrate'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.tosellingrate'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.incentive'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.maxincentive'))),
            (SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))),
            p_userid,
			@out_id
        );
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
    END;



CREATE PROCEDURE `spc_servicepodetail_save`(
	IN p_id	INT(11),
	IN p_servicepoid INT(11),
	IN p_servicename VARCHAR(200),
	In p_description VARCHAR(200),
	IN p_itemid INT(11),
	IN p_itemname VARCHAR(200),
	IN p_quantity DECIMAL(9,3),
	IN p_unitid	INT(11),
	IN p_rate DECIMAL(9,3),
	IN p_discountpercent DECIMAL(9,3),
	IN p_discountamt DECIMAL(12,3),
	IN p_netamount	DECIMAL(12,3),
    IN p_taxid INT,
    IN p_taxpercent DECIMAL(9,3),
    IN p_cgstid INT(11),
    IN p_cgstpercent DECIMAL(9,3),
    IN p_cgstamount DECIMAL(9,3),
    IN p_sgstid INT(11),
    IN p_sgstpercent DECIMAL(9,3),
    IN p_sgstamount DECIMAL(9,3),
    IN p_igstid INT(11),
    IN p_igstpercent DECIMAL(9,3),
    IN p_igstamount DECIMAL(9,3),
    IN p_utgstid INT(11),
    IN p_utgstpercent DECIMAL(9,3),
    IN p_utgstamount DECIMAL(9,3),
    IN p_companyid INT(11),
    IN p_userid INT,
	OUT out_id INT
    )
BEGIN

SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO servicepodetail 
				(servicepoid, servicename, description, itemid, itemname,
                quantity, unitid, rate,discountpercent, discountamt, netamount, 
                taxid,taxpercent,cgstid,
                cgstpercent, cgstamount,sgstid,sgstpercent,sgstamount,igstid,igstpercent,
                igstamount,utgstid,utgstpercent,utgstamount,companyid)
			VALUES 
				(p_servicepoid, p_servicename, p_description,
                p_itemid, p_itemname, p_quantity, p_unitid,
                p_rate,p_discountpercent, p_discountamt,
                p_netamount,  p_taxid,p_taxpercent,p_cgstid,p_cgstpercent, p_cgstamount
                ,p_sgstid,p_sgstpercent, p_sgstamount,p_igstid,p_igstpercent,p_igstamount,
                p_utgstid,p_utgstpercent, p_utgstamount, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE servicepodetail
				SET servicepoid = p_servicepoid,
                servicename = p_servicename,
                description = p_description,
                itemid = p_itemid,
                itemname = p_itemname, 
                quantity = p_quantity,
                unitid = p_unitid,
                rate = p_rate,
                discountpercent = p_discountpercent,
                discountamt = p_discountamt,
                netamount = p_netamount,
                taxid = p_taxid,
                taxpercent= p_taxpercent,
                cgstid = p_cgstid,
                cgstpercent= p_cgstpercent,
                cgstamount = p_cgstamount,
                sgstid = p_sgstid,
                sgstpercent =p_sgstpercent,
                sgstamount =p_sgstamount,
                igstid = p_igstid,
                igstpercent =p_igstpercent,
                igstamount = p_igstamount,
                utgstid = p_utgstid,
                utgstpercent =p_utgstpercent,
                utgstamount = p_utgstamount,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'servicepodetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_servicepodetail_search`(
 In p_companyid INT(11)
 )
BEGIN
  SELECT
		id,
        servicepoid,
        servicename,
        description,
        itemid,
        itemname,
        quantity,
        unitid,
        rate, 
        taxid,
        discountpercent,
        discountamt,
        netamount,
		taxpercent,
	    cgstpercent,
        cgstamount,
        sgstpercent,
        sgstamount,
        igstpercent,
		igstamount,
        utgstpercent,
        utgstamount,
        sgstid,
	    cgstid,
	    igstid,
	    utgstid
	
    FROM
		servicepodetail
WHERE
		companyid = p_companyid
        
	ORDER BY id DESC;

END;



CREATE PROCEDURE `spc_servicepodetail_select`( 
	IN p_servicepoid INT,
	IN p_companyid INT
)
BEGIN
    
    SELECT
		SPD.id,
        servicepoid,
        servicename,
        description,
        itemid,
        itemname,
        quantity,
        unitid,
        rate, 
        taxid,
        discountpercent,
        discountamt,
        netamount,
        R.refname as itemunitname,
        SPD.taxpercent,
	    SPD.cgstpercent,
        SPD.cgstamount,
        SPD.sgstpercent,
        SPD.sgstamount,
        SPD.igstpercent,
		SPD.igstamount,
        SPD.utgstpercent,
        SPD.utgstamount,
        SPD.sgstid,
	    SPD.cgstid,
	    SPD.igstid,
	    SPD.utgstid
        
	
    FROM
		servicepodetail SPD
	LEFT JOIN `reference` R ON SPD.unitid = R.id
	WHERE
		SPD.servicepoid = p_servicepoid 
        AND SPD.companyid = p_companyid;
        
END;



CREATE PROCEDURE `spc_servicepo_save`(
IN p_id INT(11),
IN p_servicepono VARCHAR(30),
IN p_partnerid INT(11),
IN p_servicedate DATE,
IN p_subject VARCHAR(200),
IN p_nettotal DECIMAL(12,3),
IN p_discountper DECIMAL(12,3),
IN p_othercharges DECIMAL(12,3),
IN p_roundoff DECIMAL(12,3),
IN p_grandtotal DECIMAL(12,3),
IN p_transactionTypeid INT,
IN p_deliveryfromaddressid INT,
IN p_deliverytowarehouseid INT,
IN p_deliveryfromstatecode VARCHAR(200),
IN p_deliverytostatecode VARCHAR(200),
in p_companyid INT(11),
IN p_userid INT,
OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO servicepo 
				(servicepono, partnerid, servicedate, subject, nettotal, discountper, 
                othercharges, roundoff, grandtotal, transactiontypeid,deliveryfromaddressid,
                deliverytowarehouseid,deliveryfromstatecode,deliverytostatecode,companyid)
			VALUES 
				(p_servicepono, p_partnerid, p_servicedate, p_subject, p_nettotal, p_discountper,
                p_othercharges, p_roundoff, p_grandtotal,p_transactiontypeid,p_deliveryfromaddressid,
                p_deliverytowarehouseid, p_deliveryfromstatecode,p_deliverytostatecode, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE servicepo
				SET servicepono = p_servicepono,
                partnerid = p_partnerid,
                servicedate= p_servicedate,
                subject = p_subject, 
                nettotal = p_nettotal,
                discountper = p_discountper, 
                othercharges = p_othercharges, 
                roundoff = p_roundoff,
                grandtotal = p_grandtotal,
				transactiontypeid=p_transactiontypeid,
                deliveryfromaddressid=p_deliveryfromaddressid,
                deliverytowarehouseid = p_deliverytowarehouseid,
                deliveryfromstatecode = p_deliveryfromstatecode,
                deliverytostatecode = p_deliverytostatecode,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'servicepo', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_servicepo_search`(

    IN p_companyid INT
)
BEGIN
    
    SELECT
		SP.id,
        partnerid,
        DATE_FORMAT(servicedate,'%d/%m/%Y') as servicedate,
        SP.subject,
        nettotal,
        discountper,
        othercharges,
        roundoff,
        P.partyname as partnername,
        G.id as grposevicepoid,
        grandtotal,
		transactiontypeid,
        deliveryfromaddressid,
        deliverytowarehouseid,
		deliveryfromstatecode,
        deliverytostatecode,
        PA.address as delfromfulladdress,
        WH1.address as warehousefulladdress,
        ST.isunionterritory as warehouseisunionterritory,
        ST1.isunionterritory as deliveryfromisunionterritory,
        SP.servicepono
        
	
    FROM
		servicepo SP
	
    LEFT JOIN party p ON  SP.partnerid = p.id
    LEFT JOIN grpo G ON SP.id = G.servicepoid
    LEFT JOIN partyaddress PA ON SP.deliveryfromaddressid = PA.id
	LEFT JOIN warehouse WH1 ON SP.deliverytowarehouseid = WH1.id
    LEFT JOIN `state` ST ON WH1.stateid = ST.id
	LEFT JOIN `state` ST1 ON PA.stateid = ST1.id
	WHERE
		SP.companyid = p_companyid
        
	ORDER BY id DESC;

END;



CREATE PROCEDURE `spc_servicepo_select`(
  IN p_id INT,
  IN p_companyid INT
)
BEGIN
    
    SELECT
		id,
        partnerid,
        DATE_FORMAT(servicedate,'%d/%m/%Y') as servicedate,
        subject,
        nettotal,
        discountper,
        othercharges,
        roundoff,
        grandtotal
	
    FROM
		servicepo
	
	WHERE
		id = p_id AND
        companyid = p_companyid;
        
END;



CREATE PROCEDURE `spc_servicepo_withoutgrpo_search`(
IN p_companyid INT
)
BEGIN
SET @outsidehatcherywharehouseid = null;
  select defaultoutsidehatcherywarehouseid  INTO @outsidehatcherywharehouseid from breedersetting ;
  
    SELECT
		SP.id,
        partnerid,
        DATE_FORMAT(servicedate,'%d/%m/%Y') as servicedate,
        SP.subject,
        nettotal,
        discountper,
        othercharges,
        roundoff,
        P.partyname as partnername,
        W.warehousename,
        @outsidehatcherywharehouseid as warehouseid,
        grandtotal
	
    FROM
		servicepo SP
	
	INNER JOIN partner P ON SP.partnerid = P.id
    LEFT JOIN grpo G ON G.servicepoid = SP.id
    LEFT JOIN warehouse W ON @outsidehatcherywharehouseid = W.id
	WHERE
		SP.companyid = p_companyid
		and G.id is null
	ORDER BY SP.id DESC;

END;



CREATE PROCEDURE `spc_setterbatchforcurrentlocation_search`(
    IN p_companyid INT,
    IN p_locationid INT
)
BEGIN
    
    SELECT
		SB.id as settingno,
        DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
        SB.setterid,
        S.settername,
        SB.actualquantity as settingquantity,
        S.capacity,
        BB.id as breederbatchid,
        BB.batchname as breederbatchname,
        W.warehousename,
        L.locationname,
        SB.status,
        R.refname
       -- HSD.sourceid
	
    FROM
		setterbatch SB
	
    LEFT JOIN setter S ON SB.setterid = S.id
    LEFT JOIN breederbatch BB on SB.breederbatchid = BB.id
	LEFT JOIN warehouse W ON S.warehouseid = W.id
    LEFT JOIN location L ON S.locationid = L.id
    LEFT JOIN reference R ON SB.status = R.id
   -- LEFT JOIN hatcheryscheduledetail HSD ON SB.detailsid = HSD.id
        
	WHERE
		SB.companyid = p_companyid AND 
        SB.status = 282 AND
        S.locationid = p_locationid
        
	ORDER BY SB.id DESC;
END;



CREATE PROCEDURE `spc_setterbatch_delete`(
IN p_id INT
)
BEGIN
	DELETE From setterbatch WHERE id = p_id;
END;



CREATE PROCEDURE `spc_setterbatch_save`(
	IN p_id INT,
	IN p_setterid INT,
	IN p_scheduleid INT,
	IN p_detailsid INT,
	IN p_breederbatchid INT,
	IN p_sourceid INT,
	IN p_sourcedeliveryid INT,
	IN p_availablequantity INT,
	IN p_crackedquantity INT,
	IN p_actualquantity INT,
	IN p_batchdate date,
	IN p_partycode INT,
	IN p_status varchar(45),
	IN p_completiondate date,
    IN p_itembatch VARCHAR(100),
    IN p_requestid INT,
	IN p_companyid INT,
	IN p_userid INT,
	OUT out_id INT
)
BEGIN

	-- Get hatchery setting default values
    
	SELECT  @defaulteggsitemid:= defaulteggsitemid,
			@defaultcrackedeggsitemid := defaultcrackedeggsitemid,
			@defaulthatcherywhforeggs:= defaulthatcherywhforeggs,
            @grpowithoutinvoiceledgerid := grpowithoutinvoiceledgerid,
            @crackedeggscost:= crackedeggscost,
			@overheadcostperegg:= IFNULL(overheadcostperegg, 0),
            @eggsitemname:= I.itemname,
            @itemunitid := I.itemunitid,
            @WIPeggledgerid := WIPeggledgerid
	FROM
		hatcherysettings HS
        
        LEFT JOIN item I ON I.id = @defaulteggsitemid
    WHERE 
		HS.companyid = p_companyid;
        
        
	SET @action = null;
    
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		-- JE for stock egg to WIP egg
        
        SET @jeid = null;
		CALL spc_journalentry_save(
			NULL,
			NULL,
			1297,
			NULL,
			p_batchdate,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
            NULL,
            342,
			NULL,
			'Transfer eggs to WIP eggs JE',
			NULL,
			NULL,
			NULL,
			p_sourcedeliveryid,
			'Transfer eggs to WIP eggs JE',
			p_companyid,
			p_userid,
			@jeid
		);
        
        -- if source is own = 261
        IF(p_sourceid = 261) THEN
			-- credit stock eggs item - ledger
			SET @jedetailid1 = null;
			CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				(SELECT ledgerid FROM item WHERE id = @defaulteggsitemid),
                0,
                p_breederbatchid,
				NULL,
				NULL,
                NULL,
				NULL,
                NULL,
				0,
				(p_availablequantity * @overheadcostperegg),
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Setter batch',
				p_companyid,
				p_userid,
				@jedetailid1
			 );
			 
			 -- Debit to WIP egg - Ledger
			
			 SET @jedetailid = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				@WIPeggledgerid,
                0,
                p_breederbatchid,
				NULL,
				NULL,
                NULL,
				NULL,
                NULL,
				(p_availablequantity * @overheadcostperegg),
				0,
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Setter batch',
				p_companyid,
				p_userid,
				@jedetailid
			 );
		END IF;
        
        -- if source is purchase = 262
        IF(p_sourceid = 262) THEN
			-- credit goods receipt but not invoice item - ledger
			SET @jedetailid1 = null;
			CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				@grpowithoutinvoiceledgerid,
                0,
                p_breederbatchid,
				NULL,
				NULL,
                NULL,
				NULL,
                NULL,
				0,
				(p_availablequantity * @overheadcostperegg),
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Setter batch',
				p_companyid,
				p_userid,
				@jedetailid1
			 );
			 
			 -- Debit to WIP egg - Ledger
			
			 SET @jedetailid = null;
			 CALL spc_journalentrydetail_save( 
				NULL,
				@jeid,
				@WIPeggledgerid,
                0,
                p_breederbatchid,
				NULL,
				NULL,
                NULL,
				NULL,
                NULL,
				(p_availablequantity * @overheadcostperegg),
				0,
				NULL,
				NULL,
				NULL,
				@itemid,
				NULL,
				'Setter batch',
				p_companyid,
				p_userid,
				@jedetailid
			 );
		END IF;
        
        
		-- Create setter batch
		INSERT INTO setterbatch
				(setterid, scheduleid, detailsid, breederbatchid , 
                sourceid, sourcedeliveryid, availablequantity, 
                crackedquantity, actualquantity, batchdate, partycode, status, completiondate , itembatch, companyid)
			VALUES  
				(p_setterid, p_scheduleid, p_detailsid, p_breederbatchid , 
                p_sourceid, p_sourcedeliveryid, p_availablequantity, 
                p_crackedquantity, p_actualquantity, p_batchdate, p_partycode, 282, p_completiondate ,p_itembatch, p_companyid);
                
	    SET @action = 'INSERT';
      
       IF(LAST_INSERT_ID() > 0) THEN
		 UPDATE hatcheryscheduledetail
         SET statusid = 244
         WHERE id = p_detailsid;
       END IF;
      
	ELSE
    
		UPDATE setterbatch
			SET 
				setterid	=	p_setterid,
				scheduleid	=	p_scheduleid,
                detailsid = p_detailsid, 
                breederbatchid = p_breederbatchid,
                sourceid = p_sourceid, 
                sourcedeliveryid = p_sourcedeliveryid,
                availablequantity = p_availablequantity,
                crackedquantity = p_crackedquantity,
                actualquantity = p_actualquantity,
                batchdate = p_batchdate,
                companyid = p_companyid,
                partycode = p_partycode,
                status = p_status,
                completiondate = p_completiondate,
				itembatch = p_itembatch,
                requestid = p_requestid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    
        
        -- JE for WIP egg ledger to cracked egg ledger
        SET @jeid1 = null;
		CALL spc_journalentry_save(
			NULL,
			NULL,
			1297,
			NULL,
			p_batchdate,
			NULL,
			-- NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
            NULL,
            342,
			NULL,
			'Transfer WIP eggs to cracked eggs JE',
			NULL,
			NULL,
			NULL,
			out_id,
			'Transfer WIP eggs to cracked eggs JE',
			p_companyid,
			p_userid,
			@jeid1
		);
        
        -- credit WIP eggs item - ledger
        SET @jedetailid2 = null;
        CALL spc_journalentrydetail_save( 
			NULL,
			@jeid1,
			@WIPeggledgerid,
            0,
            out_id,
			NULL,
			NULL,
            NULL,
            NULL,
            NULL,
			0,
			(p_crackedquantity * @overheadcostperegg),
			NULL,
			NULL,
			NULL,
			@itemid,
			NULL,
			'Setter batch',
			p_companyid,
			p_userid,
			@jedetailid2
		 );
		 
		 -- Debit to cracked egg - Ledger
		
		 SET @jedetailid3 = null;
		 CALL spc_journalentrydetail_save( 
			NULL,
			@jeid1,
            (SELECT ledgerid FROM item WHERE id = @defaultcrackedeggsitemid),
            0,
            out_id,
			NULL,
			NULL,
            NULL,
			NULL,
			NULL,
			(p_crackedquantity * @overheadcostperegg),
			0,
			NULL,
			NULL,
			NULL,
			@itemid,
			NULL,
			'Setter batch',
			p_companyid,
			p_userid,
			@jedetailid3
		 );
        
        
    
    -- add setter batch reference in material transfer
    
    IF p_sourceid = 261 THEN -- 261 is for 'OWN'
    
		UPDATE materialtransfer SET tobatchid = out_id WHERE id = p_sourcedeliveryid;
    
    -- ELSE 
    
    END IF;
		
        -- UPDATE materialreceipt SET batchid = out_id WHERE id = @out_recid;
    
    -- Update the new setterbatchh id as tobatchid in material request table
    
		UPDATE materialrequest SET tobatchid = out_id WHERE id = p_requestid;
    
    -- Material issue entry on create Setter batch for cracked eggs
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
    -- We are using breeder batch as a batch in material issue
		SET @out_issueid = NULL;
		CALL spc_materialissue_save(
			NULL, now(), 381, p_breederbatchid, 362, NULL,
			p_userid, (SELECT warehouseid FROM setter WHERE id = p_setterid),
            (SELECT warehousebinid FROM setter WHERE id = p_setterid),
            p_userid, NOW(),
			p_companyid, p_userid, @out_issueid
		);
			
		SET @out_issuedetailid = NULL;
		CALL spc_materialissuedetail_save(
			NULL, @out_issueid, @defaulteggsitemid, @eggsitemname,
			p_crackedquantity, @crackedeggscost, 
			(p_crackedquantity * @crackedeggscost),
			@itemunitid, p_itembatch,
			p_companyid, p_userid, @out_issuedetailid
		);
        
        

		-- material movement entry for material issue
		SET @out_movid4 = NULL;
		CALL spc_materialmovement_save(
			NULL, @defaulteggsitemid, p_itembatch, 683,
			@out_issueid, p_batchdate, p_crackedquantity,
			(SELECT warehouseid FROM setter WHERE id = p_setterid), 
            (SELECT warehousebinid FROM setter WHERE id = p_setterid),
            @defaulthatcherywhforeggs, 
            (SELECT id FROM warehousebin WHERE warehouseid = @defaulthatcherywhforeggs AND isdefault = 1),
			(p_crackedquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			p_companyid, p_userid, @out_movid4
		);
    
    
    
		-- Make material receipt entry for cracked eggs
			SET @out_recid = NULL;
			CALL spc_materialreceipt_save(
				NULL, now(), 342, out_id, 322, NULL,
				p_userid, p_userid, p_batchdate, p_companyid,
				p_userid, @out_recid
			);
        
			-- Material receipt detail entry
			SET @out_recdetailid = NULL;
			CALL spc_materialreceiptdetail_save(
				NULL, @out_recid, @defaulteggsitemid, (SELECT itemname FROM item WHERE id = @defaulteggsitemid), 
				p_crackedquantity, (SELECT unitcost FROM item WHERE id = @defaulteggsitemid), 
				(p_crackedquantity * @crackedeggscost),
				(SELECT itemunitid FROM item WHERE id = @defaulteggsitemid), p_itembatch,
				@defaulthatcherywhforeggs,
                (SELECT id FROM warehousebin WHERE warehouseid = @defaulthatcherywhforeggs AND isdefault = 1),
                p_companyid, p_userid, NULL, @out_recdetailid
			);
              
			-- Make material movement entry for material receipt
			SET @out_movid5 = NULL;
			CALL spc_materialmovement_save(
				NULL, @defaulteggsitemid, p_itembatch, 684,
				@out_recid, p_batchdate, p_crackedquantity,
				(SELECT warehouseid FROM setter WHERE id = p_setterid), 
				(SELECT warehousebinid FROM setter WHERE id = p_setterid),
                @defaulthatcherywhforeggs,
                (SELECT id FROM warehousebin WHERE warehouseid = @defaulthatcherywhforeggs AND isdefault = 1),
				(p_crackedquantity * @crackedeggscost),
				p_companyid, p_userid, @out_movid5
			);
    
    END IF;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'setterbatch', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_setterbatch_save1`(
	IN p_id INT,
	IN p_setterid INT,
	IN p_scheduleid INT,
	IN p_detailsid INT,
	IN p_breederbatchid INT,
	IN p_sourceid INT,
	IN p_sourcedeliveryid INT,
	IN p_availablequantity INT,
	IN p_crackedquantity INT,
	IN p_actualquantity INT,
	IN p_batchdate date,
	IN p_partycode INT,
	IN p_status varchar(45),
	IN p_completiondate date,
    IN p_itembatch VARCHAR(100),
    IN p_requestid INT,
	IN p_companyid INT,
	IN p_userid INT,
	OUT out_id INT
)
BEGIN

	-- Get hatchery setting default values
    
	SELECT  @defaulteggsitemid:= defaulteggsitemid,
			@defaulthatcherywhforeggs:= defaulthatcherywhforeggs,
            @crackedeggscost:= crackedeggscost,
			@overheadcostperegg:= IFNULL(overheadcostperegg, 0),
            @eggsitemname:= I.itemname,
            @itemunitid= I.itemunitid
	FROM
		hatcherysettings HS
        
        LEFT JOIN item I ON I.id = @defaulteggsitemid
    WHERE 
		HS.companyid = p_companyid;
        
        
	SET @action = null;
    
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
    
		-- Do material transfer from cold room(default hatchery warehouse) to particular setter warehouse
        SET @out_transferid = NULL;
		CALL spc_materialtransfer_save(
			NULL, 502, 502, 582, p_batchdate, p_batchdate,NULL,
			@defaulthatcherywhforeggs, (SELECT warehouseid FROM setter WHERE id = p_setterid), 621, p_breederbatchid,
			NULL, NULL, p_companyid, p_userid, @out_transferid
		);
        
		SET @out_transferdetailid = NULL;
		CALL spc_materialtransferdetail_save(
			NULL, @out_transferid, @defaulteggsitemid, @eggsitemname,
			p_availablequantity, p_availablequantity, 
			(SELECT refname FROM reference WHERE id = @itemunitid),
			p_itembatch, p_userid, p_companyid, @out_transferdetailid
		);
        
        -- Do material movement entry for material transfer
        SET @out_movid1 = NULL;
		CALL spc_materialmovement_save(
			NULL, @defaulteggsitemid, p_itembatch, 682,
			@out_transferid, p_batchdate, p_availablequantity,
			@defaulthatcherywhforeggs, (SELECT warehouseid FROM setter WHERE id = p_setterid LIMIT 1),
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid LIMIT 1)),
			p_companyid, p_userid, @out_movid1
		);
        
        
        -- Material Issue from cold room(default hatchery warehouse)
		/*SET @out_issueid1 = NULL;
		CALL spc_materialissue_save(
			NULL, p_batchdate, 382, p_breederbatchid, 362, NULL,
			p_userid, @defaulthatcherywhforeggs, p_userid, p_batchdate,
			p_companyid, p_userid, @out_issueid1
		);
                            
		-- Itembatch details
		SET @out_issuedetailid1 = NULL;
		CALL spc_materialissuedetail_save(
			NULL, @out_issueid1, @defaulteggsitemid, (SELECT itemname FROM item WHERE id = @defaulteggsitemid),
			p_actualquantity, (SELECT unitcost FROM item WHERE id = @defaulteggsitemid), 
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			NULL, p_itembatch,
			p_companyid, p_userid, @out_issuedetailid1
		);

		-- material movement entry for material issue
		SET @out_movid2 = NULL;
		CALL spc_materialmovement_save(
			NULL, @defaulteggsitemid, p_itembatch, 683,
			@out_issueid1, p_batchdate, p_actualquantity,
			@defaulthatcherywhforeggs, NULL,
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			p_companyid, p_userid, @out_movid2
		);
        
        -- Make material receipt entry for Transfered eggs
		SET @out_recid = NULL;
		CALL spc_materialreceipt_save(
			NULL, p_batchdate, 342, NULL, 322, NULL,
			p_userid, p_userid, p_batchdate, p_companyid,
			p_userid, @out_recid
		);
        
        SET @out_recdetailid = NULL;
        CALL spc_materialreceiptdetail_save(
			NULL, @out_recid, @defaulteggsitemid, (SELECT itemname FROM item WHERE id = @defaulteggsitemid), 
			p_actualquantity, (SELECT unitcost FROM item WHERE id = @defaulteggsitemid), 
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			(SELECT itemunitid FROM item WHERE id = @defaulteggsitemid),
            (SELECT batchname FROM breederbatch WHERE id = p_breederbatchid),
			(SELECT warehouseid FROM setter WHERE id = p_setterid), p_companyid,
			p_userid, NULL, @out_recdetailid
		);
        
        -- material movement entry for material receipt
		SET @out_movid3 = NULL;
		CALL spc_materialmovement_save(
			NULL, @defaulteggsitemid, NULL, 684,
			@out_recid, p_batchdate, p_actualquantity,
			@defaulthatcherywhforeggs, (SELECT warehouseid FROM setter WHERE id = p_setterid),
			(p_actualquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			p_companyid, p_userid, @out_movid3
		);*/
	
		-- Create setter batch
		INSERT INTO setterbatch
				(setterid, scheduleid, detailsid, breederbatchid , 
                sourceid, sourcedeliveryid, availablequantity, 
                crackedquantity, actualquantity, batchdate, partycode, status, completiondate , itembatch, companyid)
			VALUES  
				(p_setterid, p_scheduleid, p_detailsid, p_breederbatchid , 
                p_sourceid, p_sourcedeliveryid, p_availablequantity, 
                p_crackedquantity, p_actualquantity, p_batchdate, p_partycode, 282, p_completiondate ,p_itembatch, p_companyid);
                
	    SET @action = 'INSERT';
      
       IF(LAST_INSERT_ID() > 0) THEN
		 UPDATE hatcheryscheduledetail
         SET statusid = 244
         WHERE id = p_detailsid;
       END IF;
      
	ELSE
    
		UPDATE setterbatch
			SET 
				setterid	=	p_setterid,
				scheduleid	=	p_scheduleid,
                detailsid = p_detailsid, 
                breederbatchid = p_breederbatchid,
                sourceid = p_sourceid, 
                sourcedeliveryid = p_sourcedeliveryid,
                availablequantity = p_availablequantity,
                crackedquantity = p_crackedquantity,
                actualquantity = p_actualquantity,
                batchdate = p_batchdate,
                companyid = p_companyid,
                partycode = p_partycode,
                status = p_status,
                completiondate = p_completiondate,
				itembatch = p_itembatch,
                requestid = p_requestid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
    -- add setter batch reference in material transfer
    
    IF p_sourceid = 261 THEN -- 261 is for 'OWN'
    
		UPDATE materialtransfer SET tobatchid = out_id WHERE id = p_sourcedeliveryid;
    
    -- ELSE 
    
    END IF;
		
        UPDATE materialreceipt SET batchid = out_id WHERE id = @out_recid;
    
    -- Update the new setterbatchh id as tobatchid in material request table
    
		UPDATE materialrequest SET tobatchid = out_id WHERE id = p_requestid;
    
    -- Material issue entry on create Setter batch for cracked eggs
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
    
    -- We are using breeder batch as a batch in material issue
		SET @out_issueid = NULL;
		CALL spc_materialissue_save(
			NULL, now(), 381, p_breederbatchid, 362, NULL,
			p_userid, @defaulthatcherywhforeggs, p_userid, NOW(),
			p_companyid, p_userid, @out_issueid
		);
			
		SET @out_issuedetailid = NULL;
		CALL spc_materialissuedetail_save(
			NULL, @out_issueid, @defaulteggsitemid, @eggsitemname,
			p_crackedquantity, (SELECT unitcost FROM item WHERE id = @defaulteggsitemid), 
			((p_crackedquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid))),
			@itemunitid, p_itembatch,
			p_companyid, p_userid, @out_issuedetailid
		);
        
        

		-- material movement entry for material issue
		SET @out_movid4 = NULL;
		CALL spc_materialmovement_save(
			NULL, @defaulteggsitemid, p_itembatch, 683,
			@out_issueid, p_batchdate, p_crackedquantity,
			@defaulthatcherywhforeggs, NULL,
			(p_crackedquantity * (SELECT unitcost FROM item WHERE id = @defaulteggsitemid)),
			p_companyid, p_userid, @out_movid4
		);
    
    
    
		-- Make material receipt entry for cracked eggs
			SET @out_recid = NULL;
			CALL spc_materialreceipt_save(
				NULL, now(), 342, out_id, 322, NULL,
				p_userid, p_userid, p_batchdate, p_companyid,
				p_userid, @out_recid
			);
        
			-- Material receipt detail entry
			SET @out_recdetailid = NULL;
			CALL spc_materialreceiptdetail_save(
				NULL, @out_recid, @defaulteggsitemid, (SELECT itemname FROM item WHERE id = @defaulteggsitemid), 
				p_crackedquantity, (SELECT unitcost FROM item WHERE id = @defaulteggsitemid), 
				(p_crackedquantity * @crackedeggscost),
				(SELECT itemunitid FROM item WHERE id = @defaulteggsitemid), p_itembatch,
				(SELECT warehouseid FROM setter WHERE id = p_setterid), p_companyid,
				p_userid, NULL, @out_recdetailid
			);
              
			-- Make material movement entry for material receipt
			SET @out_movid5 = NULL;
			CALL spc_materialmovement_save(
				NULL, @defaulteggsitemid, p_itembatch, 684,
				@out_recid, p_batchdate, p_crackedquantity,
				@defaulthatcherywhforeggs, (SELECT warehouseid FROM setter WHERE id = p_setterid),
				(p_crackedquantity * @crackedeggscost),
				p_companyid, p_userid, @out_movid5
			);
    
    END IF;
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'setterbatch', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_setterbatch_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		SB.id as settingno,
        SB.setterid,
        L.id as locationid,
		L.locationname,
		BB.batchname as breederbatchname,
		S.settername,
        DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
        SB.scheduleid,
        SB.status,
        R.refname,
        SB.itembatch
	
    FROM
		setterbatch SB
	
    LEFT JOIN setter S ON SB.setterid = S.id
    LEFT JOIN breederbatch BB on SB.breederbatchid = BB.id
	LEFT JOIN location L ON S.locationid = L.id
    LEFT JOIN reference R ON R.id = SB.status    
        
	WHERE
		SB.companyid = p_companyid
        
	ORDER BY
		SB.id DESC;
END;



CREATE PROCEDURE `spc_setterbatch_select`(
 IN p_id INT
)
BEGIN

	SELECT
		 SB.id as settingno,
         SB.setterid,
         S.settername,
         SB.scheduleid,
         SB.detailsid,
         SB.breederbatchid,
         SB.sourceid,
         R.refname as source,
         SB.sourcedeliveryid,
         SB.availablequantity,
         SB.crackedquantity,
         SB.actualquantity,
         DATE_FORMAT(SB.batchdate,'%d/%m/%Y') as settingdate,
         SB.partycode,
         DATE_FORMAT(SB.completiondate,'%d/%m/%Y') as completiondate,
         BB.batchname as breederbatchname,
         HSD.plannedquantity,
         SB.itembatch
         
FROM
		setterbatch SB
        LEFT JOIN setter S ON SB.setterid = S.id
		LEFT JOIN reference R ON SB.sourceid = R.id
        LEFT JOIN hatcheryscheduledetail HSD ON SB.detailsid = HSD.id
        LEFT JOIN breederbatch BB on SB.breederbatchid = BB.id
        
	WHERE
		SB.id = p_id;

END;



CREATE PROCEDURE `spc_setterdailytransaction_delete`(
	IN p_id INT,
    IN p_companyid INT,
    IN p_userid INT
)
BEGIN
	DELETE FROM setterdailytransaction WHERE id = p_id;
    
    -- record log
    CALL spc_commonlog_save(p_companyid, 'setterdailytransaction', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_setterdailytransaction_save`(
	IN p_id INT,
    IN p_setterbatchid INT,
    IN p_setterid INT,
    IN p_date DATE,
    IN p_time VARCHAR(50),
    IN p_temperature DECIMAL(18,3),
    IN p_humidity DECIMAL(18,3),
    IN p_rotationid INT,
    IN p_remark VARCHAR(500),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
	IF EXISTS(
            SELECT id from setterdailytransaction 
            where date > p_date AND setterbatchid = p_setterbatchid
			AND (
				  (NULLIF(p_id, 0) IS NULL)
				 -- OR 
				 -- (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id)
                )
            
            ) THEN  
            BEGIN
        
				SELECT -1 INTO out_id;
	
			 END;
            
	ELSEIF EXISTS(
            SELECT id from setterdailytransaction where date = p_date AND time = p_time  AND setterbatchid = p_setterbatchid
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN  BEGIN
        
				SELECT -2 INTO out_id;
	
			 END;
             
    ELSE 
    
       BEGIN
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO setterdailytransaction 
				(id, setterbatchid, setterid, date, time, temperature, humidity, rotationid, remark, companyid)
			VALUES 
				(p_id, p_setterbatchid, p_setterid, p_date, p_time, p_temperature, p_humidity, p_rotationid, p_remark, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE setterdailytransaction
				SET setterbatchid = p_setterbatchid, 
                setterid = p_setterid,
                date = p_date, 
                time = p_time,
                temperature = p_temperature,
                humidity = p_humidity,
                rotationid = p_rotationid,
                remark = p_remark,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
           SET @action = 'UPDATE';     
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
    CALL spc_commonlog_save(p_companyid, 'setterdailytransaction', out_id, @action, p_userid);
   
   END;
   
   END IF;
END;



CREATE PROCEDURE `spc_setterdailytransaction_search`(
	IN p_settingno INT,
    IN p_companyid INT
)
BEGIN
    
    SELECT
			ST.id ,
			L.locationname,
            ST.setterbatchid as settingno,
            ST.setterid,
			DATE_FORMAT(ST.date,'%d/%m/%Y') as date,
            time,
            temperature,
            humidity,
            rotationid,
            R.refname,
            remark
			
    FROM
		setterdailytransaction ST
	
    LEFT JOIN setter S ON ST.setterid = S.id
	LEFT JOIN location L ON S.locationid = L.id
    LEFT JOIN reference R ON ST.rotationid = R.id
        
	WHERE
		ST.companyid = p_companyid AND 
        ST.setterbatchid = p_settingno
        ORDER BY ST.date desc;
END;



CREATE PROCEDURE `spc_setterdailytransaction_select`(
	IN p_id INT
)
BEGIN
    
    SELECT
		  SDT.id,
          setterbatchid,
          setterid,
		  DATE_FORMAT(date,'%d/%m/%Y') as date,
          -- TIME_FORMAT(time, '%h:%i %p') as time,
          time,
          temperature,
          humidity,
          rotationid,
          R.refname as rotation,
          remark,
          companyid
	
    FROM
		setterdailytransaction SDT
		LEFT JOIN reference R ON SDT.rotationid = R.id

	WHERE
		 SDT.id = p_id;
END;



CREATE PROCEDURE `spc_setterslot_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN
	DELETE FROM setterslots WHERE id = p_id;
    
	-- record log
    CALL spc_commonlog_save(p_companyid, 'setterslots', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_setterslot_save`(
	IN p_id INT,
    IN p_setterid INT,
    IN p_slotname VARCHAR(50),
    IN p_capacity INT,
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO setterslots
				(id, setterid, slotname, capacity, companyid)
			VALUES 
				(p_id, p_setterid, p_slotname, p_capacity, p_companyid);
		
        SET @action = 'INSERT';
	ELSE
    
		UPDATE setterslots
				SET setterid = p_setterid, 
                slotname = p_slotname, 
                capacity = p_capacity,
                companyid = p_companyid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
		SET @action = 'UPDATE';  
        
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
     CALL spc_commonlog_save(p_companyid, 'setterslots', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_setterslot_search`(
  IN p_setterid INT 
)
BEGIN
	SELECT id,
		   setterid,
		   slotname,
           capacity,
           companyid
            
    FROM  setterslots
    WHERE 
          setterid = p_setterid;
END;



CREATE PROCEDURE `spc_setter_delete`(
	IN p_id INT,
	IN p_companyid INT,
    IN p_userid INT
)
BEGIN
    DELETE FROM setterslots WHERE setterid = p_id;
	DELETE FROM setter WHERE id = p_id;
    
      -- record log
     CALL spc_commonlog_save(p_companyid, 'setter', p_id, 'deleted', p_userid);
END;



CREATE PROCEDURE `spc_setter_prevnext`(
	IN p_id INT,
    IN p_action 

VARCHAR(10)
)
BEGIN
    IF(p_id = 0) THEN
   
     IF(p_action = 'desc') THEN  -- select last record
    
        SELECT
              S.setterid,
              settername,
              capacity,
              S.locationid,
              L.locationcode,
              L.locationname,
              S.warehouseid,
              W.warehousecode,
              W.warehousename,
              typeid,
              machinedetails,
              S.active
        FROM 
             setter S
		     LEFT JOIN location L on S.locationid = L.locationid
             LEFT JOIN warehouse W on S.warehouseid = W.warehouseid
             
	    ORDER BY setterid DESC LIMIT 1;

 
     ELSE --  select first record
        SELECT 
              S.setterid,
              settername,
              capacity,
              S.locationid,
              L.locationcode,
              L.locationname,
              S.warehouseid,
              W.warehousecode,
              W.warehousename,
              typeid,
              machinedetails,
              S.active
        FROM 
			 setter S
		     LEFT JOIN location L on S.locationid = L.locationid
             LEFT JOIN warehouse W on S.warehouseid = W.warehouseid 
        
        ORDER BY setterid limit 1;
     
     END IF;
     
   ELSE 
   
	 IF(p_action = 'desc') THEN
     
      IF EXISTS( SELECT setterid, settername, capacity, locationid, warehouseid, typeid, machinedetails, active FROM setter WHERE setterid < p_id ORDER BY setterid DESC LIMIT 1) THEN
           SELECT 
                S.setterid,
				settername,
				capacity,
				S.locationid,
				L.locationcode,
				L.locationname,
				S.warehouseid,
				W.warehousecode,
				W.warehousename,
				typeid,
				machinedetails,
				S.active
           FROM 
				setter S
				LEFT JOIN location L on S.locationid = L.locationid
				LEFT JOIN warehouse W on S.warehouseid = W.warehouseid 
           WHERE S.setterid < p_id 
           ORDER BY setterid DESC LIMIT 1;
           
	  ELSE
          
          SELECT 
                S.setterid,
				settername,
				capacity,
				S.locationid,
				L.locationcode,
				L.locationname,
				S.warehouseid,
				W.warehousecode,
				W.warehousename,
				typeid,
				machinedetails,
				S.active
	      FROM 
              setter S
			  LEFT JOIN location L on S.locationid = L.locationid
			  LEFT JOIN warehouse W on S.warehouseid = W.warehouseid 
           
	      WHERE S.setterid > p_id ORDER BY setterid DESC LIMIT 1;
          
	  END IF;
        
     ELSE
     
       IF EXISTS (SELECT setterid,settername,capacity,locationid, warehouseid, typeid, machinedetails, active FROM setter WHERE setterid > p_id ORDER BY setterid ASC LIMIT 1) THEN
          SELECT 
			    S.setterid,
				settername,
				capacity,
				S.locationid,
				L.locationcode,
				L.locationname,
				S.warehouseid,
				W.warehousecode,
				W.warehousename,
				typeid,
				machinedetails,
				S.active
	      FROM 
              setter S
			  LEFT JOIN location L on S.locationid = L.locationid
			  LEFT JOIN warehouse W on S.warehouseid = W.warehouseid 
           
	      WHERE S.setterid > p_id ORDER BY setterid ASC LIMIT 1;
          
       ELSE
          SELECT 
                S.setterid,
				settername,
				capacity,
				S.locationid,
				L.locationcode,
				L.locationname,
				S.warehouseid,
				W.warehousecode,
				W.warehousename,
				typeid,
				machinedetails,
				S.active
          FROM 
               setter S
			   LEFT JOIN location L on S.locationid = L.locationid
			   LEFT JOIN warehouse W on S.warehouseid = W.warehouseid 
              
          WHERE S.setterid < p_id ORDER BY setterid ASC LIMIT 1;
          
       END IF;
	
     END IF;
     
   END IF;
        
END;



CREATE PROCEDURE `spc_setter_save`(
	IN p_id INT,
	IN p_settername VARCHAR(100),
	IN p_capacity INT,
    IN p_locationid INT,
    IN p_warehouseid INT,
    IN p_typeid INT,
    IN p_machinedetails VARCHAR(500),
    IN p_active TINYINT,
    IN p_userid INT,
    IN p_companyid INT,
    OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF EXISTS(
            SELECT settername from setter where LOWER(settername) = LOWER(p_settername)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    
    BEGIN
    
			IF(NULLIF(p_id, '0') IS NULL) THEN

				INSERT INTO setter
						(id, settername, capacity, locationid, warehouseid, typeid, machinedetails, active, companyid)
					VALUES 
						(p_id, p_settername, p_capacity, p_locationid, p_warehouseid, p_typeid, p_machinedetails, p_active, p_companyid );
				
				SET @action = 'INSERT';

			ELSE

				UPDATE setter
						SET settername = p_settername, 
						capacity = p_capacity, 
						locationid = p_locationid,
						warehouseid = p_warehouseid,
						typeid = p_typeid,
						machinedetails = p_machinedetails,
						active = p_active,
						companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
						
					SET @action = 'UPDATE';     
			 
		   END IF;
           
           	SELECT LAST_INSERT_ID() INTO out_id;
            
            -- Create default warehousebin
            SET @out_warehousebinid = NULL;
			CALL spc_warehousebin_save(
				NULL, p_warehouseid, CONCAT(p_settername,'-BIN'), p_settername,
				p_companyid, 0, p_userid, @out_warehousebinid
			);
            
            -- update warehouse bin id 
    
			UPDATE setter SET warehousebinid = @out_warehousebinid WHERE id = out_id;
					
			-- record log
			-- CALL spc_commonlog_save(p_companyid, 'setter', out_id, @action, p_userid);
     END;
     
   END IF;

END;



CREATE PROCEDURE `spc_setter_search`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		 S.id,
         settername,
         capacity,
         L.locationname,
         W.warehousename,
         machinedetails,
         S.active
	FROM
		setter S
	    LEFT JOIN location L on S.locationid = L.id
        LEFT JOIN warehouse W on S.warehouseid = W.id
	WHERE
		S.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_setter_select`(
	IN p_id INT
)
BEGIN
    
    SELECT
		S.id,
        settername,
        capacity,
		S.locationid,
        L.locationcode,
        L.locationname,
        S.warehouseid,
        W.warehousecode,
        W.warehousename,
        S.active,
        typeid,
        machinedetails
	
    FROM
		setter S
	
    LEFT JOIN location L ON S.locationid = L.id
    LEFT JOIN warehouse W ON S.warehouseid = W.id

	WHERE
		S.id = p_id;
      

END;



CREATE PROCEDURE `spc_settingreport_select`(
 IN p_fromdate DATE,
 IN p_todate DATE,
 IN p_companyid INT
)
BEGIN
	SELECT
		 id,
         setterid,
         scheduleid,
         detailsid,
         breederbatchid,
         sourceid,
         sourcedeliveryid,
         availablequantity,
         crackedquantity,
         actualquantity,
         DATE_FORMAT(batchdate,'%d/%m/%Y') as batchdate,
         partycode,
         status,
         DATE_FORMAT(completiondate,'%d/%m/%Y') as completiondate,
         companyid
         
	FROM
		setterbatch BT
        
	 WHERE
		 companyid = p_companyid
         AND
		 BT.batchdate BETWEEN p_fromdate AND p_todate;
         

END;



CREATE PROCEDURE `spc_settingreport_select1`(
	 IN p_fromdate DATE,
	 IN p_todate DATE,
	 IN p_companyid INT
)
BEGIN

	
    SET @row_number = 0;
    
    SELECT 
    CASE WHEN (Temp1.breederbatchid = 'Grand Total') THEN '' 
			ELSE (@row_number:=@row_number + 1)  END sqno, 
            
    Temp1.* from 
    (

	SELECT 	
		CASE WHEN (breederbatchid = 'Sub Total') THEN '' ELSE setterid END AS setterid, 
		CASE WHEN (breederbatchid = 'Sub Total') THEN '' ELSE batchdate END AS batchdate,  
		CASE WHEN (breederbatchid = 'Sub Total') THEN '' ELSE sourcename END AS sourcename, 
		breederbatchid, 
		availablequantity, 
		crackedquantity, 
        CASE WHEN (breederbatchid = 'Sub Total') THEN '' ELSE crackedpercent END AS crackedpercent, 
		actualquantity
        
		FROM (

			SELECT
				COALESCE(setterid, '') AS setterid, 		 
				COALESCE(DATE_FORMAT(batchdate,'%d/%m/%Y'), '') AS batchdate, 		 
				
				COALESCE(breederbatchid, '') AS breederbatchid, 		 
                COALESCE(REF1.refname, '') AS sourcename, 		 
				
				SUM(availablequantity) AS availablequantity,
				SUM(crackedquantity) AS crackedquantity,
                ROUND(((IFNULL(SUM(crackedquantity), 0) * 100) / IFNULL(SUM(availablequantity), 0)),2) AS crackedpercent,		
				SUM(actualquantity) AS actualquantity
				 
			FROM
				setterbatch BT
                
			LEFT JOIN `reference` REF1 ON BT.sourceid = REF1.id
				
			WHERE 
				BT.companyid = p_companyid 
                AND BT.batchdate BETWEEN p_fromdate AND p_todate
            
			GROUP BY setterid, batchdate, breederbatchid, REF1.refname
            
            WITH ROLLUP
            
			HAVING sourcename != ''
            
		) AS TEMP
        
        
        UNION
        
		SELECT 
        
			null, 
			null, 
            null, 
            'Grand Total', 
			SUM(availablequantity) AS availablequantity ,
            SUM(crackedquantity) AS crackedquantity ,
            '' AS crackedpercent,
            -- ROUND(((IFNULL(SUM(crackedquantity), 0) * 100) / IFNULL(SUM(availablequantity), 0)),2) crackedpercent,		
            SUM(actualquantity) AS actualquantity 
		FROM
				setterbatch BT
		WHERE 
				BT.companyid = p_companyid 
                AND BT.batchdate BETWEEN p_fromdate AND p_todate
	) AS Temp1;

END;



CREATE PROCEDURE `spc_state_ddl`(
)
BEGIN

	SELECT id,
		   countryid,
           statename
           
	FROM state;
    
END;



CREATE PROCEDURE `spc_state_search`(
	IN p_countryid INT(11)
)
BEGIN

	SELECT id,
		   countryid,
           statecode,
           statename
           
	FROM state
    
    WHERE countryid = p_countryid;

END;



CREATE PROCEDURE `spc_subledgerregister_report`(
	IN p_ledgerid INT(11),
    IN p_fromdate DATE,
	IN p_todate DATE,
    IN p_companyid INT(11)
)
BEGIN

	SELECT DATE_FORMAT(JE.voucherdate,'%d/%m/%Y') as voucherdate,
		   JE.id as jeid,
           JE.vouchertypeid,
           REF.refname,
           JED.narration,
           (JED.dramount),
           JED.cramount,
           JE.chequeno,
		   DATE_FORMAT(JE.chequedate,'%d/%m/%Y') as chequedate,
           JE.branchid,
           BR.branchcode,
           BR.branchname,
           JED.acledgerid,
           COA.glcode,
           JED.partyid
           
	FROM journalentry JE
    
    LEFT JOIN `reference` REF ON JE.vouchertypeid = REF.id
    LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    LEFT JOIN chartofaccount COA ON JED.acledgerid = JED.acledgerid
    LEFT JOIN branch BR ON BR.id = JE.branchid
    
    WHERE JED.acledgerid = p_ledgerid 
    AND JE.companyid = p_companyid
    AND JE.voucherdate BETWEEN p_fromdate AND p_todate
    
    GROUP BY JED.acledgerid;
END;



CREATE PROCEDURE `spc_subscription_import`(
	IN p_companyid INT
)
BEGIN

	select * from logicalkeys.subscription;

END;



CREATE PROCEDURE `spc_symptomsdetail_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM symptomsdetail WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'symptomsdetail', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_symptomsdetail_save`(
 IN p_id INT(11),
 IN p_symptomsid INT(11),
 IN p_symptomsname VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO symptomsdetail
              (symptomsid, symptomsname, companyid)
       VALUES
            (p_symptomsid, p_symptomsname, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE symptomsdetail 
   
	SET symptomsid = p_symptomsid,
        symptomsname = p_symptomsname,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'symptomsdetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_symptomsdetail_search`(
 IN p_symptomsid INT(11)
)
BEGIN

	SELECT id, symptomsname, companyid
           
	FROM symptomsdetail
    
    WHERE symptomsid = p_symptomsid;

END;



CREATE PROCEDURE `spc_symptoms_byleasionid`( 
 IN p_lesionid INT(11)
  )
BEGIN
 SELECT S.id, SD.symptomsname, S.companyid
  
  FROM
  symptoms S
LEFT JOIN symptomsdetail SD ON S.id = SD.symptomsid

	WHERE 
    S.lesionid = p_lesionid;
END;



CREATE PROCEDURE `spc_symptoms_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM symptoms WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'symptoms', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_symptoms_save`( 
 IN p_id INT(11),
 IN p_organid INT(11),
 IN p_lesionid INT(11),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO symptoms
              (organid, lesionid, companyid)
       VALUES
            (p_organid, p_lesionid, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE symptoms 
   
	SET organid = p_organid,
        lesionid = p_lesionid,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'symptoms', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_symptoms_search`(
IN p_companyid INT(11)
)
BEGIN

	SELECT ST.id, ST.organid, ST.lesionid, ST.companyid, O.organname, LD.lesionname
           
	FROM symptoms ST
    
    LEFT JOIN organ O ON O.id = ST.organid
    LEFT JOIN lesiondetail LD ON LD.lesionid = ST.lesionid
    
    WHERE ST.companyid = p_companyid
    
    order by ST.id;
 
END;



CREATE PROCEDURE `spc_symptoms_select`(
 IN p_id INT(11)
)
BEGIN

	SELECT id, organid,lesionid, companyid
           
	FROM symptoms
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_tax_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM tax WHERE id = p_id;

END;



CREATE PROCEDURE `spc_tax_save`(
   IN p_id INT(11),
   IN p_taxcode VARCHAR(50),
   IN p_taxname VARCHAR(200),
   IN p_taxpercent DECIMAL(8,3),
   IN p_taxtypeid INT,
   IN p_combinedtaxes VARCHAR(100),
   IN p_inputledgerid INT(11),
   IN p_outputledgerid INT(11),
   IN p_companyid INT(11),
   IN p_userid INT(11),
   OUT out_id INT
)
BEGIN

	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO tax 
				(id, taxcode, taxname, taxpercent, taxtypeid, combinedtaxes, inputledgerid, outputledgerid, companyid)
			VALUES 
				(p_id,  p_taxcode, p_taxname, p_taxpercent, p_taxtypeid, p_combinedtaxes, p_inputledgerid, p_outputledgerid, p_companyid);
	  SET @action = 'INSERT';
	ELSE
    
		UPDATE tax
				SET taxcode = p_taxcode,
					taxname = p_taxname,
                    taxpercent = p_taxpercent,
                    taxtypeid = p_taxtypeid,
                    combinedtaxes = p_combinedtaxes,
                    inputledgerid = p_inputledgerid,
                    outputledgerid = p_outputledgerid,
					companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     
                
                
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'tax', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_tax_search`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		 T.id,
         taxcode,
         taxname,
         taxpercent,
         taxtypeid,
         REF1.refname as taxtype,
         combinedtaxes,
         fnc_taxes_byids(combinedtaxes) as taxesname,
         fnc_taxpercents_byids(combinedtaxes) as taxpercents,
         fnc_taxtypes_byids(combinedtaxes) as taxtypes,
         inputledgerid, 
         COA1.coaname as inputledgername,
         outputledgerid,
         COA2.coaname as outputledgername
                  
	FROM
		tax T
	LEFT JOIN `reference` REF1 ON REF1.id = T.taxtypeid
    LEFT JOIN `chartofaccount` COA1 ON COA1.id = T.inputledgerid
    LEFT JOIN `chartofaccount` COA2 ON COA2.id = T.outputledgerid
	WHERE
		 T.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_tax_select`(
    IN p_id INT
)
BEGIN

	SELECT 
		 
         id, 
         taxcode, 
         taxname, 
         taxpercent, 
         taxtypeid, 
         combinedtaxes, 
         fnc_taxes_byids(combinedtaxes) as taxesname,
         inputledgerid, 
         outputledgerid, 
         companyid
         
	FROM
		tax 
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);
END;



CREATE PROCEDURE `spc_tax_singletaxsearch`(
    IN p_companyid INT
)
BEGIN

	SELECT 
		 
         id, 
         taxcode, 
         taxname, 
         taxpercent, 
         taxtypeid, 
         combinedtaxes, 
         fnc_taxes_byids(combinedtaxes) as taxesname,
         inputledgerid, 
         outputledgerid, 
         companyid
         
	FROM
		tax 
        
	WHERE
		 taxtypeid != 1545  -- Other than Combined taxtype
         AND  companyid = p_companyid;
END;



CREATE PROCEDURE `spc_test5_save`(
	IN p_id INT(11),
    IN p_fname VARCHAR(45),
	IN p_lname VARCHAR(45),
    IN p_city VARCHAR(45),
    IN p_mark DECIMAL(9,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT

)
BEGIN
SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO test5(id, fname, lname, city, mark, companyid)
    VALUES(p_id, p_fname, p_lname, p_city, p_mark, p_companyid);
        
        SET @action = 'INSERT';
        
        ELSE
    
		UPDATE test5
				SET id = p_id,
					fname = p_fname,
                    lname = p_lname,
                    city = p_city,
                    mark = p_mark,
                    companyid = p_companyid,
                    
					
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
           SET @action = 'UPDATE';     

    END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'test5',out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_test5_save1`(
	IN p_id INT(11),
    IN p_fname VARCHAR(45),
	IN p_lname VARCHAR(45),
    IN p_city VARCHAR(45),
    IN p_mark DECIMAL(9,3),
    IN p_companyid INT(11),
    OUT out_id INT
)
BEGIN

	INSERT INTO test5(id, fname, lname, city, mark, companyid)
    VALUES(p_id, p_fname, p_lname, p_city, p_mark, p_companyid);
    
    SELECT LAST_INSERT_ID() INTO out_id; 

END;



CREATE PROCEDURE `spc_testgettemp1`()
BEGIN

	select * from temp1;

END;



CREATE PROCEDURE `spc_testjson1`(
	IN p_breederdailytransactionid INT,
    IN p_feedConsumption json,
    OUT out_id INT
)
BEGIN



   SET @i = 0;
    select JSON_LENGTH(p_feedConsumption) as length;
    WHILE @i < JSON_LENGTH(p_feedConsumption) DO
    
    	SET @str = NULL;
		SELECT JSON_EXTRACT(p_feedConsumption,CONCAT('$[',@i,']')) INTO @str;
        
		SET @p_id = null; -- CASE WHEN JSON_EXTRACT(@str, CONCAT('$.id')) < 0 THEN null ELSE CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.id'))) AS UNSIGNED INTEGER) end;
        SET @out_id = null;
        set @issuedetailid = null;
     
            
           select JSON_EXTRACT(@str, CONCAT('$.issuedetailid')) = CAST('null' AS JSON);

       select if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,0);
        
        
         
        
        
		INSERT INTO breederdailyconsumption
				(
                 breederdailytransactionid, 
				 consumptiontypeid, 
                 itemid, 
                 breedertypeid, 
                 shedlineid, 
                 isherbal, 
                 standardconsumption,
                 quantity, 
                 issuedetailid,
                 companyid)
			VALUES 
				(
                CAST(p_breederdailytransactionid AS SIGNED INTEGER),
				CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.consumptiontypeid'))) AS SIGNED INTEGER),
				CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.itemid'))) AS SIGNED INTEGER),
				CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.breedertypeid'))) AS SIGNED INTEGER),
				CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.shedlineid'))) AS SIGNED INTEGER),
				(SELECT JSON_EXTRACT(@str, CONCAT('$.isherbal'))),
				CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.standardconsumption'))) AS DECIMAL(9,3)),
				CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.quantity'))) AS DECIMAL(9,3)),
				
                if(json_type(json_extract(@str, CONCAT('$.issuedetailid'))) = 'NULL',null,JSON_EXTRACT(@str, CONCAT('$.issuedetailid'))),
                
				CAST((SELECT JSON_EXTRACT(@str, CONCAT('$.companyid'))) AS SIGNED INTEGER)
                );
      
        
		
		SELECT @i + 1 INTO @i;
        
	END WHILE;
 
 
END;



CREATE PROCEDURE `spc_testmasterdetail_delete`(
IN p_id INT(11)

)
BEGIN
DELETE 
FROM		feedmill_testmasterdetail
WHERE		id = p_id;
END;



CREATE PROCEDURE `spc_testmasterdetail_save`(

	IN p_id INT(11),
    IN p_testmasterid INT(11),
    IN p_startfrom DECIMAL(9,3),
    IN p_endto DECIMAL(9,3),
    IN p_resultid INT(11),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_testmasterdetail(id,testmasterid,startfrom,endto,resultid,companyid)
        VALUES (p_id, p_testmasterid,p_startfrom,p_endto,p_resultid,p_companyid);
        
        SET @action = 'INSERT';
        
        ELSE
        UPDATE feedmill_testmasterdetail
        SET testmasterid = p_testmasterid,
			companyid = p_companyid,
            id = p_id,
            startfrom = p_startfrom,
            endto = p_endto,
            resultid = p_resultid,
            companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_testmasterdetail', out_id, @action, p_userid);


END;



CREATE PROCEDURE `spc_testmasterdetail_search`(
IN p_testmasterid INT(11)
)
BEGIN
SELECT TMD.id,
	   TMD.testmasterid,
       TMD.startfrom,
       TMD.endto,
       TMD.resultid,
       REF.refname as result
           
    FROM feedmill_testmasterdetail TMD
    LEFT JOIN `reference` REF ON REF.id = TMD.resultid
    
    WHERE  
		  testmasterid = p_testmasterid;

END;



CREATE PROCEDURE `spc_testmasterdetail_select`(
IN p_id INT(11),
IN p_companyid INT(11)
)
BEGIN
SELECT id,
		   testmasterid
				
	FROM feedmill_testmasterdetail

	WHERE companyid = p_companyid
	AND	id = p_id;            

END;



CREATE PROCEDURE `spc_testmaster_delete`(
IN p_id INT(11)
)
BEGIN
	DELETE FROM feedmill_testmaster WHERE id = p_id;
END;



CREATE PROCEDURE `spc_testmaster_save`(
	 IN p_id INT(11),
     IN p_testname VARCHAR(45),
     IN p_companyid INT(11),
     IN p_userid INT(11),
     OUT out_id INT
)
BEGIN

SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_testmaster(id, testname, companyid)
        VALUES (p_id, p_testname, p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_testmaster
        SET testname = p_testname,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_testmaster', out_id, @action, p_userid);


END;



CREATE PROCEDURE `spc_testmaster_search`(
IN p_companyid INT(11) 
)
BEGIN
SELECT id,
		   testname
           
	FROM feedmill_testmaster
    
    WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_testmaster_select`( 
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN
SELECT id,
		   testname
           
	FROM  feedmill_testmaster
    
    WHERE companyid = p_companyid
    AND id = p_id;

END;



CREATE PROCEDURE `spc_testpivot`()
BEGIN

DROP TABLE IF EXISTS test1;

CREATE TEMPORARY TABLE IF NOT EXISTS test1(shedid INT, line INT , typeid INT, quantity INT);
TRUNCATE TABLE test1;

insert into test1 (shedid, line, typeid, quantity) values (1, 1, 1, 100);
insert into test1 (shedid, line, typeid, quantity) values (1, 1, 2, 10);
insert into test1 (shedid, line, typeid, quantity) values (1, 2, 1, 60);
insert into test1 (shedid, line, typeid, quantity) values (1, 2, 2, 6);
insert into test1 (shedid, line, typeid, quantity) values (2, 1, 1, 4000);
insert into test1 (shedid, line, typeid, quantity) values (2, 1, 2, 1000);
insert into test1 (shedid, line, typeid, quantity) values (2, 2, 1, 3500);
insert into test1 (shedid, line, typeid, quantity) values (2, 2, 2, 800);

select * from test1;


select 
	shedid, line,
		MAX(IF(typeid = 1, quantity, NULL)) AS malequantity,
        MAX(IF(typeid = 2, quantity, NULL)) AS femalequantity
 from (

	select shedid, line, typeid, quantity
	from test1 
) test11
group by shedid, line;


END;



CREATE PROCEDURE `spc_testresult_byfinding`(
IN p_testid INT(11),
In p_finding DECIMAL(9,3),
IN p_companyid INT(11)

)
BEGIN
SELECT

TMD.resultid,
REF.refname as result

FROM feedmill_testmasterdetail TMD
LEFT JOIN `reference` REF ON REF.id  = TMD.resultid

WHERE 
 TMD.testmasterid = p_testid  AND
 p_finding BETWEEN startfrom AND endto
 AND TMD.companyid = p_companyid
 
 group by TMD.testmasterid;

END;



CREATE PROCEDURE `spc_testtemplatedetail_delete`(
IN p_id INT(11)
)
BEGIN

DELETE 
FROM		feedmill_testtemplatedetail
WHERE		id = p_id;

END;



CREATE PROCEDURE `spc_testtemplatedetail_save`(
	IN p_id INT(11),
    IN p_testtemplateid INT(11),
    IN p_testid INT(11),
    IN p_testname VARCHAR(100),
    IN p_deduction DECIMAL(9,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT

)
BEGIN

SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_testtemplatedetail(id,testtemplateid,testid,testname,deduction,companyid)
        VALUES (p_id, p_testtemplateid,p_testid,p_testname,p_deduction,p_companyid);
        
        SET @action = 'INSERT';
        
        ELSE
        UPDATE feedmill_testtemplatedetail
        SET testtemplateid = p_testtemplateid,
			companyid = p_companyid,
            id = p_id,
            testid = p_testid,
            testname = p_testname,
            deduction = p_deduction,
            companyid = p_companyid,
            
            
            
            
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_testtemplatedetail', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_testtemplatedetail_search`(
IN p_testtemplateid INT(11)
)
BEGIN

	SELECT TTD. id,
		   TTD.testtemplateid,
           TTD.testid,
           TTD.testname,
           TTD.deduction
           
    FROM   feedmill_testtemplatedetail TTD
    
    
    WHERE  
		  TTD.testtemplateid = p_testtemplateid;

END;



CREATE PROCEDURE `spc_testtemplatedetail_select`(
IN p_id INT(11),
IN p_companyid INT(11)
)
BEGIN

	SELECT id,
		   testtemplateid
				
	FROM feedmill_testtemplatedetail

	WHERE companyid = p_companyid
	AND	id = p_id;            

END;



CREATE PROCEDURE `spc_testtemplatedetail_selfjoin`(

)
BEGIN
SELECT testtemplate.id,testtemplate.itemid,testtemplatedetail.testname  
FROM    testtemplate
INNER JOIN testtemplatedetail  
ON testtemplate.id = testtemplatedetail.testtemplateid;  




END;



CREATE PROCEDURE `spc_testtemplate_delete`(
	IN p_id INT(11)
)
BEGIN

	DELETE FROM feedmill_testtemplate WHERE id = p_id;

END;



CREATE PROCEDURE `spc_testtemplate_save`(
	 IN p_id INT(11),
     IN p_itemid INT(11),
     IN p_companyid INT(11),
     IN p_userid INT(11),
     OUT out_id INT
)
BEGIN
	SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_testtemplate(id, itemid, companyid)
        VALUES (p_id, p_itemid, p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_testtemplate
        SET itemid = p_itemid,
			companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_testtemplate', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_testtemplate_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT TT.id,
		   TT.itemid,
           I.itemname
           
	FROM feedmill_testtemplate TT
    LEFT JOIN item I ON I.id = TT.itemid
    
    WHERE TT.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_testtemplate_select`(
	IN p_id INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT TT.id,
		   TT.itemid,
           I.itemname
           
	FROM feedmill_testtemplate TT
    LEFT JOIN item I ON I.id = TT.itemid
    
    WHERE TT.companyid = p_companyid
    AND TT.id = p_id;

END;



CREATE PROCEDURE `spc_treatmenttype_delete`(  
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM treatmenttype WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'treatmenttype', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_treatmenttype_save`(
 IN p_id INT(11),
 IN p_treatmenttype VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO treatmenttype
              (treatmenttype, companyid)
       VALUES
            (p_treatmenttype, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE treatmenttype 
   
	SET treatmenttype = p_treatmenttype,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'treatmenttype', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_treatmenttype_search`(
IN p_companyid INT(11)
)
BEGIN

	SELECT id, treatmenttype, companyid
           
	FROM treatmenttype
    
    WHERE 
		companyid = p_companyid;
END;



CREATE PROCEDURE `spc_treatmenttype_select`(  
 IN p_id INT(11)
)
BEGIN

	SELECT id, treatmenttype, companyid
           
	FROM treatmenttype
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_uniformitydetail_ddl`(
IN p_companyid INT
)
BEGIN

	 SELECT 
     DATE_FORMAT(UF.date,'%d/%m/%Y') as date
     
     FROM uniformitydetail UF
     
	 WHERE UF.companyid = p_companyid 
     
	 GROUP BY UF.date 
	 ORDER BY UF.date DESC;
 END;



CREATE PROCEDURE `spc_uniformitydetail_delete`(
	IN p_id INT
)
BEGIN
	
    SET @date = NULL;
    SET @count = NULL;
    
    select date INTO @date from uniformitydetail WHERE id = p_id;
    select count(*) INTO @count from uniformitydetail WHERE date = @date;
    
    IF(@count = 1)THEN
		DELETE FROM uniformitydetail WHERE id = p_id;	
		DELETE FROM uniformitylocation WHERE date = @date;
    else
		DELETE FROM uniformitydetail WHERE id = p_id;	
    END IF;
END;



CREATE PROCEDURE `spc_uniformitydetail_deleteondate`(
	IN p_date date
)
BEGIN

	SET SQL_SAFE_UPDATES = 0;
    
	DELETE FROM uniformitydetail WHERE date = p_date;
    DELETE FROM uniformitylocation WHERE date = p_date;
    
    SET SQL_SAFE_UPDATES = 1;
END;



CREATE PROCEDURE `spc_uniformitydetail_save`(

	IN p_id INT,
    IN P_date date,
    IN p_fromweeks SMALLINT(6),
    IN p_toweeks SMALLINT(6),
    IN p_percent decimal(8,3),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO uniformitydetail
				(date, fromweeks, toweeks, percent, companyid)
			VALUES 
				(p_date, p_fromweeks, p_toweeks, p_percent, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE uniformitydetail
			SET 
				date = p_date,
				fromweeks =	p_fromweeks,
                toweeks = p_toweeks, 
                percent = p_percent,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'uniformitydetail', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_uniformitydetail_search`(
IN p_date date
)
BEGIN
	SELECT id ,
        DATE_FORMAT(date,'%d/%m/%Y') as date,
        fromweeks,
        toweeks,
        percent
	FROM uniformitydetail
    WHERE
    date = p_date;
END;



CREATE PROCEDURE `SPC_uniformitylocation_save`(
    IN p_id INT,
    IN p_locationid INT(11),
    IN p_date date,
    IN p_companyid INT,
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO uniformitylocation
				(locationid, date, companyid)
			VALUES 
				(p_locationid, p_date, p_companyid);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE uniformitylocation
			SET 
				locationid = p_locationid,
                date = p_date,
                companyid = p_companyid,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id
                AND companyid = p_companyid;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'uniformitylocation', out_id, @action, p_userid);
END;



CREATE PROCEDURE `SPC_uniformitylocation_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 U.id,
		 locationid,
         date,
         L.locationname
        
	FROM
		uniformitylocation U
        LEFT JOIN location L ON L.id = U.locationid
        
	WHERE
		U.companyid= p_companyid;
END;



CREATE PROCEDURE `spc_uniformitylocation_select`(
IN p_date date
)
BEGIN
	SELECT U.id,
		date,
        locationid,
        L.locationname
		
        
    FROM  uniformitylocation U
	inner join location L on U.locationid = L.id
   
    
    WHERE 
          date = p_date
           GROUP BY U.locationid ;
	-- ORDER BY date DESC;

END;



CREATE PROCEDURE `spc_userlicense_save`(
	IN p_userid INT,
    IN p_licenses VARCHAR(1000),
    OUT out_id INT
)
BEGIN
    
     -- Get and Split selected ProductIds for Company
    
		DROP TEMPORARY TABLE IF EXISTS tblSubscriptionIds;
		CREATE TEMPORARY TABLE tblSubscriptionIds( subscriptionid int );
     
        SET @Occurrences = LENGTH(p_licenses) - LENGTH(REPLACE(p_licenses, ',', ''));
        
        myloop: WHILE (@Occurrences >= 0)
        DO 
            SET @myValue = SUBSTRING_INDEX(p_licenses, ',', 1);
            IF (@myValue != '') THEN
				
				INSERT INTO tblSubscriptionIds VALUES(@myValue);
            ELSE
                LEAVE myloop; 
            END IF;
            SET @Occurrences = LENGTH(p_licenses) - LENGTH(REPLACE(p_licenses, ',', ''));
            IF (@occurrences = 0) THEN 
                LEAVE myloop; 
            END IF;
            SET p_licenses = SUBSTRING(p_licenses,LENGTH(SUBSTRING_INDEX(p_licenses, ',', 1))+2);
        END WHILE;                  
	
    
    
	-- select * from tblSubscriptionIds;
    
    INSERT INTO userlicense (userid, companysubscriptionid, roleid)
       SELECT p_userid, P.subscriptionid, R.id FROM tblSubscriptionIds P
	   LEFT JOIN userlicense CP ON CP.userid = p_userid AND P.subscriptionid = CP.companysubscriptionid
       LEFT JOIN companysubscription CS ON CS.id = P.subscriptionid
       LEFT JOIN role R ON R.licensetypeid = CS.licensetypeid
	   WHERE CP.id IS NULL;
       
       
    -- Delete records which are not in ProductIds List
    
	SET SQL_SAFE_UPDATES = 0;

	DELETE FROM userlicense where id in(
		
        SELECT temp.id FROM (
			SELECT id FROM userlicense
				WHERE userid = p_userid AND companysubscriptionid IN 
				(
				SELECT companysubscriptionid FROM userlicense WHERE userid = p_userid and companysubscriptionid NOT IN (SELECT subscriptionid from tblSubscriptionIds)
				) 	
			) as temp
        );
   
   SET SQL_SAFE_UPDATES = 1;
    
    
    SELECT p_userid INTO out_id;

END;



CREATE PROCEDURE `spc_user_assignlicense`(
	IN p_companyid INT
)
BEGIN

	SELECT 
		id,
		username,
		fnc_user_assignedlicenses(id) as licenses,
        fnc_user_assignedsubscriptionids(id) as subscriptionids
    FROM 
		user1
	WHERE
		active = 1 AND companyid = p_companyid;

END;



CREATE PROCEDURE `spc_user_createdfor`(
	IN p_userid INT
)
BEGIN

		SET @userrole = "";
        
        SELECT `description` INTO @userrole FROM user1 UR
        INNER JOIN userlicense UL ON UR.id = UL.userid
        INNER JOIN `role` R ON UL.roleid = R.id
        WHERE UR.id = p_userid;
        
        
        SET @userrole = REPLACE(@userrole, 'Manager', '');
        SET @userrole = REPLACE(@userrole, 'Executive', '');
        
		SELECT UR.id, username, mobile, email, rolename, R.description AS rolefullname, userkey FROM user1 UR
        INNER JOIN userlicense UL ON UR.id = UL.userid
        INNER JOIN `role` R ON UL.roleid = R.id
        LEFT JOIN `notificationuser` NU ON UR.id = NU.userid
        WHERE (UR.id = p_userid OR rolename = 'AD' OR INSTR(UPPER(description), @userrole));
		-- AND userkey IS NOT NULL;

END;



CREATE PROCEDURE `spc_user_delete`(
IN p_id INT
)
BEGIN
	DELETE FROM `user1` WHERE id = p_id;
END;



CREATE PROCEDURE `spc_user_login`(
	IN p_username VARCHAR(200),
    IN p_pwd VARCHAR(100),
    IN p_companyid INT
)
BEGIN
 
	SET @invalidcompanyuser = null;
    SET @isinactiveuser = null;
    SET @isuserlocked = null;
    SET @invalidpwd = null;
        
	-- Check Valid Username for Company
    IF EXISTS( SELECT id FROM `user1` WHERE mobile = p_username AND companyid = p_companyid ) THEN
	    
        SELECT  
			p_username as username,
            -- Check User is active
            @isinactiveuser:= CASE WHEN active != 1 THEN 1 ELSE NULL END as inactiveuser,
            -- Check User is locked
            @isuserlocked:= CASE WHEN locked = 1 THEN 1 ELSE NULL END as userlocked,
            -- Check User has correct Password
            @invalidpwd:= CASE WHEN pwd != COMPRESS(p_pwd) THEN 1 ELSE NULL END as invalidpwd,
        
			null as invalidcompanyuser
        
        FROM (
				SELECT 
					username, mobile, pwd, active, locked, companyid 
				FROM 
					`user1`
				WHERE mobile = p_username AND companyid = p_companyid
                
        ) AS tblUser;
	
    ELSE
    
		SET @invalidcompanyuser:= 1;
        
        SELECT 	p_username as username,
				@invalidcompanyuser AS invalidcompanyuser, 
				@isinactiveuser AS inactiveuser, 
				@isuserlocked AS userlocked, 
				@invalidpwd AS invalidpwd;
    
    END IF;
    
    
    -- IF User is valid get User details
  
	IF(@invalidcompanyuser IS NULL &&  @isinactiveuser IS NULL 
            && @isuserlocked IS NULL && @isuserlocked IS NULL && @invalidpwd IS NULL) THEN
	
		SELECT UR.id, UR.username, UR.mobile, UR.companyid, UR.email, companyname, companycode, 
			fnc_user_roleids(UR.id) as roleids,
            fnc_user_rolenames(UR.id) as rolenames
        FROM `user1` UR
        left join company C ON UR.companyid = C.id
        WHERE
			mobile = p_username AND companyid = p_companyid  AND pwd = COMPRESS(p_pwd);
    END IF;
	

END;



CREATE PROCEDURE `spc_user_permissions`(
	IN p_userid INT,
    IN p_companyid INT
)
BEGIN

		SELECT 
			RA.roleid as r, 
			RA.entityid as e, 
            E.displayname as dn, 
            E.pagekey as pk, 
            RA.entitytypeid as et, 
            RA.permissions as p, 
            RA.checked as c, 
            RA.parentid as pr
        FROM roleaccess RA
        
        INNER JOIN entity E ON E.id = RA.entityid
		INNER JOIN userlicense UL ON RA.roleid = UL.roleid
        INNER JOIN user1 U ON U.id = UL.userid
        WHERE UL.userid = p_userid AND U.companyid = p_companyid;

END;



CREATE PROCEDURE `spc_user_save`(
	IN p_id INT,
    IN p_username VARCHAR(200),
    IN p_mobile VARCHAR(20),
    IN p_imei VARCHAR(20),
    IN p_email VARCHAR(200),
    IN p_pwd VARCHAR(50),
    IN p_active TINYINT,
    IN p_locked TINYINT,
    IN p_userid INT,
    IN p_companyid INT,
    OUT out_id INT
)
BEGIN

SET @action = null;

	IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO `user1`
				(id, username, mobile, imei, email, pwd, active, locked, createdby, createddate, companyid)
			VALUES 
				(p_id, p_username,p_mobile, p_imei, p_email, COMPRESS(p_pwd), p_active, p_locked, p_userid, NOW(), p_companyid);
		
         SET @action = 'INSERT';
        
	ELSE
    
		UPDATE `user1`
			SET username = p_username, 
                mobile = p_mobile, 
                imei = p_imei,
                email = p_email,
                active = p_active,
                locked = p_locked,
                createdby = p_userid,
                id = LAST_INSERT_ID(id)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
          
		IF NULLIF(p_pwd, '') IS NOT NULL THEN
			
            UPDATE `user1`
				SET pwd = COMPRESS(p_pwd)
			WHERE
				id = p_id 
                AND companyid = p_companyid;
        END IF;
                
		SET @action = 'UPDATE';     
    
	END IF;
    
	SELECT LAST_INSERT_ID() INTO out_id;

	-- RECORD LOG
   CALL spc_commonlog_save(p_companyid, 'user', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spc_user_search`(
IN p_companyid INT
)
BEGIN
	SELECT
		`id`,
		`username`,
		`mobile`,
		`imei`,
        `email`,
		`active`,
		`locked`,
		`companyid`
	FROM `user1`
	WHERE
		companyid = p_companyid;
END;



CREATE PROCEDURE `spc_user_select`(
	IN p_id INT,
    IN p_companyid INT
)
BEGIN

	SELECT
		`id`,
		`username`,
		`mobile`,
		`imei`,
        `email`,
		`active`,
		`locked`,
		`companyid`
	FROM
		`user1`
	WHERE 
		id = p_id 
        AND companyid = p_companyid;
END;



CREATE PROCEDURE `spc_vacinatedchicks_save`(
		IN p_vaccinationDate DATE,
		IN p_materialreceiptdetailid INT,
		IN p_warehouseid INT,
		IN p_itemid INT,
		IN p_vaccinequantity DECIMAL(12,3),
		IN p_docstandardcost DECIMAL(12,3),
        IN p_vaccinateddoccost DECIMAL(12,3),
		IN p_totalcost DECIMAL(12,3),
		IN p_itembatch VARCHAR(100),
        IN p_vaccineitemid INT,
		IN p_vaccinecost DECIMAL(9,3),
		IN p_vaccineqty DECIMAL(12,3),
		IN p_totalvaccinecost DECIMAL(12,3),
		IN p_userid INT,
		IN p_companyid INT
)
BEGIN
	
    -- Material Issue from Itembatch for DOC item
		SET @out_issueid = NULL;
		CALL spc_materialissue_save(
			NULL, p_vaccinationDate, 382, p_materialreceiptdetailid, 362, NULL,
			p_userid, p_warehouseid, 
            (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
            p_userid, p_vaccinationDate,
			p_companyid, p_userid, @out_issueid
		);
                            
		-- Itembatch details
		SET @out_issuedetailid = NULL;
		CALL spc_materialissuedetail_save(
			NULL, @out_issueid, p_itemid, (SELECT itemname FROM item WHERE id = p_itemid),
			p_vaccinequantity, p_docstandardcost, 
			(p_vaccinequantity * p_docstandardcost),
			NULL, p_itembatch,
			p_companyid, p_userid, @out_issuedetailid
		);

	 UPDATE materialreceiptdetail SET receiptquantity = receiptquantity - p_vaccinequantity WHERE id = p_materialreceiptdetailid;

	-- material movement entry for DOC material issue
	SET @out_movid1 = NULL;
	CALL spc_materialmovement_save(
		NULL, p_itemid, p_itembatch, 683,
		@out_issueid, p_vaccinationDate, p_vaccinequantity,
		p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
        p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
		(p_vaccinequantity * p_docstandardcost),
		p_companyid, p_userid, @out_movid1
	);
    
    -- Make material issue entry for vaccine item
		SET @out_issueid1 = NULL;
		CALL spc_materialissue_save(
			NULL, p_vaccinationDate, 382, p_materialreceiptdetailid, 362, NULL,
			p_userid, p_warehouseid, 
            (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
            p_userid, p_vaccinationDate,
			p_companyid, p_userid, @out_issueid1
		);
                            
		-- Itembatch details
		SET @out_issuedetailid1 = NULL;
		CALL spc_materialissuedetail_save(
			NULL, @out_issueid1, p_vaccineitemid, 
            (SELECT itemname FROM item WHERE id = p_vaccineitemid),
			p_vaccineqty, p_vaccinecost, p_totalvaccinecost,
			NULL, p_itembatch,
			p_companyid, p_userid, @out_issuedetailid1
		);

	
		-- material movement entry for vaccine material issue
		SET @out_movid3 = NULL;
		CALL spc_materialmovement_save(
			NULL, p_vaccineitemid, p_itembatch, 683,
			@out_issueid1, p_vaccinationDate, p_vaccineqty,
			p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
			p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
			p_totalvaccinecost, p_companyid, p_userid, @out_movid3
		);
    
    -- Make material receipt entry for vaccinated DOC
		SET @out_recid = NULL;
		CALL spc_materialreceipt_save(
			NULL, p_vaccinationDate, 342, p_materialreceiptdetailid, 322, NULL,
			p_userid, p_userid, p_vaccinationDate, p_companyid,
			p_userid, @out_recid
		);
        
		SET @batchname = CONCAT(p_itembatch,'-V');
		-- SET @series = 2;
		
        -- Material receipt detail entry
        SET @out_recdetailid = NULL;
		
		IF (!EXISTS(SELECT 1 FROM materialreceiptdetail where itembatch like CONCAT(@batchname, '%'))) THEN
        
			CALL spc_materialreceiptdetail_save(
				NULL, @out_recid, p_itemid, (SELECT itemname FROM item WHERE id = p_itemid), 
				p_vaccinequantity, p_vaccinateddoccost, 
				p_totalcost,
				(SELECT itemunitid FROM item WHERE id = p_itemid), @batchname,
				p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
                p_companyid,
				p_userid, '{"doc_type" : "vaccinated"}', @out_recdetailid
			);
            
            -- Make material movement entry for material receipt
			SET @out_movid2 = NULL;
			CALL spc_materialmovement_save(
				NULL, p_itemid, CONCAT(@batchname), 684,
				@out_recid, p_vaccinationDate, p_vaccinequantity,
				p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
                p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
				p_totalcost,
				p_companyid, p_userid, @out_movid2
			);
			
		ELSE
			SET @seriesbatchname = null;
            SELECT itembatch INTO @seriesbatchname FROM materialreceiptdetail where itembatch LIKE CONCAT(@batchname, '%') ORDER BY id DESC LIMIT 1;
            
            SELECT REPLACE(@seriesbatchname, CONCAT(p_itembatch,'-V'), '') INTO @seriesbatchname;
            
            IF(@seriesbatchname = '') THEN
				SET @seriesbatchname = CONCAT(p_itembatch,'-V',2);
                
			else
				SET @seriesbatchname = CONCAT(p_itembatch,'-V',(@seriesbatchname+1));
            END IF;
            
			CALL spc_materialreceiptdetail_save(
				NULL, @out_recid, p_itemid, (SELECT itemname FROM item WHERE id = p_itemid LIMIT 1), 
				p_vaccinequantity, p_vaccinateddoccost, 
				p_totalcost,
				(SELECT itemunitid FROM item WHERE id = p_itemid LIMIT 1), @seriesbatchname,
				p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
                p_companyid,
				p_userid, '{"doc_type" : "vaccinated"}', @out_recdetailid
			);
            
            
            -- Make material movement entry for material receipt
			SET @out_movid2 = NULL;
			CALL spc_materialmovement_save(
				NULL, p_itemid, @seriesbatchname, 684,
				@out_recid, p_vaccinationDate, p_vaccinequantity,
				p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
                p_warehouseid, (SELECT id FROM warehousebin WHERE warehouseid = p_warehouseid AND isdefault = 1),
				p_totalcost,
				p_companyid, p_userid, @out_movid2
			);
			
			-- SET @series = @series + 1;
			
		END IF;
		

END;



CREATE PROCEDURE `spc_warehousebin_defaultbin`(
	IN p_warehouseid INT(11),
    IN p_companyid INT(11)
)
BEGIN

	SELECT id,bincode, binname
    
    FROM warehousebin
    
    WHERE isdefault = 1
    AND companyid = p_companyid
    AND warehouseid = p_warehouseid;

END;



CREATE PROCEDURE `spc_warehousebin_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM warehousebin WHERE id = p_id;
END;



CREATE PROCEDURE `spc_warehousebin_dll`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		  id,
          binname,
          bincode
         
    FROM
		warehousebin 
	

	WHERE
		 companyid = p_companyid;
END;



CREATE PROCEDURE `spc_warehousebin_save`(
    IN p_id INT,
    IN p_warehouseid INT,
    IN p_bincode VARCHAR(100),
    IN p_binname VARCHAR(200),
    IN p_companyid INT,
    IN p_isdefault TINYINT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	
    SET @action = null;
    
    IF EXISTS(
            SELECT binname from warehousebin where LOWER(binname) = LOWER(p_binname)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 
    
		BEGIN
		
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO warehousebin 
						(id, warehouseid, bincode, binname, companyid, isdefault)
					VALUES 
						(p_id, p_warehouseid, p_bincode, p_binname, p_companyid, p_isdefault);

					SET @action = 'INSERT';

			ELSE
			
				UPDATE warehousebin
					SET warehouseid = p_warehouseid,
						bincode = p_bincode, 
						binname = p_binname,
						companyid = p_companyid,
						isdefault = p_isdefault,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
						
					SET @action = 'UPDATE';
			END IF;
			SELECT LAST_INSERT_ID() INTO out_id; 
			
			-- record log
		   CALL spc_commonlog_save(p_companyid, 'warehousebin', out_id, @action, p_userid);

		END;
        
	END IF;

END;



CREATE PROCEDURE `spc_warehousebin_search`(
    IN p_warehouseid INT
)
BEGIN
    
    SELECT
		 WB.id,
         W.warehousename,
         bincode,
         binname,
		 isdefault,
		 displayorder
         
    FROM
		warehousebin WB
	
    LEFT JOIN warehouse W ON WB.warehouseid = W.id
   	
	WHERE
		WB.warehouseid = p_warehouseid;
     
END;



CREATE PROCEDURE `spc_warehousebin_select`(
	IN p_id INT
)
BEGIN

	SELECT
		WB.id,
		WB.warehouseid,
        W.warehousename,
        WB.bincode,
        WB.binname,
        L.locationname
        
	FROM
		warehousebin WB
        LEFT JOIN warehouse W ON W.id = WB.warehouseid
        LEFT JOIN location L ON L.id = W.locationid
        
	WHERE
		(
			NULLIF(p_id, '') IS NOT NULL AND WB.id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_warehousewisebreederbatch_select`(
	IN p_companyid INT,
    IN p_warehouseid INT
)
BEGIN
    
    SELECT
		BB.id as breederbatchid,
        BB.warehouseid,
        W.warehousename,
        BB.batchname as breederbatchname,
        BB.locationid,
        L.locationname
	
    FROM
		breederbatch BB
        LEFT JOIN warehouse W ON BB.warehouseid = W.id
        LEFT JOIN location L ON BB.locationid = L.id
	
	WHERE
		BB.warehouseid = p_warehouseid and
		BB.companyid = p_companyid;
      

END;



CREATE PROCEDURE `spc_warehouse_bylocation_search`(
	IN p_companyid INT,
    IN p_locationid INT
   
)
BEGIN
    
    SELECT
		  W.id,
          warehousename,
          warehousecode,
          W.locationid,
          W.companyid,
          L.locationname
         
    FROM
		warehouse W
        
        LEFT JOIN location L ON W.locationid = L.id
	

	WHERE
		 W.locationid = p_locationid AND
         W.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_warehouse_bymodule_search`(
	IN p_companyid INT,
    IN p_moduleid INT
   
)
BEGIN
    
    SELECT
		  W.id,
          warehousename,
          warehousecode,
          W.locationid,
          W.companyid,
          L.locationname
         
    FROM
		warehouse W
        LEFT JOIN location L ON W.locationid = L.id

	WHERE
		 W.moduleid = p_moduleid AND
         W.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_warehouse_ddl`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 id,
         warehousename
	
    FROM
		warehouse 
   	
	WHERE
		 companyid = p_companyid;
END;



CREATE PROCEDURE `spc_warehouse_delete`(
	IN p_id INT
)
BEGIN
	DELETE FROM warehouse WHERE id = p_id;
END;



CREATE PROCEDURE `spc_warehouse_save`(
    IN p_id INT,
    IN p_warehousecode VARCHAR(50),
    IN p_warehousename VARCHAR(200),
    IN p_description VARCHAR(500),
    IN p_locationid INT,
    IN p_shiptoname VARCHAR(200),
    IN p_address VARCHAR(100),
    IN p_cityid INT(11),
    IN p_stateid INT(11),
    IN p_zipcode VARCHAR(10),
    IN p_gln VARCHAR(50),
    IN p_countryid INT,
    IN p_active TINYINT,
    IN p_moduleid VARCHAR(200),
    IN p_companyid INT,
    IN p_userid INT,
    OUT out_id INT
)
BEGIN
	
    SET @action = null;
    
    IF EXISTS(
            SELECT warehousename from warehouse where LOWER(warehousename) = LOWER(p_warehousename)
				AND ((NULLIF(p_id, 0) IS NULL)
					OR (NULLIF(p_id, 0) IS NOT NULL AND NULLIF(p_id, '0') != id))
            
            ) THEN BEGIN
        
				SELECT -1 INTO out_id;
	
			END;
    ELSE 

		BEGIN
        
			IF(NULLIF(p_id, '0') IS NULL) THEN
			
				INSERT INTO warehouse 
						(warehousecode, warehousename, description, 
						locationid, shiptoname, address, cityid, stateid, 
						zipcode, gln, countryid, active,moduleid, companyid)
					VALUES 
						(p_warehousecode, p_warehousename, p_description,
						p_locationid, p_shiptoname, p_address, p_cityid, p_stateid, 
						p_zipcode, p_gln, p_countryid, p_active, p_moduleid, p_companyid);

					SET @action = 'INSERT';
					
			ELSE
			
				UPDATE warehouse
					SET warehousename = p_warehousename, 
						warehousecode = p_warehousecode,
						description = p_description,
						locationid = p_locationid,
						shiptoname = p_shiptoname,
						address = p_address,
						cityid = p_cityid,
						stateid = p_stateid,
						zipcode = p_zipcode,
						gln = p_gln,
						countryid = p_countryid,
						active = p_active,
						moduleid = p_moduleid,
						companyid = p_companyid,
						id = LAST_INSERT_ID(id)
					WHERE
						id = p_id
						AND companyid = p_companyid;
						
					SET @action = 'UPDATE';
			END IF;
			SELECT LAST_INSERT_ID() INTO out_id; 
			
			-- create default one warehousebin
			SET @out_warehousebinid = NULL;
			CALL spc_warehousebin_save(
				NULL, out_id, CONCAT(p_warehousecode,'-BIN'), CONCAT(p_warehousename,'-BIN'),
				p_companyid, 1, p_userid, @out_warehousebinid
			);

			-- record log
			CALL spc_commonlog_save(p_companyid, 'warehouse', out_id, @action, p_userid);

		END;
        
	END IF;

END;



CREATE PROCEDURE `spc_warehouse_search`(
    IN p_companyid INT
)
BEGIN
    
    SELECT
		 W.id,
		 W.warehousecode,
         W.warehousename,
         W.description,
		 W.locationid,
         L.locationname,
         W.shiptoname,
         W.address,
         W.cityid,
         W.stateid,
		 W.zipcode,
         W.gln,
         W.countryid,
         W.active,
         W.moduleid,
         W.companyid
         
    FROM
		warehouse W
	
    LEFT JOIN location L ON W.locationid = L.id
   	
	WHERE
		W.companyid = p_companyid;
END;



CREATE PROCEDURE `spc_warehouse_select`(
	IN p_id INT
)
BEGIN

	SELECT
		 W.id,
		 W.warehousecode,
         W.warehousename,
         W.description,
		 W.locationid,
         L.locationname,
         W.shiptoname,
         W.address,
         W.cityid,
         C.cityname,
         W.stateid,
         S.statename,
		 W.zipcode,
         W.gln,
         W.countryid,
         CON.countryname,
         W.active,
         W.moduleid,
         W.companyid
        
	FROM
		warehouse W
        LEFT JOIN location L ON L.id = W.locationid
        LEFT JOIN country CON ON CON.id = W.countryid
        LEFT JOIN city C ON C.id = W.cityid
        LEFT JOIN state S ON S.id = W.stateid
        
	WHERE
		W.id = p_id; 
          
END;



CREATE PROCEDURE `spc_waterfacility_delete`(
  IN p_id INT(11),
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM waterfacility WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'waterfacility', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_waterfacility_save`(
 IN p_id INT(11),
 IN P_facility VARCHAR(200),
 IN p_companyid INT(11),
 IN p_userid INT,
 OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO waterfacility
              (facility, companyid)
       VALUES
            (p_facility, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE waterfacility 
   
	SET facility = p_facility,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'waterfacility', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_waterfacility_search`(
	IN p_companyid INT(11)
)
BEGIN

	SELECT id, facility, companyid
           
	FROM waterfacility
    
    WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_waterfacility_select`(	
	IN p_id INT(11)
)
BEGIN

	SELECT id, facility, companyid
           
	FROM waterfacility
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_waterparameter_delete`(
  IN p_id INT,
  IN p_companyid INT,
  IN p_userid INT
)
BEGIN

	DELETE FROM waterparameter WHERE id = p_id;

-- record log
    CALL spc_commonlog_save(p_companyid, 'waterparameter', p_id, 'delete', p_userid);
END;



CREATE PROCEDURE `spc_waterparameter_save`(
  IN p_id INT(11),
  IN p_name VARCHAR(200),
  IN p_unit VARCHAR(200),
  IN p_stdspecification	 VARCHAR(200),
  IN p_companyid INT(11),
  IN p_userid INT,
  OUT out_id INT
 )
BEGIN

 SET @action = null;
   
   IF(NULLIF(p_id, '0') IS NULl) THEN
   
     INSERT INTO waterparameter
              (name, unit, stdspecification, companyid)
       VALUES
            (p_name, p_unit, p_stdspecification, p_companyid);
            
	SET @action = 'INSERT';
    
   ELSE
   
	UPDATE waterparameter 
   
	SET name = p_name,
		unit = p_unit,
        stdspecification = p_stdspecification,
        companyid = p_companyid,
        id = LAST_INSERT_ID(id)
        
   WHERE
        id = p_id AND
        companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
   END IF;
     SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(p_companyid, 'waterparameter', out_id, @action, p_userid);
END;



CREATE PROCEDURE `spc_waterparameter_search`(	
  IN p_companyid INT(11)
)
BEGIN

	SELECT id, name, unit, stdspecification, companyid
           
	FROM waterparameter
    
    WHERE companyid = p_companyid;

END;



CREATE PROCEDURE `spc_waterparameter_select`(
   IN p_id INT(11)
)
BEGIN

	SELECT id, name, unit,stdspecification, companyid
           
	FROM waterparameter
    
    WHERE 
		(
			NULLIF(p_id, '') IS NOT NULL AND id = p_id 
            OR NULLIF(p_id, '') IS NULL
		);

END;



CREATE PROCEDURE `spc_weekly_amortization`(
	IN p_breederbatchid INT,
    IN p_weekno INT
)
BEGIN
     
     SET @maleitemid = NULL;
     SET @femaleitemid = NULL;
     SET @femalebirdcost = NULL;
     SET @femaleplaced = NULL;
     SET @femalemortality = NULL;
	 SET @batchconsumptioncost = NULL;
     SET @batchconsumption = NULL;
     SET @standardeggcost = NULL;
     SET @eggsproduction = NULL;
     SET @placementdate = NULL;
      
     
        SELECT placementdate INTO @placementdate
        FROM breederbatchplacement 
        WHERE breederbatchid = p_breederbatchid;
        
		-- select default values from breeder setting
          
		SELECT 
			defaultfemalechickid, defaultmalechickid, standardeggcost
			INTO 
            @femaleitemid, @maleitemid, @standardeggcost
		FROM 
			breedersetting LIMIT 1;


	 -- Bird purchase cost
     
         SELECT 
			CASE WHEN itemid = @femaleitemid THEN @femalebirdcost:= unitprice ELSE NULL END as femalebirdcost
        FROM (
         
				SELECT itemid, GRD.unitprice as unitprice
				 
					FROM breederbatchplacement BBP 
					INNER JOIN grpo GR ON GR.id = BBP.grpono
					INNER JOIN grpodetail GRD ON GR.id = GRD.grpoid
				 WHERE
					BBP.breederbatchid = p_breederbatchid
			) AS TEMP;
            
     
	 -- Birds placed in batch
             
        SELECT 
			CASE WHEN itemid = @femaleitemid THEN @femaleplaced:= quantity ELSE NULL END as femaleplaced
        FROM (
        
			SELECT itemid, SUM(BPD.quantity) as quantity
				FROM breederbatchplacement BP
				INNER JOIN breederbatchplacementdetail BPD ON BPD.breederbatchplacementid = BP.id
				WHERE
					BP.breederbatchid = p_breederbatchid
				GROUP BY itemid
			
			 ) AS TEMP;
             
   
     -- Live birds
             
        SELECT 
			CASE WHEN itemid = @femaleitemid THEN @femalemortality:= itemmortality ELSE NULL END as femalemortality
        FROM (
				SELECT itemid, SUM(totalmortality) + SUM(totalculls) as itemmortality
					FROM breederdailytransaction BT
					INNER JOIN breederdailymortality BDM ON BT.id = BDM.breederdailytransactionid
				WHERE
					BT.breederbatchid = p_breederbatchid 
					-- AND fnc_calculate_weekno(BT.transactiondate, @placementdate) = p_weekno
				GROUP BY itemid
        ) AS TEMP;
            

	 -- Batch total consumption

		SELECT SUM(batchconsumptioncost), SUM(batchconsumptionquantity) INTO @batchconsumptioncost, @batchconsumption FROM (
			
            SELECT BC.quantity as batchconsumptionquantity, I.unitcost * BC.quantity AS batchconsumptioncost
			 
			FROM breederdailyconsumption BC
			INNER JOIN breederdailytransaction BT  ON BT.id = BC.breederdailytransactionid
			-- INNER JOIN materialissuedetail MD ON BT.issueid = MD.materialissueid
			INNER JOIN item I ON I.id = BC.itemid
               
            WHERE BT.breederbatchid = p_breederbatchid AND BT.statusid = 822
            AND fnc_calculate_weekno(BT.transactiondate, @placementdate) = p_weekno
		
          --  GROUP BY BC.quantity 
		) AS batchconsumptiontable;

	
     --  Eggs collection by batch
     
     	SELECT SUM(quantity) INTO @eggsproduction FROM (
        
			SELECT ECD.quantity as quantity
			FROM eggscollectiondetail ECD
			INNER JOIN eggscollection EC ON ECD.eggscollectionid = EC.id
			
            WHERE EC.breederbatchid = p_breederbatchid 
           AND fnc_calculate_weekno(EC.collectiondate, @placementdate) = p_weekno
			-- GROUP BY ECD.quantity 
		) AS eggscollectiontable;

     
    
	SELECT 	 
		CAST(@femaleitemid AS UNSIGNED INTEGER) AS femaleitemid,
		CAST(@femalebirdcost AS UNSIGNED INTEGER) AS femalebirdcost,
		CAST(@femaleplaced AS UNSIGNED INTEGER) AS femaleplaced,
		CAST(IFNULL(@femalemortality,0) AS UNSIGNED INTEGER) AS femalemortality,
		CAST(IFNULL(@batchconsumptioncost,0) AS UNSIGNED INTEGER) AS batchconsumptioncost,
        CAST(IFNULL(@batchconsumption,0) AS UNSIGNED INTEGER) AS batchconsumption,
		CAST(IFNULL(@standardeggcost,0) AS DECIMAL(9,3)) AS standardeggcost,
        CAST(IFNULL(@eggsproduction,0) AS UNSIGNED INTEGER) AS eggsproduction;
        
     
        
        -- select record from standard table for future weeks
           
        SET @consumption = 0;
        SET @consumptioncost = 0;
       
       SELECT consumption, consumptioncost INTO @consumption, @consumptioncost
       FROM ( SELECT 
			BFSD.itemid, 
            BFSD.feedconsumed as consumption,
            BFSD.feedconsumed * I.unitcost as consumptioncost
        
        FROM breederfeedstandard BFS
        LEFT JOIN breederfeedstandarddetail BFSD ON BFS.id = BFSD.breederfeedstandardid
        LEFT JOIN item I ON I.id = BFSD.itemid
        
        WHERE 
         BFS.breednametypeid = 72 AND
         BFSD.weeknumber = p_weekno
		) AS temptable;
        
        SELECT ageinweek as weekno, 
        ((IFNULL(@femaleplaced,0) - IFNULL(@femalemortality,0)) * livability) /100 as livebirds,
        CAST(IFNULL(@consumptioncost,0) AS UNSIGNED INTEGER) AS batchconsumptioncost,
        CAST(IFNULL(@consumption,0) AS UNSIGNED INTEGER) AS batchconsumption,
        hhheperweek * (((IFNULL(@femaleplaced,0) - IFNULL(@femalemortality,0))) ) as eggsproduction
        FROM breederperformanceobjective
        WHERE ageinweek = p_weekno;
        
      

END;



CREATE PROCEDURE `spc_weekly_layeramortization`(
	IN p_layerbatchid INT,
    IN p_weekno INT
)
BEGIN
     
     SET @femaleitemid = NULL;
     SET @femalebirdcost = NULL;
     SET @femaleplaced = NULL;
     SET @femalemortality = NULL;
	 SET @batchconsumptioncost = NULL;
     SET @batchconsumption = NULL;
     SET @standardeggcost = NULL;
     SET @eggsproduction = NULL;
     SET @placementdate = NULL;
      
     
        SELECT placementdate INTO @placementdate
        FROM layerbatchplacement 
        WHERE layerbatchid = p_layerbatchid;
        
		-- select default values from layer setting
          
		SELECT 
			defaultfemalechickid ,standardeggcost
			INTO 
            @femaleitemid, @standardeggcost
		FROM 
			layersetting LIMIT 1;


	 -- Bird purchase cost
     
         SELECT 
			CASE WHEN itemid = @femaleitemid THEN @femalebirdcost:= unitprice ELSE NULL END as femalebirdcost
        FROM (
         
				SELECT itemid, GRD.unitprice as unitprice
				 
					FROM layerbatchplacement LBP 
					INNER JOIN grpo GR ON GR.id = LBP.grpono
					INNER JOIN grpodetail GRD ON GR.id = GRD.grpoid
				 WHERE
					LBP.layerbatchid = p_layerbatchid
			) AS TEMP;
            
     
	 -- Birds placed in batch
             
        SELECT 
			CASE WHEN itemid = @femaleitemid THEN @femaleplaced:= quantity ELSE NULL END as femaleplaced
        FROM (
        
			SELECT itemid, SUM(LPD.quantity) as quantity
				FROM layerbatchplacement LP
				INNER JOIN layerbatchplacementdetail LPD ON LPD.layerbatchplacementid = LP.id
				WHERE
					LP.layerbatchid = p_layerbatchid
				GROUP BY itemid
			
			 ) AS TEMP;
             
   
     -- Live birds
             
        SELECT 
			CASE WHEN itemid = @femaleitemid THEN @femalemortality:= itemmortality ELSE NULL END as femalemortality
        FROM (
				SELECT itemid, SUM(todaymortality) + SUM(todayculls) as itemmortality
					FROM layerdailytransaction LT
					INNER JOIN layerdailymortality LDM ON LT.id = LDM.layerdailytransactionid
				WHERE
					LT.layerbatchid = p_layerbatchid 
					-- AND fnc_calculate_weekno(BT.transactiondate, @placementdate) = p_weekno
				GROUP BY itemid
        ) AS TEMP;
            

	 -- Batch total consumption

		SELECT SUM(batchconsumptioncost), SUM(batchconsumptionquantity) INTO @batchconsumptioncost, @batchconsumption FROM (
			
            SELECT LC.consumptionquantity as batchconsumptionquantity, I.unitcost * LC.consumptionquantity AS batchconsumptioncost
			 
			FROM layerdailyconsumption LC
			INNER JOIN layerdailytransaction LT  ON LT.id = LC.layerdailytransactionid
			-- INNER JOIN materialissuedetail MD ON BT.issueid = MD.materialissueid
			INNER JOIN item I ON I.id = LC.itemid
               
            WHERE LT.layerbatchid = p_layerbatchid AND LT.statusid = 1170
            AND fnc_calculate_weekno(LT.transactiondate, @placementdate) = p_weekno
		
          --  GROUP BY BC.quantity 
		) AS batchconsumptiontable;

	
     --  Eggs collection by batch
     
     	SELECT SUM(quantity) INTO @eggsproduction FROM (
        
			SELECT LECD.quantity as quantity
			FROM layereggscollectiondetail LECD
			INNER JOIN layereggscollection LEC ON LECD.eggscollectionid = LEC.id
			
            WHERE LEC.layerbatchid = p_layerbatchid 
           AND fnc_calculate_weekno(LEC.collectiondate, @placementdate) = p_weekno
			-- GROUP BY ECD.quantity 
		) AS eggscollectiontable;

     
    
	SELECT 	 
		CAST(@femaleitemid AS UNSIGNED INTEGER) AS femaleitemid,
		CAST(@femalebirdcost AS UNSIGNED INTEGER) AS femalebirdcost,
		CAST(@femaleplaced AS UNSIGNED INTEGER) AS femaleplaced,
		CAST(IFNULL(@femalemortality,0) AS UNSIGNED INTEGER) AS femalemortality,
		CAST(IFNULL(@batchconsumptioncost,0) AS UNSIGNED INTEGER) AS batchconsumptioncost,
        CAST(IFNULL(@batchconsumption,0) AS UNSIGNED INTEGER) AS batchconsumption,
		CAST(IFNULL(@standardeggcost,0) AS DECIMAL(9,3)) AS standardeggcost,
        CAST(IFNULL(@eggsproduction,0) AS UNSIGNED INTEGER) AS eggsproduction;
        
     
        
        -- select record from standard table for future weeks
           
        SET @consumption = 0;
        SET @consumptioncost = 0;
       
       SELECT consumption, consumptioncost INTO @consumption, @consumptioncost
       FROM ( SELECT 
			LFSD.itemid, 
            LFSD.feedconsumed as consumption,
            LFSD.feedconsumed * I.unitcost as consumptioncost
        
        FROM layerfeedstandard LFS
        LEFT JOIN layerfeedstandarddetail LFSD ON LFS.id = LFSD.layerfeedstandardid
        LEFT JOIN item I ON I.id = LFSD.itemid
        
        WHERE 
         LFS.layernametypeid = 1061 AND
         LFSD.weeknumber = p_weekno
		) AS temptable;
        
        SELECT ageinweek as weekno, 
        ((IFNULL(@femaleplaced,0) - IFNULL(@femalemortality,0)) * livability) /100 as livebirds,
        CAST(IFNULL(@consumptioncost,0) AS UNSIGNED INTEGER) AS batchconsumptioncost,
        CAST(IFNULL(@consumption,0) AS UNSIGNED INTEGER) AS batchconsumption,
        hdppercent * (((IFNULL(@femaleplaced,0) - IFNULL(@femalemortality,0))) ) as eggsproduction
        FROM layerperformanceobjective
        WHERE ageinweek = p_weekno;
        
      

END;



CREATE PROCEDURE `spc_weightslipdetail_delete`(
IN p_id INT(11)
)
BEGIN
DELETE
FROM feedmill_weightslipdetail
WHERE   id = p_id;

END;



CREATE PROCEDURE `spc_weightslipdetail_save`(
	IN p_id INT(11),
    IN p_weightslipid INT(11),
    IN p_itemcode INT(11),
    IN p_quantity DECIMAL(9,3),
    IN p_weight DECIMAL(9,3),
    IN p_companyid INT(11),
    IN p_userid INT(11),
    OUT out_id INT
)
BEGIN

SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_weightslipdetail(id,weightslipid,itemcode,quantity,weight,companyid)
        VALUES (p_id,p_weightslipid,p_itemcode,p_quantity,p_weight,p_companyid);
        
        SET @action = 'INSERT';
        
        ELSE
        UPDATE feedmill_weightslipdetail
        SET  id = p_id,
			 weightslipid = p_weightslipid,
            itemcode = p_itemcode,
            quantity = p_quantity,
             weight = p_weight,
            companyid = p_companyid,
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_weightslipdetail', out_id, @action, p_userid);


END;



CREATE PROCEDURE `spc_weightslipdetail_search`(
IN p_weightslipid INT(11)
)
BEGIN

SELECT  id,
	    weightslipid,
        itemcode,
        quantity,
        weight
       
           
    FROM feedmill_weightslipdetail 
    
    
    WHERE  
		  weightslipid = p_weightslipid;

END;



CREATE PROCEDURE `spc_weightslipdetail_select`(
IN p_id INT(11),
IN p_companyid INT(11)

)
BEGIN

SELECT 	   id,
		   weightslipid,
           itemcode,
           quantity,
           weight,
           companyid
		
				
	FROM feedmill_weightslipdetail

	WHERE companyid = p_companyid
	AND	id = p_id;            

END;



CREATE PROCEDURE `spc_weightslip_delete`(
IN p_id INT(11)
)
BEGIN

DELETE
FROM feedmill_weightslip
WHERE   id = p_id;

END;



CREATE PROCEDURE `spc_weightslip_save`(
IN p_id INT(11),
IN p_ackid INT(11),
IN p_weightslipdate DATE,
IN p_loadweightkg DECIMAL(9,3),
IN p_loadweightton DECIMAL(9,3),
IN p_unloadweightkg DECIMAL(9,3),
IN p_unloadweightton DECIMAL(9,3),
IN p_netweightkg DECIMAL(9,3),
IN p_netweightton DECIMAL(9,3),
IN p_intime VARCHAR(45),
IN p_outtime VARCHAR(45),
IN p_companyid INT(11),
IN p_userid INT(11),
OUT out_id INT
)
BEGIN

SET @action = null;
	
    IF(NULLIF(p_id, '0') IS NULL) THEN
		INSERT INTO feedmill_weightslip(id,ackid,weightslipdate,loadweightkg,loadweightton,unloadweightkg,unloadweightton,netweightkg,netweightton,intime,outtime,companyid)
        VALUES (p_id,p_ackid,p_weightslipdate,p_loadweightkg,p_loadweightton,p_unloadweightkg,p_unloadweightton,p_netweightkg,p_netweightton,p_intime,p_outtime,p_companyid);
        
        SET @action = 'INSERT';
	
    ELSE
        UPDATE feedmill_weightslip
        SET 
			
            ackid = p_ackid,
            weightslipdate = p_weightslipdate,
            loadweightkg = p_loadweightkg,
            loadweightton = p_loadweightton,
            unloadweightkg = p_unloadweightkg,
            unloadweightton = p_unloadweightton,
            netweightkg = p_netweightkg,
            netweightton = p_netweightton,
            intime = p_intime,
             outtime = p_outtime,
                companyid = p_companyid,
                 
			id = LAST_INSERT_ID(id)
            
		WHERE id = p_id
        AND companyid = p_companyid;
        
        SET @action = 'UPDATE';
        
    END IF;
    
    SELECT LAST_INSERT_ID() INTO OUT_ID;
    
    -- record log
   CALL spc_commonlog_save(p_companyid, 'feedmill_weightslip', out_id, @action, p_userid);







END;



CREATE PROCEDURE `spc_weightslip_search`(
IN p_companyid INT(11) 

)
BEGIN
SELECT 	    id,
			ackid,
            DATE_FORMAT(weightslipdate,'%d/%m/%Y') as weightslipdate,
            loadweightkg,
            loadweightton,
            unloadweightkg,
            unloadweightton,
            netweightkg,
            netweightton,
            intime,
			outtime
			
	
			
           
           
	FROM feedmill_weightslip
    
    WHERE companyid = p_companyid;


END;



CREATE PROCEDURE `spc_weightslip_select`( 
IN p_id INT(11),
IN p_companyid INT(11)
)
BEGIN

SELECT 		
            ackid,
            DATE_FORMAT(weightslipdate,'%d/%m/%Y') as weightslipdate,
            loadweightkg,
            loadweightton,
            unloadweightkg,
            unloadweightton,
            netweightkg,
            netweightton,
            intime,
			outtime,
            companyid
           
	FROM  feedmill_weightslip
    
    WHERE companyid = p_companyid
    AND id = p_id;

END;



CREATE PROCEDURE `spk_apptransaction_search`(
	
)
BEGIN

	SELECT `id`,
		`entityname`,
		`displayname`
	FROM `entity`
    WHERE
		entitytypeid = 6003;
END;



CREATE PROCEDURE `spk_notificationplaceholder_select`(
	IN p_entityid INT
)
BEGIN

	SELECT 
		id, transactiontypeid, placeholder, propertyname, valuetype
	FROM 
		notificationplaceholder
	WHERE
		transactiontypeid = p_entityid;
		
END;



CREATE PROCEDURE `spk_notificationtemplate_delete`(
	IN p_id INT
)
BEGIN

	DELETE FROM notificationtemplate WHERE id = p_id;

END;



CREATE PROCEDURE `spk_notificationtemplate_save`(
	IN p_id	INT,
    IN p_moduleid INT,
    IN p_transactiontypeid INT,
    IN p_roleids VARCHAR(1000),
    IN p_template NVARCHAR(3000),
    IN p_userid INT,
    IN p_inapp TINYINT,
    IN p_sms TINYINT,
	IN p_email TINYINT,
    OUT out_id INT
)
BEGIN
	
	SET @action = null;
    
    IF(NULLIF(p_id, '0') IS NULL) THEN
	
		INSERT INTO notificationtemplate
			(`id`,
				`moduleid`,
				`transactiontypeid`,
				`roleids`,
				`template`,
                `inapp`,
                `sms`,
                `email`
				)
			VALUES 
				(p_id, p_moduleid, p_transactiontypeid, p_roleids, p_template, p_inapp, p_sms, p_email);
                
	  SET @action = 'INSERT';
      
	ELSE
    
		UPDATE notificationtemplate
			SET 
				moduleid = p_moduleid,
				transactiontypeid = p_transactiontypeid,
				roleids = p_roleids,
				template = p_template,
                inapp = p_inapp,
                sms = p_sms,
                email = p_email,
				id = LAST_INSERT_ID(id)
			WHERE
				id = p_id;
                
                
           SET @action = 'UPDATE';     
              
	END IF;
    
    SELECT LAST_INSERT_ID() INTO out_id; 
    
   -- record log
   CALL spc_commonlog_save(1,'notificationtemplate', out_id, @action, p_userid);

END;



CREATE PROCEDURE `spk_notificationtemplate_search`(
)
BEGIN

	SELECT TT.`id`,
		TT.`moduleid`,
        REF1.refname as `modulename`,
		TT.`transactiontypeid`,
		AP.entityname as transactioncode,
        AP.displayname as transactionname,
        AP.pagekey,
		TT.`roleids`,
        (select GROUP_CONCAT(REF2.refname) from `reference` REF2 WHERE FIND_IN_SET(REF2.id, TT.`roleids`)) as rolenames,
        -- REF2.refname as `rolename`,
		TT.inapp,
        TT.sms,
        TT.email,
		TT.`template`
		
	FROM 
		`notificationtemplate` TT
	LEFT JOIN `entity` AP ON TT.transactiontypeid = AP.id
	LEFT JOIN `reference` REF1 ON TT.moduleid = REF1.id;
    
END;



CREATE PROCEDURE `spk_notificationtemplate_select`(
	IN p_id INT
)
BEGIN

	SELECT `id`,
		`moduleid`,
		`transactiontypeid`,
		`roleids`,
		(select GROUP_CONCAT(REF2.refname) from `reference` REF2 WHERE FIND_IN_SET(REF2.id, `roleids`)) as rolenames,
		`template`,
		`inapp`,
        `sms`,
        `email`
	FROM 
		`notificationtemplate`
	WHERE
		id = p_id;

END;



CREATE PROCEDURE `SPLIT_VALUE_STRING`(
    IN `INPUTSTR` TEXT CHARSET utf8mb4, 
    IN `SEPARATR` TEXT CHARSET utf8mb4
)
BEGIN

	SET @I = 1;
    SET @SEP = SEPARATR;
    SET @VARSTR = INPUTSTR;
    
    SET @N = FORMAT((LENGTH(@VARSTR)-LENGTH(REPLACE(@VARSTR, @SEP, '')))/LENGTH(@SEP), 0)+1;
   
    CREATE TEMPORARY TABLE IF NOT EXISTS splt_table(P1 VARCHAR(100) NULL);
	TRUNCATE TABLE splt_table;
    
    label1: LOOP
    
		SET @TEMP = SUBSTRING_INDEX(SUBSTRING_INDEX(@VARSTR, @SEP, 1), ',' , -1);
        -- SELECT @TEMP;
        insert into splt_table (`P1`) SELECT @TEMP;
        SET @I = @I + 1;
        SET @VARSTR = REPLACE(@VARSTR, CONCAT(@TEMP, @SEP), '');
        IF @N >= @I THEN
          ITERATE label1;
        END IF;
        LEAVE label1;
      END LOOP label1;
    SELECT * FROM splt_table;           

END;



CREATE PROCEDURE `testnextprev`(
	IN p_id INT,
    IN p_tablename varchar(100),
    IN p_action VARCHAR(10),
    OUT out_returnid INT
)
BEGIN

	SET @returnid = null;
 	SET @strquery = null;
    
		IF(p_id IS NULL) THEN
			SET p_id = 0;
		END IF;
        			
		SET @strquery = concat('SELECT id into @returnid FROM ', p_tablename, ' WHERE ');
		SET @strquery = concat(@strquery, ' (IFNULL(' , p_id , ', 0) != 0 && ''' , p_action , ''' = ''PREV'' && id < ',p_id,')');
		SET @strquery = concat(@strquery, ' OR ');
		SET @strquery = concat(@strquery, ' (IFNULL(' , p_id , ', 0) != 0 && ''' , p_action ,''' = ''NEXT'' && id > ',p_id,')');
		SET @strquery = concat(@strquery, ' OR ');
		SET @strquery = concat(@strquery, ' (IFNULL(' , p_id , ', 0) = 0 && ''' , p_action , ''' = ''PREV'') ');
		SET @strquery = concat(@strquery, ' OR ');
		SET @strquery = concat(@strquery, ' (IFNULL(' , p_id , ', 0) = 0 && ''' , p_action , ''' = ''NEXT'') ');
                
		IF(IFNULL(p_id, 0) = 0 &&  p_action = 'NEXT') THEN
			SET @strquery = concat(@strquery, ' ORDER BY id DESC ');
		END IF;
        
        SET @strquery = concat(@strquery, ' LIMIT 1;');
                
     PREPARE statement FROM @strquery;
	 EXECUTE statement;
	 DEALLOCATE PREPARE statement;

	IF(IFNULL(@returnid, 0) != 0) THEN
		SET out_returnid = @returnid;
     ELSE
		SET out_returnid = p_id;
     END IF;

END;



CREATE PROCEDURE `test_11`()
BEGIN

	SELECT * FROM setter;
    
    SELECT * FROM setterslots;

END;



CREATE PROCEDURE `test_getitembatchwise_qty`(
	IN p_itemid INT,
    IN p_warehousebinid INT
)
BEGIN

DECLARE x INT;

set @orderquantity = 1000;
set @row_number = 0;
set x = 0;
set @reccount = 0;
	
DROP TEMPORARY TABLE IF EXISTS tempitembatches;

CREATE TEMPORARY TABLE tempitembatches
SELECT itemid, itemname, itembatch, quantity, `rank` FROM (
	SELECT MM.itemid, I.itemname, MM.itembatch, MM.itemvalue, MM.itemunitid, fnc_itembatchlivestock(MM.itemid, MM.itembatch, MM.companyid) as quantity, (@row_number := @row_number + 1) as `rank` 
	FROM materialmovement  MM
    INNER JOIN item I ON MM.itemid = I.id
	WHERE itemid = p_itemid AND towarehousebinid = p_warehousebinid
) AS 
tmplivestock WHERE quantity > 0;

SELECT COUNT(*) INTO @reccount FROM tempitembatches;

WHILE x <= @reccount DO

	SET @b_itemid = 0, @b_itemname = '', @b_itembatch = '', @b_itemvalue = 0, @b_itemunitid = 0, @b_quantity = 0, @b_rnk = 0;
    SELECT 
		itemid, itemname, itembatch, itemvalue, itemunitid, quantity, `rank` 
		INTO 
        @b_itemid, @b_itemname, @b_itembatch, @b_itemvalue, @b_itemunitid, @b_quantity, @b_rnk 
	FROM 
    tempitembatches WHERE `rank` = x;
    
    SET @b_minusqty = 0;
    
    IF (@b_quantity > @orderquantity) THEN
		SET @b_minusqty = @orderquantity;
	ELSEIF(@b_quantity < @orderquantity) THEN
		SET @b_minusqty = @b_quantity;
	ELSEIF(@b_quantity = @orderquantity) THEN
		SET @b_minusqty = @orderquantity;
    END IF;
    
    SET @b_unitcost = CAST(@b_itemvalue / @b_minusqty AS DECIMAL(12,3));
    SET @orderquantity = @orderquantity - @b_minusqty;
	
    CALL spc_materialissuedetail_save(null, @materialissue_outid, @b_itemid, @b_itemname, @b_minusqty, @b_unitcost, (@b_minusqty * @b_unitcost), @b_itemunitid, @b_itembatch, p_companyid, p_userid, @materialissuedetail_outid);
	CALL spc_materialmovement_save(null, @b_itemid, @b_itembatch, 683, @materialissuedetail_outid, NOW(), @b_minusqty, @warehouseid, @warehousebinid, null, null, null, p_companyid, p_userid, @movement_outid);
     
	SET x = x + 1; 
    
END WHILE;


END;



CREATE PROCEDURE `TEST_NEXTPREV`()
BEGIN

 
    SET @p_tablename = 'setter';
 	SET @strquery = null;
			
	SET @strquery = concat(@strquery, 'SELECT * FROM ', @p_tablename);
	SET @strquery = concat(@strquery, ';');
            
    PREPARE statementa FROM @strquery;
	EXECUTE statementa;
	DEALLOCATE PREPARE statementa;

END;


CREATE FUNCTION `FIRST_DAY_OF_WEEK`(day DATE) RETURNS date
    DETERMINISTIC
BEGIN
  RETURN SUBDATE(day, WEEKDAY(day));
END;



CREATE FUNCTION `fnc_active_status`(
	p_isactive INT
) RETURNS tinyint(1)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
    IF(p_isactive = 1) THEN
      return true;
	ELSE
      return false;
	END IF;
END;



CREATE FUNCTION `fnc_balancesheet`(
	p_todate DATE,
    p_acledgerid INT(11)
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbal = null;
    
    SET @cramount = null;
    SET @dramount = null;
    
    SELECT (select REPLACE(cast(IFNULL(SUM(JED.cramount),0) as CHAR(100)), '-', '')), IFNULL(SUM(JED.dramount),0)
    INTO @cramount, @dramount
    FROM journalentry JE
    LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    WHERE JE.voucherdate < p_todate
    AND JED.acledgerid = p_acledgerid;
    
    SELECT ((IFNULL(LOB.openingbalance,0) + @dramount) - @cramount) INTO @openingbal
		
	FROM ledgeropeningbalance LOB
	LEFT JOIN journalentrydetail JED ON JED.acledgerid = LOB.ledgerid
	
	WHERE LOB.ledgerid = JED.acledgerid
    AND JED.acledgerid = p_acledgerid
	
	group by JED.acledgerid;

RETURN (select REPLACE(cast(@openingbal as CHAR(100)), '-', ''));
END;



CREATE FUNCTION `fnc_batchopningbalance`(
	p_breederbatchid INT,
    p_shedids VARCHAR(300),
    p_itemid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @btachopeningbalance = 0;
    
     
		SELECT IFNULL(SUM(BBPD.quantity),0) INTO @btachopeningbalance
        from breederbatchplacementdetail BBPD
        LEFT JOIN breederbatchplacement BBP ON BBP.id = BBPD.breederbatchplacementid
        
        where
           BBP.breederbatchid = p_breederbatchid
           AND FIND_IN_SET(BBPD.breedershedid,p_shedids)
           AND BBPD.itemid = p_itemid LIMIT 1;

   
	RETURN @openingbalance;

END;



CREATE FUNCTION `fnc_batchshedwise_cullsandmortality`(
	p_breederbatchid INT,
    p_shedids varchar(200),
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM breederbatchplacement
    WHERE breederbatchid = p_breederbatchid;
     
     
	SELECT SUM(totalmortality) + SUM(totalculls) INTO @quantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
		FIND_IN_SET(BDT.shedid,p_shedids) AND
         -- BDT.shedid = p_shedid AND 
         BDM.itemid = p_itemid AND
         (BDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @quantity;
END;



CREATE FUNCTION `fnc_batchshedwise_malefemale_transferedquantity`(
	p_breederbatchid INT,
    p_shedid varchar(200),
    p_itemid INT,
    p_transferdate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @transferedquantity = 0;
    
	 SELECT 			
			SUM(BBTD.quantity) INTO @transferedquantity
                      
	FROM breederbatchtransferdetail BBTD
	LEFT JOIN breederbatchtransfer BBT ON BBT.id = BBTD.breederbatchtransferid
							
	WHERE 
		BBT.breederbatchid = p_breederbatchid AND
		BBT.fromshedid = p_shedid AND
        BBTD.itemid = p_itemid AND
		BBT.transferdate = p_transferdate;
                        
RETURN IFNULL(@transferedquantity, 0);

END;



CREATE FUNCTION `fnc_batchwise_closingbalance`(
	p_breederbatchid INT,
    p_shedid INT,
    p_itemid INT,
    p_transactiondate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM breederbatchplacement
    WHERE breederbatchid = p_breederbatchid;
     
	IF(@placementdate = p_transactiondate) THEN
    
		SELECT IFNULL(SUM(BBPD.quantity),0) INTO @openingbalance 
        from breederbatchplacementdetail BBPD
        LEFT JOIN breederbatchplacement BBP ON BBP.id = BBPD.breederbatchplacementid
        
        where
           BBP.breederbatchid = p_breederbatchid
		   AND FIND_IN_SET(BBPD.breedershedid,p_shedids)
          --  AND BBPD.breedershedid = p_shedid
           AND BBPD.itemid = p_itemid LIMIT 1;
        
    ELSE
     
		SELECT IFNULL(SUM(BBPD.quantity),0) - IFNULL(fnc_batchshedwise_cullsandmortality(p_breederbatchid, p_shedid, p_itemid, p_transactiondate), 0) INTO @openingbalance
        from breederbatchplacementdetail BBPD
        LEFT JOIN breederbatchplacement BBP ON BBP.id = BBPD.breederbatchplacementid
        
        where
           BBP.breederbatchid = p_breederbatchid
           AND BBPD.breedershedid = p_shedid
           AND BBPD.itemid = p_itemid LIMIT 1;

	END IF;
   
	RETURN @openingbalance;

END;



CREATE FUNCTION `fnc_batchwise_cullsandmortality`(
	p_breederbatchid INT,
    p_shedids VARCHAR(300),
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM breederbatchplacement
    WHERE breederbatchid = p_breederbatchid;
     
     
	SELECT SUM(totalmortality) + SUM(totalculls) INTO @quantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
         FIND_IN_SET(BDT.shedid,p_shedids) AND 
         BDM.itemid = p_itemid AND
         (BDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @quantity;
END;



CREATE FUNCTION `fnc_batchwise_malefemaleculls_ongivendate`(
	p_breederdailytransactionid INT,
    p_itemid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @totalculls = 0;
       
	SELECT SUM(totalculls) INTO @totalculls
    FROM
		breederdailymortality 
	WHERE
		breederdailytransactionid = p_breederdailytransactionid AND
		itemid = p_itemid;
      
	RETURN IFNULL(@totalculls, 0);

END;



CREATE FUNCTION `fnc_batchwise_malefemalemortality_ongivendate`(
	p_breederdailytransactionid INT,
    p_itemid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @totalmortality = 0;
       
	SELECT SUM(totalmortality) INTO @totalmortality
    FROM
		breederdailymortality 
	WHERE
		breederdailytransactionid = p_breederdailytransactionid AND
		itemid = p_itemid;
      
	RETURN IFNULL(@totalmortality, 0);

END;



CREATE FUNCTION `fnc_batchwise_malefemaleopbalance`(
	p_breederbatchid INT,
    p_shedids VARCHAR(300),
    p_itemid INT,
    p_transactiondate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM breederbatchplacement
    WHERE breederbatchid = p_breederbatchid;
     
	IF(@placementdate = p_transactiondate) THEN
    
		SELECT IFNULL(SUM(BBPD.quantity),0) INTO @openingbalance 
        from breederbatchplacementdetail BBPD
        LEFT JOIN breederbatchplacement BBP ON BBP.id = BBPD.breederbatchplacementid
        
        where
           BBP.breederbatchid = p_breederbatchid
           AND FIND_IN_SET(BBPD.breedershedid,p_shedids)
           AND BBPD.itemid = p_itemid LIMIT 1;
        
    ELSE
     
		SELECT IFNULL(SUM(BBPD.quantity),0) - IFNULL(fnc_batchwise_cullsandmortality(p_breederbatchid, p_shedids, p_itemid, p_transactiondate), 0) INTO @openingbalance
        from breederbatchplacementdetail BBPD
        LEFT JOIN breederbatchplacement BBP ON BBP.id = BBPD.breederbatchplacementid
        
        where
           BBP.breederbatchid = p_breederbatchid
           AND FIND_IN_SET(BBPD.breedershedid,p_shedids)
           AND BBPD.itemid = p_itemid LIMIT 1;

	END IF;
   
	RETURN @openingbalance;

END;



CREATE FUNCTION `fnc_batchwise_malefemaleopbal_tillgivendate`(
	p_breederbatchid INT,
    p_breedershedid INT,
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @totalcullsandmortality = 0;
    SET @transferedquantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM breederbatchplacement
    WHERE breederbatchid = p_breederbatchid;
    
    
	-- calculate total culla and mortality for given batch before p_todate
    
	SELECT SUM(totalmortality) + SUM(totalculls) INTO @totalcullsandmortality
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
         BDT.shedid = p_breedershedid AND 
         BDM.itemid = p_itemid AND
         BDT.transactiondate >= @placementdate AND
         BDT.transactiondate < p_todate;
  
  
	-- calculate transfered male/female quantity befor p_todate
    
	SELECT 			
		SUM(BBTD.quantity) INTO @transferedquantity
                      
	FROM breederbatchtransferdetail BBTD
		 LEFT JOIN breederbatchtransfer BBT ON BBT.id = BBTD.breederbatchtransferid
							
	WHERE 
		BBT.breederbatchid = p_breederbatchid AND
		BBT.fromshedid = p_breedershedid AND
        BBTD.itemid = p_itemid AND
		BBT.transferdate < p_todate;
        
    
    -- calculate batch opening balance (placed quantity)
    
    SELECT IFNULL(SUM(BBPD.quantity),0) INTO @openingbalance
        from breederbatchplacementdetail BBPD
        LEFT JOIN breederbatchplacement BBP ON BBP.id = BBPD.breederbatchplacementid
        
        where
           BBP.breederbatchid = p_breederbatchid
           AND BBPD.breedershedid = p_breedershedid
           AND BBPD.itemid = p_itemid LIMIT 1;
    
    
	RETURN IFNULL(@openingbalance,0) - IFNULL(@totalcullsandmortality, 0) - IFNULL(@transferedquantity, 0);

END;



CREATE FUNCTION `fnc_biredbalance`(
	p_breederbatchid INT,
    p_itemid INT,
    p_placementdate DATE,
    p_fromdate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

     
     
	SELECT SUM(totalmortality) + SUM(totalculls) INTO @quantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
         BDM.itemid = p_itemid AND
         (BDT.transactiondate BETWEEN  p_placementdate AND p_fromdate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @quantity;
END;



CREATE FUNCTION `fnc_breederbatchphase`(
	p_breederbatchid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @phaseid = 0;
    
    if Exists(select * from breederbatchtransfer where breederbatchid = p_breederbatchid) then
		select phasestatusid INTO @phaseid from breederbatchtransfer 
        where breederbatchid = p_breederbatchid;
	else
		select phasestatusid INTO @phaseid from breederbatchplacement
        where breederbatchid = p_breederbatchid;
    end if;
    

RETURN @phaseid;
END;



CREATE FUNCTION `fnc_breederfeedopeningbalance`(
    p_transactiondate Date,
	p_shedid varchar(200),
    p_itemid INT(11),
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    
	SELECT GROUP_CONCAT(warehousebinid) INTO @warehousebinids
	FROM breedershed
    WHERE FIND_IN_SET(id, p_shedid);
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    itemid = p_itemid AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    FIND_IN_SET(fromwarehousebinid, @warehousebinids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
     itemid = p_itemid AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END;



CREATE FUNCTION `fnc_calculatepurchaseamont`(
    p_varderids varchar(200),
	p_fromdate DATE,
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @totalamount = 0;
   
    
        SELECT 
		
            SUM((PID.quantity*PID.unitprice) )INTO @totalamount
		
 
	FROM
			purchaseinvoice PI
			LEFT JOIN purchaseinvoicedetail PID ON PI.id = PID.purchaseinvoiceid
       
    
	WHERE 
             FIND_IN_SET( PI.vendorid,@vendorids) AND
			PI.invoicedate BETWEEN p_fromdate AND p_todate AND
            PI.companyid = p_companyid; 

RETURN @totalamount;
END;



CREATE FUNCTION `fnc_calculate_cumconsumedquantity`(
    p_breederbatchid INT,
    p_itemid VARCHAR(200),
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
   
    
    SELECT placementdate INTO @placementdate
    FROM breederbatchplacement
    WHERE breederbatchid = p_breederbatchid;
     
     
	 SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM
		breederdailyconsumption BDC
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDC.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
		BDC.itemid = p_itemid AND
		(BDT.transactiondate BETWEEN @placementdate AND p_todate); 

RETURN @quantity;
END;



CREATE FUNCTION `fnc_calculate_cummalefemaleculls`(
    p_breederbatchid INT,
    p_breedershedid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
   
    
    SELECT placementdate INTO @placementdate
    FROM breederbatchplacement
    WHERE breederbatchid = p_breederbatchid;
     
     
	SELECT IFNULL(SUM(totalculls), 0) into @quantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
		BDT.shedid = p_breedershedid AND
		(BDT.transactiondate BETWEEN @placementdate AND p_todate); 

RETURN @quantity;
END;



CREATE FUNCTION `fnc_calculate_cummalefemalemortality`(
    p_breederbatchid INT,
    p_breedershedid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
   
    
    SELECT placementdate INTO @placementdate
    FROM breederbatchplacement
    WHERE breederbatchid = p_breederbatchid;
     
     
	SELECT IFNULL(SUM(totalmortality), 0) into @quantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
		BDT.shedid = p_breedershedid AND
		(BDT.transactiondate BETWEEN @placementdate AND p_todate); 

RETURN @quantity;
END;



CREATE FUNCTION `fnc_calculate_itemopeningbalance_tillgivendate`(
    p_itemid INT,
    p_warehouseid INT,
    p_todate DATE,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @inwardQuantity = 0;
    SET @outwardQuantity = 0;
                
    SELECT 
		IFNULL(SUM(quantity), 0) into @inwardQuantity
    FROM 
		materialmovement
    WHERE
		transactiontypeid in(681, 682, 684) AND
        towarehouseid = p_warehouseid AND
        itemid = p_itemid AND
        transactiondate < p_todate AND
		companyid = p_companyid;
    
    
	SELECT IFNULL(SUM(quantity), 0) into @outwardQuantity
    FROM materialmovement
    WHERE 
		transactiontypeid = 683 AND
        fromwarehouseid = p_warehouseid AND
		itemid = p_itemid AND	
        transactiondate < p_todate AND
		companyid = p_companyid;
		
   
   RETURN (@inwardQuantity - @outwardQuantity);
 
END;



CREATE FUNCTION `fnc_calculate_layercumconsumedquantity`(
    p_layerbatchid INT,
    p_itemid VARCHAR(200),
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
   
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
     
     
	 SELECT IFNULL(SUM(consumptionquantity), 0) into @quantity
    FROM
		layerdailyconsumption LDC
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDC.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid AND
		LDC.itemid = p_itemid AND
		(LDT.transactiondate BETWEEN @placementdate AND p_todate); 

RETURN @quantity;
END;



CREATE FUNCTION `fnc_calculate_layerfemale_feedconsumption`(
    p_dailytransactionid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @quantity = 0;
   
    SELECT IFNULL(SUM(consumptionquantity), 0) into @quantity
    FROM layerdailyconsumption
    
    WHERE
	layerdailytransactionid = p_dailytransactionid AND
    consumptiontypeid = 1149 ; -- feed 
    
   RETURN @quantity;
END;



CREATE FUNCTION `fnc_calculate_layer_received_feed`(
    p_shedid VARCHAR(200),
    p_itemid INT(11),
    p_fromdate DATE,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @warehousebinids = null;
    SET @quantity = 0;
    
            
            
    SELECT GROUP_CONCAT(warehousebinid) INTO @warehousebinids
	FROM layershed
    WHERE FIND_IN_SET(id, p_shedid);
  
  
    SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM materialmovement
    
    WHERE
	companyid = p_companyid AND
    transactiontypeid in(681, 682, 684) AND
    FIND_IN_SET(towarehousebinid, @warehousebinids)
    AND transactiondate <= p_fromdate AND
    itemid = p_itemid;
    

   RETURN @quantity;
END;



CREATE FUNCTION `fnc_calculate_layer_transfered_feed`(
    p_shedid VARCHAR(200),
    p_itemid INT(11),
    p_fromdate DATE,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @warehousebinids = null;
    SET @quantity = 0;
    
    -- get default male and female item ids
	
            
		
	-- get warehousebin ids for given sheds
    SELECT GROUP_CONCAT(warehousebinid) INTO @warehousebinids
	FROM layershed
    WHERE FIND_IN_SET(id, p_shedid);
  
  
	-- calculate transfered quantity
    
    SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM materialmovement
    
    WHERE
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    FIND_IN_SET(fromwarehousebinid, @warehousebinids)
    AND transactiondate <= p_fromdate
    AND itemid = p_itemid;
    

   RETURN @quantity;
END;



CREATE FUNCTION `fnc_calculate_malefemale_feedconsumption`(
    p_dailytransactionid INT,
    p_breederitemid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @quantity = 0;
   
    SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM breederdailyconsumption
    
    WHERE
	breederdailytransactionid = p_dailytransactionid AND
    consumptiontypeid = 861 -- feed 
    AND breederitemid = p_breederitemid;
    
   RETURN @quantity;
END;



CREATE FUNCTION `fnc_calculate_outfeedquantity_ongivendate`(
    p_itemid INT,
    p_warehouseid INT,
    p_date DATE,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @outQuantity = 0;
   
	SELECT IFNULL(SUM(quantity), 0) into @outQuantity
    FROM materialmovement
    WHERE 
		transactiontypeid in(682) AND
        fromwarehouseid = p_warehouseid AND
		itemid = p_itemid AND	
        transactiondate = p_date AND
		companyid = p_companyid;
        
   
   RETURN @outQuantity;
 
END;



CREATE FUNCTION `fnc_calculate_receivedfeedquantity_ongivendate`(
    p_itemid INT,
    p_warehouseid INT,
    p_date DATE,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

   
    SET @inwardQuantity = 0;
                
    SELECT 
		IFNULL(SUM(quantity), 0) into @inwardQuantity
    FROM 
		materialmovement
    WHERE
		transactiontypeid in(681, 682, 684) AND
        towarehouseid = p_warehouseid AND
        itemid = p_itemid AND
        transactiondate = p_date AND
		companyid = p_companyid;
        
   
   RETURN @inwardQuantity;
 
END;



CREATE FUNCTION `fnc_calculate_received_feed`(
    p_shedid VARCHAR(200),
    p_itemid INT(11),
    p_fromdate DATE,
    p_companyid INT
  --   p_dailytransactionid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @warehousebinids = null;
    SET @quantity = 0;
    SET @defaultmalechickid = null;
	SET @defaultfemalechickid = null;
    
            
            
    SELECT GROUP_CONCAT(warehousebinid) INTO @warehousebinids
	FROM breedershed
    WHERE FIND_IN_SET(id, p_shedid);
  
  
    SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM materialmovement
    
    WHERE
	companyid = p_companyid AND
    itemid = p_itemid AND
    transactiontypeid in(681, 682,684) AND
	transactiondate <= p_fromdate AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);
    
   RETURN @quantity;
END;



CREATE FUNCTION `fnc_calculate_transfered_feed`(
    p_shedid VARCHAR(200),
    p_itemid INT(11),
    p_fromdate DATE,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @warehousebinids = null;
    SET @quantity = 0;
    
    -- get default male and female item ids

            
		
	-- get warehousebin ids for given sheds
    SELECT GROUP_CONCAT(warehousebinid) INTO @warehousebinids
	FROM breedershed
    WHERE FIND_IN_SET(id, p_shedid);
  
  
	-- calculate transfered quantity
    
    SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM materialmovement
    
    WHERE
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    FIND_IN_SET(fromwarehousebinid, @warehousebinids)
    AND transactiondate = p_fromdate
    AND itemid = p_itemid;
    -- AND itemid not in (@defaultmalechickid, @defaultfemalechickid);
    

   RETURN @quantity;
END;



CREATE FUNCTION `fnc_calculate_weekno`(
	p_fromdate DATE,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	DECLARE p_days INT;
    DECLARE weekno INT;
    SET p_days = 0;
	
     SELECT DATEDIFF(p_fromdate, p_todate) INTO p_days;
     
     IF (p_days >= 162 && p_days <= 168) THEN
		SET weekno = 24;
        
	 ELSEIF (p_days >= 169 && p_days <= 175) THEN
		SET weekno = 25;
     
	 ELSEIF (p_days >= 176 && p_days <= 182) THEN
		SET weekno = 26;
        
	 ELSEIF (p_days >= 183 && p_days <= 189) THEN
		SET weekno = 27;
        
	 ELSEIF (p_days >= 190 && p_days <= 196) THEN
		SET weekno = 28;
        
	 ELSEIF (p_days >= 197 && p_days <= 203) THEN
		SET weekno = 29;
        
	 ELSEIF (p_days >= 204 && p_days <= 210) THEN
		SET weekno = 30;
        
	 ELSEIF (p_days >= 211 && p_days <= 217) THEN
		SET weekno = 31;
        
	 ELSEIF (p_days >= 218 && p_days <= 224) THEN
		SET weekno = 32;
        
	 ELSEIF (p_days >= 225 && p_days <= 231) THEN
		SET weekno = 33;
        
	 ELSEIF (p_days >= 232 && p_days <= 238) THEN
		SET weekno = 34;
        
	 ELSEIF (p_days >= 239 && p_days <= 245) THEN
		SET weekno = 35;
        
	 ELSEIF (p_days >= 246 && p_days <= 252) THEN
		SET weekno = 36;
        
	 ELSEIF (p_days >= 253 && p_days <= 259) THEN
		SET weekno = 37;
        
	 ELSEIF (p_days >= 260 && p_days <= 266) THEN
		SET weekno = 38;
        
	 ELSEIF (p_days >= 267 && p_days <= 273) THEN
		SET weekno = 39;
        
	 ELSEIF (p_days >= 274 && p_days <= 280) THEN
		SET weekno = 40;
        
	 ELSEIF (p_days >= 281 && p_days <= 287) THEN
		SET weekno = 41;
        
	 ELSEIF (p_days >= 288 && p_days <= 294) THEN
		SET weekno = 42;
        
	 ELSEIF (p_days >= 295 && p_days <= 301) THEN
		SET weekno = 43;
        
	 ELSEIF (p_days >= 302 && p_days <= 308) THEN
		SET weekno = 44;
        
	 ELSEIF (p_days >= 309 && p_days <= 315) THEN
		SET weekno = 45;
        
	 ELSEIF (p_days >= 316 && p_days <= 322) THEN
		SET weekno = 46;
        
	 ELSEIF (p_days >= 323 && p_days <= 329) THEN
		SET weekno = 47;
        
	 ELSEIF (p_days >= 330 && p_days <= 336) THEN
		SET weekno = 48;
        
	 ELSEIF (p_days >= 337 && p_days <= 343) THEN
		SET weekno = 49;
        
	 ELSEIF (p_days >= 344 && p_days <= 350) THEN
		SET weekno = 50;
        
	 ELSEIF (p_days >= 351 && p_days <= 357) THEN
		SET weekno = 51;
        
	 ELSEIF (p_days >= 358 && p_days <= 364) THEN
		SET weekno = 52;
        
	 ELSEIF (p_days >= 365 && p_days <= 371) THEN
		SET weekno = 53;
        
	 ELSEIF (p_days >= 372 && p_days <= 378) THEN
		SET weekno = 54;
        
	 ELSEIF (p_days >= 379 && p_days <= 385) THEN
		SET weekno = 55;
        
	 ELSEIF (p_days >= 386 && p_days <= 392) THEN
		SET weekno = 56;
        
	 ELSEIF (p_days >= 393 && p_days <= 399) THEN
		SET weekno = 57;
        
	 ELSEIF (p_days >= 400 && p_days <= 406) THEN
		SET weekno = 58;
        
	 ELSEIF (p_days >= 407 && p_days <= 413) THEN
		SET weekno = 59;
        
	 ELSEIF (p_days >= 414 && p_days <= 420) THEN
		SET weekno = 60;
        
	 ELSEIF (p_days >= 421 && p_days <= 427) THEN
		SET weekno = 61;
        
	 ELSEIF (p_days >= 428 && p_days <= 434) THEN
		SET weekno = 62;
        
	 ELSEIF (p_days >= 435 && p_days <= 441) THEN
		SET weekno = 63;
        
	 ELSEIF (p_days >= 442 && p_days <= 448) THEN
		SET weekno = 64;
        
	 ELSEIF (p_days >= 449 && p_days <= 455) THEN
		SET weekno = 65;
        
	 ELSEIF (p_days >= 456 && p_days <= 462) THEN
		SET weekno = 66;
        
	 ELSEIF (p_days >= 463 && p_days <= 469) THEN
		SET weekno = 67;
        
	 ELSEIF (p_days >= 470 && p_days <= 476) THEN
		SET weekno = 68;
        
     END IF;
     
     RETURN weekno;
END;



CREATE FUNCTION `fnc_cbffreechicks`(
	p_sourceid INT,
    p_requestid INT,
    p_batchqty INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

		SET @qty = null;
        SET @free_qty = null;

		if(p_sourceid = 261) THEN -- OWN

			SELECT 
				0 INTO @qty
			FROM 
				materialtransfer
			WHERE
				requestid = p_requestid;
				
			-- GROUP BY requestid;
		   
		elseif(p_sourceid = 262) THEN -- PURCHASED
			SELECT POD.freequantitypercent INTO @freequantitypercent
            FROM purchaseorderdetail POD
            LEFT JOIN purchaseorder PO ON PO.id = POD.purchaseorderid
            WHERE PO.purchaserequestid = p_requestid
            LIMIT 1;
            
			SELECT (p_batchqty - ((p_batchqty/(100 + @freequantitypercent)) * 100)) INTO @qty;
		END IF;


			IF @qty IS NOT NULL THEN
				SET @free_qty = @qty;
			ELSE
				SET @free_qty = 0;
			END IF;
    

RETURN @free_qty;
END;



CREATE FUNCTION `fnc_cbfPlacementMaterialStatus`(
	p_batchid INT,
    p_companyid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

		SET @returnid = null;
		SET @isPO = null;
		SET @sourceid = null;
        SET @requestid = null;
		
		SELECT sourceid, requestid INTO @sourceid, @requestid FROM cbf_procurementscheduledetail WHERE batchid = p_batchid AND companyid = p_companyid;

		if(@sourceid = 261) THEN -- OWN

			SELECT 
				id INTO @returnid
			FROM 
				materialtransfer
			WHERE
				requestid = @requestid;
				
			-- GROUP BY requestid;
		   
		elseif(@sourceid = 262) THEN -- PURCHASED
			
			SELECT id INTO @returnid FROM purchaseorder 
				WHERE 
					purchaserequestid = @requestid
					
				GROUP BY purchaserequestid;
			
			/*SELECT GR.id INTO @returnid FROM purchaseorder PO
				INNER JOIN grpo GR ON GR.purchaseorderid = PO.id
				WHERE
					PO.purchaserequestid = @requestid
					
				GROUP BY PO.purchaserequestid;*/
		END IF;


			IF @returnid IS NOT NULL THEN
				SET @materialreceiptstatus = @returnid;
			ELSE
				SET @materialreceiptstatus = -1;
			END IF;
    

RETURN @materialreceiptstatus;
END;



CREATE FUNCTION `fnc_cbfPlacementTransactionId`(
	p_sourceid INT,
    p_requestid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

		SET @returnid = null;
		SET @isPO = null;
        SET @transactionid = null;

		if(p_sourceid = 261) THEN -- OWN

			SELECT 
				id INTO @returnid
			FROM 
				materialtransfer
			WHERE
				requestid = p_requestid;
				
			-- GROUP BY requestid;
		   
		elseif(p_sourceid = 262) THEN -- PURCHASED
			
			SELECT id INTO @returnid FROM purchaseorder 
				WHERE 
					purchaserequestid = p_requestid
					
				GROUP BY purchaserequestid;
		END IF;


			IF @returnid IS NOT NULL THEN
				SET @transactionid = @returnid;
			ELSE
				SET @transactionid = 0;
			END IF;
    

RETURN @transactionid;
END;



CREATE FUNCTION `fnc_checkissetterscheduled`(
	p_setterid INT,
    p_companyid INT
) RETURNS tinyint(1)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
     IF EXISTS(
            SELECT HSD.id 
            FROM hatcheryscheduledetail HSD
			-- LEFT JOIN setterbatch SB ON HSD.id = SB.detailsid
            
            where 
				HSD.setterid = p_setterid AND 
				HSD.statusid NOT IN(243, 244) AND 
				HSD.companyid = p_companyid  AND
                id NOT IN (SELECT detailsid from setterbatch WHERE detailsid = id)
              
           ) THEN BEGIN
        
			return true;
	
			END;
    ELSE 
		return false;
        
	END IF;
END;



CREATE FUNCTION `fnc_closingcreditdebitbal`(
	p_acledgerid INT(11),
    p_fromdate DATE,
    p_todate DATE,
    p_type VARCHAR(100)
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @closingcreditdebitbal = null;
    
    SET @cramount = null;
    SET @dramount = null;
    
    SELECT (select REPLACE(cast(IFNULL(SUM(JED.cramount),0) as CHAR(100)), '-', '')), 
		   IFNULL(SUM(JED.dramount),0)
    -- IFNULL(SUM(JED.cramount),0), IFNULL(SUM(JED.cramount),0)
    -- ;
    INTO @cramount, @dramount
    FROM journalentry JE
    LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    WHERE JE.voucherdate BETWEEN p_fromdate AND p_todate;
    
    IF(p_type = 'credit') THEN
		SELECT ((fnc_openingcreditdebitbal(p_acledgerid, p_fromdate, 'credit')) + @cramount) INTO @closingcreditdebitbal;
		
       -- FROM journalentrydetail JED
		
		-- WHERE JED.acledgerid = p_acledgerid;
    
    ELSE  
    
		SELECT ((fnc_openingcreditdebitbal(JED.acledgerid, p_fromdate, 'debit')) + @dramount) INTO @closingcreditdebitbal;
		
		-- FROM journalentrydetail JED
		
		-- WHERE JED.acledgerid = p_acledgerid;
        
        -- group by JED.acledgerid;
        
    END IF;
    
    
RETURN (select REPLACE(cast(@closingcreditdebitbal as CHAR(100)), '-', ''));

-- @closingcreditdebitbal;

-- 
END;



CREATE FUNCTION `fnc_consumptionlivestock`(
    p_itemid INT,
	p_warehouseid INT,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    towarehouseid = p_warehouseid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    towarehouseid = p_warehouseid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    fromwarehouseid = p_warehouseid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
    fromwarehouseid = p_warehouseid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    towarehouseid = p_warehouseid;
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END;



CREATE FUNCTION `fnc_cummulativefeed`(
    p_breederbatchid INT,
	p_itemid INT(11),
    p_shedid VARCHAR(200),
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();

    
    SELECT placementdate INTO @placementdate
    FROM breederbatchplacement
    WHERE breederbatchid = p_breederbatchid;
     
     
	 SELECT IFNULL(SUM(quantity), 0) into @quantity
    FROM
		breederdailyconsumption BDC
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDC.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
        FIND_IN_SET( BDT.shedid, p_shedid) AND
		 BDC.consumptiontypeid = 861 AND
		 itemid = p_itemid AND
         (BDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @quantity;
END;



CREATE FUNCTION `fnc_cummulative_malefemaleculls`(
    p_breederbatchid INT,
    p_shedids varchar(200) ,
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM breederbatchplacement
    WHERE breederbatchid = p_breederbatchid;
     
     
	SELECT SUM(totalculls) INTO @cumucullsquantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid 
         AND FIND_IN_SET(BDT.shedid,p_shedids) AND
         -- BDT.shedid = p_shedid AND 
         BDM.itemid = p_itemid AND
         (BDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @cumucullsquantity;
END;



CREATE FUNCTION `fnc_cummulative_malefemalemortality`(
    p_breederbatchid INT,
    p_shedids VARCHAR(200),
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM breederbatchplacement
    WHERE breederbatchid = p_breederbatchid;
     
     
	SELECT SUM(totalmortality) INTO @cumumprtalityquantity
    FROM
		breederdailymortality BDM
        LEFT JOIN breederdailytransaction BDT ON BDT.id = BDM.breederdailytransactionid
        
	WHERE
		BDT.breederbatchid = p_breederbatchid AND
        FIND_IN_SET(BDT.shedid,p_shedids) AND
         BDM.itemid = p_itemid AND
         (BDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @cumumprtalityquantity;
END;



CREATE FUNCTION `fnc_eggsdistributiondetail_itembatch`(
	p_itembatchid VARCHAR(50),
    p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	 SET @receivedquantity = 0;
    
    SELECT 
		SUM(quantity) - 
			(
				SELECT IFNULL(SUM(quantity),0)
                
				FROM materialmovement 
				WHERE transactiontypeid = 683 AND itembatch = p_itembatchid
				AND companyid = p_companyid
			)
		INTO @receivedquantity
    FROM materialmovement 
    
    WHERE transactiontypeid = 684 
			AND itembatch = p_itembatchid
            AND companyid = p_companyid;
RETURN @receivedquantity;
END;



CREATE FUNCTION `fnc_feedmill_itembatchbalance`(
    p_itemid INT(11),
    p_warehouseid INT(11),
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    
	
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE 
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    itemid = p_itemid AND
    FIND_IN_SET(towarehouseid, p_warehouseid);
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE 
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    FIND_IN_SET(towarehouseid, p_warehouseid);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE 
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    FIND_IN_SET(fromwarehouseid, p_warehouseid);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE 
	companyid = p_companyid AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
    FIND_IN_SET(towarehouseid, p_warehouseid);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE 
	companyid = p_companyid AND
    transactiontypeid = 684 AND
     itemid = p_itemid AND
    FIND_IN_SET(towarehouseid, p_warehouseid);
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END;



CREATE FUNCTION `fnc_freightamount`(
	p_id INT(11)
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

     SET @frieght = null;
     
	SELECT frieght INTO @frieght
    FROM
		purchaseinvoice PI
       
	WHERE
	
         PI.id= p_id
         limit 1;

RETURN @frieght;
END;



CREATE FUNCTION `fnc_getgroupname`(
	p_groupid INT(11)
) RETURNS char(100) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @groupname = null;
    
    SELECT coaname INTO @groupname FROM chartofaccount WHERE id = p_groupid;

RETURN @groupname;
END;



CREATE FUNCTION `fnc_getScheduleDate`(
	p_setterid INT,
	p_detailsid 

INT
    
) RETURNS date
    READS SQL DATA
    DETERMINISTIC
BEGIN
	IF(p_detailsid != 0) THEN
      SET @date = ( SELECT HS.scheduledate
			        FROM
					  hatcheryschedule HS
			          LEFT JOIN hatcheryscheduledetail HSD ON HS.id = HSD.hatcheryscheduleid
                    WHERE
				      HSD.id = p_detailsid AND
                      HSD.statusid NOT IN (243, 244) 
				  );
	ELSE
		SET @date = (SELECT HS.scheduledate
                     FROM
					   hatcheryschedule HS
                       LEFT JOIN hatcheryscheduledetail HSD ON HS.id = HSD.hatcheryscheduleid
                     WHERE
				       HSD.setterid = p_setterid AND
                       HSD.statusid NOT IN (243, 244) -- status not canceled and processed
                    );
    END IF;

   RETURN @date;
   
END;



CREATE FUNCTION `fnc_hatchery_status`(
	p_scheduleid INT
    
) RETURNS tinyint(1)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
     IF EXISTS(
            SELECT 
				HSD.id 
            
            FROM hatcheryscheduledetail HSD
	
            where 
				HSD.hatcheryscheduleid = p_scheduleid AND 
                HSD.statusid = 241
                
            LIMIT 1
           ) THEN BEGIN
        
			return true;
	
			END;
    ELSE 
		return false;
        
	END IF;
END;



CREATE FUNCTION `fnc_itembatchlivestock`(
    p_itemid INT,
    p_itembatch VARCHAR(200),
	p_warehousebinid INT,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    towarehousebinid = p_warehousebinid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    towarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    fromwarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
    fromwarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
    itembatch = p_itembatch AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    towarehousebinid = p_warehousebinid;
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END;



CREATE FUNCTION `fnc_itembatchstockout`(
	p_itemid INT, 
    p_itembatch VARCHAR(200),
    p_warehouseid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @outquantity = 0;

	select quantity INTO @outquantity from 
	(
		select itemid, itembatch, sum(quantity) as quantity from materialmovement
		where 
			 transactiontypeid in (682,683)
			 AND itemid = p_itemid 
            AND itembatch = p_itembatch
            AND fromwarehouseid = p_warehouseid
            
		GROUP BY itemid, itembatch
	) stockout;


RETURN @outquantity;
END;



CREATE FUNCTION `fnc_item_avgweight`(
	p_itemid INT
) RETURNS decimal(9,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @avgweight = 0;

	SELECT avgweight INTO @avgweight FROM breederdailymortality 
    WHERE itemid = p_itemid  
    ORDER BY itemid desc LIMIT 1;

RETURN @avgweight;
END;



CREATE FUNCTION `fnc_layerbatchwise_batchchicksopeningbalance`(
	p_layerbatchid INT,
    p_shedid INT,
    p_transactiondate DATE,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
 SET @coloseingbalance = null;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
     
	IF(@placementdate = p_transactiondate) THEN
    
		SELECT
        IFNULL(SUM(LBPD.quantity),0) INTO @coloseingbalance
		-- LBPD.layershedid
        from layerbatchplacementdetail LBPD
        LEFT JOIN layerbatchplacement LBP ON LBP.id = LBPD.layerbatchplacementid 
        
        where
           LBP.layerbatchid = p_layerbatchid AND
           LBPD.layershedid = p_shedid;
    ELSE
     
		
		SELECT IFNULL(SUM(LBPD.quantity),0) -IFNULL(fnc_layerbatchwise_chickscullsandmortality(p_layerbatchid, p_shedid,p_transactiondate), 0) INTO @coloseingbalance
        from layerbatchplacementdetail LBPD
        LEFT JOIN layerbatchplacement LBP ON LBP.id = LBPD.layerbatchplacementid
        
        where
           LBP.layerbatchid = p_layerbatchid AND
           LBPD.layershedid = p_shedid ;

	 END IF;
   
	RETURN @coloseingbalance;

END;



CREATE FUNCTION `fnc_layerbatchwise_chickscullsandmortality`(
	p_layerbatchid INT,
    p_shedid INT,
    p_transactiondate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
     
     
	SELECT (SUM(todaymortality) + SUM(todayculls) + SUM(sexingerrorquantity)) +IFNULL(fnc_layerbatchwise_transferqty(p_layerbatchid, p_shedid,p_transactiondate), 0) INTO @quantity
    FROM
		layerdailymortality LDM
       
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid AND
        LDT.shedid = p_shedid AND
         (LDT.transactiondate BETWEEN  @placementdate AND p_transactiondate)
          GROUP BY LDT.shedid; -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @quantity;
END;



CREATE FUNCTION `fnc_layerbatchwise_cullsandmortality`(
	p_layerbatchid INT,
    p_shedids VARCHAR(300),
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
     
     
	SELECT SUM(todaymortality) + SUM(todayculls) + SUM(sexingerrorquantity) INTO @quantity
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid AND
         FIND_IN_SET(LDT.shedid,p_shedids) AND 
         LDM.itemid = p_itemid AND
         (LDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @quantity;
END;



CREATE FUNCTION `fnc_layerbatchwise_malefemaleopbalance`(
	p_layerbatchid INT,
    p_shedids VARCHAR(300),
    p_itemid INT,
    p_transactiondate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
     
	IF(@placementdate = p_transactiondate) THEN
    
		SELECT IFNULL(SUM(LBPD.quantity),0) INTO @openingbalance 
        from layerbatchplacementdetail LBPD
        LEFT JOIN layerbatchplacement LBP ON LBP.id = LBPD.layerbatchplacementid
        
        where
           LBP.layerbatchid = p_layerbatchid
           AND FIND_IN_SET(LBPD.layershedid,p_shedids)
           AND LBPD.itemid = p_itemid LIMIT 1;
        
    ELSE
     
		SELECT IFNULL(SUM(LBPD.quantity),0) - IFNULL(fnc_layerbatchwise_cullsandmortality(p_layerbatchid, p_shedids, p_itemid, p_transactiondate), 0) INTO @openingbalance
        from layerbatchplacementdetail LBPD
        LEFT JOIN layerbatchplacement LBP ON LBP.id = LBPD.layerbatchplacementid
        
        where
           LBP.layerbatchid = p_layerbatchid
           AND FIND_IN_SET(LBPD.layershedid,p_shedids)
           AND LBPD.itemid = p_itemid LIMIT 1;

	END IF;
   
	RETURN @openingbalance;

END;



CREATE FUNCTION `fnc_layerbatchwise_transferqty`(
    p_layerbatchid INT,
    p_shedid INT,
    p_transactiondate DATE) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @quantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
    
    SELECT SUM(LBTD.quantity) INTO @quantity
    
    	FROM layerbatchtransferdetail LBTD
        
        LEFT JOIN layerbatchtransfer LBT ON LBT.id = LBTD.layerbatchtransferid
        
	WHERE
    LBT.layerbatchid = p_layerbatchid AND
     LBT.fromshedid = P_shedid
     AND (LBT.transferdate BETWEEN  @placementdate AND p_transactiondate)
      GROUP BY LBT.fromshedid;
RETURN @quantity;
END;



CREATE FUNCTION `fnc_layerconsumptionlivestock`(
    p_itemid INT,
	p_warehousebinid INT,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    towarehousebinid = p_warehousebinid;
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    towarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    fromwarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
    fromwarehousebinid = p_warehousebinid;
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE itemid = p_itemid AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    towarehousebinid = p_warehousebinid;
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END;



CREATE FUNCTION `fnc_layerfeedopeningbalance`(
    p_transactiondate Date,
	p_shedids varchar(200),
    p_itemid INT(11),
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    
	SELECT GROUP_CONCAT(warehousebinid) INTO @warehousebinids
	FROM layershed
    WHERE FIND_IN_SET(id, p_shedids);
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    itemid = p_itemid AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
     itemid = p_itemid AND
    FIND_IN_SET(fromwarehousebinid, @warehousebinids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
     itemid = p_itemid AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
     itemid = p_itemid AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity + @p_receiptquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END;



CREATE FUNCTION `fnc_ledgerbalance`(
	p_id INT(11),
    p_todate DATE,
    p_type VARCHAR(100)
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @ledgerbalance = null;
    
    if(p_type = 'credit') THEN
    
		SELECT (select REPLACE(cast(IFNULL(SUM(JED.cramount),0) as CHAR(100)), '-', ''))
		INTO @ledgerbalance
		FROM journalentry JE
		LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
		LEFT JOIN chartofaccount COA ON COA.id = JED.acledgerid
		WHERE JE.voucherdate = p_todate
		AND COA.id = p_id
        
        group by JED.acledgerid;

	else
    
		SELECT IFNULL(SUM(JED.dramount),0)
		INTO @ledgerbalance
		FROM journalentry JE
		LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
		LEFT JOIN chartofaccount COA ON COA.id = JED.acledgerid
		WHERE JE.voucherdate = p_todate
		AND COA.id = p_id
        
        group by JED.acledgerid;
    
    end if;
RETURN (select REPLACE(cast(@ledgerbalance as CHAR(100)), '-', ''));
END;



CREATE FUNCTION `fnc_linewise_chickslivestock`(
	p_shedlineid INT,
    p_itemid INT,
    p_breederdailytransactionid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
    SET @p_quantity = 0;
    SET @p_breederbatchid = null;
    SET @p_shedid = null;
    
	/*SET @p_quantity = 0;
    SET @p_mortality = 0;
	SET @p_culls = 0;
    SET @p_breederbatchplacementid = 0;

    
    SELECT BBP.id into @p_breederbatchplacementid
    FROM breederdailytransaction BDT
    LEFT JOIN breederbatchplacement BBP ON BDT.breederbatchid = BBP.breederbatchid
    WHERE BDT.id = p_breederdailytransactionid LIMIT 1;
    
    
     SELECT quantity INTO @p_quantity
     FROM breederbatchplacementdetail 
     WHERE
        breederbatchplacementid = @p_breederbatchplacementid AND
		breedershedpenid = p_shedlineid AND
        itemid = p_itemid LIMIT 1;
        
	 SELECT totalmortality, totalculls INTO @p_mortality, @p_culls
     FROM breederdailymortality
     WHERE
     shedlineid = p_shedlineid AND
     itemid = p_itemid AND
     breederdailytransactionid = p_breederdailytransactionid LIMIT 1;
     
   RETURN (IFNULL(@p_quantity, 0) - (IFNULL(@p_mortality, 0) + IFNULL(@p_culls, 0)));
   */
   
	SELECT breederbatchid, shedid into @p_breederbatchid, @p_shedid
    FROM breederdailytransaction 
    WHERE id = p_breederdailytransactionid;
   
   SELECT quantity INTO @p_quantity 
   FROM breederbatchbalance
   WHERE
      breederbatchid = @p_breederbatchid
      AND breedershedid = @p_shedid
      AND breedershedpenid = p_shedlineid
      AND itemid = p_itemid
      AND quantity != 0;
      
      
	RETURN IFNULL(@p_quantity, 0);
    
END;



CREATE FUNCTION `fnc_linewise_chicksplacedtock`(
	p_shedlineid INT,
    p_itemid INT,
    p_breederdailytransactionid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_quantity = 0;
    SET @p_breederbatchplacementid = 0;

    SELECT BBP.id into @p_breederbatchplacementid
    FROM breederdailytransaction BDT
    LEFT JOIN breederbatchplacement BBP ON BDT.breederbatchid = BBP.breederbatchid
    WHERE BDT.id = p_breederdailytransactionid LIMIT 1;
    
     SELECT quantity INTO @p_quantity
     FROM breederbatchplacementdetail 
     WHERE
        breederbatchplacementid = @p_breederbatchplacementid AND
		breedershedpenid = p_shedlineid AND
        itemid = p_itemid LIMIT 1;
        
     
   RETURN IFNULL(@p_quantity, 0);
   
END;



CREATE FUNCTION `fnc_linewise_layer_chickslivestock`(
	p_shedlineid INT,
    p_itemid INT,
    p_layerdailytransactionid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
    SET @p_quantity = 0;
    SET @p_layerbatchid = null;
    SET @p_shedid = null;
    

   
	SELECT layerbatchid, shedid into @p_layerbatchid, @p_shedid
    FROM layerdailytransaction 
    WHERE id = p_layerdailytransactionid;
   
   SELECT quantity INTO @p_quantity 
   FROM layerbatchbalance
   WHERE
      layerbatchid = @p_layerbatchid
      AND layershedid = @p_shedid
      AND layershedlineid = p_shedlineid
      AND itemid = p_itemid
      AND quantity != 0;
      
      
	RETURN IFNULL(@p_quantity, 0);
    
END;



CREATE FUNCTION `fnc_lyr_batchopningbalance`(
	p_layerbatchid INT,
    p_shedids VARCHAR(300),
    p_itemid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @btachopeningbalance = 0;
    
     
		SELECT IFNULL(SUM(LBPD.quantity),0) INTO @btachopeningbalance
        from layerbatchplacementdetail LBPD
        LEFT JOIN layerbatchplacement LBP ON LBP.id = LBPD.layerbatchplacementid
        
        where
           LBP.layerbatchid = p_layerbatchid
           AND FIND_IN_SET(LBPD.layershedid,p_shedids)
           AND LBPD.itemid = p_itemid LIMIT 1;

   
	RETURN @openingbalance;

END;



CREATE FUNCTION `fnc_lyr_batchwise_malefemaleopbal_tillgivendate`(
	p_layerbatchid INT,
    p_shedid INT,
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingbalance = 0;
    SET @totalcullsandmortality = 0;
    SET @transferedquantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
    
    
	-- calculate total culla and mortality for given batch before p_todate
    
	SELECT SUM(todaymortality) + SUM(todayculls) +SUM(sexingerrorquantity)INTO @totalcullsandmortality
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid AND
         LDT.shedid = p_shedid AND 
         LDM.itemid = p_itemid AND
         LDT.transactiondate >= @placementdate AND
         LDT.transactiondate < p_todate;
  
  
	-- calculate transfered male/female quantity befor p_todate
    
	SELECT 			
		SUM(LBTD.quantity) INTO @transferedquantity
                      
	FROM layerbatchtransferdetail LBTD
		 LEFT JOIN layerbatchtransfer LBT ON LBT.id = LBTD.layerbatchtransferid
							
	WHERE 
		LBT.layerbatchid = p_layerbatchid AND
		LBT.fromshedid = p_shedid AND
        LBTD.itemid = p_itemid AND
		LBT.transferdate < p_todate;
        
    
    -- calculate batch opening balance (placed quantity)
    
    SELECT IFNULL(SUM(LBPD.quantity),0) INTO @openingbalance
        from layerbatchplacementdetail LBPD
        LEFT JOIN layerbatchplacement LBP ON LBP.id = LBPD.layerbatchplacementid
        
        where
           LBP.layerbatchid = p_layerbatchid
           AND LBPD.layershedid = p_shedid
           AND LBPD.itemid = p_itemid LIMIT 1;
    
    
	RETURN IFNULL(@openingbalance,0) - IFNULL(@totalcullsandmortality, 0) - IFNULL(@transferedquantity, 0);

END;



CREATE FUNCTION `fnc_lyr_cummulativefeed`(
    p_layerbatchid INT,
	p_itemid INT(11),
    p_shedid VARCHAR(200),
    p_todate DATE,
    p_companyid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @quantity = 0;
    SET @placementdate = NOW();
  
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
     
     
	 SELECT IFNULL(SUM(consumptionquantity), 0) into @quantity
    FROM
		layerdailyconsumption LDC
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDC.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid AND
        FIND_IN_SET( LDT.shedid, p_shedid) AND
		 LDC.consumptiontypeid = 1149 AND
		 itemid = p_itemid AND
         (LDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @quantity;
END;



CREATE FUNCTION `fnc_lyr_cummulative_femaleculls`(
    p_layerbatchid INT,
    p_shedids varchar(200) ,
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @cumucullsquantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
     
     
     SELECT IFNULL(SUM(todayculls), 0) into @cumucullsquantity
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid 
         AND FIND_IN_SET(LDT.shedid,p_shedids) AND
         -- BDT.shedid = p_shedid AND 
         LDM.itemid = p_itemid AND
         (LDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @cumucullsquantity;
END;



CREATE FUNCTION `fnc_lyr_cummulative_femalemortality`(
    p_layerbatchid INT,
    p_shedids VARCHAR(200),
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @cumumprtalityquantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
     
     
     SELECT IFNULL(SUM(todaymortality), 0) into @cumumprtalityquantity
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid AND
        FIND_IN_SET(LDT.shedid,p_shedids) AND
         LDM.itemid = p_itemid AND
         (LDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @cumumprtalityquantity;
END;



CREATE FUNCTION `fnc_lyr_cummulative_femalesexingerror`(
    p_layerbatchid INT,
    p_shedids varchar(200) ,
    p_itemid INT,
    p_todate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @cumusexingerrorquantity = 0;
    SET @placementdate = NOW();
    
    SELECT placementdate INTO @placementdate
    FROM layerbatchplacement
    WHERE layerbatchid = p_layerbatchid;
     

	SELECT IFNULL( SUM(sexingerrorquantity), 0) into @cumusexingerrorquantity
    FROM
		layerdailymortality LDM
        LEFT JOIN layerdailytransaction LDT ON LDT.id = LDM.layerdailytransactionid
        
	WHERE
		LDT.layerbatchid = p_layerbatchid 
         AND FIND_IN_SET(LDT.shedid,p_shedids) AND
         -- BDT.shedid = p_shedid AND 
         LDM.itemid = p_itemid AND
         (LDT.transactiondate BETWEEN  @placementdate AND p_todate); -- (SELECT DATE_SUB(p_todate, INTERVAL 1 DAY)));

RETURN @cumusexingerrorquantity;
END;



CREATE FUNCTION `fnc_lyr_femaleculls_ongivendate`(
	p_layerdailytransactionid INT,
    p_itemid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @todayculls = 0;
       
	SELECT SUM(todayculls) INTO @todayculls
    FROM
		layerdailymortality 
	WHERE
		layerdailytransactionid = p_layerdailytransactionid AND
		itemid = p_itemid;
      
	RETURN IFNULL(@todayculls, 0);

END;



CREATE FUNCTION `fnc_lyr_femalemortality_ongivendate`(
	p_layerdailytransactionid INT,
    p_itemid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @todaymortality = 0;
       
	SELECT SUM(todaymortality) INTO @todaymortality
    FROM
		layerdailymortality 
	WHERE
		layerdailytransactionid = p_layerdailytransactionid AND
		itemid = p_itemid;
      
	RETURN IFNULL(@todaymortality, 0);

END;



CREATE FUNCTION `fnc_lyr_femalesexingerror_ongivendate`(
	p_layerdailytransactionid INT,
    p_itemid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @sexingerrorqty = 0;
       
	SELECT SUM(sexingerrorquantity) INTO @sexingerrorqty
    FROM
		layerdailymortality 
	WHERE
		layerdailytransactionid = p_layerdailytransactionid AND
		itemid = p_itemid;
      
	RETURN IFNULL(@sexingerrorqty, 0);

END;



CREATE FUNCTION `fnc_lyr_female_transferedquantity`(
	p_layerbatchid INT,
    p_shedid varchar(200),
    p_itemid INT,
    p_transferdate DATE
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @transferedquantity = 0;
    
	 SELECT 			
			SUM(LBTD.quantity) INTO @transferedquantity
                      
	FROM layerbatchtransferdetail LBTD
	LEFT JOIN layerbatchtransfer LBT ON LBT.id = LBTD.layerbatchtransferid
							
	WHERE 
		LBT.layerbatchid = p_layerbatchid AND
		LBT.fromshedid = p_shedid AND
        LBTD.itemid = p_itemid AND
		LBT.transferdate = p_transferdate;
                        
RETURN IFNULL(@transferedquantity, 0);

END;



CREATE FUNCTION `fnc_openingcreditdebitbal`(
	p_acledgerid INT(11),
    p_fromdate DATE,
    p_type VARCHAR(100)
) RETURNS decimal(12,3)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @openingcreditdebitbal = null;
    
    SET @cramount = null;
    SET @dramount = null;
    
    SELECT (select REPLACE(cast(IFNULL(SUM(JED.cramount),0) as CHAR(100)), '-', '')), IFNULL(SUM(JED.dramount),0)
    INTO @cramount, @dramount
    FROM journalentry JE
    LEFT JOIN journalentrydetail JED ON JED.journalentryid = JE.id
    WHERE JE.voucherdate < p_fromdate
    AND JED.acledgerid = p_acledgerid;
    
    IF(p_type = 'credit') THEN
		SELECT (IFNULL(LOB.openingbalance,0) - @cramount) INTO @openingcreditdebitbal
		
		FROM ledgeropeningbalance LOB
        LEFT JOIN journalentrydetail JED ON JED.acledgerid = LOB.ledgerid
		
		WHERE LOB.ledgerid = p_acledgerid
        
        group by JED.acledgerid;
    
    ELSE  
    
		SELECT (IFNULL(LOB.openingbalance,0) + @dramount) INTO @openingcreditdebitbal
		
		FROM ledgeropeningbalance LOB
        LEFT JOIN journalentrydetail JED ON JED.acledgerid = LOB.ledgerid
		
		WHERE LOB.ledgerid = p_acledgerid
        
        group by JED.acledgerid;
    
    END IF;
    
    
RETURN IFNULL((select REPLACE(cast(@openingcreditdebitbal as CHAR(100)), '-', '')),0);

-- @openingcreditdebitbal;
END;



CREATE FUNCTION `fnc_partnerrole_select`(
	p_partnerid INT
) RETURNS varchar(1000) CHARSET utf8
    READS SQL DATA
    DETERMINISTIC
BEGIN

	RETURN (SELECT GROUP_CONCAT(id) FROM partnerrole WHERE partnerid = p_partnerid);
	
END;



CREATE FUNCTION `fnc_purchaseorder_remainingquantity`(
	p_id INT(11),
    p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	 SET @remainingquantity = 0;
     SET @qty = NULL;
    
	IF EXISTS(SELECT IFNULL(SUM(quantity),0)
		
			FROM grpodetail GD
			LEFT JOIN grpo G ON G.id = GD.grpoid
			WHERE G.purchaseorderid = p_id
			AND GD.companyid = p_companyid) THEN
			
			BEGIN
				SELECT IFNULL(SUM(quantity),0) INTO @qty
			
				FROM grpodetail GD
				LEFT JOIN grpo G ON G.id = GD.grpoid
				WHERE G.purchaseorderid = p_id
				AND GD.companyid = p_companyid;
			END;
		
		ELSE
			SELECT 0 INTO @qty;
		END IF;
    
    SELECT 
		SUM(quantity) - @qty
			
		INTO @remainingquantity
    FROM purchaseorderdetail 
    
    WHERE purchaseorderid = p_id
            AND companyid = p_companyid;
RETURN @remainingquantity;
END;



CREATE FUNCTION `fnc_salesinvoice_getstatecode`(
	p_salesdeliveryids VARCHAR(200)
) RETURNS varchar(200) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @warehousebinid = 0, @statecode = '';

	SELECT tblWH.warehousebinid, ST.statecode INTO @warehousebinid, @statecode FROM (
		SELECT 
			warehousebinid
		FROM
			salesdeliverydetail 
		WHERE 
			FIND_IN_SET(id, p_salesdeliveryids) LIMIT 1
	) 
    AS tblWH    
    LEFT JOIN `warehousebin` WB ON WB.id = tblWH.warehousebinid
	LEFT JOIN `warehouse` WH ON WH.id = WB.warehouseid
	LEFT JOIN `state` ST ON ST.id = WH.stateid;

	RETURN @statecode;
END;



CREATE FUNCTION `fnc_salesorder_hasdeliveryforinvoice`(
	p_salesorderid INT,
	p_companyid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @isExists  = 0;
    
    
		SELECT 
			COUNT(*) INTO @isExists
		FROM
			salesdelivery SOD
            
		LEFT JOIN salesinvoice SI ON FIND_IN_SET(SOD.id, SI.salesdeliveryids)
        WHERE 
        
			SI.id IS NULL AND SOD.salesorderid = p_salesorderid;
	
    
RETURN @isExists;
END;



CREATE FUNCTION `fnc_salesorder_hasorderquantity`(
	p_salesorderid INT,
	p_companyid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @isExists  = 0;
    
    SELECT CASE WHEN tmpSOqty.quantity > 0 THEN 1 ELSE 0 END INTO @isExists FROM 
    (
		SELECT 
			quantity - IFNULL(fnc_salesorder_itemdeliveredqty(itemid, id), 0) as quantity
		FROM
			salesorderdetail SOD
		WHERE
			salesorderid = p_salesorderid and SOD.companyid = p_companyid
	) 
     AS tmpSOqty
     
    WHERE tmpSOqty.quantity > 0 LIMIT 1;
    
RETURN @isExists;
END;



CREATE FUNCTION `fnc_salesorder_itemdeliveredqty`(
	p_itemid INT,
	p_salesorderdetailid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @sumqty  = 0;
    
    SELECT qty INTO @sumqty FROM (
		SELECT SUM(quantity) as qty FROM salesdeliverydetail
		WHERE salesorderdetailid = p_salesorderdetailid 
			AND itemid = p_itemid
	) 
    AS tblsumqty;

RETURN @sumqty;
END;



CREATE FUNCTION `fnc_salesorder_itemdeliveredweight`(
	p_itemid INT,
	p_salesorderdetailid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @sumweight  = 0;
    
    SELECT qty INTO @sumweight FROM (
		SELECT SUM(IFNULL(weight, 0)) as qty FROM salesdeliverydetail
		WHERE salesorderdetailid = p_salesorderdetailid 
			AND itemid = p_itemid
	) 
    AS tblsumqty;

RETURN @sumweight;
END;



CREATE FUNCTION `fnc_shedqty`(
	p_shedid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @shedqty = 0;
    
    if Exists(select * from breederbatchtransferdetail where toshedid = p_shedid) then
		select SUM(quantity) INTO @shedqty from breederbatchtransferdetail 
        where toshedid = p_shedid;
	else
		select SUM(quantity) INTO @shedqty from breederbatchplacementdetail
        where breedershedid = p_shedid;
    end if;

RETURN shedqty;
END;



CREATE FUNCTION `fnc_shedwise_chickslivestock`(
	p_shedid INT,
    p_itemid INT,
    p_cbfdailytransactionid INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
    SET @p_quantity = 0;
    SET @p_cbf_batchid = null;
    SET @p_shedid = null;
    
	/*SET @p_quantity = 0;
    SET @p_mortality = 0;
	SET @p_culls = 0;
    SET @p_breederbatchplacementid = 0;

    
    SELECT BBP.id into @p_breederbatchplacementid
    FROM breederdailytransaction BDT
    LEFT JOIN breederbatchplacement BBP ON BDT.breederbatchid = BBP.breederbatchid
    WHERE BDT.id = p_breederdailytransactionid LIMIT 1;
    
    
     SELECT quantity INTO @p_quantity
     FROM breederbatchplacementdetail 
     WHERE
        breederbatchplacementid = @p_breederbatchplacementid AND
		breedershedpenid = p_shedlineid AND
        itemid = p_itemid LIMIT 1;
        
	 SELECT totalmortality, totalculls INTO @p_mortality, @p_culls
     FROM breederdailymortality
     WHERE
     shedlineid = p_shedlineid AND
     itemid = p_itemid AND
     breederdailytransactionid = p_breederdailytransactionid LIMIT 1;
     
   RETURN (IFNULL(@p_quantity, 0) - (IFNULL(@p_mortality, 0) + IFNULL(@p_culls, 0)));
   */
   
	SELECT cbf_batchid into @p_cbf_batchid
    FROM cbf_dailytransaction 
    WHERE id = p_cbfdailytransactionid;
   
   SELECT live_batch_qty INTO @p_quantity 
   FROM cbf_batch_details CB
   LEFT JOIN cbf_procurementscheduledetail CPSD ON CPSD.batchid = CB.id
   WHERE
      CB.id = @p_cbf_batchid
      AND CPSD.cbfshedid = p_shedid
      AND CB.breed_id = p_itemid
      AND CB.live_batch_qty != 0;
      
      
	RETURN IFNULL(@p_quantity, 0);
    
END;



CREATE FUNCTION `fnc_subscription_licenseused`(
	p_companysubscriptionid INT
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @licenseused = 0;

	SELECT used INTO @licenseused FROM (
		SELECT COUNT(*) as used
		FROM userlicense 
		WHERE companysubscriptionid = p_companysubscriptionid
    ) AS licenseused;

RETURN @licenseused;
END;



CREATE FUNCTION `fnc_supervisorallocation_employee`(
	p_lineid INT(11),
    p_companyid INT(11)
) RETURNS varchar(1000) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @employeename = null;    
  
    
    SELECT employeename INTO @employeename FROM (
    select 
    
	(SELECT GROUP_CONCAT(EP.employeename) FROM `employee` EP WHERE FIND_IN_SET(EP.id, IFNULL(BWS.empids,0))) AS employeename


    from cbf_branchwisesupervisordetail BWS
    LEFT JOIN employee E ON E.id = BWS.empids
    LEFT JOIN cbf_line L ON L.id = BWS.lineid
    
    where BWS.lineid = p_lineid
    AND BWS.companyid = p_companyid
    
    LIMIT 1
    ) TEMP;
    
    
RETURN @employeename;
END;



CREATE FUNCTION `fnc_supervisorallocation_employee1`(
	p_lineid INT(11),
    p_companyid INT(11)
) RETURNS varchar(1000) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @employeename = null;    
   /* select empids INTO @empids 
    from cbf_branchwisesupervisordetail 
    where lineid = p_lineid;*/
    
    
   /* SELECT GROUP_CONCAT(employeename)  INTO @employeename
    FROM `employee` 
    WHERE 
    FIND_IN_SET(id, @empids);*/
    
    /*SELECT group_concat(employeename) INTO @employeename
    FROM `employee` 
    WHERE 
    FIND_IN_SET(id, @empids);*/
    
    
    SELECT employeename INTO @employeename FROM (
    select 
    
	(SELECT GROUP_CONCAT(EP.employeename) FROM `employee` EP WHERE FIND_IN_SET(EP.id, BWS.empids)) AS employeename


    from cbf_branchwisesupervisordetail BWS
    LEFT JOIN employee E ON E.id = BWS.empids
    LEFT JOIN cbf_line L ON L.id = BWS.lineid
    
    where BWS.lineid = p_lineid
    AND BWS.companyid = p_companyid
    ) TEMP;
    
    
RETURN 'TEST TEST';
END;



CREATE FUNCTION `fnc_taxes_byids`(
	p_taxids VARCHAR(200)
) RETURNS varchar(3000) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @taxnames = '';

	IF(NULLIF(p_taxids, '') IS NOT NULL) THEN

		SELECT 
			GROUP_CONCAT(P.taxname ORDER BY P.id SEPARATOR ',' ) INTO @taxnames 
		FROM 
			`tax` P WHERE FIND_IN_SET(id, p_taxids);
        
	END IF;

RETURN @taxnames;

END;



CREATE FUNCTION `fnc_taxpercents_byids`(
	p_taxids VARCHAR(200)
) RETURNS varchar(3000) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @taxpercents = '';

	IF(NULLIF(p_taxids, '') IS NOT NULL) THEN

		SELECT 
			GROUP_CONCAT(P.taxpercent ORDER BY P.id SEPARATOR ',' ) INTO @taxpercents 
		FROM 
			`tax` P WHERE FIND_IN_SET(id, p_taxids);
        
	END IF;

RETURN @taxpercents;

END;



CREATE FUNCTION `fnc_taxtypes_byids`(
	p_taxids VARCHAR(200)
) RETURNS varchar(3000) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @taxtypes = '';

	IF(NULLIF(p_taxids, '') IS NOT NULL) THEN

		SELECT 
			GROUP_CONCAT(R.refname ORDER BY P.id SEPARATOR ',' ) INTO @taxtypes
		FROM 
			`tax` P 
		INNER JOIN `reference` R ON P.taxtypeid = R.id
            WHERE FIND_IN_SET(P.id, p_taxids);
        
	END IF;

RETURN @taxtypes;

END;



CREATE FUNCTION `fnc_test123`(
	p_lineid INT(11),
    p_companyid INT(11)
) RETURNS varchar(1000) CHARSET utf8mb4
    READS SQL DATA
    DETERMINISTIC
BEGIN
	SET @employeename = null;    
   /* select empids INTO @empids 
    from cbf_branchwisesupervisordetail 
    where lineid = p_lineid;*/
    
    
   /* SELECT GROUP_CONCAT(employeename)  INTO @employeename
    FROM `employee` 
    WHERE 
    FIND_IN_SET(id, @empids);*/
    
    /*SELECT group_concat(employeename) INTO @employeename
    FROM `employee` 
    WHERE 
    FIND_IN_SET(id, @empids);*/
    
    
    SELECT employeename INTO @employeename FROM (
    select 
    
	(SELECT GROUP_CONCAT(EP.employeename) FROM `employee` EP WHERE FIND_IN_SET(EP.id, BWS.empids)) AS employeename


    from cbf_branchwisesupervisordetail BWS
    LEFT JOIN employee E ON E.id = BWS.empids
    LEFT JOIN cbf_line L ON L.id = BWS.lineid
    
    where BWS.lineid = p_lineid
    AND BWS.companyid = p_companyid
    ) TEMP;
    
    
RETURN @employeename;
END;



CREATE FUNCTION `fnc_totalreceived_feed`(
    p_shedids VARCHAR(200),
    p_fromdate DATE,
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

    SET @warehousebinids = null;
    SET @recivedquantity = 0;
    SET @defaultmalechickid = null;
	SET @defaultfemalechickid = null;
    
      SELECT  
		defaultmalechickid,defaultfemalechickid
		INTO @defaultmalechickid,@defaultfemalechickid
	FROM
		breedersetting
        
        WHERE 
			companyid = p_companyid limit 1;
            
            
    SELECT GROUP_CONCAT(warehousebinid) INTO @warehousebinids
	FROM breedershed
    WHERE FIND_IN_SET(id, p_shedids);
  
  
    SELECT IFNULL(SUM(quantity), 0) into @recivedquantity
    FROM materialmovement
    
    WHERE
	companyid = p_companyid AND
    transactiontypeid in(681, 682) AND
    FIND_IN_SET(towarehousebinid, @warehousebinids)
    AND transactiondate <= p_fromdate;
   --  AND itemid not in (@defaultmalechickid, @defaultfemalechickid);
    
    
   RETURN @recivedquantity;
END;



CREATE FUNCTION `fnc_user_assignedlicenses`(
	p_userid INT
) RETURNS varchar(1000) CHARSET utf8
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @licenses = '';

	SELECT licenses INTO @licenses FROM (
		SELECT 
			GROUP_CONCAT(CS.licensetypename) AS licenses
		FROM userlicense UL
		LEFT JOIN companysubscription CS ON UL.companysubscriptionid = CS.id
		WHERE
			UL.userid = p_userid
	) 
	AS tbllicenses;
    
RETURN @licenses;
END;



CREATE FUNCTION `fnc_user_assignedsubscriptionids`(
	p_userid INT
) RETURNS varchar(1000) CHARSET utf8
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @companysubscriptionid = 0;

	SELECT companysubscriptionid INTO @companysubscriptionid FROM (
		SELECT 
			GROUP_CONCAT(CS.id) AS companysubscriptionid
		FROM userlicense UL
		LEFT JOIN companysubscription CS ON UL.companysubscriptionid = CS.id
		WHERE
			UL.userid = p_userid
	) 
	AS tbllicenses;
    
RETURN @companysubscriptionid;
END;



CREATE FUNCTION `fnc_user_roleids`(
	p_userid INT
) RETURNS varchar(1000) CHARSET utf8
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @roleids = '';

	SELECT roleids INTO @roleids FROM (
		SELECT 
			GROUP_CONCAT(roleid) AS roleids
		FROM userlicense
		WHERE
			userid = p_userid
	) 
	AS tbluserroleids;
    
RETURN @roleids;
END;



CREATE FUNCTION `fnc_user_rolenames`(
	p_userid INT
) RETURNS varchar(1000) CHARSET utf8
    READS SQL DATA
    DETERMINISTIC
BEGIN

	SET @rolenames = '';

	SELECT rolenames INTO @rolenames FROM (
		SELECT 
			GROUP_CONCAT(rolename) AS rolenames
		FROM userlicense UL
        LEFT JOIN role R ON UL.roleid = R.id
		WHERE
			userid = p_userid
	) 
	AS tbluserrolenames;
    
RETURN @rolenames;
END;



CREATE FUNCTION `fun_billdate`(
 p_itemid INT,
 p_warehouseids VARCHAR(200),
 p_transactiondate DATE,
 p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @billdate = null;
   SET @transactionid = null;
    
  
    SELECT 
    transactionid INTO @transactionid--  IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate = p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    FIND_IN_SET(towarehouseid, p_warehouseids);
    
	
    SELECT
	invoicedate INTO @billdate
    FROM purchaseinvoice
	 WHERE 
    grpono = @transactionid AND
	companyid = p_companyid ;

    
   /* SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);*/
    
   
   RETURN @billdate;
   
END;



CREATE FUNCTION `fun_billno`(
 p_itemid INT,
 p_warehouseids VARCHAR(200),
 p_transactiondate DATE,
 p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @billno = null;
   SET @transactionid = null;
    
  
    SELECT 
    transactionid INTO @transactionid--  IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate = p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    FIND_IN_SET(towarehouseid, p_warehouseids);
    
	
    SELECT
    id INTO @billno
    
    FROM purchaseinvoice
	 WHERE 
    grpono = @transactionid AND
	companyid = p_companyid ;

    
   /* SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);*/
    
   
   RETURN @billno;
   
END;



CREATE FUNCTION `fun_feedreqclosingbalance`(
    p_breederbatchid INT(11),
    p_itemid INT(11),
    p_companyid INT
   
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
SET @closingfeed = null;
	
 select
	  
      fnc_breederfeedopeningbalance(transactiondate,shedid,itemid,p_companyid) INTO @closingfeed
       
	 FROM 
	  breederdailytransaction BDT

		Left Join breederdailyconsumption BDC ON BDT.id = BDC.breederdailytransactionid AND  BDC.consumptiontypeid = 861

	WHERE
		BDT.breederbatchid = p_breederbatchid AND
        breederitemid = p_itemid AND
        BDT.companyid = p_companyid;
        
	RETURN @closingfeed;
 
END;



CREATE FUNCTION `fun_feedstditemwise`(
    p_itemid INT,
    p_weekno INT,
    p_days INT
    
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN

SET @feedrequired = 0;
     
	SELECT ((feedconsumed/7) *p_days) INTO @feedrequired
	FROM
		breederfeedstandard BF
		LEFT JOIN breederfeedstandarddetail BFD ON BF.id = BFD.breederfeedstandardid
	WHERE
	breeditemid = p_itemid AND
	weeknumber = p_weekno;

RETURN IFNULL(@feedrequired, 0);

END;



CREATE FUNCTION `fun_itembatchclosingbalance`(
 p_itemid INT,
 p_itembatch VARCHAR(200),
 p_warehouseids VARCHAR(200),
 p_transactiondate DATE,
 p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
	itembatch  = p_itembatch AND
    FIND_IN_SET(towarehouseid, p_warehouseids);
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    itembatch  = p_itembatch AND
    FIND_IN_SET(towarehouseid, p_warehouseids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    itembatch  = p_itembatch AND
    FIND_IN_SET(fromwarehouseid, @p_warehouseids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE
    itemid = p_itemid AND 
    transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
    itembatch  = p_itembatch AND
    FIND_IN_SET(towarehouseid, @p_warehouseids);
    
   /* SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);*/
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END;



CREATE FUNCTION `fun_iteminquntity`(
 p_itemid INT,
 p_warehouseids VARCHAR(200),
 p_transactiondate DATE,
 p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate = p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    FIND_IN_SET(towarehouseid, p_warehouseids);
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate = p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    FIND_IN_SET(towarehouseid, p_warehouseids);
    

    
   /* SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);*/
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity);
   
END;



CREATE FUNCTION `fun_itemwiseclosingbalance`(
 p_itemid INT,
 p_warehouseids VARCHAR(200),
 p_transactiondate DATE,
 p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    
  
    SELECT IFNULL(SUM(quantity), 0) into @p_inwardquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 681 AND
    FIND_IN_SET(towarehouseid, p_warehouseids);
    
	SELECT IFNULL(SUM(quantity), 0) into @p_transferinquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    FIND_IN_SET(towarehouseid, p_warehouseids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    FIND_IN_SET(fromwarehouseid, @p_warehouseids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE
    itemid = p_itemid AND 
    transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
    FIND_IN_SET(towarehouseid, @p_warehouseids);
    
   /* SELECT IFNULL(SUM(quantity), 0) into @p_receiptquantity
    FROM materialmovement
    WHERE transactiondate <= p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 684 AND
    FIND_IN_SET(towarehousebinid, @warehousebinids);*/
    
   
   RETURN (@p_inwardquantity + @p_transferinquantity) - (@p_issuequantity + @p_transferoutquantity);
   
END;



CREATE FUNCTION `fun_itemwiseOunt`(
 p_itemid INT,
 p_warehouseids VARCHAR(200),
 p_transactiondate DATE,
 p_companyid INT(11)
) RETURNS int(11)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	
	SET @p_inwardquantity = 0;
    SET @p_transferinquantity = 0;
    SET @p_transferoutquantity = 0;
    SET @p_issuequantity = 0;
	SET @p_receiptquantity = 0;
    
 
    
    SELECT IFNULL(SUM(quantity), 0) into @p_transferoutquantity
    FROM materialmovement
    WHERE 
    itemid = p_itemid AND
    transactiondate = p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 682 AND
    FIND_IN_SET(fromwarehouseid, @p_warehouseids);
    
    SELECT IFNULL(SUM(quantity), 0) into @p_issuequantity
    FROM materialmovement
    WHERE
    itemid = p_itemid AND 
    transactiondate = p_transactiondate AND
	companyid = p_companyid AND
    transactiontypeid = 683 AND
    FIND_IN_SET(towarehouseid, @p_warehouseids);
    
   
   RETURN (@p_issuequantity + @p_transferoutquantity);
   
END;



